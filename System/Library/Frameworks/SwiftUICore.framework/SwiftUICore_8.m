uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(_OWORD *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t result;
  long long v5;
  long long v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char v12[80];
  uint64_t v13;

  v13 = *MEMORY[0x263EF8340];
  result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    *(_DWORD *)v12 = 1065353216;
    *(_OWORD *)&v12[4] = 0uLL;
    *(void *)&v12[20] = 0x3F80000000000000;
    *(_OWORD *)&v12[28] = 0uLL;
    *(_OWORD *)&v12[44] = 0x3F80000000000000uLL;
    *(void *)&v12[60] = 0;
    *(_DWORD *)&v12[68] = 0;
    *(void *)&v12[72] = 1065353216;
    closure #1 in _ColorMatrix.init(from:)((unint64_t)v12, v1, &v11);
    v5 = *(_OWORD *)&v12[48];
    a1[2] = *(_OWORD *)&v12[32];
    a1[3] = v5;
    a1[4] = *(_OWORD *)&v12[64];
    v6 = *(_OWORD *)&v12[16];
    *a1 = *(_OWORD *)v12;
    a1[1] = v6;
    v7 = (void *)v1[5];
    if (v7[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        v8 = v7[2];
        if (v8)
        {
LABEL_5:
          v9 = v8 - 1;
          v10 = v7[v9 + 4];
          v7[2] = v9;
          v1[5] = v7;
          v1[2] = v10;
          return result;
        }
LABEL_9:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v7 = (void *)result;
    v8 = *(void *)(result + 16);
    if (v8) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(double *a1@<X8>)
{
  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    _Rotation3DEffect.Data.init(from:)(v1, a1);
    v5 = *(void **)(v1 + 40);
    if (v5[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v6 = v5[2];
        if (v6)
        {
LABEL_5:
          uint64_t v7 = v6 - 1;
          uint64_t v8 = v5[v7 + 4];
          v5[2] = v7;
          *(void *)(v1 + 40) = v5;
          *(void *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 16);
    if (v6) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    _RotationEffect.Data.init(from:)(v1, a1);
    v5 = *(void **)(v1 + 40);
    if (v5[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v6 = v5[2];
        if (v6)
        {
LABEL_5:
          uint64_t v7 = v6 - 1;
          uint64_t v8 = v5[v7 + 4];
          v5[2] = v7;
          *(void *)(v1 + 40) = v5;
          *(void *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 16);
    if (v6) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_245ADDEF4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  v5.super.super.isa = *(Class *)(v4 + 16);
  return closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(a1, a2, a3, a4, v5);
}

uint64_t sub_245ADDF34()
{
  return swift_deallocObject();
}

uint64_t sub_245ADDF44()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CodableAttributedString.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in CodableAttributedString.encode(to:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_245ADDF5C()
{
  return swift_deallocObject();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 40 * result;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a4[7] + result) = a3 & 1;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(unsigned char *)(a4[7] + result) = a3 & 1;
  uint64_t v4 = a4[2];
  long long v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a6[6] + 4 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  *uint64_t v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a7[6] + 32 * result;
  *(unsigned char *)uint64_t v7 = a2 & 1;
  *(unsigned char *)(v7 + 1) = BYTE1(a2) & 1;
  *(unsigned char *)(v7 + 2) = BYTE2(a2) & 1;
  *(void *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  *(void *)(a7[7] + 8 * result) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for NamedImage.BitmapKey(0);
  uint64_t result = _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for NamedImage.BitmapKey);
  v11 = (_OWORD *)(a4[7] + 96 * a1);
  long long v12 = a3[1];
  _OWORD *v11 = *a3;
  v11[1] = v12;
  *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)((char *)a3 + 73);
  long long v13 = a3[4];
  long long v14 = a3[2];
  v11[3] = a3[3];
  v11[4] = v13;
  v11[2] = v14;
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  long long v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  v11 = (_OWORD *)(a4[7] + 48 * a1);
  *(_OWORD *)((char *)v11 + 25) = *(_OWORD *)((char *)a3 + 25);
  long long v12 = a3[1];
  _OWORD *v11 = *a3;
  v11[1] = v12;
  long long v13 = a4[2];
  long long v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, int a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(_DWORD *)(a4[7] + 4 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(double *)(a3[6] + 8 * result) = a4;
  uint64_t v4 = a3[7] + 56 * result;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of ScrollStateRequest(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

{
  void *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of ScrollStateRequest(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  a4[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a4[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  uint64_t v4 = (_OWORD *)(a4[7] + 80 * result);
  long long v5 = a3[4];
  long long v6 = a3[2];
  v4[3] = a3[3];
  v4[4] = v5;
  long long v7 = a3[1];
  *uint64_t v4 = *a3;
  v4[1] = v7;
  v4[2] = v6;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, void *a3, double a4, double a5)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a3[6] + result) = a2;
  long long v5 = (double *)(a3[7] + 16 * result);
  double *v5 = a4;
  v5[1] = a5;
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  BOOL v7 = (void *)(a7[6] + 16 * result);
  *BOOL v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, double a7, double a8)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = a6[6] + 32 * result;
  *(void *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 8) = a3 & 1;
  *(void *)(v8 + 16) = a4;
  *(unsigned char *)(v8 + 24) = a5 & 1;
  uint64_t v9 = (double *)(a6[7] + 16 * result);
  *uint64_t v9 = a7;
  v9[1] = a8;
  uint64_t v10 = a6[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a6[2] = v12;
  }
  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    BOOL v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    BOOL v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  BOOL v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x24C522990);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x24C522990](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24C522990]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_245ADF470()
{
  return swift_deallocObject();
}

void type metadata accessor for ResolvableTextSegmentAttribute.Value?(uint64_t a1)
{
}

void type metadata accessor for (key: NSAttributedStringKey, value: Any)?(uint64_t a1)
{
}

uint64_t outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t specialized static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v90 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResolvableStringAttribute?(a1, (uint64_t)v82, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  uint64_t v16 = v83;
  if (!v83)
  {
    outlined destroy of AnyTrackedValue?((uint64_t)v82, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
    long long v85 = 0u;
    long long v86 = 0u;
    uint64_t v87 = 0;
    return outlined destroy of AnyTrackedValue?((uint64_t)&v85, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  }
  uint64_t v79 = a2;
  uint64_t v77 = v10;
  uint64_t v17 = v84;
  __swift_project_boxed_opaque_existential_1(v82, v83);
  uint64_t v18 = *(void *)(a3 + 16);
  *(_OWORD *)v81 = *(_OWORD *)a3;
  *(void *)&v81[16] = v18;
  *(_OWORD *)&v81[24] = *(_OWORD *)(a3 + 24);
  ProtobufEncoder.archiveOptions.getter(v80);
  v81[0] = v80[1];
  (*(void (**)(long long *__return_ptr, unsigned char *, uint64_t, uint64_t))(v17 + 32))(&v85, v81, v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
  if (!*((void *)&v86 + 1)) {
    return outlined destroy of AnyTrackedValue?((uint64_t)&v85, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  }
  outlined init with take of ScrollStateRequest(&v85, (uint64_t)v88);
  __swift_project_boxed_opaque_existential_1(v88, v89);
  swift_getDynamicType();
  char v19 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
  uint64_t v20 = one-time initialization token for attribute;
  id v76 = v19;
  id v21 = v19;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v78 = v21;
  if (v22 == v25 && v24 == v26)
  {
    uint64_t v27 = 16;
LABEL_8:
    uint64_t v28 = v79;
LABEL_9:

    swift_bridgeObjectRelease_n();
    goto LABEL_43;
  }
  v30 = v21;
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31)
  {
    uint64_t v27 = 16;
LABEL_42:
    uint64_t v28 = v79;
LABEL_43:
    uint64_t v60 = v89;
    v61 = __swift_project_boxed_opaque_existential_1(v88, v89);
    encode #1 <A>(_:) in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)((uint64_t)v61, a3, v27, v60);
    if (v3)
    {
    }
    else
    {
      outlined init with copy of AnyTrackedValue((uint64_t)v88, (uint64_t)v82);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
      if (swift_dynamicCast())
      {
        outlined init with take of ScrollStateRequest((long long *)v81, (uint64_t)&v85);
        uint64_t v62 = *((void *)&v86 + 1);
        uint64_t v63 = v87;
        __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
        (*(void (**)(uint64_t, uint64_t))(v63 + 40))(v62, v63);
        specialized ProtobufEncoder.codableField<A>(_:_:)(20, (uint64_t)v15);
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v15, type metadata accessor for ResolvableAttributeConfiguration);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      }
      else
      {
        memset(v81, 0, sizeof(v81));
        outlined destroy of AnyTrackedValue?((uint64_t)v81, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
      }
      id v64 = v78;
      outlined init with copy of ResolvableTextSegmentAttribute.Value(v28, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      uint64_t v65 = v77;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v9, 1, v77) == 1)
      {

        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      }
      else
      {
        _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0((uint64_t)v9, (uint64_t)v12, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        objc_storeStrong((id *)&v12[*(int *)(v65 + 20)], v76);
        specialized ProtobufEncoder.codableField<A>(_:_:)(34, (uint64_t)v12);
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v12, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      }
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
  }
  uint64_t v32 = one-time initialization token for attribute;
  id v75 = v30;
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
  {
    uint64_t v27 = 17;
    uint64_t v28 = v79;
    id v21 = v75;
    goto LABEL_9;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v38 = v75;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37)
  {
    uint64_t v27 = 17;
    goto LABEL_42;
  }
  uint64_t v39 = one-time initialization token for attribute;
  id v21 = v38;
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;
  if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43)
  {
    uint64_t v27 = 18;
    goto LABEL_8;
  }
  v44 = v21;
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v45)
  {
    uint64_t v27 = 18;
    goto LABEL_42;
  }
  uint64_t v46 = one-time initialization token for attribute;
  id v21 = v44;
  if (v46 != -1) {
    swift_once();
  }
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
  {
    uint64_t v27 = 19;
    goto LABEL_8;
  }
  v51 = v21;
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v52)
  {
    uint64_t v27 = 19;
    goto LABEL_42;
  }
  uint64_t v53 = one-time initialization token for attribute;
  id v21 = v51;
  if (v53 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
  {
    uint64_t v27 = 33;
    goto LABEL_8;
  }
  v58 = v21;
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59)
  {
    uint64_t v27 = 33;
    goto LABEL_42;
  }
  id v66 = v58;
  id v21 = (id)MEMORY[0x24C522820](0xD000000000000024, 0x800000024621C090);
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;
  if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v70)
  {

    uint64_t v27 = 35;
    goto LABEL_8;
  }
  LODWORD(v75) = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v74 = v66;

  swift_bridgeObjectRelease();
  uint64_t v71 = swift_bridgeObjectRelease();
  if (v75)
  {
    uint64_t v27 = 35;
    goto LABEL_42;
  }
  MEMORY[0x270FA5388](v71);
  v72 = v74;
  *(&v73 - 2) = (uint64_t)v74;
  specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:));

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
}

uint64_t partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)()
{
  return specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)(*(void *)(v0 + 16), **(void ***)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error;
  if (!lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error;
  if (!lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error);
  }
  return result;
}

id specialized CodableNSParagraphStyle.init(from:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81650]), sel_init);
  objc_msgSend(v3, sel_setHorizontalAlignment_, 2);
  objc_msgSend(v3, sel_setLineBreakMode_, 4);
  objc_msgSend(v3, sel_setLineBreakStrategy_, 0xFFFFLL);
  objc_msgSend(v3, sel_setAllowsDefaultTighteningForTruncation_, 0);
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  objc_msgSend(v3, sel_setCompositionLanguage_, ProtobufDecoder.preferredCompositionLanguage.getter());
  if (v4 >= v5)
  {
    a1[3] = 0;
    return v3;
  }
  int v61 = 0;
  char v62 = 1;
  while (1)
  {
    unint64_t v10 = a1[3];
    if (!v10) {
      break;
    }
    unint64_t v11 = a1[4];
    if (v4 >= v11)
    {
      if (v11 < v4) {
        goto LABEL_144;
      }
      a1[3] = 0;
      break;
    }
LABEL_14:
    switch(v10 >> 3)
    {
      case 1uLL:
        if ((v10 & 7) == 0) {
          goto LABEL_141;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v55 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v55 < 0) {
          goto LABEL_167;
        }
        unint64_t v56 = a1[1] + v55;
        if (v5 < v56) {
          goto LABEL_144;
        }
        a1[3] = 8;
        a1[4] = v56;
LABEL_141:
        unsigned __int8 v57 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        char v62 = 0;
        int v61 = v57;
        unint64_t v4 = a1[1];
        unint64_t v5 = a1[2];
        if (v4 < v5) {
          continue;
        }
        a1[3] = 0;
        goto LABEL_148;
      case 2uLL:
        if ((v10 & 7) == 0) {
          goto LABEL_21;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v12 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v12 < 0) {
          goto LABEL_155;
        }
        unint64_t v13 = a1[1] + v12;
        if (v5 < v13) {
          goto LABEL_144;
        }
        a1[3] = 16;
        a1[4] = v13;
LABEL_21:
        uint64_t v14 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v14 < 0)
        {
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
          JUMPOUT(0x245AE0834);
        }
        objc_msgSend(v3, sel_setLineBreakMode_, v14);
        break;
      case 3uLL:
        if ((v10 & 7) == 0) {
          goto LABEL_33;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v15 < 0) {
          goto LABEL_156;
        }
        unint64_t v16 = a1[1] + v15;
        if (v5 < v16) {
          goto LABEL_144;
        }
        a1[3] = 24;
        a1[4] = v16;
LABEL_33:
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        objc_msgSend(v3, (SEL)&selRef_setContentsSwizzle_ + 1, v17);
        break;
      case 4uLL:
        unint64_t v18 = v10 & 7;
        if (v18 == 5)
        {
          uint64_t v7 = (float *)a1[1];
          if (v5 < (unint64_t)(v7 + 1)) {
            goto LABEL_144;
          }
          float v8 = *v7;
          a1[1] = v7 + 1;
          double v9 = v8;
        }
        else
        {
          if (v18 == 2)
          {
            uint64_t v40 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            if (v40 < 0) {
              goto LABEL_162;
            }
            char v19 = (double *)a1[1];
            if (v5 < (unint64_t)v19 + v40) {
              goto LABEL_144;
            }
            a1[3] = 33;
            a1[4] = (char *)v19 + v40;
          }
          else
          {
            if (v18 != 1) {
              goto LABEL_144;
            }
            char v19 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v19 + 1)) {
            goto LABEL_144;
          }
          double v9 = *v19;
          a1[1] = v19 + 1;
        }
        objc_msgSend(v3, sel_setLineSpacing_, v9);
        break;
      case 5uLL:
        unint64_t v20 = v10 & 7;
        if (v20 == 5)
        {
          uint64_t v41 = (float *)a1[1];
          if (v5 < (unint64_t)(v41 + 1)) {
            goto LABEL_144;
          }
          float v42 = *v41;
          a1[1] = v41 + 1;
          double v43 = v42;
        }
        else
        {
          if (v20 == 2)
          {
            uint64_t v44 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            if (v44 < 0) {
              goto LABEL_163;
            }
            id v21 = (double *)a1[1];
            if (v5 < (unint64_t)v21 + v44) {
              goto LABEL_144;
            }
            a1[3] = 41;
            a1[4] = (char *)v21 + v44;
          }
          else
          {
            if (v20 != 1) {
              goto LABEL_144;
            }
            id v21 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v21 + 1)) {
            goto LABEL_144;
          }
          double v43 = *v21;
          a1[1] = v21 + 1;
        }
        objc_msgSend(v3, sel_setLineHeightMultiple_, v43);
        break;
      case 6uLL:
        unint64_t v22 = v10 & 7;
        if (v22 == 5)
        {
          char v45 = (float *)a1[1];
          if (v5 < (unint64_t)(v45 + 1)) {
            goto LABEL_144;
          }
          float v46 = *v45;
          a1[1] = v45 + 1;
          double v47 = v46;
        }
        else
        {
          if (v22 == 2)
          {
            uint64_t v48 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            if (v48 < 0) {
              goto LABEL_164;
            }
            uint64_t v23 = (double *)a1[1];
            if (v5 < (unint64_t)v23 + v48) {
              goto LABEL_144;
            }
            a1[3] = 49;
            a1[4] = (char *)v23 + v48;
          }
          else
          {
            if (v22 != 1) {
              goto LABEL_144;
            }
            uint64_t v23 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v23 + 1)) {
            goto LABEL_144;
          }
          double v47 = *v23;
          a1[1] = v23 + 1;
        }
        objc_msgSend(v3, sel_setMaximumLineHeight_, v47);
        break;
      case 7uLL:
        unint64_t v24 = v10 & 7;
        if (v24 == 5)
        {
          uint64_t v49 = (float *)a1[1];
          if (v5 < (unint64_t)(v49 + 1)) {
            goto LABEL_144;
          }
          float v50 = *v49;
          a1[1] = v49 + 1;
          double v51 = v50;
        }
        else
        {
          if (v24 == 2)
          {
            uint64_t v52 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            if (v52 < 0) {
              goto LABEL_165;
            }
            uint64_t v25 = (double *)a1[1];
            if (v5 < (unint64_t)v25 + v52) {
              goto LABEL_144;
            }
            a1[3] = 57;
            a1[4] = (char *)v25 + v52;
          }
          else
          {
            if (v24 != 1) {
              goto LABEL_144;
            }
            uint64_t v25 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v25 + 1)) {
            goto LABEL_144;
          }
          double v51 = *v25;
          a1[1] = v25 + 1;
        }
        objc_msgSend(v3, sel_setMinimumLineHeight_, v51);
        break;
      case 8uLL:
        if ((v10 & 7) == 2)
        {
          uint64_t v39 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_145;
          }
          if (v39 < 0) {
            goto LABEL_161;
          }
          uint64_t v26 = (_DWORD *)a1[1];
          if (v5 < (unint64_t)v26 + v39) {
            goto LABEL_144;
          }
          a1[3] = 69;
          a1[4] = (char *)v26 + v39;
        }
        else
        {
          if ((v10 & 7) != 5) {
            goto LABEL_144;
          }
          uint64_t v26 = (_DWORD *)a1[1];
        }
        if (v5 < (unint64_t)(v26 + 1)) {
          goto LABEL_144;
        }
        LODWORD(v6) = *v26;
        a1[1] = v26 + 1;
        objc_msgSend(v3, sel_setHyphenationFactor_, v6);
        break;
      case 9uLL:
        if ((v10 & 7) == 0) {
          goto LABEL_60;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v27 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v27 < 0) {
          goto LABEL_157;
        }
        unint64_t v28 = a1[1] + v27;
        if (v5 < v28) {
          goto LABEL_144;
        }
        a1[3] = 72;
        a1[4] = v28;
LABEL_60:
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        objc_msgSend(v3, (SEL)&selRef_toPhase + 3, v29 != 0);
        break;
      case 0xAuLL:
        if ((v10 & 7) == 0) {
          goto LABEL_68;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v30 < 0) {
          goto LABEL_158;
        }
        unint64_t v31 = a1[1] + v30;
        if (v5 < v31) {
          goto LABEL_144;
        }
        a1[3] = 80;
        a1[4] = v31;
LABEL_68:
        uint64_t v32 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        objc_msgSend(v3, sel_setBaseWritingDirection_, -(v32 & 1) ^ (v32 >> 1));
        break;
      case 0xBuLL:
        if ((v10 & 7) == 0) {
          goto LABEL_76;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v33 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v33 < 0) {
          goto LABEL_159;
        }
        unint64_t v34 = a1[1] + v33;
        if (v5 < v34) {
          goto LABEL_144;
        }
        a1[3] = 88;
        a1[4] = v34;
LABEL_76:
        uint64_t v35 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        objc_msgSend(v3, sel_setSpansAllLines_, v35 != 0);
        break;
      case 0xCuLL:
        if ((v10 & 7) == 0) {
          goto LABEL_85;
        }
        if ((v10 & 7) != 2) {
          goto LABEL_144;
        }
        uint64_t v36 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        if (v36 < 0) {
          goto LABEL_160;
        }
        unint64_t v37 = a1[1] + v36;
        if (v5 < v37) {
          goto LABEL_144;
        }
        a1[3] = 96;
        a1[4] = v37;
LABEL_85:
        unsigned __int8 v38 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_145;
        }
        objc_msgSend(v3, (SEL)&selRef_setRendersAsynchronously_ + 5, v38);
        break;
      default:
        switch(v10 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v53 = a1[1] + 8;
            if (v5 < v53) {
              goto LABEL_144;
            }
            goto LABEL_134;
          case 2uLL:
            uint64_t v54 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_145;
            }
            if (v54 < 0) {
              goto LABEL_166;
            }
            unint64_t v53 = a1[1] + v54;
            if (v5 < v53) {
              goto LABEL_144;
            }
LABEL_134:
            a1[1] = v53;
            break;
          case 5uLL:
            unint64_t v53 = a1[1] + 4;
            if (v5 >= v53) {
              goto LABEL_134;
            }
            goto LABEL_144;
          default:
            goto LABEL_144;
        }
        break;
    }
LABEL_7:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5)
    {
      a1[3] = 0;
      if ((v62 & 1) == 0)
      {
LABEL_148:
        uint64_t v59 = 2;
        if (v61 == 1) {
          uint64_t v59 = 3;
        }
        if (v61 == 2) {
          uint64_t v60 = 4;
        }
        else {
          uint64_t v60 = v59;
        }
        objc_msgSend(v3, sel_setHorizontalAlignment_, v60);
        objc_msgSend(v3, sel_setFullyJustified_, v61 == 3);
      }
      return v3;
    }
  }
  unint64_t v10 = ProtobufDecoder.decodeVarint()();
  if (v1) {
    goto LABEL_145;
  }
  if (v10 >= 8) {
    goto LABEL_14;
  }
LABEL_144:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_145:

  return v3;
}

id specialized CodableFontTraits.init(from:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v7 >= v8)
  {
LABEL_81:
    *(void *)(a1 + 24) = 0;
    return v6;
  }
  unint64_t v53 = v5;
  uint64_t v9 = *MEMORY[0x263F03AB8];
  uint64_t v10 = *MEMORY[0x263F03BA8];
  uint64_t v55 = *MEMORY[0x263F03B38];
  uint64_t v54 = *MEMORY[0x263F03C50];
  uint64_t v11 = *MEMORY[0x263F03C00];
  uint64_t v12 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  uint64_t v13 = *MEMORY[0x263F03B48];
  while (2)
  {
    unint64_t v15 = *(void *)(a1 + 24);
    if (v15)
    {
      unint64_t v16 = *(void *)(a1 + 32);
      if (v7 < v16) {
        goto LABEL_12;
      }
      if (v16 < v7) {
        goto LABEL_82;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      goto LABEL_83;
    }
    if (v15 <= 7)
    {
LABEL_82:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      goto LABEL_83;
    }
LABEL_12:
    switch(v15 >> 3)
    {
      case 1uLL:
        if ((v15 & 7) == 0) {
          goto LABEL_19;
        }
        if ((v15 & 7) != 2) {
          goto LABEL_82;
        }
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_83;
        }
        if (v17 < 0) {
          goto LABEL_91;
        }
        unint64_t v18 = *(void *)(a1 + 8) + v17;
        if (v8 < v18) {
          goto LABEL_82;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v18;
LABEL_19:
        ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_83;
        }
        Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, (SEL)v12[183], isa, v13, v49);
        goto LABEL_4;
      case 2uLL:
        if ((v15 & 7) == 2)
        {
          uint64_t v36 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_83;
          }
          if (v36 < 0) {
            goto LABEL_92;
          }
          uint64_t v19 = *(void *)(a1 + 8);
          if (v8 < v19 + v36) {
            goto LABEL_82;
          }
          *(void *)(a1 + 24) = 21;
          *(void *)(a1 + 32) = v19 + v36;
        }
        else
        {
          if ((v15 & 7) != 5) {
            goto LABEL_82;
          }
          uint64_t v19 = *(void *)(a1 + 8);
        }
        if (v8 < v19 + 4) {
          goto LABEL_82;
        }
        *(void *)(a1 + 8) = v19 + 4;
        Class isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, (SEL)v12 + 792, isa, v11, v49);
        goto LABEL_4;
      case 3uLL:
        if ((v15 & 7) == 2)
        {
          uint64_t v37 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_83;
          }
          if (v37 < 0) {
            goto LABEL_93;
          }
          uint64_t v20 = *(void *)(a1 + 8);
          if (v8 < v20 + v37) {
            goto LABEL_82;
          }
          *(void *)(a1 + 24) = 29;
          *(void *)(a1 + 32) = v20 + v37;
        }
        else
        {
          if ((v15 & 7) != 5) {
            goto LABEL_82;
          }
          uint64_t v20 = *(void *)(a1 + 8);
        }
        if (v8 < v20 + 4) {
          goto LABEL_82;
        }
        *(void *)(a1 + 8) = v20 + 4;
        Class isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, (SEL)v12 + 792, isa, v54, v49);
        goto LABEL_4;
      case 4uLL:
        if ((v15 & 7) == 2)
        {
          uint64_t v38 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_83;
          }
          if (v38 < 0) {
            goto LABEL_94;
          }
          uint64_t v21 = *(void *)(a1 + 8);
          if (v8 < v21 + v38) {
            goto LABEL_82;
          }
          *(void *)(a1 + 24) = 37;
          *(void *)(a1 + 32) = v21 + v38;
        }
        else
        {
          if ((v15 & 7) != 5) {
            goto LABEL_82;
          }
          uint64_t v21 = *(void *)(a1 + 8);
        }
        if (v8 < v21 + 4) {
          goto LABEL_82;
        }
        *(void *)(a1 + 8) = v21 + 4;
        Class isa = Float._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v6, (SEL)v12 + 792, isa, v55, v49);
        goto LABEL_4;
      case 5uLL:
        if ((v15 & 7) != 2) {
          goto LABEL_82;
        }
        uint64_t v51 = v13;
        unint64_t v22 = v12;
        uint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_83;
        }
        uint64_t v24 = v23;
        if (v23 < 0)
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          JUMPOUT(0x245AE0EF8);
        }
        uint64_t v50 = v11;
        id v52 = v6;
        uint64_t v25 = v10;
        uint64_t v26 = *(void *)(a1 + 8);
        if (v8 < v26 + v23)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_87;
        }
        uint64_t v49 = v9;
        *(void *)(a1 + 8) = v26 + v23;
        if (v23)
        {
          uint64_t v27 = v26 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v30 = v29;
          if (__OFADD__(v27, v24)) {
            goto LABEL_89;
          }
          if (v27 + v24 < v27) {
            goto LABEL_90;
          }
          uint64_t v31 = v28;
          uint64_t v32 = Data._Representation.subscript.getter();
          unint64_t v34 = v33;
          outlined consume of Data._Representation(v31, v30);
        }
        else
        {
          uint64_t v32 = 0;
          unint64_t v34 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v41 = String.init(data:encoding:)();
        if (v42)
        {
          uint64_t v43 = v41;
          uint64_t v44 = v42;
          outlined consume of Data._Representation(v32, v34);
          char v45 = (void *)MEMORY[0x24C522820](v43, v44);
          swift_bridgeObjectRelease();
          if (!v25) {
            goto LABEL_98;
          }
          uint64_t v10 = v25;
          uint64_t v12 = v22;
          id v6 = v52;
          objc_msgSend(v52, (SEL)v22 + 792, v45, v10);

          uint64_t v9 = v49;
          uint64_t v11 = v50;
          uint64_t v13 = v51;
LABEL_5:
          unint64_t v7 = *(void *)(a1 + 8);
          unint64_t v8 = *(void *)(a1 + 16);
          if (v7 >= v8) {
            goto LABEL_81;
          }
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v32, v34);
LABEL_87:
        id v6 = v52;
LABEL_83:

        return v6;
      case 6uLL:
        if ((v15 & 7) == 2)
        {
          uint64_t v39 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_83;
          }
          if (v39 < 0) {
            goto LABEL_95;
          }
          uint64_t v35 = *(void *)(a1 + 8);
          if (v8 < v35 + v39) {
            goto LABEL_82;
          }
          *(void *)(a1 + 24) = 53;
          *(void *)(a1 + 32) = v35 + v39;
        }
        else
        {
          if ((v15 & 7) != 5) {
            goto LABEL_82;
          }
          uint64_t v35 = *(void *)(a1 + 8);
        }
        if (v8 < v35 + 4) {
          goto LABEL_82;
        }
        *(void *)(a1 + 8) = v35 + 4;
        v40.super.super.Class isa = Float._bridgeToObjectiveC()().super.super.isa;
        if (!v9) {
          goto LABEL_97;
        }
        Class isa = v40.super.super.isa;
        objc_msgSend(v6, (SEL)v12 + 792, v40.super.super.isa, v9, v49);
LABEL_4:

        goto LABEL_5;
      default:
        switch(v15 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_83;
            }
            goto LABEL_5;
          case 1uLL:
            unint64_t v46 = *(void *)(a1 + 8) + 8;
            if (v8 < v46) {
              goto LABEL_82;
            }
            goto LABEL_80;
          case 2uLL:
            uint64_t v47 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              goto LABEL_83;
            }
            if (v47 < 0) {
              goto LABEL_96;
            }
            unint64_t v46 = *(void *)(a1 + 8) + v47;
            if (v8 < v46) {
              goto LABEL_82;
            }
LABEL_80:
            *(void *)(a1 + 8) = v46;
            break;
          case 5uLL:
            unint64_t v46 = *(void *)(a1 + 8) + 4;
            if (v8 >= v46) {
              goto LABEL_80;
            }
            goto LABEL_82;
          default:
            goto LABEL_82;
        }
        goto LABEL_5;
    }
  }
}

const __CTFontDescriptor *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    CFStringRef v4 = (const __CFString *)*MEMORY[0x263F03AE8];
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (const __CTFontDescriptor *)MEMORY[0x24C523D60](v5 - 4, a1)
         : (const __CTFontDescriptor *)*(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (CTFontDescriptorCopyAttribute(v6, v4) && swift_dynamicCast())
      {
        if (v14 == a2 && v15 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
          return v7;
        }
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v11) {
          goto LABEL_16;
        }
      }

      ++v5;
      if (v8 == v13) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return 0;
}

const __CTFontDescriptor *specialized static CodablePlatformFont.fontDescriptor(from:matching:with:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  CopyWithAttributes = specialized Sequence.first(where:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  if (CopyWithAttributes && *(void *)(a4 + 16))
  {
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    uint64_t v9 = CopyWithAttributes;
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v9, isa);
  }
  return CopyWithAttributes;
}

unsigned char *specialized CodablePlatformFont.init(from:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v294 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v323 = (char *)&v294 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v294 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v322 = (char *)&v294 - v14;
  double v16 = MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v294 - v17;
  uint64_t v317 = v8;
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v19 = (unsigned char *)(v8 + 56);
  uint64_t v20 = v21;
  uint64_t v318 = v7;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v21)((char *)&v294 - v17, 1, 1, v7, v16);
  unint64_t v22 = a1[1];
  unint64_t v23 = a1[2];
  if (v22 >= v23)
  {
    uint64_t v314 = 0;
    uint64_t v313 = 0;
    uint64_t v320 = 0;
    uint64_t v24 = 0;
    uint64_t v316 = 0;
    uint64_t v319 = 0;
    uint64_t v311 = 0;
    double v26 = 0.0;
    unint64_t v25 = 0xF000000000000000;
    uint64_t v27 = (void *)MEMORY[0x263F8EE80];
    uint64_t v19 = v322;
    v121 = v323;
    goto LABEL_233;
  }
  v297 = v20;
  v298 = v19;
  v307 = v12;
  v308 = v6;
  uint64_t v311 = 0;
  uint64_t v319 = 0;
  uint64_t v316 = 0;
  uint64_t v24 = 0;
  uint64_t v320 = 0;
  uint64_t v313 = 0;
  uint64_t v314 = 0;
  uint64_t v306 = *MEMORY[0x263F03B50];
  uint64_t v305 = *MEMORY[0x263F03AD8];
  id v304 = (id)*MEMORY[0x263F03AC8];
  id v299 = (id)*MEMORY[0x263F03A20];
  uint64_t v301 = *MEMORY[0x263F03A78];
  id v303 = (id)*MEMORY[0x263F03BB8];
  v315 = a1 + 5;
  unint64_t v25 = 0xF000000000000000;
  double v26 = 0.0;
  id v302 = (id)*MEMORY[0x263F03BC0];
  id v300 = (id)*MEMORY[0x263F03A98];
  id v296 = (id)*MEMORY[0x263F03B60];
  uint64_t v27 = (void *)MEMORY[0x263F8EE80];
  v321 = a1;
  v310 = v18;
  while (2)
  {
    unint64_t v28 = a1[3];
    if (!v28) {
      goto LABEL_7;
    }
    unint64_t v29 = a1[4];
    if (v22 >= v29)
    {
      if (v29 < v22) {
        goto LABEL_248;
      }
      a1[3] = 0;
LABEL_7:
      uint64_t v19 = a1;
      unint64_t v30 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_249;
      }
      unint64_t v28 = v30;
      if (v30 < 8) {
        goto LABEL_248;
      }
    }
    switch(v28 >> 3)
    {
      case 1uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v31 = v24;
        unint64_t v32 = v25;
        unint64_t v33 = (void *)*v315;
        unint64_t v34 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        unint64_t v36 = v33[2];
        unint64_t v35 = v33[3];
        if (v36 >= v35 >> 1) {
          unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v33);
        }
        v33[2] = v36 + 1;
        v33[v36 + 4] = v23;
        uint64_t v19 = v321;
        v321[5] = v33;
        uint64_t v37 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_278;
        }
        if (v37 < 0) {
          goto LABEL_296;
        }
        unint64_t v18 = v34;
        uint64_t v38 = (uint64_t)v321;
        unint64_t v39 = v321[1] + v37;
        if (v23 < v39) {
          goto LABEL_285;
        }
        v321[2] = v39;
        specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(v38, (uint64_t *)&v327);
        NSNumber v40 = v315;
        if (!*(void *)(*v315 + 16)) {
          goto LABEL_301;
        }
        uint64_t v41 = specialized Array._customRemoveLast()();
        if (!v41) {
          uint64_t v41 = specialized Array.remove(at:)(*(void *)(*v40 + 16) - 1);
        }
        uint64_t v42 = v41;
        outlined consume of Data?(v31, v32);
        a1 = v321;
        v321[2] = v42;
        unint64_t v25 = *((void *)&v327 + 1);
        uint64_t v24 = v327;
        goto LABEL_217;
      case 2uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v31 = v24;
        unint64_t v32 = v25;
        v128 = (void *)*v315;
        v129 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128[2] + 1, 1, v128);
        }
        unint64_t v131 = v128[2];
        unint64_t v130 = v128[3];
        if (v131 >= v130 >> 1) {
          v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v130 > 1), v131 + 1, 1, v128);
        }
        v128[2] = v131 + 1;
        v128[v131 + 4] = v23;
        uint64_t v19 = v321;
        v321[5] = v128;
        uint64_t v132 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          unint64_t v18 = v129;
LABEL_286:
          swift_bridgeObjectRelease();
          uint64_t v281 = v31;
          unint64_t v282 = v32;
          goto LABEL_251;
        }
        if ((v132 & 0x8000000000000000) == 0)
        {
          uint64_t v133 = (uint64_t)v321;
          unint64_t v134 = v321[1] + v132;
          unint64_t v18 = v129;
          if (v23 >= v134)
          {
            v321[2] = v134;
            URL.init(from:)(v133, (uint64_t)v307);
            unint64_t v25 = v32;
            v135 = (void *)*v315;
            if (*(void *)(*v315 + 16))
            {
              uint64_t v24 = v31;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              a1 = v321;
              if (isUniquelyReferenced_nonNull_native)
              {
                uint64_t v137 = v135[2];
                if (v137)
                {
LABEL_115:
                  uint64_t v138 = v137 - 1;
                  uint64_t v139 = v135[v138 + 4];
                  v135[2] = v138;
                  a1[5] = v135;
                  a1[2] = v139;
                  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for URL?);
                  uint64_t v140 = (uint64_t)v307;
                  v297(v307, 0, 1, v318);
                  _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(v140, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for URL?);
                  goto LABEL_217;
                }
              }
              else
              {
                v135 = specialized _ArrayBuffer._consumeAndCreateNew()(v135);
                uint64_t v137 = v135[2];
                if (v137) {
                  goto LABEL_115;
                }
              }
              goto LABEL_304;
            }
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
            goto LABEL_305;
          }
LABEL_285:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_286;
        }
        goto LABEL_297;
      case 3uLL:
        swift_bridgeObjectRelease();
        if ((v28 & 7) != 2) {
          goto LABEL_277;
        }
        uint64_t v19 = a1;
        uint64_t v109 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_250;
        }
        uint64_t v110 = v109;
        if (v109 < 0) {
          goto LABEL_299;
        }
        uint64_t v19 = (unsigned char *)a1[1];
        if (v23 < (unint64_t)&v19[v109])
        {
LABEL_277:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
        }
        else
        {
          a1[1] = &v19[v109];
          if (v109)
          {
            v111 = (id *)a1;
            uint64_t v112 = v24;
            unint64_t v113 = v25;
            int64_t v114 = v19 - (unsigned char *)objc_msgSend(objc_retainAutorelease(*v111), sel_bytes);
            uint64_t v115 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v117 = v116;
            if (__OFADD__(v114, v110))
            {
LABEL_312:
              __break(1u);
              goto LABEL_313;
            }
            if (v114 + v110 < v114)
            {
LABEL_313:
              __break(1u);
              goto LABEL_314;
            }
            uint64_t v118 = v115;
            uint64_t v19 = (unsigned char *)Data._Representation.subscript.getter();
            unint64_t v60 = v119;
            outlined consume of Data._Representation(v118, v117);
            unint64_t v25 = v113;
            uint64_t v24 = v112;
            a1 = v321;
          }
          else
          {
            uint64_t v19 = 0;
            unint64_t v60 = 0xC000000000000000;
          }
          static String.Encoding.utf8.getter();
          uint64_t v316 = String.init(data:encoding:)();
          if (v248)
          {
            uint64_t v319 = v248;
            goto LABEL_200;
          }
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation((uint64_t)v19, v60);
        }
        goto LABEL_250;
      case 4uLL:
        unint64_t v120 = v28 & 7;
        if ((v28 & 7) == 0)
        {
          v121 = v323;
LABEL_163:
          uint64_t v19 = a1;
          uint64_t v226 = ProtobufDecoder.decodeVarint()();
          if (!v2)
          {
            uint64_t v311 = v226;
            goto LABEL_218;
          }
          goto LABEL_249;
        }
        v121 = v323;
        if (v120 == 2)
        {
          uint64_t v19 = a1;
          uint64_t v122 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_249;
          }
          if (v122 < 0)
          {
LABEL_319:
            __break(1u);
            goto LABEL_320;
          }
          unint64_t v123 = a1[1] + v122;
          if (v23 >= v123)
          {
            a1[3] = 32;
            a1[4] = v123;
            goto LABEL_163;
          }
        }
        goto LABEL_248;
      case 5uLL:
        swift_bridgeObjectRelease();
        if ((v28 & 7) != 2) {
          goto LABEL_274;
        }
        uint64_t v19 = a1;
        uint64_t v49 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_289;
        }
        uint64_t v50 = v49;
        if (v49 < 0) {
          goto LABEL_298;
        }
        uint64_t v19 = (unsigned char *)a1[1];
        if (v23 < (unint64_t)&v19[v49])
        {
LABEL_274:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
        }
        else
        {
          a1[1] = &v19[v49];
          if (v49)
          {
            uint64_t v51 = (id *)a1;
            uint64_t v52 = v24;
            unint64_t v53 = v25;
            int64_t v54 = v19 - (unsigned char *)objc_msgSend(objc_retainAutorelease(*v51), sel_bytes);
            uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v57 = v56;
            if (__OFADD__(v54, v50))
            {
LABEL_311:
              __break(1u);
              goto LABEL_312;
            }
            if (v54 + v50 < v54)
            {
LABEL_314:
              __break(1u);
              goto LABEL_315;
            }
            uint64_t v58 = v55;
            uint64_t v19 = (unsigned char *)Data._Representation.subscript.getter();
            unint64_t v60 = v59;
            outlined consume of Data._Representation(v58, v57);
            unint64_t v25 = v53;
            uint64_t v24 = v52;
            a1 = v321;
          }
          else
          {
            uint64_t v19 = 0;
            unint64_t v60 = 0xC000000000000000;
          }
          static String.Encoding.utf8.getter();
          uint64_t v313 = String.init(data:encoding:)();
          uint64_t v320 = v231;
          if (v231)
          {
LABEL_200:
            outlined consume of Data._Representation((uint64_t)v19, v60);
            goto LABEL_217;
          }
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation((uint64_t)v19, v60);
        }
LABEL_289:
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for URL?);
        outlined consume of Data?(v24, v25);
        swift_bridgeObjectRelease();
        goto LABEL_256;
      case 6uLL:
        unint64_t v167 = v28 & 7;
        if ((v28 & 7) == 0)
        {
          v121 = v323;
LABEL_166:
          uint64_t v19 = a1;
          uint64_t v227 = ProtobufDecoder.decodeVarint()();
          if (!v2)
          {
            uint64_t v314 = v227;
            goto LABEL_218;
          }
LABEL_249:
          swift_bridgeObjectRelease();
LABEL_250:
          uint64_t v281 = v24;
          unint64_t v282 = v25;
LABEL_251:
          outlined consume of Data?(v281, v282);
LABEL_252:
          swift_bridgeObjectRelease();
LABEL_255:
          _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for URL?);
LABEL_256:
          swift_bridgeObjectRelease();
          return v19;
        }
        v121 = v323;
        if (v167 == 2)
        {
          uint64_t v19 = a1;
          uint64_t v168 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_249;
          }
          if (v168 < 0)
          {
LABEL_318:
            __break(1u);
            goto LABEL_319;
          }
          unint64_t v169 = a1[1] + v168;
          if (v23 >= v169)
          {
            a1[3] = 48;
            a1[4] = v169;
            goto LABEL_166;
          }
        }
        goto LABEL_248;
      case 7uLL:
        unint64_t v170 = v28 & 7;
        if (v170 == 5)
        {
          v250 = (float *)a1[1];
          v121 = v323;
          if (v23 >= (unint64_t)(v250 + 1))
          {
            float v251 = *v250;
            a1[1] = v250 + 1;
            double v26 = v251;
            goto LABEL_218;
          }
          goto LABEL_248;
        }
        v121 = v323;
        if (v170 == 2)
        {
          uint64_t v19 = a1;
          uint64_t v249 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_249;
          }
          if (v249 < 0)
          {
LABEL_320:
            __break(1u);
            __break(1u);
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
LABEL_323:
            type metadata accessor for CFStringRef(0);
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x245AE3838);
          }
          v171 = (double *)a1[1];
          if (v23 < (unint64_t)v171 + v249) {
            goto LABEL_248;
          }
          a1[3] = 57;
          a1[4] = (char *)v171 + v249;
        }
        else
        {
          if (v170 != 1)
          {
LABEL_248:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            goto LABEL_249;
          }
          v171 = (double *)a1[1];
        }
        if (v23 >= (unint64_t)(v171 + 1))
        {
          double v26 = *v171;
          a1[1] = v171 + 1;
          goto LABEL_218;
        }
        goto LABEL_248;
      case 8uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v31 = v24;
        unint64_t v32 = v25;
        v141 = (void *)*v315;
        unint64_t v34 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141[2] + 1, 1, v141);
        }
        unint64_t v143 = v141[2];
        unint64_t v142 = v141[3];
        if (v143 >= v142 >> 1) {
          v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v142 > 1), v143 + 1, 1, v141);
        }
        v141[2] = v143 + 1;
        v141[v143 + 4] = v23;
        uint64_t v19 = v321;
        v321[5] = v141;
        uint64_t v144 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
LABEL_278:
          swift_bridgeObjectRelease();
          outlined consume of Data?(v31, v32);
          swift_bridgeObjectRelease();
          unint64_t v18 = v34;
          goto LABEL_255;
        }
        if (v144 < 0) {
          goto LABEL_300;
        }
        unint64_t v18 = v34;
        uint64_t v145 = (uint64_t)v321;
        unint64_t v146 = v321[1] + v144;
        if (v23 < v146) {
          goto LABEL_285;
        }
        v321[2] = v146;
        id v147 = specialized CodableFontTraits.init(from:)(v145);
        v148 = (void *)*v315;
        if (!*(void *)(*v315 + 16)) {
          goto LABEL_302;
        }
        v149 = v147;
        char v150 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v312 = v32;
        if (v150)
        {
          uint64_t v151 = v148[2];
          if (!v151)
          {
LABEL_305:
            __break(1u);
            goto LABEL_306;
          }
        }
        else
        {
          v148 = specialized _ArrayBuffer._consumeAndCreateNew()(v148);
          uint64_t v151 = v148[2];
          if (!v151) {
            goto LABEL_305;
          }
        }
        uint64_t v152 = v151 - 1;
        uint64_t v153 = v148[v152 + 4];
        v148[2] = v152;
        v154 = v321;
        v321[5] = v148;
        v154[2] = v153;
        *((void *)&v328 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSDictionary);
        *(void *)&long long v327 = v149;
        outlined init with take of Any(&v327, &v326);
        id v155 = v296;
        id v156 = v149;
        char v157 = swift_isUniquelyReferenced_nonNull_native();
        v333 = v27;
        unint64_t v159 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v155);
        uint64_t v160 = v27[2];
        BOOL v161 = (v158 & 1) == 0;
        uint64_t v162 = v160 + v161;
        if (__OFADD__(v160, v161))
        {
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
          goto LABEL_310;
        }
        char v163 = v158;
        if (v27[3] < v162)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v162, v157);
          unint64_t v164 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v155);
          if ((v163 & 1) != (v165 & 1)) {
            goto LABEL_323;
          }
          unint64_t v159 = v164;
          uint64_t v27 = v333;
          if ((v163 & 1) == 0) {
            goto LABEL_131;
          }
LABEL_179:
          v230 = (_OWORD *)(v27[7] + 32 * v159);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v230);
          outlined init with take of Any(&v326, v230);
          goto LABEL_180;
        }
        if (v157)
        {
          uint64_t v27 = v333;
          if (v158) {
            goto LABEL_179;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v27 = v333;
          if (v163) {
            goto LABEL_179;
          }
        }
LABEL_131:
        specialized _NativeDictionary._insert(at:key:value:)(v159, (uint64_t)v155, &v326, v27);
        id v166 = v155;
LABEL_180:

        swift_bridgeObjectRelease();
        uint64_t v2 = 0;
        uint64_t v24 = v31;
        unint64_t v25 = v312;
        unint64_t v18 = v310;
        goto LABEL_196;
      case 9uLL:
        unint64_t v312 = v25;
        uint64_t v309 = v24;
        v191 = v27;
        id v192 = (id)*a1;
        *(void *)&long long v327 = v28;
        id v325 = v192;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = a1;
        uint64_t v193 = ProtobufDecoder.dataField(_:)(&v327);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v195 = v193;
          unint64_t v196 = v194;
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          uint64_t v19 = (unsigned char *)PropertyListDecoder.init()();
          swift_bridgeObjectRetain();
          dispatch thunk of PropertyListDecoder.userInfo.setter();
          type metadata accessor for [JSONCodable<CFArrayRef>](0);
          lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [JSONCodable<CFArrayRef>] and conformance <A> [A], type metadata accessor for [JSONCodable<CFArrayRef>], (void (*)(void))lazy protocol witness table accessor for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>);
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          if (*(void *)(v327 + 16))
          {
            id v197 = *(id *)(v327 + 32);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v195, v196);
            type metadata accessor for CFArrayRef(0);
            *((void *)&v328 + 1) = v198;
            *(void *)&long long v327 = v197;
            outlined init with take of Any(&v327, &v326);
            id v199 = v197;
            id v200 = v300;
            char v201 = swift_isUniquelyReferenced_nonNull_native();
            v333 = v191;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v326, v200, v201);
            uint64_t v27 = v333;

            swift_bridgeObjectRelease();
            uint64_t v2 = 0;
            goto LABEL_161;
          }
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v195, v196);
        }
        swift_bridgeObjectRelease();
        outlined consume of Data?(v309, v312);
        swift_bridgeObjectRelease();
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v310, (uint64_t (*)(void))type metadata accessor for URL?);
        swift_bridgeObjectRelease();
        return v19;
      case 0xAuLL:
        unint64_t v71 = v25;
        long long v72 = *((_OWORD *)a1 + 1);
        long long v329 = *(_OWORD *)a1;
        long long v330 = v72;
        long long v331 = *((_OWORD *)a1 + 2);
        uint64_t v332 = a1[6];
        *(void *)&long long v326 = v28;
        outlined retain of ProtobufDecoder((id *)&v329);
        uint64_t v19 = a1;
        uint64_t v73 = ProtobufDecoder.dataField(_:)(&v326);
        if (v2)
        {
          outlined release of ProtobufDecoder((void **)&v329);
          swift_bridgeObjectRelease();
          uint64_t v281 = v24;
          unint64_t v282 = v25;
          goto LABEL_251;
        }
        uint64_t v75 = v73;
        unint64_t v76 = v74;
        specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)(&v327);
        uint64_t v2 = 0;
        unint64_t v312 = v71;
        uint64_t v309 = v24;
        outlined release of ProtobufDecoder((void **)&v329);
        outlined consume of Data._Representation(v75, v76);
        uint64_t v77 = v327;
        uint64_t v78 = *(void *)(v327 + 64);
        uint64_t v324 = v327 + 64;
        uint64_t v79 = 1 << *(unsigned char *)(v327 + 32);
        if (v79 < 64) {
          uint64_t v80 = ~(-1 << v79);
        }
        else {
          uint64_t v80 = -1;
        }
        unint64_t v81 = v80 & v78;
        id v325 = (id)((unint64_t)(v79 + 63) >> 6);
        swift_bridgeObjectRetain();
        uint64_t v82 = 0;
        uint64_t v83 = (void *)MEMORY[0x263F8EE80];
        v295 = v27;
        uint64_t v294 = 0;
        if (v81)
        {
LABEL_53:
          unint64_t v84 = __clz(__rbit64(v81));
          v81 &= v81 - 1;
          unint64_t v85 = v84 | (v82 << 6);
          goto LABEL_54;
        }
        while (2)
        {
          uint64_t v92 = v82 + 1;
          if (__OFADD__(v82, 1))
          {
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }
          if (v92 >= (uint64_t)v325) {
            break;
          }
          unint64_t v93 = *(void *)(v324 + 8 * v92);
          ++v82;
          if (v93) {
            goto LABEL_84;
          }
          uint64_t v82 = v92 + 1;
          if (v92 + 1 >= (uint64_t)v325) {
            break;
          }
          unint64_t v93 = *(void *)(v324 + 8 * v82);
          if (v93) {
            goto LABEL_84;
          }
          uint64_t v82 = v92 + 2;
          if (v92 + 2 >= (uint64_t)v325) {
            break;
          }
          unint64_t v93 = *(void *)(v324 + 8 * v82);
          if (v93) {
            goto LABEL_84;
          }
          uint64_t v82 = v92 + 3;
          if (v92 + 3 >= (uint64_t)v325) {
            break;
          }
          unint64_t v93 = *(void *)(v324 + 8 * v82);
          if (v93) {
            goto LABEL_84;
          }
          uint64_t v82 = v92 + 4;
          if (v92 + 4 >= (uint64_t)v325) {
            break;
          }
          unint64_t v93 = *(void *)(v324 + 8 * v82);
          if (v93) {
            goto LABEL_84;
          }
          uint64_t v94 = v92 + 5;
          if (v94 < (uint64_t)v325)
          {
            unint64_t v93 = *(void *)(v324 + 8 * v94);
            if (!v93)
            {
              while (1)
              {
                uint64_t v82 = v94 + 1;
                if (__OFADD__(v94, 1)) {
                  goto LABEL_309;
                }
                if (v82 >= (uint64_t)v325) {
                  goto LABEL_160;
                }
                unint64_t v93 = *(void *)(v324 + 8 * v82);
                ++v94;
                if (v93) {
                  goto LABEL_84;
                }
              }
            }
            uint64_t v82 = v94;
LABEL_84:
            unint64_t v81 = (v93 - 1) & v93;
            unint64_t v85 = __clz(__rbit64(v93)) + (v82 << 6);
LABEL_54:
            long long v86 = (uint64_t *)(*(void *)(v77 + 48) + 16 * v85);
            uint64_t v88 = *v86;
            unint64_t v87 = v86[1];
            uint64_t v89 = *(void *)(*(void *)(v77 + 56) + 8 * v85);
            swift_bridgeObjectRetain_n();
            uint64_t v90 = specialized FixedWidthInteger.init(_:)(v88, v87);
            if (v91)
            {
              swift_bridgeObjectRelease();
              if (v81) {
                goto LABEL_53;
              }
              continue;
            }
            uint64_t v95 = v90;
            char v96 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v327 = v83;
            unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v95);
            uint64_t v99 = v83[2];
            BOOL v100 = (v97 & 1) == 0;
            uint64_t v101 = v99 + v100;
            if (__OFADD__(v99, v100)) {
              goto LABEL_292;
            }
            char v102 = v97;
            if (v83[3] >= v101)
            {
              if (v96)
              {
                uint64_t v83 = (void *)v327;
                if ((v97 & 1) == 0) {
                  goto LABEL_74;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                uint64_t v83 = (void *)v327;
                if ((v102 & 1) == 0) {
                  goto LABEL_74;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, v96);
              unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v95);
              if ((v102 & 1) != (v104 & 1)) {
                goto LABEL_322;
              }
              unint64_t v98 = v103;
              uint64_t v83 = (void *)v327;
              if ((v102 & 1) == 0)
              {
LABEL_74:
                v83[(v98 >> 6) + 8] |= 1 << v98;
                uint64_t v105 = 8 * v98;
                *(void *)(v83[6] + v105) = v95;
                *(void *)(v83[7] + v105) = v89;
                uint64_t v106 = v83[2];
                BOOL v107 = __OFADD__(v106, 1);
                uint64_t v108 = v106 + 1;
                if (v107) {
                  goto LABEL_308;
                }
                v83[2] = v108;
LABEL_79:
                uint64_t v27 = v295;
                uint64_t v2 = v294;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v81) {
                  goto LABEL_53;
                }
                continue;
              }
            }
            *(void *)(v83[7] + 8 * v98) = v89;
            goto LABEL_79;
          }
          break;
        }
LABEL_160:
        swift_release();
        swift_bridgeObjectRelease();
        type metadata accessor for [Int : CGFloat](0, &lazy cache variable for type metadata for [Int : CGFloat]);
        *((void *)&v328 + 1) = v223;
        *(void *)&long long v327 = v83;
        outlined init with take of Any(&v327, &v326);
        id v224 = v302;
        char v225 = swift_isUniquelyReferenced_nonNull_native();
        v333 = v27;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v326, v224, v225);
        uint64_t v27 = v333;

        swift_bridgeObjectRelease();
LABEL_161:
        unint64_t v18 = v310;
        uint64_t v24 = v309;
LABEL_195:
        unint64_t v25 = v312;
LABEL_196:
        a1 = v321;
LABEL_217:
        v121 = v323;
LABEL_218:
        uint64_t v19 = v322;
        unint64_t v22 = a1[1];
        unint64_t v23 = a1[2];
        if (v22 < v23) {
          continue;
        }
LABEL_233:
        a1[3] = 0;
        outlined init with copy of ResolvableTextSegmentAttribute.Value((uint64_t)v18, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for URL?);
        uint64_t v255 = v317;
        uint64_t v256 = v318;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v317 + 48))(v19, 1, v318) != 1)
        {
          (*(void (**)(char *, unsigned char *, uint64_t))(v255 + 32))(v121, v19, v256);
          if (!v319)
          {
            (*(void (**)(char *, uint64_t))(v255 + 8))(v121, v256);
            goto LABEL_258;
          }
          swift_bridgeObjectRelease();
          URL._bridgeToObjectiveC()(v273);
          uint64_t v19 = v274;
          CFArrayRef FontDescriptorsFromURL = CTFontManagerCreateFontDescriptorsFromURL(v274);

          if (FontDescriptorsFromURL
            && (*(void *)&long long v327 = 0,
                type metadata accessor for CTFontDescriptorRef(0),
                static Array._conditionallyBridgeFromObjectiveC(_:result:)(),
                FontDescriptorsFromURL,
                (uint64_t v19 = (unsigned char *)v327) != 0))
          {
            swift_bridgeObjectRetain();
            CopyWithAttributes = specialized static CodablePlatformFont.fontDescriptor(from:matching:with:)((unint64_t)v19, v316, v319, (uint64_t)v27);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v255 = v317;
            swift_bridgeObjectRelease();
            if (CopyWithAttributes)
            {
              (*(void (**)(char *, uint64_t))(v255 + 8))(v323, v256);
              goto LABEL_271;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data?(v24, v25);
          (*(void (**)(char *, uint64_t))(v255 + 8))(v323, v256);
          goto LABEL_255;
        }
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for URL?);
        if (v25 >> 60 != 15)
        {
          uint64_t v277 = v316;
          if (!v319) {
            goto LABEL_258;
          }
          outlined copy of Data._Representation(v24, v25);
          swift_bridgeObjectRelease();
          if (v27[2])
          {
            id v278 = (id)*MEMORY[0x263F03BC0];
            unint64_t v279 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v278);
            if (v280)
            {
              outlined init with copy of Any(v27[7] + 32 * v279, (uint64_t)&v327);
            }
            else
            {
              long long v327 = 0u;
              long long v328 = 0u;
            }

            if (*((void *)&v328 + 1))
            {
              outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v327, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
              CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
              v288.super.CFDataRef isa = CTFontManagerCreateFontDescriptorFromData(isa);

              if (v288.super.isa)
              {
                swift_bridgeObjectRelease();
                type metadata accessor for CFStringRef(0);
                lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
                swift_bridgeObjectRetain();
                CFDictionaryRef v290 = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v288.super.isa, v290);
                outlined consume of Data?(v24, v25);

                goto LABEL_261;
              }
              goto LABEL_268;
            }
          }
          else
          {
            long long v327 = 0u;
            long long v328 = 0u;
          }
          outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v327, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
LABEL_268:
          CFDataRef v291 = Data._bridgeToObjectiveC()().super.isa;
          CFArrayRef FontDescriptorsFromData = CTFontManagerCreateFontDescriptorsFromData(v291);

          *(void *)&long long v327 = 0;
          type metadata accessor for CTFontDescriptorRef(0);
          static Array._forceBridgeFromObjectiveC(_:result:)();
          uint64_t v19 = (unsigned char *)v327;
          if (!(void)v327) {
            goto LABEL_321;
          }

          swift_bridgeObjectRetain();
          CopyWithAttributes = specialized static CodablePlatformFont.fontDescriptor(from:matching:with:)((unint64_t)v19, v277, v319, (uint64_t)v27);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (CopyWithAttributes)
          {
            outlined consume of Data?(v24, v25);
            goto LABEL_271;
          }
          lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data?(v24, v25);
          outlined consume of Data?(v24, v25);
          goto LABEL_255;
        }
        uint64_t v257 = v316;
        if (v319)
        {
          v310 = v18;
          v258._countAndFlagsBits = 0x534E46532ELL;
          v258._object = (void *)0xE500000000000000;
          unint64_t v259 = v319;
          if (String.hasPrefix(_:)(v258))
          {
            unint64_t v260 = String.count.getter();
            unint64_t v261 = specialized Collection.dropFirst(_:)(v260, v257, v259);
            uint64_t v263 = v262;
            uint64_t v265 = v264;
            uint64_t v266 = v24;
            unint64_t v267 = v25;
            uint64_t v269 = v268;
            swift_bridgeObjectRelease();
            *(void *)&long long v326 = 0x495546532ELL;
            *((void *)&v326 + 1) = 0xE500000000000000;
            *(void *)&long long v327 = v261;
            *((void *)&v327 + 1) = v263;
            *(void *)&long long v328 = v265;
            *((void *)&v328 + 1) = v269;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            String.append<A>(contentsOf:)();
            unint64_t v25 = v267;
            uint64_t v24 = v266;
            swift_bridgeObjectRelease();
            unint64_t v259 = *((void *)&v326 + 1);
            uint64_t v257 = v326;
          }
          v270 = (void *)*MEMORY[0x263F03AE8];
          *((void *)&v328 + 1) = MEMORY[0x263F8D310];
          *(void *)&long long v327 = v257;
          *((void *)&v327 + 1) = v259;
          outlined init with take of Any(&v327, &v326);
          id v271 = v270;
          char v272 = swift_isUniquelyReferenced_nonNull_native();
          v333 = v27;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v326, v271, v272);

          swift_bridgeObjectRelease();
          unint64_t v18 = v310;
        }
LABEL_258:
        if (v320)
        {
          v283 = (void *)MEMORY[0x24C522820](v313, v320);
          swift_bridgeObjectRelease();
          id v284 = (id)CTFontDescriptorGetContentSizeCategoryFromIndex();
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
          swift_bridgeObjectRetain();
          uint64_t v285 = v24;
          unint64_t v286 = v25;
          Class v287 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          CopyWithAttributes = (const __CTFontDescriptor *)CTFontDescriptorCreateWithTextStyleAndAttributes();

          unint64_t v25 = v286;
          uint64_t v24 = v285;
          goto LABEL_271;
        }
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
        swift_bridgeObjectRetain();
        v288.super.CFDataRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CopyWithAttributes = (const __CTFontDescriptor *)CTFontDescriptorCreateWithAttributesAndOptions();
LABEL_261:

LABEL_271:
        uint64_t v19 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v26, 0);
        outlined consume of Data?(v24, v25);

        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for URL?);
        swift_bridgeObjectRelease();
        return v19;
      case 0xBuLL:
        *(void *)&long long v327 = v28;
        uint64_t v19 = a1;
        double v202 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v327);
        uint64_t v2 = v203;
        if (v203) {
          goto LABEL_249;
        }
        v204 = v27;
        unint64_t v205 = v25;
        v206 = v18;
        uint64_t v207 = v24;
        *((void *)&v328 + 1) = MEMORY[0x263F8D538];
        *(double *)&long long v327 = v202;
        outlined init with take of Any(&v327, &v326);
        id v208 = v303;
        char v209 = swift_isUniquelyReferenced_nonNull_native();
        v333 = v204;
        unint64_t v211 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v208);
        uint64_t v212 = v204[2];
        BOOL v213 = (v210 & 1) == 0;
        uint64_t v214 = v212 + v213;
        if (__OFADD__(v212, v213)) {
          goto LABEL_294;
        }
        char v215 = v210;
        if (v204[3] < v214)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v214, v209);
          unint64_t v216 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v208);
          if ((v215 & 1) != (v217 & 1)) {
            goto LABEL_323;
          }
          unint64_t v211 = v216;
          v218 = v333;
          if ((v215 & 1) == 0) {
            goto LABEL_156;
          }
LABEL_174:
          v189 = v218;
          v229 = (_OWORD *)(v218[7] + 32 * v211);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v229);
          outlined init with take of Any(&v326, v229);
LABEL_175:
          uint64_t v24 = v207;
          unint64_t v25 = v205;

          swift_bridgeObjectRelease();
          unint64_t v18 = v206;
          goto LABEL_176;
        }
        if (v209)
        {
          v218 = v333;
          if (v210) {
            goto LABEL_174;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v218 = v333;
          if (v215) {
            goto LABEL_174;
          }
        }
LABEL_156:
        v218[(v211 >> 6) + 8] |= 1 << v211;
        *(void *)(v218[6] + 8 * v211) = v208;
        outlined init with take of Any(&v326, (_OWORD *)(v218[7] + 32 * v211));
        uint64_t v219 = v218[2];
        BOOL v107 = __OFADD__(v219, 1);
        uint64_t v220 = v219 + 1;
        if (v107) {
          goto LABEL_316;
        }
        v189 = v218;
        v218[2] = v220;
        id v221 = v208;
        goto LABEL_175;
      case 0xCuLL:
        if ((v28 & 7) == 0) {
          goto LABEL_30;
        }
        if ((v28 & 7) != 2) {
          goto LABEL_248;
        }
        uint64_t v19 = a1;
        uint64_t v46 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_249;
        }
        if (v46 < 0) {
          goto LABEL_317;
        }
        unint64_t v47 = a1[1] + v46;
        if (v23 < v47) {
          goto LABEL_248;
        }
        a1[3] = 96;
        a1[4] = v47;
LABEL_30:
        uint64_t v19 = a1;
        uint64_t v48 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_249;
        }
        *((void *)&v328 + 1) = MEMORY[0x263F8D6C8];
        *(void *)&long long v327 = -(v48 & 1) ^ (v48 >> 1);
        outlined init with take of Any(&v327, &v326);
        char v45 = (id *)&v328 + 1;
LABEL_103:
        id v126 = *(v45 - 32);
        char v127 = swift_isUniquelyReferenced_nonNull_native();
        v333 = v27;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v326, v126, v127);
        uint64_t v27 = v333;

        swift_bridgeObjectRelease();
        goto LABEL_217;
      case 0xDuLL:
        if ((v28 & 7) != 2) {
          goto LABEL_275;
        }
        uint64_t v19 = a1;
        uint64_t v61 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_288;
        }
        uint64_t v62 = v61;
        if (v61 < 0) {
          goto LABEL_295;
        }
        uint64_t v19 = (unsigned char *)a1[1];
        if (v23 < (unint64_t)&v19[v61])
        {
LABEL_275:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
        }
        else
        {
          unint64_t v312 = v25;
          a1[1] = &v19[v61];
          uint64_t v309 = v24;
          if (v61)
          {
            int64_t v63 = v19 - (unsigned char *)objc_msgSend(objc_retainAutorelease((id)*a1), sel_bytes);
            uint64_t v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v66 = v65;
            if (__OFADD__(v63, v62))
            {
LABEL_310:
              __break(1u);
              goto LABEL_311;
            }
            uint64_t v67 = v320;
            if (v63 + v62 < v63)
            {
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
              goto LABEL_318;
            }
            uint64_t v68 = v64;
            uint64_t v19 = (unsigned char *)Data._Representation.subscript.getter();
            unint64_t v70 = v69;
            outlined consume of Data._Representation(v68, v66);
          }
          else
          {
            uint64_t v67 = v320;
            uint64_t v19 = 0;
            unint64_t v70 = 0xC000000000000000;
          }
          static String.Encoding.utf8.getter();
          uint64_t v232 = String.init(data:encoding:)();
          if (v233)
          {
            uint64_t v234 = v232;
            uint64_t v235 = v233;
            outlined consume of Data._Representation((uint64_t)v19, v70);
            *((void *)&v328 + 1) = MEMORY[0x263F8D310];
            *(void *)&long long v327 = v234;
            *((void *)&v327 + 1) = v235;
            outlined init with take of Any(&v327, &v326);
            id v236 = v299;
            char v237 = swift_isUniquelyReferenced_nonNull_native();
            v333 = v27;
            unint64_t v239 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v236);
            uint64_t v240 = v27[2];
            BOOL v241 = (v238 & 1) == 0;
            uint64_t v242 = v240 + v241;
            if (__OFADD__(v240, v241))
            {
LABEL_306:
              __break(1u);
              goto LABEL_307;
            }
            char v243 = v238;
            if (v27[3] < v242)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v242, v237);
              unint64_t v244 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v236);
              if ((v243 & 1) != (v245 & 1)) {
                goto LABEL_323;
              }
              unint64_t v239 = v244;
              uint64_t v27 = v333;
              if ((v243 & 1) == 0) {
                goto LABEL_190;
              }
LABEL_193:
              v247 = (_OWORD *)(v27[7] + 32 * v239);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v247);
              outlined init with take of Any(&v326, v247);
              goto LABEL_194;
            }
            if (v237)
            {
              uint64_t v27 = v333;
              if (v238) {
                goto LABEL_193;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              uint64_t v27 = v333;
              if (v243) {
                goto LABEL_193;
              }
            }
LABEL_190:
            specialized _NativeDictionary._insert(at:key:value:)(v239, (uint64_t)v236, &v326, v27);
            id v246 = v236;
LABEL_194:

            swift_bridgeObjectRelease();
            uint64_t v24 = v309;
            uint64_t v320 = v67;
            goto LABEL_195;
          }
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation((uint64_t)v19, v70);
          uint64_t v24 = v309;
          unint64_t v25 = v312;
        }
LABEL_288:
        swift_bridgeObjectRelease();
        outlined consume of Data?(v24, v25);
        goto LABEL_252;
      case 0xEuLL:
        *(void *)&long long v327 = v28;
        uint64_t v19 = a1;
        double v172 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v327);
        uint64_t v2 = v173;
        if (v173) {
          goto LABEL_249;
        }
        v174 = v27;
        unint64_t v175 = v25;
        v176 = v18;
        uint64_t v177 = v24;
        *((void *)&v328 + 1) = MEMORY[0x263F8D538];
        *(double *)&long long v327 = v172;
        outlined init with take of Any(&v327, &v326);
        id v178 = v304;
        char v179 = swift_isUniquelyReferenced_nonNull_native();
        v333 = v174;
        unint64_t v181 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v178);
        uint64_t v182 = v174[2];
        BOOL v183 = (v180 & 1) == 0;
        uint64_t v184 = v182 + v183;
        if (__OFADD__(v182, v183)) {
          goto LABEL_293;
        }
        char v185 = v180;
        if (v174[3] < v184)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v184, v179);
          unint64_t v186 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v178);
          if ((v185 & 1) != (v187 & 1)) {
            goto LABEL_323;
          }
          unint64_t v181 = v186;
          v188 = v333;
          if ((v185 & 1) == 0) {
            goto LABEL_147;
          }
LABEL_170:
          v189 = v188;
          v228 = (_OWORD *)(v188[7] + 32 * v181);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v228);
          outlined init with take of Any(&v326, v228);
          goto LABEL_171;
        }
        if (v179)
        {
          v188 = v333;
          if (v180) {
            goto LABEL_170;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v188 = v333;
          if (v185) {
            goto LABEL_170;
          }
        }
LABEL_147:
        v189 = v188;
        specialized _NativeDictionary._insert(at:key:value:)(v181, (uint64_t)v178, &v326, v188);
        id v190 = v178;
LABEL_171:

        swift_bridgeObjectRelease();
        uint64_t v24 = v177;
        unint64_t v18 = v176;
        unint64_t v25 = v175;
LABEL_176:
        uint64_t v27 = v189;
        goto LABEL_196;
      case 0xFuLL:
        *(void *)&long long v327 = v28;
        uint64_t v19 = a1;
        double v43 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v327);
        uint64_t v2 = v44;
        if (v44) {
          goto LABEL_249;
        }
        *((void *)&v328 + 1) = MEMORY[0x263F8EF38];
        *(double *)&long long v327 = v43;
        outlined init with take of Any(&v327, &v326);
        char v45 = (id *)&v330 + 1;
        goto LABEL_103;
      case 0x10uLL:
        *(void *)&long long v327 = v28;
        uint64_t v19 = a1;
        int v124 = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v327);
        uint64_t v2 = v125;
        if (v125) {
          goto LABEL_249;
        }
        *((void *)&v328 + 1) = MEMORY[0x263F8E8F8];
        LODWORD(v327) = v124;
        outlined init with take of Any(&v327, &v326);
        char v45 = (id *)&v331;
        goto LABEL_103;
      default:
        switch(v28 & 7)
        {
          case 0uLL:
            uint64_t v19 = a1;
            uint64_t v222 = v2;
            ProtobufDecoder.decodeVarint()();
            goto LABEL_212;
          case 1uLL:
            uint64_t v252 = a1[1];
            uint64_t v253 = v252 + 8;
            if (v23 < v252 + 8) {
              goto LABEL_248;
            }
            specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v252);
            goto LABEL_216;
          case 2uLL:
            uint64_t v19 = a1;
            uint64_t v222 = v2;
            ProtobufDecoder.decodeDataBuffer()();
LABEL_212:
            uint64_t v2 = v222;
            if (v222) {
              goto LABEL_249;
            }
            goto LABEL_217;
          case 5uLL:
            uint64_t v254 = a1[1];
            uint64_t v253 = v254 + 4;
            if (v23 < v254 + 4) {
              goto LABEL_248;
            }
            specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v254);
LABEL_216:
            a1[1] = v253;
            break;
          default:
            goto LABEL_248;
        }
        goto LABEL_217;
    }
  }
}

id specialized CodableTextAttachment.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81678]), sel_init);
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
LABEL_46:
    a1[3] = 0;
    return v5;
  }
  while (1)
  {
    unint64_t v9 = a1[3];
    if (v9)
    {
      unint64_t v10 = a1[4];
      if (v6 < v10) {
        goto LABEL_12;
      }
      if (v10 < v6) {
        goto LABEL_47;
      }
      a1[3] = 0;
    }
    unint64_t v9 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_48;
    }
    if (v9 < 8)
    {
LABEL_47:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_48:

      return v5;
    }
LABEL_12:
    unint64_t v11 = v9 >> 3;
    if (v9 >> 3 == 3) {
      goto LABEL_5;
    }
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        if ((v9 & 7) != 2) {
          goto LABEL_47;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_48;
        }
        CodablePlatformImage.init(from:)(a1, &v35);
        uint64_t v3 = 0;
        uint64_t v2 = (const char **)a1[5];
        if (!v2[2]) {
          goto LABEL_55;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v12 = v2[2];
          if (!v12) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          uint64_t v12 = v2[2];
          if (!v12) {
            goto LABEL_56;
          }
        }
        uint64_t v13 = v12 - 1;
        uint64_t v14 = v2[(void)v13 + 4];
        v2[2] = v13;
        a1[5] = v2;
        a1[2] = v14;
        uint64_t v15 = v35;
        uint64_t v2 = (const char **)&v35[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage];
        swift_beginAccess();
        _NSTextAttachmentSetImage(v5, *v2);
      }
      else
      {
        switch(v9 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_48;
            }
            goto LABEL_5;
          case 1uLL:
            unint64_t v8 = a1[1] + 8;
            if (v7 >= v8) {
              goto LABEL_4;
            }
            goto LABEL_47;
          case 2uLL:
            uint64_t v29 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_48;
            }
            if (v29 < 0) {
              goto LABEL_58;
            }
            unint64_t v8 = a1[1] + v29;
            if (v7 < v8) {
              goto LABEL_47;
            }
LABEL_4:
            a1[1] = v8;
            break;
          case 5uLL:
            unint64_t v8 = a1[1] + 4;
            if (v7 < v8) {
              goto LABEL_47;
            }
            goto LABEL_4;
          default:
            goto LABEL_47;
        }
      }
      goto LABEL_5;
    }
    if ((v9 & 7) != 2) {
      goto LABEL_47;
    }
    uint64_t v2 = (const char **)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)(v2[2] + 1), 1, v2);
    }
    unint64_t v17 = (unint64_t)v2[2];
    unint64_t v16 = (unint64_t)v2[3];
    if (v17 >= v16 >> 1) {
      uint64_t v2 = (const char **)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v2);
    }
    v2[2] = (const char *)(v17 + 1);
    v2[v17 + 4] = (const char *)v7;
    a1[5] = v2;
    uint64_t v18 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_48;
    }
    if (v18 < 0) {
      break;
    }
    unint64_t v19 = a1[1] + v18;
    if (v7 < v19) {
      goto LABEL_47;
    }
    a1[2] = v19;
    uint64_t v20 = Data.init(from:)((uint64_t)a1);
    unint64_t v22 = (void *)a1[5];
    if (!v22[2]) {
      goto LABEL_57;
    }
    uint64_t v2 = (const char **)v20;
    unint64_t v23 = v21;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v24 = v22[2];
      if (!v24) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v24 = v22[2];
      if (!v24)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    uint64_t v25 = v24 - 1;
    uint64_t v26 = v22[v25 + 4];
    v22[2] = v25;
    a1[5] = v22;
    a1[2] = v26;
    id v27 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, sel_setContents_, isa);

    outlined consume of Data._Representation((uint64_t)v2, v23);
LABEL_5:
    unint64_t v6 = a1[1];
    unint64_t v7 = a1[2];
    if (v6 >= v7) {
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  __break(1u);
  uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v32 = v31[2];
  if (!v32)
  {
    __break(1u);
    uint64_t v31 = (void *)a1[5];
    if (v31[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v32 = v31[2];
        if (v32) {
          goto LABEL_53;
        }
LABEL_62:
        __break(1u);
        JUMPOUT(0x245AE3CF8);
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
    uint64_t v32 = v31[2];
    if (!v32) {
      goto LABEL_62;
    }
  }
LABEL_53:
  uint64_t v33 = v32 - 1;
  uint64_t v34 = v31[v33 + 4];
  v31[2] = v33;

  a1[5] = v31;
  a1[2] = v34;
  return v5;
}

void *specialized CodableAdaptiveImageGlyph.init(from:)(void *a1)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 < v6)
  {
    uint64_t v1 = 0;
    while (1)
    {
      unint64_t v7 = a1[3];
      if (!v7) {
        goto LABEL_11;
      }
      unint64_t v8 = a1[4];
      if (v5 >= v8) {
        break;
      }
LABEL_13:
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((v7 & 7) != 2) {
          goto LABEL_36;
        }
        uint64_t v3 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v10 = v3[2];
        unint64_t v9 = v3[3];
        if (v10 >= v9 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v3);
        }
        v3[2] = v10 + 1;
        v3[v10 + 4] = v6;
        a1[5] = v3;
        uint64_t v11 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_37;
        }
        if (v11 < 0)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          __break(1u);
          unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v29 = v28[2];
          if (!v29)
          {
            __break(1u);
            JUMPOUT(0x245AE4070);
          }
          uint64_t v26 = v29 - 1;
          uint64_t v27 = v28[v26 + 4];
          void v28[2] = v26;

          a1[5] = v28;
          a1[2] = v27;
          return v1;
        }
        unint64_t v12 = a1[1] + v11;
        if (v6 < v12) {
          goto LABEL_36;
        }
        a1[2] = v12;
        uint64_t v13 = Data.init(from:)((uint64_t)a1);
        uint64_t v15 = (void *)a1[5];
        if (!v15[2]) {
          goto LABEL_43;
        }
        uint64_t v3 = (void *)v13;
        unint64_t v16 = v14;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v17 = v15[2];
          if (!v17) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          uint64_t v17 = v15[2];
          if (!v17)
          {
LABEL_35:
            __break(1u);
LABEL_36:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_37:

            return v1;
          }
        }
        uint64_t v18 = v17 - 1;
        uint64_t v19 = v15[v18 + 4];
        v15[2] = v18;
        a1[5] = v15;
        a1[2] = v19;
        id v20 = objc_allocWithZone(MEMORY[0x263F81618]);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v22 = objc_msgSend(v20, sel_initWithImageContent_, isa);
        outlined consume of Data._Representation((uint64_t)v3, v16);

        uint64_t v1 = v22;
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v2) {
              break;
            }
            goto LABEL_37;
          case 1uLL:
            unint64_t v23 = a1[1] + 8;
            goto LABEL_32;
          case 2uLL:
            uint64_t v24 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_37;
            }
            if (v24 < 0) {
              goto LABEL_44;
            }
            unint64_t v23 = a1[1] + v24;
LABEL_32:
            if (v6 < v23) {
              goto LABEL_36;
            }
            a1[1] = v23;
            break;
          case 5uLL:
            unint64_t v23 = a1[1] + 4;
            goto LABEL_32;
          default:
            goto LABEL_36;
        }
      }
      unint64_t v5 = a1[1];
      unint64_t v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (v1) {
          return v1;
        }
        goto LABEL_4;
      }
    }
    if (v8 < v5) {
      goto LABEL_36;
    }
    a1[3] = 0;
LABEL_11:
    unint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_37;
    }
    if (v7 < 8) {
      goto LABEL_36;
    }
    goto LABEL_13;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error();
  swift_allocError();
  swift_willThrow();
  return v1;
}

ValueMetadata *type metadata accessor for CodableAttributedString()
{
  return &type metadata for CodableAttributedString;
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAttributedString.Range(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CodableAttributedString.Range()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for CodableAttributedString.Range(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAttributedString.Range(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAttributedString.Range()
{
  return &type metadata for CodableAttributedString.Range;
}

void *type metadata accessor for CodableAttributedString.Range.Error()
{
  return &unk_26FA68C30;
}

CGFontRef specialized CodableCGFont.init(from:)(id *a1)
{
  id v5 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v6)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  CGFontRef v1 = 0;
  while (2)
  {
    unint64_t v11 = (unint64_t)a1[3];
    if (!v11) {
      goto LABEL_12;
    }
    id v12 = a1[4];
    if (v5 >= v12)
    {
      if (v12 < v5) {
        goto LABEL_80;
      }
      a1[3] = 0;
LABEL_12:
      unint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_81;
      }
      if (v11 < 8) {
        goto LABEL_80;
      }
    }
    switch(v11 >> 3)
    {
      case 1uLL:
        if ((v11 & 7) != 2) {
          goto LABEL_80;
        }
        uint64_t v3 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v14 = v3[2];
        unint64_t v13 = v3[3];
        if (v14 >= v13 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
        }
        v3[2] = v14 + 1;
        v3[v14 + 4] = v6;
        a1[5] = v3;
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_81;
        }
        if (v15 < 0)
        {
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
          __break(1u);
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v42 = v41[2];
          if (v42) {
            goto LABEL_94;
          }
          __break(1u);
          uint64_t v41 = a1[5];
          if (v41[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v42 = v41[2];
              if (v42) {
                goto LABEL_94;
              }
LABEL_88:
              __break(1u);
              uint64_t v41 = a1[5];
              if (v41[2])
              {
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  uint64_t v42 = v41[2];
                  if (!v42) {
                    goto LABEL_91;
                  }
LABEL_94:
                  uint64_t v43 = v42 - 1;
                  uint64_t v44 = (void *)v41[v43 + 4];
                  v41[2] = v43;

                  a1[5] = v41;
                  a1[2] = v44;
                  return v1;
                }
              }
              else
              {
                __break(1u);
              }
              uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
              uint64_t v42 = v41[2];
              if (v42) {
                goto LABEL_94;
              }
LABEL_91:
              __break(1u);
              swift_bridgeObjectRelease();
              uint64_t v41 = a1[5];
              if (v41[2])
              {
                if (swift_isUniquelyReferenced_nonNull_native())
                {
                  uint64_t v42 = v41[2];
                  if (v42) {
                    goto LABEL_94;
                  }
LABEL_116:
                  __break(1u);
                  JUMPOUT(0x245AE49D8);
                }
              }
              else
              {
                __break(1u);
              }
              uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
              uint64_t v42 = v41[2];
              if (v42) {
                goto LABEL_94;
              }
              goto LABEL_116;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
          uint64_t v42 = v41[2];
          if (v42) {
            goto LABEL_94;
          }
          goto LABEL_88;
        }
        unint64_t v16 = (unint64_t)a1[1] + v15;
        if (v6 < v16) {
          goto LABEL_80;
        }
        a1[2] = (id)v16;
        uint64_t v17 = specialized CodablePlatformFont.init(from:)(a1);
        uint64_t v18 = a1[5];
        if (!v18[2]) {
          goto LABEL_99;
        }
        uint64_t v3 = v17;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v19 = v18[2];
          if (!v19) {
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v19 = v18[2];
          if (!v19) {
            goto LABEL_104;
          }
        }
LABEL_65:
        uint64_t v35 = v19 - 1;
        unint64_t v36 = (void *)v18[v35 + 4];
        v18[2] = v35;
        a1[5] = v18;
        a1[2] = v36;
        uint64_t v3 = v3;
        CGFontRef v37 = CTFontCopyGraphicsFont((CTFontRef)v3, 0);

        CGFontRef v1 = v37;
LABEL_7:
        id v5 = a1[1];
        unint64_t v6 = (unint64_t)a1[2];
        if ((unint64_t)v5 < v6) {
          continue;
        }
        a1[3] = 0;
        if (!v1)
        {
LABEL_4:
          lazy protocol witness table accessor for type CodableCGFont.Error and conformance CodableCGFont.Error();
          swift_allocError();
          swift_willThrow();
        }
        return v1;
      case 2uLL:
        if ((v11 & 7) != 2) {
          goto LABEL_80;
        }
        uint64_t v3 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v21 = v3[2];
        unint64_t v20 = v3[3];
        if (v21 >= v20 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v3);
        }
        v3[2] = v21 + 1;
        v3[v21 + 4] = v6;
        a1[5] = v3;
        uint64_t v22 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_81;
        }
        if (v22 < 0) {
          goto LABEL_96;
        }
        unint64_t v23 = (unint64_t)a1[1] + v22;
        if (v6 < v23) {
          goto LABEL_80;
        }
        a1[2] = (id)v23;
        uint64_t v24 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        unint64_t v7 = a1[5];
        if (!v7[2]) {
          goto LABEL_100;
        }
        uint64_t v3 = (void *)v24;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v8 = v7[2];
          if (!v8) {
            goto LABEL_103;
          }
        }
        else
        {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          uint64_t v8 = v7[2];
          if (!v8) {
            goto LABEL_103;
          }
        }
        goto LABEL_6;
      case 3uLL:
        if ((v11 & 7) != 2) {
          goto LABEL_80;
        }
        uint64_t v3 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v26 = v3[2];
        unint64_t v25 = v3[3];
        if (v26 >= v25 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v3);
        }
        v3[2] = v26 + 1;
        v3[v26 + 4] = v6;
        a1[5] = v3;
        uint64_t v27 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_81;
        }
        if (v27 < 0) {
          goto LABEL_97;
        }
        unint64_t v28 = (unint64_t)a1[1] + v27;
        if (v6 < v28) {
          goto LABEL_80;
        }
        a1[2] = (id)v28;
        uint64_t v29 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        unint64_t v7 = a1[5];
        if (!v7[2]) {
          goto LABEL_101;
        }
        uint64_t v3 = (void *)v29;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v8 = v7[2];
          if (!v8) {
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          uint64_t v8 = v7[2];
          if (!v8) {
            goto LABEL_105;
          }
        }
LABEL_6:
        uint64_t v9 = v8 - 1;
        unint64_t v10 = (void *)v7[v9 + 4];
        v7[2] = v9;

        a1[5] = v7;
        a1[2] = v10;
        CGFontRef v1 = (CGFontRef)v3;
        goto LABEL_7;
      case 4uLL:
        if ((v11 & 7) != 2) {
          goto LABEL_80;
        }
        uint64_t v3 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v31 = v3[2];
        unint64_t v30 = v3[3];
        if (v31 >= v30 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v3);
        }
        v3[2] = v31 + 1;
        v3[v31 + 4] = v6;
        a1[5] = v3;
        uint64_t v32 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_81;
        }
        if (v32 < 0) {
          goto LABEL_98;
        }
        unint64_t v33 = (unint64_t)a1[1] + v32;
        if (v6 < v33) {
          goto LABEL_80;
        }
        a1[2] = (id)v33;
        uint64_t v34 = (uint64_t)a1[6];
        swift_bridgeObjectRetain_n();
        uint64_t v3 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1, v34);
        swift_bridgeObjectRelease();
        uint64_t v18 = a1[5];
        if (!v18[2]) {
          goto LABEL_102;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v19 = v18[2];
          if (!v19) {
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v19 = v18[2];
          if (!v19)
          {
LABEL_79:
            __break(1u);
LABEL_80:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_81:

            return v1;
          }
        }
        goto LABEL_65;
      default:
        switch(v11 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_81;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v38 = (unint64_t)a1[1] + 8;
            if (v6 < v38) {
              goto LABEL_80;
            }
            goto LABEL_73;
          case 2uLL:
            uint64_t v39 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_81;
            }
            if (v39 < 0) {
              goto LABEL_106;
            }
            unint64_t v38 = (unint64_t)a1[1] + v39;
            if (v6 < v38) {
              goto LABEL_80;
            }
LABEL_73:
            a1[1] = (id)v38;
            break;
          case 5uLL:
            unint64_t v38 = (unint64_t)a1[1] + 4;
            if (v6 >= v38) {
              goto LABEL_73;
            }
            goto LABEL_80;
          default:
            goto LABEL_80;
        }
        goto LABEL_7;
    }
  }
}

unint64_t lazy protocol witness table accessor for type CodableCGFont.Error and conformance CodableCGFont.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error;
  if (!lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error;
  if (!lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableCGFont.Error and conformance CodableCGFont.Error);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

id *outlined retain of ProtobufDecoder(id *a1)
{
  id v2 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void **outlined release of ProtobufDecoder(void **a1)
{
  id v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

void type metadata accessor for [JSONCodable<CFArrayRef>](uint64_t a1)
{
}

void type metadata accessor for JSONCodable<CFArrayRef>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type JSONCodable<CFArrayRef> and conformance JSONCodable<A>, type metadata accessor for JSONCodable<CFArrayRef>);
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error);
  }
  return result;
}

void type metadata accessor for [JSONCodable<[String : Double]>](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error;
  if (!lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error;
  if (!lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAdaptiveImageGlyph.Error and conformance CodableAdaptiveImageGlyph.Error);
  }
  return result;
}

uint64_t type metadata accessor for CodableAttributedString.Range.DecodingWrapper()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]()
{
  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]();
    lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?);
    }
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]()
{
  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]();
    lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?);
    }
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]()
{
  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]();
    lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?);
    }
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]()
{
  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]();
    lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableTimer> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?);
    }
  }
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for CodableAttributedString.Range.DecodingWrapper();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]()
{
  if (!lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>])
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A])
  {
    type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]();
    lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<ResolvableProgress> and conformance CodableAttributedString.Range.DecodingWrapper<A>, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?)
  {
    type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>(255, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?);
    }
  }
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>()
{
  if (!lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>)
  {
    unint64_t v0 = type metadata accessor for CodableAttributedString.Range.DecodingWrapper();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
    }
  }
}

void type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>, (void (*)(uint64_t))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
}

void type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>?(uint64_t a1)
{
}

void type metadata accessor for [ResolvableTextSegmentAttribute.Value](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

{
  return lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

unint64_t lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont()
{
  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont;
  if (!lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformFont and conformance CodablePlatformFont);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error;
  if (!lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error;
  if (!lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error);
  }
  return result;
}

uint64_t outlined init with copy of ResolvableStringAttribute?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  type metadata accessor for AnyTrackedValue?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)()
{
  return implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)();
}

uint64_t type metadata accessor for CodableAttributedString.Range.EncodingWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range.EncodingWrapper(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CodableAttributedString.Range.EncodingWrapper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245AE5E1CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void *type metadata accessor for CodableTextAttachment.Error()
{
  return &unk_26FA63AC0;
}

ValueMetadata *type metadata accessor for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)()
{
  return &type metadata for DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
}

uint64_t destroy for CodableAttributedString.Range.DecodingWrapper(uint64_t result)
{
  if (*(void *)(result + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAttributedString.Range.DecodingWrapper(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAttributedString.Range.DecodingWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

void *type metadata accessor for CodableAdaptiveImageGlyph.Error()
{
  return &unk_26FA6C738;
}

ValueMetadata *type metadata accessor for CodablePlatformFont()
{
  return &type metadata for CodablePlatformFont;
}

void *type metadata accessor for CodablePlatformFont.Error()
{
  return &unk_26FA5DB20;
}

unsigned char *storeEnumTagSinglePayload for CodableAttributedString.Range.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245AE6164);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CodableCGFont.Error()
{
  return &unk_26FA485D0;
}

unint64_t instantiation function for generic protocol witness table for CodablePlatformFont(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
  unint64_t result = lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:)()
{
  unint64_t result = lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
  if (!lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:);
  if (!lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataKey #1 in closure #2 in CodablePlatformFont.encode(to:) and conformance DataKey #1 in closure #2 in CodablePlatformFont.encode(to:));
  }
  return result;
}

uint64_t closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)specialized partial apply()
{
  return partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)();
}

uint64_t VStack._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t VStack._tree.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*VStack._tree.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _VStackLayout.alignment.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_VStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_VStackLayout.spacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _VStackLayout.majorAxis.getter()
{
  return 1;
}

uint64_t protocol witness for HVStack.spacing.getter in conformance _VStackLayout()
{
  return *(void *)(v0 + 8);
}

uint64_t static _VStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  return static HorizontalAlignment.center;
}

uint64_t VStackLayout.alignment.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*VStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t VStackLayout.spacing.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t VStackLayout.spacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*VStackLayout.spacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 protocol witness for DerivedLayout.base.getter in conformance VStackLayout@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> VStack<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(&lazy protocol witness table cache variable for type VStack<EmptyView> and conformance <> VStack<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(&lazy protocol witness table cache variable for type VStack<EmptyView> and conformance <> VStack<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for VStack<EmptyView>()
{
  if (!lazy cache variable for type metadata for VStack<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<EmptyView>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type VStack<EmptyView> and conformance <> VStack<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<EmptyView>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for VStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout;
  if (!lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStackLayout and conformance VStackLayout);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for VStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 17) & ~v5, ((unint64_t)a2 + v5 + 17) & ~v5);
  }
  return v3;
}

ValueMetadata *type metadata accessor for VStackLayout()
{
  return &type metadata for VStackLayout;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Array();
  _ViewInputs.base.modify(v0, v1);
}

uint64_t ArrayWith2Inline.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for ArrayWith2Inline.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ArrayWith2Inline.storage.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ArrayWith2Inline.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArrayWith2Inline.init()()
{
  type metadata accessor for ArrayWith2Inline.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ArrayWith2Inline.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  BOOL v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);
  v9(a4, a1, a3);
  v9(v8, a2, a3);
  type metadata accessor for ArrayWith2Inline.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v79 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v67 = type metadata accessor for IteratorSequence();
  MEMORY[0x270FA5388](v67);
  unint64_t v66 = (char *)&v62 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v68 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v71 = (char *)&v62 - v12;
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v62 - v14;
  uint64_t v75 = *(void **)(a2 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v69 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v70 = (char *)&v62 - v19;
  MEMORY[0x270FA5388](v20);
  unint64_t v74 = (char *)&v62 - v21;
  uint64_t v80 = AssociatedTypeWitness;
  uint64_t v76 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v65 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  unint64_t v81 = (char *)&v62 - v25;
  uint64_t v26 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = a2;
  uint64_t v78 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v30 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v32 = (uint64_t *)((char *)&v62 - v31);
  uint64_t v33 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v33 >= 3)
  {
    Swift::Int v34 = v33;
    if (type metadata accessor for Array() == a3 || type metadata accessor for ContiguousArray() == a3)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, a1, a3);
      uint64_t v37 = Array.init<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a1, a3);
      *uint64_t v32 = v37;
      uint64_t v38 = v78;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v30 + 32))(v79, v32, v38);
    }
    static Array._allocateUninitialized(_:)();
    uint64_t v83 = ContiguousArray.init(arrayLiteral:)();
    ContiguousArray.reserveCapacity(_:)(v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, a1, a3);
    ContiguousArray.append<A>(contentsOf:)();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a1, a3);
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, a1, a3);
  dispatch thunk of Sequence.makeIterator()();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v35 = v75;
  unint64_t v36 = (unsigned int (*)(char *, uint64_t, uint64_t))v75[6];
  if (v36(v15, 1, v82) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a1, a3);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v80);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v15, v73);
  }
  else
  {
    uint64_t v63 = v26;
    uint64_t v64 = a1;
    NSNumber v40 = (void (*)(char *, char *, uint64_t))v35[4];
    uint64_t v41 = v74;
    uint64_t v42 = v82;
    v40(v74, v15, v82);
    uint64_t v43 = v71;
    dispatch thunk of IteratorProtocol.next()();
    if (v36(v43, 1, v42) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, a3);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v80);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v73);
      v40((char *)v79, v41, v82);
    }
    else
    {
      uint64_t v44 = v70;
      uint64_t v45 = v82;
      v40(v70, v43, v82);
      uint64_t v46 = v68;
      dispatch thunk of IteratorProtocol.next()();
      if (v36(v46, 1, v45) != 1)
      {
        uint64_t v49 = v46;
        uint64_t v50 = v82;
        v40(v69, v49, v82);
        getContiguousArrayStorageType<A>(for:)(v50, v50);
        uint64_t v51 = v35[9];
        swift_allocObject();
        uint64_t v52 = static Array._adoptStorage(_:count:)();
        uint64_t v54 = v53;
        uint64_t v55 = (void (*)(uint64_t, char *, uint64_t))v35[2];
        v55(v53, v74, v50);
        v55(v54 + v51, v44, v50);
        v55(v54 + 2 * v51, v69, v50);
        uint64_t v84 = v52;
        uint64_t v56 = type metadata accessor for Array();
        _ViewInputs.base.modify(v56, v57);
        uint64_t v83 = ContiguousArray.init(arrayLiteral:)();
        uint64_t v58 = v76;
        unint64_t v59 = v65;
        uint64_t v60 = v80;
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v65, v81, v80);
        MEMORY[0x24C524020](v59, v60, AssociatedConformanceWitness);
        type metadata accessor for ContiguousArray();
        swift_getWitnessTable();
        ContiguousArray.append<A>(contentsOf:)();
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, a3);
        uint64_t v61 = (void (*)(char *, uint64_t))v35[1];
        v61(v69, v50);
        v61(v70, v50);
        v61(v74, v50);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v81, v60);
LABEL_13:
        *uint64_t v79 = v83;
        return swift_storeEnumTagMultiPayload();
      }
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, a3);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v80);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v73);
      uint64_t v47 = v82;
      uint64_t v48 = (char *)v79 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      v40((char *)v79, v74, v47);
      v40(v48, v44, v47);
    }
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.startIndex.getter()
{
  return 0;
}

uint64_t ArrayWith2Inline.endIndex.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v13 - v7, v2, v4, v6);
  uint64_t v9 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8);
      v11(&v8[*(int *)(TupleTypeMetadata2 + 48)], v3);
      v11(v8, v3);
      uint64_t v9 = 2;
      break;
    case 2u:
      uint64_t v9 = ContiguousArray.count.getter();
      swift_release();
      break;
    case 3u:
      return v9;
    default:
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v9 = 1;
      break;
  }
  return v9;
}

uint64_t ArrayWith2Inline.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v28 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = type metadata accessor for ArrayWith2Inline.Storage();
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v28 - v19, v4, v17, v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v24 = &v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v25(v13, v20, v7);
      v25(v10, v24, v7);
      if (a1)
      {
        if (a1 != 1)
        {
LABEL_11:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245AE7D28);
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
        uint64_t v26 = a3;
        uint64_t v27 = v10;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        uint64_t v26 = a3;
        uint64_t v27 = v13;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v26, v27, v7);
      break;
    case 2u:
      ContiguousArray.subscript.getter();
      return swift_release();
    case 3u:
      goto LABEL_11;
    default:
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v22(v16, v20, v7);
      if (a1) {
        goto LABEL_11;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(a3, v16, v7);
      break;
  }
  return result;
}

uint64_t key path setter for ArrayWith2Inline.subscript(_:) : <A>ArrayWith2Inline<A>A(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v9 - v2;
  unint64_t v5 = *v4;
  (*(void (**)(char *, double))(v6 + 16))((char *)&v9 - v2, v1);
  uint64_t v7 = type metadata accessor for ArrayWith2Inline();
  return ArrayWith2Inline.subscript.setter(v3, v5, v7);
}

uint64_t ArrayWith2Inline.subscript.setter(char *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v36 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (uint64_t *)((char *)&v32 - v19);
  (*(void (**)(char *, void *, uint64_t, double))(v14 + 16))((char *)&v32 - v19, v4, v13, v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Swift::Int v34 = a1;
      uint64_t v35 = v4;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v32 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v33 = TupleTypeMetadata2;
      uint64_t v26 = *(void (**)(char *, uint64_t *, uint64_t))(v7 + 32);
      v26(v12, v20, v6);
      v26(v9, (uint64_t *)v32, v6);
      if (v36)
      {
        uint64_t v30 = v33;
        if (v36 != 1)
        {
LABEL_14:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245AE8308);
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v31 = &v16[*(int *)(v30 + 48)];
        v26(v16, (uint64_t *)v12, v6);
        uint64_t v28 = v31;
        uint64_t v29 = v34;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
        uint64_t v27 = &v16[*(int *)(v33 + 48)];
        v26(v16, (uint64_t *)v34, v6);
        uint64_t v28 = v27;
        uint64_t v29 = v9;
      }
      v26(v28, (uint64_t *)v29, v6);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, char *, uint64_t))(v14 + 40))(v35, v16, v13);
    case 2u:
      uint64_t v23 = a1;
      uint64_t v37 = *v20;
      uint64_t v24 = *(void (**)(void *, uint64_t))(v14 + 8);
      v24(v4, v13);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ContiguousArray();
      ContiguousArray._makeMutableAndUnique()();
      if ((v36 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)(v37 + 16) > v36)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v7 + 24))(v37+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v36, v23, v6);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
        v24(v4, v13);
        *uint64_t v4 = v37;
        return swift_storeEnumTagMultiPayload();
      }
      __break(1u);
      goto LABEL_14;
    case 3u:
      goto LABEL_14;
    default:
      if (v36) {
        goto LABEL_14;
      }
      uint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8);
      v21(v4, v13);
      (*(void (**)(void *, char *, uint64_t))(v7 + 32))(v4, a1, v6);
      swift_storeEnumTagMultiPayload();
      return v21(v20, v13);
  }
}

void (*ArrayWith2Inline.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[6] = v11;
  ArrayWith2Inline.subscript.getter(a2, a3, (uint64_t)v11);
  return ArrayWith2Inline.subscript.modify;
}

void ArrayWith2Inline.subscript.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  if (a2)
  {
    unint64_t v5 = v2[3];
    unint64_t v6 = v2[4];
    uint64_t v7 = v2[1];
    unint64_t v8 = *v2;
    (*(void (**)(unint64_t, void *, unint64_t))(v6 + 16))((*a1)[5], v4, v5);
    ArrayWith2Inline.subscript.setter(v3, v8, v7);
    (*(void (**)(void *, unint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ArrayWith2Inline.subscript.setter((char *)(*a1)[6], *v2, v2[1]);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Int __swiftcall ArrayWith2Inline.index(after:)(Swift::Int after)
{
  return after + 1;
}

Swift::Int __swiftcall ArrayWith2Inline.index(before:)(Swift::Int before)
{
  return before - 1;
}

Swift::Int __swiftcall ArrayWith2Inline.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ArrayWith2Inline.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t ArrayWith2Inline._copyToContiguousArray()(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for LazySequence();
  uint64_t v15 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v14 = type metadata accessor for LazyMapSequence();
  MEMORY[0x270FA5388](v14);
  uint64_t v8 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (uint64_t *)((char *)&v14 - v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v14 - v11, v1, v8, v10);
  if (swift_getEnumCaseMultiPayload() == 2) {
    return MEMORY[0x24C523E50](*v12, v7);
  }
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  MEMORY[0x24C522BD0](a1, WitnessTable);
  *(void *)(swift_allocObject() + 16) = v7;
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v4);
  swift_getWitnessTable();
  return Array.init<A>(_:)();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ArrayWith2Inline<A>(char *a1, unint64_t *a2, uint64_t a3)
{
  return ArrayWith2Inline.subscript.setter(a1, *a2, a3);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArrayWith2Inline<A>(void *a1, uint64_t *a2, uint64_t a3))()
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ArrayWith2Inline.subscript.modify(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  specialized MutableCollection<>.subscript.setter();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Slice();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArrayWith2Inline<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance ArrayWith2Inline<A>()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ArrayWith2Inline<A>()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance ArrayWith2Inline<A>()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance ArrayWith2Inline<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArrayWith2Inline<A>(void *result)
{
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ArrayWith2Inline<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ArrayWith2Inline<A>(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ArrayWith2Inline.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ArrayWith2Inline.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void (*ArrayWith2Inline.subscript.read(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = v8;
  ArrayWith2Inline.subscript.getter(a2, a3, (uint64_t)v8);
  return ArraySlice.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.subscript.getter in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance ArrayWith2Inline<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ArrayWith2Inline<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArrayWith2Inline<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance ArrayWith2Inline<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance ArrayWith2Inline<A>(void *result)
{
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ArrayWith2Inline<A>(uint64_t a1)
{
  uint64_t v3 = ArrayWith2Inline._copyToContiguousArray()(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)@<X0>(void (*a1)(void)@<X0>, void (*a2)(void *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v91 = a1;
  uint64_t v90 = a2;
  uint64_t v87 = a5;
  uint64_t v96 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = (int *)swift_getTupleTypeMetadata2();
  uint64_t v80 = *((void *)TupleTypeMetadata2 - 1);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v85 = (char *)&v74 - v8;
  uint64_t v88 = a4;
  uint64_t v83 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v82 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v84 = (char *)&v74 - v12;
  MEMORY[0x270FA5388](v13);
  unint64_t v81 = (char *)&v74 - v14;
  uint64_t v89 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v74 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v24 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v25 = *(char **)(v24 - 8);
  double v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (uint64_t *)((char *)&v74 - v27);
  uint64_t v29 = v5;
  (*((void (**)(char *, char *, uint64_t, double))v25 + 2))((char *)&v74 - v27, v5, v24, v26);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v44 = TupleTypeMetadata2[12];
      unint64_t v81 = (char *)v24;
      uint64_t v82 = v25;
      uint64_t v45 = (uint64_t)TupleTypeMetadata2;
      uint64_t v79 = (char *)v28 + v44;
      uint64_t v46 = v89;
      uint64_t v47 = v17;
      uint64_t v49 = v89 + 32;
      uint64_t v48 = *(void (**)(char *, uint64_t *, uint64_t))(v89 + 32);
      v48(v20, v28, v7);
      uint64_t v76 = v48;
      uint64_t v77 = v49;
      v48(v47, (uint64_t *)v79, v7);
      uint64_t v50 = v20;
      uint64_t v51 = v46;
      uint64_t v52 = *(int *)(v45 + 48);
      uint64_t v53 = v81;
      uint64_t v54 = (uint64_t)v85;
      uint64_t v55 = &v85[v52];
      uint64_t v56 = *(void (**)(char *))(v46 + 16);
      uint64_t v78 = v50;
      v56(v85);
      uint64_t v75 = v55;
      uint64_t v79 = v47;
      uint64_t v57 = v47;
      uint64_t v58 = v82;
      ((void (*)(char *, char *, uint64_t))v56)(v55, v57, v7);
      unint64_t v74 = (void (*)(void *, char *))*((void *)v58 + 1);
      v74(v29, v53);
      uint64_t v59 = swift_storeEnumTagMultiPayload();
      uint64_t v82 = (char *)&v74;
      MEMORY[0x270FA5388](v59);
      uint64_t v60 = v88;
      *(&v74 - 4) = (void (*)(void *, char *))v7;
      *(&v74 - 3) = (void (*)(void *, char *))v60;
      uint64_t v61 = v90;
      *(&v74 - 2) = (void (*)(void *, char *))v91;
      *(&v74 - 1) = v61;
      unint64_t v62 = type metadata accessor for Error();
      uint64_t v63 = (uint64_t)TupleTypeMetadata2;
      uint64_t v64 = v92;
      _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v54, (uint64_t)partial apply for closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:), (uint64_t)(&v74 - 6), (uint64_t)TupleTypeMetadata2, v62, v60, MEMORY[0x263F8E4E0], (uint64_t)&v94);
      if (!v64)
      {
        uint64_t v70 = v63;
        unint64_t v71 = *(void (**)(char *, uint64_t))(v51 + 8);
        v71(v79, v7);
        v71(v78, v7);
        v74(v29, v53);
        uint64_t v72 = &v29[*(int *)(v70 + 48)];
        uint64_t v73 = (void (*)(char *, char *, uint64_t))v76;
        v76(v29, (uint64_t *)v85, v7);
        v73(v72, v75, v7);
        swift_storeEnumTagMultiPayload();
        uint64_t v68 = v84;
        unint64_t v66 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32);
        uint64_t v67 = v87;
        uint64_t v69 = v60;
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v85, v63);
      unint64_t v65 = *(void (**)(char *, uint64_t))(v51 + 8);
      v65(v79, v7);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v65)(v78, v7);
      break;
    case 2u:
      uint64_t v93 = *v28;
      TupleTypeMetadata2 = (int *)*((void *)v25 + 1);
      ((void (*)(char *, uint64_t))TupleTypeMetadata2)(v5, v24);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ContiguousArray();
      ContiguousArray._makeMutableAndUnique()();
      uint64_t v38 = v92;
      uint64_t v39 = *(void *)(v93 + 16);
      uint64_t v94 = v93 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
      uint64_t v40 = v94;
      uint64_t v95 = v39;
      uint64_t v41 = v82;
      v91(&v94);
      uint64_t v42 = v39;
      if (!v38)
      {
        uint64_t v35 = v88;
        $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v94, v40, v42);
        ((void (*)(char *, uint64_t))TupleTypeMetadata2)(v5, v24);
        *(void *)uint64_t v5 = v93;
        swift_storeEnumTagMultiPayload();
        unint64_t v66 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32);
        uint64_t v67 = v87;
        uint64_t v68 = v41;
        goto LABEL_11;
      }
      $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v94, v40, v39);
      uint64_t result = swift_release();
      break;
    case 3u:
      uint64_t v94 = UnsafeMutableBufferPointer.init(start:count:)();
      uint64_t v95 = v43;
      uint64_t result = ((uint64_t (*)(uint64_t *))v91)(&v94);
      break;
    default:
      unint64_t v85 = *(char **)(v89 + 32);
      ((void (*)(char *, uint64_t *, uint64_t))v85)(v23, v28, v7);
      uint64_t v84 = (char *)*((void *)v25 + 1);
      ((void (*)(char *, uint64_t))v84)(v5, v24);
      uint64_t v30 = swift_storeEnumTagMultiPayload();
      TupleTypeMetadata2 = (int *)&v74;
      MEMORY[0x270FA5388](v30);
      uint64_t v31 = v88;
      *(&v74 - 4) = (void (*)(void *, char *))v7;
      *(&v74 - 3) = (void (*)(void *, char *))v31;
      uint64_t v32 = v90;
      *(&v74 - 2) = (void (*)(void *, char *))v91;
      *(&v74 - 1) = v32;
      unint64_t v33 = type metadata accessor for Error();
      Swift::Int v34 = v81;
      uint64_t v35 = v31;
      uint64_t v36 = v92;
      _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:), (uint64_t)(&v74 - 6), v7, v33, v31, MEMORY[0x263F8E4E0], (uint64_t)&v94);
      if (v36)
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v23, v7);
      }
      else
      {
        ((void (*)(char *, uint64_t))v84)(v5, v24);
        ((void (*)(char *, char *, uint64_t))v85)(v5, v23, v7);
        swift_storeEnumTagMultiPayload();
        unint64_t v66 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32);
        uint64_t v67 = v87;
        uint64_t v68 = v34;
LABEL_11:
        uint64_t v69 = v35;
LABEL_13:
        uint64_t result = v66(v67, v68, v69);
      }
      break;
  }
  return result;
}

uint64_t closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v18 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unint64_t v12 = type metadata accessor for Error();
  uint64_t result = _sSpsRi_zrlE17withMemoryRebound2to8capacity_qd_1_qd__m_Siqd_1_Spyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF(a4, 2, (uint64_t)partial apply for closure #1 in closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:), (uint64_t)v14, a1, TupleTypeMetadata2, a4, v12, a5, MEMORY[0x263F8E4E0], (uint64_t)&v19);
  if (v6) {
    *a6 = v19;
  }
  return result;
}

uint64_t ArrayWith2Inline.append(_:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (uint64_t *)((char *)&v37 - v18);
  (*(void (**)(char *, uint64_t *, uint64_t, double))(v13 + 16))((char *)&v37 - v18, v3, v12, v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v23 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v24 = v11;
      uint64_t v40 = v15;
      uint64_t v41 = v11;
      uint64_t v25 = (char *)v19 + v23;
      uint64_t v39 = a1;
      double v26 = (void (*)(char *, uint64_t *, uint64_t))v6[4];
      v26(v24, v19, v5);
      v26(v8, (uint64_t *)v25, v5);
      getContiguousArrayStorageType<A>(for:)(v5, v5);
      uint64_t v27 = v6[9];
      uint64_t v38 = 2 * v27;
      swift_allocObject();
      uint64_t v37 = static Array._adoptStorage(_:count:)();
      uint64_t v29 = v28;
      uint64_t v30 = (void (*)(uint64_t, char *, uint64_t))v6[2];
      v30(v28, v41, v5);
      v30(v29 + v27, v8, v5);
      v30(v29 + v38, v39, v5);
      uint64_t v42 = v37;
      uint64_t v31 = type metadata accessor for Array();
      _ViewInputs.base.modify(v31, v32);
      uint64_t v33 = ContiguousArray.init(arrayLiteral:)();
      Swift::Int v34 = (void (*)(char *, uint64_t))v6[1];
      v34(v8, v5);
      v34(v41, v5);
      uint64_t v35 = v40;
      *uint64_t v40 = v33;
      uint64_t v36 = v35;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 40))(v3, v36, v12);
    case 2u:
      uint64_t v42 = *v19;
      uint64_t v21 = *(void (**)(uint64_t *, uint64_t))(v13 + 8);
      v21(v3, v12);
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, char *, uint64_t))v6[2])(v11, a1, v5);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      v21(v3, v12);
      *uint64_t v3 = v42;
      return swift_storeEnumTagMultiPayload();
    case 3u:
      (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v3, v12);
      ((void (*)(uint64_t *, char *, uint64_t))v6[2])(v3, a1, v5);
      return swift_storeEnumTagMultiPayload();
    default:
      (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v3, v12);
      uint64_t v20 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      ((void (*)(uint64_t *, uint64_t *, uint64_t))v6[4])(v3, v19, v5);
      ((void (*)(char *, char *, uint64_t))v6[2])(v20, a1, v5);
      return swift_storeEnumTagMultiPayload();
  }
}

Swift::Void __swiftcall ArrayWith2Inline.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v14 - v11;
  if (a1 >= 3)
  {
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v9 + 16))(v12, v2, v8, v10);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      Swift::Int v13 = ContiguousArray.capacity.getter();
      swift_release();
      if (v13 >= a1) {
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    static Array._allocateUninitialized(_:)();
    uint64_t v15 = ContiguousArray.init(arrayLiteral:)();
    type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(a1);
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 16))(v7, v2, v3);
    swift_getWitnessTable();
    ContiguousArray.append<A>(contentsOf:)();
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v2, v8);
    *uint64_t v2 = v15;
    swift_storeEnumTagMultiPayload();
  }
}

Swift::Void __swiftcall ArrayWith2Inline.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (uint64_t *)((char *)&v11 - v7);
  (*(void (**)(char *, uint64_t *, uint64_t, double))(v5 + 16))((char *)&v11 - v7, v1, v4, v6);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v12 = *v8;
    if (keepingCapacity)
    {
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
      v9(v1, v4);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ContiguousArray();
      ContiguousArray.removeAll(keepingCapacity:)(1);
      v9(v1, v4);
      *uint64_t v1 = v12;
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v1, v4);
    }
  }
  else
  {
    double v10 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
    v10(v8, v4);
    v10(v2, v4);
  }
  swift_storeEnumTagMultiPayload();
}

uint64_t ArrayWith2Inline.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a1;
  uint64_t v67 = a3;
  uint64_t v70 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Slice();
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v69 = a6;
  uint64_t v12 = type metadata accessor for ConcatenatedCollection();
  uint64_t v72 = v12;
  uint64_t v73 = v10;
  uint64_t v56 = swift_getWitnessTable();
  uint64_t v74 = v56;
  uint64_t v75 = v11;
  uint64_t v65 = v11;
  uint64_t v57 = type metadata accessor for ConcatenatedCollection();
  MEMORY[0x270FA5388](v57);
  uint64_t v55 = (uint64_t)&v49 - v13;
  uint64_t v58 = a4;
  uint64_t v64 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v63 = (uint64_t *)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = v10;
  uint64_t v59 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v62 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v54 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v71 = (uint64_t)&v49 - v22;
  uint64_t v68 = a5;
  uint64_t v23 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v24);
  double v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a4 + 16);
  uint64_t v28 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v29 = *(void *)(v28 - 8);
  double v30 = MEMORY[0x270FA5388](v28);
  uint64_t v32 = (uint64_t *)((char *)&v49 - v31);
  (*(void (**)(char *, uint64_t *, uint64_t, double))(v29 + 16))((char *)&v49 - v31, v6, v28, v30);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v72 = *v32;
    uint64_t v33 = *(void (**)(uint64_t *, uint64_t))(v29 + 8);
    v33(v6, v28);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v67, v68);
    type metadata accessor for ContiguousArray();
    ContiguousArray.replaceSubrange<A>(_:with:)();
    v33(v6, v28);
    *double v6 = v72;
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v50 = v28;
    uint64_t v51 = v29;
    uint64_t v52 = v27;
    uint64_t v53 = v12;
    uint64_t v72 = v66;
    uint64_t v35 = (uint64_t (*)(void, void, void))MEMORY[0x263F8DE88];
    type metadata accessor for PartialRangeUpTo<Int>(0, &lazy cache variable for type metadata for PartialRangeUpTo<Int>, MEMORY[0x263F8DE88]);
    uint64_t v36 = v58;
    swift_getWitnessTable();
    lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>, &lazy cache variable for type metadata for PartialRangeUpTo<Int>, v35);
    MutableCollection.subscript.getter();
    uint64_t v37 = v60;
    concatenate<A, B>(_:_:)((uint64_t)v18, v67, v60, v68, v71);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v59 + 8);
    v38(v18, v37);
    uint64_t v39 = v6;
    if (Collection.count.getter() == v70)
    {
      uint64_t v40 = v62;
      uint64_t v41 = (uint64_t)v54;
      uint64_t v42 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v54, v71, v53);
      swift_getWitnessTable();
      uint64_t v43 = v63;
      ArrayWith2Inline.init<A>(_:)(v41, v52, v42, v63);
    }
    else
    {
      uint64_t v72 = v70;
      uint64_t v44 = (uint64_t (*)(void, void, void))MEMORY[0x263F8DE70];
      type metadata accessor for PartialRangeUpTo<Int>(0, &lazy cache variable for type metadata for PartialRangeFrom<Int>, MEMORY[0x263F8DE70]);
      lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>(&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>, &lazy cache variable for type metadata for PartialRangeFrom<Int>, v44);
      MutableCollection.subscript.getter();
      uint64_t v45 = v55;
      uint64_t v42 = v53;
      concatenate<A, B>(_:_:)(v71, (uint64_t)v18, v53, v37, v55);
      v38(v18, v37);
      uint64_t v46 = v57;
      swift_getWitnessTable();
      uint64_t v43 = v63;
      ArrayWith2Inline.init<A>(_:)(v45, v52, v46, v63);
      uint64_t v40 = v62;
    }
    uint64_t v47 = v51;
    uint64_t v48 = v50;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v71, v42);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v64 + 40))(v39, v43, v36);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v47 + 8))(v32, v48);
  }
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance ArrayWith2Inline<A>()
{
  return ArrayWith2Inline.init()();
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ArrayWith2Inline<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ArrayWith2Inline.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v7(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance ArrayWith2Inline<A>()
{
  return MEMORY[0x270F9E2C8]();
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance ArrayWith2Inline<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return ArrayWith2Inline.init<A>(_:)(a1, *(void *)(a3 + 16), a2, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance ArrayWith2Inline<A>(char *a1, uint64_t a2)
{
  ArrayWith2Inline.append(_:)(a1, a2);
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E288](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance ArrayWith2Inline<A>()
{
  return MEMORY[0x270F9E2A8]();
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance ArrayWith2Inline<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F9E2A0](a1, a2, a5, a3, a6, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance ArrayWith2Inline<A>()
{
  return MEMORY[0x270F9E250]();
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance ArrayWith2Inline<A>()
{
  return MEMORY[0x270F9E260]();
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance ArrayWith2Inline<A>()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ArrayWith2Inline<A>()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t static ArrayWith2Inline<A>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v70 = a1;
  uint64_t v71 = a2;
  uint64_t v68 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v61 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v60 = (char *)&v58 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v64 = (char *)&v58 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)&v58 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)&v58 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v65 = (char *)&v58 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v59 = (char *)&v58 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v58 = (char *)&v58 - v18;
  uint64_t v69 = v19;
  uint64_t v20 = type metadata accessor for ArrayWith2Inline.Storage();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  double v26 = (char *)&v58 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v58 - v28;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  double v32 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  Swift::Int v34 = (char *)&v58 - v33;
  uint64_t v36 = (char *)&v58 + *(int *)(v35 + 48) - v33;
  uint64_t v67 = v21;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16);
  v37((char *)&v58 - v33, v70, v20, v32);
  ((void (*)(char *, char *, uint64_t))v37)(v36, v71, v20);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      ((void (*)(char *, char *, uint64_t))v37)(v26, v34, v20);
      uint64_t v39 = v69;
      uint64_t v40 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v41 = &v26[v40];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v49 = *(void (**)(char *, uint64_t))(v68 + 8);
        v49(v41, v39);
        v49(v26, v39);
        goto LABEL_13;
      }
      uint64_t v71 = &v36[v40];
      uint64_t v42 = v68;
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
      v43(v65, v26, v39);
      v43(v62, v36, v39);
      uint64_t v44 = v63;
      v43(v63, v41, v39);
      uint64_t v45 = v64;
      v43(v64, v71, v39);
      LOBYTE(v43) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      uint64_t v47 = v60;
      v46(v60, v44, v39);
      uint64_t v48 = v61;
      v46(v61, v45, v39);
      if (v43) {
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      }
      else {
        char v38 = 0;
      }
      uint64_t v31 = v67;
      uint64_t v56 = *(void (**)(char *, uint64_t))(v42 + 8);
      v56(v48, v39);
      v56(v47, v39);
      v56(v64, v39);
      v56(v63, v39);
      v56(v62, v39);
      v56(v65, v39);
      goto LABEL_18;
    case 2u:
      ((void (*)(char *, char *, uint64_t))v37)(v23, v34, v20);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v38 = static ContiguousArray<A>.== infix(_:_:)();
        swift_release();
        swift_release();
        goto LABEL_15;
      }
      swift_release();
      goto LABEL_13;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_13;
      }
      char v38 = 1;
      goto LABEL_15;
    default:
      ((void (*)(char *, char *, uint64_t))v37)(v29, v34, v20);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v29, v69);
LABEL_13:
        char v38 = 0;
      }
      else
      {
        uint64_t v51 = v68;
        uint64_t v50 = v69;
        uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
        uint64_t v53 = v58;
        v52(v58, v29, v69);
        uint64_t v54 = v59;
        v52(v59, v36, v50);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v55 = *(void (**)(char *, uint64_t))(v51 + 8);
        v55(v54, v50);
        v55(v53, v50);
LABEL_15:
        uint64_t v31 = v67;
LABEL_18:
        TupleTypeMetadata2 = v20;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, TupleTypeMetadata2);
      return v38 & 1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> ArrayWith2Inline<A>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static ArrayWith2Inline<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t ArrayWith2Inline.init(arrayLiteral:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ArrayWith2Inline.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = type metadata accessor for UnsafeBufferPointer();
  swift_getWitnessTable();
  return ArrayWith2Inline.init<A>(_:)((uint64_t)v8, a3, v6, a4);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ArrayWith2Inline<A>()
{
  return ArrayWith2Inline.init(arrayLiteral:)();
}

void getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage();
  }
}

uint64_t sub_245AEB2D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArrayWith2Inline._copyToContiguousArray()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

void *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3) {
        return (void *)type metadata accessor for ContiguousArray();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, void *a2)
{
  return closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, void *a2)
{
  return partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void *);
  uint64_t v6;
  uint64_t result;
  void v8[2];

  uint64_t v5 = *(uint64_t (**)(void *))(v2 + 32);
  v8[0] = UnsafeMutableBufferPointer.init(start:count:)();
  v8[1] = v6;
  uint64_t result = v5(v8);
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PartialRangeUpTo<Int>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ArrayWith2Inline.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in ArrayWith2Inline.init(arrayLiteral:)(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t type metadata accessor for ArrayWith2Inline()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for BidirectionalCollection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void type metadata accessor for PartialRangeUpTo<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ArrayWith2Inline<A>()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245AEB6FC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for ArrayWith2Inline();
  return ArrayWith2Inline.subscript.getter(v3, v4, a2);
}

uint64_t sub_245AEB754()
{
  return 8;
}

void *sub_245AEB760(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for ArrayWith2Inline()
{
  uint64_t result = type metadata accessor for ArrayWith2Inline.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned __int8 *destroy for ArrayWith2Inline(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v8 = result[v5];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *result;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)result;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)result;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v5))) + 3;
        unsigned int v8 = v11 + 3;
        if (v5 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 2)
  {
    return (unsigned __int8 *)swift_release();
  }
  else
  {
    if (v8 == 1)
    {
      uint64_t v15 = ~v6;
      uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v16(result, v3);
      uint64_t result = (unsigned __int8 *)((unint64_t)&v2[v7] & v15);
      uint64_t v14 = v3;
      uint64_t v13 = (uint64_t (*)(unsigned __int8 *, uint64_t))v16;
    }
    else
    {
      if (v8) {
        return result;
      }
      uint64_t v13 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
    }
    return (unsigned __int8 *)v13(result, v14);
  }
}

unsigned char *initializeWithCopy for ArrayWith2Inline(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v10] = 2;
    swift_retain();
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v8;
    uint64_t v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16);
    v17(__dst, __src, v5);
    v17((unsigned char *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for ArrayWith2Inline(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = __dst[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *__dst;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)__dst;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)__dst;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 2u:
        swift_release();
        break;
      case 1u:
        uint64_t v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(__dst, v5);
        v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), v5);
        break;
      case 0u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        break;
    }
    unsigned int v18 = __src[v10];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *__src;
          goto LABEL_33;
        case 2:
          int v21 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v21 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v21 | (v19 << (8 * v10))) + 3;
          unsigned int v18 = v21 + 3;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v10] = 2;
      swift_retain();
    }
    else if (v18 == 1)
    {
      uint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v23(__dst, __src, v5);
      v23((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
      __dst[v10] = 1;
    }
    else if (v18)
    {
      memcpy(__dst, __src, v10 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for ArrayWith2Inline(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v10] = 2;
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v8;
    uint64_t v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32);
    v17(__dst, __src, v5);
    v17((unsigned char *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for ArrayWith2Inline(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = __dst[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *__dst;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)__dst;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)__dst;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 2u:
        swift_release();
        break;
      case 1u:
        uint64_t v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(__dst, v5);
        v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), v5);
        break;
      case 0u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        break;
    }
    unsigned int v18 = __src[v10];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *__src;
          goto LABEL_33;
        case 2:
          int v21 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v21 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v21 | (v19 << (8 * v10))) + 3;
          unsigned int v18 = v21 + 3;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v10] = 2;
    }
    else if (v18 == 1)
    {
      uint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v23(__dst, __src, v5);
      v23((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
      __dst[v10] = 1;
    }
    else if (v18)
    {
      memcpy(__dst, __src, v10 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ArrayWith2Inline(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  uint64_t v6 = 8;
  if (v4 > 8) {
    uint64_t v6 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_24;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_24:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 4) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_24;
  }
LABEL_16:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 253;
}

void storeEnumTagSinglePayload for ArrayWith2Inline(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v8 = v6 + 1;
  if (a3 < 0xFD)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v10 = a2 - 253;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v6 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x245AEC700);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata completion function for ArrayWith2Inline.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v3 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    unint64_t v4 = &v2;
    uint64_t v5 = MEMORY[0x263F8CF88] + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ArrayWith2Inline(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 > v7) {
    v7 += (v7 + v8) & ~(unint64_t)v8;
  }
  if (v7 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v7;
  }
  size_t v12 = v11 + 1;
  if (v8 > 7u || (v8 & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v15 = *(void *)__src;
    *unint64_t v4 = *(void *)__src;
    unint64_t v4 = (void *)(v15 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)));
LABEL_15:
    swift_retain();
    return v4;
  }
  unsigned int v17 = __src[v11];
  unsigned int v18 = v17 - 3;
  if (v17 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v19 = v11;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *__src;
        goto LABEL_26;
      case 2:
        int v20 = *(unsigned __int16 *)__src;
        goto LABEL_26;
      case 3:
        int v20 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_26;
      case 4:
        int v20 = *(_DWORD *)__src;
LABEL_26:
        int v21 = (v20 | (v18 << (8 * v11))) + 3;
        unsigned int v17 = v20 + 3;
        if (v11 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v17 == 2)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v11] = 2;
    goto LABEL_15;
  }
  if (v17 == 1)
  {
    uint64_t v22 = ~v9;
    uint64_t v23 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16);
    v23(__dst, __src, v5);
    v23((unsigned char *)(((unint64_t)v4 + v10) & v22), (unsigned __int8 *)((unint64_t)&__src[v10] & v22), v5);
    *((unsigned char *)v4 + v11) = 1;
  }
  else if (v17)
  {
    memcpy(__dst, __src, v12);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    *((unsigned char *)v4 + v11) = 0;
  }
  return v4;
}

unsigned __int8 *destroy for ArrayWith2Inline.Storage(unsigned __int8 *result, uint64_t a2)
{
  char v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v8 = result[v5];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *result;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)result;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)result;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v5))) + 3;
        unsigned int v8 = v11 + 3;
        if (v5 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 2)
  {
    return (unsigned __int8 *)swift_release();
  }
  else
  {
    if (v8 == 1)
    {
      uint64_t v15 = ~v6;
      uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v16(result, v3);
      uint64_t result = (unsigned __int8 *)((unint64_t)&v2[v7] & v15);
      uint64_t v14 = v3;
      int v13 = (uint64_t (*)(unsigned __int8 *, uint64_t))v16;
    }
    else
    {
      if (v8) {
        return result;
      }
      int v13 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
    }
    return (unsigned __int8 *)v13(result, v14);
  }
}

unsigned char *initializeWithCopy for ArrayWith2Inline.Storage(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v10] = 2;
    swift_retain();
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v8;
    unsigned int v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16);
    v17(__dst, __src, v5);
    v17((unsigned char *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for ArrayWith2Inline.Storage(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = __dst[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *__dst;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)__dst;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)__dst;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 2u:
        swift_release();
        break;
      case 1u:
        unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(__dst, v5);
        v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), v5);
        break;
      case 0u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        break;
    }
    unsigned int v18 = __src[v10];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *__src;
          goto LABEL_33;
        case 2:
          int v21 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v21 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v21 | (v19 << (8 * v10))) + 3;
          unsigned int v18 = v21 + 3;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v10] = 2;
      swift_retain();
    }
    else if (v18 == 1)
    {
      uint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v23(__dst, __src, v5);
      v23((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
      __dst[v10] = 1;
    }
    else if (v18)
    {
      memcpy(__dst, __src, v10 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for ArrayWith2Inline.Storage(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 > v7) {
    v7 += (v7 + v8) & ~v8;
  }
  if (v7 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v7;
  }
  unsigned int v11 = __src[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *__src;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)__src;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)__src;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v10] = 2;
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v8;
    unsigned int v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32);
    v17(__dst, __src, v5);
    v17((unsigned char *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for ArrayWith2Inline.Storage(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 > v7) {
      v7 += (v7 + v8) & ~v8;
    }
    if (v7 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v7;
    }
    unsigned int v11 = __dst[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *__dst;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)__dst;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)__dst;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    switch(v11)
    {
      case 2u:
        swift_release();
        break;
      case 1u:
        unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v17(__dst, v5);
        v17((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), v5);
        break;
      case 0u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        break;
    }
    unsigned int v18 = __src[v10];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *__src;
          goto LABEL_33;
        case 2:
          int v21 = *(unsigned __int16 *)__src;
          goto LABEL_33;
        case 3:
          int v21 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_33;
        case 4:
          int v21 = *(_DWORD *)__src;
LABEL_33:
          int v22 = (v21 | (v19 << (8 * v10))) + 3;
          unsigned int v18 = v21 + 3;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v10] = 2;
    }
    else if (v18 == 1)
    {
      uint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v23(__dst, __src, v5);
      v23((unsigned __int8 *)((unint64_t)&__dst[v9] & v16), (unsigned __int8 *)((unint64_t)&__src[v9] & v16), v5);
      __dst[v10] = 1;
    }
    else if (v18)
    {
      memcpy(__dst, __src, v10 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v10] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ArrayWith2Inline.Storage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  uint64_t v6 = 8;
  if (v4 > 8) {
    uint64_t v6 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_24;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_24:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 4) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_24;
  }
LABEL_16:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 253;
}

void storeEnumTagSinglePayload for ArrayWith2Inline.Storage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v8 = v6 + 1;
  if (a3 < 0xFD)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v10 = a2 - 253;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v6 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x245AED8F0);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for ArrayWith2Inline.Storage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  uint64_t v5 = 8;
  if (v3 > 8) {
    uint64_t v5 = v3;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 3;
        LODWORD(v6) = v9 + 3;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void destructiveInjectEnumTag for ArrayWith2Inline.Storage(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 > v5) {
    unint64_t v5 = v6;
  }
  if (v5 <= 8) {
    size_t v7 = 8;
  }
  else {
    size_t v7 = v5;
  }
  if (a2 > 2)
  {
    unsigned int v8 = a2 - 3;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t partial apply for closure #1 in closure #2 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(uint64_t a1, void *a2)
{
  return partial apply for closure #1 in ArrayWith2Inline.withUnsafeMutableBufferPointer<A>(_:)(a1, a2);
}

void type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    }
  }
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Edge@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Edge.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Edge(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Edge;
}

SwiftUI::Edge __swiftcall Edge.init(_vertical:)(SwiftUI::VerticalEdge _vertical)
{
  return 2 * (_vertical & 1);
}

SwiftUI::Edge __swiftcall Edge.init(_horizontal:)(SwiftUI::HorizontalEdge _horizontal)
{
  if (_horizontal) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t Edge.opposite.getter(char a1)
{
  return 0x1000302u >> (8 * a1);
}

uint64_t Edge.Set.init(_:)(char a1)
{
  if ((a1 & 2) != 0) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = 10;
  }
  if (a1) {
    return v1;
  }
  else {
    return ((char)(a1 << 6) >> 7) & 5;
  }
}

uint64_t static HorizontalEdge.Set.leading.getter()
{
  return 1;
}

uint64_t static HorizontalEdge.Set.trailing.getter()
{
  return 2;
}

uint64_t static HorizontalEdge.Set.all.getter()
{
  return 3;
}

void *static HorizontalEdge.allCases.getter()
{
  return &outlined read-only object #0 of static HorizontalEdge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HorizontalEdge(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HorizontalEdge;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HorizontalEdge()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HorizontalEdge()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalEdge.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static VerticalEdge.Set.top.getter()
{
  return 1;
}

uint64_t static VerticalEdge.Set.bottom.getter()
{
  return 2;
}

uint64_t static VerticalEdge.Set.all.getter()
{
  return 3;
}

Swift::Bool __swiftcall VerticalEdge.Set.contains(_:)(SwiftUI::VerticalEdge a1)
{
  return (v1 >> (a1 & 1)) & 1;
}

SwiftUI::VerticalEdge_optional __swiftcall VerticalEdge.init(rawValue:)(Swift::Int8 rawValue)
{
  if (rawValue == 1) {
    v1.value = SwiftUI_VerticalEdge_bottom;
  }
  else {
    v1.value = SwiftUI_VerticalEdge_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

void *static VerticalEdge.allCases.getter()
{
  return &outlined read-only object #0 of static VerticalEdge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VerticalEdge(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance VerticalEdge;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VerticalEdge()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VerticalEdge()
{
  return RawRepresentable<>.encode(to:)();
}

void Edge.Set.viewDebugValue.getter(unsigned __int8 a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = a1;
  uint64_t v5 = MEMORY[0x263F8EE78];
  do
  {
    unsigned int v8 = outlined read-only object #0 of Edge.Set.viewDebugValue.getter[v3 + 32];
    if (v8 - 9 < 0xEF || (v8 & 0x80) != 0 || v8 > 7 || ((1 << v8) & ~v4) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
      }
      unint64_t v7 = *(void *)(v5 + 16);
      unint64_t v6 = *(void *)(v5 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v5 + 16) = v7 + 1;
      *(unsigned char *)(v5 + v7 + 32) = v8;
    }
    ++v3;
  }
  while (v3 != 4);
  type metadata accessor for [HorizontalDirection](0, &lazy cache variable for type metadata for [Edge]);
  a2[3] = v9;
  *a2 = v5;
}

void protocol witness for CustomViewDebugValueConvertible.viewDebugValue.getter in conformance Edge.Set(void *a1@<X8>)
{
  Edge.Set.viewDebugValue.getter(*v1, a1);
}

uint64_t static Edge.unwrap(codingProxy:)(uint64_t result)
{
  if ((result & 0xFC) != 0) {
    return 0;
  }
  else {
    return result;
  }
}

unsigned __int8 *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance Edge@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 4) {
    LOBYTE(v2) = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t specialized Edge.init(rawValue:)(uint64_t result)
{
  if ((result & 0xFC) != 0) {
    return 4;
  }
  else {
    return result;
  }
}

unint64_t lazy protocol witness table accessor for type Edge.Set and conformance Edge.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set;
  if (!lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge.Set and conformance Edge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Edge and conformance Edge()
{
  unint64_t result = lazy protocol witness table cache variable for type Edge and conformance Edge;
  if (!lazy protocol witness table cache variable for type Edge and conformance Edge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge and conformance Edge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Edge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [Edge] and conformance [A], &lazy cache variable for type metadata for [Edge]);
}

unint64_t lazy protocol witness table accessor for type HorizontalEdge.Set and conformance HorizontalEdge.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set;
  if (!lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalEdge.Set and conformance HorizontalEdge.Set);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HorizontalEdge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [HorizontalEdge] and conformance [A], &lazy cache variable for type metadata for [HorizontalEdge]);
}

unint64_t lazy protocol witness table accessor for type VerticalEdge.Set and conformance VerticalEdge.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set;
  if (!lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge.Set and conformance VerticalEdge.Set);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VerticalEdge()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [VerticalEdge] and conformance [A], &lazy cache variable for type metadata for [VerticalEdge]);
}

ValueMetadata *type metadata accessor for HorizontalEdge.Set()
{
  return &type metadata for HorizontalEdge.Set;
}

unsigned char *storeEnumTagSinglePayload for HorizontalEdge(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245AEE670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalEdge()
{
  return &type metadata for VerticalEdge;
}

ValueMetadata *type metadata accessor for VerticalEdge.Set()
{
  return &type metadata for VerticalEdge.Set;
}

double static ViewSize.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ViewDimensions.guideComputer.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_retain();
}

__n128 ViewDimensions.size.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 16);
  long long v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 ViewDimensions.size.setter(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*ViewDimensions.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ViewDimensions.init(guideComputer:size:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1[1];
  *(void *)a3 = *a1;
  *(void *)(a3 + 8) = v3;
  __n128 result = *(__n128 *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v5;
  return result;
}

double ViewSize.width.getter()
{
  return *(double *)v0;
}

int64x2_t ViewOrigin.init(invalid:)@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *a1 = result;
  return result;
}

SwiftUI::ViewOrigin __swiftcall ViewOrigin.init()()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  return result;
}

double ViewOrigin.x.getter()
{
  return *(double *)v0;
}

void ViewOrigin.x.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*ViewOrigin.x.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double ViewOrigin.x.modify(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

double ViewOrigin.y.getter()
{
  return *(double *)(v0 + 8);
}

void ViewOrigin.y.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double (*ViewOrigin.y.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return ViewOrigin.y.modify;
}

double ViewOrigin.y.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)a1;
  return result;
}

BOOL static ViewOrigin.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

double ViewOrigin.subscript.getter(char a1)
{
  uint64_t v2 = v1 + 8;
  if ((a1 & 1) == 0) {
    uint64_t v2 = v1;
  }
  return *(double *)v2;
}

uint64_t ViewOrigin.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

uint64_t (*ViewOrigin.subscript.modify(uint64_t a1, char a2))()
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  uint64_t v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    uint64_t v3 = v2;
  }
  *(void *)a1 = *v3;
  return ViewOrigin.subscript.modify;
}

void ViewOrigin.animatableData.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

__n128 (*ViewOrigin.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

void ViewSize.width.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ViewSize.width.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

void ViewSize.height.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*ViewSize.height.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return ViewSize.height.modify;
}

void key path getter for ViewSize.proposal : ViewSize(uint64_t a1@<X8>)
{
  ViewSize.proposal.getter((uint64_t)&v5);
  char v2 = v6;
  uint64_t v3 = v7;
  char v4 = v8;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
}

uint64_t ViewSize.proposal.setter(uint64_t result)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 16);
  if (*(unsigned char *)(result + 8)) {
    double v2 = NAN;
  }
  if (*(unsigned char *)(result + 24)) {
    double v3 = NAN;
  }
  *(double *)(v1 + 16) = v2;
  *(double *)(v1 + 24) = v3;
  return result;
}

void (*ViewSize.proposal.modify(void *a1))(void **a1)
{
  double v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  BOOL v6 = (~v4 & 0x7FF0000000000000) == 0 && (v4 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v6) {
    uint64_t v4 = 0;
  }
  BOOL v7 = (~v5 & 0x7FF0000000000000) == 0 && (v5 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v7) {
    uint64_t v5 = 0;
  }
  *double v3 = v4;
  *((unsigned char *)v3 + 8) = v6;
  v3[2] = v5;
  *((unsigned char *)v3 + 24) = v7;
  return ViewSize.proposal.modify;
}

void ViewSize.proposal.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)v1 + 4);
  double v3 = *(double *)v1;
  double v4 = *((double *)v1 + 2);
  if (*((unsigned char *)v1 + 8)) {
    double v3 = NAN;
  }
  if (*((unsigned char *)v1 + 24)) {
    double v4 = NAN;
  }
  *(double *)(v2 + 16) = v3;
  *(double *)(v2 + 24) = v4;
  free(v1);
}

Swift::Void __swiftcall ViewSize.didSetAnimatableData(_:)(CGSize a1)
{
  *(CGFloat *)(v1 + 16) = a1.width;
  *(CGFloat *)(v1 + 24) = a1.height;
}

uint64_t ViewSize.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

uint64_t (*ViewSize.subscript.modify(uint64_t a1, char a2))()
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  double v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    double v3 = v2;
  }
  *(void *)a1 = *v3;
  return ViewOrigin.subscript.modify;
}

int8x16_t ViewSize.inset(by:)@<Q0>(uint64_t a1@<X8>, float64_t a2@<D0>, float64x2_t a3@<Q1>, float64_t a4@<D2>, float64x2_t a5@<Q3>)
{
  double v6 = v5->f64[0];
  a3.f64[1] = a2;
  a5.f64[1] = a4;
  float64x2_t v7 = vaddq_f64(a3, a5);
  double v8 = v5->f64[1] - v7.f64[1];
  double v9 = 0.0;
  if (v8 < 0.0) {
    double v8 = 0.0;
  }
  if (v6 - v7.f64[0] >= 0.0) {
    double v9 = v6 - v7.f64[0];
  }
  *(double *)a1 = v9;
  *(double *)(a1 + 8) = v8;
  float64x2_t v10 = v5[1];
  int64x2_t v11 = vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v12 = vsubq_f64(v10, v7);
  int8x16_t result = vbslq_s8(vbicq_s8((int8x16_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)v10, (int8x16_t)v11), v11), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v10, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL)))), (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL), vandq_s8((int8x16_t)v12, (int8x16_t)vcgezq_f64(v12)));
  *(int8x16_t *)(a1 + 16) = result;
  return result;
}

void ViewSize.animatableData.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  v2[2] = a1;
  v2[3] = a2;
}

uint64_t (*ViewSize.animatableData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ViewSize.animatableData.modify;
}

double protocol witness for Animatable.animatableData.setter in conformance ViewSize(uint64_t a1)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v1 = *(void *)a1;
  *(void *)(v1 + 8) = v3;
  *(double *)(v1 + 16) = result;
  *(void *)(v1 + 24) = v3;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance ViewSize(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return ViewSize.animatableData.modify;
}

double ViewSize.animatableData.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v1 = *(void *)a1;
  *(void *)(v1 + 8) = v3;
  *(double *)(v1 + 16) = result;
  *(void *)(v1 + 24) = v3;
  return result;
}

__n128 ViewGeometry.origin.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 ViewGeometry.origin.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*ViewGeometry.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewGeometry.dimensions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  return swift_retain();
}

__n128 ViewGeometry.dimensions.setter(__n128 *a1)
{
  unint64_t v2 = a1->n128_u64[0];
  unint64_t v3 = a1->n128_u64[1];
  __n128 v7 = a1[1];
  unint64_t v4 = a1[2].n128_u64[0];
  unint64_t v5 = a1[2].n128_u64[1];
  swift_release();
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  __n128 result = v7;
  v1[2] = v7;
  v1[3].n128_u64[0] = v4;
  v1[3].n128_u64[1] = v5;
  return result;
}

uint64_t (*ViewGeometry.dimensions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ViewGeometry.init(origin:dimensions:)@<Q0>(_OWORD *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2->n128_u64[0];
  uint64_t v4 = a2->n128_i64[1];
  *(_OWORD *)a3 = *a1;
  *(void *)(a3 + 16) = v3;
  *(void *)(a3 + 24) = v4;
  __n128 result = a2[1];
  __n128 v6 = a2[2];
  *(__n128 *)(a3 + 32) = result;
  *(__n128 *)(a3 + 48) = v6;
  return result;
}

__n128 ViewGeometry.init(dimensions:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1->n128_u64[0];
  uint64_t v3 = a1->n128_i64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u64[1] = v3;
  __n128 result = a1[1];
  __n128 v5 = a1[2];
  a2[2] = result;
  a2[3] = v5;
  return result;
}

float64x2_t ViewGeometry.init(placement:dimensions:)@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v3 = a2[1];
  float64x2_t v4 = a2[2];
  float64x2_t result = vsubq_f64(a1[3], vmulq_f64(a1[2], v3));
  float64_t v6 = a2->f64[0];
  float64_t v7 = a2->f64[1];
  *a3 = result;
  a3[1].f64[0] = v6;
  a3[1].f64[1] = v7;
  a3[2] = v3;
  a3[3] = v4;
  return result;
}

double ViewGeometry.subscript.getter(unint64_t a1)
{
  double v2 = *v1;
  ViewDimensions.subscript.getter(a1);
  return v2 + v3;
}

{
  uint64_t v1;
  double v2;
  double v3;

  double v2 = *(double *)(v1 + 8);
  ViewDimensions.subscript.getter(a1);
  return v2 + v3;
}

{
  double *v1;
  double *v2;
  double v3;
  double v4;

  double v2 = v1 + 1;
  if ((a1 & 1) == 0) {
    double v2 = v1;
  }
  double v3 = *v2;
  ViewDimensions.subscript.getter(a1);
  return v3 + v4;
}

uint64_t ViewGeometry.subscript.getter(uint64_t a1)
{
  double v3 = *(double *)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v14[0] = v5;
    v14[1] = v6;
    v14[2] = v7;
    void v14[3] = v8;
    double v10 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 144))(a1, v14));
    char v12 = v11;
    swift_release();
    if (v12) {
      *(double *)&uint64_t result = v10;
    }
    else {
      *(double *)&uint64_t result = v3 + v10;
    }
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  char v12;
  uint64_t result;
  void v14[4];

  double v3 = *(double *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v14[0] = v5;
    v14[1] = v6;
    v14[2] = v7;
    void v14[3] = v8;
    double v10 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 144))(a1, v14));
    char v12 = v11;
    swift_release();
    if (v12) {
      *(double *)&uint64_t result = v10;
    }
    else {
      *(double *)&uint64_t result = v3 + v10;
    }
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  char v13;
  double v14;
  uint64_t result;
  void v16[4];

  double v3 = *(double *)v1;
  uint64_t v4 = *(double *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  double v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
    __break(1u);
  }
  else
  {
LABEL_7:
    v16[0] = v6;
    v16[1] = v7;
    v16[2] = v8;
    v16[3] = v9;
    char v11 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 144))(a1, v16));
    int v13 = v12;
    swift_release();
    if (a1) {
      int v14 = v4;
    }
    else {
      int v14 = v3;
    }
    if (v13) {
      *(double *)&uint64_t result = v11;
    }
    else {
      *(double *)&uint64_t result = v14 + v11;
    }
  }
  return result;
}

__n128 ViewFrame.origin.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 ViewFrame.origin.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*ViewFrame.origin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ViewFrame.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall ViewFrame.init(origin:size:)(SwiftUI::ViewFrame *__return_ptr retstr, SwiftUI::ViewOrigin origin, SwiftUI::ViewSize size)
{
  CGSize v5 = *v4;
  CGSize v6 = v4[1];
  retstr->origin = *v3;
  retstr->size.value = v5;
  retstr->size._proposal = v6;
}

void __swiftcall ViewFrame.init(size:)(SwiftUI::ViewFrame *__return_ptr retstr, SwiftUI::ViewSize size)
{
  retstr->origin.value.x = 0.0;
  retstr->origin.value.y = 0.0;
  CGSize v3 = v2[1];
  retstr->size.value = *v2;
  retstr->size._proposal = v3;
}

double ViewFrame.animatableData.getter()
{
  return *(double *)v0;
}

void ViewFrame.animatableData.setter(double a1, double a2, double a3, double a4)
{
  *uint64_t v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

void (*ViewFrame.animatableData.modify(void *a1))(void **a1)
{
  CGSize v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)CGSize v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return ViewFrame.animatableData.modify;
}

void ViewFrame.animatableData.modify(void **a1)
{
  uint64_t v1 = *a1;
  double v2 = (_OWORD *)v1[4];
  long long v3 = *((_OWORD *)v1 + 1);
  *double v2 = *(_OWORD *)v1;
  v2[1] = v3;
  free(v1);
}

__n128 protocol witness for Animatable.animatableData.setter in conformance ViewFrame(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance ViewFrame(void *a1))(void *a1)
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ViewFrame.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t static ViewDimensions.invalidValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26B0F2B48;
  *(void *)a1 = static ViewDimensions.invalidValue;
  *(void *)(a1 + 8) = v2;
  long long v3 = xmmword_26B0F2B60;
  *(_OWORD *)(a1 + 16) = xmmword_26B0F2B50;
  *(_OWORD *)(a1 + 32) = v3;

  return swift_retain();
}

uint64_t static ViewDimensions.zero.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_268EEAD78;
  *(void *)a1 = static ViewDimensions.zero;
  *(void *)(a1 + 8) = v2;
  long long v3 = unk_268EEAD90;
  *(_OWORD *)(a1 + 16) = xmmword_268EEAD80;
  *(_OWORD *)(a1 + 32) = v3;

  return swift_retain();
}

uint64_t ViewDimensions.at(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  long long v6 = *((_OWORD *)v3 + 2);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)v3 + 1);
  *(_OWORD *)(a1 + 48) = v6;
  return swift_retain();
}

uint64_t ViewDimensions.centered(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = *(void *)(v3 + 8);
  double v5 = *(double *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 40);
  double v7 = (a2 - v5) * 0.5 + 0.0;
  *(void *)(a1 + 16) = *(void *)v3;
  *(void *)(a1 + 24) = v4;
  *(double *)(a1 + 32) = v5;
  long long v8 = *(_OWORD *)(v3 + 24);
  *(double *)a1 = v7;
  *(double *)(a1 + 8) = (a3 - *(double *)&v8) * 0.5 + 0.0;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = v6;
  return swift_retain();
}

double ViewGeometry.frame.getter()
{
  return *(double *)v0;
}

uint64_t static ViewGeometry.invalidValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26B0F2B10;
  uint64_t v3 = unk_26B0F2B18;
  *(_OWORD *)a1 = static ViewGeometry.invalidValue;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  long long v4 = unk_26B0F2B30;
  *(_OWORD *)(a1 + 32) = xmmword_26B0F2B20;
  *(_OWORD *)(a1 + 48) = v4;

  return swift_retain();
}

BOOL ViewGeometry.isInvalid.getter()
{
  return (*v0 & 0xFFFFFFFFFFFFFLL) != 0 && (~*v0 & 0x7FF0000000000000) == 0;
}

uint64_t static ViewGeometry.zero.getter@<X0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  long long v2 = xmmword_268EEAD40;
  *a1 = static ViewGeometry.zero;
  a1[1] = v2;
  long long v3 = unk_268EEAD60;
  a1[2] = xmmword_268EEAD50;
  a1[3] = v3;

  return swift_retain();
}

BOOL specialized static ViewFrame.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
  {
    long long v4 = *(_OWORD *)(a1 + 32);
    v8[0] = *(_OWORD *)(a1 + 16);
    v8[1] = v4;
    long long v5 = *(_OWORD *)(a2 + 32);
    v7[0] = *(_OWORD *)(a2 + 16);
    v7[1] = v5;
    return specialized static ViewSize.== infix(_:_:)((double *)v8, (double *)v7);
  }
  else
  {
    return 0;
  }
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ViewFrame()
{
  return _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

__n128 sub_245AEF9F0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_245AEF9FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245AEFA08@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245AEFA14(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245AEFA20@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_245AEFA2C(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_245AEFA38@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  long long v3 = a1 + 1;
  if (!*a2) {
    long long v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_245AEFA54(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_245AEFA70()
{
  return 0;
}

__n128 sub_245AEFA80(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245AEFA8C@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245AEFA98(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245AEFAA4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_245AEFAB0(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

uint64_t sub_245AEFAC0(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 16);
  if (*(unsigned char *)(result + 8)) {
    double v2 = NAN;
  }
  if (*(unsigned char *)(result + 24)) {
    double v3 = NAN;
  }
  *(double *)(a2 + 16) = v2;
  *(double *)(a2 + 24) = v3;
  return result;
}

double sub_245AEFAF0@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  double v3 = a1 + 1;
  if (!*a2) {
    double v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_245AEFB0C(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_245AEFB28()
{
  return 0;
}

__n128 sub_245AEFB38@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245AEFB44(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v3;
  *(double *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v3;
  return result;
}

__n128 sub_245AEFB54@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_245AEFB60(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t initializeWithCopy for ViewDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for ViewDimensions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for ViewDimensions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for ViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewGeometry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewGeometry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

SwiftUI::_FixedSizeLayout __swiftcall _FixedSizeLayout.init(horizontal:vertical:)(Swift::Bool horizontal, Swift::Bool vertical)
{
  if (vertical) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (SwiftUI::_FixedSizeLayout)(v2 & 0xFFFE | horizontal);
}

uint64_t _FixedSizeLayout.horizontal.getter(char a1)
{
  return a1 & 1;
}

uint64_t _FixedSizeLayout.horizontal.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_FixedSizeLayout.horizontal.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _FixedSizeLayout.vertical.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t _FixedSizeLayout.vertical.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*_FixedSizeLayout.vertical.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _FixedSizeLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 a4)
{
  uint64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v15 = *a3;
  int v16 = v8;
  if (a4) {
    uint64_t v4 = 0;
  }
  char v9 = a4 | v5;
  if ((a4 & 0x100) != 0) {
    uint64_t v6 = 0;
  }
  uint64_t v11 = v4;
  char v12 = v9 & 1;
  uint64_t v13 = v6;
  char v14 = v7 & 1 | HIBYTE(a4) & 1;
  return LayoutProxy.size(in:)(&v11);
}

uint64_t View.fixedSize(horizontal:vertical:)(char a1, char a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return View.modifier<A>(_:)(v4, a3, &type metadata for _FixedSizeLayout);
}

uint64_t View.fixedSize()(uint64_t a1)
{
  __int16 v2 = 257;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for _FixedSizeLayout);
}

uint64_t getEnumTagSinglePayload for _FixedSizeLayout(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _FixedSizeLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245AF003CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_245AF0064()
{
  return swift_getWitnessTable();
}

unint64_t _DisplayList_StableIdentityMap.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16)
    && (__n128 result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)result), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(v4 + 56) + 24 * result;
    *(_OWORD *)a2 = *(_OWORD *)v6;
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

__n128 _DisplayList_StableIdentity.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[1].n128_u32[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u32[0] = v2;
  return result;
}

__n128 _DisplayList_StableIdentity.hash.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u32[0] = v2;
  return result;
}

uint64_t (*_DisplayList_StableIdentity.hash.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _DisplayList_StableIdentity.serial.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t _DisplayList_StableIdentity.serial.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*_DisplayList_StableIdentity.serial.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _DisplayList_StableIdentity.init(hash:serial:)@<Q0>(__n128 *a1@<X0>, unsigned __int32 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int32 v3 = a1[1].n128_u32[0];
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u32[0] = v3;
  a3[1].n128_u32[1] = a2;
  return result;
}

void _DisplayList_StableIdentity.hash(into:)()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _DisplayList_StableIdentity.CodingKeys()
{
  if (*v0) {
    return 0x6C6169726573;
  }
  else {
    return 1752392040;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DisplayList_StableIdentity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized _DisplayList_StableIdentity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DisplayList_StableIdentity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DisplayList_StableIdentity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _DisplayList_StableIdentity.encode(to:)(void *a1)
{
  unsigned __int32 v3 = v1;
  type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v13 - v8;
  int v10 = *((_DWORD *)v3 + 4);
  int v17 = *((_DWORD *)v3 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = v3[1];
  uint64_t v14 = *v3;
  uint64_t v15 = v11;
  int v16 = v10;
  char v18 = 0;
  lazy protocol witness table accessor for type StrongHash and conformance StrongHash();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int _DisplayList_StableIdentity.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _DisplayList_StableIdentity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<_DisplayList_StableIdentity.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v16 = 0;
    lazy protocol witness table accessor for type StrongHash and conformance StrongHash();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v13 = v14;
    int v10 = v15;
    LOBYTE(v14) = 1;
    int v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_OWORD *)a2 = v13;
    *(_DWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _DisplayList_StableIdentity()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _DisplayList_StableIdentity()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _DisplayList_StableIdentity()
{
  Hasher.init(_seed:)();
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance _DisplayList_StableIdentity@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return _DisplayList_StableIdentity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _DisplayList_StableIdentity(void *a1)
{
  return _DisplayList_StableIdentity.encode(to:)(a1);
}

uint64_t _DisplayList_StableIdentityMap.map.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _DisplayList_StableIdentityMap.map.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt32 v1 = a1;
  return result;
}

uint64_t (*_DisplayList_StableIdentityMap.map.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_DisplayList_StableIdentityMap __swiftcall _DisplayList_StableIdentityMap.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE80];
  return result;
}

BOOL _DisplayList_StableIdentityMap.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

unint64_t _DisplayList_StableIdentityMap.subscript.setter(uint64_t a1, Swift::UInt32 *a2)
{
  unsigned __int32 v3 = v2;
  Swift::UInt32 v4 = *a2;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
    if ((v6 & 1) == 0) {
      return result;
    }
    unint64_t v7 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v14 = *v3;
    *unsigned __int32 v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v14;
    }
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *unsigned __int32 v3 = v9;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)a1;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v11, v10, v4, v13);
    *uint64_t v2 = v15;
  }
  return swift_bridgeObjectRelease();
}

void (*_DisplayList_StableIdentityMap.subscript.modify(void *a1, Swift::UInt32 *a2))(uint64_t **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = v2;
  Swift::UInt32 v6 = *a2;
  *((_DWORD *)v5 + 7) = *a2;
  uint64_t v7 = *v2;
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v7 + 56) + 24 * v8;
    uint64_t v11 = *(void *)(v10 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v10;
    v5[2] = v11;
    *((unsigned char *)v5 + 24) = 0;
  }
  else
  {
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *((unsigned char *)v5 + 24) = 1;
  }
  return _DisplayList_StableIdentityMap.subscript.modify;
}

void _DisplayList_StableIdentityMap.subscript.modify(uint64_t **a1)
{
  Swift::UInt32 v1 = *a1;
  Swift::UInt32 v2 = *((_DWORD *)*a1 + 7);
  unsigned __int32 v3 = (uint64_t *)(*a1)[4];
  if ((*a1)[3])
  {
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(*((_DWORD *)*a1 + 7));
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    unint64_t v6 = v4;
    uint64_t v7 = (uint64_t *)v1[4];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v7;
    uint64_t v15 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v15;
    }
    uint64_t v10 = (uint64_t *)v1[4];
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v10 = v9;
  }
  else
  {
    uint64_t v12 = v1[1];
    uint64_t v11 = v1[2];
    uint64_t v13 = *v1;
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *unsigned __int32 v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v12, v11, v2, v14);
    *unsigned __int32 v3 = v16;
  }
  swift_bridgeObjectRelease();
LABEL_8:

  free(v1);
}

Swift::Void __swiftcall _DisplayList_StableIdentityMap.formUnion(_:)(SwiftUI::_DisplayList_StableIdentityMap a1)
{
  uint64_t v2 = *(void *)a1.map._rawValue;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v1;
  *Swift::UInt32 v1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v4);
  *Swift::UInt32 v1 = v4;

  swift_bridgeObjectRelease();
}

uint64_t _DisplayList_StableIdentityRoot.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = 0;
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.subscript.getter@<X0>(Swift::UInt32 *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt32 v52 = *a1;
  unsigned __int32 v3 = (void *)(v2 + 24);
  swift_beginAccess();
  if (!*(void *)(v2 + 24))
  {
    uint64_t v4 = v2 + 16;
    swift_beginAccess();
    unint64_t v5 = *(void *)(*(void *)(v2 + 16) + 16);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (void *)MEMORY[0x263F8EE80];
      int v8 = *MEMORY[0x263F288F8];
      uint64_t v55 = v4;
      uint64_t v56 = v3;
      int v54 = *MEMORY[0x263F288F8];
      while (1)
      {
        while (1)
        {
          swift_beginAccess();
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_67;
          }
          if (v6 >= *(void *)(*(void *)v4 + 16))
          {
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
          int Attribute = AGWeakAttributeGetAttribute();
          swift_endAccess();
          if (Attribute != v8) {
            break;
          }
          --v5;
          swift_beginAccess();
          if (v6 == v5) {
            goto LABEL_14;
          }
          uint64_t v10 = *(void **)v4;
          unint64_t v11 = *(void *)(*(void *)v4 + 16);
          if (v6 >= v11) {
            goto LABEL_72;
          }
          if (v5 >= v11) {
            goto LABEL_73;
          }
          uint64_t v12 = v10[v6 + 4];
          uint64_t v13 = v10[v5 + 4];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v4 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
            *(void *)uint64_t v4 = v10;
          }
          v10[v6 + 4] = v13;
          *(void *)(*(void *)v4 + 8 * v5 + 32) = v12;
LABEL_14:
          uint64_t v15 = *(void **)v4;
          if (!*(void *)(*(void *)v4 + 16)) {
            goto LABEL_70;
          }
          char v16 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v4 = v15;
          if (v16)
          {
            uint64_t v17 = v15[2];
            if (!v17) {
              goto LABEL_71;
            }
          }
          else
          {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            *(void *)uint64_t v4 = v15;
            uint64_t v17 = v15[2];
            if (!v17) {
              goto LABEL_71;
            }
          }
          v15[2] = v17 - 1;
          *(void *)uint64_t v4 = v15;
          swift_endAccess();
          if ((uint64_t)v6 >= (uint64_t)v5) {
            goto LABEL_57;
          }
        }
        unint64_t v57 = v6;
        uint64_t v58 = v5;
        uint64_t v18 = *(void *)(AGGraphGetValue() + 32);
        swift_bridgeObjectRetain_n();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v60 = v7;
        uint64_t v20 = v18 + 64;
        uint64_t v21 = -1 << *(unsigned char *)(v18 + 32);
        uint64_t v22 = -v21 < 64 ? ~(-1 << -(char)v21) : -1;
        unint64_t v23 = v22 & *(void *)(v18 + 64);
        int64_t v24 = (unint64_t)(63 - v21) >> 6;
        swift_bridgeObjectRetain();
        int64_t v25 = 0;
        if (v23) {
          break;
        }
LABEL_26:
        int64_t v28 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_66;
        }
        if (v28 < v24)
        {
          unint64_t v29 = *(void *)(v20 + 8 * v28);
          int64_t v30 = v25 + 1;
          if (v29) {
            goto LABEL_41;
          }
          int64_t v30 = v25 + 2;
          if (v25 + 2 < v24)
          {
            unint64_t v29 = *(void *)(v20 + 8 * v30);
            if (v29) {
              goto LABEL_41;
            }
            int64_t v30 = v25 + 3;
            if (v25 + 3 < v24)
            {
              unint64_t v29 = *(void *)(v20 + 8 * v30);
              if (v29) {
                goto LABEL_41;
              }
              int64_t v30 = v25 + 4;
              if (v25 + 4 < v24)
              {
                unint64_t v29 = *(void *)(v20 + 8 * v30);
                if (v29) {
                  goto LABEL_41;
                }
                int64_t v31 = v25 + 5;
                if (v25 + 5 < v24)
                {
                  unint64_t v29 = *(void *)(v20 + 8 * v31);
                  if (v29)
                  {
                    int64_t v30 = v25 + 5;
LABEL_41:
                    unint64_t v23 = (v29 - 1) & v29;
                    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
                    int64_t v25 = v30;
                    goto LABEL_42;
                  }
                  while (1)
                  {
                    int64_t v30 = v31 + 1;
                    if (__OFADD__(v31, 1)) {
                      break;
                    }
                    if (v30 >= v24) {
                      goto LABEL_4;
                    }
                    unint64_t v29 = *(void *)(v20 + 8 * v30);
                    ++v31;
                    if (v29) {
                      goto LABEL_41;
                    }
                  }
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
                  goto LABEL_74;
                }
              }
            }
          }
        }
LABEL_4:
        swift_bridgeObjectRelease();
        outlined consume of Set<EventID>.Iterator._Variant();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v5 = v58;
        unint64_t v6 = v57 + 1;
        uint64_t v4 = v55;
        unsigned __int32 v3 = v56;
        int v8 = v54;
        if ((uint64_t)(v57 + 1) >= v58) {
          goto LABEL_57;
        }
      }
      while (1)
      {
        while (1)
        {
          unint64_t v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          unint64_t v27 = v26 | (v25 << 6);
LABEL_42:
          Swift::UInt32 v32 = *(_DWORD *)(*(void *)(v18 + 48) + 4 * v27);
          uint64_t v33 = *(void *)(v18 + 56) + 24 * v27;
          long long v59 = *(_OWORD *)v33;
          uint64_t v34 = *(void *)(v33 + 16);
          unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          uint64_t v37 = v7[2];
          BOOL v38 = (v35 & 1) == 0;
          uint64_t v39 = v37 + v38;
          if (__OFADD__(v37, v38))
          {
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          char v40 = v35;
          if (v7[3] >= v39) {
            break;
          }
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v19 & 1);
          unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          if ((v40 & 1) != (v42 & 1)) {
            goto LABEL_75;
          }
          unint64_t v36 = v41;
          if ((v40 & 1) == 0) {
            goto LABEL_49;
          }
LABEL_24:
          char v19 = 1;
          uint64_t v7 = v60;
          if (!v23) {
            goto LABEL_26;
          }
        }
        if (v19)
        {
          if (v35) {
            goto LABEL_24;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if (v40) {
            goto LABEL_24;
          }
        }
LABEL_49:
        uint64_t v7 = v60;
        v60[(v36 >> 6) + 8] |= 1 << v36;
        *(_DWORD *)(v60[6] + 4 * v36) = v32;
        uint64_t v43 = v60[7] + 24 * v36;
        *(_OWORD *)uint64_t v43 = v59;
        *(void *)(v43 + 16) = v34;
        uint64_t v44 = v60[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (v45) {
          goto LABEL_65;
        }
        v60[2] = v46;
        char v19 = 1;
        if (!v23) {
          goto LABEL_26;
        }
      }
    }
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
LABEL_57:
    *unsigned __int32 v3 = v7;
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v47 = *v3;
  if (*v3)
  {
    if (*(void *)(v47 + 16) && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v52), (v49 & 1) != 0))
    {
      uint64_t v50 = *(void *)(v47 + 56) + 24 * v48;
      *(_OWORD *)a2 = *(_OWORD *)v50;
      *(void *)(a2 + 16) = *(void *)(v50 + 16);
      *(unsigned char *)(a2 + 24) = 0;
    }
    else
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
    return swift_endAccess();
  }
LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _DisplayList_StableIdentityRoot.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _DisplayList_StableIdentityRoot.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t static _DisplayList_StableIdentityScope.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return static _DisplayList_StableIdentityScope.defaultValue;
}

uint64_t _DisplayList_StableIdentityScope.root.getter()
{
  return swift_retain();
}

__n128 _DisplayList_StableIdentityScope.hash.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = *(_DWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

uint64_t _DisplayList_StableIdentityScope.map.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t _DisplayList_StableIdentityScope.map.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t (*_DisplayList_StableIdentityScope.map.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _DisplayList_StableIdentityScope.serial.getter()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t _DisplayList_StableIdentityScope.serial.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*_DisplayList_StableIdentityScope.serial.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _DisplayList_StableIdentityScope.init(root:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(&v7, 0, sizeof(v7));
  swift_retain();
  CC_SHA1_Init(&v7);
  CC_SHA1_CTX c = v7;
  specialized StrongHasher.combine<A>(_:)(1953460082, 0xE400000000000000);
  memset(&v7, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v7, &c);
  swift_release();
  CC_LONG h4 = v7.h4;
  __n128 result = *(__n128 *)&v7.h0;
  *(void *)a2 = a1;
  *(__n128 *)(a2 + 8) = result;
  uint64_t v6 = MEMORY[0x263F8EE80];
  *(_DWORD *)(a2 + 24) = h4;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t specialized StrongHasher.combine<A>(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v4 = String.utf8CString.getter();
    unint64_t v5 = *(void *)(v4 + 16);
    if (HIDWORD(v5))
    {
      __n128 result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      CC_SHA1_Update(v2, (const void *)(v4 + 32), v5);
      return swift_release();
    }
  }
  return result;
}

__n128 _DisplayList_StableIdentityScope.init<A>(id:parent:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  CC_LONG v11 = *((_DWORD *)a2 + 6);
  memset(&c, 0, sizeof(c));
  swift_retain();
  CC_SHA1_Init(&c);
  CC_SHA1_CTX v18 = c;
  StrongHasher.combine<A>(_:)(a1, a3, a4);
  uint64_t v12 = a2[2];
  *(void *)&c.h0 = a2[1];
  *(void *)&c.h2 = v12;
  c.CC_LONG h4 = v11;
  CC_SHA1_Update(&v18, &c, 0x14u);
  swift_bridgeObjectRelease();
  swift_release();
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v18);
  CC_LONG h4 = c.h4;
  __n128 v16 = *(__n128 *)&c.h0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *(void *)a5 = v10;
  __n128 result = v16;
  *(__n128 *)(a5 + 8) = v16;
  uint64_t v15 = MEMORY[0x263F8EE80];
  *(_DWORD *)(a5 + 24) = h4;
  *(void *)(a5 + 32) = v15;
  *(_DWORD *)(a5 + 40) = 0;
  return result;
}

__n128 _DisplayList_StableIdentityScope.makeIdentity()@<Q0>(__n128 *a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 40) + 1;
  *(_DWORD *)(v1 + 40) = v2;
  unsigned __int32 v3 = *(_DWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 8);
  *a1 = result;
  a1[1].n128_u32[0] = v3;
  a1[1].n128_u32[1] = v2;
  return result;
}

uint64_t _DisplayList_StableIdentityScope.pushIdentity(_:)(Swift::UInt32 *a1)
{
  int v2 = v1;
  Swift::UInt32 v3 = *a1;
  uint64_t v4 = (*((_DWORD *)v1 + 10) + 1);
  *((_DWORD *)v2 + 10) = v4;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = *((unsigned int *)v2 + 6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = v2[4];
  v2[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v6, v7 | (v4 << 32), v3, isUniquelyReferenced_nonNull_native);
  v2[4] = v11;
  swift_bridgeObjectRelease();
  uint64_t v9 = *v2;
  swift_beginAccess();
  *(void *)(v9 + 24) = 0;
  return swift_bridgeObjectRelease();
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance _DisplayList_StableIdentityScope@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _DisplayList_StableIdentityScope.defaultValue;
  *a1 = static _DisplayList_StableIdentityScope.defaultValue;
  return result;
}

void _DisplayList_StableIdentity.encode(to:)(void *a1)
{
  Swift::UInt v3 = *(unsigned int *)(v1 + 20);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v4 = a1[1];
  uint64_t v5 = (void *)a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  a1[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    a1[1] = v4 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    if (v3)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v3);
    }
  }
}

unint64_t _DisplayList_StableIdentity.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    int v7 = 0;
    int v8 = 0;
    long long v23 = 0u;
LABEL_4:
    v3[3] = 0;
    *(_OWORD *)a2 = v23;
    *(_DWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 20) = v7;
    return result;
  }
  int v7 = 0;
  int v8 = 0;
  long long v23 = 0u;
  while (1)
  {
    double result = v3[3];
    if (result)
    {
      unint64_t v10 = v3[4];
      if (v5 < v10) {
        goto LABEL_14;
      }
      if (v10 < v5) {
        goto LABEL_47;
      }
      v3[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_47;
    }
LABEL_14:
    if (result >> 3 == 2)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_47;
        }
        double result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        unint64_t v19 = v3[1] + result;
        if (v6 < v19) {
          goto LABEL_47;
        }
        v3[3] = 16;
        v3[4] = v19;
      }
      double result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      int v7 = result;
      goto LABEL_7;
    }
    if (result >> 3 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_7;
          }
          return result;
        case 1uLL:
          unint64_t v9 = v3[1] + 8;
          if (v6 < v9) {
            goto LABEL_47;
          }
          goto LABEL_6;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_53;
          }
          unint64_t v9 = v3[1] + result;
          if (v6 < v9) {
            goto LABEL_47;
          }
LABEL_6:
          v3[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = v3[1] + 4;
          if (v6 < v9) {
            goto LABEL_47;
          }
          goto LABEL_6;
        default:
          goto LABEL_47;
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_47;
    }
    uint64_t v11 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
    }
    v11[2] = v13 + 1;
    v11[v13 + 4] = v6;
    v3[5] = v11;
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v14 = v3[1] + result;
    if (v6 < v14) {
      goto LABEL_47;
    }
    v3[2] = v14;
    StrongHash.init(from:)((unint64_t)v3, &v24);
    uint64_t v15 = (void *)v3[5];
    if (!v15[2]) {
      goto LABEL_51;
    }
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v16 = v15[2];
      if (!v16) {
        goto LABEL_46;
      }
    }
    else
    {
      double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      uint64_t v15 = (void *)result;
      uint64_t v16 = *(void *)(result + 16);
      if (!v16)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    uint64_t v17 = v16 - 1;
    uint64_t v18 = v15[v17 + 4];
    v15[2] = v17;
    v3[5] = v15;
    v3[2] = v18;
    long long v23 = v24;
    int v8 = v25;
LABEL_7:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  __break(1u);
  double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v22 = *(void *)(result + 16);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x245AF1CB0);
  }
  uint64_t v20 = v22 - 1;
  uint64_t v21 = *(void *)(result + 8 * v20 + 32);
  *(void *)(result + 16) = v20;
  v3[5] = result;
  v3[2] = v21;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _DisplayList_StableIdentity(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _DisplayList_StableIdentity@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _DisplayList_StableIdentity.init(from:)(a1, a2);
}

int64_t _DisplayList_StableIdentityMap.encode(to:)(void *a1)
{
  uint64_t v3 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*v1 + 64);
  int64_t v31 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v32 = *v1;
  int64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v33)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (i << 6);
    }
    else
    {
      int64_t v10 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_51;
      }
      if (v10 >= v31) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v30 + 8 * v10);
      ++i;
      if (!v11)
      {
        int64_t i = v10 + 1;
        if (v10 + 1 >= v31) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v30 + 8 * i);
        if (!v11)
        {
          int64_t i = v10 + 2;
          if (v10 + 2 >= v31) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v30 + 8 * i);
          if (!v11)
          {
            int64_t v12 = v10 + 3;
            if (v12 >= v31) {
              return swift_release();
            }
            unint64_t v11 = *(void *)(v30 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t i = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_52;
                }
                if (i >= v31) {
                  return swift_release();
                }
                unint64_t v11 = *(void *)(v30 + 8 * i);
                ++v12;
                if (v11) {
                  goto LABEL_20;
                }
              }
            }
            int64_t i = v12;
          }
        }
      }
LABEL_20:
      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (i << 6);
    }
    Swift::UInt v13 = *(unsigned int *)(*(void *)(v32 + 48) + 4 * v9);
    Swift::UInt v14 = *(unsigned int *)(*(void *)(v32 + 56) + 24 * v9 + 20);
    int64_t v15 = a1[1];
    int64_t v16 = a1[2];
    int64_t v33 = i;
    if (v15 >= v16)
    {
      int64_t result = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_53;
      }
      if (v16 < result)
      {
        unint64_t v29 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(result);
      }
      else
      {
        a1[1] = result;
        unint64_t v29 = (unsigned char *)(*a1 + v15);
      }
      *unint64_t v29 = 10;
      int64_t v17 = a1[1];
    }
    else
    {
      *(unsigned char *)(*a1 + v15) = 10;
      int64_t v17 = v15 + 1;
      a1[1] = v15 + 1;
    }
    uint64_t v18 = (void *)a1[3];
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      uint64_t v18 = (void *)result;
    }
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
      uint64_t v18 = (void *)result;
    }
    v18[2] = v20 + 1;
    v18[v20 + 4] = v17;
    a1[3] = v18;
    if (__OFADD__(v17, 1)) {
      break;
    }
    a1[1] = v17 + 1;
    if (v13)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v13);
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v21 = a1[1];
    uint64_t v22 = (void *)a1[3];
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      uint64_t v22 = (void *)result;
    }
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    if (v24 >= v23 >> 1)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
      uint64_t v22 = (void *)result;
    }
    v22[2] = v24 + 1;
    v22[v24 + 4] = v21;
    a1[3] = v22;
    if (__OFADD__(v21, 1)) {
      goto LABEL_49;
    }
    a1[1] = v21 + 1;
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v25 = a1[1];
    unint64_t v26 = (void *)a1[3];
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      unint64_t v26 = (void *)result;
    }
    unint64_t v28 = v26[2];
    unint64_t v27 = v26[3];
    if (v28 >= v27 >> 1)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
      unint64_t v26 = (void *)result;
    }
    v26[2] = v28 + 1;
    v26[v28 + 4] = v25;
    a1[3] = v26;
    if (__OFADD__(v25, 1)) {
      goto LABEL_50;
    }
    a1[1] = v25 + 1;
    StrongHash.encode(to:)(a1);
    ProtobufEncoder.endLengthDelimited()();
    if (v14)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v14);
    }
    ProtobufEncoder.endLengthDelimited()();
    int64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

unint64_t _DisplayList_StableIdentityMap.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  int v7 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v5 >= v6)
    {
      v4[3] = 0;
      *a2 = v7;
      return result;
    }
    int64_t result = v4[3];
    if (result)
    {
      unint64_t v9 = v4[4];
      if (v5 < v9) {
        goto LABEL_12;
      }
      if (v9 < v5) {
        goto LABEL_41;
      }
      v4[3] = 0;
    }
    int64_t result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return swift_bridgeObjectRelease();
    }
    if (result < 8)
    {
LABEL_41:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_12:
    if ((result & 0xFFFFFFFFFFFFFFF8) == 8) {
      break;
    }
    switch(result & 7)
    {
      case 0uLL:
        int64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return swift_bridgeObjectRelease();
        }
        break;
      case 1uLL:
        unint64_t v8 = v4[1] + 8;
        if (v6 >= v8) {
          goto LABEL_3;
        }
        goto LABEL_41;
      case 2uLL:
        int64_t v10 = v4;
        int64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return swift_bridgeObjectRelease();
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_47;
        }
        unint64_t v8 = v4[1] + result;
        if (v6 < v8) {
          goto LABEL_41;
        }
LABEL_3:
        v4[1] = v8;
        break;
      case 5uLL:
        unint64_t v8 = v4[1] + 4;
        if (v6 < v8) {
          goto LABEL_41;
        }
        goto LABEL_3;
      default:
        goto LABEL_41;
    }
LABEL_4:
    unint64_t v5 = v4[1];
    unint64_t v6 = v4[2];
  }
  if ((result & 7) != 2) {
    goto LABEL_41;
  }
  ProtobufDecoder.beginMessage()();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  closure #1 in _DisplayList_StableIdentityMap.init(from:)(v4, &v35);
  uint64_t v3 = 0;
  int64_t v10 = (void *)v4[5];
  if (v10[2])
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v11 = v10[2];
      if (!v11) {
        goto LABEL_45;
      }
    }
    else
    {
      int64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v11 = v10[2];
      if (!v11) {
        goto LABEL_45;
      }
    }
    uint64_t v12 = v11 - 1;
    uint64_t v13 = v10[v12 + 4];
    v10[2] = v12;
    v4[5] = v10;
    unsigned char v4[2] = v13;
    Swift::UInt32 v15 = v35;
    uint64_t v14 = HIDWORD(v35);
    uint64_t v16 = v36;
    uint64_t v32 = v38;
    uint64_t v33 = v37;
    uint64_t v41 = v39;
    uint64_t v34 = v40;
    int64_t v10 = v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v35 = v10;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    uint64_t v20 = v10[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_46;
    }
    char v23 = v18;
    if (v10[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        int v7 = v35;
        if ((v18 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        int v7 = v35;
        if ((v23 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_49;
      }
      unint64_t v19 = v24;
      int v7 = v35;
      if ((v23 & 1) == 0)
      {
LABEL_22:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v15, v14 | (v16 << 32), v33 | (v32 << 32), v41 | (v34 << 32), v7);
LABEL_29:
        int64_t result = swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    unint64_t v26 = (_DWORD *)(v7[7] + 24 * v19);
    *unint64_t v26 = v14;
    v26[1] = v16;
    v26[2] = v33;
    v26[3] = v32;
    v26[4] = v41;
    v26[5] = v34;
    goto LABEL_29;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  __break(1u);
  unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  uint64_t v30 = v29[2];
  if (!v30)
  {
    __break(1u);
LABEL_49:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x245AF249CLL);
  }
  uint64_t v27 = v30 - 1;
  uint64_t v28 = v29[v27 + 4];
  v29[2] = v27;
  v4[5] = v29;
  unsigned char v4[2] = v28;
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in _DisplayList_StableIdentityMap.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (void *)a1[2];
  if (v4 >= (unint64_t)v5)
  {
    a1[3] = 0;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v27 = a2;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  int v9 = 0;
  LODWORD(v10) = 1;
  int v11 = 1;
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v14 = a1[4];
      if (v4 < v14) {
        goto LABEL_15;
      }
      if (v14 < v4) {
        goto LABEL_4;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_4;
    }
LABEL_15:
    if (result >> 3 == 2) {
      break;
    }
    if (result >> 3 == 1)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_4;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_53;
        }
        unint64_t v15 = a1[1] + result;
        if ((unint64_t)v5 < v15) {
          goto LABEL_4;
        }
        a1[3] = 8;
        a1[4] = v15;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      int v9 = result;
      int v11 = 0;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (!v2) {
            break;
          }
          return result;
        case 1uLL:
          unint64_t v13 = a1[1] + 8;
          if ((unint64_t)v5 < v13) {
            goto LABEL_4;
          }
          goto LABEL_7;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_54;
          }
          unint64_t v13 = a1[1] + result;
          if ((unint64_t)v5 < v13) {
            goto LABEL_4;
          }
LABEL_7:
          a1[1] = v13;
          break;
        case 5uLL:
          unint64_t v13 = a1[1] + 4;
          if ((unint64_t)v5 < v13) {
            goto LABEL_4;
          }
          goto LABEL_7;
        default:
          goto LABEL_4;
      }
    }
LABEL_8:
    unint64_t v4 = a1[1];
    unint64_t v5 = (void *)a1[2];
    if (v4 >= (unint64_t)v5) {
      goto LABEL_48;
    }
  }
  if ((result & 7) != 2) {
    goto LABEL_4;
  }
  uint64_t v16 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
  }
  unint64_t v10 = v16[2];
  unint64_t v17 = v16[3];
  unint64_t v7 = v10 + 1;
  if (v10 >= v17 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v10 + 1, 1, v16);
  }
  v16[2] = v7;
  v16[v10 + 4] = v5;
  a1[5] = v16;
  unint64_t result = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    __break(1u);
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    uint64_t v25 = *(void *)(result + 16);
    if (!v25)
    {
      __break(1u);
      JUMPOUT(0x245AF2850);
    }
    uint64_t v23 = v25 - 1;
    uint64_t v24 = *(void *)(result + 8 * v23 + 32);
    *(void *)(result + 16) = v23;
    a1[5] = result;
    a1[2] = v24;
    return result;
  }
  unint64_t v18 = a1[1] + result;
  if ((unint64_t)v5 < v18) {
    goto LABEL_4;
  }
  a1[2] = v18;
  _DisplayList_StableIdentity.init(from:)((unint64_t)a1, (uint64_t)v26);
  unint64_t v8 = (void *)a1[5];
  if (!v8[2]) {
    goto LABEL_52;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v19 = v8[2];
    if (!v19) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  unint64_t v8 = (void *)result;
  uint64_t v19 = *(void *)(result + 16);
  if (v19)
  {
LABEL_36:
    LODWORD(v10) = 0;
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v8[v20 + 4];
    _OWORD v8[2] = v20;
    a1[5] = v8;
    a1[2] = v21;
    uint64_t v6 = v26[0];
    unint64_t v7 = v26[1];
    unint64_t v8 = (void *)v26[2];
    goto LABEL_8;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  a1[3] = 0;
  if ((v11 | v10)) {
    goto LABEL_4;
  }
  uint64_t v22 = v27;
  *uint64_t v27 = v9;
  *(void *)(v22 + 1) = v6;
  *(void *)(v22 + 3) = v7;
  *(void *)(v22 + 5) = v8;
  return result;
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _DisplayList_StableIdentityMap(void *a1)
{
  return _DisplayList_StableIdentityMap.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _DisplayList_StableIdentityMap@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  return _DisplayList_StableIdentityMap.init(from:)(a1, a2);
}

uint64_t (*Attribute<A>.subscript.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.configureStableIDs(root:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)v1;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(v1 + 36);
  if ((v4 & 0x100) == 0) {
    *(_DWORD *)(v1 + 36) = v4 | 0x100;
  }
  memset(&c, 0, sizeof(c));
  swift_retain();
  CC_SHA1_Init(&c);
  CC_SHA1_CTX v13 = c;
  specialized StrongHasher.combine<A>(_:)(1953460082, 0xE400000000000000);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v13);
  *(void *)&v13.h0 = a1;
  *(_OWORD *)&v13.h2 = *(_OWORD *)&c.h0;
  v13.Nh = c.h4;
  *(void *)&v13.data[1] = MEMORY[0x263F8EE80];
  v13.data[3] = 0;
  type metadata accessor for External<_DisplayList_StableIdentityScope>();
  lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v5);
  swift_release();
  uint64_t v6 = (void *)(a1 + 16);
  swift_beginAccess();
  unint64_t v7 = *(void **)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  _OWORD v7[2] = v10 + 1;
  v7[v10 + 4] = v5;
  return swift_endAccess();
}

uint64_t _ViewInputs.makeStableIdentity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!specialized find<A>(_:key:)(v3) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    uint64_t result = specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
    int v5 = 0;
    int v6 = 0;
    long long v7 = 0uLL;
  }
  else
  {
    uint64_t result = AGGraphGetValue();
    int v6 = *(_DWORD *)(result + 40) + 1;
    *(_DWORD *)(result + 40) = v6;
    long long v7 = *(_OWORD *)(result + 8);
    int v5 = *(_DWORD *)(result + 24);
  }
  *(_OWORD *)a1 = v7;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v6;
  return result;
}

uint64_t specialized _GraphInputs.pushScope<A>(id:)(void *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = swift_retain();
  if (!specialized find<A>(_:key:)(v4) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v6 = *(void *)Value;
    CC_LONG v7 = *(_DWORD *)(Value + 24);
    uint64_t v8 = *(void *)(Value + 8);
    uint64_t v9 = *(void *)(Value + 16);
    memset(&c, 0, sizeof(c));
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    CC_SHA1_Init(&c);
    CC_SHA1_CTX v15 = c;
    *(void *)&c.h0 = a1;
    CC_SHA1_Update(&v15, &c, 8u);
    *(void *)&c.h0 = v8;
    *(void *)&c.h2 = v9;
    c.CC_LONG h4 = v7;
    CC_SHA1_Update(&v15, &c, 0x14u);
    swift_bridgeObjectRelease();
    swift_release();
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v15);
    *(void *)&v15.h0 = v6;
    *(_OWORD *)&v15.h2 = *(_OWORD *)&c.h0;
    v15.Nh = c.h4;
    *(void *)&v15.data[1] = MEMORY[0x263F8EE80];
    v15.data[3] = 0;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v2);
    swift_release();
    uint64_t v1 = (uint64_t *)(v6 + 16);
    swift_beginAccess();
    a1 = *(void **)(v6 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 16) = a1;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *uint64_t v1 = (uint64_t)a1;
LABEL_6:
  unint64_t v12 = a1[2];
  unint64_t v11 = a1[3];
  if (v12 >= v11 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, a1);
    *uint64_t v1 = (uint64_t)a1;
  }
  a1[2] = v12 + 1;
  a1[v12 + 4] = v2;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized _GraphInputs.pushScope<A>(id:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v7 = swift_retain();
  if (!specialized find<A>(_:key:)(v7) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)Value;
    CC_LONG v10 = *(_DWORD *)(Value + 24);
    uint64_t v11 = *(void *)(Value + 8);
    uint64_t v12 = *(void *)(Value + 16);
    memset(&c, 0, sizeof(c));
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    CC_SHA1_Init(&c);
    CC_SHA1_CTX v18 = c;
    *(void *)&c.h0 = a1;
    *(void *)&c.h2 = a2;
    c.CC_LONG h4 = a3;
    CC_SHA1_Update(&v18, &c, 0x14u);
    *(void *)&c.h0 = v11;
    *(void *)&c.h2 = v12;
    c.CC_LONG h4 = v10;
    CC_SHA1_Update(&v18, &c, 0x14u);
    swift_bridgeObjectRelease();
    swift_release();
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v18);
    *(void *)&v18.h0 = v9;
    *(_OWORD *)&v18.h2 = *(_OWORD *)&c.h0;
    v18.Nh = c.h4;
    *(void *)&v18.data[1] = MEMORY[0x263F8EE80];
    v18.data[3] = 0;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    a2 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, a2);
    swift_release();
    uint64_t v3 = (uint64_t *)(v9 + 16);
    swift_beginAccess();
    a3 = *(void **)(v9 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 16) = a3;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
  }
  a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
  *uint64_t v3 = (uint64_t)a3;
LABEL_6:
  unint64_t v15 = a3[2];
  unint64_t v14 = a3[3];
  if (v15 >= v14 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, a3);
    *uint64_t v3 = (uint64_t)a3;
  }
  a3[2] = v15 + 1;
  a3[v15 + 4] = a2;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _GraphInputs.pushScope<A>(id:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_retain();
  if (!specialized find<A>(_:key:)(v10) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_release();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)Value;
    uint64_t v13 = a1;
    uint64_t v14 = (uint64_t)a3;
    int v15 = *(_DWORD *)(Value + 24);
    uint64_t v16 = *(void *)(Value + 32);
    int v17 = *(_DWORD *)(Value + 40);
    CC_SHA1_CTX v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    long long v23 = *(_OWORD *)(Value + 8);
    v18(v9, v13, v5);
    uint64_t v24 = v12;
    long long v25 = v23;
    int v26 = v15;
    uint64_t v27 = v16;
    int v28 = v17;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    _DisplayList_StableIdentityScope.init<A>(id:parent:)((uint64_t)v9, &v24, v5, v14, (uint64_t)&v29);
    uint64_t v24 = v29;
    long long v25 = v30;
    int v26 = v31;
    uint64_t v27 = v32;
    int v28 = v33;
    type metadata accessor for External<_DisplayList_StableIdentityScope>();
    lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type External<_DisplayList_StableIdentityScope> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<_DisplayList_StableIdentityScope>);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = AGCreateWeakAttribute();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v5);
    swift_release();
    uint64_t v3 = (uint64_t *)(v12 + 16);
    swift_beginAccess();
    a3 = *(void **)(v12 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v12 + 16) = a3;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
  }
  a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
  *uint64_t v3 = (uint64_t)a3;
LABEL_6:
  unint64_t v21 = a3[2];
  unint64_t v20 = a3[3];
  if (v21 >= v20 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, a3);
    *uint64_t v3 = (uint64_t)a3;
  }
  a3[2] = v21 + 1;
  a3[v21 + 4] = v5;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t makeStableIDData<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v6);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v22, (uint64_t)&v25);
    uint64_t v9 = v27;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(&v25, v27);
    double v11 = MEMORY[0x270FA5388](v10);
    uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v14 + 16))(v13, v11);
    StrongHash.init<A>(encodable:)((uint64_t)v13, v9, (uint64_t)&v22);
    char v15 = 0;
    uint64_t v18 = *((void *)&v22 + 1);
    uint64_t v17 = v22;
    int v19 = v23;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  else
  {
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v22, &lazy cache variable for type metadata for Encodable?, &lazy cache variable for type metadata for Encodable);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xD00000000000001ALL;
    unint64_t v26 = 0x800000024621C180;
    swift_getDynamicType();
    v16._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    specialized static Log.externalWarning(_:)(v25, v26);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    char v15 = 1;
  }
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 16) = v19;
  *(unsigned char *)(a3 + 20) = v15;
  return result;
}

double makeStableTypeData(_:)@<D0>(uint64_t a1@<X8>)
{
  AGTypeGetSignature();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t specialized StrongHash.init<A>(of:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  CC_SHA1_CTX v12 = c;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if ((v6 & 0x8000000000000000) != 0 || HIDWORD(v6))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = v4;
    CC_SHA1_Update(&v12, a1, v6);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &v12);
    CC_LONG h4 = c.h4;
    long long v10 = *(_OWORD *)&c.h0;
    uint64_t result = (*(uint64_t (**)(const void *, uint64_t))(v5 + 8))(a1, v7);
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 16) = h4;
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      int v31 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v32 = v14;
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = v8;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v10;
        v32(v7, *(void *)(a2 + 48) + v16 * v10, v4);
        lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v31)(v7, v4);
        unint64_t v21 = v20 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v21 >= v33 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v16 = v18;
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v8 = v17;
            if (a1 < (uint64_t)v10 || *(void *)(a2 + 56) + 8 * a1 >= *(void *)(a2 + 56) + 8 * v10 + 8)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
            }
            else
            {
              BOOL v24 = a1 == v10;
              a1 = v10;
              if (!v24)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v33 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v17;
        uint64_t v16 = v18;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  unint64_t v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  BOOL v24 = type metadata accessor for NamedImage.VectorKey(0);
  uint64_t v4 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a2 + 64;
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v10 = ~v8;
    uint64_t v11 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v12 = (v11 + 1) & v10;
      uint64_t v13 = *(void *)(v4 + 72);
      while (1)
      {
        uint64_t v14 = v13 * v9;
        outlined init with copy of NamedImage.VectorKey(*(void *)(a2 + 48) + v13 * v9, (uint64_t)v6);
        Hasher.init(_seed:)();
        NamedImage.VectorKey.hash(into:)();
        uint64_t v15 = Hasher._finalize()();
        outlined destroy of NamedImage.VectorKey((uint64_t)v6);
        uint64_t v16 = v15 & v10;
        if (a1 >= (uint64_t)v12) {
          break;
        }
        if (v16 < v12) {
          goto LABEL_11;
        }
LABEL_12:
        if (v13 * a1 < v14 || *(void *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v14 + v13))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        if (a1 < (uint64_t)v9 || *(void *)(a2 + 56) + 88 * a1 >= *(void *)(a2 + 56) + 88 * v9 + 88)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v17 = a1 == v9;
          a1 = v9;
          if (v17) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        uint64_t v9 = (v9 + 1) & v10;
        if (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v16 < v12) {
        goto LABEL_6;
      }
LABEL_11:
      if (a1 < (uint64_t)v16) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v18 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    int64_t v19 = *v18;
    uint64_t v20 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v20 = *v18;
    int64_t v19 = (-1 << a1) - 1;
  }
  void *v18 = v20 & v19;
  unint64_t v21 = *(void *)(a2 + 16);
  long long v22 = __OFSUB__(v21, 1);
  long long v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v10 = ~v8;
    unint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v30 = (v11 + 1) & v10;
      int v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        uint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v21 = *(void *)(a2 + 56);
            long long v22 = (void *)(v21 + 8 * a1);
            long long v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *long long v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    BOOL v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *BOOL v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = __OFSUB__(v27, 1);
  BOOL v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
        id v12 = v11;
        _CFObject.hash(into:)();
        Swift::Int v13 = Hasher._finalize()();

        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (void *)(v15 + 8 * v3);
          uint64_t v17 = (void *)(v15 + 8 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          int64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            long long v10 = v20[1];
            *int64_t v19 = *v20;
            v19[1] = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << a1) - 1;
  }
  *unint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        long long v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        type metadata accessor for AGSubgraphRef(0);
        lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(&lazy protocol witness table cache variable for type AGSubgraphRef and conformance AGSubgraphRef, type metadata accessor for AGSubgraphRef);
        uint64_t v11 = v10;
        _CFObject.hash(into:)();
        id v12 = Hasher._finalize()();

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          unint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          int64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            void *v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v22 = *v20;
    unint64_t v21 = (-1 << a1) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  BOOL v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  uint64_t v46 = v9;
  uint64_t v47 = 0;
  uint64_t v48 = v12 & v10;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
  if (v43) {
    goto LABEL_14;
  }
  Swift::UInt32 v13 = v40;
  long long v39 = v41;
  uint64_t v14 = v42;
  uint64_t v15 = (void *)*a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  uint64_t v18 = v15[2];
  BOOL v19 = (v17 & 1) == 0;
  BOOL v20 = __OFADD__(v18, v19);
  uint64_t v21 = v18 + v19;
  if (v20) {
    goto LABEL_24;
  }
  char v5 = v17;
  if (v15[3] >= v21) {
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v5 & 1) != (v22 & 1))
  {
LABEL_8:
    unint64_t v16 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_9:
    if ((a4 & 1) == 0) {
      goto LABEL_25;
    }
  }
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_13:
  while (1)
  {
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
    if (v43) {
      break;
    }
    char v5 = 1;
    while (1)
    {
      Swift::UInt32 v13 = v40;
      long long v39 = v41;
      uint64_t v14 = v42;
      uint64_t v28 = (void *)*a5;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
      uint64_t v30 = v28[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v20 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v20) {
        break;
      }
      a4 = v29;
      if (v28[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if ((a4 & 1) != (v33 & 1)) {
          goto LABEL_8;
        }
      }
      if ((a4 & 1) == 0)
      {
        uint64_t v34 = (void *)*a5;
        *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
        *(_DWORD *)(v34[6] + 4 * v16) = v13;
        uint64_t v35 = v34[7] + 24 * v16;
        *(_OWORD *)uint64_t v35 = v39;
        *(void *)(v35 + 16) = v14;
        uint64_t v36 = v34[2];
        BOOL v20 = __OFADD__(v36, 1);
        uint64_t v37 = v36 + 1;
        if (v20) {
          goto LABEL_23;
        }
        v34[2] = v37;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v40);
      if (v43) {
        goto LABEL_14;
      }
    }
LABEL_24:
    while (1)
    {
      __break(1u);
LABEL_25:
      unint64_t v38 = v16;
      specialized _NativeDictionary.copy()();
      unint64_t v16 = v38;
      if (v5) {
        break;
      }
LABEL_11:
      uint64_t v23 = (void *)*a5;
      *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
      *(_DWORD *)(v23[6] + 4 * v16) = v13;
      uint64_t v24 = v23[7] + 24 * v16;
      *(_OWORD *)uint64_t v24 = v39;
      *(void *)(v24 + 16) = v14;
      uint64_t v25 = v23[2];
      BOOL v20 = __OFADD__(v25, 1);
      uint64_t v26 = v25 + 1;
      if (!v20)
      {
        v23[2] = v26;
        goto LABEL_13;
      }
LABEL_23:
      __break(1u);
    }
  }
LABEL_14:
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Set<EventID>.Iterator._Variant();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  void *v48;
  int v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_26;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  Swift::UInt32 v13 = (void *)*a5;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  unint64_t v16 = v13[2];
  char v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  BOOL v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      char v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v24 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v24 = v10;
    v24[1] = v11;
    *(_DWORD *)(v22[7] + 4 * v15) = v12;
    uint64_t v25 = v22[2];
    uint64_t v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v22[2] = v27;
LABEL_14:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      BOOL v31 = v28;
      uint64_t v32 = v29;
      char v33 = v30;
      do
      {
        long long v39 = (void *)*a5;
        long long v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        uint64_t v42 = v39[2];
        char v43 = (v40 & 1) == 0;
        uint64_t v44 = v42 + v43;
        if (__OFADD__(v42, v43)) {
          goto LABEL_27;
        }
        uint64_t v45 = v40;
        if (v39[3] < v44)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, 1);
          uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          if ((v45 & 1) != (v47 & 1)) {
            goto LABEL_30;
          }
          long long v41 = v46;
        }
        uint64_t v48 = (void *)*a5;
        if (v45)
        {
          uint64_t v49 = *(_DWORD *)(v48[7] + 4 * v41);
          swift_bridgeObjectRelease();
          if (__CFADD__(v49, v33)) {
            goto LABEL_29;
          }
          *(_DWORD *)(v48[7] + 4 * v41) = v49 + v33;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          uint64_t v34 = (uint64_t *)(v48[6] + 16 * v41);
          *uint64_t v34 = v31;
          v34[1] = v32;
          *(_DWORD *)(v48[7] + 4 * v41) = v33;
          uint64_t v35 = v48[2];
          uint64_t v26 = __OFADD__(v35, 1);
          uint64_t v36 = v35 + 1;
          if (v26) {
            goto LABEL_28;
          }
          v48[2] = v36;
        }
        BOOL v31 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v32 = v37;
        char v33 = v38;
      }
      while (v37);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  BOOL v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    uint64_t v15 = v20;
    char v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v23 = *(_DWORD *)(v22[7] + 4 * v15);
    swift_bridgeObjectRelease();
    if (__CFADD__(v23, v12))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_DWORD *)(v22[7] + 4 * v15) = v23 + v12;
    goto LABEL_14;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  void *v48;
  int v49;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8) {
    goto LABEL_26;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  Swift::UInt32 v13 = (void *)*a5;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  unint64_t v16 = v13[2];
  char v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  BOOL v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      char v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      char v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v24 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v24 = v10;
    v24[1] = v11;
    *(_DWORD *)(v22[7] + 4 * v15) = v12;
    uint64_t v25 = v22[2];
    uint64_t v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v22[2] = v27;
LABEL_14:
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if (v29)
    {
      BOOL v31 = v28;
      uint64_t v32 = v29;
      char v33 = v30;
      do
      {
        long long v39 = (void *)*a5;
        long long v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
        uint64_t v42 = v39[2];
        char v43 = (v40 & 1) == 0;
        uint64_t v44 = v42 + v43;
        if (__OFADD__(v42, v43)) {
          goto LABEL_27;
        }
        uint64_t v45 = v40;
        if (v39[3] < v44)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, 1);
          uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          if ((v45 & 1) != (v47 & 1)) {
            goto LABEL_30;
          }
          long long v41 = v46;
        }
        uint64_t v48 = (void *)*a5;
        if (v45)
        {
          uint64_t v49 = *(_DWORD *)(v48[7] + 4 * v41);
          swift_bridgeObjectRelease();
          if (__CFADD__(v33, v49)) {
            goto LABEL_29;
          }
          *(_DWORD *)(v48[7] + 4 * v41) = v33 + v49;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          uint64_t v34 = (uint64_t *)(v48[6] + 16 * v41);
          *uint64_t v34 = v31;
          v34[1] = v32;
          *(_DWORD *)(v48[7] + 4 * v41) = v33;
          uint64_t v35 = v48[2];
          uint64_t v26 = __OFADD__(v35, 1);
          uint64_t v36 = v35 + 1;
          if (v26) {
            goto LABEL_28;
          }
          v48[2] = v36;
        }
        BOOL v31 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v32 = v37;
        char v33 = v38;
      }
      while (v37);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  BOOL v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    uint64_t v15 = v20;
    char v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v23 = *(_DWORD *)(v22[7] + 4 * v15);
    swift_bridgeObjectRelease();
    if (__CFADD__(v12, v23))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_DWORD *)(v22[7] + 4 * v15) = v12 + v23;
    goto LABEL_14;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  double result = *(double *)(a1 + 16);
  *(double *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = v2;
  return result;
}

BOOL specialized static _DisplayList_StableIdentity.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    return a1[1].i32[1] == a2[1].i32[1];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StrongHash and conformance StrongHash()
{
  unint64_t result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StrongHash and conformance StrongHash;
  if (!lazy protocol witness table cache variable for type StrongHash and conformance StrongHash)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrongHash and conformance StrongHash);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<_DisplayList_StableIdentity.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _DisplayList_StableIdentity.CodingKeys and conformance _DisplayList_StableIdentity.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA6FE70, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for External<_DisplayList_StableIdentityScope>()
{
  if (!lazy cache variable for type metadata for External<_DisplayList_StableIdentityScope>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<_DisplayList_StableIdentityScope>);
    }
  }
}

uint64_t specialized _DisplayList_StableIdentity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1752392040 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6169726573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

double sub_245AF7C5C@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  uint64_t v9 = *a1;
  int v8 = v4;
  _DisplayList_StableIdentityMap.subscript.getter((unint64_t)&v8, (uint64_t)&v10);
  uint64_t v5 = v11;
  char v6 = v12;
  double result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(void *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 24) = v6;
  return result;
}

unint64_t sub_245AF7CBC(long long *a1, uint64_t a2, Swift::UInt32 *a3)
{
  Swift::UInt32 v3 = *a3;
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  long long v8 = *a1;
  uint64_t v9 = v4;
  char v10 = v5;
  Swift::UInt32 v7 = v3;
  return _DisplayList_StableIdentityMap.subscript.setter((uint64_t)&v8, &v7);
}

uint64_t sub_245AF7D10()
{
  return 0;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentity()
{
  return &type metadata for _DisplayList_StableIdentity;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentityMap()
{
  return &type metadata for _DisplayList_StableIdentityMap;
}

uint64_t type metadata accessor for _DisplayList_StableIdentityRoot()
{
  return self;
}

uint64_t method lookup function for _DisplayList_StableIdentityRoot(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _DisplayList_StableIdentityRoot);
}

uint64_t dispatch thunk of _DisplayList_StableIdentityRoot.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for _DisplayList_StableIdentityScope()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy44_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for _DisplayList_StableIdentityScope(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DisplayList_StableIdentityScope(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DisplayList_StableIdentityScope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DisplayList_StableIdentityScope()
{
  return &type metadata for _DisplayList_StableIdentityScope;
}

unsigned char *storeEnumTagSinglePayload for _DisplayList_StableIdentity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245AF8098);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for _DisplayList_StableIdentity.CodingKeys()
{
  return &unk_26FA6FE70;
}

uint64_t outlined init with copy of NamedImage.VectorKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NamedImage.VectorKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NamedImage.VectorKey(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NamedImage.VectorKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type External<_DisplayList_StableIdentityScope> and conformance External<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static PrimitiveCustomHoverContextEffect._makeCustomHoverEffect(effect:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(unint64_t *))
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  unsigned int v23 = *a1;
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  int v24 = *(_DWORD *)(a2 + 32);
  int v26 = *(_DWORD *)(a2 + 8);
  int v27 = *(_DWORD *)(a2 + 36);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  int v8 = *(_DWORD *)(a2 + 84);
  int v28 = *(_DWORD *)(a2 + 80);
  Swift::UInt32 v9 = ++lastIdentity;
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  int v11 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  unint64_t v33 = __PAIR64__(v23, v9);
  int v34 = v8;
  int v35 = v11;
  uint64_t v31 = type metadata accessor for ApplyPrimitiveCustomHoverContextEffect();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<HoverEffectContext>, (uint64_t)&type metadata for HoverEffectContext, MEMORY[0x263F28898]);
  int v12 = v24 | 0x20;
  uint64_t v13 = *(void *)(a2 + 24);
  long long v25 = *(_OWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 72);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v30, v31, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  unsigned int v17 = v46;
  swift_beginAccess();
  unint64_t v33 = __PAIR64__(*(_DWORD *)(v5 + 16), v17);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  int v18 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v19 = MEMORY[0x263F8EE78];
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = v19;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_WORD *)(v21 + 80) = 256;
  *(void *)(v21 + 88) = v20;
  swift_release();
  unint64_t v33 = v4;
  int v34 = v26;
  uint64_t v36 = v21;
  uint64_t v37 = v13;
  int v38 = v12;
  int v39 = v27;
  uint64_t v40 = v6;
  uint64_t v41 = v7;
  long long v42 = v25;
  uint64_t v43 = v14;
  int v44 = v28;
  unsigned int v45 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a3(&v33);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void *PrimitiveCustomHoverContextEffect.systemHoverEffect.getter@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(a1 + 24))(&v5);
  BOOL v4 = (v5 & 1) == 0;
  if ((v5 & 0xFE) == 2) {
    BOOL v4 = 1;
  }
  *a2 = 3;
  a2[1] = v4;
  return result;
}

uint64_t ApplyPrimitiveCustomHoverContextEffect.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *v2;
  uint64_t Value = AGGraphGetValue();
  char v11 = *(unsigned char *)(Value + 8);
  uint64_t v12 = *(void *)(Value + 16);
  char v13 = *(unsigned char *)(Value + 24);
  char v14 = *(unsigned char *)(Value + 25);
  char v15 = *(unsigned char *)(Value + 26);
  uint64_t v29 = *(void *)Value;
  char v30 = v11;
  uint64_t v31 = v12;
  char v32 = v13;
  char v33 = v14;
  char v34 = v15;
  uint64_t v16 = AGGraphGetValue();
  unsigned int v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v8, v16, v5);
  int v28 = v9;
  uint64_t v18 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t *, int *, uint64_t, uint64_t))(v18 + 16))(&v29, &v28, v5, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v8, v5);
  uint64_t v20 = AGGraphGetValue();
  v17(v8, v20, v5);
  (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(v18 + 24))(&v28, v5, v18);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v8, v5);
  if (v28 == 3) {
    char v22 = v34;
  }
  else {
    char v22 = v28 | v34;
  }
  char v23 = v30;
  uint64_t v24 = v31;
  char v25 = v32;
  char v26 = v33;
  *(void *)a2 = v29;
  *(unsigned char *)(a2 + 8) = v23;
  *(void *)(a2 + 16) = v24;
  *(unsigned char *)(a2 + 24) = v25;
  *(unsigned char *)(a2 + 25) = v26;
  *(unsigned char *)(a2 + 26) = v22 & 1;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance ApplyPrimitiveCustomHoverContextEffect<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(_WORD *)(a1 + 24) = 2;
}

uint64_t type metadata accessor for ApplyPrimitiveCustomHoverContextEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of PrimitiveCustomHoverContextEffect.updateContext(_:identity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PrimitiveCustomHoverContextEffect.makeContextValue()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t base witness table accessor for _AttributeBody in ApplyPrimitiveCustomHoverContextEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t DefaultAnimation.velocity<A>(value:time:context:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  char v9 = *((unsigned char *)a2 + 16);
  char v10 = *((unsigned char *)a2 + 17);
  if (one-time initialization token for base != -1) {
    swift_once();
  }
  v12[0] = v7;
  v12[1] = v8;
  char v13 = v9;
  char v14 = v10;
  return Animation.velocity<A>(value:time:context:)(a1, (uint64_t)v12, static DefaultAnimation.base, a3, a4);
}

uint64_t DefaultAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for base != -1) {
    swift_once();
  }
  uint64_t v10 = static DefaultAnimation.base;

  return Animation.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, v10, a4, a5);
}

uint64_t DefaultAnimation.function.getter()
{
  if (one-time initialization token for base != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static DefaultAnimation.base + 96))();
}

uint64_t static DefaultAnimation.== infix(_:_:)()
{
  return 1;
}

Swift::Int DefaultAnimation.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for InternalCustomAnimation.function.getter in conformance DefaultAnimation()
{
  if (one-time initialization token for base != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)static DefaultAnimation.base + 96))();
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance DefaultAnimation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return DefaultAnimation.velocity<A>(value:time:context:)(a1, a2, a3, a4);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance DefaultAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DefaultAnimation.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a4, a5) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DefaultAnimation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance DefaultAnimation()
{
  return 7;
}

ValueMetadata *type metadata accessor for DefaultAnimation()
{
  return &type metadata for DefaultAnimation;
}

uint64_t ForEachSectionCollection.init<A>(subviewOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v29 = a1;
  uint64_t v31 = a4;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  char v34 = a8;
  uint64_t v30 = *(void *)(a5 - 8);
  uint64_t v13 = v30;
  MEMORY[0x270FA5388](a1);
  char v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection();
  unint64_t v17 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  uint64_t v37 = &type metadata for SectionCollection;
  int v38 = &type metadata for SectionConfiguration.ID;
  uint64_t v39 = a4;
  unint64_t v40 = v16;
  unint64_t v41 = v17;
  uint64_t v18 = type metadata accessor for ForEach();
  uint64_t v36 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v37 = (ValueMetadata *)a5;
  int v38 = (ValueMetadata *)v18;
  uint64_t v39 = a7;
  unint64_t v40 = WitnessTable;
  type metadata accessor for GroupSectionsOfContent();
  uint64_t v20 = type metadata accessor for Group();
  double v21 = MEMORY[0x270FA5388](v20);
  char v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, a5, v21);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v31;
  v24[3] = a5;
  v24[4] = v28;
  v24[5] = a7;
  uint64_t v25 = v33;
  v24[6] = v32;
  v24[7] = v25;
  swift_retain();
  Group.init<A, B>(sections:transform:)((uint64_t)v15, (uint64_t)partial apply for closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:), (uint64_t)v24, a5, v18, a7, WitnessTable);
  uint64_t v35 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v26 = AnyView.init<A>(_:)((uint64_t)v23, v20);
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, a5);
  *char v34 = v26;
  return result;
}

uint64_t sub_245AF8F84()
{
  return AnyHashable.init<A>(_:)();
}

__n128 ForEach.init<A>(sectionOf:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a5 - 8);
  double v17 = MEMORY[0x270FA5388](a1);
  uint64_t v19 = (char *)&KeyPath - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  swift_retain();
  ForEachSectionCollection.init<A>(subviewOf:content:)((uint64_t)v19, a2, a3, a4, a5, a6, a7, &v26);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = type metadata accessor for ForEachSectionCollection();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  ForEach.init(_:idGenerator:content:)((uint64_t)&v26, &KeyPath, a2, a3, v21, (uint64_t)&v27);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a5);
  uint64_t v22 = v28;
  uint64_t v23 = v30;
  __n128 result = v29;
  *(_OWORD *)a8 = v27;
  *(void *)(a8 + 16) = v22;
  *(__n128 *)(a8 + 24) = result;
  *(void *)(a8 + 40) = v23;
  return result;
}

uint64_t closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v28 = *a1;
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  unint64_t v14 = lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection();
  unint64_t v15 = lazy protocol witness table accessor for type SectionConfiguration and conformance SectionConfiguration();
  swift_bridgeObjectRetain();
  swift_retain();
  ForEach<>.init(_:content:)((uint64_t)&v28, (uint64_t)partial apply for closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:), (uint64_t)v13, (uint64_t)&type metadata for SectionCollection, (uint64_t)&type metadata for SectionConfiguration.ID, a4, v14, a6, (uint64_t)&v24, v15);
  long long v20 = v24;
  uint64_t v21 = v25;
  unint64_t v22 = v26;
  long long v23 = v27;
  unint64_t v16 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  *(void *)&long long v28 = &type metadata for SectionCollection;
  *((void *)&v28 + 1) = &type metadata for SectionConfiguration.ID;
  uint64_t v29 = a4;
  unint64_t v30 = v14;
  *(void *)&long long v31 = v16;
  uint64_t v17 = type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v20, v17, WitnessTable);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v24 = v28;
  uint64_t v25 = v29;
  unint64_t v26 = v30;
  long long v27 = v31;
  static ViewBuilder.buildExpression<A>(_:)(&v24, v17, WitnessTable);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v10, a4, a6);
  unint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, a4);
  static ViewBuilder.buildExpression<A>(_:)(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a4);
}

void ForEachSectionCollection.startIndex.getter()
{
}

void ForEachSectionCollection.endIndex.getter()
{
}

void ForEachSectionCollection.subscript.getter()
{
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ForEachSectionCollection<A>()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void type metadata accessor for Range<Int>()
{
  if (!lazy cache variable for type metadata for Range<Int>)
  {
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E068](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E078](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ForEachSectionCollection<A>()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachSectionCollection<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ForEachSectionCollection<A>()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void protocol witness for Collection.startIndex.getter in conformance ForEachSectionCollection<A>()
{
}

void protocol witness for Collection.endIndex.getter in conformance ForEachSectionCollection<A>()
{
}

void protocol witness for Collection.subscript.read in conformance ForEachSectionCollection<A>(void **a1)
{
  *a1 = malloc(0x28uLL);
  ForEachSectionCollection.subscript.read();
}

void (*sub_245AF9A5C(uint64_t a1))(void *a1)
{
  *(void *)(v1 + 32) = a1;
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void ForEachSectionCollection.subscript.read()
{
}

uint64_t protocol witness for Collection.subscript.getter in conformance ForEachSectionCollection<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachSectionCollection<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance ForEachSectionCollection<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  __n128 result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachSectionCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachSectionCollection<A>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

unint64_t lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

uint64_t sub_245AF9D44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(void *a1)
{
  return closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(uint64_t a1)
{
  return closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(a1, v1[6], v1[7], v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type SectionConfiguration and conformance SectionConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration;
  if (!lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration);
  }
  return result;
}

uint64_t (*EnvironmentValues.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = EnvironmentValues.subscript.getter();
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v3;

  a1[1] = a3;
  a1[2] = v3;
  *a1 = EnvironmentValues.subscript.getter();
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v3;

  a1[1] = a3;
  a1[2] = v3;
  *a1 = specialized EnvironmentValues.subscript.getter();
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v3;

  a1[1] = a3;
  a1[2] = v3;
  *a1 = EnvironmentValues.subscript.getter();
  return EnvironmentValues.subscript.modify;
}

{
  uint64_t v3;

  a1[1] = a3;
  a1[2] = v3;
  *a1 = EnvironmentValues.subscript.getter();
  return EnvironmentValues.subscript.modify;
}

uint64_t EnvironmentValues.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_unknownObjectRetain();
    specialized EnvironmentValues.subscript.setter(v3);
    swift_unknownObjectRelease();
  }
  else
  {
    specialized EnvironmentValues.subscript.setter(v2);
  }

  return swift_unknownObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_unknownObjectRetain();
    specialized EnvironmentValues.subscript.setter(v3);
    swift_unknownObjectRelease();
  }
  else
  {
    specialized EnvironmentValues.subscript.setter(v2);
  }

  return swift_unknownObjectRelease();
}

uint64_t static EnvironmentObjectKey.defaultValue.getter()
{
  return 0;
}

void EnvironmentObjectKey.hash(into:)(int a1, uint64_t a2)
{
}

uint64_t static EnvironmentObjectKey.== infix(_:_:)()
{
  return 1;
}

Swift::Int EnvironmentObjectKey.hashValue.getter(uint64_t a1)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EnvironmentObjectKey<A>(uint64_t a1)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance EnvironmentObjectKey<A>(int a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentObjectKey<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  specialized EnvironmentObjectKey.hash(into:)((int)&v4, *(void *)(a2 + 16));
  return Hasher._finalize()();
}

void specialized EnvironmentObjectKey.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int specialized EnvironmentObjectKey.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in EnvironmentObjectKey<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245AFA1C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245AFA210()
{
  return 8;
}

void *sub_245AFA21C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_245AFA228@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245AFA274()
{
  return 8;
}

uint64_t UnsafeMutablePointer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 40))(a2, a1);
}

uint64_t (*UnsafeMutablePointer.subscript.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t static UnsafePointer.null.getter(uint64_t a1)
{
  return ~*(_DWORD *)(*(void *)(a1 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
}

unint64_t UnsafeBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeBufferPointer.startAddress.getter(a1, a2, a3, MEMORY[0x263F8D228]);
}

unint64_t UnsafeMutableBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeBufferPointer.startAddress.getter(a1, a2, a3, MEMORY[0x263F8D900]);
}

unint64_t UnsafeBufferPointer.startAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t result = a4();
  if (!result) {
    return ~*(_DWORD *)(*(void *)(a3 - 8) + 80) | 0xFFFFFFFFFFFFFF00;
  }
  return result;
}

uint64_t sub_245AFA3B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(a3 + a2 - 8) - 8) + 16))(a4, *a1);
}

uint64_t sub_245AFA3E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(*(void *)(a4 + a3 - 8) - 8) + 24))(*a2, a1);
}

uint64_t sub_245AFA424()
{
  return 8;
}

void *sub_245AFA430(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *static AccessibilityProperties.ActivationPointKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ActivationPointKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityActivationPointStorage;
}

uint64_t AccessibilityProperties.activationPointStorage.getter@<X0>(int8x16_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.activationPointStorage : AccessibilityProperties@<D0>(int8x16_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v6);
  swift_bridgeObjectRelease();
  uint64_t v3 = v7;
  double result = *(double *)v6[0].i64;
  int8x16_t v5 = v6[1];
  *a1 = v6[0];
  a1[1] = v5;
  a1[2].i64[0] = v3;
  return result;
}

uint64_t AccessibilityProperties.activationPointStorage.setter(uint64_t a1)
{
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

int8x16_t specialized AccessibilityProperties.subscript.getter@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v15);
    uint64_t v6 = v16.i64[1];
    uint64_t v7 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, v16.i64[1]);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage, v8);
  int v9 = swift_dynamicCast();
  uint64_t v10 = v17;
  if (v9) {
    unint64_t v11 = -1;
  }
  else {
    unint64_t v11 = 0;
  }
  int8x16_t v12 = (int8x16_t)vdupq_n_s64(v11);
  if (!v9) {
    uint64_t v10 = 0;
  }
  int8x16_t result = vandq_s8(v15, v12);
  int8x16_t v14 = vandq_s8(v16, v12);
  *a2 = result;
  a2[1] = v14;
  a2[2].i64[0] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.getter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, type metadata accessor for AccessibilityChartDescriptorStorage?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    unint64_t v4 = v9;
    char v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for [AccessibilityCustomContentEntry], (uint64_t)&type metadata for AccessibilityCustomContentEntry, MEMORY[0x263F8D488]);
  if (swift_dynamicCast()) {
    return v8[0];
  }
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v6 = static AccessibilityProperties.CustomContentListKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    unint64_t v4 = v10;
    char v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AXAutomationType?(0);
  uint64_t v6 = swift_dynamicCast();
  uint64_t v7 = v9;
  if (!v6) {
    return 0;
  }
  return v7;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.HintsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    unint64_t v4 = v9;
    char v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, MEMORY[0x263F8D488]);
  if (swift_dynamicCast()) {
    return v8[0];
  }
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v6 = static AccessibilityProperties.HintsKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, (uint64_t)&type metadata for AccessibilityProperties.InputLabelsKey, (void (*)(void))type metadata accessor for [Text]?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    unint64_t v4 = v10;
    char v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, v6);
  uint64_t v7 = swift_dynamicCast();
  int8x16_t result = 0;
  if (v7) {
    return v9;
  }
  return result;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v10);
    unint64_t v4 = v11;
    char v5 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v13, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x263F8D538], v6);
  uint64_t v7 = swift_dynamicCast();
  uint64_t v8 = v10;
  if (!v7) {
    return 0;
  }
  return v8;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  void v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16)
    && (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    unint64_t v4 = v9;
    char v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, (uint64_t)&type metadata for AccessibilityHeadingLevel, v6);
  if (swift_dynamicCast()) {
    return LOBYTE(v8[0]);
  }
  else {
    return 7;
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, v8);
  uint64_t result = swift_dynamicCast();
  char v10 = v11[0];
  if (!result) {
    char v10 = 2;
  }
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  char v10;
  void v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityTextContentType?, (uint64_t)&type metadata for AccessibilityTextContentType, v8);
  uint64_t result = swift_dynamicCast();
  char v10 = v11[0];
  if (!result) {
    char v10 = 8;
  }
  *a2 = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes?, (uint64_t)&type metadata for AccessibilityCustomAttributes, v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v11[0];
  if (!result) {
    uint64_t v10 = 0;
  }
  *a2 = v10;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  long long *v9;
  uint64_t v10;
  uint64_t v11;
  void v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TraitsKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v12);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    int v9 = (long long *)v12;
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 1;
    if (one-time initialization token for defaultValue != -1) {
      uint64_t result = swift_once();
    }
    int v9 = &static AccessibilityProperties.TraitsKey.defaultValue;
  }
  unint64_t v11 = *(void *)v9;
  uint64_t v10 = *((void *)v9 + 1);
  *a2 = v11;
  a2[1] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, v8);
  if (swift_dynamicCast())
  {
    _ViewInputs.base.modify(v13, v9);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v13, (uint64_t)v11);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v11, (uint64_t)v12);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v12);
  }
  return outlined init with take of AccessibilityActivationPointStorage?((uint64_t)v12, a2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.IdentifierKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    __swift_project_boxed_opaque_existential_1(v13, v15);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityIdentifierStorage?, (uint64_t)&type metadata for AccessibilityIdentifierStorage, v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v13[0];
  unint64_t v11 = v13[1];
  uint64_t v12 = v14;
  if (!result)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.LabelKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v12);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(&v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, (uint64_t)&type metadata for AccessibilityLabelStorage, v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v12;
  unint64_t v11 = v13;
  if (!result)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v11;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void v18[3];
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];

  type metadata accessor for Locale?(0, &lazy cache variable for type metadata for Locale??, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18[-1] - v5;
  if (*(void *)(a1 + 16)
    && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.LocaleKey),
        (v8 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v7, (uint64_t)v18);
    uint64_t v9 = v19;
    uint64_t v10 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v21, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for Locale?(0);
  uint64_t v12 = v11;
  uint64_t v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  if (v13)
  {
    v14(v6, 0, 1, v12);
    return outlined init with take of LinkDestination.Configuration?((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    v14(v6, 1, 1, v12);
    int8x16_t v16 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Locale??, (uint64_t)type metadata accessor for Locale?, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void v18[3];
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];

  type metadata accessor for Locale?(0, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18[-1] - v5;
  if (*(void *)(a1 + 16)
    && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey),
        (v8 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v7, (uint64_t)v18);
    uint64_t v9 = v19;
    uint64_t v10 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v21, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for LinkDestination.Configuration?(0);
  uint64_t v12 = v11;
  uint64_t v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  if (v13)
  {
    v14(v6, 0, 1, v12);
    return outlined init with take of LinkDestination.Configuration?((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  }
  else
  {
    v14(v6, 1, 1, v12);
    int8x16_t v16 = type metadata accessor for LinkDestination.Configuration(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t)type metadata accessor for LinkDestination.Configuration?, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v5, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v13, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  a3(0);
  if (swift_dynamicCast()) {
    return v10[0];
  }
  else {
    return 0;
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ValueKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    uint64_t v6 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, v8);
  if (swift_dynamicCast()) {
    return outlined init with take of AccessibilityActivationPointStorage?((uint64_t)&v10, (uint64_t)a2, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
  }
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  uint64_t v13 = 1;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  return outlined destroy of AccessibilityValueStorage??((uint64_t)&v10);
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.VisibilityKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v11);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(&v11, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    int v9 = v11;
    int v10 = HIDWORD(v11);
  }
  else
  {
    uint64_t v11 = 0;
    char v12 = 1;
    if (one-time initialization token for defaultValue != -1) {
      uint64_t result = swift_once();
    }
    int v9 = static AccessibilityProperties.VisibilityKey.defaultValue;
    int v10 = HIDWORD(static AccessibilityProperties.VisibilityKey.defaultValue);
  }
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1)
{
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v11, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  uint64_t v2 = v11[0];
  uint64_t v3 = v11[1];
  uint64_t v4 = v11[2];
  uint64_t v5 = v11[3];
  uint64_t v6 = v11[4];
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v12, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  if (v13)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    void v10[3] = v7;
    v10[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    uint64_t v8 = (void *)swift_allocObject();
    v10[0] = v8;
    _OWORD v8[2] = v2;
    v8[3] = v3;
    v8[4] = v4;
    v8[5] = v5;
    v8[6] = v6;
    return specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ActivationPointKey, (uint64_t)v10);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  void v6[5];

  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = static AccessibilityProperties.CustomContentListKey.defaultValue;
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>();
    v6[3] = v5;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.CustomContentListKey);
  }
}

{
  uint64_t v2;
  void v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>, &lazy cache variable for type metadata for AccessibilityCustomAttributes?, (uint64_t)&type metadata for AccessibilityCustomAttributes, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v4[3] = v2;
    v4[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.CustomAttributesKey, (uint64_t)v4);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void v6[5];
  unsigned char __src[312];
  unsigned char v8[312];
  unsigned char v9[312];
  unsigned char v10[320];

  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v8, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined init with take of AccessibilityActivationPointStorage?((uint64_t)v8, (uint64_t)v10, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v9, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg((uint64_t)v9) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey, (uint64_t)__src);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v6[3] = v3;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = (void *)(v4 + 16);
    v6[0] = v4;
    outlined init with take of AccessibilityActivationPointStorage?((uint64_t)v10, (uint64_t)__src, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    memcpy(v5, __src, 0x138uLL);
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.DataSeriesConfigurationKey);
  }
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  void v6[5];

  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = static AccessibilityProperties.HintsKey.defaultValue;
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.HintsKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[Text]>();
    v6[3] = v5;
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.HintsKey);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.InputLabelsKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<[Text]?>);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10[5];

  type metadata accessor for Locale?(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Locale?(a1, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for Locale();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.LocaleKey, (uint64_t)v10);
    outlined destroy of Locale?(a1);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    outlined destroy of Locale?((uint64_t)v4);
    type metadata accessor for Locale?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Locale?>, (uint64_t (*)(uint64_t))type metadata accessor for Locale?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    void v10[3] = v7;
    v10[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
    outlined init with copy of Locale?(a1, (uint64_t)boxed_opaque_existential_1);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.LocaleKey);
    return outlined destroy of Locale?(a1);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10[5];

  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v10[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LinkDestination.Configuration?(a1, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey, (uint64_t)v10);
    outlined destroy of LinkDestination.Configuration?(a1);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    outlined destroy of LinkDestination.Configuration?((uint64_t)v4);
    type metadata accessor for Locale?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    void v10[3] = v7;
    v10[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
    outlined init with copy of LinkDestination.Configuration?(a1, (uint64_t)boxed_opaque_existential_1);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.LinkDestinationKey);
    return outlined destroy of LinkDestination.Configuration?(a1);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t *v5;
  unint64_t (*v6)();
  uint64_t v7;
  uint64_t (*v8)(void);
  void v10[6];

  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v10);
  if (v10[5])
  {
    uint64_t v2 = MEMORY[0x263F8D8F0];
    outlined destroy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    void v10[3] = v3;
    v10[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v10[0] = swift_allocObject();
    outlined init with copy of AccessibilityValueStorage?(a1, v10[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.ValueKey);
    uint64_t v4 = (void *)a1;
    uint64_t v5 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    uint64_t v6 = (unint64_t (*)())&type metadata for AccessibilityValueStorage;
    uint64_t v7 = v2;
    uint64_t v8 = (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?;
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ValueKey, (uint64_t)v10);
    outlined destroy of AccessibilityValueStorage?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);
    uint64_t v5 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?;
    uint64_t v6 = type metadata accessor for AnyAccessibilityPropertiesEntry;
    uint64_t v7 = MEMORY[0x263F8D8F0];
    uint64_t v8 = (uint64_t (*)(void))type metadata accessor for Locale?;
    uint64_t v4 = v10;
  }
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (uint64_t)v5, (uint64_t)v6, v7, v8);
}

uint64_t specialized AccessibilityProperties.subscript.setter(char a1)
{
  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind, (uint64_t)v4);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v5 = v3;
    uint64_t v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.ChildBehaviorKind);
  }
}

{
  uint64_t v3;
  unsigned char v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  if (a1 == 8)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey, (uint64_t)v4);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextContentType?>, &lazy cache variable for type metadata for AccessibilityTextContentType?, (uint64_t)&type metadata for AccessibilityTextContentType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v5 = v3;
    uint64_t v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TextContentTypeKey);
  }
}

{
  uint64_t v3;
  unsigned char v4[24];
  uint64_t v5;
  _UNKNOWN **v6;

  if (a1 == 7)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey, (uint64_t)v4);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityHeadingLevel?>, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, (uint64_t)&type metadata for AccessibilityHeadingLevel, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v5 = v3;
    uint64_t v6 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TextHeadingLevelKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, char a2)
{
  if (a2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey, (uint64_t)&v5);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)&v5, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for Locale?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AXAutomationType?>, (uint64_t (*)(uint64_t))type metadata accessor for AXAutomationType?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v7 = v3;
    uint64_t v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    uint64_t v5 = a1;
    char v6 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v5, (uint64_t)&type metadata for AccessibilityProperties.AutomationTypeKey);
  }
}

{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _UNKNOWN **v9;

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, (uint64_t)&type metadata for AccessibilityLabelStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v8 = v4;
    int v9 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    char v6 = a1;
    uint64_t v7 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, (uint64_t)&type metadata for AccessibilityProperties.LabelKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.LabelKey, (uint64_t)&v6);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)&v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _UNKNOWN **v8;

  if (a2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey, (uint64_t)&v5);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)&v5, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x263F8D538], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v7 = v3;
    uint64_t v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    uint64_t v5 = a1;
    char v6 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)&v5, (uint64_t)&type metadata for AccessibilityProperties.SortPriorityKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, &lazy cache variable for type metadata for AccessibilityIdentifierStorage?, (uint64_t)&type metadata for AccessibilityIdentifierStorage, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v10 = v6;
    uint64_t v11 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v8[0] = a1;
    v8[1] = a2;
    char v9 = a3;
    return specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)&type metadata for AccessibilityProperties.IdentifierKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.IdentifierKey, (uint64_t)v8);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1)
  {
    v6[3] = a3(0);
    v6[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, a2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v6);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<Text?>, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    void v11[3] = v8;
    v11[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    char v9 = (void *)swift_allocObject();
    v11[0] = v9;
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = a3;
    v9[5] = a4;
    return specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.RoleDescriptionKey, (uint64_t)v11);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  if ((void)static AccessibilityProperties.TraitsKey.defaultValue == a1
    && *((void *)&static AccessibilityProperties.TraitsKey.defaultValue + 1) == a2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TraitsKey, (uint64_t)v7);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for Locale?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    v7[3] = v5;
    v7[4] = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v7[0] = a1;
    v7[1] = a2;
    return specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)&type metadata for AccessibilityProperties.TraitsKey);
  }
}

uint64_t specialized AccessibilityProperties.subscript.setter(unint64_t a1)
{
  int v1 = a1;
  unint64_t v2 = HIDWORD(a1);
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  if (static AccessibilityProperties.VisibilityKey.defaultValue == v1
    && HIDWORD(static AccessibilityProperties.VisibilityKey.defaultValue) == v2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.VisibilityKey, (uint64_t)v6);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for Locale?);
  }
  else
  {
    type metadata accessor for Locale?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    uint64_t v7 = v4;
    uint64_t v8 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    v6[0] = v1;
    v6[1] = v2;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.VisibilityKey);
  }
}

void (*AccessibilityProperties.activationPointStorage.modify(int8x16_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = (int8x16_t *)malloc(0x80uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 5;
  v3[7].i64[1] = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v4);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.activationPointStorage.modify;
}

void AccessibilityProperties.activationPointStorage.modify(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 10);
  if (a2)
  {
    outlined init with take of AccessibilityActivationPointStorage?(v3, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
    outlined retain of AccessibilityActivationPointStorage?(v2);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
    outlined consume of AccessibilityActivationPointStorage?(v2[10], v2[11], v2[12], v2[13]);
  }
  else
  {
    outlined init with take of AccessibilityActivationPointStorage?(v3, (uint64_t)(v2 + 5), &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
    specialized AccessibilityProperties.subscript.setter((uint64_t)(v2 + 5));
  }

  free(v2);
}

uint64_t *outlined retain of AccessibilityActivationPointStorage?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined copy of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AccessibilityProperties.activationPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v5 = v7.i64[1];
    char v4 = v8;
    uint64_t v6 = v7.i64[0];
    uint64_t result = outlined consume of AccessibilityActivationPointStorage?(v7.i64[0], v7.i64[1], v8, v9);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    char v4 = -1;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t one-time initialization function for valueType()
{
  uint64_t result = type metadata accessor for AccessibilityChartDescriptorStorage();
  static AccessibilityProperties.ChartDescriptorKey.valueType = result;
  return result;
}

uint64_t static AccessibilityProperties.ChartDescriptorKey.valueType.getter()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return static AccessibilityProperties.ChartDescriptorKey.valueType;
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ChartDescriptorKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return static AccessibilityProperties.ChartDescriptorKey.valueType;
}

uint64_t AccessibilityProperties.chartDescriptor.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.chartDescriptor.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

uint64_t (*AccessibilityProperties.chartDescriptor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.chartDescriptor.modify;
}

uint64_t AccessibilityProperties.chartDescriptor.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return specialized AccessibilityProperties.subscript.setter(*a1, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
  }
  uint64_t v2 = swift_retain();
  specialized AccessibilityProperties.subscript.setter(v2, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);

  return swift_release();
}

void *static AccessibilityProperties.ChildBehaviorKind.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ChildBehaviorKind()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityChildBehaviorKind;
}

uint64_t AccessibilityProperties.childBehaviorKind.getter()
{
  return AccessibilityProperties.childBehaviorKind.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.childBehaviorKind.setter(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.childBehaviorKind.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  uint64_t v2 = (char *)(a1 + 1);
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, v2);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.childBehaviorKind.modify;
}

uint64_t AccessibilityProperties.childBehaviorKind.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t static AccessibilityProperties.CustomContentListKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.CustomContentListKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static AccessibilityProperties.CustomContentListKey.defaultValue, a1);
}

uint64_t AccessibilityProperties.customContentList.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t (*AccessibilityProperties.customContentList.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.customContentList.modify;
}

uint64_t AccessibilityProperties.customContentList.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

void *static AccessibilityProperties.CustomAttributesKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.CustomAttributesKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityCustomAttributes;
}

uint64_t AccessibilityProperties.customAttributes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.customAttributes : AccessibilityProperties@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.customAttributes.setter(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.customAttributes.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.customAttributes.modify;
}

uint64_t AccessibilityProperties.customAttributes.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customAttributes.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

void *static AccessibilityProperties.DataSeriesConfigurationKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.DataSeriesConfigurationKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityDataSeriesConfiguration;
}

uint64_t AccessibilityProperties.dataSeriesConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.dataSeriesConfiguration : AccessibilityProperties@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v4);
  swift_bridgeObjectRelease();
  outlined init with take of AccessibilityActivationPointStorage?((uint64_t)v4, (uint64_t)v5, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  return outlined init with take of AccessibilityActivationPointStorage?((uint64_t)v5, a1, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
}

uint64_t AccessibilityProperties.dataSeriesConfiguration.setter(uint64_t a1)
{
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

uint64_t outlined init with take of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AccessibilityActivationPointStorage?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void (*AccessibilityProperties.dataSeriesConfiguration.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x4E8uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 78);
  v3[156] = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v4);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.dataSeriesConfiguration.modify;
}

void AccessibilityProperties.dataSeriesConfiguration.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)*a1 + 624;
  if (a2)
  {
    outlined init with take of AccessibilityActivationPointStorage?((uint64_t)*a1 + 624, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
    outlined init with take of AccessibilityActivationPointStorage?(v3, (uint64_t)v2 + 936, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2 + 936, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration?);
  }
  else
  {
    outlined init with take of AccessibilityActivationPointStorage?((uint64_t)*a1 + 624, (uint64_t)v2 + 312, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2 + 312);
  }

  free(v2);
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of AccessibilityDataSeriesConfiguration?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *static AccessibilityProperties.AutomationTypeKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, (uint64_t (*)(void))type metadata accessor for AXAutomationType);
}

uint64_t AccessibilityProperties.explicitAutomationType.getter()
{
  return AccessibilityProperties.explicitAutomationType.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.explicitAutomationType.setter(uint64_t a1, char a2)
{
  return specialized AccessibilityProperties.subscript.setter(a1, a2 & 1);
}

uint64_t (*AccessibilityProperties.explicitAutomationType.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return AccessibilityProperties.explicitAutomationType.modify;
}

uint64_t AccessibilityProperties.explicitAutomationType.modify(uint64_t a1, uint64_t a2)
{
  return AccessibilityProperties.explicitAutomationType.modify(a1, a2, (uint64_t (*)(void, void))specialized AccessibilityProperties.subscript.setter);
}

void *static AccessibilityProperties.IdentifierKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.IdentifierKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityIdentifierStorage;
}

uint64_t AccessibilityProperties.identifierStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.identifierStorage : AccessibilityProperties@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  char v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

uint64_t AccessibilityProperties.identifierStorage.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t (*AccessibilityProperties.identifierStorage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.identifierStorage.modify;
}

uint64_t AccessibilityProperties.identifierStorage.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  if ((a2 & 1) == 0) {
    return specialized AccessibilityProperties.subscript.setter(*(void *)a1, v2, v4);
  }
  swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v3, v2, v4);

  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityProperties.HintsKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.HintsKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static AccessibilityProperties.HintsKey.defaultValue, a1);
}

uint64_t AccessibilityProperties.hints.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t (*AccessibilityProperties.hints.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.hints.modify;
}

uint64_t AccessibilityProperties.hints.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customContentList.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

uint64_t AccessibilityProperties.customContentList.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

void *static AccessibilityProperties.InputLabelsKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

void protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.InputLabelsKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, MEMORY[0x263F8D488]);
}

uint64_t AccessibilityProperties.inputLabels.getter()
{
  return AccessibilityProperties.chartDescriptor.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.chartDescriptor.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = a1(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t (*AccessibilityProperties.inputLabels.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return AccessibilityProperties.inputLabels.modify;
}

uint64_t AccessibilityProperties.inputLabels.modify(uint64_t *a1, char a2)
{
  return AccessibilityProperties.customAttributes.modify(a1, a2, specialized AccessibilityProperties.subscript.setter);
}

uint64_t AccessibilityProperties.customAttributes.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

void *static AccessibilityProperties.LabelKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LabelKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityLabelStorage;
}

uint64_t AccessibilityProperties.labelStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.labelStorage : AccessibilityProperties@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v5);
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = v6;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t AccessibilityProperties.labelStorage.setter(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t (*AccessibilityProperties.labelStorage.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.labelStorage.modify;
}

uint64_t AccessibilityProperties.labelStorage.modify(uint64_t a1, char a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  if ((a2 & 1) == 0) {
    return specialized AccessibilityProperties.subscript.setter(*(void *)a1, v2);
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v3, v2);

  return swift_bridgeObjectRelease();
}

void *static AccessibilityProperties.LocaleKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LocaleKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, MEMORY[0x263F07690]);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  if (*a3 != -1)
  {
    uint64_t v5 = a4;
    swift_once();
    a4 = v5;
  }

  return a4(0);
}

uint64_t AccessibilityProperties.locale.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.locale.setter(uint64_t a1)
{
  return AccessibilityProperties.locale.setter(a1, (uint64_t (*)(void))type metadata accessor for Locale?, (void (*)(uint64_t, char *, double))outlined init with copy of Locale?, (void (*)(char *))specialized AccessibilityProperties.subscript.setter, outlined destroy of Locale?);
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Locale?(a1, a2, (uint64_t (*)(void))type metadata accessor for Locale?);
}

void (*AccessibilityProperties.locale.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  type metadata accessor for Locale?(0);
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  a1[1] = malloc(v4);
  a1[2] = malloc(v4);
  uint64_t v5 = malloc(v4);
  a1[3] = v5;
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.locale.modify;
}

void AccessibilityProperties.locale.modify(void *a1, char a2)
{
}

void *static AccessibilityProperties.LinkDestinationKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.LinkDestinationKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationTypeKey(a1, a2, &one-time initialization token for valueType, type metadata accessor for LinkDestination.Configuration);
}

uint64_t AccessibilityProperties.linkDestination.getter()
{
  return AccessibilityProperties.locale.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.locale.getter(void (*a1)(uint64_t))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  a1(v2);

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityProperties.locale : AccessibilityProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(char *, char *), void (*a7)(char *), uint64_t (*a8)(char *))
{
  uint64_t v12 = a5(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v20 - v17;
  ((void (*)(uint64_t, char *, double))a6)(a1, (char *)&v20 - v17, v16);
  a6(v18, v14);
  a7(v14);
  return a8(v18);
}

uint64_t AccessibilityProperties.linkDestination.setter(uint64_t a1)
{
  return AccessibilityProperties.locale.setter(a1, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?, (void (*)(uint64_t, char *, double))outlined init with copy of LinkDestination.Configuration?, (void (*)(char *))specialized AccessibilityProperties.subscript.setter, outlined destroy of LinkDestination.Configuration?);
}

uint64_t AccessibilityProperties.locale.setter(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, char *, double), void (*a4)(char *), uint64_t (*a5)(uint64_t))
{
  uint64_t v9 = a2(0);
  double v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  a3(a1, (char *)&v14 - v11, v10);
  a4(v12);
  return a5(a1);
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1)
{
}

uint64_t outlined init with copy of LinkDestination.Configuration?(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Locale?(a1, a2, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of LinkDestination.Configuration?(uint64_t a1)
{
  return outlined destroy of Locale?(a1, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
}

void (*AccessibilityProperties.linkDestination.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  type metadata accessor for LinkDestination.Configuration?(0);
  size_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  a1[1] = malloc(v4);
  a1[2] = malloc(v4);
  uint64_t v5 = malloc(v4);
  a1[3] = v5;
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.linkDestination.modify;
}

void AccessibilityProperties.linkDestination.modify(void *a1, char a2)
{
}

void AccessibilityProperties.locale.modify(void *a1, char a2, void (*a3)(void *, void *), void (*a4)(void *), void (*a5)(void *))
{
  double v10 = (void *)a1[2];
  uint64_t v11 = (void *)a1[3];
  a3(v11, v10);
  uint64_t v12 = (void *)a1[1];
  if (a2)
  {
    a3(v10, v12);
    a4(v12);
    a5(v10);
  }
  else
  {
    a4(v10);
  }
  a5(v11);
  free(v11);
  free(v10);

  free(v12);
}

void *static AccessibilityProperties.RoleDescriptionKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.RoleDescriptionKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for Text;
}

uint64_t AccessibilityProperties.roleDescription.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t key path getter for AccessibilityProperties.roleDescription : AccessibilityProperties@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized AccessibilityProperties.subscript.getter(v2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v9;
  return result;
}

uint64_t key path setter for AccessibilityProperties.roleDescription : AccessibilityProperties(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  outlined copy of Text?(*a1, v2, v3, v4);
  return specialized AccessibilityProperties.subscript.setter(v1, v2, v3, v4);
}

void (*AccessibilityProperties.roleDescription.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityProperties.subscript.getter(v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  v3[1] = v7;
  v3[2] = v9;
  v3[3] = v11;
  return AccessibilityProperties.roleDescription.modify;
}

void AccessibilityProperties.roleDescription.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  if (a2)
  {
    outlined copy of Text?(**a1, v3, v5, v6);
    specialized AccessibilityProperties.subscript.setter(v4, v3, v5, v6);
    outlined consume of Text?(*v2, v2[1], v2[2], v2[3]);
  }
  else
  {
    specialized AccessibilityProperties.subscript.setter(**a1, v3, v5, v6);
  }

  free(v2);
}

void *static AccessibilityProperties.SortPriorityKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

uint64_t protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.SortPriorityKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return MEMORY[0x263F8D538];
}

uint64_t AccessibilityProperties.sortPriority.getter()
{
  return AccessibilityProperties.explicitAutomationType.getter(specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.explicitAutomationType.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = a1(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = a1(v4);
  char v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v7 & 1;
  return result;
}

uint64_t AccessibilityProperties.sortPriority.setter(uint64_t a1, char a2)
{
  return specialized AccessibilityProperties.subscript.setter(a1, a2 & 1);
}

uint64_t (*AccessibilityProperties.sortPriority.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return AccessibilityProperties.sortPriority.modify;
}

uint64_t AccessibilityProperties.sortPriority.modify(uint64_t a1, uint64_t a2)
{
  return AccessibilityProperties.explicitAutomationType.modify(a1, a2, (uint64_t (*)(void, void))specialized AccessibilityProperties.subscript.setter);
}

uint64_t AccessibilityProperties.explicitAutomationType.modify(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void *static AccessibilityProperties.TextContentTypeKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextContentTypeKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityTextContentType;
}

uint64_t AccessibilityProperties.textContentType.getter()
{
  return AccessibilityProperties.childBehaviorKind.getter((void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t AccessibilityProperties.childBehaviorKind.getter(void (*a1)(uint64_t))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  a1(v2);

  return swift_bridgeObjectRelease();
}

uint64_t key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  a1(&v6, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t AccessibilityProperties.textContentType.setter(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.textContentType.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  uint64_t v2 = (char *)(a1 + 1);
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, v2);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.textContentType.modify;
}

uint64_t AccessibilityProperties.textContentType.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(unsigned char *)(a1 + 8));
}

void *static AccessibilityProperties.TextHeadingLevelKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.TextHeadingLevelKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityHeadingLevel;
}

uint64_t AccessibilityProperties.textHeadingLevel.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t (*AccessibilityProperties.textHeadingLevel.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  char v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4;
  return AccessibilityProperties.textHeadingLevel.modify;
}

uint64_t AccessibilityProperties.textHeadingLevel.modify(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t AccessibilityProperties.traits.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.traits : AccessibilityProperties@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  swift_bridgeObjectRelease();
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.traits.setter(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t (*AccessibilityProperties.traits.modify(void *a1))(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.traits.modify;
}

uint64_t AccessibilityProperties.traits.modify(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t AccessibilityProperties.subscript.getter(unsigned __int8 *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v4);
  swift_bridgeObjectRelease();
  if (v1 > 0x3F) {
    return 1;
  }
  if ((v4[0] & (1 << v1)) != 0) {
    return 1;
  }
  return 2 * ((v4[1] & (1 << v1)) == 0);
}

uint64_t AccessibilityProperties.subscript.setter(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a2;
  if (v3 >= 0x40) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 1 << v3;
  }
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v9);
  swift_bridgeObjectRelease();
  specialized AccessibilityNullableOptionSet.subscript.setter(a1, v4);
  uint64_t v6 = v9[0];
  uint64_t v7 = v9[1];

  return specialized AccessibilityProperties.subscript.setter(v6, v7);
}

uint64_t specialized AccessibilityNullableOptionSet.subscript.setter(uint64_t result, uint64_t a2)
{
  if (result != 2)
  {
    uint64_t v5 = v2[1];
    if ((a2 & ~v5) != 0) {
      v2[1] = v5 | a2;
    }
    uint64_t v6 = *v2;
    uint64_t v7 = *v2 & a2;
    if (result)
    {
      if (v7 == a2) {
        return result;
      }
      uint64_t v4 = v6 | a2;
    }
    else
    {
      if (!v7) {
        return result;
      }
      uint64_t v4 = v6 & ~a2;
    }
    goto LABEL_13;
  }
  uint64_t v3 = v2[1];
  if ((v3 & a2) != 0) {
    v2[1] = v3 & ~a2;
  }
  if ((*v2 & a2) != 0)
  {
    uint64_t v4 = *v2 & ~a2;
LABEL_13:
    *uint64_t v2 = v4;
  }
  return result;
}

uint64_t (*AccessibilityProperties.subscript.modify(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, char a2)
{
  *(void *)a1 = v2;
  unsigned __int8 v3 = *a2;
  *(unsigned char *)(a1 + 9) = *a2;
  uint64_t v6 = *v2;
  unsigned __int8 v5 = v3;
  *(unsigned char *)(a1 + 8) = AccessibilityProperties.subscript.getter(&v5);
  return AccessibilityProperties.subscript.modify;
}

uint64_t AccessibilityProperties.subscript.modify(uint64_t a1, char a2)
{
  char v2 = *(unsigned char *)(a1 + 9);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  if (a2)
  {
    char v6 = v2;
    uint64_t v4 = (unsigned __int8 *)&v6;
  }
  else
  {
    char v7 = v2;
    uint64_t v4 = (unsigned __int8 *)&v7;
  }
  return AccessibilityProperties.subscript.setter(v3, v4);
}

uint64_t AccessibilityProperties.subscript.getter(unsigned __int8 *a1, unsigned __int8 a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, v6);
  swift_bridgeObjectRelease();
  if (v3 > 0x3F) {
    return 1;
  }
  if ((v6[0] & (1 << v3)) != 0) {
    return 1;
  }
  return ((v6[1] & (1 << v3)) == 0) & a2;
}

void *static AccessibilityProperties.ValueKey.valueType.getter()
{
  return static AccessibilityProperties.ActivationPointKey.valueType.getter(&one-time initialization token for valueType);
}

void *static AccessibilityProperties.ActivationPointKey.valueType.getter(void *result)
{
  if (*result != -1) {
    return (void *)swift_once();
  }
  return result;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.ValueKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }
  return &type metadata for AccessibilityValueStorage;
}

uint64_t AccessibilityProperties.value.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityProperties.value : AccessibilityProperties(uint64_t a1)
{
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v3);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v3, (uint64_t)v2);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);
}

uint64_t AccessibilityProperties.value.setter(uint64_t a1)
{
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v3);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v3);
  return outlined destroy of AccessibilityValueStorage?(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);
}

void (*AccessibilityProperties.value.modify(void *a1))(uint64_t *a1, char a2)
{
  unint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, v3);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.value.modify;
}

void AccessibilityProperties.value.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 48;
  if (a2)
  {
    outlined init with copy of AccessibilityValueStorage?(*a1, v3);
    outlined init with copy of AccessibilityValueStorage?(v3, (uint64_t)v2 + 96);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v2 + 96);
    uint64_t v4 = MEMORY[0x263F8D8F0];
    outlined destroy of AccessibilityValueStorage?(v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);
    uint64_t v5 = (uint64_t)v2;
    uint64_t v6 = v4;
  }
  else
  {
    outlined init with copy of AccessibilityValueStorage?(*a1, v3);
    specialized AccessibilityProperties.subscript.setter(v3);
    uint64_t v6 = MEMORY[0x263F8D8F0];
    uint64_t v5 = (uint64_t)v2;
  }
  outlined destroy of AccessibilityValueStorage?(v5, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, v6, (uint64_t (*)(void))type metadata accessor for AccessibilityActivationPointStorage?);

  free(v2);
}

uint64_t AccessibilityProperties.visibility.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

double key path getter for AccessibilityProperties.visibility : AccessibilityProperties@<D0>(double *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v4);
  swift_bridgeObjectRelease();
  double result = v4;
  *a1 = v4;
  return result;
}

uint64_t AccessibilityProperties.visibility.setter(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t (*AccessibilityProperties.visibility.modify(uint64_t a1))(unint64_t *a1)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (_DWORD *)a1);
  swift_bridgeObjectRelease();
  return AccessibilityProperties.visibility.modify;
}

uint64_t AccessibilityProperties.visibility.modify(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityActivationPointStorage?(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_245B00640(uint64_t a1)
{
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityActivationPointStorage?, (uint64_t)&type metadata for AccessibilityActivationPointStorage);
  outlined retain of AccessibilityActivationPointStorage?(v2);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

uint64_t sub_245B00690@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_2Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B006A8()
{
  uint64_t v0 = swift_retain();
  return specialized AccessibilityProperties.subscript.setter(v0, (uint64_t)&type metadata for AccessibilityProperties.ChartDescriptorKey, (uint64_t (*)(void))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>);
}

uint64_t sub_245B006F0@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties((void (*)(uint64_t *__return_ptr, uint64_t))specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B0071C(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_245B00744@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_6Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B0075C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_7Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t sub_245B00778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t sub_245B00794(uint64_t a1)
{
  outlined init with take of AccessibilityActivationPointStorage?(a1, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined retain of AccessibilityDataSeriesConfiguration?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration?);
  return specialized AccessibilityProperties.subscript.setter((uint64_t)v2);
}

uint64_t sub_245B007F8@<X0>(uint64_t a1@<X8>)
{
  return key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B00824(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_245B00858(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_bridgeObjectRetain();
  return specialized AccessibilityProperties.subscript.setter(v1, v2, v3);
}

uint64_t sub_245B008A0@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_6Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t keypath_get_6Tm@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = a1(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_245B00908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_7Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t keypath_set_7Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t sub_245B00954@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_2Tm(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B0096C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm(a1, a2, a3, a4, specialized AccessibilityProperties.subscript.setter);
}

uint64_t keypath_set_9Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t sub_245B009BC(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  uint64_t v2 = swift_bridgeObjectRetain();
  return specialized AccessibilityProperties.subscript.setter(v2, v1);
}

uint64_t sub_245B009FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_22Tm(a1, a2, a3, (void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t sub_245B00A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AccessibilityProperties.locale : AccessibilityProperties(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for Locale?, (void (*)(char *, char *))outlined init with copy of Locale?, (void (*)(char *))specialized AccessibilityProperties.subscript.setter, (uint64_t (*)(char *))outlined destroy of Locale?);
}

uint64_t sub_245B00A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_22Tm(a1, a2, a3, (void (*)(uint64_t))specialized AccessibilityProperties.subscript.getter);
}

uint64_t keypath_get_22Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = swift_bridgeObjectRetain();
  a4(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_245B00AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AccessibilityProperties.locale : AccessibilityProperties(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?, (void (*)(char *, char *))outlined init with copy of LinkDestination.Configuration?, (void (*)(char *))specialized AccessibilityProperties.subscript.setter, (uint64_t (*)(char *))outlined destroy of LinkDestination.Configuration?);
}

uint64_t sub_245B00B5C@<X0>(uint64_t a1@<X8>)
{
  return key path getter for AccessibilityProperties.explicitAutomationType : AccessibilityProperties(specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B00B88(uint64_t a1)
{
  return specialized AccessibilityProperties.subscript.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_245B00BB8@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for AccessibilityProperties.childBehaviorKind : AccessibilityProperties((void (*)(uint64_t *__return_ptr, uint64_t))specialized AccessibilityProperties.subscript.getter, a1);
}

uint64_t sub_245B00BE4(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_245B00C0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  char v3 = specialized AccessibilityProperties.subscript.getter(v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_245B00C54(char *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

uint64_t sub_245B00C80(uint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1, a1[1]);
}

uint64_t sub_245B00CAC@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned __int8 v4 = *a2;
  uint64_t v7 = *a1;
  unsigned __int8 v6 = v4;
  uint64_t result = AccessibilityProperties.subscript.getter(&v6);
  *a3 = result;
  return result;
}

uint64_t sub_245B00CF4(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a1;
  unsigned __int8 v5 = *a3;
  return AccessibilityProperties.subscript.setter(v3, &v5);
}

uint64_t sub_245B00D30()
{
  return 0;
}

uint64_t sub_245B00D40@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_245B00D90(unint64_t *a1)
{
  return specialized AccessibilityProperties.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ActivationPointKey()
{
  return &type metadata for AccessibilityProperties.ActivationPointKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ChartDescriptorKey()
{
  return &type metadata for AccessibilityProperties.ChartDescriptorKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ChildBehaviorKind()
{
  return &type metadata for AccessibilityProperties.ChildBehaviorKind;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.CustomContentListKey()
{
  return &type metadata for AccessibilityProperties.CustomContentListKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.CustomAttributesKey()
{
  return &type metadata for AccessibilityProperties.CustomAttributesKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.DataSeriesConfigurationKey()
{
  return &type metadata for AccessibilityProperties.DataSeriesConfigurationKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.AutomationTypeKey()
{
  return &type metadata for AccessibilityProperties.AutomationTypeKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.IdentifierKey()
{
  return &type metadata for AccessibilityProperties.IdentifierKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.HintsKey()
{
  return &type metadata for AccessibilityProperties.HintsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.InputLabelsKey()
{
  return &type metadata for AccessibilityProperties.InputLabelsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LocaleKey()
{
  return &type metadata for AccessibilityProperties.LocaleKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.LinkDestinationKey()
{
  return &type metadata for AccessibilityProperties.LinkDestinationKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.RoleDescriptionKey()
{
  return &type metadata for AccessibilityProperties.RoleDescriptionKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.SortPriorityKey()
{
  return &type metadata for AccessibilityProperties.SortPriorityKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextContentTypeKey()
{
  return &type metadata for AccessibilityProperties.TextContentTypeKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TextHeadingLevelKey()
{
  return &type metadata for AccessibilityProperties.TextHeadingLevelKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.TraitsKey()
{
  return &type metadata for AccessibilityProperties.TraitsKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.ValueKey()
{
  return &type metadata for AccessibilityProperties.ValueKey;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.VisibilityKey()
{
  return &type metadata for AccessibilityProperties.VisibilityKey;
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>()
{
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>)
  {
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityActivationPointStorage?(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_245B011C8()
{
  if (*(void *)(v0 + 56))
  {
    if (*(void *)(v0 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t outlined destroy of AccessibilityValueStorage??(uint64_t a1)
{
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityValueStorage??, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>()
{
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>)
  {
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    unint64_t v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t sub_245B01558()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t outlined destroy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with take of LinkDestination.Configuration?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<[Text]?>(uint64_t a1)
{
}

void type metadata accessor for [Text]?()
{
  if (!lazy cache variable for type metadata for [Text]?)
  {
    type metadata accessor for AccessibilityActivationPointStorage?(255, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]?);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<[Text]>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>)
  {
    type metadata accessor for AccessibilityActivationPointStorage?(255, &lazy cache variable for type metadata for [Text], (uint64_t)&type metadata for Text, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>);
    }
  }
}

void type metadata accessor for AXAutomationType?(uint64_t a1)
{
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_245B017E4()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 136))
    {
      if (*(void *)(v0 + 96))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 128))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v0 + 264))
    {
      if (*(void *)(v0 + 224))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 200), *(void *)(v0 + 208), *(unsigned char *)(v0 + 216));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v0 + 256))
      {
        outlined consume of Text.Storage(*(void *)(v0 + 232), *(void *)(v0 + 240), *(unsigned char *)(v0 + 248));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  return swift_deallocObject();
}

double _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 304) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>(0, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration??, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>)
  {
    type metadata accessor for AccessibilityActivationPointStorage?(255, &lazy cache variable for type metadata for [AccessibilityCustomContentEntry], (uint64_t)&type metadata for AccessibilityCustomContentEntry, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityCustomContentEntry]>);
    }
  }
}

void type metadata accessor for AccessibilityActivationPointStorage?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>(uint64_t a1)
{
}

void type metadata accessor for AccessibilityChartDescriptorStorage?(uint64_t a1)
{
}

uint64_t sub_245B01AE4()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t _CustomHoverEffectInputs.updateContext(_:)(int a1)
{
  *(_DWORD *)(v1 + 84) = a1;
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  int v2 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v5;
  int v7 = *(_DWORD *)(v1 + 32);
  if ((v7 & 0x20) == 0) {
    *(_DWORD *)(v1 + 32) = v7 | 0x20;
  }
  return result;
}

SwiftUI::SystemHoverEffect __swiftcall SystemHoverEffect.init(info:isEnabled:)(SwiftUI::SystemHoverEffect::Info_optional info, Swift::Bool isEnabled)
{
  *int v2 = *(unsigned char *)info.value.style;
  v2[1] = isEnabled;
  result.info = info;
  return result;
}

void specialized static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2)
{
  if (AGTypeGetKind() - 2 < 4)
  {
    static DynamicPropertyCache.fields(of:)(MEMORY[0x263F8E628], (uint64_t)v11);
    uint64_t v4 = v11[0];
    uint64_t v5 = v11[1];
    unsigned __int8 v6 = v12;
    unsigned int v7 = v13;
    outlined retain of _ViewInputs(a2);
    LOBYTE(v11[0]) = v6;
    specialized BodyAccessor.makeBody(container:inputs:fields:)(&v10, &v9, a1, v11, v4, v5, v6 | ((unint64_t)v7 << 32));
  }
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x726576654ELL;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static EmptyHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v5 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v5;
  long long v6 = *(_OWORD *)(a2 + 9);
  long long v13 = *(_OWORD *)(a2 + 7);
  long long v14 = v6;
  return a3(&v8);
}

void EmptyHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance EmptyHoverEffect()
{
}

void CustomHoverEffect<>.body(content:)()
{
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance EmptyHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 259;
}

uint64_t InternalCustomHoverEffect<>.wrappedEffect.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

void static CustomHoverEffect<>.empty.getter()
{
}

uint64_t _CustomHoverEffectInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = *(void *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double _CustomHoverEffectInputs.base.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  uint64_t v7 = a1[4];
  *(void *)(v1 + 24) = a1[3];
  *(void *)(v1 + 32) = v7;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(a1 + 7);
  double result = *((double *)a1 + 9);
  *(double *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 80) = v6;
  return result;
}

uint64_t (*_CustomHoverEffectInputs.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _CustomHoverEffectInputs.context.getter()
{
  return *(unsigned int *)(v0 + 84);
}

double _CustomHoverEffectInputs.makeIndirectOutputs()@<D0>(double *a1@<X8>)
{
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v3);
  *(void *)a1 = v3;
  double result = v4;
  a1[1] = v4;
  return result;
}

double _CustomHoverEffectOutputs.init(base:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  double result = *(double *)(a1 + 8);
  *(double *)(a2 + 8) = result;
  return result;
}

uint64_t _CustomHoverEffectOutputs.base.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = v1[1];
  return swift_bridgeObjectRetain();
}

double _CustomHoverEffectOutputs.base.setter(double *a1)
{
  uint64_t v3 = *(void *)a1;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  double result = a1[1];
  *(double *)(v1 + 8) = result;
  return result;
}

uint64_t (*_CustomHoverEffectOutputs.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance Never()
{
}

void protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v3;
  v5[4] = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  specialized static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(v2, (uint64_t)v5);
}

void SystemHoverEffect.info.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SystemHoverEffect.info.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*SystemHoverEffect.info.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*SystemHoverEffect.isEnabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void SystemHoverEffect.Style.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SystemHoverEffect.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SystemHoverEffect.Style.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SystemHoverEffect.Info.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SystemHoverEffect.Info.style.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*SystemHoverEffect.Info.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::SystemHoverEffect::Info __swiftcall SystemHoverEffect.Info.init(_:)(SwiftUI::SystemHoverEffect::Info result)
{
  *Swift::UInt v1 = *(unsigned char *)result.style;
  return result;
}

BOOL static SystemHoverEffect.Info.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SystemHoverEffect.Resolved.info.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t (*SystemHoverEffect.Resolved.info.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SystemHoverEffect.Resolved.isEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t SystemHoverEffect.Resolved.isEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*SystemHoverEffect.Resolved.isEnabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::SystemHoverEffect::Resolved __swiftcall SystemHoverEffect.Resolved.init(info:isEnabled:)(SwiftUI::SystemHoverEffect::Info info, Swift::Bool isEnabled)
{
  *uint64_t v2 = *(unsigned char *)info.style;
  v2[1] = isEnabled;
  result.info = info;
  return result;
}

uint64_t static SystemHoverEffect.Resolved.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SystemHoverEffect.Resolved(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

SwiftUI::SystemHoverEffect::Resolved __swiftcall SystemHoverEffect.resolve()()
{
  int v2 = *v1;
  unsigned __int8 v3 = v1[1];
  if (v2 == 3) {
    LOBYTE(v2) = 0;
  }
  *uint64_t v0 = v2;
  v0[1] = v3;
  return result;
}

SwiftUI::SystemHoverEffect __swiftcall SystemHoverEffect.merge(with:)(SwiftUI::SystemHoverEffect with)
{
  int v3 = **(unsigned __int8 **)&with.info.value.style;
  char v4 = *(unsigned char *)(*(void *)&with.info.value.style + 1);
  char v5 = v2[1];
  if (v3 == 3) {
    LOBYTE(v3) = *v2;
  }
  *uint64_t v1 = v3;
  v1[1] = v4 & v5 & 1;
  return with;
}

uint64_t EnvironmentValues.hoverEffectContext.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  uint64_t v6 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3, v4, v5);
  swift_release();
  if (v1[1])
  {
    uint64_t v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  return swift_release();
}

double protocol witness for static Rule.initialValue.getter in conformance UpdateEnvironmentCustomHoverEffectContext@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_24619B520;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateEnvironmentCustomHoverEffectContext@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  uint64_t v4 = AGGraphGetValue();
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  if (*(unsigned char *)(v4 + 26)) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  int v9 = *(unsigned __int8 *)(v4 + 24) | (*(unsigned __int8 *)(v4 + 25) << 8) | v8;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(v5, v6, v7, v9);
}

uint64_t protocol witness for Rule.value.getter in conformance ClearCustomHoverEffectContextFromEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(0, 0, 0, 2);
}

uint64_t EnvironmentValues.hoverEffectContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.hoverEffectContext : EnvironmentValues@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v9);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v9);
  }
  swift_release_n();
  uint64_t v5 = v10;
  __int16 v6 = v11;
  char v7 = v12;
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 26) = v7;
  *(_WORD *)(a2 + 24) = v6;
  return result;
}

void (*EnvironmentValues.hoverEffectContext.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HoverEffectContextKey>();
    BloomFilter.init(hashValue:)(v5);
    int v6 = 2;
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find1<A>(_:key:filter:)(v7, v12);
    if (v8)
    {
      long long v9 = *(_OWORD *)(v8 + 72);
      uint64_t v10 = *(void *)(v8 + 88);
      int v6 = *(unsigned __int16 *)(v8 + 96) | (*(unsigned __int8 *)(v8 + 98) << 16);
    }
    else
    {
      uint64_t v10 = 0;
      long long v9 = 0uLL;
    }
    *(_OWORD *)uint64_t v3 = v9;
    v3[2] = v10;
    *((_WORD *)v3 + 12) = v6;
    *((unsigned char *)v3 + 26) = BYTE2(v6);
  }
  swift_release_n();
  return EnvironmentValues.hoverEffectContext.modify;
}

void EnvironmentValues.hoverEffectContext.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[6];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  int v6 = *((unsigned __int16 *)*a1 + 12) | (*((unsigned __int8 *)*a1 + 26) << 16);
  uint64_t v7 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4, v5, v6);
  swift_release();
  if (v2[1])
  {
    uint64_t v8 = *(void *)v1[6];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void protocol witness for CustomHoverEffect.body(content:) in conformance <> ModifiedContent<A, B>()
{
}

void specialized CustomHoverEffect.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CustomHoverEffect<>.body(content:)()
{
}

void type metadata accessor for EnvironmentPropertyKey<HoverEffectContextKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>);
    }
  }
}

_UNKNOWN **associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in EmptyHoverEffect()
{
  return &protocol witness table for Never;
}

_UNKNOWN **associated type witness table accessor for InternalCustomHoverEffect.WrappedEffectType : InternalCustomHoverEffect in EmptyHoverEffect()
{
  return &protocol witness table for EmptyHoverEffect;
}

unint64_t lazy protocol witness table accessor for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style;
  if (!lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemHoverEffect.Style and conformance SystemHoverEffect.Style);
  }
  return result;
}

uint64_t sub_245B02B84(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  __int16 v2 = *((_WORD *)a1 + 12);
  char v3 = *((unsigned char *)a1 + 26);
  long long v5 = *a1;
  uint64_t v6 = v1;
  char v8 = v3;
  __int16 v7 = v2;
  return EnvironmentValues.hoverEffectContext.setter((uint64_t)&v5);
}

uint64_t dispatch thunk of CustomHoverEffect.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t initializeWithCopy for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  return a1;
}

uint64_t assignWithTake for _CustomHoverEffectInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CustomHoverEffectInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _CustomHoverEffectInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _CustomHoverEffectInputs()
{
  return &type metadata for _CustomHoverEffectInputs;
}

void *initializeBufferWithCopyOfBuffer for _CustomHoverEffectOutputs(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _CustomHoverEffectOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

void *assignWithTake for _CustomHoverEffectOutputs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _CustomHoverEffectOutputs()
{
  return &type metadata for _CustomHoverEffectOutputs;
}

uint64_t default associated conformance accessor for InternalCustomHoverEffect.InternalCustomHoverEffect.WrappedEffectType: InternalCustomHoverEffect()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of InternalCustomHoverEffect.systemHoverEffect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InternalCustomHoverEffect.wrappedEffect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for SystemHoverEffect()
{
  return &type metadata for SystemHoverEffect;
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Style()
{
  return &type metadata for SystemHoverEffect.Style;
}

unsigned char *storeEnumTagSinglePayload for SystemHoverEffect.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B03118);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemHoverEffect(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemHoverEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B032B0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Resolved()
{
  return &type metadata for SystemHoverEffect.Resolved;
}

ValueMetadata *type metadata accessor for HoverEffectContextKey()
{
  return &type metadata for HoverEffectContextKey;
}

void *type metadata accessor for ClearCustomHoverEffectContextFromEnvironment()
{
  return &unk_26FA75980;
}

ValueMetadata *type metadata accessor for UpdateEnvironmentCustomHoverEffectContext()
{
  return &type metadata for UpdateEnvironmentCustomHoverEffectContext;
}

unint64_t instantiation function for generic protocol witness table for UpdateEnvironmentCustomHoverEffectContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ClearCustomHoverEffectContextFromEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

void specialized CustomHoverEffect.bodyError()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t type metadata accessor for CVarArg()
{
  unint64_t result = lazy cache variable for type metadata for CVarArg;
  if (!lazy cache variable for type metadata for CVarArg)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
  }
  return result;
}

void type metadata accessor for CVarArg?(uint64_t a1)
{
}

uint64_t outlined init with copy of CVarArg?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CVarArg?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CVarArg?(uint64_t a1)
{
  type metadata accessor for CVarArg?(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AttributeInvalidatingSubscriber.attribute.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AttributeInvalidatingSubscriber.init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized AttributeInvalidatingSubscriber.init(host:attribute:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AttributeInvalidatingSubscriber<A>()
{
  return specialized AttributeInvalidatingSubscriber.receive(completion:)();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AttributeInvalidatingSubscriber<A>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t specialized AttributeInvalidatingSubscriber.init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  swift_weakInit();
  *(void *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  swift_weakAssign();
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t specialized AttributeInvalidatingSubscriber.receive(completion:)()
{
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for AttributeInvalidatingSubscriber.StateType();
  uint64_t v2 = *(void *)(v1 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + 32, v1);
  unint64_t v3 = v6;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v3 >= 2)
  {
    memset(v5, 0, sizeof(v5));
    long long v6 = xmmword_24619B520;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v2 + 40))(v0 + 32, v5, v1);
    swift_endAccess();
    return AttributeInvalidatingSubscriber.invalidateAttribute()();
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AttributeInvalidatingSubscriber<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t method lookup function for AttributeInvalidatingSubscriber(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AttributeInvalidatingSubscriber);
}

uint64_t dispatch thunk of AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t assignWithCopy for AttributeInvalidatingSubscriber.StateType(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeInvalidatingSubscriber.StateType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AttributeInvalidatingSubscriber.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

double destructiveInjectEnumTag for AttributeInvalidatingSubscriber.StateType(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

uint64_t Color.fallbackColor(in:)()
{
  return swift_retain();
}

uint64_t Color.resolvePaint(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)a2 + 104))(&v3);
}

double static Color._makeView<A>(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for Color, a4, (uint64_t)&protocol witness table for Color, a5);
}

void *Color.Resolved.draw(path:style:in:bounds:)(uint64_t a1, long long *a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  long long v12 = a2[1];
  long long v13 = *a2;
  uint64_t v9 = *((void *)a2 + 4);
  char v10 = *((unsigned char *)a2 + 40);
  *(float *)uint64_t v18 = a4;
  *(float *)&v18[1] = a5;
  *(float *)&_OWORD v18[2] = a6;
  *(float *)&v18[3] = a7;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v18);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v18, (uint64_t)v17);
  v14[0] = v13;
  v14[1] = v12;
  uint64_t v15 = v9;
  char v16 = v10;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v17, (uint64_t)v14, a3);
}

BOOL Color.Resolved.isClear.getter(double a1, double a2, double a3, float a4)
{
  return a4 == 0.0;
}

BOOL Color.Resolved.isOpaque.getter(double a1, double a2, double a3, float a4)
{
  return a4 == 1.0;
}

void static Color.Resolved.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
}

void *protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance Color.Resolved(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v9 = a2[1];
  long long v10 = *a2;
  uint64_t v6 = *((void *)a2 + 4);
  char v7 = *((unsigned char *)a2 + 40);
  v15[0] = *v3;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v15);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v15, (uint64_t)v14);
  v11[0] = v10;
  v11[1] = v9;
  uint64_t v12 = v6;
  char v13 = v7;
  return GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v14, (uint64_t)v11, a3);
}

BOOL protocol witness for ResolvedPaint.isClear.getter in conformance Color.Resolved()
{
  return *(float *)(v0 + 12) == 0.0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance Color.Resolved(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.DisplayP3(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2, v2[1], v2[2]);
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in Color()
{
  return &protocol witness table for Color.Resolved;
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance ContentStyle.ID(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance GradientColorProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *(void *)v2, *(unsigned char *)(v2 + 8), *(double *)(v2 + 16));
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.NamedColor(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *(void *)v2, *(void **)(v2 + 8), *(void **)(v2 + 16));
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.HierarchicalOpacityColor(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2, v2[1]);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.DestinationOverProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2, v2[1]);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.MixProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *(void *)v2, *(void *)(v2 + 8), *(float *)(v2 + 20));
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *(void *)v2, *(float *)(v2 + 8));
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.TintAdjustmentProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.DesaturatedColor(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2);
}

uint64_t BidirectionalCollection<>.insertionSort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v82 = a4;
  uint64_t v80 = a3;
  uint64_t v81 = a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v79 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = (char *)&v74 - v9;
  MEMORY[0x270FA5388](v10);
  char v91 = (char *)&v74 - v11;
  uint64_t v93 = swift_getAssociatedTypeWitness();
  uint64_t v99 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v94 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v102 = (char *)&v74 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v84 = (char *)&v74 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v74 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v76 = (char *)&v74 - v21;
  uint64_t v22 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v74 - v28;
  uint64_t v31 = v22 + 16;
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  uint64_t v32 = v4;
  v30((char *)&v74 - v28, v4, a1, v27);
  uint64_t v100 = v6;
  char v33 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v34 = v22 + 8;
  unint64_t v98 = v35;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v29, a1);
  if ((v33 & 1) == 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v30)(v29, v32, a1);
    char v97 = (void (*)(char *, uint64_t, uint64_t))v30;
    ((void (*)(char *, uint64_t, uint64_t))v30)(v25, v32, a1);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v37 = v25;
    uint64_t v39 = v98;
    uint64_t v38 = v99;
    v98(v37, a1);
    dispatch thunk of Collection.index(after:)();
    unint64_t v40 = *(void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v101 = v19;
    unint64_t v41 = v19;
    uint64_t v42 = v32;
    uint64_t v43 = v93;
    uint64_t v92 = v40;
    uint64_t v90 = v38 + 8;
    v40(v41, v93);
    v39(v29, a1);
    uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v83 = (void (**)(char *))(v88 + 16);
    long long v86 = (void (**)(char *, uint64_t))(v88 + 8);
    uint64_t v99 = v38 + 16;
    int v44 = v76;
    uint64_t v78 = (void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v75 = v42;
    uint64_t v45 = v43;
    uint64_t v95 = v31;
    uint64_t v96 = v34;
    while (1)
    {
      uint64_t v47 = v101;
      v89(v101, v44, v45);
      uint64_t v48 = v42;
      v97(v29, v42, a1);
      uint64_t v49 = v84;
      dispatch thunk of Collection.endIndex.getter();
      v98(v29, a1);
      uint64_t v88 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v51 = v49;
      uint64_t v53 = v92;
      uint64_t v52 = v93;
      v92(v51, v93);
      v53(v47, v52);
      if (v50) {
        return ((uint64_t (*)(char *, uint64_t))v53)(v76, v52);
      }
      int v54 = v76;
      uint64_t v55 = v48;
      uint64_t v56 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v57 = AssociatedTypeWitness;
      uint64_t v87 = *v83;
      v87(v91);
      v56(v103, 0);
      v89(v102, v54, v52);
      uint64_t v58 = v74;
      long long v59 = v101;
      while (1)
      {
        v97(v29, v55, a1);
        dispatch thunk of BidirectionalCollection.index(before:)();
        v98(v29, a1);
        uint64_t v60 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v61 = v87;
        v87(v58);
        v60(v103, 0);
        if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
          break;
        }
        uint64_t v62 = (void (*)(char *, char *, uint64_t))v61;
        uint64_t v63 = v59;
        uint64_t v64 = v93;
        uint64_t v65 = v89;
        v89(v63, v102, v93);
        v62(v79, v58, v57);
        dispatch thunk of MutableCollection.subscript.setter();
        unint64_t v85 = *v86;
        v85(v58, v57);
        uint64_t v66 = v92;
        v92(v102, v64);
        (*v78)(v102, v94, v64);
        v65(v101, v102, v64);
        v97(v29, v55, a1);
        uint64_t v67 = v84;
        dispatch thunk of Collection.startIndex.getter();
        v98(v29, a1);
        char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v69 = v67;
        long long v59 = v101;
        v66(v69, v64);
        v66(v59, v64);
        if (v68)
        {
          uint64_t v70 = v93;
          goto LABEL_10;
        }
      }
      unint64_t v85 = *v86;
      v85(v58, v57);
      uint64_t v70 = v93;
      v92(v94, v93);
LABEL_10:
      uint64_t v71 = v76;
      uint64_t v72 = v89;
      v89(v59, v76, v70);
      char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
      v92(v59, v70);
      if ((v73 & 1) == 0)
      {
        v72(v59, v102, v70);
        ((void (*)(char *, char *, uint64_t))v87)(v79, v91, AssociatedTypeWitness);
        dispatch thunk of MutableCollection.subscript.setter();
      }
      uint64_t v46 = v75;
      v97(v29, v75, a1);
      int v44 = v71;
      dispatch thunk of Collection.formIndex(after:)();
      v98(v29, a1);
      v92(v102, v70);
      v85(v91, AssociatedTypeWitness);
      uint64_t v42 = v46;
      uint64_t v45 = v70;
    }
  }
  return result;
}

unint64_t specialized BidirectionalCollection<>.insertionSort(by:)(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  unint64_t v2 = *(void *)(result + 24);
  if (v3 != v2 >> 1)
  {
    uint64_t v4 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v4 != v2 >> 1)
    {
      uint64_t v5 = a2;
      uint64_t v6 = (uint64_t *)result;
      char v33 = (uint64_t *)result;
      while (v4 >= v3 && v4 < (uint64_t)(v2 >> 1))
      {
        uint64_t v7 = v6[1];
        uint64_t result = *(unsigned int *)(v7 + 4 * v4);
        uint64_t v30 = v4;
        unint64_t v32 = result;
        while (1)
        {
          int64_t v8 = v4 - 1;
          if (__OFSUB__(v4, 1))
          {
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if (v8 < v3) {
            goto LABEL_41;
          }
          int64_t v9 = v2 >> 1;
          if (v8 >= (uint64_t)(v2 >> 1)) {
            goto LABEL_41;
          }
          unint64_t v10 = *(unsigned int *)(v7 + 4 * v8);
          uint64_t v11 = *(void *)(v5 + 144);
          if ((v11 & 0xC000000000000001) != 0)
          {
            uint64_t v12 = MEMORY[0x24C523D60]();
          }
          else
          {
            if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) <= result) {
              goto LABEL_42;
            }
            uint64_t v12 = swift_retain();
          }
          double v13 = *(double *)(v12 + 64);
          uint64_t result = swift_release();
          uint64_t v14 = *(void *)(v5 + 144);
          if ((v14 & 0xC000000000000001) != 0)
          {
            uint64_t v15 = MEMORY[0x24C523D60](v10);
          }
          else
          {
            if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v10) {
              goto LABEL_43;
            }
            uint64_t v15 = swift_retain();
          }
          double v16 = *(double *)(v15 + 64);
          swift_release();
          if (v13 >= v16) {
            break;
          }
          uint64_t v17 = *v33;
          if ((v2 & 1) == 0
            || (char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(),
                uint64_t v6 = v33,
                *char v33 = v17,
                (isUniquelyReferenced_nonNull & 1) == 0))
          {
            uint64_t v19 = specialized _ArrayBufferProtocol.init(copying:)(v7, v3, v2);
            uint64_t v7 = v20;
            uint64_t v3 = v21;
            unint64_t v2 = v22;
            swift_unknownObjectRelease();
            uint64_t v6 = v33;
            v33[1] = v7;
            v33[2] = v3;
            int64_t v9 = v2 >> 1;
            uint64_t v17 = v19;
            uint64_t v5 = a2;
            v33[3] = v2;
          }
          uint64_t result = v32;
          if (v4 < v3 || v4 >= v9) {
            goto LABEL_44;
          }
          *(_DWORD *)(v7 + 4 * v4) = v10;
          *uint64_t v6 = v17;
          --v4;
          uint64_t v23 = v8;
          if (v8 == v3) {
            goto LABEL_28;
          }
        }
        int64_t v8 = v4;
        uint64_t v23 = v3;
        uint64_t v6 = v33;
        uint64_t result = v32;
LABEL_28:
        if (v8 == v30)
        {
          uint64_t v3 = v23;
        }
        else
        {
          int v24 = result;
          uint64_t v25 = *v6;
          if (v2 & 1) != 0 && (uint64_t result = swift_isUniquelyReferenced_nonNull(), v6 = v33, *v33 = v25, (result))
          {
            uint64_t v3 = v23;
          }
          else
          {
            uint64_t v26 = specialized _ArrayBufferProtocol.init(copying:)(v7, v23, v2);
            uint64_t v7 = v27;
            uint64_t v3 = v28;
            unint64_t v2 = v29;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v6 = v33;
            v33[1] = v7;
            v33[2] = v3;
            uint64_t v25 = v26;
            uint64_t v5 = a2;
            v33[3] = v2;
          }
          if (v8 < v3 || v8 >= (uint64_t)(v2 >> 1)) {
            goto LABEL_47;
          }
          *(_DWORD *)(v7 + 4 * v8) = v24;
          *uint64_t v6 = v25;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_46;
        }
        uint64_t v4 = v30 + 1;
        if (v30 + 1 == v2 >> 1) {
          return result;
        }
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
  }
  return result;
}

uint64_t BidirectionalCollection<>.insertionSort(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v89 = a5;
  uint64_t v92 = a2;
  char v91 = a1;
  uint64_t v107 = a4;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v110 = *(void (**)(char *))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v88 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v90 = (char *)&v87 - v11;
  MEMORY[0x270FA5388](v12);
  char v102 = (char *)&v87 - v13;
  uint64_t v105 = swift_getAssociatedTypeWitness();
  uint64_t v116 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v100 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v96 = (char *)&v87 - v16;
  MEMORY[0x270FA5388](v17);
  unint64_t v119 = (char *)&v87 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v87 = (char *)&v87 - v20;
  uint64_t v21 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v22);
  int v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v26 = MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v87 - v27;
  uint64_t v30 = v21 + 16;
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16);
  uint64_t v104 = v5;
  v29((char *)&v87 - v27, v5, a3, v26);
  uint64_t v103 = v7;
  char v31 = dispatch thunk of Collection.isEmpty.getter();
  char v33 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v32 = v21 + 8;
  uint64_t v115 = v33;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v28, a3);
  if ((v31 & 1) == 0)
  {
    uint64_t v101 = AssociatedTypeWitness;
    uint64_t v35 = v104;
    ((void (*)(char *, uint64_t, uint64_t))v29)(v28, v104, a3);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v24, v35, a3);
    uint64_t v36 = v119;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v112 = (void (*)(char *, uint64_t, uint64_t))v29;
    uint64_t v37 = v115;
    v115(v24, a3);
    dispatch thunk of Collection.index(after:)();
    uint64_t v38 = v116;
    uint64_t v40 = v116 + 8;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v116 + 8);
    v39(v36, v105);
    v37(v28, a3);
    uint64_t v41 = v38 + 16;
    int64_t v114 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v99 = (void (**)(char *))((char *)v110 + 16);
    uint64_t v95 = (void (**)(char *, uint64_t))((char *)v110 + 8);
    uint64_t v42 = v28;
    uint64_t v43 = v39;
    uint64_t v116 = v41;
    uint64_t v117 = v32;
    unint64_t v98 = v28;
    uint64_t v109 = v30;
    uint64_t v111 = a3;
    char v97 = v39;
    uint64_t v108 = v40;
    while (1)
    {
      uint64_t v46 = v119;
      uint64_t v47 = v105;
      v114(v119, v87, v105);
      v112(v42, v104, a3);
      uint64_t v48 = v96;
      dispatch thunk of Collection.endIndex.getter();
      v115(v42, a3);
      uint64_t v94 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43(v48, v47);
      v43(v46, v47);
      if (v49) {
        return ((uint64_t (*)(char *, uint64_t))v43)(v87, v105);
      }
      char v50 = v112;
      uint64_t v51 = v87;
      uint64_t v52 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v53 = *v99;
      (*v99)(v102);
      v52(v118, 0);
      v114(v100, v51, v105);
      int v54 = v43;
      uint64_t v55 = v98;
      uint64_t v56 = v115;
      uint64_t v110 = v53;
      while (1)
      {
        uint64_t v57 = v104;
        uint64_t v58 = v111;
        v50(v55, v104, v111);
        long long v59 = v119;
        dispatch thunk of BidirectionalCollection.index(before:)();
        v56(v55, v58);
        uint64_t v60 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v61 = v90;
        uint64_t v62 = v101;
        v110(v90);
        v60(v118, 0);
        uint64_t v63 = v105;
        v54(v59, v105);
        uint64_t v64 = v113;
        char v65 = v91(v102, v61);
        uint64_t v66 = v57;
        uint64_t v113 = v64;
        if (v64)
        {
          uint64_t v81 = v63;
          uint64_t v82 = v100;
          v114(v119, v100, v81);
          uint64_t v83 = v102;
          ((void (*)(char *, char *, uint64_t))v110)(v88, v102, v62);
          dispatch thunk of MutableCollection.subscript.setter();
          swift_willThrow();
          uint64_t v84 = *v95;
          (*v95)(v61, v62);
          unint64_t v85 = v82;
          long long v86 = (uint64_t (*)(char *, uint64_t))v97;
          v97(v85, v81);
          v84(v83, v62);
          return v86(v87, v81);
        }
        if ((v65 & 1) == 0) {
          break;
        }
        uint64_t v67 = v100;
        v114(v119, v100, v63);
        ((void (*)(char *, char *, uint64_t))v110)(v88, v61, v62);
        uint64_t v68 = v111;
        dispatch thunk of MutableCollection.subscript.setter();
        uint64_t v55 = v98;
        v112(v98, v66, v68);
        dispatch thunk of BidirectionalCollection.formIndex(before:)();
        v115(v55, v68);
        uint64_t v93 = *v95;
        v93(v61, v62);
        v114(v119, v67, v63);
        uint64_t v69 = v119;
        uint64_t v70 = v112;
        v112(v55, v66, v68);
        uint64_t v71 = v96;
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v72 = v68;
        uint64_t v56 = v115;
        v115(v55, v72);
        int v106 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v73 = v71;
        char v50 = v70;
        int v54 = v97;
        v97(v73, v63);
        v54(v69, v63);
        if (v106)
        {
          uint64_t v74 = v104;
          uint64_t v63 = v105;
          uint64_t v75 = v93;
          goto LABEL_11;
        }
      }
      uint64_t v74 = v57;
      uint64_t v75 = *v95;
      (*v95)(v61, v62);
LABEL_11:
      uint64_t v93 = v75;
      uint64_t v76 = v119;
      uint64_t v77 = v114;
      ((void (*)(char *))v114)(v119);
      uint64_t v78 = v100;
      char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
      v97(v76, v63);
      uint64_t v80 = v98;
      if ((v79 & 1) == 0)
      {
        v77(v119, v78, v63);
        ((void (*)(char *, char *, uint64_t))v110)(v88, v102, v101);
        dispatch thunk of MutableCollection.subscript.setter();
      }
      int v44 = v78;
      a3 = v111;
      v112(v80, v74, v111);
      uint64_t v42 = v80;
      dispatch thunk of Collection.formIndex(after:)();
      v115(v80, a3);
      uint64_t v45 = v97;
      v97(v44, v63);
      v93(v102, v101);
      uint64_t v43 = v45;
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t (*a2)(uint64_t, void), unint64_t a3)
{
  uint64_t v15 = (void *)result;
  uint64_t v6 = *(char **)result;
  unint64_t v7 = *(void *)(*(void *)result + 16);
  if (v7 >= 2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 1;
LABEL_3:
    if (v11 >= v7)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
      uint64_t v6 = (char *)result;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v13 = v11;
      uint64_t v5 = *(unsigned int *)&v6[4 * v11 + 32];
      while (1)
      {
        if (v10 + v4 >= *((void *)v6 + 2))
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        unsigned int v12 = *(_DWORD *)&v6[4 * v4 + 32 + v9];
        uint64_t result = a2(v5, v12);
        if (v3) {
          break;
        }
        if ((result & 1) == 0)
        {
          if (v4)
          {
            v4 += v10 + 1;
LABEL_15:
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
              uint64_t v6 = (char *)result;
            }
            if (v4 >= *((void *)v6 + 2)) {
              goto LABEL_27;
            }
            *(_DWORD *)&v6[4 * v4 + 32] = v5;
            *uint64_t v15 = v6;
          }
          unint64_t v11 = v13 + 1;
          unint64_t v7 = *((void *)v6 + 2);
          ++v10;
          v9 += 4;
          if (v13 + 1 != v7) {
            goto LABEL_3;
          }
          return result;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        }
        if (v10 + v4 + 1 >= *((void *)v6 + 2)) {
          goto LABEL_25;
        }
        *(_DWORD *)&v6[4 * v4 + 36 + v9] = v12;
        *uint64_t v15 = v6;
        --v4;
        if (v10 + v4 == -1)
        {
          unint64_t v4 = 0;
          goto LABEL_15;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      a3 = v10 + v4 + 1;
      if ((result & 1) == 0) {
        goto LABEL_28;
      }
    }
    if (a3 >= *((void *)v6 + 2))
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)&v6[4 * v4 + 36 + v9] = v5;
      *uint64_t v15 = v6;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t (*a2)(void, void))
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  unint64_t v5 = *(void *)(result + 24);
  if (v4 != v5 >> 1)
  {
    int64_t v6 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      if (v6 == v5 >> 1) {
        return result;
      }
      unint64_t v7 = (uint64_t *)result;
      uint64_t v42 = (uint64_t *)result;
      while (v6 >= v4 && v6 < (uint64_t)(v5 >> 1))
      {
        uint64_t v8 = v7[1];
        unsigned int v44 = *(_DWORD *)(v8 + 4 * v6);
        int64_t v41 = v6;
        while (1)
        {
          uint64_t v9 = v6 - 1;
          if (__OFSUB__(v6, 1))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if (v9 < v4) {
            goto LABEL_43;
          }
          int64_t v10 = v5 >> 1;
          if (v9 >= (uint64_t)(v5 >> 1)) {
            goto LABEL_43;
          }
          uint64_t v45 = v6;
          uint64_t v11 = v4;
          uint64_t v12 = v8;
          unsigned int v13 = *(_DWORD *)(v8 + 4 * v9);
          uint64_t v14 = v3;
          uint64_t result = a2(v44, v13);
          if (v3)
          {
            uint64_t v34 = *v7;
            if (v5 & 1) != 0 && (uint64_t result = swift_isUniquelyReferenced_nonNull(), *v7 = v34, (result))
            {
              uint64_t v35 = v12;
            }
            else
            {
              uint64_t v36 = specialized _ArrayBufferProtocol.init(copying:)(v12, v11, v5);
              uint64_t v35 = v37;
              uint64_t v11 = v38;
              unint64_t v40 = v39;
              uint64_t result = swift_unknownObjectRelease();
              v42[1] = v35;
              v42[2] = v11;
              int64_t v10 = v40 >> 1;
              uint64_t v34 = v36;
              v42[3] = v40;
              unint64_t v7 = v42;
            }
            if (v45 >= v11 && v45 < v10)
            {
              *(_DWORD *)(v35 + 4 * v45) = v44;
              *unint64_t v7 = v34;
              return swift_willThrow();
            }
            goto LABEL_49;
          }
          if ((result & 1) == 0) {
            break;
          }
          uint64_t v15 = *v7;
          if (v5 & 1) != 0 && (uint64_t result = swift_isUniquelyReferenced_nonNull(), *v7 = v15, (result))
          {
            uint64_t v8 = v12;
            uint64_t v4 = v11;
          }
          else
          {
            uint64_t v16 = specialized _ArrayBufferProtocol.init(copying:)(v12, v11, v5);
            uint64_t v18 = v17;
            uint64_t v20 = v19;
            unint64_t v5 = v21;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v4 = v20;
            uint64_t v8 = v18;
            v7[1] = v18;
            _OWORD v7[2] = v20;
            int64_t v10 = v5 >> 1;
            uint64_t v15 = v16;
            v7[3] = v5;
          }
          if (v45 < v4 || v45 >= v10) {
            goto LABEL_44;
          }
          *(_DWORD *)(v8 + 4 * v45) = v13;
          unint64_t v7 = v42;
          *uint64_t v42 = v15;
          int64_t v6 = v9;
          uint64_t v22 = v9;
          uint64_t v3 = v14;
          if (v9 == v4) {
            goto LABEL_23;
          }
        }
        uint64_t v9 = v45;
        uint64_t v22 = v11;
        uint64_t v8 = v12;
LABEL_23:
        int64_t v23 = v41;
        if (v9 == v41)
        {
          uint64_t v4 = v22;
        }
        else
        {
          int v24 = v7;
          uint64_t v25 = *v7;
          if ((v5 & 1) != 0
            && (v26 = v8, uint64_t result = swift_isUniquelyReferenced_nonNull(), v8 = v26, *v24 = v25, (result & 1) != 0))
          {
            uint64_t v4 = v22;
          }
          else
          {
            uint64_t v27 = v3;
            uint64_t v28 = specialized _ArrayBufferProtocol.init(copying:)(v8, v22, v5);
            uint64_t v30 = v29;
            uint64_t v32 = v31;
            unint64_t v5 = v33;
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v4 = v32;
            uint64_t v8 = v30;
            v24[1] = v30;
            v24[2] = v32;
            uint64_t v25 = v28;
            uint64_t v3 = v27;
            v24[3] = v5;
          }
          int64_t v23 = v41;
          if (v9 < v4 || v9 >= (uint64_t)(v5 >> 1)) {
            goto LABEL_48;
          }
          *(_DWORD *)(v8 + 4 * v9) = v44;
          *uint64_t v42 = v25;
          unint64_t v7 = v42;
        }
        if (__OFADD__(v23, 1)) {
          goto LABEL_47;
        }
        int64_t v6 = v23 + 1;
        if (v6 == v5 >> 1) {
          return result;
        }
      }
LABEL_45:
      __break(1u);
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  return result;
}

uint64_t Gesture.exclusively<A>(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return ExclusiveGesture.init(_:_:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t ExclusiveGesture.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ExclusiveGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for ExclusiveGesture()
{
  return swift_getGenericMetadata();
}

uint64_t ExclusiveGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ExclusiveGesture.first.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ExclusiveGesture.first.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ExclusiveGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t ExclusiveGesture.second.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*ExclusiveGesture.second.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ExclusiveGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int32x2_t *a7@<X8>)
{
  char v73 = a7;
  uint64_t v135 = *MEMORY[0x263EF8340];
  int v9 = *a1;
  long long v10 = a2[5];
  v132[1] = a2[4];
  long long v133 = v10;
  *(_OWORD *)unint64_t v134 = a2[6];
  *(_OWORD *)&v134[12] = *(long long *)((char *)a2 + 108);
  long long v11 = a2[1];
  long long v129 = *a2;
  long long v130 = v11;
  long long v12 = a2[3];
  long long v131 = a2[2];
  v132[0] = v12;
  uint64_t v101 = a3;
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  uint64_t v104 = a6;
  LODWORD(v82) = v9;
  LODWORD(v108) = v9;
  *(void *)&long long v123 = a3;
  uint64_t v91 = a4;
  *((void *)&v123 + 1) = a4;
  *(void *)&long long v124 = a5;
  uint64_t v93 = a6;
  *((void *)&v124 + 1) = a6;
  uint64_t v71 = type metadata accessor for ExclusiveGesture();
  *(void *)&long long v81 = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:), (uint64_t)a3, &v115);
  v126[1] = v132[1];
  long long v127 = v133;
  v128[0] = *(_OWORD *)v134;
  *(_OWORD *)((char *)v128 + 12) = *(_OWORD *)&v134[12];
  long long v123 = v129;
  long long v124 = v130;
  long long v125 = v131;
  v126[0] = v132[0];
  (*(void (**)(long long *__return_ptr, long long *, long long *, void *, uint64_t))(a5 + 32))(&v99, &v115, &v123, a3, a5);
  unsigned int v14 = *(_DWORD *)&v134[24];
  unsigned int v15 = *(_DWORD *)&v134[24];
  if ((v134[24] & 8) != 0)
  {
    uint64_t v16 = swift_conformsToProtocol2() ? a3 : 0;
    unsigned int v15 = v14;
    if (!v16)
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        char v17 = 2;
      }
      else {
        char v17 = 1;
      }
      LOBYTE(v115) = v17;
      v126[1] = v132[1];
      long long v127 = v133;
      v128[0] = *(_OWORD *)v134;
      *(_OWORD *)((char *)v128 + 12) = *(_OWORD *)&v134[12];
      long long v123 = v129;
      long long v124 = v130;
      long long v125 = v131;
      v126[0] = v132[0];
      long long v108 = v99;
      LODWORD(v109) = v100;
      swift_getAssociatedTypeWitness();
      type metadata accessor for _GestureOutputs();
      unint64_t v18 = _GestureOutputs.debugData.getter();
      LOBYTE(v108) = 1;
      _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)((uint64_t)a3, (char *)&v115, 0x100000000, &v123, v18 | ((HIDWORD(v18) & 1) << 32), 0x100000000);
      unsigned int v15 = *(_DWORD *)&v134[24];
    }
  }
  unsigned int v83 = v14;
  unsigned int v72 = v15;
  *(void *)&long long v13 = v99;
  long long v94 = v13;
  int v86 = v100;
  uint64_t v19 = v129;
  uint64_t v20 = v130;
  uint64_t v85 = *((void *)&v131 + 1);
  unint64_t v89 = *(void *)&v132[0];
  unint64_t v90 = *((void *)&v99 + 1);
  int v77 = DWORD2(v129);
  int v78 = v133;
  id v87 = (id)*((void *)&v133 + 1);
  uint64_t v92 = *(void *)v134;
  unsigned int v79 = *(_DWORD *)&v134[16];
  unsigned int v84 = v99;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for ExclusiveState();
  p_uint64_t AssociatedTypeWitness = &AssociatedTypeWitness;
  unsigned int v122 = *(_DWORD *)&v134[16];
  *(void *)&long long v123 = __PAIR64__(v94, *(unsigned int *)&v134[20]);
  uint64_t v22 = *((void *)&v130 + 1);
  uint64_t v23 = v131;
  long long v76 = *(_OWORD *)((char *)v132 + 8);
  uint64_t v24 = *((void *)&v132[1] + 1);
  uint64_t v25 = *(void *)&v134[8];
  long long v119 = v132[1];
  long long v120 = v133;
  long long v121 = *(_OWORD *)v134;
  long long v115 = v129;
  long long v116 = v130;
  long long v117 = v131;
  long long v118 = v132[0];
  MEMORY[0x270FA5388](v21);
  v69[2] = v26;
  v69[3] = swift_getWitnessTable();
  outlined retain of _GestureInputs((uint64_t)&v129);
  type metadata accessor for Attribute<_GestureInputs.InheritedPhase>();
  uint64_t v28 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v75 = v87;
  swift_bridgeObjectRetain();
  uint64_t v30 = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v123, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v69, v21, MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
  uint64_t v80 = 0;
  uint64_t v74 = v69;
  LODWORD(v28) = v108;
  MEMORY[0x270FA5388](v30);
  id v87 = a3;
  p_uint64_t AssociatedTypeWitness = (uint64_t *)a5;
  uint64_t v31 = v91;
  v69[-4] = a3;
  v69[-3] = v31;
  uint64_t v32 = v93;
  v69[-2] = a5;
  v69[-1] = v32;
  LODWORD(v123) = v82;
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:), v31, &v96);
  *(void *)&long long v123 = v19;
  DWORD2(v123) = v77;
  *(void *)&long long v124 = v20;
  *((void *)&v124 + 1) = v22;
  *(void *)&long long v125 = v23;
  *((void *)&v125 + 1) = v85;
  *(void *)&v126[0] = v89;
  *(_OWORD *)((char *)v126 + 8) = v76;
  *((void *)&v126[1] + 1) = v24;
  LODWORD(v127) = v78;
  unint64_t v33 = v75;
  *((void *)&v127 + 1) = v75;
  *(void *)&v128[0] = v92;
  *((void *)&v128[0] + 1) = v25;
  *(void *)&v128[1] = __PAIR64__(v28, v79);
  unsigned int v79 = v28;
  LOBYTE(v28) = v83;
  DWORD2(v128[1]) = v83;
  outlined retain of _GestureInputs((uint64_t)&v123);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  long long v112 = v126[1];
  long long v113 = v127;
  v114[0] = v128[0];
  *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)((char *)v128 + 12);
  long long v108 = v123;
  long long v109 = v124;
  long long v110 = v125;
  long long v111 = v126[0];
  (*(void (**)(int32x2_t *__return_ptr, int32x2_t *, long long *, uint64_t))(v93 + 32))(&v105, &v96, &v108, v31);
  if ((v28 & 8) != 0 && !(swift_conformsToProtocol2() ? v31 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v35 = 2;
    }
    else {
      char v35 = 1;
    }
    char v95 = v35;
    long long v112 = v126[1];
    long long v113 = v127;
    v114[0] = v128[0];
    *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)((char *)v128 + 12);
    long long v108 = v123;
    long long v109 = v124;
    long long v110 = v125;
    long long v111 = v126[0];
    int32x2_t v96 = v105;
    unint64_t v97 = v106;
    __int32 v98 = v107;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v36 = _GestureOutputs.debugData.getter();
    v96.i8[0] = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v31, &v95, 0x100000000, &v108, v36 | ((HIDWORD(v36) & 1) << 32), 0x100000000);
  }
  uint64_t v37 = outlined release of _GestureInputs((uint64_t)&v123);
  *(int32x2_t *)&long long v38 = v105;
  unint64_t v89 = v106;
  LODWORD(v85) = v107;
  uint64_t v82 = v69;
  long long v81 = v38;
  int32x2_t v105 = vzip1_s32(*(int32x2_t *)&v94, v105);
  MEMORY[0x270FA5388](v37);
  id v39 = v87;
  unint64_t v40 = p_AssociatedTypeWitness;
  *(void *)&long long v108 = v87;
  *((void *)&v108 + 1) = v31;
  uint64_t v41 = v93;
  *(void *)&long long v109 = p_AssociatedTypeWitness;
  *((void *)&v109 + 1) = v93;
  type metadata accessor for ExclusiveGesture.Value();
  v69[-4] = type metadata accessor for GesturePhase();
  *(void *)&long long v108 = v39;
  *((void *)&v108 + 1) = v31;
  *(void *)&long long v109 = v40;
  *((void *)&v109 + 1) = v41;
  uint64_t v42 = type metadata accessor for ExclusivePhase();
  v69[-3] = v42;
  v69[-2] = swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v105, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v69[-6], v42, MEMORY[0x263F8E628], v43, MEMORY[0x263F8E658], v44);
  _GestureOutputs.init(phase:)(v108, (uint64_t)&v96);
  if ((v83 & 8) != 0)
  {
    char v95 = 4;
    long long v112 = v132[1];
    long long v113 = v133;
    v114[0] = *(_OWORD *)v134;
    *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)&v134[12];
    long long v108 = v129;
    long long v109 = v130;
    long long v110 = v131;
    long long v111 = v132[0];
    unint64_t v45 = v90;
    swift_bridgeObjectRetain();
    int32x2_t v105 = (int32x2_t)v94;
    unint64_t v106 = v45;
    int v107 = v86;
    type metadata accessor for _GestureOutputs();
    unint64_t v46 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    unint64_t v47 = v89;
    swift_bridgeObjectRetain();
    int32x2_t v105 = (int32x2_t)v81;
    unint64_t v106 = v47;
    int v107 = v85;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v48 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    type metadata accessor for _GestureOutputs();
    v105.i8[0] = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v71, &v95, 0x100000000, &v108, v46 | ((HIDWORD(v46) & 1) << 32), v48 | ((HIDWORD(v48) & 1) << 32));
  }
  uint64_t v49 = v92;
  unint64_t v50 = *(void *)(v92 + 16);
  if (v50)
  {
    unsigned int v83 = *MEMORY[0x263F288F8];
    uint64_t v82 = &v97;
    swift_bridgeObjectRetain();
    unint64_t v51 = 0;
    uint64_t v52 = (uint64_t *)(v49 + 40);
    do
    {
      if (v51 >= v50) {
        __break(1u);
      }
      ++v51;
      uint64_t v53 = (ValueMetadata *)*(v52 - 1);
      uint64_t v54 = *v52;
      *(void *)&long long v108 = v90;
      DWORD2(v108) = v86;
      unint64_t v55 = PreferencesOutputs.subscript.getter((uint64_t)v53, (uint64_t)v53, v54);
      unsigned int v56 = v83;
      if ((v55 & 0x100000000) != 0) {
        unsigned int v57 = v83;
      }
      else {
        unsigned int v57 = v55;
      }
      *(void *)&long long v108 = v89;
      DWORD2(v108) = v85;
      unint64_t v58 = PreferencesOutputs.subscript.getter((uint64_t)v53, (uint64_t)v53, v54);
      *(void *)&long long v94 = v69;
      if ((v58 & 0x100000000) != 0) {
        unsigned int v59 = v56;
      }
      else {
        unsigned int v59 = v58;
      }
      int32x2_t v105 = (int32x2_t)__PAIR64__(v59, v57);
      unint64_t v106 = __PAIR64__(v81, v84);
      MEMORY[0x270FA5388](v58);
      v69[-4] = swift_getAssociatedTypeWitness();
      *(void *)&long long v108 = v87;
      *((void *)&v108 + 1) = v91;
      *(void *)&long long v109 = v53;
      *((void *)&v109 + 1) = p_AssociatedTypeWitness;
      *(void *)&long long v110 = v93;
      *((void *)&v110 + 1) = v54;
      uint64_t v60 = type metadata accessor for ExclusivePreference();
      v69[-3] = v60;
      v69[-2] = swift_getWitnessTable();
      uint64_t v61 = v92;
      uint64_t v62 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v105, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v69[-6], v60, MEMORY[0x263F8E628], v62, MEMORY[0x263F8E658], v63);
      uint64_t v64 = v108;
      swift_beginAccess();
      v105.i8[0] = 0;
      PreferencesOutputs.subscript.setter(v64, v53, (uint64_t)v53, v54);
      swift_endAccess();
      unint64_t v50 = *(void *)(v61 + 16);
      v52 += 2;
    }
    while (v51 != v50);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v112 = v119;
  long long v113 = v120;
  v114[0] = v121;
  long long v108 = v115;
  long long v109 = v116;
  long long v110 = v117;
  long long v111 = v118;
  *(void *)&v114[1] = __PAIR64__(v79, v122);
  DWORD2(v114[1]) = v72;
  outlined release of _GestureInputs((uint64_t)&v108);
  uint64_t result = swift_beginAccess();
  unint64_t v66 = v97;
  __int32 v67 = v98;
  uint64_t v68 = v73;
  *char v73 = v96;
  v68[1] = (int32x2_t)v66;
  v68[2].i32[0] = v67;
  return result;
}

uint64_t closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for ExclusiveGesture();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for ExclusiveGesture();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  void v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance ExclusiveGesture<A, B>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X8>)
{
  return static ExclusiveGesture._makeGesture(gesture:inputs:)(a1, a2, *(void **)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t static ExclusiveGesture.Value<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v40 = (char *)&v39 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v39 = (char *)&v39 - v15;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v16 = type metadata accessor for ExclusiveGesture.Value();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v39 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  double v24 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v26 = (char *)&v39 - v25;
  uint64_t v28 = (char *)&v39 + *(int *)(v27 + 48) - v25;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  v29((char *)&v39 - v25, v47, v16, v24);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v28, v48, v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    ((void (*)(char *, char *, uint64_t))v29)(v22, v26, v16);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v35 = v44;
      unint64_t v36 = v39;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v39, v28, v14);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v37(v36, v14);
      v37(v22, v14);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v14);
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v29)(v19, v26, v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v46);
LABEL_7:
    char v33 = 0;
    uint64_t v17 = v43;
    uint64_t v16 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  uint64_t v31 = v45;
  uint64_t v30 = v46;
  uint64_t v32 = v40;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v40, v28, v46);
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v32, v30);
  v34(v19, v30);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v16);
  return v33 & 1;
}

uint64_t ExclusiveState.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ExclusiveGesture<A, B>.Value(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static ExclusiveGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t ExclusiveState.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v13 - v4;
  unint64_t v6 = *(void *)AGGraphGetValue();
  ExclusiveState.phase.getter((uint64_t)v5);
  BOOL v7 = GesturePhase.isFailed.getter(v2);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8(v5, v2);
  if (v7) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
  }
  ExclusiveState.phase.getter((uint64_t)v5);
  BOOL v10 = GesturePhase.isActive.getter(v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v8)(v5, v2);
  if (v10 && (v9 & 2) == 0) {
    uint64_t v12 = v9 | 2;
  }
  else {
    uint64_t v12 = v9;
  }
  *a1 = v12;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ExclusiveState<A>@<X0>(uint64_t *a1@<X8>)
{
  return ExclusiveState.value.getter(a1);
}

uint64_t ExclusivePhase.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v74 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for GesturePhase();
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for GesturePhase();
  uint64_t v10 = v8;
  uint64_t v75 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v65 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v79 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v64 = (char *)&v63 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v63 - v18;
  uint64_t v20 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v21);
  __int32 v67 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  unint64_t v66 = (char *)&v63 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v68 = (char *)&v63 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v63 - v28;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = v76;
  SimultaneousPhase.phase1.getter((uint64_t)&v63 - v28);
  uint64_t v33 = a4;
  uint64_t v34 = v9;
  uint64_t v35 = v75;
  uint64_t v71 = v30;
  uint64_t v72 = v33;
  uint64_t v73 = v31;
  SimultaneousPhase.phase2.getter((uint64_t)v19);
  unint64_t v36 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v78 = v20;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v12, v29, v35);
  uint64_t v37 = v34;
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v36, v19, v34);
  long long v38 = v12;
  uint64_t v39 = v35;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v46 = v78;
      uint64_t v47 = v68;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v68, v38, v35);
      (*(void (**)(uint64_t, char *))(*(void *)(AssociatedTypeWitness - 8) + 32))(v74, v47);
      uint64_t v80 = v71;
      uint64_t v81 = v73;
      uint64_t v82 = v32;
      uint64_t v83 = v72;
      type metadata accessor for ExclusiveGesture.Value();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for GesturePhase();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v36, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v38, v35);
    case 3u:
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1) {
        goto LABEL_9;
      }
      uint64_t v44 = v69;
      uint64_t v41 = AssociatedTypeWitness;
      if (EnumCaseMultiPayload != 2) {
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v69 - 8) + 32))(v74, v36, v69);
      uint64_t v80 = v71;
      uint64_t v81 = v73;
      uint64_t v82 = v32;
      uint64_t v83 = v72;
      type metadata accessor for ExclusiveGesture.Value();
      swift_storeEnumTagMultiPayload();
      type metadata accessor for GesturePhase();
      goto LABEL_10;
    default:
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_9:
        (*(void (**)(uint64_t, char *))(*(void *)(v69 - 8) + 32))(v74, v36);
        uint64_t v80 = v71;
        uint64_t v81 = v73;
        uint64_t v82 = v32;
        uint64_t v83 = v72;
        type metadata accessor for ExclusiveGesture.Value();
        swift_storeEnumTagMultiPayload();
        type metadata accessor for GesturePhase();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v38, v39);
      }
      unint64_t v40 = v66;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v66, v12, v35);
      uint64_t v41 = AssociatedTypeWitness;
      uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
      int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, AssociatedTypeWitness);
      uint64_t v44 = v69;
      if (v43 != 1)
      {
        uint64_t v58 = v74;
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v74, v40, v41);
        uint64_t v80 = v71;
        uint64_t v81 = v73;
        uint64_t v82 = v32;
        uint64_t v83 = v72;
        uint64_t v59 = type metadata accessor for ExclusiveGesture.Value();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v58, 0, 1, v59);
        type metadata accessor for GesturePhase();
LABEL_22:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, uint64_t))(v79 + 8))(v36, v37);
        return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v38, v39);
      }
      uint64_t v45 = type metadata accessor for Optional();
      (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8))(v40, v45);
LABEL_11:
      int v50 = swift_getEnumCaseMultiPayload();
      uint64_t v51 = v67;
      if (v50) {
        goto LABEL_14;
      }
      uint64_t v52 = v64;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v64, v36, v37);
      uint64_t v53 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v52, 1, v44) != 1)
      {
        uint64_t v60 = v74;
        (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v74, v52, v44);
        uint64_t v80 = v71;
        uint64_t v81 = v73;
        uint64_t v82 = v32;
        uint64_t v83 = v72;
        uint64_t v61 = type metadata accessor for ExclusiveGesture.Value();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 0, 1, v61);
        type metadata accessor for GesturePhase();
        goto LABEL_22;
      }
      uint64_t v54 = type metadata accessor for Optional();
      (*(void (**)(char *, uint64_t))(*(void *)(v54 - 8) + 8))(v52, v54);
      uint64_t v41 = AssociatedTypeWitness;
LABEL_14:
      if (!swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v51, v38, v39);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v51, 1, v41) == 1)
        {
LABEL_19:
          (*(void (**)(char *, uint64_t))(v79 + 8))(v36, v37);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v38, v39);
          uint64_t v80 = v71;
          uint64_t v81 = v73;
          uint64_t v82 = v32;
          uint64_t v83 = v72;
          uint64_t v57 = type metadata accessor for ExclusiveGesture.Value();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v74, 1, 1, v57);
          type metadata accessor for GesturePhase();
          return swift_storeEnumTagMultiPayload();
        }
        uint64_t v55 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(void *)(v55 - 8) + 8))(v51, v55);
      }
      if (!swift_getEnumCaseMultiPayload())
      {
        unsigned int v56 = v63;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v63, v36, v37);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v56, 1, v44) == 1) {
          goto LABEL_19;
        }
        uint64_t v62 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(void *)(v62 - 8) + 8))(v63, v62);
      }
      uint64_t v80 = v71;
      uint64_t v81 = v73;
      uint64_t v82 = v32;
      uint64_t v83 = v72;
      type metadata accessor for ExclusiveGesture.Value();
      type metadata accessor for GesturePhase();
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v38, TupleTypeMetadata2);
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ExclusivePhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ExclusiveGesture.Value();
  uint64_t v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ExclusivePhase<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ExclusivePhase.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t ExclusivePreference.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v134 = a8;
  long long v125 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v123 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v103 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v106 = (char *)&v103 - v19;
  MEMORY[0x270FA5388](v20);
  int v107 = (char *)&v103 - v21;
  uint64_t v120 = v22;
  uint64_t v113 = type metadata accessor for Optional();
  uint64_t v127 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v105 = (uint64_t)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v104 = (uint64_t)&v103 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v108 = (uint64_t)&v103 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v111 = (uint64_t)&v103 - v29;
  MEMORY[0x270FA5388](v30);
  long long v118 = (char **)((char *)&v103 - v31);
  uint64_t v117 = swift_getAssociatedTypeWitness();
  uint64_t v32 = type metadata accessor for GesturePhase();
  uint64_t v116 = swift_getAssociatedTypeWitness();
  uint64_t v33 = type metadata accessor for GesturePhase();
  uint64_t v129 = v32;
  uint64_t v34 = v33;
  uint64_t v132 = v33;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v110 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  v128 = (char *)&v103 - v35;
  uint64_t v133 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v36);
  long long v115 = (char *)&v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  unint64_t v40 = (char *)&v103 - v39;
  uint64_t v135 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v41);
  long long v109 = (char *)&v103 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  int64_t v114 = (char *)&v103 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v103 - v46;
  SimultaneousPreference.phase1.getter((uint64_t)&v103 - v46);
  unint64_t v119 = a1;
  uint64_t v130 = a2;
  id v126 = a3;
  long long v124 = a4;
  uint64_t v48 = a5;
  long long v121 = a6;
  unsigned int v122 = a7;
  int v50 = v128;
  uint64_t v49 = v129;
  SimultaneousPreference.phase2.getter((uint64_t)v40);
  uint64_t v51 = &v50[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v52 = v47;
  uint64_t v53 = v133;
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v50, v52, v49);
  uint64_t v54 = v40;
  uint64_t v55 = v127;
  unsigned int v56 = v48;
  uint64_t v57 = v132;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v51, v54, v132);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) < 2) {
    goto LABEL_14;
  }
  uint64_t v59 = v114;
  uint64_t v61 = v115;
  uint64_t v60 = v116;
  long long v112 = v51;
  uint64_t v62 = v117;
  if (EnumCaseMultiPayload) {
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v114, v50, v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v59, 1, v62) != 1)
  {
    uint64_t v70 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v70 - 8) + 8))(v59, v70);
    uint64_t v51 = v112;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v53 + 8))(v51, v57);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v135 + 8))(v50, v49);
    uint64_t v71 = (uint64_t (*)(void, void, void))v118;
    uint64_t v72 = v134;
    SimultaneousPreference.value1.getter(v119, (uint64_t)v118);
    uint64_t v73 = v123;
    uint64_t v74 = v120;
    if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v123 + 48))(v71, 1, v120) != 1) {
      return (*(uint64_t (**)(char *, void, uint64_t))(v73 + 32))(v125, v71, v74);
    }
    (*(void (**)(char *, uint64_t))(v72 + 16))(v56, v72);
    return (*(uint64_t (**)(uint64_t (*)(void, void, void), uint64_t))(v55 + 8))(v71, v113);
  }
  if (swift_getEnumCaseMultiPayload() == 3) {
    goto LABEL_15;
  }
LABEL_5:
  int v63 = swift_getEnumCaseMultiPayload();
  if ((v63 - 1) < 2) {
    goto LABEL_6;
  }
  if (v63)
  {
LABEL_27:
    (*(void (**)(char *))(v134 + 16))(v56);
    return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v50, TupleTypeMetadata2);
  }
  (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v61, v112, v132);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v61, 1, v60) != 1)
  {
    uint64_t v75 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v75 - 8) + 8))(v61, v75);
    goto LABEL_6;
  }
  int v69 = swift_getEnumCaseMultiPayload();
  if (v69)
  {
    if (v69 != 3) {
      goto LABEL_27;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t))(v133 + 8))(v112, v132);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v50, v49);
    uint64_t v64 = v111;
    uint64_t v65 = v134;
    SimultaneousPreference.value2.getter(v119, v111);
    uint64_t v66 = v123;
    uint64_t v67 = v120;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v64, 1, v120) != 1) {
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 32))(v125, v64, v67);
    }
    (*(void (**)(char *, uint64_t))(v65 + 16))(v56, v65);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v64, v113);
  }
  uint64_t v76 = v109;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v109, v50, v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v76, 1, v62) != 1)
  {
    uint64_t v89 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8))(v76, v89);
    goto LABEL_27;
  }
  uint64_t v77 = v108;
  unint64_t v78 = v119;
  SimultaneousPreference.value1.getter(v119, v108);
  uint64_t v79 = v123;
  uint64_t v80 = *(char ***)(v123 + 48);
  uint64_t v81 = v120;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v80)(v77, 1, v120) == 1)
  {
    TupleTypeMetadata2 = *(void *)(v127 + 8);
    ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v77, v113);
    uint64_t v82 = v105;
    SimultaneousPreference.value2.getter(v78, v105);
    int v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80)(v82, 1, v81);
    unsigned int v84 = v125;
    uint64_t v85 = v107;
    uint64_t v86 = v133;
    uint64_t v87 = v135;
    uint64_t v88 = v112;
    if (v83 == 1)
    {
      ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v82, v113);
      (*(void (**)(char *))(v134 + 16))(v56);
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v84, v85, v81);
    }
    else
    {
      int32x2_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 32);
      v96(v107, v82, v81);
      v96(v84, (uint64_t)v85, v81);
    }
  }
  else
  {
    long long v118 = v80;
    unint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 32);
    TupleTypeMetadata2 = (v79 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v91 = v106;
    v90(v106, v77, v81);
    uint64_t v92 = v104;
    uint64_t v93 = v56;
    uint64_t v94 = v134;
    SimultaneousPreference.value2.getter(v78, v104);
    int v95 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v118)(v92, 1, v81);
    uint64_t v87 = v135;
    if (v95 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v92, v113);
    }
    else
    {
      unint64_t v97 = v103;
      uint64_t v98 = ((uint64_t (*)(char *, uint64_t, uint64_t))v90)(v103, v92, v81);
      double v99 = MEMORY[0x270FA5388](v98);
      int v100 = v124;
      *(&v103 - 8) = v126;
      *(&v103 - 7) = v100;
      uint64_t v101 = v121;
      *(&v103 - 6) = v93;
      *(&v103 - 5) = v101;
      *(&v103 - 4) = v122;
      *(&v103 - 3) = (char *)v94;
      *(&v103 - 2) = v97;
      (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v94 + 24))(v91, partial apply for closure #1 in SimultaneousPreference.mergedValue(), v99);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v97, v81);
    }
    uint64_t v86 = v133;
    uint64_t v102 = v107;
    v90(v107, (uint64_t)v91, v81);
    uint64_t v88 = v112;
    v90(v125, (uint64_t)v102, v81);
  }
  (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v132);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v128, v129);
}

uint64_t protocol witness for Rule.value.getter in conformance ExclusivePreference<A, B, C>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return ExclusivePreference.value.getter(*(void *)v2, *(void *)(v2 + 8), *(char **)(a1 + 16), *(char **)(a1 + 24), *(char **)(a1 + 32), *(char **)(a1 + 40), *(char **)(a1 + 48), *(void *)(a1 + 56), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance ExclusivePreference<A, B, C>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v17 - v12;
  static SimultaneousPreference.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static ExclusiveGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for ExclusiveState()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<_GestureInputs.InheritedPhase>()
{
  if (!lazy cache variable for type metadata for Attribute<_GestureInputs.InheritedPhase>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_GestureInputs.InheritedPhase>);
    }
  }
}

uint64_t partial apply for closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #2 in static ExclusiveGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for ExclusiveGesture.Value()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ExclusivePhase()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ExclusivePreference()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for ExclusiveGesture<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ExclusiveGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ExclusiveGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245B093D0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for ExclusiveGesture.Value()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ExclusiveGesture.Value(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for ExclusiveGesture.Value(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v4) {
    unint64_t v6 = v4;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1) {
    uint64_t v12 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v12 = v3;
  }
  if (v7 == 1) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = AssociatedTypeWitness;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);

  return v14(a1, v13);
}

uint64_t initializeWithCopy for ExclusiveGesture.Value(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *assignWithCopy for ExclusiveGesture.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t initializeWithTake for ExclusiveGesture.Value(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *assignWithTake for ExclusiveGesture.Value(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ExclusiveGesture.Value(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void storeEnumTagSinglePayload for ExclusiveGesture.Value(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245B0A578);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for ExclusiveGesture.Value(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  uint64_t result = a1[v3];
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v8 = v6 + 2;
        if (v3 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for ExclusiveGesture.Value(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  if (a2 > 1)
  {
    size_t v7 = *(void *)(v4 + 64);
    size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 <= v7) {
      size_t v9 = v7;
    }
    else {
      size_t v9 = v8;
    }
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(void *)(v5 + 64)) {
      unint64_t v6 = *(void *)(v5 + 64);
    }
    a1[v6] = a2;
  }
}

uint64_t base witness table accessor for _AttributeBody in ExclusivePreference<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ExclusivePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ExclusiveState<A>()
{
  return swift_getWitnessTable();
}

CGFloat _RotationEffect.Data.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  CGFloat v3 = *v1;
  double v4 = v1[1];
  double v5 = v1[2];
  CGAffineTransformMakeTranslation(&v10, v4, v5);
  CGAffineTransformRotate(&v9, &v10, v3);
  CGAffineTransform v10 = v9;
  CGAffineTransformTranslate(&v9, &v10, -v4, -v5);
  CGFloat result = v9.a;
  long long v7 = *(_OWORD *)&v9.c;
  long long v8 = *(_OWORD *)&v9.tx;
  *a1 = *(_OWORD *)&v9.a;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

void _RotationEffect.angle.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*_RotationEffect.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.anchor.getter(double a1, double a2)
{
  return a2;
}

void _RotationEffect.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_RotationEffect.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.Data.angle.getter()
{
  return *(double *)v0;
}

void _RotationEffect.Data.angle.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*_RotationEffect.Data.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _RotationEffect.Data.anchor.getter()
{
  return *(double *)(v0 + 8);
}

void _RotationEffect.Data.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_RotationEffect.Data.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_RotationEffect::Data __swiftcall _RotationEffect.Data.init()()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  return result;
}

unsigned char *_RotationEffect.Data.init(_:size:layoutDirection:)@<X0>(unsigned char *result@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  int v7 = *result;
  double v8 = a4 * a6;
  double v9 = a5 * a7;
  double v10 = a6 - v8;
  if (*result) {
    a3 = (a3 * -128.0 + 0.0) * 0.0078125;
  }
  *a2 = a3;
  if (v7) {
    double v11 = v10;
  }
  else {
    double v11 = v8;
  }
  a2[1] = v11;
  a2[2] = v9;
  return result;
}

CGFloat _RotationEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, CGFloat a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  CGAffineTransformMakeTranslation(&v16, a2 * a5, a3 * a6);
  CGAffineTransformRotate(&v15, &v16, a4);
  CGAffineTransform v16 = v15;
  CGAffineTransformTranslate(&v15, &v16, -(a2 * a5), -(a3 * a6));
  CGFloat result = v15.a;
  long long v13 = *(_OWORD *)&v15.c;
  long long v14 = *(_OWORD *)&v15.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v15.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v14;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

double _RotationEffect.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double _RotationEffect.animatableData.setter(double a1, double a2, double a3)
{
  double result = a1 * 0.0078125;
  *CGFloat v3 = result;
  v3[1] = a2 * 0.0078125;
  v3[2] = a3 * 0.0078125;
  return result;
}

uint64_t (*_RotationEffect.animatableData.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  float64_t v2 = v1[1].f64[0] * 128.0;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(float64_t *)(a1 + 16) = v2;
  return _RotationEffect.animatableData.modify;
}

BOOL static _RotationEffect.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  BOOL v6 = a2 == a5;
  if (a3 != a6) {
    BOOL v6 = 0;
  }
  return a1 == a4 && v6;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance _RotationEffect@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  CGFloat v7 = *v3;
  double v8 = v3[1];
  double v9 = v3[2];
  CGAffineTransformMakeTranslation(&v14, v8 * a2, v9 * a3);
  CGAffineTransformRotate(&v13, &v14, v7);
  CGAffineTransform v14 = v13;
  CGAffineTransformTranslate(&v13, &v14, -(v8 * a2), -(v9 * a3));
  CGFloat result = v13.a;
  long long v11 = *(_OWORD *)&v13.c;
  long long v12 = *(_OWORD *)&v13.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v13.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v11;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v12;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _RotationEffect(double *a1, double *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

double protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance _RotationEffect@<D0>(double *a1@<X0>, unsigned char *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v6 = a1[1] * a4;
  double v7 = a1[2] * a5;
  double v8 = a4 - v6;
  if (*a2) {
    double v9 = v8;
  }
  else {
    double v9 = v6;
  }
  if (*a2) {
    double v10 = (*a1 * -128.0 + 0.0) * 0.0078125;
  }
  else {
    double v10 = *a1;
  }
  uint64_t v11 = swift_allocObject();
  *(double *)(v11 + 16) = v10;
  *(double *)(v11 + 24) = v9;
  *(double *)(v11 + 32) = v7;
  double result = 0.0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(unsigned char *)(v11 + 88) = 2;
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 8;
  return result;
}

float64_t protocol witness for Animatable.animatableData.getter in conformance _RotationEffect@<D0>(float64x2_t *a1@<X8>)
{
  float64_t result = v1[1].f64[0] * 128.0;
  *a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  a1[1].f64[0] = result;
  return result;
}

float64_t protocol witness for Animatable.animatableData.setter in conformance _RotationEffect(float64x2_t *a1)
{
  float64_t result = a1[1].f64[0] * 0.0078125;
  *unint64_t v1 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v1[1].f64[0] = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _RotationEffect(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  float64_t v2 = v1[1].f64[0] * 128.0;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(float64_t *)(a1 + 16) = v2;
  return _RotationEffect.animatableData.modify;
}

double _RotationEffect.animatableData.modify(uint64_t a1)
{
  unint64_t v1 = *(float64x2_t **)(a1 + 24);
  double result = *(double *)(a1 + 16) * 0.0078125;
  *unint64_t v1 = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  v1[1].f64[0] = result;
  return result;
}

uint64_t View.rotationEffect(_:anchor:)(uint64_t a1, double a2, double a3, double a4)
{
  *(double *)double v5 = a2;
  *(double *)&v5[1] = a3;
  *(double *)&v5[2] = a4;
  return View.modifier<A>(_:)(v5, a1, &type metadata for _RotationEffect);
}

int64_t _RotationEffect.encode(to:)(int64_t result, double a2, double a3, double a4)
{
  int64_t v7 = result;
  if (a2 != 0.0)
  {
    double v4 = a2;
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v8 = *(void *)(v7 + 8);
    double result = v8 + 8;
    if (__OFADD__(v8, 8)) {
      goto LABEL_17;
    }
    if (*(void *)(v7 + 16) < result) {
      goto LABEL_18;
    }
    *(void *)(v7 + 8) = result;
    *(double *)(*(void *)v7 + v8) = v4;
  }
  while (a3 != 0.5 || a4 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v10 = *(void *)(v7 + 8);
    uint64_t v11 = *(void **)(v7 + 24);
    double result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      double result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      uint64_t v11 = (void *)result;
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1)
    {
      double result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
      uint64_t v11 = (void *)result;
    }
    _OWORD v11[2] = v13 + 1;
    v11[v13 + 4] = v10;
    *(void *)(v7 + 24) = v11;
    if (!__OFADD__(v10, 1))
    {
      *(void *)(v7 + 8) = v10 + 1;
      UnitPoint.encode(to:)((double *)v7, a3, a4);
      return ProtobufEncoder.endLengthDelimited()();
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    double result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)double result = v4;
  }
  return result;
}

double _RotationEffect.init(from:)(void *a1)
{
  return specialized _RotationEffect.init(from:)(a1);
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _RotationEffect(int64_t a1)
{
  return _RotationEffect.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _RotationEffect(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized _RotationEffect.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
}

uint64_t _RotationEffect.Data.encode(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  double v5 = *v2;
  double v4 = v2[1];
  double v6 = v2[2];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v7 = *(void *)(a1 + 8);
    int64_t isUniquelyReferenced_nonNull_native = v7 + 8;
    if (__OFADD__(v7, 8)) {
      goto LABEL_12;
    }
    if (*(void *)(a1 + 16) < isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    *(void *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
    *(double *)(*(void *)a1 + v7) = v5;
  }
  while (1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void **)(a1 + 24);
    int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      uint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
      uint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
    }
    v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(void *)(a1 + 24) = v10;
    if (!__OFADD__(v9, 1)) {
      break;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    *(double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v5;
  }
  *(void *)(a1 + 8) = v9 + 1;
  CGPoint.encode(to:)((double *)a1, v4, v6);
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t _RotationEffect.Data.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  CGFloat v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = 0;
  if (v5 >= v6)
  {
    double v8 = 0.0;
    double v9 = 0.0;
LABEL_4:
    v3[3] = 0;
    *a2 = v9;
    a2[1] = v8;
    *((void *)a2 + 2) = v7;
    return result;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  while (1)
  {
    double result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v5 < v11) {
        goto LABEL_14;
      }
      if (v11 < v5) {
        goto LABEL_51;
      }
      v3[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_51;
    }
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        unint64_t v12 = result & 7;
        if (v12 == 5)
        {
          uint64_t v24 = (float *)v3[1];
          if (v6 < (unint64_t)(v24 + 1)) {
            goto LABEL_51;
          }
          float v25 = *v24;
          v3[1] = v24 + 1;
          double v9 = v25;
        }
        else
        {
          if (v12 == 2)
          {
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_56;
            }
            unint64_t v13 = (double *)v3[1];
            if (v6 < (unint64_t)v13 + result) {
              goto LABEL_51;
            }
            v3[3] = 9;
            v3[4] = (char *)v13 + result;
          }
          else
          {
            if (v12 != 1) {
              goto LABEL_51;
            }
            unint64_t v13 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v13 + 1)) {
            goto LABEL_51;
          }
          double v9 = *v13;
          v3[1] = v13 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            double result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              goto LABEL_7;
            }
            return result;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 < v10) {
              goto LABEL_51;
            }
            goto LABEL_6;
          case 2uLL:
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_51;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_51;
            }
            goto LABEL_6;
          default:
            goto LABEL_51;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_51;
    }
    CGAffineTransform v14 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      CGAffineTransform v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      CGAffineTransform v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    _OWORD v14[2] = v16 + 1;
    v14[v16 + 4] = v6;
    v3[5] = v14;
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v17 = v3[1] + result;
    if (v6 < v17) {
      goto LABEL_51;
    }
    v3[2] = v17;
    double v18 = specialized CGPoint.init(from:)(v3);
    uint64_t v20 = (void *)v3[5];
    if (!v20[2]) {
      goto LABEL_55;
    }
    double v8 = v18;
    uint64_t v7 = v19;
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v21 = v20[2];
      if (!v21) {
        goto LABEL_50;
      }
    }
    else
    {
      double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
      uint64_t v20 = (void *)result;
      uint64_t v21 = *(void *)(result + 16);
      if (!v21)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    uint64_t v22 = v21 - 1;
    uint64_t v23 = v20[v22 + 4];
    v20[2] = v22;
    v3[5] = v20;
    v3[2] = v23;
LABEL_7:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  uint64_t v28 = *(void *)(result + 16);
  if (!v28)
  {
    __break(1u);
    JUMPOUT(0x245B0B524);
  }
  uint64_t v26 = v28 - 1;
  uint64_t v27 = *(void *)(result + 8 * v26 + 32);
  *(void *)(result + 16) = v26;
  v3[5] = result;
  v3[2] = v27;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _RotationEffect.Data(uint64_t a1)
{
  return _RotationEffect.Data.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _RotationEffect.Data@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return _RotationEffect.Data.init(from:)(a1, a2);
}

double specialized _RotationEffect.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  double v6 = 0.0;
  if (v4 >= v5)
  {
LABEL_2:
    a1[3] = 0;
    return v6;
  }
  while (1)
  {
    unint64_t v8 = a1[3];
    if (v8)
    {
      unint64_t v9 = a1[4];
      if (v4 < v9) {
        goto LABEL_12;
      }
      if (v9 < v4) {
        goto LABEL_49;
      }
      a1[3] = 0;
    }
    unint64_t v8 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v8 <= 7) {
      goto LABEL_49;
    }
LABEL_12:
    if (v8 >> 3 != 2)
    {
      if (v8 >> 3 == 1)
      {
        unint64_t v10 = v8 & 7;
        if (v10 == 5)
        {
          uint64_t v19 = (float *)a1[1];
          if (v5 < (unint64_t)(v19 + 1)) {
            goto LABEL_49;
          }
          float v20 = *v19;
          a1[1] = v19 + 1;
          double v6 = v20;
        }
        else
        {
          if (v10 == 2)
          {
            uint64_t v21 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v6;
            }
            if (v21 < 0) {
              goto LABEL_54;
            }
            unint64_t v11 = (double *)a1[1];
            if (v5 < (unint64_t)v11 + v21) {
              goto LABEL_49;
            }
            a1[3] = 9;
            a1[4] = (char *)v11 + v21;
          }
          else
          {
            if (v10 != 1) {
              goto LABEL_49;
            }
            unint64_t v11 = (double *)a1[1];
          }
          if (v5 < (unint64_t)(v11 + 1)) {
            goto LABEL_49;
          }
          double v6 = *v11;
          a1[1] = v11 + 1;
        }
      }
      else
      {
        switch(v8 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v1) {
              goto LABEL_5;
            }
            return v6;
          case 1uLL:
            unint64_t v7 = a1[1] + 8;
            if (v5 < v7) {
              goto LABEL_49;
            }
            goto LABEL_4;
          case 2uLL:
            uint64_t v22 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v6;
            }
            if (v22 < 0) {
              goto LABEL_55;
            }
            unint64_t v7 = a1[1] + v22;
            if (v5 < v7) {
              goto LABEL_49;
            }
LABEL_4:
            a1[1] = v7;
            break;
          case 5uLL:
            unint64_t v7 = a1[1] + 4;
            if (v5 < v7) {
              goto LABEL_49;
            }
            goto LABEL_4;
          default:
            goto LABEL_49;
        }
      }
      goto LABEL_5;
    }
    if ((v8 & 7) != 2) {
      goto LABEL_49;
    }
    uint64_t v2 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    v2[v13 + 4] = v5;
    a1[5] = v2;
    uint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v14 < 0) {
      break;
    }
    unint64_t v15 = a1[1] + v14;
    if (v5 < v15) {
      goto LABEL_49;
    }
    a1[2] = v15;
    specialized UnitPoint.init(from:)(a1);
    uint64_t v2 = (void *)a1[5];
    if (!v2[2]) {
      goto LABEL_53;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v16 = v2[2];
      if (!v16) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v16 = v2[2];
      if (!v16)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return v6;
      }
    }
    uint64_t v17 = v16 - 1;
    uint64_t v18 = v2[v17 + 4];
    v2[2] = v17;
    a1[5] = v2;
    a1[2] = v18;
LABEL_5:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v27 = v26[2];
  if (!v27)
  {
    __break(1u);
    JUMPOUT(0x245B0B904);
  }
  uint64_t v24 = v27 - 1;
  uint64_t v25 = v26[v24 + 4];
  v26[2] = v24;
  a1[5] = v26;
  a1[2] = v25;
  return v6;
}

unint64_t instantiation function for generic protocol witness table for _RotationEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _RotationEffect()
{
  return lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float64_t sub_245B0BA78@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result = a1[1].f64[0] * 128.0;
  *a2 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  a2[1].f64[0] = result;
  return result;
}

float64_t sub_245B0BAA0(float64x2_t *a1, float64x2_t *a2)
{
  float64_t result = a1[1].f64[0] * 0.0078125;
  *a2 = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  a2[1].f64[0] = result;
  return result;
}

ValueMetadata *type metadata accessor for _RotationEffect.Data()
{
  return &type metadata for _RotationEffect.Data;
}

uint64_t sub_245B0BAD8()
{
  return swift_getWitnessTable();
}

uint64_t sub_245B0BB3C()
{
  return swift_deallocObject();
}

uint64_t AnyGradient.provider.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AnyGradient.provider.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyGradient.init(_:)(uint64_t a1)
{
  type metadata accessor for GradientBox<Gradient>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void type metadata accessor for GradientBox<Gradient>()
{
  if (!lazy cache variable for type metadata for GradientBox<Gradient>)
  {
    lazy protocol witness table accessor for type Gradient and conformance Gradient();
    unint64_t v0 = type metadata accessor for GradientBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GradientBox<Gradient>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Gradient and conformance Gradient()
{
  unint64_t result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Gradient and conformance Gradient;
  if (!lazy protocol witness table cache variable for type Gradient and conformance Gradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient and conformance Gradient);
  }
  return result;
}

uint64_t AnyGradient.resolve(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)a2 + 104))(&v3);
}

uint64_t AnyGradient.fallbackColor(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)a2 + 112))(&v3);
}

uint64_t AnyGradient._apply(to:)(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);

  return swift_release();
}

uint64_t AnyGradientBox.apply(to:)(uint64_t a1)
{
  swift_retain();
  specialized Paint._apply(to:)(a1);

  return swift_release();
}

uint64_t AnyGradient.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 120))();
}

uint64_t static AnyGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1;
  }
}

Swift::Int AnyGradient.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 120))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyGradient()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyGradient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyGradient()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 120))(v3);
  return Hasher._finalize()();
}

uint64_t GradientProvider.fallbackColor(in:)()
{
  return 0;
}

uint64_t _AnyLinearGradient.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void AnyGradientBox.resolve(in:)()
{
}

void AnyGradientBox.fallbackColor(in:)()
{
}

void AnyGradientBox.hash(into:)()
{
}

uint64_t AnyGradientBox.deinit()
{
  return v0;
}

uint64_t AnyGradientBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t GradientBox.fallbackColor(in:)(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(v2 + 136) + 24))(&v4, *(void *)(v2 + 128));
}

uint64_t GradientBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t GradientBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 144));
}

uint64_t _AnyLinearGradient.gradient.getter()
{
  return swift_retain();
}

uint64_t _AnyLinearGradient.gradient.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_AnyLinearGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _AnyLinearGradient.startPoint.getter()
{
  return *(double *)(v0 + 8);
}

void _AnyLinearGradient.startPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*_AnyLinearGradient.startPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _AnyLinearGradient.endPoint.getter()
{
  return *(double *)(v0 + 24);
}

void _AnyLinearGradient.endPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*_AnyLinearGradient.endPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyRadialGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyRadialGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _AnyRadialGradient.startRadius.getter()
{
  return *(double *)(v0 + 24);
}

void _AnyRadialGradient.startRadius.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*_AnyRadialGradient.startRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _AnyRadialGradient.endRadius.getter()
{
  return *(double *)(v0 + 32);
}

void _AnyRadialGradient.endRadius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*_AnyRadialGradient.endRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.startRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyEllipticalGradient.endRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.startAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_AnyAngularGradient.endAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EitherGradient.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)v2;
  if (*(unsigned char *)(v2 + 8))
  {
    v11[0] = *a1;
    v11[1] = v5;
    unint64_t v7 = *(void (**)(void *))(*(void *)v6 + 104);
    swift_retain();
    v7(v11);
    return outlined consume of EitherGradient(v6, 1);
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v6, 0);
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v6, v4, v5);
    swift_release();
    swift_release();
    uint64_t result = outlined consume of EitherGradient(v6, 0);
    if (one-time initialization token for default != -1) {
      uint64_t result = swift_once();
    }
    char v10 = static ResolvedGradient.ColorSpace.default;
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = v10;
  }
  return result;
}

uint64_t EitherGradient.fallbackColor(in:)(long long *a1)
{
  if (*(unsigned char *)(v1 + 8) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)v1;
  long long v6 = *a1;
  long long v3 = *(uint64_t (**)(long long *))(*(void *)v2 + 112);
  swift_retain();
  uint64_t v4 = v3(&v6);
  outlined consume of EitherGradient(v2, 1);
  return v4;
}

uint64_t EitherGradient.constantColor.getter()
{
  if (v0[8]) {
    return 0;
  }
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1 != 1)
  {
    if (!v1)
    {
      if (one-time initialization token for clear != -1) {
        swift_once();
      }
      return swift_retain();
    }
    return 0;
  }
  return swift_retain();
}

uint64_t EitherGradient.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  if (v4)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 120);
    swift_retain();
    v5(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }

  return outlined consume of EitherGradient(v3, v4);
}

Swift::Int EitherGradient.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v3(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EitherGradient(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  if (v4)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 120);
    swift_retain();
    v5(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }

  return outlined consume of EitherGradient(v3, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EitherGradient()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v3(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  return Hasher._finalize()();
}

uint64_t specialized static EitherGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0)
    {
      outlined copy of EitherGradient(*(void *)a2, 0);
      outlined copy of EitherGradient(v2, 0);
      char v7 = specialized static Array<A>.== infix(_:_:)(v2, v4);
      char v3 = 0;
      char v5 = 0;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0)
  {
LABEL_6:
    outlined copy of EitherGradient(*(void *)a2, *(unsigned char *)(a2 + 8));
    outlined copy of EitherGradient(v2, v3);
    char v7 = 0;
    goto LABEL_9;
  }
  if (v2 == v4)
  {
    char v3 = 1;
    outlined copy of EitherGradient(*(void *)a2, 1);
    outlined copy of EitherGradient(v2, 1);
    char v5 = 1;
    char v7 = 1;
  }
  else
  {
    long long v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
    char v3 = 1;
    outlined copy of EitherGradient(*(void *)a2, 1);
    outlined copy of EitherGradient(v2, 1);
    char v7 = v6(v4);
    char v5 = 1;
  }
LABEL_9:
  outlined consume of EitherGradient(v2, v3);
  outlined consume of EitherGradient(v4, v5);
  return v7 & 1;
}

unint64_t lazy protocol witness table accessor for type AnyGradient and conformance AnyGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient;
  if (!lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyGradient and conformance AnyGradient);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Gradient(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Gradient and conformance Gradient();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EitherGradient and conformance EitherGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient;
  if (!lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EitherGradient and conformance EitherGradient);
  }
  return result;
}

uint64_t dispatch thunk of GradientProvider.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GradientProvider.fallbackColor(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t method lookup function for AnyGradientBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyGradientBox);
}

uint64_t dispatch thunk of AnyGradientBox.resolve(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AnyGradientBox.fallbackColor(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnyGradientBox.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

ValueMetadata *type metadata accessor for _AnyLinearGradient()
{
  return &type metadata for _AnyLinearGradient;
}

ValueMetadata *type metadata accessor for _AnyRadialGradient()
{
  return &type metadata for _AnyRadialGradient;
}

ValueMetadata *type metadata accessor for _AnyEllipticalGradient()
{
  return &type metadata for _AnyEllipticalGradient;
}

void *assignWithCopy for _AnyLinearGradient(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for _AnyLinearGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _AnyAngularGradient()
{
  return &type metadata for _AnyAngularGradient;
}

uint64_t initializeBufferWithCopyOfBuffer for EitherGradient(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for EitherGradient(uint64_t a1)
{
  return outlined consume of EitherGradient(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for EitherGradient(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of EitherGradient(v5, v6);
  return a1;
}

uint64_t assignWithTake for EitherGradient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of EitherGradient(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EitherGradient(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EitherGradient(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for EitherGradient(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EitherGradient()
{
  return &type metadata for EitherGradient;
}

uint64_t specialized _GraphInputs.append<A, B>(_:to:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized _GraphInputs.recordReusableInput<A>(_:)();
  uint64_t v7 = swift_retain();
  uint64_t v8 = specialized find<A>(_:key:)(v7);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3 & 1;
  *(void *)(v10 + 40) = v9;
  swift_retain();
  outlined copy of BodyInputElement();
  specialized closure #1 in PropertyList.subscript.setter(v3, v10);
  swift_release();
  return swift_release();
}

uint64_t static _ViewModifier_Content._viewListCount(inputs:body:)()
{
  return 0;
}

uint64_t static PlaceholderContentView._makeViewList(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  long long v12 = *(_OWORD *)(a1 + 5);
  uint64_t v7 = a1[7];
  int v8 = *((_DWORD *)a1 + 16);
  uint64_t v9 = a1[9];
  char v10 = *((unsigned char *)a1 + 80);
  type metadata accessor for PlaceholderContentView();
  uint64_t v13 = v4;
  int v14 = v5;
  uint64_t v15 = v6;
  long long v16 = *(_OWORD *)(a1 + 3);
  long long v17 = v12;
  uint64_t v18 = v7;
  int v19 = v8;
  uint64_t v20 = v9;
  char v21 = v10;
  return static ViewModifierContentProvider.providerMakeViewList(view:inputs:)((uint64_t)&v13, a2);
}

uint64_t static PlaceholderContentView._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for PlaceholderContentView();
  v7[0] = v1;
  v7[1] = v2;
  int v8 = v3;
  uint64_t v9 = v4;
  return static ViewModifierContentProvider.providerViewListCount(inputs:)(v7, v5);
}

uint64_t static ViewModifierContentProvider.providerViewListCount(inputs:)(uint64_t *a1, uint64_t a2)
{
  void (*v7)(uint64_t *__return_ptr, void *);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void v12[2];
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;

  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = (void *)a1[3];
  uint64_t v15 = *a1;
  long long v16 = v3;
  long long v17 = v4;
  uint64_t v18 = v5;
  uint64_t v6 = type metadata accessor for BodyCountInput();
  type metadata accessor for (_:)();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.popLast<A, B>(_:)(v6, (uint64_t)&protocol witness table for BodyCountInput<A>, (uint64_t)v12);
  uint64_t v7 = (void (*)(uint64_t *__return_ptr, void *))v12[0];
  if (v12[0])
  {
    if (specialized Sequence<>.contains(_:)(a2, (uint64_t)v5))
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
      return 0;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      char v10 = v5[2];
      uint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      v5[2] = v10 + 1;
      v5[v10 + 4] = a2;
      v12[0] = v15;
      v12[1] = v3;
      uint64_t v13 = v4;
      int v14 = v5;
      swift_retain();
      swift_bridgeObjectRetain();
      v7(&v11, v12);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v7);
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return v11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlaceholderContentView<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return static PlaceholderContentView._makeViewList(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlaceholderContentView<A>(uint64_t a1)
{
  return static PlaceholderContentView._viewListCount(inputs:)(a1);
}

uint64_t _ViewListInputs.pushModifierBody<A>(_:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  char v6 = 1;
  uint64_t v3 = type metadata accessor for BodyInput();
  return _GraphInputs.append<A, B>(_:to:)((uint64_t)v5, v3, v3, (uint64_t)&type metadata for BodyInputElement, (uint64_t)&protocol witness table for BodyInput<A>, (uint64_t)&protocol witness table for BodyInputElement);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BodyInputElement(uint64_t a1, uint64_t a2)
{
  return specialized static BodyInputElement.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance BodyInputElement(uint64_t a1)
{
  return specialized BodyInputElement.tryToReuse(by:indirectMap:testOnly:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

void specialized static ViewModifier.makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  char v4 = v6;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v5) = v4;
  specialized static ViewModifier.makeBody(modifier:inputs:fields:)();
}

void sub_245B0D5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,uint64_t a37,int a38,unsigned int a39,int a40,int a41,uint64_t a42,uint64_t a43,int a44,int a45,int a46,int a47,int a48,int a49,int a50)
{
  swift_retain();
  specialized _GraphInputs.append<A, B>(_:to:)(v51, v50, 0);
  swift_release();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)(v52 - 208) = a35;
  *(_DWORD *)(v52 - 200) = a36;
  *(void *)(v52 - 192) = a37;
  *(_DWORD *)(v52 - 184) = a38;
  *(void *)(v52 - 180) = a39;
  *(_DWORD *)(v52 - 172) = a41;
  *(void *)(v52 - 168) = a42;
  *(void *)(v52 - 160) = a43;
  *(_DWORD *)(v52 - 152) = a44;
  *(_DWORD *)(v52 - 148) = a45;
  *(_DWORD *)(v52 - 144) = a46;
  *(_DWORD *)(v52 - 140) = a47;
  *(_DWORD *)(v52 - 136) = a48;
  *(_DWORD *)(v52 - 132) = a49;
  *(_DWORD *)(v52 - 128) = a50;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static View.makeView(view:inputs:)(a24, v52 - 208);
}

uint64_t sub_245B0D738()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v15 = v7;
  if (v0)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v13, &v14);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v1 = v13[0];
  uint64_t v2 = v13[1];
  if ((v8 & 1) == 0)
  {
    char v14 = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v6, v11, v10, v9, v5, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *long long v12 = v1;
  v12[1] = v2;
  return result;
}

uint64_t specialized static ViewModifier.makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v5, (uint64_t)&v73);
  long long v10 = v73;
  unsigned __int8 v11 = v74[0];
  unsigned int v12 = *(_DWORD *)&v74[4];
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v69 = *(_OWORD *)(a2 + 32);
  long long v70 = v13;
  long long v71 = *(_OWORD *)(a2 + 64);
  int v72 = *(_DWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 16);
  long long v67 = *(_OWORD *)a2;
  long long v68 = v14;
  outlined retain of _ViewInputs(a2);
  char v42 = v11;
  LOBYTE(v73) = v11;
  int v34 = a1;
  specialized static ViewModifier.makeBody(modifier:inputs:fields:)(&v51, (uint64_t)&v73, a1, (uint64_t)&v67, v10, *((uint64_t *)&v10 + 1), v11 | ((unint64_t)v12 << 32));
  unsigned int v44 = v51;
  unint64_t v32 = *((void *)&v73 + 1);
  uint64_t v33 = v73;
  char v41 = v74[0];
  swift_retain();
  specialized _GraphInputs.recordReusableInput<A>(_:)();
  uint64_t v15 = swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v15, (uint64_t *)&v73);
  swift_release();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(unsigned char *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = v73;
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v67, v16);
  swift_release();
  swift_release();
  swift_release();
  _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
  uint64_t v17 = v67;
  int v18 = DWORD2(v67);
  uint64_t v19 = v68;
  unsigned int v38 = HIDWORD(v68);
  int v39 = DWORD2(v68);
  int v31 = v69;
  int v20 = DWORD1(v69);
  uint64_t v22 = *((void *)&v69 + 1);
  uint64_t v21 = v70;
  unsigned int v23 = DWORD2(v70);
  unsigned int v24 = HIDWORD(v70);
  unsigned int v25 = v71;
  unsigned int v26 = DWORD2(v71);
  unsigned int v36 = HIDWORD(v71);
  unsigned int v37 = DWORD1(v71);
  int v35 = v72;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v51 = v17;
  int v52 = v18;
  uint64_t v53 = v19;
  int v54 = v39;
  unsigned int v55 = v38;
  uint64_t v58 = v22;
  uint64_t v59 = v21;
  unsigned int v60 = v23;
  unsigned int v61 = v24;
  unsigned int v62 = v25;
  unsigned int v63 = v37;
  unsigned int v64 = v26;
  unsigned int v65 = v36;
  int v66 = v35;
  int v57 = v20;
  int v56 = 0;
  *(void *)&long long v73 = v17;
  DWORD2(v73) = v18;
  *(void *)uint64_t v74 = v19;
  *(_DWORD *)&v74[8] = v39;
  *(void *)&v74[12] = v38;
  *(_DWORD *)&v74[20] = v20;
  *(void *)&v74[24] = v22;
  *(void *)&long long v75 = v21;
  *((void *)&v75 + 1) = __PAIR64__(v24, v23);
  *(void *)&long long v76 = __PAIR64__(v37, v25);
  *((void *)&v76 + 1) = __PAIR64__(v36, v26);
  int v77 = v35;
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v47 = *(_OWORD *)&v74[16];
  long long v48 = v75;
  long long v49 = v76;
  int v50 = v77;
  v46[0] = v73;
  v46[1] = *(_OWORD *)v74;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _InsetViewModifier._makeView(modifier:inputs:body:)((uint64_t)&v73, v44, (uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v47) = 0;
  uint64_t v27 = *((void *)&v10 + 1);
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v45, v46);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v56 = v31;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v45, &v51);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v27 = *((void *)&v10 + 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  uint64_t v28 = v45[0];
  uint64_t v29 = v45[1];
  if ((v41 & 1) == 0)
  {
    LOBYTE(v51) = v42;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v34, v10, v27, v42, v33, v32);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v28;
  a5[1] = v29;
  return result;
}

uint64_t specialized static ViewModifier.makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v29);
  long long v9 = v29;
  unsigned __int8 v10 = v30;
  unsigned int v11 = DWORD1(v30);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v25 = *(_OWORD *)(a2 + 32);
  long long v26 = v12;
  long long v27 = *(_OWORD *)(a2 + 64);
  char v28 = *(unsigned char *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v23 = *(_OWORD *)a2;
  long long v24 = v13;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v29) = v10;
  int v21 = a1;
  specialized static ViewModifier.makeBody(modifier:inputs:fields:)(&v22, (uint64_t)&v29, a1, (uint64_t)&v23, v9, *((uint64_t *)&v9 + 1), v10 | ((unint64_t)v11 << 32));
  uint64_t v14 = v22;
  unint64_t v19 = *((void *)&v29 + 1);
  uint64_t v20 = v29;
  char v15 = v30;
  specialized _GraphInputs.recordReusableInput<A>(_:)();
  uint64_t v16 = swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t *)&v29);
  swift_release();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  *(unsigned char *)(v17 + 32) = 1;
  *(void *)(v17 + 40) = v29;
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v23, v17);
  swift_release();
  swift_release();
  _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
  long long v31 = v25;
  long long v32 = v26;
  long long v33 = v27;
  char v34 = v28;
  long long v29 = v23;
  long long v30 = v24;
  if (AGSubgraphShouldRecordTree())
  {
    outlined retain of _ViewListInputs((uint64_t)&v29);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(v14, &v29);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v29);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)(v14, &v29);
  }
  outlined release of _ViewListInputs((uint64_t)&v29);
  if ((v15 & 1) == 0)
  {
    LOBYTE(v22) = v10;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v21, v9, *((uint64_t *)&v9 + 1), v10, v20, v19);
  }
  outlined release of _ViewListInputs((uint64_t)&v29);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void specialized static ViewModifier.makeBody(modifier:inputs:fields:)()
{
  if (AGTypeGetKind() - 2 >= 4) {
    _StringGuts.grow(_:)(38);
  }
  else {
    _StringGuts.grow(_:)(29);
  }
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static ViewModifier.makeBody(modifier:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x800000024621C520;
    v15._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v15);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

uint64_t specialized closure #1 in static ViewModifier.viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  v13[0] = a3;
  v13[1] = a4;
  int v14 = a5;
  uint64_t v15 = a6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(a3, &v12);
  swift_release();
  unsigned __int8 v10 = (void *)swift_allocObject();
  v10[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?);
  void v10[3] = v9;
  v10[4] = v12;
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v13, (uint64_t)v10);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static ViewModifier._viewListCount(inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static ViewModifier.makeView(modifier:inputs:body:));
}

uint64_t specialized _GraphInputs.recordReusableInput<A>(_:)()
{
  type metadata accessor for BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>();
  unint64_t v2 = v1;
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v4 + 72);
    int v6 = (uint64_t *)(v4 + 80);
  }
  else
  {
    uint64_t v5 = &static ReusableInputs.defaultValue;
    int v6 = &qword_26B1119A8;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *v5;
  swift_retain();
  swift_release();
  if (v7 && *(void *)(v7 + 16) == v2)
  {
    return swift_release();
  }
  else
  {
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v2;
    v9[3] = &protocol witness table for BodyInput<A>;
    v9[4] = v7;
    swift_retain();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v0, (1 << (v2 >> 4)) | (1 << (v2 >> 10)) | (1 << SBYTE2(v2)) | v8, (uint64_t)v9);
    swift_release_n();
    return swift_release();
  }
}

{
  uint64_t *v0;
  Swift::Int v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t vars8;

  type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for BodyInput);
  unint64_t v2 = v1;
  BloomFilter.init(hashValue:)(v1);
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v4 + 72);
    int v6 = (uint64_t *)(v4 + 80);
  }
  else
  {
    uint64_t v5 = &static ReusableInputs.defaultValue;
    int v6 = &qword_26B1119A8;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *v5;
  swift_retain();
  swift_release();
  if (v7 && *(void *)(v7 + 16) == v2)
  {
    return swift_release();
  }
  else
  {
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v2;
    v9[3] = &protocol witness table for BodyInput<A>;
    v9[4] = v7;
    swift_retain();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v0, v8 | v11, (uint64_t)v9);
    swift_release_n();
    return swift_release();
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SafeAreaPaddingModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static ViewModifier.makeView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  void v11[2] = *(_OWORD *)(a2 + 32);
  void v11[3] = v8;
  v11[4] = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SafeAreaPaddingModifier(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier.makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SafeAreaPaddingModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  uint64_t v10 = specialized closure #1 in static ViewModifier.viewListCount(inputs:body:)((uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?), v9, v5, v6, v7, v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0) {
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized static BodyInputElement.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a6)
    {
      type metadata accessor for (_:_:)();
      return AGCompareValues();
    }
    return 0;
  }
  if (a6) {
    return 0;
  }
  type metadata accessor for (_:_:)();
  return AGCompareValues();
}

uint64_t sub_245B0E94C()
{
  return swift_deallocObject();
}

uint64_t assignWithCopy for BodyInputElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of BodyInputElement();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of BodyInputElement();
  return a1;
}

uint64_t assignWithTake for BodyInputElement(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of BodyInputElement();
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyInputElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t specialized BodyInputElement.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_11;
    }
    outlined copy of BodyInputElement();
    outlined copy of BodyInputElement();
    if (one-time initialization token for v5 != -1) {
      swift_once();
    }
    unsigned int v8 = static Semantics.v5;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_20:
        type metadata accessor for (_:_:)();
        uint64_t v7 = AGCompareValues();
LABEL_25:
        outlined consume of BodyInputElement();
        goto LABEL_26;
      }
    }
    else if (static Semantics.forced < v8)
    {
      goto LABEL_20;
    }
    uint64_t v7 = 1;
    goto LABEL_25;
  }
  if (a3)
  {
LABEL_11:
    swift_beginAccess();
    if (static ReuseTrace.recorder) {
      AGGraphAddTraceEvent();
    }
    return 0;
  }
  outlined copy of BodyInputElement();
  outlined copy of BodyInputElement();
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_9:
      type metadata accessor for (_:_:)();
      uint64_t v7 = AGCompareValues();
      outlined consume of BodyInputElement();
LABEL_26:
      outlined consume of BodyInputElement();
      return v7;
    }
  }
  else if (static Semantics.forced < v6)
  {
    goto LABEL_9;
  }
  outlined consume of BodyInputElement();
  outlined consume of BodyInputElement();
  return 1;
}

unint64_t type metadata accessor for (_:_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:_:);
  if (!lazy cache variable for type metadata for (_:_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:_:));
  }
  return result;
}

uint64_t sub_245B0EE18()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_245B0EE58()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245B0EE98()
{
  outlined consume of BodyInputElement();
  swift_release();

  return swift_deallocObject();
}

void _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_245B0EF48()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245B0EF80()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed _ViewListCountInputs) -> (@unowned Int?)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

void type metadata accessor for Int?()
{
  if (!lazy cache variable for type metadata for Int?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Int?);
    }
  }
}

uint64_t sub_245B0F048()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

SwiftUI::AccessibilityVisibility::Resolved_optional __swiftcall AccessibilityVisibility.Resolved.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AccessibilityVisibility::Resolved_optional)rawValue;
}

uint64_t AccessibilityVisibility.Resolved.rawValue.getter()
{
  return *v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibility.Resolved()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

SwiftUI::AccessibilityVisibility::Resolved_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityVisibility.Resolved(Swift::Int *a1)
{
  return AccessibilityVisibility.Resolved.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityVisibility.Resolved(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibility.Resolved()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibility.Resolved()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityVisibility.rawValue.getter()
{
  return *v0;
}

uint64_t AccessibilityVisibility.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AccessibilityVisibility.element.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityVisibility.container.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityVisibility.hidden.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityVisibility.transparent.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityVisibility.ignored.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilityVisibility.host.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static AccessibilityVisibility.childrenIgnored.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static AccessibilityVisibility.stack.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibility()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibility()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibility()
{
  return RawRepresentable<>.encode(to:)();
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result | *v2;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result & *v2;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *result ^ *v2;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityVisibility(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *a2 & *v2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result & *v2;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityVisibility@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2;
  int v4 = *result;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AccessibilityVisibility(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AccessibilityVisibility(_DWORD *a1)
{
  return (*a1 & *v1) == 0;
}

void static AccessibilityVisibility.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *AccessibilityVisibility.init(_:)@<X0>(unsigned char *result@<X0>, int *a2@<X8>)
{
  int v2 = 1;
  switch(*result)
  {
    case 1:
      int v3 = unk_26FA6884C;
      if ((unk_26FA6884C & ~dword_26FA68848) == 0) {
        int v3 = 0;
      }
      *a2 = v3 | dword_26FA68848;
      break;
    case 2:
      *a2 = 2;
      break;
    case 3:
      int v2 = 4;
      goto LABEL_7;
    default:
LABEL_7:
      *a2 = v2;
      break;
  }
  return result;
}

uint64_t AccessibilityNullableOptionSet<>.resolvesToHidden.getter()
{
  if ((*(_DWORD *)v0 & 4) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(v0 + 4) & 4) != 0) {
    return 0;
  }
  return (*(_DWORD *)v0 >> 3) & 1;
}

void AccessibilityNullableOptionSet<>.resolved.getter(unsigned char *a1@<X8>)
{
  int v2 = *v1;
  if ((*v1 & 4) != 0 || (v2 & 8) != 0 && (v1[1] & 4) == 0)
  {
    *a1 = 3;
  }
  else
  {
    LOBYTE(v3) = 2;
    if ((v2 & 0x10) == 0)
    {
      if ((v2 & 2) != 0) {
        LOBYTE(v3) = 2;
      }
      else {
        LOBYTE(v3) = 4;
      }
      if (v2) {
        unsigned int v3 = (*v1 & 2u) >> 1;
      }
      if ((v2 & 0x40) != 0) {
        LOBYTE(v3) = 0;
      }
    }
    *a1 = v3;
  }
}

uint64_t AccessibilityNullableOptionSet<>.shouldApplyPlatformElementOverride.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  if ((*v0 & 0xC) == 0 && (v0[1] & 4) == 0 && (v0[1] & 8) == 0)
  {
    if ((*v0 | v2)) {
      return 1;
    }
    int v6 = 0;
    unsigned int v7 = 0;
    int v8 = 0;
    if (((v1 | v2) & 2) != 0) {
      return v6 | 1u;
    }
  }
  else
  {
    if ((*v0 | v2)) {
      return 257;
    }
    if (((v1 | v2) & 2) != 0)
    {
      int v6 = 256;
      return v6 | 1u;
    }
    unsigned int v7 = ((v0[1] & 4) == 0) & (*v0 >> 3) | ((*v0 & 4u) >> 2);
    int v8 = 256;
  }
  return v8 | v7;
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility.Resolved and conformance AccessibilityVisibility.Resolved);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityVisibility.Resolved(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B0F750);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityVisibility.Resolved()
{
  return &type metadata for AccessibilityVisibility.Resolved;
}

uint64_t PreferenceCombiner.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreferenceCombiner.attributes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v1 = a1;
  return result;
}

uint64_t (*PreferenceCombiner.attributes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceCombiner.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for WeakAttribute();
  uint64_t result = Array.init()();
  *a1 = result;
  return result;
}

uint64_t PreferenceCombiner.description.getter()
{
  return specialized PreferenceCombiner.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceCombiner<A>(uint64_t a1)
{
  return static PreferenceCombiner.initialValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceCombiner<A>()
{
  return specialized PreferenceCombiner.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)v17 - v12;
  static PreferenceCombiner.initialValue.getter(v4, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)closure #1 in static Rule._updateDefault(_:)partial apply, (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static PreferenceCombiner.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(a1 + 16))();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v4(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PairPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceCombiner.initialValue.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PairPreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t PairwisePreferenceCombinerVisitor.outputs.getter(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  int v5 = *(_DWORD *)(v2 + 24);
  *(void *)a1 = *(void *)v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t PairwisePreferenceCombinerVisitor.result.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PairwisePreferenceCombinerVisitor.result.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*PairwisePreferenceCombinerVisitor.result.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MultiPreferenceCombinerVisitor.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiPreferenceCombinerVisitor.result.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MultiPreferenceCombinerVisitor.result.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*MultiPreferenceCombinerVisitor.result.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MultiPreferenceCombinerVisitor.init(outputs:result:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t (*PreferenceAggregator.attributes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceAggregator.init(attributes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return PreferenceCombiner.init(attributes:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in PreferenceCombiner.init(attributes:), a4);
}

uint64_t PreferenceAggregator.value.getter(uint64_t a1)
{
  v9[5] = *v1;
  uint64_t v2 = *(void *)(a1 + 24);
  void v9[2] = *(void *)(a1 + 16);
  v9[3] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for WeakAttribute();
  uint64_t v4 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PreferenceAggregator.value.getter, (uint64_t)v9, v4, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t closure #1 in PreferenceAggregator.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, WeakValue, AssociatedTypeWitness);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceAggregator<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = PreferenceAggregator.value.getter(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceAggregator<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t HostPreferencesCombiner.init(keys:values:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *MEMORY[0x263F288F8];
  if ((a2 & 0x100000000) == 0) {
    int v3 = a2;
  }
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = v3;
  *(void *)(a3 + 8) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t HostPreferencesCombiner.removeChild(keys:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    if (*(_DWORD *)(v2 + 32) == result)
    {
      unint64_t i = 0;
LABEL_4:
      specialized Array.remove(at:)(i);
      return 1;
    }
    if (v3 != 1)
    {
      int v5 = (int *)(v2 + 48);
      for (unint64_t i = 1; ; ++i)
      {
        int v6 = *v5;
        v5 += 4;
        if (v6 == result) {
          break;
        }
        unint64_t v7 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
          return result;
        }
        if (v7 == v3) {
          return 0;
        }
      }
      goto LABEL_4;
    }
  }
  return 0;
}

uint64_t specialized PreferenceCombiner.description.getter()
{
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 548047074;
}

uint64_t partial apply for closure #1 in PreferenceAggregator.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PreferenceAggregator.value.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t base witness table accessor for _AttributeBody in PreferenceAggregator<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for PreferenceAggregator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HostPreferencesCombiner(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HostPreferencesCombiner and conformance HostPreferencesCombiner();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for PairwisePreferenceCombinerVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for PairwisePreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for PairwisePreferenceCombinerVisitor()
{
  return &type metadata for PairwisePreferenceCombinerVisitor;
}

uint64_t initializeBufferWithCopyOfBuffer for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MultiPreferenceCombinerVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiPreferenceCombinerVisitor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiPreferenceCombinerVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiPreferenceCombinerVisitor()
{
  return &type metadata for MultiPreferenceCombinerVisitor;
}

uint64_t type metadata accessor for PreferenceAggregator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for HostPreferencesCombiner(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for HostPreferencesCombiner(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HostPreferencesCombiner()
{
  return &type metadata for HostPreferencesCombiner;
}

ValueMetadata *type metadata accessor for HostPreferencesCombiner.Child()
{
  return &type metadata for HostPreferencesCombiner.Child;
}

void *type metadata accessor for HostPreferencesCombiner.CombineValues()
{
  return &unk_26FA69808;
}

uint64_t closure #1 in static Rule._updateDefault(_:)partial apply()
{
  return partial apply for closure #1 in static Rule._updateDefault(_:)();
}

float ContentStyle.MaterialStyle.resolveColor(in:)()
{
  float result = 1.0;
  if ((*(unsigned char *)(v0 + 12) & 1) == 0) {
    return 0.0;
  }
  return result;
}

uint64_t SpeedAnimation.animate<A, B>(base:value:time:context:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a9 + 16))(a4, a5, a6, a8, a7, a9, a1 * a2);
}

uint64_t SpeedAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v16 = MEMORY[0x270FA5388](a1);
  int v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v19 == v16)
  {
    (*(void (**)(char *))(v15 + 16))(v18);
    Animation.init<A>(_:)((uint64_t)v18, a9, a11);
    char v20 = (*(uint64_t (**)(double))(a11 + 32))(a3 * a4);
    swift_release();
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance SpeedAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  return SpeedAnimation.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance SpeedAnimation(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  return SpeedAnimation.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, *a2, a9, *v10, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance SpeedAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v5;
  *(void *)(v11 + 32) = v6;
  *(void *)(v11 + 40) = v7;
  *(void *)(v11 + 48) = v8;
  *(void *)(v11 + 56) = v9;
  *(unsigned char *)(v11 + 64) = v10;
  *(void *)a2 = v11;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(unsigned char *)(a2 + 40) = 8;

  return outlined copy of Animation.Function(v5, v6, v7, v8, v9, v10);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpeedAnimation()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpeedAnimation()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Animation.speed(_:)(uint64_t a1, double a2)
{
  double v5 = a2;
  Swift::UInt64 v2 = *(uint64_t (**)(double *, ValueMetadata *, unint64_t))(*(void *)a1 + 144);
  unint64_t v3 = lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation();
  return v2(&v5, &type metadata for SpeedAnimation, v3);
}

unint64_t lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation;
  if (!lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpeedAnimation and conformance SpeedAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeedAnimation()
{
  return &type metadata for SpeedAnimation;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SpeedAnimation(void *result)
{
  double v2 = *v1;
  if (*v1 != 0.0)
  {
    unint64_t v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0x31uLL);
    uint64_t v4 = v3[1];
    int64_t v5 = v4 + 8;
    if (__OFADD__(v4, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v5)
    {
      v3[1] = v5;
      unint64_t result = (void *)(*v3 + v4);
LABEL_5:
      *(double *)unint64_t result = v2;
      return result;
    }
    unint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SpeedAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245B10DC4()
{
  outlined consume of Animation.Function(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t outlined copy of Animation.Function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t KeyframeTrack.init<>(content:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  uint64_t v3 = type metadata accessor for KeyframeTrack();
  return a1(v3, v4, v5);
}

uint64_t KeyframeTrack.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  type metadata accessor for KeyframeTrack();
  uint64_t v4 = swift_retain();
  a2(v4);
  return swift_release();
}

uint64_t KeyframeTrack._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v33 = a1;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v32 = v4;
  uint64_t v19 = *v4;
  swift_getAtKeyPath();
  uint64_t v28 = v8;
  char v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v21 = v7;
  v20(v10, v29, v7);
  uint64_t v22 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v21);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, 1, 1, v11);
  }
  else
  {
    swift_getAtKeyPath();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v11);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v6);
  }
  uint64_t v23 = v19;
  uint64_t v24 = KeyframeTrack.resolve(initialValue:initialVelocity:)((uint64_t)v18, (uint64_t)v14, a4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v11);
  uint64_t v25 = type metadata accessor for _ResolvedKeyframes();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  _ResolvedKeyframes.append<A>(keyPath:path:)(v23, v24, v25, AssociatedConformanceWitness);
  return swift_bridgeObjectRelease();
}

uint64_t KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v3 = *(void *)(a3 + 40);
  swift_getAssociatedConformanceWitness();
  _ResolvedKeyframeTrackContent.init()(&v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 48))(&v7, v4, v3);
  uint64_t v5 = AnimationPath.init(_:)((void (*)(uint64_t *))partial apply for closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:));
  swift_bridgeObjectRelease();
  return v5;
}

_UNKNOWN **associated type witness table accessor for Keyframes.Body : Keyframes in KeyframeTrack<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v425 = a4;
  uint64_t v370 = a3;
  v446 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v416 = type metadata accessor for CubicKeyframeHelper.Connection();
  v419 = *(char **)(v416 - 8);
  MEMORY[0x270FA5388](v416);
  v395 = (char *)&v339 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v404 = (uint64_t *)((char *)&v339 - v11);
  uint64_t v400 = type metadata accessor for CubicKeyframeHelper();
  int64_t v448 = *(void *)(v400 - 8);
  MEMORY[0x270FA5388](v400);
  uint64_t v433 = (uint64_t)&v339 - v12;
  uint64_t v435 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic();
  uint64_t v431 = *(void *)(v435 - 8);
  MEMORY[0x270FA5388](v435);
  v349 = (char *)&v339 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v350 = (char *)&v339 - v15;
  MEMORY[0x270FA5388](v16);
  v436 = (char *)&v339 - v17;
  uint64_t v18 = type metadata accessor for HermiteCurve();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v414 = (uint64_t)&v339 - v19;
  uint64_t v417 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear();
  v438 = *(void (***)(char *, uint64_t))(v417 - 8);
  MEMORY[0x270FA5388](v417);
  v348 = (char *)&v339 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  v354 = (char *)&v339 - v22;
  MEMORY[0x270FA5388](v23);
  v413 = (char *)&v339 - v24;
  v420 = *(char **)(a6 - 8);
  MEMORY[0x270FA5388](v25);
  v351 = (char *)&v339 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v394 = (char *)&v339 - v28;
  MEMORY[0x270FA5388](v29);
  v393 = (char *)&v339 - v30;
  MEMORY[0x270FA5388](v31);
  v392 = (char *)&v339 - v32;
  uint64_t v369 = type metadata accessor for Optional();
  v421 = *(void (***)(uint64_t, void, uint64_t))(v369 - 8);
  MEMORY[0x270FA5388](v369);
  v355 = (char *)&v339 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  v356 = (char *)&v339 - v35;
  MEMORY[0x270FA5388](v36);
  v366 = (char *)&v339 - v37;
  uint64_t v38 = type metadata accessor for AnimationPath.Element();
  uint64_t v408 = type metadata accessor for Optional();
  v445 = *(char ***)(v408 - 8);
  MEMORY[0x270FA5388](v408);
  v391 = (char *)&v339 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  v390 = (char *)&v339 - v41;
  MEMORY[0x270FA5388](v42);
  v403 = (char *)&v339 - v43;
  MEMORY[0x270FA5388](v44);
  v365 = (char *)&v339 - v45;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v441 = type metadata accessor for Optional();
  v423 = *(void (***)(uint64_t, uint64_t))(v441 - 8);
  MEMORY[0x270FA5388](v441);
  long long v48 = (char *)&v339 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  v347 = (char *)&v339 - v50;
  MEMORY[0x270FA5388](v51);
  v389 = (char *)&v339 - v52;
  MEMORY[0x270FA5388](v53);
  v344 = (char *)&v339 - v54;
  MEMORY[0x270FA5388](v55);
  v388 = (char *)&v339 - v56;
  MEMORY[0x270FA5388](v57);
  uint64_t v387 = (uint64_t)&v339 - v58;
  MEMORY[0x270FA5388](v59);
  uint64_t v386 = (uint64_t)&v339 - v60;
  MEMORY[0x270FA5388](v61);
  uint64_t v385 = (uint64_t)&v339 - v62;
  MEMORY[0x270FA5388](v63);
  uint64_t v371 = (uint64_t)&v339 - v64;
  MEMORY[0x270FA5388](v65);
  v384 = (char *)&v339 - v66;
  uint64_t v424 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring();
  uint64_t v415 = *(void *)(v424 - 8);
  MEMORY[0x270FA5388](v424);
  v346 = (char *)&v339 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v68);
  v422 = (char *)&v339 - v69;
  v443 = *(void (***)(uint64_t, uint64_t))(v38 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v434 = (uint64_t)&v339 - v71;
  uint64_t v450 = AssociatedTypeWitness;
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v73);
  v343 = (char *)&v339 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v75);
  v342 = (char *)&v339 - v76;
  MEMORY[0x270FA5388](v77);
  v364 = (char *)&v339 - v78;
  MEMORY[0x270FA5388](v79);
  v341 = (char *)&v339 - v80;
  MEMORY[0x270FA5388](v81);
  uint64_t v353 = (uint64_t)&v339 - v82;
  MEMORY[0x270FA5388](v83);
  v363 = (char *)&v339 - v84;
  MEMORY[0x270FA5388](v85);
  uint64_t v412 = (uint64_t)&v339 - v86;
  MEMORY[0x270FA5388](v87);
  v383 = (char *)&v339 - v88;
  MEMORY[0x270FA5388](v89);
  v382 = (char *)&v339 - v90;
  MEMORY[0x270FA5388](v91);
  v381 = (char *)&v339 - v92;
  MEMORY[0x270FA5388](v93);
  v402 = (char *)&v339 - v94;
  MEMORY[0x270FA5388](v95);
  uint64_t v401 = (uint64_t)&v339 - v96;
  MEMORY[0x270FA5388](v97);
  v411 = (char *)&v339 - v98;
  MEMORY[0x270FA5388](v99);
  v352 = (char *)&v339 - v100;
  MEMORY[0x270FA5388](v101);
  v362 = (char *)&v339 - v102;
  MEMORY[0x270FA5388](v103);
  v439 = (char *)&v339 - v104;
  MEMORY[0x270FA5388](v105);
  v442 = (char *)&v339 - v106;
  uint64_t v449 = a6;
  uint64_t v444 = AssociatedConformanceWitness;
  uint64_t v107 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment();
  uint64_t v108 = *(void *)(v107 - 8);
  MEMORY[0x270FA5388](v107);
  v361 = (char *)&v339 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v110);
  v360 = (char *)&v339 - v111;
  MEMORY[0x270FA5388](v112);
  v345 = (char *)&v339 - v113;
  MEMORY[0x270FA5388](v114);
  v368 = (char *)&v339 - v115;
  MEMORY[0x270FA5388](v116);
  long long v118 = (char *)&v339 - v117;
  MEMORY[0x270FA5388](v119);
  v447 = (char *)&v339 - v120;
  uint64_t v454 = a2;
  type metadata accessor for Array();
  swift_getWitnessTable();
  long long v121 = v118;
  uint64_t v122 = a2;
  uint64_t result = RandomAccessCollection<>.indices.getter();
  unint64_t v124 = v451.n128_u64[0];
  if (v451.n128_u64[0] == v451.n128_u64[1]) {
    return result;
  }
  if (v451.n128_i64[1] < v451.n128_i64[0])
  {
    __break(1u);
    goto LABEL_86;
  }
  if (v451.n128_i64[0] >= v451.n128_i64[1])
  {
LABEL_86:
    __break(1u);
    JUMPOUT(0x245B14AB0);
  }
  v437 = (void (**)(char *, char *, uint64_t))(v108 + 16);
  v399 = (void (**)(char *, char *, uint64_t))(v438 + 4);
  v429 = (unsigned int (**)(char *, uint64_t, uint64_t))(v443 + 6);
  ++v443;
  v428 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
  v406 = (void (**)(char *, uint64_t))(v445 + 1);
  v418 = (void (**)(char *, uint64_t, uint64_t))(v420 + 16);
  v445 = (char **)(v72 + 48);
  v426 = (void (**)(char *, uint64_t))(v420 + 8);
  v440 = (void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  uint64_t v407 = v444 + 24;
  v427 = v423 + 1;
  long long v125 = (void (**)(uint64_t, uint64_t))(v72 + 8);
  v398 = (void (**)(uint64_t, uint64_t))(v438 + 1);
  v438 = (void (**)(char *, uint64_t))(v108 + 8);
  v378 = (void (**)(char *, char *, uint64_t))(v415 + 32);
  v423 += 2;
  v367 = (void (**)(char *, uint64_t, uint64_t))(v421 + 2);
  v359 = (void (**)(char *, uint64_t))(v421 + 1);
  v358 = (uint64_t (**)(char *, uint64_t, uint64_t))(v420 + 48);
  v421 = (void (**)(uint64_t, void, uint64_t))(v72 + 16);
  v377 = (void (**)(char *, uint64_t))(v415 + 8);
  v397 = (void (**)(char *, char *, uint64_t))(v431 + 32);
  v405 = (void (**)(char *, uint64_t))(v419 + 8);
  v340 = (void (**)(char *, char *, uint64_t))(v420 + 32);
  v357 = (void (**)(uint64_t, void *, uint64_t))(v419 + 40);
  v396 = (void (**)(char *, int *))(v431 + 8);
  v375 = (uint64_t (**)(uint64_t, uint64_t))(v448 + 8);
  uint64_t v432 = v122;
  uint64_t v431 = v38;
  v379 = v48;
  uint64_t v415 = v107;
  v419 = v121;
  v410 = (void (**)(uint64_t, uint64_t))(v72 + 8);
  unint64_t v430 = v451.n128_u64[1];
  do
  {
    uint64_t v136 = v124;
    int64_t v448 = v124 + 1;
    uint64_t v137 = v447;
    Array.subscript.getter();
    uint64_t v138 = *v437;
    (*v437)(v121, v137, v107);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v376 = *v397;
        v376(v436, v121, v435);
        v451.n128_u64[0] = *v446;
        type metadata accessor for Array();
        swift_getWitnessTable();
        uint64_t v144 = v391;
        uint64_t v145 = v431;
        BidirectionalCollection.last.getter();
        uint64_t v146 = 1;
        if ((*v429)(v144, 1, v145) == 1)
        {
          id v147 = v406;
          uint64_t v148 = v408;
          uint64_t v149 = v387;
        }
        else
        {
          uint64_t v149 = v387;
          AnimationPath.Element.end.getter(v145, v387);
          uint64_t v146 = 0;
          id v147 = (void (**)(char *, uint64_t))v443;
          uint64_t v148 = v145;
        }
        uint64_t v172 = v412;
        uint64_t v173 = v416;
        (*v147)(v144, v148);
        uint64_t v174 = v450;
        (*v428)(v149, v146, 1, v450);
        unint64_t v175 = v394;
        (*v418)(v394, v425, v449);
        v420 = *v445;
        int v176 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v420)(v149, 1, v174);
        uint64_t v177 = v441;
        v380 = v138;
        if (v176 == 1)
        {
          uint64_t v178 = v444;
          uint64_t v179 = v449;
          (*(void (**)(uint64_t, uint64_t))(v444 + 24))(v449, v444);
          v374 = *v426;
          v374(v175, v179);
          (*v427)(v149, v177);
        }
        else
        {
          uint64_t v179 = v449;
          v374 = *v426;
          v374(v175, v449);
          (*v440)((char *)v172, v149, v450);
          uint64_t v178 = v444;
        }
        uint64_t v183 = (uint64_t)v442;
        uint64_t v184 = v436;
        uint64_t v185 = v450;
        v373 = (void (*)(uint64_t, char *, uint64_t))*v421;
        v373((uint64_t)v442, v436, v450);
        uint64_t v186 = v435;
        uint64_t v372 = *(int *)(v435 + 44);
        double v187 = *(double *)&v184[v372];
        v188 = v404;
        swift_storeEnumTagMultiPayload();
        uint64_t v189 = (uint64_t)v395;
        swift_storeEnumTagMultiPayload();
        uint64_t v190 = (uint64_t)v188;
        uint64_t v191 = v179;
        CubicKeyframeHelper.init(from:to:duration:start:end:)(v412, v183, v190, v189, v433, v187);
        id v192 = &v184[*(int *)(v186 + 36)];
        uint64_t v193 = v388;
        uint64_t v194 = v441;
        v409 = *v423;
        ((void (*)(char *, char *, uint64_t))v409)(v388, v192, v441);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v420)(v193, 1, v185) == 1)
        {
          uint64_t v195 = v194;
          uint64_t v196 = v178;
          id v197 = *v427;
          (*v427)((uint64_t)v193, v195);
          uint64_t v198 = v379;
          uint64_t v107 = v415;
          if (v136 > 0)
          {
            uint64_t v199 = v432;
            Array.subscript.getter();
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            char v201 = (int *)v435;
            switch(EnumCaseMultiPayload)
            {
              case 1:
                uint64_t v255 = v350;
                v376(v350, v368, v435);
                if ((unint64_t)v136 < 2)
                {
                  swift_getTupleTypeMetadata2();
                  uint64_t v268 = v404;
                  void *v404 = *(void *)&v255[v201[11]];
                  (*(void (**)(uint64_t, uint64_t))(v196 + 24))(v449, v196);
                  (*v396)(v255, v201);
                  uint64_t v269 = v416;
                  swift_storeEnumTagMultiPayload();
                  uint64_t v204 = v400;
                  (*v357)(v433 + *(int *)(v400 + 44), v268, v269);
                  goto LABEL_61;
                }
                uint64_t v256 = v344;
                uint64_t v257 = v441;
                ((void (*)(char *, char *, uint64_t))v409)(v344, &v255[v201[10]], v441);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v420)(v256, 1, v450) == 1)
                {
                  v197((uint64_t)v256, v257);
                  uint64_t v258 = *(int *)(swift_getTupleTypeMetadata2() + 48);
                  unint64_t v259 = v404;
                  void *v404 = *(void *)&v255[v201[11]];
                  uint64_t v260 = (uint64_t)v259 + v258;
                  unint64_t v261 = v345;
                  uint64_t v262 = v432;
                  Array.subscript.getter();
                  _ResolvedKeyframeTrackContent.Segment.end.getter(v107, v260);
                  (*v438)(v261, v107);
                  uint64_t v263 = v255;
                  uint64_t v199 = v262;
                  (*v396)(v263, v201);
                  uint64_t v264 = v416;
                  swift_storeEnumTagMultiPayload();
                  uint64_t v204 = v400;
                  (*v357)(v433 + *(int *)(v400 + 44), v259, v264);
                }
                else
                {
                  (*v396)(v255, v201);
                  v335 = *v440;
                  v336 = v341;
                  uint64_t v337 = v450;
                  (*v440)(v341, (uint64_t)v256, v450);
                  uint64_t v204 = v400;
                  v338 = (char *)(v433 + *(int *)(v400 + 44));
                  (*v405)(v338, v416);
                  v335(v338, (uint64_t)v336, v337);
                  swift_storeEnumTagMultiPayload();
                  uint64_t v199 = v432;
                }
                uint64_t v38 = v431;
                uint64_t v198 = v379;
                goto LABEL_63;
              case 2:
                uint64_t v265 = v404;
                AnimationPath.currentVelocity.getter(*v446, (uint64_t)v404);
                uint64_t v266 = v416;
                swift_storeEnumTagMultiPayload();
                uint64_t v204 = v400;
                (*v357)(v433 + *(int *)(v400 + 44), v265, v266);
                goto LABEL_57;
              case 3:
                (*v399)(v354, v368, v417);
                if ((unint64_t)v136 < 2)
                {
                  (*(void (**)(uint64_t, uint64_t))(v196 + 24))(v449, v196);
                }
                else
                {
                  unint64_t v267 = v345;
                  Array.subscript.getter();
                  _ResolvedKeyframeTrackContent.Segment.end.getter(v107, v353);
                  (*v438)(v267, v107);
                }
                uint64_t v323 = v450;
                uint64_t v324 = swift_getAssociatedConformanceWitness();
                id v325 = v402;
                long long v326 = v354;
                dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
                uint64_t v327 = v401;
                VectorArithmetic.scaled(by:)(v323, v324, v401, 1.0 / *(double *)&v326[*(int *)(v417 + 36)]);
                long long v328 = *v410;
                (*v410)((uint64_t)v325, v323);
                uint64_t v329 = v417;
                long long v330 = &v326[*(int *)(v417 + 40)];
                char v331 = v330[32];
                long long v332 = *((_OWORD *)v330 + 1);
                __n128 v451 = *(__n128 *)v330;
                long long v452 = v332;
                char v453 = v331;
                double v333 = UnitCurve.velocity(at:)(1.0);
                VectorArithmetic.scaled(by:)(v323, v324, (uint64_t)v442, v333);
                v328(v327, v323);
                v328(v353, v323);
                (*v398)((uint64_t)v326, v329);
                uint64_t v204 = v400;
                v334 = (char *)(v433 + *(int *)(v400 + 44));
                (*v405)(v334, v173);
                (*v440)(v334, (uint64_t)v442, v323);
                swift_storeEnumTagMultiPayload();
                uint64_t v38 = v431;
                uint64_t v198 = v379;
                uint64_t v107 = v415;
                char v201 = (int *)v435;
                goto LABEL_63;
              default:
                swift_getAssociatedConformanceWitness();
                double v202 = v404;
                dispatch thunk of static AdditiveArithmetic.zero.getter();
                uint64_t v203 = v416;
                swift_storeEnumTagMultiPayload();
                uint64_t v204 = v400;
                (*v357)(v433 + *(int *)(v400 + 44), v202, v203);
LABEL_57:
                (*v438)(v368, v107);
                goto LABEL_62;
            }
          }
          v218 = v355;
          uint64_t v219 = v369;
          (*v367)(v355, v370, v369);
          int v220 = (*v358)(v218, 1, v191);
          char v201 = (int *)v435;
          if (v220 == 1)
          {
            (*v359)(v218, v219);
            uint64_t v204 = v400;
            (*v405)((char *)(v433 + *(int *)(v400 + 44)), v173);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            uint64_t v252 = v351;
            uint64_t v253 = v449;
            (*v340)(v351, v218, v449);
            uint64_t v254 = v404;
            (*(void (**)(uint64_t, uint64_t))(v196 + 24))(v253, v196);
            v374(v252, v253);
            swift_storeEnumTagMultiPayload();
            uint64_t v204 = v400;
            (*v357)(v433 + *(int *)(v400 + 44), v254, v173);
          }
LABEL_61:
          uint64_t v199 = v432;
LABEL_62:
          uint64_t v38 = v431;
        }
        else
        {
          unint64_t v205 = *v440;
          v206 = v363;
          (*v440)(v363, (uint64_t)v193, v185);
          uint64_t v204 = v400;
          uint64_t v207 = (char *)(v433 + *(int *)(v400 + 44));
          (*v405)(v207, v173);
          v205(v207, (uint64_t)v206, v185);
          swift_storeEnumTagMultiPayload();
          uint64_t v199 = v432;
          char v201 = (int *)v435;
          uint64_t v38 = v431;
          uint64_t v198 = v379;
          uint64_t v107 = v415;
        }
LABEL_63:
        v270 = v409;
        id v271 = v389;
        uint64_t v272 = v441;
        ((void (*)(char *, char *, uint64_t))v409)(v389, &v436[v201[10]], v441);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v420)(v271, 1, v450) == 1)
        {
          v273 = v271;
          CFURLRef v274 = *v427;
          (*v427)((uint64_t)v273, v272);
          uint64_t v275 = MEMORY[0x24C522E60](v199, v107);
          if (v448 >= v275)
          {
            (*v405)((char *)(v433 + *(int *)(v204 + 48)), v416);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            v276 = v360;
            Array.subscript.getter();
            v380(v361, v276, v107);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                (*v438)(v360, v107);
                CFDataRef v291 = v349;
                v376(v349, v361, (uint64_t)v201);
                uint64_t v292 = v441;
                ((void (*)(char *, char *, uint64_t))v270)(v198, &v291[v201[9]], v441);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v420)(v198, 1, v450) == 1)
                {
                  v274((uint64_t)v198, v292);
                  uint64_t v293 = v450;
                  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
                  v295 = v404;
                  id v296 = (char *)v404 + *(int *)(TupleTypeMetadata2 + 48);
                  void *v404 = *(void *)&v291[v201[11]];
                  v373((uint64_t)v296, v291, v293);
                  (*v396)(v291, v201);
                  goto LABEL_77;
                }
                (*v396)(v291, v201);
                uint64_t v281 = *v440;
                unint64_t v282 = v343;
                v283 = v343;
                id v284 = v198;
                goto LABEL_68;
              case 2u:
                (*v438)(v360, v107);
                v297 = v346;
                uint64_t v298 = v424;
                (*v378)(v346, v361, v424);
                id v299 = v347;
                uint64_t v300 = v441;
                ((void (*)(char *, char *, uint64_t))v270)(v347, &v297[*(int *)(v298 + 40)], v441);
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v420)(v299, 1, v450) != 1)
                {
                  (*v377)(v297, v298);
                  id v284 = v299;
                  uint64_t v281 = *v440;
                  unint64_t v282 = v342;
                  v283 = v342;
                  goto LABEL_68;
                }
                v274((uint64_t)v299, v300);
                uint64_t v301 = v450;
                uint64_t v302 = swift_getTupleTypeMetadata2();
                v295 = v404;
                id v303 = (char *)v404 + *(int *)(v302 + 48);
                void *v404 = *(void *)&v436[v372];
                v373((uint64_t)v303, v297, v301);
                (*v377)(v297, v298);
LABEL_77:
                uint64_t v304 = v416;
                swift_storeEnumTagMultiPayload();
                (*v357)(v433 + *(int *)(v204 + 48), v295, v304);
                break;
              case 3u:
                uint64_t v305 = v348;
                uint64_t v306 = v417;
                (*v399)(v348, v361, v417);
                uint64_t v307 = v450;
                uint64_t v308 = swift_getAssociatedConformanceWitness();
                uint64_t v309 = v402;
                dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
                uint64_t v310 = v401;
                VectorArithmetic.scaled(by:)(v307, v308, v401, 1.0 / *(double *)&v305[*(int *)(v306 + 36)]);
                long long v125 = v410;
                uint64_t v311 = *v410;
                unint64_t v312 = v309;
                uint64_t v313 = v307;
                (*v410)((uint64_t)v312, v307);
                uint64_t v314 = &v305[*(int *)(v306 + 40)];
                char v315 = v314[32];
                long long v316 = *((_OWORD *)v314 + 1);
                __n128 v451 = *(__n128 *)v314;
                long long v452 = v316;
                char v453 = v315;
                double v317 = UnitCurve.velocity(at:)(0.0);
                uint64_t v318 = v307;
                uint64_t v277 = v400;
                VectorArithmetic.scaled(by:)(v318, v308, (uint64_t)v442, v317);
                uint64_t v319 = v310;
                uint64_t v107 = v415;
                v311(v319, v313);
                uint64_t v320 = v305;
                uint64_t v321 = v416;
                uint64_t v38 = v431;
                (*v398)((uint64_t)v320, v306);
                (*v438)(v360, v107);
                v322 = (char *)(v433 + *(int *)(v277 + 48));
                (*v405)(v322, v321);
                (*v440)(v322, (uint64_t)v442, v313);
                swift_storeEnumTagMultiPayload();
                goto LABEL_72;
              default:
                uint64_t v277 = v204;
                swift_getAssociatedConformanceWitness();
                id v278 = v404;
                dispatch thunk of static AdditiveArithmetic.zero.getter();
                unint64_t v279 = (uint64_t (*)(char *, uint64_t))*v438;
                (*v438)(v360, v107);
                uint64_t v280 = v416;
                swift_storeEnumTagMultiPayload();
                (*v357)(v433 + *(int *)(v204 + 48), v278, v280);
                v279(v361, v107);
                goto LABEL_69;
            }
          }
          long long v125 = v410;
          uint64_t v277 = v204;
        }
        else
        {
          uint64_t v281 = *v440;
          unint64_t v282 = v364;
          v283 = v364;
          id v284 = v271;
LABEL_68:
          uint64_t v285 = v450;
          v281(v283, (uint64_t)v284, v450);
          unint64_t v286 = (char *)(v433 + *(int *)(v204 + 48));
          (*v405)(v286, v416);
          v281(v286, (uint64_t)v282, v285);
          uint64_t v277 = v204;
          swift_storeEnumTagMultiPayload();
LABEL_69:
          long long v125 = v410;
        }
LABEL_72:
        uint64_t v287 = v414;
        uint64_t v288 = v433;
        CubicKeyframeHelper.curve.getter(v277, v414);
        double v289 = *(double *)(v288 + *(int *)(v277 + 40));
        __n128 v451 = 0u;
        long long v452 = 0u;
        char v453 = 1;
        uint64_t v290 = v434;
        AnimationPath.CurveElement.init(curve:duration:constantVelocity:timingCurve:)(v287, 0, &v451, v434, v289);
        swift_storeEnumTagMultiPayload();
        type metadata accessor for AnimationPath();
        AnimationPath.append(_:)(v290);
        (*v443)(v290, v38);
        (*v396)(v436, (int *)v435);
        (*v438)(v447, v107);
        uint64_t result = (*v375)(v288, v277);
        goto LABEL_8;
      case 2u:
        char v150 = v422;
        uint64_t v151 = v424;
        (*v378)(v422, v121, v424);
        uint64_t v152 = &v150[*(int *)(v151 + 40)];
        uint64_t v153 = v384;
        uint64_t v154 = v441;
        ((void (*)(char *, char *, uint64_t))*v423)(v384, v152, v441);
        id v155 = *v445;
        int v156 = ((uint64_t (*)(char *, uint64_t, uint64_t))*v445)(v153, 1, v450);
        char v157 = v392;
        if (v156 == 1)
        {
          v409 = *v427;
          v409((uint64_t)v153, v154);
          v451.n128_u64[0] = *v446;
          type metadata accessor for Array();
          swift_getWitnessTable();
          char v158 = v365;
          BidirectionalCollection.last.getter();
          uint64_t v159 = 1;
          unsigned int v160 = (*v429)(v158, 1, v38);
          uint64_t v161 = v369;
          uint64_t v162 = v403;
          v420 = v155;
          if (v160 == 1)
          {
            char v163 = v406;
            uint64_t v164 = v408;
            uint64_t v165 = v371;
          }
          else
          {
            uint64_t v165 = v371;
            AnimationPath.Element.endVelocity.getter(v38, v371);
            uint64_t v159 = 0;
            char v163 = (void (**)(char *, uint64_t))v443;
            uint64_t v164 = v38;
          }
          (*v163)(v158, v164);
          uint64_t v208 = v450;
          (*v428)(v165, v159, 1, v450);
          char v209 = *v367;
          char v210 = v366;
          (*v367)(v366, v370, v161);
          int v211 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v420)(v165, 1, v208);
          uint64_t v212 = v440;
          if (v211 == 1)
          {
            BOOL v213 = v356;
            v209(v356, (uint64_t)v210, v161);
            if ((*v358)(v213, 1, v449) == 1)
            {
              uint64_t v214 = *v359;
              (*v359)(v213, v161);
              swift_getAssociatedConformanceWitness();
              char v215 = v362;
              dispatch thunk of static AdditiveArithmetic.zero.getter();
              unint64_t v216 = v215;
              v214(v210, v161);
              uint64_t v162 = v403;
              uint64_t v154 = v441;
              char v217 = v440;
            }
            else
            {
              id v221 = v352;
              uint64_t v222 = v449;
              (*(void (**)(uint64_t))(v444 + 24))(v449);
              (*v426)(v213, v222);
              (*v359)(v210, v161);
              char v217 = v440;
              unint64_t v216 = v362;
              (*v440)(v362, (uint64_t)v221, v450);
              uint64_t v162 = v403;
              uint64_t v154 = v441;
            }
            v409(v371, v154);
            char v180 = *v217;
          }
          else
          {
            (*v359)(v210, v161);
            char v180 = *v212;
            unint64_t v216 = v362;
            (*v212)(v362, v165, v450);
          }
          v180(v439, (uint64_t)v216, v450);
          id v155 = v420;
        }
        else
        {
          char v180 = *v440;
          (*v440)(v439, (uint64_t)v153, v450);
          uint64_t v162 = v403;
        }
        v451.n128_u64[0] = *v446;
        uint64_t v223 = v431;
        type metadata accessor for Array();
        swift_getWitnessTable();
        BidirectionalCollection.last.getter();
        uint64_t v224 = 1;
        if ((*v429)(v162, 1, v223) == 1)
        {
          char v225 = v406;
          uint64_t v226 = v408;
          uint64_t v227 = v385;
        }
        else
        {
          uint64_t v227 = v385;
          AnimationPath.Element.end.getter(v223, v385);
          uint64_t v224 = 0;
          char v225 = (void (**)(char *, uint64_t))v443;
          uint64_t v226 = v223;
        }
        v228 = v411;
        (*v225)(v162, v226);
        uint64_t v229 = v450;
        (*v428)(v227, v224, 1, v450);
        (*v418)(v157, v425, v449);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v155)(v227, 1, v229) == 1)
        {
          uint64_t v230 = v449;
          (*(void (**)(uint64_t, uint64_t))(v444 + 24))(v449, v444);
          (*v426)(v157, v230);
          (*v427)(v227, v154);
        }
        else
        {
          (*v426)(v157, v449);
          v180(v228, v227, v450);
        }
        uint64_t v231 = v422;
        uint64_t v232 = (uint64_t)v442;
        uint64_t v233 = v424;
        uint64_t v234 = &v422[*(int *)(v424 + 44)];
        if (v234[8])
        {
          uint64_t v235 = (__n128 *)&v422[*(int *)(v424 + 36)];
          unint64_t v236 = v235[1].n128_u64[0];
          __n128 v451 = *v235;
          *(void *)&long long v452 = v236;
          uint64_t v237 = v450;
          uint64_t v238 = swift_getAssociatedConformanceWitness();
          dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
          double v239 = Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(v232, (uint64_t)v439, v237, v238, 0.0001);
          uint64_t v240 = v228;
          long long v125 = v410;
          (*v410)(v232, v237);
        }
        else
        {
          double v239 = *(double *)v234;
          uint64_t v237 = v450;
          uint64_t v238 = swift_getAssociatedConformanceWitness();
          uint64_t v240 = v228;
          long long v125 = v410;
        }
        BOOL v241 = (__n128 *)&v231[*(int *)(v233 + 36)];
        unint64_t v242 = v241[1].n128_u64[0];
        __n128 v451 = *v241;
        *(void *)&long long v452 = v242;
        uint64_t v243 = (uint64_t)v402;
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
        uint64_t v244 = v401;
        Spring.value<A>(target:initialVelocity:time:)(v243, v239, (uint64_t)v439, v237, v238);
        char v245 = *v125;
        (*v125)(v243, v237);
        dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
        v245(v244, v237);
        unint64_t v246 = v241[1].n128_u64[0];
        __n128 v451 = *v241;
        *(void *)&long long v452 = v246;
        v247 = (void (*)(uint64_t, char *, uint64_t))*v421;
        (*v421)(v244, v240, v237);
        v247(v243, v231, v237);
        uint64_t v248 = (uint64_t)v381;
        v247((uint64_t)v381, v439, v237);
        uint64_t v249 = (uint64_t)v382;
        uint64_t v250 = (uint64_t)v442;
        v247((uint64_t)v382, v442, v237);
        uint64_t v251 = v434;
        AnimationPath.SpringElement.init(spring:from:to:initialVelocity:end:duration:)((uint64_t)&v451, v244, v243, v248, v249, v434, v239);
        uint64_t v38 = v431;
        swift_storeEnumTagMultiPayload();
        type metadata accessor for AnimationPath();
        AnimationPath.append(_:)(v251);
        (*v443)(v251, v38);
        v245(v250, v237);
        v245((uint64_t)v411, v237);
        v245((uint64_t)v439, v237);
        (*v377)(v422, v424);
        uint64_t v107 = v415;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v438)(v447, v415);
        uint64_t v122 = v432;
        long long v121 = v419;
        break;
      case 3u:
        (*v399)(v413, v121, v417);
        v451.n128_u64[0] = *v446;
        type metadata accessor for Array();
        swift_getWitnessTable();
        id v166 = v390;
        BidirectionalCollection.last.getter();
        uint64_t v167 = 1;
        if ((*v429)(v166, 1, v38) == 1)
        {
          uint64_t v168 = v406;
          uint64_t v169 = v408;
          unint64_t v170 = v393;
          uint64_t v171 = v386;
        }
        else
        {
          uint64_t v171 = v386;
          AnimationPath.Element.end.getter(v38, v386);
          uint64_t v167 = 0;
          uint64_t v168 = (void (**)(char *, uint64_t))v443;
          uint64_t v169 = v38;
          unint64_t v170 = v393;
        }
        uint64_t v181 = (uint64_t)v383;
        (*v168)(v166, v169);
        uint64_t v182 = v450;
        (*v428)(v171, v167, 1, v450);
        (*v418)(v170, v425, v449);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v445)(v171, 1, v182) == 1)
        {
          uint64_t v126 = v444;
          uint64_t v127 = v449;
          (*(void (**)(uint64_t, uint64_t))(v444 + 24))(v449, v444);
          (*v426)(v170, v127);
          (*v427)(v171, v441);
        }
        else
        {
          (*v426)(v170, v449);
          (*v440)((char *)v181, v171, v450);
          uint64_t v126 = v444;
        }
        uint64_t v128 = v414;
        uint64_t v129 = (uint64_t)v413;
        static HermiteCurve.linear(start:end:)(v181, (uint64_t)v413, v126, v414);
        uint64_t v130 = v417;
        double v131 = *(double *)(v129 + *(int *)(v417 + 36));
        uint64_t v132 = v129 + *(int *)(v417 + 40);
        char v133 = *(unsigned char *)(v132 + 32);
        long long v134 = *(_OWORD *)(v132 + 16);
        __n128 v451 = *(__n128 *)v132;
        long long v452 = v134;
        char v453 = v133;
        uint64_t v135 = v434;
        AnimationPath.CurveElement.init(curve:duration:constantVelocity:timingCurve:)(v128, 0, &v451, v434, v131);
        swift_storeEnumTagMultiPayload();
        type metadata accessor for AnimationPath();
        AnimationPath.append(_:)(v135);
        (*v443)(v135, v38);
        (*v125)(v181, v450);
        (*v398)(v129, v130);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v438)(v447, v107);
LABEL_8:
        long long v121 = v419;
        uint64_t v122 = v432;
        break;
      default:
        uint64_t v139 = (uint64_t)v442;
        uint64_t v140 = v450;
        (*v440)(v442, (uint64_t)v121, v450);
        uint64_t v141 = v122;
        uint64_t v142 = v434;
        (*v421)(v434, v139, v140);
        swift_storeEnumTagMultiPayload();
        type metadata accessor for AnimationPath();
        AnimationPath.append(_:)(v142);
        uint64_t v143 = v142;
        uint64_t v122 = v141;
        (*v443)(v143, v38);
        (*v125)(v139, v140);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v438)(v447, v107);
        break;
    }
    unint64_t v124 = v448;
  }
  while (v430 != v448);
  return result;
}

uint64_t CubicKeyframeHelper.init(from:to:duration:start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v13(a5, a1, AssociatedTypeWitness);
  uint64_t v14 = (int *)type metadata accessor for CubicKeyframeHelper();
  v13(a5 + v14[9], a2, AssociatedTypeWitness);
  *(double *)(a5 + v14[10]) = a6;
  uint64_t v15 = a5 + v14[11];
  uint64_t v16 = type metadata accessor for CubicKeyframeHelper.Connection();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v19)((void *)(v16 - 8), v15, a3, v16);
  uint64_t v17 = a5 + v14[12];

  return v19(v17, a4, v16);
}

uint64_t CubicKeyframeHelper.curve.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = (int *)a1;
  uint64_t v86 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = type metadata accessor for CubicKeyframeHelper.Connection();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v85 = (double *)((char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (double *)((char *)&v74 - v11);
  uint64_t v90 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v87 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (char *)&v74 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v79 = (char *)&v74 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v81 = (char *)&v74 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v80 = (uint64_t)&v74 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v78 = (char *)&v74 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v74 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v88 = (char *)&v74 - v30;
  double v32 = MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v74 - v33;
  uint64_t v35 = v3 + v4[11];
  uint64_t v36 = *(void (**)(double *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v84 = v8 + 16;
  uint64_t v82 = v36;
  ((void (*)(double *, uint64_t, uint64_t, double))v36)(v12, v35, v7, v32);
  uint64_t v83 = v7;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v91 = v34;
  uint64_t v92 = v4;
  uint64_t v89 = v14;
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, double *, uint64_t))(v14 + 32))(v28, v12, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v34, v28, AssociatedTypeWitness);
    double v51 = *(double *)(v3 + v4[10]);
    uint64_t v50 = v3;
    if (v51 > 0.0)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, v51);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v28, AssociatedTypeWitness);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    double v38 = *v12;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v40 = v89;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v78, (char *)v12 + *(int *)(TupleTypeMetadata2 + 48), AssociatedTypeWitness);
    uint64_t v77 = v6;
    uint64_t v41 = swift_getAssociatedConformanceWitness();
    uint64_t v42 = (uint64_t)v81;
    uint64_t v43 = v3;
    uint64_t v44 = v41;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v45 = v80;
    VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v44, v80, 0.5);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v42, AssociatedTypeWitness);
    uint64_t v47 = v79;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v44, v42, 0.5);
    v46((uint64_t)v47, AssociatedTypeWitness);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v46(v42, AssociatedTypeWitness);
    v46(v45, AssociatedTypeWitness);
    uint64_t v48 = v92[10];
    uint64_t v75 = v43;
    double v49 = *(double *)(v43 + v48);
    if (v49 > 0.0 && v38 > 0.0) {
      (*(void (**)(uint64_t, uint64_t, double))(v44 + 16))(AssociatedTypeWitness, v44, (v49 + v49) / (v38 + v49));
    }
    v46((uint64_t)v78, AssociatedTypeWitness);
    uint64_t v14 = v89;
    uint64_t v6 = v77;
    uint64_t v50 = v75;
    uint64_t v4 = v92;
LABEL_10:
    uint64_t v53 = (uint64_t)v88;
    goto LABEL_12;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v4 = v92;
  uint64_t v53 = (uint64_t)v88;
  uint64_t v14 = v89;
  uint64_t v50 = v3;
LABEL_12:
  uint64_t v54 = v85;
  v82(v85, v50 + v4[12], v83);
  int v55 = swift_getEnumCaseMultiPayload();
  if (v55)
  {
    if (v55 == 1)
    {
      double v56 = *v54;
      uint64_t v57 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v87, (char *)v54 + *(int *)(v57 + 48), AssociatedTypeWitness);
      uint64_t v85 = (double *)(v50 + v4[9]);
      uint64_t v77 = v6;
      uint64_t v58 = v14;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      uint64_t v60 = (uint64_t)v81;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v61 = v80;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v59, v80, 0.5);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v62(v60, AssociatedTypeWitness);
      uint64_t v63 = v79;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v85 = (double *)v59;
      uint64_t v64 = v59;
      uint64_t v53 = (uint64_t)v88;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v64, v60, 0.5);
      v62((uint64_t)v63, AssociatedTypeWitness);
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      v62(v60, AssociatedTypeWitness);
      v62(v61, AssociatedTypeWitness);
      double v65 = *(double *)(v50 + v92[10]);
      if (v65 > 0.0 && v56 > 0.0) {
        (*((void (**)(uint64_t, double))v85 + 2))(AssociatedTypeWitness, (v65 + v65) / (v56 + v65));
      }
      v62((uint64_t)v87, AssociatedTypeWitness);
      uint64_t v14 = v89;
      uint64_t v4 = v92;
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static AdditiveArithmetic.zero.getter();
    }
  }
  else
  {
    uint64_t v66 = v76;
    (*(void (**)(char *, double *, uint64_t))(v14 + 32))(v76, v54, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v53, v66, AssociatedTypeWitness);
    double v67 = *(double *)(v50 + v4[10]);
    if (v67 > 0.0)
    {
      uint64_t v68 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, double))(v68 + 16))(AssociatedTypeWitness, v68, v67);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v66, AssociatedTypeWitness);
  }
  uint64_t v69 = v50 + v4[9];
  uint64_t v70 = v50;
  uint64_t v71 = (uint64_t)v91;
  static HermiteCurve.hermite(start:end:startTangent:endTangent:)(v70, v69, (uint64_t)v91, v53, v86);
  uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v72(v53, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t))v72)(v71, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for KeyframeTrack<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyframeTrack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for KeyframeTrack(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for KeyframeTrack(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *assignWithCopy for KeyframeTrack(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *initializeWithTake for KeyframeTrack(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for KeyframeTrack(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for KeyframeTrack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245B15D6CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(uint64_t *a1)
{
  return closure #1 in KeyframeTrack.resolve(initialValue:initialVelocity:)(a1, v1[6], v1[7], v1[8], v1[2], v1[3]);
}

uint64_t type metadata accessor for CubicKeyframeHelper.Connection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CubicKeyframeHelper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CubicKeyframeHelper()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CubicKeyframeHelper.Connection();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CubicKeyframeHelper(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = v6 + 7;
  uint64_t v11 = ~(v7 | 7);
  if (((v8 + 8) & ~v8) + v6 <= v6) {
    uint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v12 = ((v7 + 8) & ~(unint64_t)v7) + v6;
  }
  unint64_t v13 = ((v12
        + 1
        + (v7 | 7)
        + ((v7
          + 8
          + ((v6 + 7 + ((v6 + v7) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)) & ~(v7 | 7))) & ~(v7 | 7))
      + v12
      + 1;
  int v14 = v7 & 0x100000;
  if (v8 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = v17 + ((v8 + 16) & v11);
    swift_retain();
  }
  else
  {
    uint64_t v43 = v8 + 8;
    size_t __n = v12 + 1;
    uint64_t v19 = ~v8;
    uint64_t v20 = AssociatedTypeWitness;
    uint64_t v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v21(a1, a2, AssociatedTypeWitness);
    uint64_t v45 = a1;
    unint64_t v22 = ((unint64_t)a1 + v9) & v19;
    unint64_t v23 = (unint64_t)a2 + v9;
    uint64_t v24 = (void (*)(unint64_t, unint64_t, uint64_t))v21;
    unint64_t v25 = v23 & v19;
    v21((uint64_t *)v22, (uint64_t *)(v23 & v19), v20);
    uint64_t v26 = (void *)((v10 + v22) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)((v10 + v25) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    uint64_t v28 = (void *)(((unint64_t)v26 + 15) & v11);
    uint64_t v29 = (unsigned __int8 *)(((unint64_t)v27 + 15) & v11);
    unsigned int v30 = v29[v12];
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v32 = v12;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *v29;
          goto LABEL_22;
        case 2:
          int v33 = *(unsigned __int16 *)v29;
          goto LABEL_22;
        case 3:
          int v33 = *(unsigned __int16 *)v29 | (v29[2] << 16);
          goto LABEL_22;
        case 4:
          int v33 = *(_DWORD *)v29;
LABEL_22:
          int v34 = (v33 | (v31 << (8 * v12))) + 2;
          unsigned int v30 = v33 + 2;
          if (v12 < 4) {
            unsigned int v30 = v34;
          }
          break;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
      *uint64_t v28 = *(void *)v29;
      v24(((unint64_t)v28 + v43) & v19, (unint64_t)&v29[v43] & v19, v20);
      *((unsigned char *)v28 + v12) = 1;
    }
    else if (v30)
    {
      memcpy(v28, v29, __n);
    }
    else
    {
      v24((unint64_t)v28, (unint64_t)v29, v20);
      *((unsigned char *)v28 + v12) = 0;
    }
    uint64_t v35 = (void *)(((unint64_t)v28 + v12 + 8) & v11);
    uint64_t v36 = (unsigned __int8 *)((unint64_t)&v29[v12 + 8] & v11);
    unsigned int v37 = v36[v12];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v39 = v12;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v36;
          goto LABEL_38;
        case 2:
          int v40 = *(unsigned __int16 *)v36;
          goto LABEL_38;
        case 3:
          int v40 = *(unsigned __int16 *)v36 | (*(unsigned __int8 *)(((unint64_t)&v29[v12 + 8] & v11) + 2) << 16);
          goto LABEL_38;
        case 4:
          int v40 = *(_DWORD *)v36;
LABEL_38:
          int v41 = (v40 | (v38 << (8 * v12))) + 2;
          unsigned int v37 = v40 + 2;
          if (v12 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1)
    {
      *uint64_t v35 = *(void *)v36;
      v24(((unint64_t)v35 + v43) & v19, (unint64_t)&v36[v43] & v19, v20);
      *((unsigned char *)v35 + v12) = 1;
    }
    else if (v37)
    {
      memcpy(v35, v36, __n);
    }
    else
    {
      ((void (*)(void *))v24)(v35);
      *((unsigned char *)v35 + v12) = 0;
    }
    return v45;
  }
  return (uint64_t *)v18;
}

unsigned __int8 *destroy for CubicKeyframeHelper(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8) + 8;
  unint64_t v23 = *(void (**)(uint64_t, uint64_t))v22;
  (*(void (**)(uint64_t __return_ptr, uint64_t, uint64_t))v22)(AssociatedTypeWitness - 8, a1, AssociatedTypeWitness);
  unint64_t v3 = *(void *)(v22 + 56);
  uint64_t v4 = *(unsigned __int8 *)(v22 + 72);
  uint64_t v5 = (v3 + a1 + v4) & ~v4;
  v23(v5, AssociatedTypeWitness);
  uint64_t v6 = v4 | 7;
  uint64_t v7 = v4 + 8;
  uint64_t v8 = (unsigned __int8 *)((v4 + 8 + ((v3 + v5 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(v4 | 7));
  if (((v4 + 8) & ~v4) + v3 > v3) {
    v3 += (v4 + 8) & ~v4;
  }
  unsigned int v9 = v8[v3];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *v8;
        goto LABEL_12;
      case 2:
        int v12 = *(unsigned __int16 *)v8;
        goto LABEL_12;
      case 3:
        int v12 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_12;
      case 4:
        int v12 = *(_DWORD *)v8;
LABEL_12:
        int v13 = (v12 | (v10 << (8 * v3))) + 2;
        unsigned int v9 = v12 + 2;
        if (v3 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v14 = ~v4;
  if (v9 == 1)
  {
    int v15 = (unsigned __int8 *)((unint64_t)&v8[v7] & v14);
  }
  else
  {
    if (v9) {
      goto LABEL_19;
    }
    int v15 = v8;
  }
  v23((uint64_t)v15, AssociatedTypeWitness);
LABEL_19:
  uint64_t result = (unsigned __int8 *)((unint64_t)&v8[v6 + 1 + v3] & ~v6);
  unsigned int v17 = result[v3];
  unsigned int v18 = v17 - 2;
  if (v17 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v19 = v3;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *result;
        goto LABEL_28;
      case 2:
        int v20 = *(unsigned __int16 *)result;
        goto LABEL_28;
      case 3:
        int v20 = *(unsigned __int16 *)result | (*(unsigned __int8 *)(((unint64_t)&v8[v6 + 1 + v3] & ~v6) + 2) << 16);
        goto LABEL_28;
      case 4:
        int v20 = *(_DWORD *)result;
LABEL_28:
        int v21 = (v20 | (v18 << (8 * v3))) + 2;
        unsigned int v17 = v20 + 2;
        if (v3 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
    uint64_t result = (unsigned __int8 *)((unint64_t)&result[v7] & v14);
  }
  else if (v17)
  {
    return result;
  }

  return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 *, uint64_t))v23)(result, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  unint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v35 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *v13;
  uint64_t v14 = v9 | 7;
  uint64_t v15 = v9 + 8;
  unsigned int v16 = (void *)(((unint64_t)v12 + v9 + 8) & ~(v9 | 7));
  unsigned int v17 = (unsigned __int8 *)(((unint64_t)v13 + v9 + 8) & ~(v9 | 7));
  if (((v9 + 8) & ~v9) + v8 <= v8) {
    unint64_t v18 = v8;
  }
  else {
    unint64_t v18 = ((v9 + 8) & ~v9) + v8;
  }
  unsigned int v19 = v17[v18];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v17;
        goto LABEL_13;
      case 2:
        int v22 = *(unsigned __int16 *)v17;
        goto LABEL_13;
      case 3:
        int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_13;
      case 4:
        int v22 = *(_DWORD *)v17;
LABEL_13:
        int v23 = (v22 | (v20 << (8 * v18))) + 2;
        unsigned int v19 = v22 + 2;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v24 = ~v9;
  uint64_t v25 = ~v14;
  if (v19 == 1)
  {
    *unsigned int v16 = *(void *)v17;
    v6(((unint64_t)v16 + v15) & v24, (unint64_t)&v17[v15] & v24, AssociatedTypeWitness);
    *((unsigned char *)v16 + v18) = 1;
  }
  else if (v19)
  {
    memcpy(v16, v17, v18 + 1);
  }
  else
  {
    v6((uint64_t)v16, (uint64_t)v17, AssociatedTypeWitness);
    *((unsigned char *)v16 + v18) = 0;
  }
  uint64_t v26 = v18 + 1 + v14;
  uint64_t v27 = (void *)(((unint64_t)v16 + v26) & v25);
  uint64_t v28 = (unsigned __int8 *)((unint64_t)&v17[v26] & v25);
  unsigned int v29 = v28[v18];
  unsigned int v30 = v29 - 2;
  if (v29 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v31 = v18;
    }
    else {
      uint64_t v31 = 4;
    }
    switch(v31)
    {
      case 1:
        int v32 = *v28;
        goto LABEL_29;
      case 2:
        int v32 = *(unsigned __int16 *)v28;
        goto LABEL_29;
      case 3:
        int v32 = *(unsigned __int16 *)v28 | (v28[2] << 16);
        goto LABEL_29;
      case 4:
        int v32 = *(_DWORD *)v28;
LABEL_29:
        int v33 = (v32 | (v30 << (8 * v18))) + 2;
        unsigned int v29 = v32 + 2;
        if (v18 < 4) {
          unsigned int v29 = v33;
        }
        break;
      default:
        break;
    }
  }
  if (v29 == 1)
  {
    *uint64_t v27 = *(void *)v28;
    v6(((unint64_t)v27 + v15) & v24, (unint64_t)&v28[v15] & v24, AssociatedTypeWitness);
    *((unsigned char *)v27 + v18) = 1;
  }
  else if (v29)
  {
    memcpy(v27, v28, v18 + 1);
  }
  else
  {
    ((void (*)(void *))v6)(v27);
    *((unsigned char *)v27 + v18) = 0;
  }
  return v35;
}

uint64_t assignWithCopy for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v7(a1, a2, AssociatedTypeWitness);
  unint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v42 = ~v9;
  uint64_t v43 = a1;
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (void *)((v8 + 7 + ((v8 + v9 + a1) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  int v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  uint64_t v13 = v9 + 8;
  uint64_t v14 = ~(v9 | 7);
  uint64_t v15 = (unsigned __int8 *)(((unint64_t)v11 + v9 + 8) & v14);
  unsigned int v16 = (unsigned __int8 *)(((unint64_t)v12 + v9 + 8) & v14);
  if (((v9 + 8) & ~v9) + v8 <= v8) {
    unint64_t v17 = v8;
  }
  else {
    unint64_t v17 = ((v9 + 8) & ~v9) + v8;
  }
  if (v15 != v16)
  {
    unsigned int v18 = v15[v17];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v15;
          goto LABEL_14;
        case 2:
          int v21 = *(unsigned __int16 *)v15;
          goto LABEL_14;
        case 3:
          int v21 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_14;
        case 4:
          int v21 = *(_DWORD *)v15;
LABEL_14:
          int v22 = (v21 | (v19 << (8 * v17))) + 2;
          unsigned int v18 = v21 + 2;
          if (v17 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&v15[v13] & v42, AssociatedTypeWitness);
    }
    else if (!v18)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v15, AssociatedTypeWitness);
    }
    unsigned int v23 = v16[v17];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v25 = v17;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v16;
          goto LABEL_29;
        case 2:
          int v26 = *(unsigned __int16 *)v16;
          goto LABEL_29;
        case 3:
          int v26 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_29;
        case 4:
          int v26 = *(_DWORD *)v16;
LABEL_29:
          int v27 = (v26 | (v24 << (8 * v17))) + 2;
          unsigned int v23 = v26 + 2;
          if (v17 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&v15[v13] & v42, (unint64_t)&v16[v13] & v42, AssociatedTypeWitness);
      v15[v17] = 1;
    }
    else if (v23)
    {
      memcpy(v15, v16, v17 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v15, v16, AssociatedTypeWitness);
      v15[v17] = 0;
    }
  }
  uint64_t v28 = v17 + 1 + (v9 | 7);
  unsigned int v29 = (unsigned __int8 *)((unint64_t)&v15[v28] & v14);
  unsigned int v30 = (unsigned __int8 *)((unint64_t)&v16[v28] & v14);
  if (v29 != v30)
  {
    unsigned int v31 = v29[v17];
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v33 = v17;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *v29;
          goto LABEL_46;
        case 2:
          int v34 = *(unsigned __int16 *)v29;
          goto LABEL_46;
        case 3:
          int v34 = *(unsigned __int16 *)v29 | (v29[2] << 16);
          goto LABEL_46;
        case 4:
          int v34 = *(_DWORD *)v29;
LABEL_46:
          int v35 = (v34 | (v32 << (8 * v17))) + 2;
          unsigned int v31 = v34 + 2;
          if (v17 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&v29[v13] & v42, AssociatedTypeWitness);
    }
    else if (!v31)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v29, AssociatedTypeWitness);
    }
    unsigned int v36 = v30[v17];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v38 = v17;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *v30;
          goto LABEL_61;
        case 2:
          int v39 = *(unsigned __int16 *)v30;
          goto LABEL_61;
        case 3:
          int v39 = *(unsigned __int16 *)v30 | (v30[2] << 16);
          goto LABEL_61;
        case 4:
          int v39 = *(_DWORD *)v30;
LABEL_61:
          int v40 = (v39 | (v37 << (8 * v17))) + 2;
          unsigned int v36 = v39 + 2;
          if (v17 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
      *(void *)unsigned int v29 = *(void *)v30;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&v29[v13] & v42, (unint64_t)&v30[v13] & v42, AssociatedTypeWitness);
      v29[v17] = 1;
    }
    else if (v36)
    {
      memcpy(v29, v30, v17 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(v29, v30, AssociatedTypeWitness);
      v29[v17] = 0;
    }
  }
  return v43;
}

uint64_t initializeWithTake for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  unint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v35 = a1;
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v6(v10, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *v13;
  uint64_t v14 = v9 | 7;
  uint64_t v15 = v9 + 8;
  unsigned int v16 = (void *)(((unint64_t)v12 + v9 + 8) & ~(v9 | 7));
  unint64_t v17 = (unsigned __int8 *)(((unint64_t)v13 + v9 + 8) & ~(v9 | 7));
  if (((v9 + 8) & ~v9) + v8 <= v8) {
    unint64_t v18 = v8;
  }
  else {
    unint64_t v18 = ((v9 + 8) & ~v9) + v8;
  }
  unsigned int v19 = v17[v18];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v17;
        goto LABEL_13;
      case 2:
        int v22 = *(unsigned __int16 *)v17;
        goto LABEL_13;
      case 3:
        int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_13;
      case 4:
        int v22 = *(_DWORD *)v17;
LABEL_13:
        int v23 = (v22 | (v20 << (8 * v18))) + 2;
        unsigned int v19 = v22 + 2;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v24 = ~v9;
  uint64_t v25 = ~v14;
  if (v19 == 1)
  {
    *unsigned int v16 = *(void *)v17;
    v6(((unint64_t)v16 + v15) & v24, (unint64_t)&v17[v15] & v24, AssociatedTypeWitness);
    *((unsigned char *)v16 + v18) = 1;
  }
  else if (v19)
  {
    memcpy(v16, v17, v18 + 1);
  }
  else
  {
    v6((uint64_t)v16, (uint64_t)v17, AssociatedTypeWitness);
    *((unsigned char *)v16 + v18) = 0;
  }
  uint64_t v26 = v18 + 1 + v14;
  int v27 = (void *)(((unint64_t)v16 + v26) & v25);
  uint64_t v28 = (unsigned __int8 *)((unint64_t)&v17[v26] & v25);
  unsigned int v29 = v28[v18];
  unsigned int v30 = v29 - 2;
  if (v29 >= 2)
  {
    if (v18 <= 3) {
      uint64_t v31 = v18;
    }
    else {
      uint64_t v31 = 4;
    }
    switch(v31)
    {
      case 1:
        int v32 = *v28;
        goto LABEL_29;
      case 2:
        int v32 = *(unsigned __int16 *)v28;
        goto LABEL_29;
      case 3:
        int v32 = *(unsigned __int16 *)v28 | (v28[2] << 16);
        goto LABEL_29;
      case 4:
        int v32 = *(_DWORD *)v28;
LABEL_29:
        int v33 = (v32 | (v30 << (8 * v18))) + 2;
        unsigned int v29 = v32 + 2;
        if (v18 < 4) {
          unsigned int v29 = v33;
        }
        break;
      default:
        break;
    }
  }
  if (v29 == 1)
  {
    *int v27 = *(void *)v28;
    v6(((unint64_t)v27 + v15) & v24, (unint64_t)&v28[v15] & v24, AssociatedTypeWitness);
    *((unsigned char *)v27 + v18) = 1;
  }
  else if (v29)
  {
    memcpy(v27, v28, v18 + 1);
  }
  else
  {
    ((void (*)(void *))v6)(v27);
    *((unsigned char *)v27 + v18) = 0;
  }
  return v35;
}

uint64_t assignWithTake for CubicKeyframeHelper(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v7(a1, a2, AssociatedTypeWitness);
  unint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v42 = ~v9;
  uint64_t v43 = a1;
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (void *)((v8 + 7 + ((v8 + v9 + a1) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  int v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  uint64_t v13 = v9 + 8;
  uint64_t v14 = ~(v9 | 7);
  uint64_t v15 = (unsigned __int8 *)(((unint64_t)v11 + v9 + 8) & v14);
  unsigned int v16 = (unsigned __int8 *)(((unint64_t)v12 + v9 + 8) & v14);
  if (((v9 + 8) & ~v9) + v8 <= v8) {
    unint64_t v17 = v8;
  }
  else {
    unint64_t v17 = ((v9 + 8) & ~v9) + v8;
  }
  if (v15 != v16)
  {
    unsigned int v18 = v15[v17];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v15;
          goto LABEL_14;
        case 2:
          int v21 = *(unsigned __int16 *)v15;
          goto LABEL_14;
        case 3:
          int v21 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_14;
        case 4:
          int v21 = *(_DWORD *)v15;
LABEL_14:
          int v22 = (v21 | (v19 << (8 * v17))) + 2;
          unsigned int v18 = v21 + 2;
          if (v17 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&v15[v13] & v42, AssociatedTypeWitness);
    }
    else if (!v18)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v15, AssociatedTypeWitness);
    }
    unsigned int v23 = v16[v17];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v25 = v17;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v16;
          goto LABEL_29;
        case 2:
          int v26 = *(unsigned __int16 *)v16;
          goto LABEL_29;
        case 3:
          int v26 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_29;
        case 4:
          int v26 = *(_DWORD *)v16;
LABEL_29:
          int v27 = (v26 | (v24 << (8 * v17))) + 2;
          unsigned int v23 = v26 + 2;
          if (v17 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&v15[v13] & v42, (unint64_t)&v16[v13] & v42, AssociatedTypeWitness);
      v15[v17] = 1;
    }
    else if (v23)
    {
      memcpy(v15, v16, v17 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v15, v16, AssociatedTypeWitness);
      v15[v17] = 0;
    }
  }
  uint64_t v28 = v17 + 1 + (v9 | 7);
  unsigned int v29 = (unsigned __int8 *)((unint64_t)&v15[v28] & v14);
  unsigned int v30 = (unsigned __int8 *)((unint64_t)&v16[v28] & v14);
  if (v29 != v30)
  {
    unsigned int v31 = v29[v17];
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v33 = v17;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *v29;
          goto LABEL_46;
        case 2:
          int v34 = *(unsigned __int16 *)v29;
          goto LABEL_46;
        case 3:
          int v34 = *(unsigned __int16 *)v29 | (v29[2] << 16);
          goto LABEL_46;
        case 4:
          int v34 = *(_DWORD *)v29;
LABEL_46:
          int v35 = (v34 | (v32 << (8 * v17))) + 2;
          unsigned int v31 = v34 + 2;
          if (v17 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&v29[v13] & v42, AssociatedTypeWitness);
    }
    else if (!v31)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v29, AssociatedTypeWitness);
    }
    unsigned int v36 = v30[v17];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v38 = v17;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *v30;
          goto LABEL_61;
        case 2:
          int v39 = *(unsigned __int16 *)v30;
          goto LABEL_61;
        case 3:
          int v39 = *(unsigned __int16 *)v30 | (v30[2] << 16);
          goto LABEL_61;
        case 4:
          int v39 = *(_DWORD *)v30;
LABEL_61:
          int v40 = (v39 | (v37 << (8 * v17))) + 2;
          unsigned int v36 = v39 + 2;
          if (v17 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 == 1)
    {
      *(void *)unsigned int v29 = *(void *)v30;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&v29[v13] & v42, (unint64_t)&v30[v13] & v42, AssociatedTypeWitness);
      v29[v17] = 1;
    }
    else if (v36)
    {
      memcpy(v29, v30, v17 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v29, v30, AssociatedTypeWitness);
      v29[v17] = 0;
    }
  }
  return v43;
}

uint64_t getEnumTagSinglePayload for CubicKeyframeHelper(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v8 + 8;
  if (((v8 + 8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v10 = ((v8 + 8) & ~v8) + v7;
  }
  if (v6 <= 0xFD) {
    unsigned int v11 = 253;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v7 + v8;
  uint64_t v13 = v7 + 7;
  uint64_t v14 = v8 | 7;
  if (a2 <= v11) {
    goto LABEL_28;
  }
  unint64_t v15 = ((v10 + 1 + v14 + ((v9 + ((v13 + (v12 & ~v8)) & 0xFFFFFFFFFFFFFFF8)) & ~v14)) & ~v14) + v10 + 1;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v6 < 0xFD)
      {
        unsigned int v24 = *(unsigned __int8 *)(((v9 + ((v13 + (((unint64_t)a1 + v12) & ~v8)) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
                                 + v10);
        if (v24 >= 3) {
          return (v24 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unsigned int v23 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
        return v23(a1);
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v11 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for CubicKeyframeHelper(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = ((v9 + 8) & ~v9) + v8;
  if (v11 <= v8) {
    unint64_t v11 = *(void *)(v6 + 64);
  }
  if (v7 <= 0xFD) {
    unsigned int v12 = 253;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v13 = v8 + v9;
  uint64_t v14 = (v8 + v9) & ~v9;
  unint64_t v15 = v8 + 7;
  size_t v16 = v11 + 1;
  size_t v17 = ((v11 + 1 + (v9 | 7) + ((v10 + ((v15 + v14) & 0xFFFFFFFFFFFFFFF8)) & ~(v9 | 7))) & ~(v9 | 7)) + v11 + 1;
  if (a3 <= v12)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v12 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v19 = ~v12 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_50;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x245B17B70);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 < 0xFD)
        {
          unsigned int v24 = (unsigned char *)((v10 + ((v15 + ((unint64_t)&a1[v13] & ~v9)) & 0xFFFFFFFFFFFFFFF8)) & ~(v9 | 7));
          if (a2 > 0xFD)
          {
            int v25 = a2 - 254;
            if (v16 < 4)
            {
              if (v11 != -1)
              {
                int v26 = v25 & ~(-1 << (8 * v16));
                bzero(v24, v16);
                if (v16 == 3)
                {
                  *(_WORD *)unsigned int v24 = v26;
                  v24[2] = BYTE2(v26);
                }
                else if (v16 == 2)
                {
                  *(_WORD *)unsigned int v24 = v26;
                }
                else
                {
                  *unsigned int v24 = v26;
                }
              }
            }
            else
            {
              bzero(v24, v11 + 1);
              *(_DWORD *)unsigned int v24 = v25;
            }
          }
          else
          {
            v24[v11] = -(char)a2;
          }
        }
        else
        {
          unsigned int v23 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
          v23(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for CubicKeyframeHelper.Connection()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CubicKeyframeHelper.Connection(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (((v8 + 8) & ~v8) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v7 + 8) & ~(unint64_t)v7) + v6;
  }
  size_t v10 = v9 + 1;
  if (v7 > 7u || (v7 & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_22;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_22;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_22;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_22:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      *a1 = *(void *)a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v8 + 8) & ~v8, (unint64_t)&a2[v8 + 8] & ~v8, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 1;
    }
    else if (v14)
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  return a1;
}

uint64_t destroy for CubicKeyframeHelper.Connection(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (((v6 + 8) & ~v6) + v5 > v5) {
    v5 += (v6 + 8) & ~v6;
  }
  unsigned int v7 = a1[v5];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v5))) + 2;
        unsigned int v7 = v10 + 2;
        if (v5 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1)
  {
    uint64_t v13 = (unint64_t)&a1[v6 + 8] & ~v6;
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  }
  else
  {
    if (v7) {
      return result;
    }
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v13 = (uint64_t)a1;
  }

  return v12(v13, v3);
}

void *initializeWithCopy for CubicKeyframeHelper.Connection(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 8) & ~v7) + v6 <= v6) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = ((v7 + 8) & ~v7) + v6;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    *a1 = *(void *)a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v7 + 8) & ~v7, (unint64_t)&a2[v7 + 8] & ~v7, AssociatedTypeWitness);
    *((unsigned char *)a1 + v8) = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v8) = 0;
  }
  return a1;
}

unsigned __int8 *assignWithCopy for CubicKeyframeHelper.Connection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    if (((v7 + 8) & ~v7) + v6 <= v6) {
      uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + v6;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((unint64_t)&a1[v7 + 8] & v14, AssociatedTypeWitness);
    }
    else if (!v9)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v18 | (v16 << (8 * v8))) + 2;
          unsigned int v15 = v18 + 2;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      *(void *)a1 = *(void *)a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, AssociatedTypeWitness);
      a1[v8] = 1;
    }
    else if (v15)
    {
      memcpy(a1, a2, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v8] = 0;
    }
  }
  return a1;
}

void *initializeWithTake for CubicKeyframeHelper.Connection(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 8) & ~v7) + v6 <= v6) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = ((v7 + 8) & ~v7) + v6;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    *a1 = *(void *)a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & ~v7, (unint64_t)&a2[v7 + 8] & ~v7, AssociatedTypeWitness);
    *((unsigned char *)a1 + v8) = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v8) = 0;
  }
  return a1;
}

unsigned __int8 *assignWithTake for CubicKeyframeHelper.Connection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    if (((v7 + 8) & ~v7) + v6 <= v6) {
      uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + v6;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((unint64_t)&a1[v7 + 8] & v14, AssociatedTypeWitness);
    }
    else if (!v9)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v18 | (v16 << (8 * v8))) + 2;
          unsigned int v15 = v18 + 2;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      *(void *)a1 = *(void *)a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, AssociatedTypeWitness);
      a1[v8] = 1;
    }
    else if (v15)
    {
      memcpy(a1, a2, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v8] = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CubicKeyframeHelper.Connection(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 <= v5) {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 < 2)
    {
LABEL_22:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 3) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_22;
  }
LABEL_14:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 254;
}

void storeEnumTagSinglePayload for CubicKeyframeHelper.Connection(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  size_t v9 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v11 = a2 - 254;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v7 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245B18C30);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CubicKeyframeHelper.Connection(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  uint64_t result = a1[v3];
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v9 = v7 + 2;
        if (v3 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for CubicKeyframeHelper.Connection(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v5 = *(void *)(v4 + 64);
  size_t v6 = ((*(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 <= v5) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_2461C3400[*v0]);
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AccessibilityCustomAttributes.Value.displayDescription.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v9);
  unsigned int v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityCustomAttributes.Value(v0, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = *(void *)v11;
      unint64_t v14 = *((void *)v11 + 1);
      uint64_t v12 = Data.description.getter();
      outlined consume of Data._Representation(v13, v14);
      return v12;
    case 2u:
      id v15 = *(id *)v11;
      id v16 = objc_msgSend(*(id *)v11, sel_stringValue);
      goto LABEL_9;
    case 3u:
    case 7u:
      id v15 = *(id *)v11;
      id v16 = objc_msgSend(*(id *)v11, sel_description);
      goto LABEL_9;
    case 4u:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      uint64_t v12 = Date.description.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return v12;
    case 5u:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      uint64_t v12 = URL.absoluteString.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return v12;
    case 6u:
      id v15 = *(id *)v11;
      id v16 = objc_msgSend(*(id *)v11, sel_string);
LABEL_9:
      id v17 = v16;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      break;
    default:
      uint64_t v12 = *(void *)v11;
      break;
  }
  return v12;
}

uint64_t AccessibilityCustomAttributes.Value.axRepresentation()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AccessibilityCustomAttributes.Value(v2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v17 = *v14;
      unint64_t v18 = v14[1];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      a1[3] = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSData);
      uint64_t result = outlined consume of Data._Representation(v17, v18);
      *a1 = isa;
      return result;
    case 2u:
      uint64_t v20 = *v14;
      unsigned int v21 = &lazy cache variable for type metadata for NSNumber;
      goto LABEL_10;
    case 3u:
      uint64_t v20 = *v14;
      unsigned int v21 = &lazy cache variable for type metadata for NSValue;
      goto LABEL_10;
    case 4u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
      Class v22 = Date._bridgeToObjectiveC()().super.isa;
      a1[3] = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSDate);
      *a1 = v22;
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    case 5u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v14, v4);
      URL._bridgeToObjectiveC()(v23);
      uint64_t v25 = v24;
      a1[3] = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSURL);
      *a1 = v25;
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    case 6u:
      uint64_t v20 = *v14;
      unsigned int v21 = (unint64_t *)&lazy cache variable for type metadata for NSAttributedString;
      goto LABEL_10;
    case 7u:
      uint64_t v20 = *v14;
      unsigned int v21 = (unint64_t *)&lazy cache variable for type metadata for NSObject;
LABEL_10:
      uint64_t result = type metadata accessor for CAPresentationModifier(0, v21);
      a1[3] = result;
      *a1 = v20;
      break;
    default:
      uint64_t v15 = MEMORY[0x24C522820](*v14, v14[1]);
      swift_bridgeObjectRelease();
      uint64_t result = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSString);
      a1[3] = result;
      *a1 = v15;
      break;
  }
  return result;
}

SwiftUI::AccessibilityCustomAttributes __swiftcall AccessibilityCustomAttributes.init()()
{
  uint64_t v1 = v0;
  result.attributes._rawuint64_t Value = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v1->attributes._rawuint64_t Value = result.attributes._rawValue;
  return result;
}

void *AccessibilityCustomAttributes.attributeNames.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x263F8D310], (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AccessibilityCustomAttributes.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v9)
    {
      unint64_t v10 = v8;
      uint64_t v11 = *(void *)(v5 + 56);
      uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
      uint64_t v13 = *(void *)(v12 - 8);
      outlined init with copy of AccessibilityCustomAttributes.Value(v11 + *(void *)(v13 + 72) * v10, a3, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a3, 0, 1, v12);
    }
    else
    {
      uint64_t v17 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a3, 1, 1, v17);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = type metadata accessor for AccessibilityCustomAttributes.Value();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    return v15(a3, 1, 1, v14);
  }
}

uint64_t key path getter for AccessibilityCustomAttributes.subscript(_:) : AccessibilityCustomAttributes@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.subscript.getter(v3, v4, a2);

  return swift_bridgeObjectRelease();
}

uint64_t key path setter for AccessibilityCustomAttributes.subscript(_:) : AccessibilityCustomAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  outlined init with copy of AccessibilityCustomAttributes.Value?(a1, (uint64_t)&v11 - v6);
  swift_bridgeObjectRetain();
  return AccessibilityCustomAttributes.subscript.setter((uint64_t)v7, v9, v8);
}

void (*AccessibilityCustomAttributes.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  uint64_t v7[2] = v3;
  *uint64_t v7 = a2;
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  size_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  v7[3] = malloc(v9);
  unint64_t v10 = malloc(v9);
  v7[4] = v10;
  uint64_t v11 = *v3;
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v13)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(v11 + 56);
      uint64_t v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
      uint64_t v17 = *(void *)(v16 - 8);
      outlined init with copy of AccessibilityCustomAttributes.Value(v15 + *(void *)(v17 + 72) * v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
    }
    else
    {
      uint64_t v19 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = type metadata accessor for AccessibilityCustomAttributes.Value();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
  }
  return AccessibilityCustomAttributes.subscript.modify;
}

void AccessibilityCustomAttributes.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  uint64_t v4 = (void *)(*a1)[4];
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a1;
  if (a2)
  {
    outlined init with copy of AccessibilityCustomAttributes.Value?((*a1)[4], (uint64_t)v3);
    swift_bridgeObjectRetain();
    AccessibilityCustomAttributes.subscript.setter((uint64_t)v3, v6, v5);
    _sypSgWOhTm_0((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
  }
  else
  {
    swift_bridgeObjectRetain();
    AccessibilityCustomAttributes.subscript.setter((uint64_t)v4, v6, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityCustomAttributes.CodingKeys()
{
  return 0x7475626972747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityCustomAttributes.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityCustomAttributes.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityCustomAttributes.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityCustomAttributes.startIndex.getter()
{
  return specialized Dictionary.startIndex.getter(*v0);
}

uint64_t AccessibilityCustomAttributes.endIndex.getter()
{
  return 1 << *(unsigned char *)(*(void *)v0 + 32);
}

uint64_t AccessibilityCustomAttributes.subscript.getter(uint64_t a1, uint64_t a2, int a3, char a4)
{
  return specialized Dictionary.subscript.getter(a1, a2, a3, a4 & 1, *v4);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5)
{
  if (a4) {
    goto LABEL_10;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
  }
  else if ((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2))
  {
    if (*(_DWORD *)(a5 + 36) == a3)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)(a5 + 56);
      uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
      uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
      outlined init with copy of AccessibilityCustomAttributes.Value(v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v6, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain();
      return v8;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AccessibilityCustomAttributes.index(after:)(uint64_t a1, int a2, char a3)
{
  return specialized _NativeDictionary.index(after:)(a1, a2, a3 & 1, *v3);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance AccessibilityCustomAttributes(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36);
  *(void *)a1 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
}

void (*protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes(void *a1, uint64_t a2))(uint64_t *a1)
{
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  uint64_t v6 = v5 - 8;
  size_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v8 = malloc(v7);
  *a1 = v8;
  uint64_t v9 = malloc(v7);
  a1[1] = v9;
  uint64_t v10 = *v2;
  uint64_t v11 = (uint64_t)v9 + *(int *)(v6 + 56);
  uint64_t v12 = specialized Dictionary.subscript.getter(v11, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), v10);
  *uint64_t v9 = v12;
  v9[1] = v13;
  *uint64_t v8 = v12;
  v8[1] = v13;
  outlined init with copy of AccessibilityCustomAttributes.Value(v11, (uint64_t)v8 + *(int *)(v6 + 56), (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  swift_bridgeObjectRetain();
  return protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes;
}

void protocol witness for Collection.subscript.read in conformance AccessibilityCustomAttributes(uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v1 = (void *)a1[1];
  outlined destroy of AccessibilityCustomAttributes.Value(*a1, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
  outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v1, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
  free(v1);

  free(v2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AccessibilityCustomAttributes@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = a1[1];
  long long v4 = *a1;
  v5[0] = v2;
  *(_OWORD *)((char *)v5 + 9) = *(long long *)((char *)a1 + 25);
  return specialized Collection<>.subscript.getter(&v4, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = specialized Dictionary.startIndex.getter(v3);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5 & 1;
  uint64_t v6 = *(unsigned int *)(v3 + 36);
  *(void *)(a1 + 32) = 1 << *(unsigned char *)(v3 + 32);
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AccessibilityCustomAttributes()
{
  uint64_t v1 = *v0;
  uint64_t result = specialized Dictionary.startIndex.getter(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3) {
      return result == 1 << *(unsigned char *)(v1 + 32);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AccessibilityCustomAttributes(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16));
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v6;
  *(unsigned char *)(a4 + 16) = v7;
  return result;
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance AccessibilityCustomAttributes(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AccessibilityCustomAttributes(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v2 != *(void *)(a2 + 32)) {
    goto LABEL_11;
  }
  if (*(void *)result >= *(void *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  int v2;

  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != v2) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(result + 8) != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a2 + 40) | *(unsigned char *)(result + 40)))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != *(void *)(result + 32)) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized _NativeDictionary.index(after:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AccessibilityCustomAttributes(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = specialized _NativeDictionary.index(after:)(*(void *)a1, v4, v5, *v1);
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v3, v4, v5);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AccessibilityCustomAttributes@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AccessibilityCustomAttributes()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized Dictionary.startIndex.getter(*v0);
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  unint64_t v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(unsigned char *)(v1 + 32), *(_DWORD *)(v1 + 36), 0);
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v2, v4, v6);
  return v7;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance AccessibilityCustomAttributes()
{
  size_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AccessibilityCustomAttributes.debugDescription.getter()
{
  uint64_t v33 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v33);
  uint64_t v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned int v32 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  char v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v32 - v11);
  uint64_t v13 = *v0;
  uint64_t v39 = 60;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v14 = specialized Dictionary.startIndex.getter(v13);
  uint64_t v16 = v15;
  char v18 = v17;
  char v38 = v17 & 1;
  uint64_t result = swift_bridgeObjectRetain();
  if (v18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    char v30 = v38;
    swift_bridgeObjectRelease();
    outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v14, v16, v30);
    v31._countAndFlagsBits = 62;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    return v39;
  }
  else
  {
    unsigned int v36 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v34 = v13 + 64;
    int v35 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48);
    while (1)
    {
      int v20 = *(_DWORD *)(v13 + 36);
      if (v20 != v16) {
        break;
      }
      uint64_t v21 = 1;
      if (v14 != 1 << *(unsigned char *)(v13 + 32))
      {
        Class v22 = v32;
        uint64_t v23 = (uint64_t)v32 + *(int *)(v4 + 48);
        uint64_t v24 = specialized Dictionary.subscript.getter(v23, v14, v16, 0, v13);
        *Class v22 = v24;
        v22[1] = v25;
        *char v9 = v24;
        v9[1] = v25;
        outlined init with copy of AccessibilityCustomAttributes.Value(v23, (uint64_t)v9 + *(int *)(v4 + 48), (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
        swift_bridgeObjectRetain();
        uint64_t result = outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
        if (v14 < 0 || v14 >= -(-1 << *(unsigned char *)(v13 + 32))) {
          goto LABEL_15;
        }
        if (((*(void *)(v34 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          goto LABEL_16;
        }
        if (*(_DWORD *)(v13 + 36) != v20) {
          goto LABEL_17;
        }
        swift_bridgeObjectRetain();
        uint64_t v14 = _HashTable.occupiedBucket(after:)();
        uint64_t v16 = *(unsigned int *)(v13 + 36);
        swift_bridgeObjectRelease();
        uint64_t v21 = 0;
        char v38 = 0;
      }
      (*v36)(v9, v21, 1, v4);
      _sypSgWObTm_0((uint64_t)v9, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value?);
      if ((*v35)(v12, 1, v4) == 1) {
        goto LABEL_13;
      }
      uint64_t v27 = *v12;
      uint64_t v26 = (void *)v12[1];
      outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v12 + *(int *)(v4 + 48), (uint64_t)v2);
      v37._countAndFlagsBits = 0;
      v37._object = (void *)0xE000000000000000;
      v28._countAndFlagsBits = v27;
      v28._object = v26;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._countAndFlagsBits = 8250;
      v29._object = (void *)0xE200000000000000;
      String.append(_:)(v29);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      if (v38) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

unint64_t AccessibilityCustomAttributes.Value.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x676E69727473;
  switch(a1)
  {
    case 1:
      unint64_t result = 1635017060;
      break;
    case 2:
      unint64_t result = 0x7265626D754E736ELL;
      break;
    case 3:
      unint64_t result = 0x65756C6156736ELL;
      break;
    case 4:
      unint64_t result = 1702125924;
      break;
    case 5:
      unint64_t result = 7107189;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t AccessibilityCustomAttributes.Value.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x676E69727473;
  switch(a1)
  {
    case 1:
      unint64_t result = 1635017060;
      break;
    case 2:
      unint64_t result = 0x7265626D754E736ELL;
      break;
    case 3:
      unint64_t result = 0x65756C6156736ELL;
      break;
    case 4:
      unint64_t result = 1702125924;
      break;
    case 5:
      unint64_t result = 7107189;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AccessibilityCustomAttributes.Value.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  return AccessibilityCustomAttributes.Value.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityCustomAttributes.Value.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityCustomAttributes.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityCustomAttributes.Value.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::String v37 = &v28[-v5];
  uint64_t v36 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  int v35 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], v3);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v39 = &v28[-v8];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  MEMORY[0x270FA5388](v9);
  Swift::String v31 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys, (uint64_t)&unk_26FA712C8, MEMORY[0x263F8E040]);
  uint64_t v13 = v12;
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v28[-v14];
  uint64_t v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v16);
  char v18 = (uint64_t *)&v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  uint64_t v19 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    uint64_t v20 = (uint64_t)a1;
  }
  else
  {
    Swift::String v29 = v18;
    uint64_t v30 = v16;
    int v41 = a1;
    LOBYTE(v42) = 0;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = v22;
    (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v15, v13);
    uint64_t v24 = (uint64_t)v29;
    *Swift::String v29 = v21;
    *(void *)(v24 + 8) = v23;
    uint64_t v25 = (uint64_t)v41;
    uint64_t v26 = v38;
    swift_storeEnumTagMultiPayload();
    outlined init with take of AccessibilityCustomAttributes.Value(v24, v26);
    uint64_t v20 = v25;
  }
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

void AccessibilityCustomAttributes.Value.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  MEMORY[0x270FA5388](v4);
  double v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys, (uint64_t)&unk_26FA712C8, MEMORY[0x263F8E0C0]);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  uint64_t v56 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v48 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys();
  uint64_t v54 = v15;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of AccessibilityCustomAttributes.Value(v2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *(void *)v11;
      unint64_t v18 = *((void *)v11 + 1);
      uint64_t v57 = v19;
      unint64_t v58 = v18;
      char v59 = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      uint64_t v21 = v54;
      uint64_t v20 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v20);
      outlined consume of Data._Representation(v19, v18);
      return;
    case 2u:
      uint64_t v22 = *(void **)v11;
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
      id v24 = v22;
      uint64_t v25 = (void *)MEMORY[0x24C522820](0x7265626D754E736ELL, 0xE800000000000000);
      objc_msgSend(v23, sel_encodeObject_forKey_, v24, v25);

      id v26 = objc_msgSend(v23, sel_encodedData);
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      uint64_t v57 = v27;
      unint64_t v58 = v29;
      char v30 = 2;
      goto LABEL_10;
    case 3u:
      Swift::String v31 = *(void **)v11;
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
      id v24 = v31;
      uint64_t v32 = (void *)MEMORY[0x24C522820](0x65756C6156736ELL, 0xE700000000000000);
      objc_msgSend(v23, sel_encodeObject_forKey_, v24, v32);

      id v33 = objc_msgSend(v23, sel_encodedData);
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v34;

      uint64_t v57 = v27;
      unint64_t v58 = v29;
      char v30 = 3;
      goto LABEL_10;
    case 4u:
      uint64_t v36 = v49;
      uint64_t v35 = v50;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v8, v11, v50);
      LOBYTE(v57) = 4;
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      uint64_t v38 = v54;
      uint64_t v37 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v35);
      goto LABEL_8;
    case 5u:
      uint64_t v40 = v51;
      uint64_t v39 = v52;
      uint64_t v41 = v53;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v11, v53);
      LOBYTE(v57) = 5;
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v38 = v54;
      uint64_t v37 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
LABEL_8:
      (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v37);
      break;
    case 6u:
      uint64_t v42 = *(void **)v11;
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08910]), sel_initRequiringSecureCoding_, 1);
      id v24 = v42;
      uint64_t v43 = (void *)MEMORY[0x24C522820](0xD000000000000010, 0x800000024621A050);
      objc_msgSend(v23, sel_encodeObject_forKey_, v24, v43);

      id v44 = objc_msgSend(v23, sel_encodedData);
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v45;

      uint64_t v57 = v27;
      unint64_t v58 = v29;
      char v30 = 6;
LABEL_10:
      char v59 = v30;
      lazy protocol witness table accessor for type Data and conformance Data();
      uint64_t v47 = v54;
      uint64_t v46 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v47, v46);

      outlined consume of Data._Representation(v27, v29);
      break;
    case 7u:
      (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);

      break;
    default:
      LOBYTE(v57) = 0;
      uint64_t v17 = v54;
      uint64_t v16 = v55;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v16);
      swift_bridgeObjectRelease();
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityCustomAttributes.Value@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityCustomAttributes.Value.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AccessibilityCustomAttributes.Value(void *a1)
{
}

uint64_t AccessibilityCustomAttributes.encode(to:)(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityCustomAttributes.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys, (uint64_t)&unk_26FA71170, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  void v10[3] = v8;
  type metadata accessor for [String : AccessibilityCustomAttributes.Value](0, &lazy cache variable for type metadata for [String : AccessibilityCustomAttributes.Value], MEMORY[0x263F8D060]);
  lazy protocol witness table accessor for type [String : AccessibilityCustomAttributes.Value] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AccessibilityCustomAttributes.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = a2;
  type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityCustomAttributes.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys, (uint64_t)&unk_26FA71170, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - v6;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v12;
    uint64_t v8 = v13;
    type metadata accessor for [String : AccessibilityCustomAttributes.Value](0, &lazy cache variable for type metadata for [String : AccessibilityCustomAttributes.Value], MEMORY[0x263F8D060]);
    lazy protocol witness table accessor for type [String : AccessibilityCustomAttributes.Value] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v5);
    uint64_t v11 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v8 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityCustomAttributes@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return AccessibilityCustomAttributes.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityCustomAttributes(void *a1)
{
  return AccessibilityCustomAttributes.encode(to:)(a1);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of NamedImage.Cache.WeakCatalog(*(void *)(v11 + 56) + 8 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v12;
    }
    swift_release();
    _sypSgWObTm_0(*(void *)(v11 + 56) + 8 * v6, a2, (uint64_t)&lazy cache variable for type metadata for WeakBox<AnyLocationBase>, (uint64_t)type metadata accessor for AnyLocationBase, (uint64_t)type metadata accessor for WeakBox, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value?);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  outlined destroy of AnyHashable(*(void *)(v7 + 48) + 40 * v4);
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for AccessibilityCustomAttributes.Value();
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of AccessibilityCustomAttributes.Value(v12 + *(void *)(v20 + 72) * v8, a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for AccessibilityCustomAttributes.Value();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v5 = v4;
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3 & 1);
  if (v8)
  {
    unint64_t v9 = v7;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v22 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v22;
    }
    uint64_t v12 = *(void *)(v11 + 56) + 120 * v9;
    uint64_t v13 = *(void *)(v12 + 16);
    __int16 v14 = *(_WORD *)(v12 + 56);
    __int16 v15 = *(_WORD *)(v12 + 96);
    int v16 = *(_DWORD *)(v12 + 100);
    char v17 = *(unsigned char *)(v12 + 104);
    char v18 = *(unsigned char *)(v12 + 105);
    uint64_t v19 = *(void *)(v12 + 112);
    *(_OWORD *)a4 = *(_OWORD *)v12;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v12 + 24);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v12 + 40);
    *(_WORD *)(a4 + 56) = v14;
    long long v20 = *(_OWORD *)(v12 + 80);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(a4 + 80) = v20;
    *(_WORD *)(a4 + 96) = v15;
    *(_DWORD *)(a4 + 100) = v16;
    *(unsigned char *)(a4 + 104) = v17;
    *(unsigned char *)(a4 + 105) = v18;
    *(void *)(a4 + 112) = v19;
    specialized _NativeDictionary._delete(at:)(v9, v11);
    uint64_t *v5 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a4 + 112) = 0;
    double result = 0.0;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(Swift::UInt a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result)
{
  uint64_t v1 = result[3];
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8E0F8]);
      uint64_t v2 = (void *)swift_allocObject();
      size_t v3 = _swift_stdlib_malloc_size(v2);
      v2[2] = v1;
      v2[3] = 2 * v3 - 64;
      uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v5, (uint64_t)(v2 + 4), v1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v4 == v1) {
        return v2;
      }
      __break(1u);
    }
    return (void *)MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  unsigned char v7[72];
  _OWORD v8[5];

  uint64_t v1 = result[1];
  uint64_t v2 = v1 - *result;
  if (v1 < *result)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFSUB__(v1, *result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  size_t v3 = (uint64_t)result;
  if (v2 <= 0)
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, (uint64_t)&type metadata for Subview, MEMORY[0x263F8E0F8]);
    uint64_t v4 = swift_allocObject();
    unint64_t v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 96);
  }
  outlined init with copy of SubviewsCollectionSlice(v3, (uint64_t)v7);
  unint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(v8, (_OWORD *)(v4 + 32), v2);
  double result = (void *)outlined destroy of IndexingIterator<_VariadicView_Children>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollectionSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice, (uint64_t)&type metadata for SubviewsCollectionSlice);
  if (v6 == v2) {
    return (void *)v4;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.FlatPath.Element>, (uint64_t)&type metadata for Text.Effect.FlatPath.Element, MEMORY[0x263F8E0F8]);
  uint64_t v5 = swift_allocObject();
  size_t v6 = _swift_stdlib_malloc_size((const void *)v5);
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = 2 * v6 - 64;
  uint64_t v7 = specialized Sequence._copyContents(initializing:)(v9, (unsigned char *)(v5 + 32), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v7 != (void *)v2)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v5;
}

{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t result;
  void *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  uint64_t v5 = v4();
  double result = v4();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    double result = v4();
    if ((v5 & 0x8000000000000000) == 0 && result >= v5)
    {
      if (v5)
      {
        _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8E0F8]);
        uint64_t v7 = (void *)swift_allocObject();
        uint64_t v8 = _swift_stdlib_malloc_size(v7);
        unint64_t v9 = v8 - 32;
        if (v8 < 32) {
          unint64_t v9 = v8 - 17;
        }
        uint64_t v7[2] = v5;
        v7[3] = 2 * (v9 >> 4);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, v7 + 4, v5, a1, a2);
        swift_bridgeObjectRelease();
        swift_release();
        if (v10 == v5) {
          return (uint64_t)v7;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Markers.Marker>, (uint64_t)&type metadata for Text.Effect.Markers.Marker, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E0F8]);
  size_t v3 = (void *)swift_allocObject();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1);
  outlined retain of Text.Effect.RenderSegmentation.StaticLines(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.MarkerLayoutInfo.Element>, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo.Element, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeSequence.Entry>, (uint64_t)&type metadata for Text.Effect.KeyframeSequence.Entry, MEMORY[0x263F8E0F8]);
  size_t v3 = (void *)swift_allocObject();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>, (uint64_t)&type metadata for Text.Effect.Chunk, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment.Element, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copyContents(initializing:));
}

{
  uint64_t v1;
  void *v2;
  size_t v3;
  uint64_t v4;
  void v6[4];

  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Line>, (uint64_t)&type metadata for Text.Layout.Line, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 48);
  uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  uint64_t v1;
  void *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Segment>, (uint64_t)&type metadata for Text.Layout.Decorations.Segment, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 56);
  uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  uint64_t v1;
  void *v2;
  size_t v3;
  uint64_t v4;
  unsigned char v6[8];

  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutProxy>, (uint64_t)&type metadata for LayoutProxy, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 12);
  uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (unint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  unint64_t v1;
  void *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionConfiguration>, (uint64_t)&type metadata for SectionConfiguration, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 136);
  uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  uint64_t v1;
  void *v2;
  int64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(*(void *)a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferenceKey.Type>, (uint64_t (*)(uint64_t))type metadata accessor for PreferenceKey.Type, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  uint64_t v4 = v3 - 32;
  if (v3 < 32) {
    uint64_t v4 = v3 - 17;
  }
  v2[2] = v1;
  v2[3] = 2 * (v4 >> 4);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  unint64_t v1;
  void *v2;
  size_t v3;
  unint64_t v4;
  unsigned char v6[8];

  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutSubview>, (uint64_t)&type metadata for LayoutSubview, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 20);
  uint64_t v4 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v6, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Spacing.Key>, (uint64_t)&type metadata for Spacing.Key, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x263F8D538], MEMORY[0x263F8E0F8]);
  size_t v3 = (void *)swift_allocObject();
  uint64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  size_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<EventID>.Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.DisplayInfo>, (uint64_t)&type metadata for Text.Effect.DisplayInfo, MEMORY[0x263F8E0F8]);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 + 95;
  }
  _OWORD v5[2] = v2;
  void v5[3] = 2 * (v7 >> 7);
  uint64_t v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v10, (uint64_t)(v5 + 4), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v8 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.StopMarkerCollector.Segment.Element>, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment.Element, MEMORY[0x263F8E0F8]);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * (v5 >> 4);
  int64_t v6 = specialized Sequence._copyContents(initializing:)(&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  void *v15;
  uint64_t result;
  long long v17;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = v2 - v1;
  if (v2 < v1)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__(v2, v1)) {
    goto LABEL_21;
  }
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  if (v3 > 0)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, MEMORY[0x263F8E0F8]);
    uint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    _OWORD v5[2] = v3;
    void v5[3] = 2 * ((uint64_t)(v6 - 32) / 48);
    uint64_t v7 = *(void *)(a1 + 16);
    swift_retain();
    if (v7 != *(void *)(a1 + 24))
    {
      uint64_t v8 = ~v1 + v2;
      unint64_t v9 = 4;
      while (1)
      {
        uint64_t v11 = *(void **)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        char v17 = *(_OWORD *)(a1 + 56);
        uint64_t v12 = *(_DWORD *)(a1 + 72);
        if (*(unsigned char *)(a1 + 48))
        {
          outlined copy of Text.Layout.Line.Line(v11, v10, 1);
          uint64_t v13 = (id)_NSTextLineFragmentGetCTLine(v11);
          if (!v13) {
            goto LABEL_22;
          }
          __int16 v14 = v13;
          outlined consume of Text.Layout.Line.Line(v11, v10, 1);
          uint64_t v10 = 0;
          uint64_t v11 = v14;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v11, v10, 0);
          outlined copy of Text.Layout.Line.Line(v11, v10, 0);

          swift_release();
        }
        if (v7 < *(void *)(a1 + 16) || v7 >= *(void *)(a1 + 24)) {
          break;
        }
        __int16 v15 = &v5[v9];
        *__int16 v15 = v11;
        v15[1] = v7;
        *((_OWORD *)v15 + 1) = v17;
        *((_DWORD *)v15 + 8) = v12;
        v15[5] = v10;
        if (!v8) {
          goto LABEL_16;
        }
        ++v7;
        --v8;
        v9 += 6;
        if (v7 == *(void *)(a1 + 24)) {
          goto LABEL_15;
        }
      }
      __break(1u);
      goto LABEL_20;
    }
LABEL_15:
    swift_release();
    __break(1u);
LABEL_16:
    swift_release();
    return (uint64_t)v5;
  }
LABEL_23:
  double result = swift_retain();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  uint64_t v2 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v2 - 8);
  int64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = specialized Collection.count.getter();
  if (!v8) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v9 = v8;
  if (v8 <= 0)
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.BaseFragment>, (uint64_t)&type metadata for Text.Effect.BaseFragment, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v9;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  outlined init with copy of AccessibilityCustomAttributes.Value(a1, (uint64_t)v4, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v10 + 4), v9);
  double result = outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned char v7[40];

  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Decorations.Fragment>, (uint64_t)&type metadata for Text.Layout.Decorations.Fragment, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = _swift_stdlib_malloc_size((const void *)v2);
  int64_t v4 = v3 - 32;
  if (v3 < 32) {
    int64_t v4 = v3 - 1;
  }
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (v4 >> 5);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (_OWORD *)(v2 + 32), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v2;
}

{
  int v1;
  void *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned char v6[24];

  uint64_t v1 = *(_DWORD *)(a1 + 12);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_UnsafeHeterogeneousBuffer_Element>, (uint64_t)&type metadata for _UnsafeHeterogeneousBuffer_Element, MEMORY[0x263F8E0F8]);
    uint64_t v2 = (void *)swift_allocObject();
    uint64_t v3 = _swift_stdlib_malloc_size(v2);
    int64_t v4 = v3 - 32;
    if (v3 < 32) {
      int64_t v4 = v3 - 25;
    }
    v2[2] = v1;
    v2[3] = 2 * (v4 >> 3);
  }
  double result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v6, (uint64_t)(v2 + 4), v1);
  if (result == v1) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t result;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  uint64_t v2 = v1();
  double result = v1();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    double result = v1();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8E0F8]);
        int64_t v4 = (void *)swift_allocObject();
        uint64_t v5 = _swift_stdlib_malloc_size(v4);
        int64_t v6 = v5 - 32;
        if (v5 < 32) {
          int64_t v6 = v5 - 17;
        }
        void v4[2] = v2;
        v4[3] = 2 * (v6 >> 4);
        swift_retain();
        uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v4 + 4, v2);
        swift_release();
        if (v7 == v2) {
          return (uint64_t)v4;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned char v7[8];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8E0F8]);
    uint64_t v2 = (void *)swift_allocObject();
    uint64_t v3 = _swift_stdlib_malloc_size(v2);
    int64_t v4 = v3 - 32;
    if (v3 < 32) {
      int64_t v4 = v3 - 17;
    }
    v2[2] = v1;
    v2[3] = 2 * (v4 >> 4);
  }
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v7, (uint64_t)(v2 + 4), v1);
  swift_bridgeObjectRetain();
  double result = swift_bridgeObjectRelease();
  if (v5 == v1) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.RenderSegmentation.Segment>, type metadata accessor for Text.Effect.RenderSegmentation.Segment, MEMORY[0x263F8E0F8]);
  uint64_t v3 = *(void *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
  uint64_t v3 = *(void *)(type metadata accessor for Date.ComponentsFormatStyle.Field() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      outlined consume of Set<EventID>.Iterator._Variant();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  BOOL v3 = __OFADD__(result, v2);
  uint64_t v4 = result + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  uint64_t v6 = v4 - result;
  if (v4 < result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v4, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v6) {
    return MEMORY[0x263F8EE78];
  }
  if (v6 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.Cluster>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Cluster, MEMORY[0x263F8E0F8]);
    uint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    void v8[2] = v6;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 56);
  }
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v11, (uint64_t)(v8 + 4), v6, v5, a2);
  swift_bridgeObjectRetain();
  size_t result = swift_bridgeObjectRelease();
  if (v10 == (void *)v6) {
    return (uint64_t)v8;
  }
LABEL_14:
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, a2, a3, MEMORY[0x263F8E0F8]);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 1;
  }
  uint64_t v7[2] = v4;
  v7[3] = 2 * (v9 >> 5);
  uint64_t v10 = a4(&v12, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

{
  uint64_t v4;
  void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, a2, a3, MEMORY[0x263F8E0F8]);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v7[2] = v4;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 96);
  uint64_t v9 = a4(&v11, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v9 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

{
  uint64_t v4;
  void *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, a2, a3, MEMORY[0x263F8E0F8]);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 17;
  }
  uint64_t v7[2] = v4;
  v7[3] = 2 * (v9 >> 4);
  uint64_t v10 = a4(&v12, v7 + 4, v4, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<EventID>.Iterator._Variant();
  if (v10 != v4)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *a1, char a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.KeyframeLayout.Fragment>, (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, MEMORY[0x263F8E0F8]);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  _OWORD v5[2] = v2;
  void v5[3] = 2 * (v7 >> 3);
  uint64_t v8 = specialized Sequence._copyContents(initializing:)((uint64_t)v10, v5 + 4, v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v8 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v5;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8E0F8]);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 + 31;
  }
  uint64_t v7[2] = v3;
  v7[3] = 2 * (v9 >> 6);
  uint64_t v10 = specialized Sequence._copyContents(initializing:)(&v12, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 != (void *)v3)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v7;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v2, v1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = (void **)result;
  if (v3 <= 0)
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8E0F8]);
    uint64_t v5 = (void *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 + 31;
    }
    _OWORD v5[2] = v3;
    void v5[3] = 2 * (v7 >> 6);
  }
  int64_t v8 = *v4;
  swift_retain();
  id v9 = v8;
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v11, (uint64_t)(v5 + 4), v2 - v1);

  size_t result = swift_release();
  if (v10 == v3) {
    return (uint64_t)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void v11[6];

  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = (v2 >> 1) - v1;
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = *(unsigned __int8 *)(result + 32);
  uint64_t v5 = __OFADD__(v4, v3);
  int64_t v6 = v4 + v3;
  if (v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v6 - v4;
  if (v6 < v4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 == v4) {
    return MEMORY[0x263F8EE78];
  }
  if (v7 <= 0)
  {
    int64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ShapeStyle_Pack.Style>, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, MEMORY[0x263F8E0F8]);
    int64_t v8 = (void *)swift_allocObject();
    id v9 = _swift_stdlib_malloc_size(v8);
    void v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 112);
  }
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v11, (uint64_t)(v8 + 4), v7);
  swift_unknownObjectRetain();
  size_t result = swift_unknownObjectRelease();
  if (v10 == v7) {
    return (uint64_t)v8;
  }
LABEL_14:
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  if (v3 == 1)
  {
    uint64_t v5 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
    if (v5)
    {
      int64_t v6 = v5;
      CFArrayRef RunCount = _CTLineGetRunCount(v5);
    }
    else
    {
      CFArrayRef RunCount = 0;
    }
    int64_t v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8) {
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v4, v2, 0);
    swift_release();
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    int64_t v8 = (const __CTLine *)v1;
  }
  CFArrayRef v9 = _CTLineGetRunCount(v8);

  if (((unint64_t)v9 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
    return;
  }
  if (!v3)
  {
    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    uint64_t v11 = (const __CTLine *)v1;
LABEL_12:
    CFArrayRef v12 = _CTLineGetRunCount(v11);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v10 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
  if (v10)
  {
    uint64_t v11 = v10;
    goto LABEL_12;
  }
  CFArrayRef v12 = 0;
  if (((unint64_t)RunCount & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  if ((uint64_t)v12 < (uint64_t)RunCount) {
    goto LABEL_20;
  }
  if (RunCount)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, MEMORY[0x263F8E0F8]);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v13[2] = RunCount;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
    outlined copy of Text.Layout.Line.Line(v1, v2, v3);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v17, (uint64_t)(v13 + 4), RunCount);
    CFArrayRef v16 = v15;
    outlined consume of Text.Layout.Line.Line(v17[0], (uint64_t)v17[1], v18);
    if (v16 != RunCount) {
      __break(1u);
    }
  }
}

{
  const __CTLine *v1;
  CFIndex v2;
  void *v3;
  CFIndex GlyphCount;
  void *v5;
  CFIndex v6;
  void *v7;
  CFIndex v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  const __CTLine *v12;
  uint64_t v13;
  uint64_t v14;
  id v15[5];

  uint64_t v1 = *(const __CTLine **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)a1, v2);
  GlyphCount = CTRunGetGlyphCount((CTRunRef)v3);

  uint64_t v5 = (id)_CTLineGetRunAtIndex(v1, v2);
  int64_t v6 = CTRunGetGlyphCount((CTRunRef)v5);

  if (v6 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v7 = (id)_CTLineGetRunAtIndex(v1, v2);
  int64_t v8 = CTRunGetGlyphCount((CTRunRef)v7);

  if (GlyphCount < 0 || v8 < GlyphCount) {
    goto LABEL_11;
  }
  if (GlyphCount)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.RunSlice>, (uint64_t)&type metadata for Text.Layout.RunSlice, MEMORY[0x263F8E0F8]);
    CFArrayRef v9 = (void *)swift_allocObject();
    uint64_t v10 = _swift_stdlib_malloc_size(v9);
    uint64_t v11 = v10 - 32;
    if (v10 < 32) {
      uint64_t v11 = v10 + 31;
    }
    void v9[2] = GlyphCount;
    void v9[3] = 2 * (v11 >> 6);
    swift_retain();
    CFArrayRef v12 = v1;
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v15, (uint64_t)(v9 + 4), GlyphCount);
    size_t v14 = v13;

    swift_release();
    if (v14 != GlyphCount) {
      __break(1u);
    }
  }
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = specialized Dictionary.startIndex.getter(*a1);
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  int64_t v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(unsigned char *)(v1 + 32), *(_DWORD *)(v1 + 36), 0);
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v2, v4, v6);
  if (!v7) {
    return MEMORY[0x263F8EE78];
  }
  if (v7 <= 0)
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
LABEL_11:
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    uint64_t v15 = (uint64_t)v11
        + ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80));
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v20, v15, v7);
    uint64_t v17 = v20[1];
    uint64_t v18 = v20[2];
    char v19 = v21;
    swift_bridgeObjectRelease();
    size_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v17, v18, v19);
    if (v16 == v7) {
      return (size_t)v11;
    }
    __break(1u);
    goto LABEL_14;
  }
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AccessibilityCustomAttributes.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), MEMORY[0x263F8E0F8]);
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v11 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (result - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_15;
    }
    void v11[2] = v7;
    void v11[3] = 2 * ((uint64_t)(result - v10) / v9);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unsigned char *specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0 = specialized Collection.distance(from:to:)(0, 0xBu);
  if (!v0) {
    return (unsigned char *)MEMORY[0x263F8EE78];
  }
  uint64_t v1 = v0;
  if (v0 <= 0)
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DynamicTypeSize>, (uint64_t)&type metadata for DynamicTypeSize, MEMORY[0x263F8E0F8]);
    uint64_t v2 = swift_allocObject();
    size_t v3 = _swift_stdlib_malloc_size((const void *)v2);
    *(void *)(v2 + 16) = v1;
    *(void *)(v2 + 24) = 2 * v3 - 64;
  }
  size_t result = specialized Sequence._copySequenceContents(initializing:)(&v5, (unsigned char *)(v2 + 32), v1);
  if (result == (unsigned char *)v1) {
    return (unsigned char *)v2;
  }
  __break(1u);
  return result;
}

_OWORD *specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1 + 160);
  swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)(v1 + 160) + 16);
  if (!v3) {
    return (_OWORD *)MEMORY[0x263F8EE78];
  }
  _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LayoutGestureChildProxy.Child>, (uint64_t)&type metadata for LayoutGestureChildProxy.Child, MEMORY[0x263F8E0F8]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t result = (_OWORD *)_swift_stdlib_malloc_size(v4);
  void v4[2] = v3;
  v4[3] = 2 * ((uint64_t)(result - 2) / 208);
  uint64_t v6 = *v2;
  unint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    outlined retain of LayoutGestureBox.Child((uint64_t)result);
    return v4;
  }
  unint64_t v8 = 0;
  uint64_t v9 = v3 - 1;
  uint64_t v10 = 32;
  while (v8 < v7)
  {
    v20[0] = *(_OWORD *)(v6 + v10);
    long long v11 = *(_OWORD *)(v6 + v10 + 16);
    long long v12 = *(_OWORD *)(v6 + v10 + 32);
    long long v13 = *(_OWORD *)(v6 + v10 + 64);
    void v20[3] = *(_OWORD *)(v6 + v10 + 48);
    v20[4] = v13;
    v20[1] = v11;
    v20[2] = v12;
    long long v14 = *(_OWORD *)(v6 + v10 + 80);
    long long v15 = *(_OWORD *)(v6 + v10 + 96);
    long long v16 = *(_OWORD *)(v6 + v10 + 128);
    v20[7] = *(_OWORD *)(v6 + v10 + 112);
    v20[8] = v16;
    v20[5] = v14;
    v20[6] = v15;
    long long v17 = *(_OWORD *)(v6 + v10 + 144);
    long long v18 = *(_OWORD *)(v6 + v10 + 160);
    long long v19 = *(_OWORD *)(v6 + v10 + 176);
    *(_OWORD *)&v21[12] = *(_OWORD *)(v6 + v10 + 188);
    v20[10] = v18;
    *(_OWORD *)char v21 = v19;
    v20[9] = v17;
    memmove(&v4[(unint64_t)v10 / 8], (const void *)(v6 + v10), 0xCCuLL);
    size_t result = v20;
    if (v9 == v8) {
      goto LABEL_8;
    }
    size_t result = (_OWORD *)outlined retain of LayoutGestureBox.Child((uint64_t)v20);
    unint64_t v7 = *(void *)(v6 + 16);
    ++v8;
    v10 += 208;
    if (v8 == v7) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = ViewList.count.getter(v3, v4);
  static Update.end()();
  _MovableLockUnlock(v2);
  _MovableLockLock(v2);
  specialized static Update.begin()();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v2);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v2);
    specialized static Update.begin()();
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    uint64_t v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v2);
    if ((v5 & 0x8000000000000000) == 0 && v12 >= v5)
    {
      if (v5)
      {
        _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children.Element>, (uint64_t)&type metadata for _VariadicView_Children.Element, MEMORY[0x263F8E0F8]);
        uint64_t v13 = swift_allocObject();
        size_t v14 = _swift_stdlib_malloc_size((const void *)v13);
        *(void *)(v13 + 16) = v5;
        *(void *)(v13 + 24) = 2 * ((uint64_t)(v14 - 32) / 96);
        outlined init with copy of _VariadicView_Children((uint64_t)a1, (uint64_t)v16);
        uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(v17, (_OWORD *)(v13 + 32), v5);
        outlined destroy of IndexingIterator<_VariadicView_Children>((uint64_t)v17, &lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t)&type metadata for _VariadicView_Children);
        if (v15 == v5) {
          return v13;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unsigned char v16[56];
  _OWORD v17[4];

  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v2 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = ViewList.count.getter(v3, v4);
  static Update.end()();
  _MovableLockUnlock(v2);
  _MovableLockLock(v2);
  specialized static Update.begin()();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = ViewList.count.getter(v6, v7);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v2);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v2);
    specialized static Update.begin()();
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    uint64_t v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v2);
    if ((v5 & 0x8000000000000000) == 0 && v12 >= v5)
    {
      if (v5)
      {
        _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, (uint64_t)&type metadata for Subview, MEMORY[0x263F8E0F8]);
        uint64_t v13 = swift_allocObject();
        size_t v14 = _swift_stdlib_malloc_size((const void *)v13);
        *(void *)(v13 + 16) = v5;
        *(void *)(v13 + 24) = 2 * ((uint64_t)(v14 - 32) / 96);
        outlined init with copy of SubviewsCollection((uint64_t)a1, (uint64_t)v16);
        uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(v17, (_OWORD *)(v13 + 32), v5);
        outlined destroy of IndexingIterator<_VariadicView_Children>((uint64_t)v17, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection);
        if (v15 == v5) {
          return v13;
        }
        __break(1u);
      }
      return MEMORY[0x263F8EE78];
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t v3 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    uint64_t v5 = result;
    uint64_t v6 = (HIDWORD(a2) - 1) + 1;
    while (result)
    {
      if (!--v3)
      {
        _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewGraphFeatureBuffer.Element>, (uint64_t)&type metadata for ViewGraphFeatureBuffer.Element, MEMORY[0x263F8E0F8]);
        uint64_t v4 = (void *)swift_allocObject();
        int64_t v7 = _swift_stdlib_malloc_size(v4);
        uint64_t v8 = v7 - 32;
        if (v7 < 32) {
          uint64_t v8 = v7 - 25;
        }
        void v4[2] = v6;
        v4[3] = 2 * (v8 >> 3);
        uint64_t result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v4 + 4), v6, v5, a2);
        if (result != v6) {
          goto LABEL_12;
        }
        return (uint64_t)v4;
      }
    }
    goto LABEL_13;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 72);
    uint64_t v4 = SectionAccumulator.RowIDs.endIndex.getter();
    uint64_t v5 = *(void *)(v1 + 72);
  }
  else
  {
    uint64_t v4 = SectionAccumulator.RowIDs.endIndex.getter();
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  if (v3 < v5 || result < v3)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v2) {
    uint64_t v2 = *(void *)(v1 + 72);
  }
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  if (v4 < v2 || result < v4) {
    goto LABEL_23;
  }
  BOOL v8 = __OFSUB__(v4, v3);
  uint64_t v9 = v4 - v3;
  if (v8)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v9) {
    return MEMORY[0x263F8EE78];
  }
  if (v9 <= 0)
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, (uint64_t)&type metadata for _ViewList_ID.Canonical, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v9;
    void v10[3] = 2 * (v12 >> 4);
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v14, v10 + 4, v9);
  uint64_t result = swift_bridgeObjectRelease();
  if (v13 == v9) {
    return (uint64_t)v10;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t *result)
{
  uint64_t v1 = result[5];
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Data>, MEMORY[0x263F06F78], MEMORY[0x263F8E0F8]);
      uint64_t v2 = (uint64_t *)swift_allocObject();
      int64_t v3 = _swift_stdlib_malloc_size(v2);
      uint64_t v4 = v3 - 32;
      if (v3 < 32) {
        uint64_t v4 = v3 - 17;
      }
      v2[2] = v1;
      v2[3] = 2 * (v4 >> 4);
      swift_retain();
      uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(v6, v2 + 4, v1);
      swift_release();
      if (v5 == v1) {
        return v2;
      }
      __break(1u);
    }
    return (uint64_t *)MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSCalendarUnit>, (uint64_t (*)(uint64_t))type metadata accessor for NSCalendarUnit, MEMORY[0x263F8E0F8]);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      void v9[2] = v5;
      void v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v5) {
    return MEMORY[0x263F8EE78];
  }
  if (v5 <= 0)
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(type metadata accessor for UUID() - 8);
      uint64_t v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      long long v16 = *(void *)(v14 + 72);
      long long v17 = a2 + v16 * a3;
      long long v18 = v16 * v5;
      long long v19 = &v15[v18];
      long long v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F8E0F8]);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  int64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1) {
      goto LABEL_23;
    }
    void v11[2] = v5;
    void v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 4 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>, (uint64_t (*)(uint64_t))type metadata accessor for Attribute<ViewList>, MEMORY[0x263F8E0F8]);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 29;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      int64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
      int64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    MEMORY[0x24C523D30](v3 + 4, v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x263F8EE78];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8E0F8]);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      _OWORD v5[2] = v2;
      void v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = specialized Sequence._copySequenceContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x263F8EF38], MEMORY[0x263F8E0F8]);
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    uint64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(void *result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      int64_t v3 = result;
      _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8E0F8]);
      uint64_t v4 = (void *)swift_allocObject();
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = a2;
      v4[3] = 2 * (v6 >> 3);
      if (specialized Sequence._copySequenceContents(initializing:)(v7, v4 + 4, a2, v3, a2) == (void *)a2) {
        return v4;
      }
      __break(1u);
    }
    return (void *)MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityCustomAttributes.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v55 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v54 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void **)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void **)((char *)&v54 - v10);
  MEMORY[0x270FA5388](v12);
  uint64_t v61 = (uint64_t)&v54 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v60 = (uint64_t)&v54 - v15;
  MEMORY[0x270FA5388](v16);
  long long v18 = (void **)((char *)&v54 - v17);
  MEMORY[0x270FA5388](v19);
  char v21 = (void **)((char *)&v54 - v20);
  MEMORY[0x270FA5388](v22);
  id v24 = (uint64_t *)((char *)&v54 - v23);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (uint64_t *)((char *)&v54 - v26);
  type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value)();
  MEMORY[0x270FA5388](v28 - 8);
  char v30 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (uint64_t *)&v30[*(int *)(v31 + 56)];
  outlined init with copy of AccessibilityCustomAttributes.Value(v62, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  outlined init with copy of AccessibilityCustomAttributes.Value(v63, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v36 = *v24;
      unint64_t v35 = v24[1];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        outlined consume of Data._Representation(v36, v35);
        goto LABEL_23;
      }
      uint64_t v38 = *v32;
      unint64_t v37 = v32[1];
      LOBYTE(v39) = specialized static Data.== infix(_:_:)(v36, v35, v38, v37);
      outlined consume of Data._Representation(v38, v37);
      outlined consume of Data._Representation(v36, v35);
      uint64_t v40 = (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value;
      goto LABEL_24;
    case 2u:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v41 = *v21;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_18;
      }
      goto LABEL_7;
    case 3u:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v41 = *v18;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_18;
      }
      goto LABEL_7;
    case 4u:
      uint64_t v43 = v60;
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, v60, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v45 = v56;
        uint64_t v44 = v57;
        uint64_t v46 = v54;
        (*(void (**)(char *, uint64_t *, uint64_t))(v56 + 32))(v54, v32, v57);
        char v47 = static Date.== infix(_:_:)();
        goto LABEL_14;
      }
      uint64_t v50 = v56;
      uint64_t v49 = v57;
      goto LABEL_22;
    case 5u:
      uint64_t v43 = v61;
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, v61, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v45 = v58;
        uint64_t v44 = v59;
        uint64_t v46 = v55;
        (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 32))(v55, v32, v59);
        char v47 = MEMORY[0x24C520BC0](v43, v46);
LABEL_14:
        LOBYTE(v39) = v47;
        uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
        v48(v46, v44);
        v48((char *)v43, v44);
        uint64_t v40 = (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value;
        goto LABEL_24;
      }
      uint64_t v50 = v58;
      uint64_t v49 = v59;
LABEL_22:
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v43, v49);
      goto LABEL_23;
    case 6u:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v41 = *v11;
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_18;
      }
      goto LABEL_7;
    case 7u:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v41 = *v8;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
LABEL_7:
        uint64_t v42 = (void *)*v32;
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        LOBYTE(v39) = static NSObject.== infix(_:_:)();

        uint64_t v40 = (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value;
        goto LABEL_24;
      }
LABEL_18:

      goto LABEL_23;
    default:
      outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v30, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      uint64_t v34 = *v27;
      uint64_t v33 = v27[1];
      if (swift_getEnumCaseMultiPayload())
      {
        swift_bridgeObjectRelease();
LABEL_23:
        LOBYTE(v39) = 0;
        uint64_t v40 = (uint64_t (*)(void))type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value);
      }
      else
      {
        if (v34 == *v32 && v33 == v32[1])
        {
          swift_bridgeObjectRelease_n();
          LOBYTE(v39) = 1;
        }
        else
        {
          int v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v39 = v53 << 31 >> 31;
        }
        uint64_t v40 = (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value;
      }
LABEL_24:
      outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v30, v40);
      return v39 & 1;
  }
}

uint64_t specialized static AccessibilityCustomAttributes.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v47 - v6;
  uint64_t v55 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t v8 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v47 - v12;
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), v4);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (uint64_t *)((char *)&v47 - v18);
  uint64_t v20 = *a1;
  uint64_t v21 = *a2;
  if (*(void *)(*a1 + 16) != *(void *)(v21 + 16)) {
    return 0;
  }
  uint64_t v22 = *(void *)(v20 + 64);
  uint64_t v49 = v20 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  int64_t v50 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v51 = v20;
  int64_t v48 = v50 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v56 = 0;
  uint64_t v54 = v8;
  while (1)
  {
    if (v25)
    {
      unint64_t v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v28 = v27 | (v56 << 6);
      uint64_t v29 = v51;
LABEL_7:
      uint64_t v30 = *(void *)(v29 + 56);
      uint64_t v31 = (void *)(*(void *)(v29 + 48) + 16 * v28);
      uint64_t v32 = v31[1];
      *uint64_t v16 = *v31;
      v16[1] = v32;
      uint64_t v33 = v30 + *(void *)(v8 + 72) * v28;
      type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
      uint64_t v35 = v34;
      outlined init with copy of AccessibilityCustomAttributes.Value(v33, (uint64_t)v16 + *(int *)(v34 + 48), (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v16, 0, 1, v35);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    int64_t v36 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v36 < v50)
    {
      unint64_t v37 = *(void *)(v49 + 8 * v36);
      if (v37) {
        goto LABEL_11;
      }
      int64_t v38 = v56 + 2;
      ++v56;
      if (v36 + 1 < v50)
      {
        unint64_t v37 = *(void *)(v49 + 8 * v38);
        if (v37) {
          goto LABEL_15;
        }
        int64_t v56 = v36 + 1;
        if (v36 + 2 < v50)
        {
          unint64_t v37 = *(void *)(v49 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
LABEL_11:
            uint64_t v29 = v51;
LABEL_12:
            unint64_t v25 = (v37 - 1) & v37;
            unint64_t v28 = __clz(__rbit64(v37)) + (v36 << 6);
            int64_t v56 = v36;
            goto LABEL_7;
          }
          int64_t v38 = v36 + 3;
          int64_t v56 = v36 + 2;
          if (v36 + 3 < v50) {
            break;
          }
        }
      }
    }
LABEL_27:
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    uint64_t v35 = v39;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v16, 1, 1, v39);
    unint64_t v25 = 0;
LABEL_28:
    _sypSgWObTm_0((uint64_t)v16, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value?);
    type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v19, 1, v35) == 1)
    {
      swift_release();
      return 1;
    }
    uint64_t v40 = *v19;
    uint64_t v41 = v19[1];
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v19 + *(int *)(v35 + 48), (uint64_t)v13);
    if (*(void *)(v21 + 16))
    {
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      uint64_t v8 = v54;
      if (v43)
      {
        outlined init with copy of AccessibilityCustomAttributes.Value(*(void *)(v21 + 56) + *(void *)(v54 + 72) * v42, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
        uint64_t v44 = 0;
      }
      else
      {
        uint64_t v44 = 1;
      }
    }
    else
    {
      uint64_t v44 = 1;
      uint64_t v8 = v54;
    }
    uint64_t v45 = v55;
    (*v53)(v7, v44, 1, v55);
    swift_bridgeObjectRelease();
    if ((*v52)(v7, 1, v45) == 1)
    {
      outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_release();
      _sypSgWOhTm_0((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
      return 0;
    }
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v7, (uint64_t)v10);
    char v46 = specialized static AccessibilityCustomAttributes.Value.== infix(_:_:)((uint64_t)v13, (uint64_t)v10);
    outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    uint64_t result = outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    if ((v46 & 1) == 0)
    {
      swift_release();
      return 0;
    }
  }
  unint64_t v37 = *(void *)(v49 + 8 * v38);
  if (v37)
  {
LABEL_15:
    int64_t v36 = v38;
    goto LABEL_11;
  }
  uint64_t v29 = v51;
  while (1)
  {
    int64_t v36 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v36 >= v50)
    {
      int64_t v56 = v48;
      goto LABEL_27;
    }
    unint64_t v37 = *(void *)(v49 + 8 * v36);
    ++v38;
    if (v37) {
      goto LABEL_12;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t outlined assign with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.Value.CodingKeys and conformance AccessibilityCustomAttributes.Value.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)()
{
  if (!lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
  {
    type metadata accessor for @thick Any.Type();
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    }
  }
}

unint64_t type metadata accessor for @thick Any.Type()
{
  unint64_t result = lazy cache variable for type metadata for @thick Any.Type;
  if (!lazy cache variable for type metadata for @thick Any.Type)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @thick Any.Type);
  }
  return result;
}

unint64_t specialized AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AccessibilityCustomAttributes.Value.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes.CodingKeys and conformance AccessibilityCustomAttributes.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<AccessibilityCustomAttributes> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<AccessibilityCustomAttributes>, MEMORY[0x263F8D0E0]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes, (uint64_t)&type metadata for AccessibilityCustomAttributes, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<AccessibilityCustomAttributes> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<AccessibilityCustomAttributes>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AccessibilityCustomAttributes()
{
  return lazy protocol witness table accessor for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<AccessibilityCustomAttributes> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<AccessibilityCustomAttributes>, MEMORY[0x263F8DE58]);
}

uint64_t sub_245B22BD8()
{
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityCustomAttributes.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = *a2;
        unint64_t v8 = a2[1];
        outlined copy of Data._Representation(v9, v8);
        *a1 = v9;
        a1[1] = v8;
        break;
      case 2u:
      case 3u:
      case 6u:
      case 7u:
        uint64_t v12 = (void *)*a2;
        *a1 = *a2;
        id v13 = v12;
        break;
      case 4u:
        uint64_t v10 = type metadata accessor for Date();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        break;
      case 5u:
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *assignWithCopy for AccessibilityCustomAttributes.Value(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v5 = *a2;
        unint64_t v4 = a2[1];
        outlined copy of Data._Representation(v5, v4);
        *a1 = v5;
        a1[1] = v4;
        break;
      case 2u:
      case 3u:
      case 6u:
      case 7u:
        unint64_t v8 = (void *)*a2;
        *a1 = *a2;
        id v9 = v8;
        break;
      case 4u:
        uint64_t v6 = type metadata accessor for Date();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
      case 5u:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AccessibilityCustomAttributes.Value(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 4)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityCustomAttributes.Value(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 4)
    {
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AccessibilityCustomAttributes.Value()
{
  return swift_storeEnumTagMultiPayload();
}

unsigned char *storeEnumTagSinglePayload for AccessibilityCustomAttributes.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245B23380);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AccessibilityCustomAttributes.CodingKeys()
{
  return &unk_26FA71170;
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomAttributes.Value.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilityCustomAttributes.Value.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B23514);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityCustomAttributes.Value.CodingKeys()
{
  return &unk_26FA712C8;
}

uint64_t outlined retain of Text.Effect.RenderSegmentation.StaticLines(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for PreferenceKey.Type()
{
  unint64_t result = lazy cache variable for type metadata for PreferenceKey.Type;
  if (!lazy cache variable for type metadata for PreferenceKey.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for PreferenceKey);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PreferenceKey.Type);
  }
  return result;
}

uint64_t outlined init with copy of SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of IndexingIterator<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(0, a2, a3, a4, MEMORY[0x263F8DE58]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice);
  }
  return result;
}

uint64_t outlined init with copy of SubviewsCollection(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of LayoutGestureBox.Child(uint64_t a1)
{
  uint64_t v16 = *(void *)(a1 + 56);
  unint64_t v17 = *(void *)(a1 + 48);
  unint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 104);
  long long v11 = *(_OWORD *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 112);
  long long v9 = *(_OWORD *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 144);
  unint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 184);
  id v7 = *(id *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of LayoutGestureBox.Child.DebugData?(v17, v16, v15, v2, v3, v4, v14, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v5, v6);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of LayoutGestureBox.Child.DebugData?(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18)
{
  if (HIDWORD(a4)
    || result < 0xFFFFFFFF00000000
    || a3 & 0xFFFFFC00 | a2 & 0xF000000000000007
    || (a17 <= 3 ? (BOOL v19 = (a18 & 0xF000000000000007) == 0) : (BOOL v19 = 0), !v19))
  {
    return outlined copy of LayoutGestureBox.Child.DebugData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t outlined copy of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if ((a18 & 0x8000000000000000) == 0)
  {
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_retain();
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<AccessibilityCustomAttributes.Value.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value)()
{
  if (!lazy cache variable for type metadata for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value))
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityCustomAttributes.Value, AccessibilityCustomAttributes.Value));
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.BaseContent>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.BaseContent>)
  {
    type metadata accessor for Text.Effect.BaseContent(255);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.BaseContent>);
    }
  }
}

uint64_t AnimationListener.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnimationListener.init()()
{
  return v0;
}

uint64_t AnimationListener.deinit()
{
  return v0;
}

uint64_t AnimationListener.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Transaction.animationListener.getter(uint64_t a1)
{
  return Transaction.animationListener.getter(a1, specialized find<A>(_:key:));
}

uint64_t Transaction.addAnimationListener(allFinished:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  type metadata accessor for AllFinishedListener();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(unsigned char *)(v5 + 48) = 0;
  *(void *)(v5 + 16) = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_retain();
  Transaction.addAnimationListener(_:)(v5);
  swift_release();

  return swift_release();
}

{
  return Transaction.addAnimationListener(allFinished:)(a1, a2, (void (*)(uint64_t))Transaction.addAnimationListener(_:));
}

uint64_t Transaction.animationLogicalListener.getter(uint64_t a1)
{
  return Transaction.animationListener.getter(a1, specialized find<A>(_:key:));
}

uint64_t Transaction.animationListener.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_release();
  return v5;
}

uint64_t key path getter for Transaction.animationListener : Transaction@<X0>(uint64_t (*a1)(uint64_t)@<X3>, void *a2@<X8>)
{
  uint64_t v4 = swift_retain();
  uint64_t v5 = a1(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t key path setter for Transaction.animationListener : Transaction(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7 = *a1;
  swift_retain();
  swift_retain_n();
  a5(a2, v7, &v9);
  swift_release_n();
  return swift_release();
}

uint64_t Transaction.addAnimationLogicalListener(_:)(uint64_t a1)
{
  return Transaction.addAnimationListener(_:)(a1, specialized find<A>(_:key:), (void (*)(uint64_t, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction.addAnimationLogicalListener(allFinished:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  type metadata accessor for AllFinishedListener();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(unsigned char *)(v5 + 48) = 0;
  *(void *)(v5 + 16) = partial apply for closure #1 in Transaction.addAnimationLogicalListener(allFinished:);
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_retain();
  Transaction.addAnimationLogicalListener(_:)(v5);
  swift_release();

  return swift_release();
}

{
  return Transaction.addAnimationListener(allFinished:)(a1, a2, (void (*)(uint64_t))Transaction.addAnimationLogicalListener(_:));
}

uint64_t Transaction.addAnimationListener(allFinished:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  type metadata accessor for AllFinishedListener();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  a3(v6);

  return swift_release();
}

uint64_t Transaction.AnimationCompletionInfo.completedCount.getter()
{
  return *(void *)v0;
}

uint64_t Transaction.AnimationCompletionInfo.completedCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Transaction.AnimationCompletionInfo.completedCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Transaction.AnimationCompletionInfo.init(completedCount:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Transaction.combinedAnimationListener.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
LABEL_7:
    uint64_t v7 = swift_retain();
    uint64_t v8 = specialized find<A>(_:key:)(v7);
    if (v8)
    {
      uint64_t v2 = *(void *)(v8 + 72);
      swift_retain();
    }
    else
    {
      uint64_t v2 = 0;
    }
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 72);
  swift_retain();
  swift_release();
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (!v4)
  {
LABEL_10:
    swift_release();
    return v2;
  }
  uint64_t v5 = *(void *)(v4 + 72);
  swift_retain();
  swift_release();
  if (v5)
  {
    type metadata accessor for ListenerPair();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v5;
    return v6;
  }
  return v2;
}

uint64_t ListenerPair.animationWasAdded()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 88))();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 24) + 88))(v1);
}

uint64_t ListenerPair.animationWasRemoved()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 96))();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v0 + 24) + 96))(v1);
}

void ListenerPair.__allocating_init()()
{
}

uint64_t ListenerPair.__ivar_destroyer()
{
  swift_release();

  return swift_release();
}

uint64_t ListenerPair.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t AllFinishedListener.__ivar_destroyer()
{
  return swift_release();
}

uint64_t AllFinishedListener.finalizeTransaction()()
{
  if (!*(void *)(v0 + 32) && (*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    *(unsigned char *)(v0 + 48) = 1;
    uint64_t v1 = *(uint64_t (**)(uint64_t *))(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 40);
    return v1(&v3);
  }
  return result;
}

uint64_t AllFinishedListener.__deallocating_deinit()
{
  if (!*(void *)(v0 + 32) && (*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    *(unsigned char *)(v0 + 48) = 1;
    uint64_t v1 = *(void (**)(uint64_t *))(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 40);
    v1(&v3);
  }
  swift_release();

  return swift_deallocClassInstance();
}

void AllFinishedListener.animationWasAdded()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 32) = v3;
    uint64_t v4 = *(void *)(v0 + 40);
    BOOL v2 = __OFADD__(v4, 1);
    uint64_t v5 = v4 + 1;
    if (!v2)
    {
      *(void *)(v0 + 40) = v5;
      return;
    }
  }
  __break(1u);
}

uint64_t AllFinishedListener.animationWasRemoved()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  BOOL v2 = __OFSUB__(v1, 1);
  uint64_t v3 = v1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 32) = v3;
    if (!v3 && (*(unsigned char *)(v0 + 48) & 1) == 0)
    {
      *(unsigned char *)(v0 + 48) = 1;
      uint64_t v4 = *(uint64_t (**)(uint64_t *))(v0 + 16);
      uint64_t v6 = *(void *)(v0 + 40);
      return v4(&v6);
    }
  }
  return result;
}

void AllFinishedListener.__allocating_init()()
{
}

uint64_t type metadata accessor for ListenerPair()
{
  return self;
}

uint64_t sub_245B244CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for AllFinishedListener()
{
  return self;
}

uint64_t sub_245B24528@<X0>(void *a1@<X8>)
{
  return key path getter for Transaction.animationListener : Transaction(specialized find<A>(_:key:), a1);
}

uint64_t sub_245B24554(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.animationListener : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245B24580@<X0>(void *a1@<X8>)
{
  return key path getter for Transaction.animationListener : Transaction(specialized find<A>(_:key:), a1);
}

uint64_t sub_245B245AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.animationListener : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t method lookup function for AnimationListener(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnimationListener);
}

uint64_t dispatch thunk of AnimationListener.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnimationListener.animationWasAdded()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AnimationListener.animationWasRemoved()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AnimationListener.finalizeTransaction()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

ValueMetadata *type metadata accessor for Transaction.AnimationCompletionInfo()
{
  return &type metadata for Transaction.AnimationCompletionInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for Transaction.PendingListeners(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for DispatchTime();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

void *assignWithCopy for Transaction.PendingListeners(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

void *initializeWithTake for Transaction.PendingListeners(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for Transaction.PendingListeners(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Transaction.PendingListeners(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B24CF4);
}

uint64_t sub_245B24CF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Transaction.PendingListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B24DE8);
}

void *sub_245B24DE8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for Transaction.AnimationListenerKey()
{
  return &type metadata for Transaction.AnimationListenerKey;
}

ValueMetadata *type metadata accessor for Transaction.AnimationLogicalListenerKey()
{
  return &type metadata for Transaction.AnimationLogicalListenerKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for Transaction.PendingListeners.WeakListener(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DispatchTime();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return a1;
}

uint64_t assignWithCopy for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakCopyAssign();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakTakeAssign();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B250CC);
}

uint64_t sub_245B250CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B25150);
}

uint64_t sub_245B25150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t EnvironmentValues._effectiveForegroundColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_retain();
  swift_retain();
  uint64_t v3 = EnvironmentValues.foregroundStyle.getter();
  if (!v3)
  {
    uint64_t v3 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v3)
    {
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      uint64_t v3 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  uint64_t v4 = specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  return v4;
}

uint64_t EnvironmentValues.defaultForegroundColor.getter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultForegroundColor.getter((uint64_t (*)(void, uint64_t))EnvironmentValues.defaultForegroundStyle.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultForegroundColor : EnvironmentValues()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t EnvironmentValues.defaultForegroundColor.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.foregroundColor.setter(uint64_t a1)
{
  specialized EnvironmentValues.foregroundColor.setter(a1);

  return swift_release();
}

uint64_t (*EnvironmentValues.defaultForegroundColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = (uint64_t)v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = EnvironmentValues.defaultForegroundStyle.getter();
  if (v5)
  {
    uint64_t v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, v5);
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  return EnvironmentValues.defaultForegroundColor.modify;
}

uint64_t EnvironmentValues.defaultForegroundColor.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = (uint64_t *)a1[3];
  uint64_t v5 = *a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_retain();
  if (a2)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v7 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v8 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_release();
  }

  return swift_release();
}

uint64_t (*EnvironmentValues.foregroundColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = (uint64_t)v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = EnvironmentValues.foregroundStyle.getter();
  if (v5)
  {
    uint64_t v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, v5);
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  return EnvironmentValues.foregroundColor.modify;
}

uint64_t EnvironmentValues.foregroundColor.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if (a2)
  {
    if (!v3) {
      goto LABEL_7;
    }
    uint64_t v4 = one-time initialization token for foreground;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    if (static Color.foreground == v3 || ((*(uint64_t (**)(void))(*(void *)v3 + 88))() & 1) != 0)
    {
LABEL_7:
      uint64_t v5 = 0;
    }
    else
    {
      swift_retain();
      uint64_t v5 = v3;
    }
    uint64_t v6 = (uint64_t *)a1[3];
    uint64_t v7 = *v6;
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v6, v5);
    swift_release();
    swift_release();
    if (v6[1])
    {
      uint64_t v8 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (!v3) {
      goto LABEL_16;
    }
    if (one-time initialization token for foreground != -1) {
      swift_once();
    }
    if (static Color.foreground == v3 || ((*(uint64_t (**)(void))(*(void *)v3 + 88))() & 1) != 0)
    {
LABEL_16:
      uint64_t v9 = 0;
    }
    else
    {
      swift_retain();
      uint64_t v9 = v3;
    }
    uint64_t v10 = (uint64_t *)a1[3];
    uint64_t v11 = *v10;
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v10, v9);
    swift_release();
    swift_release();
    if (v10[1])
    {
      uint64_t v12 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t _ForegroundColorModifier.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ForegroundColorModifier.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundColorModifier.ChildEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  uint64_t v4 = *(void *)AGGraphGetValue();
  if (v4)
  {
    uint64_t v5 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v5 != -1) {
      swift_once();
    }
    if (static Color.foreground == v4 || ((*(uint64_t (**)(void))(*(void *)v4 + 88))() & 1) != 0) {
      uint64_t v4 = 0;
    }
    else {
      swift_retain();
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  specialized EnvironmentValues.subscript.setter(v4);
  swift_release();

  return swift_release();
}

uint64_t EnvironmentValues.effectiveForegroundColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = EnvironmentValues.foregroundStyle.getter();
  if (!v3)
  {
    uint64_t v3 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v3)
    {
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      uint64_t v3 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  uint64_t v4 = specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_245B25BD0()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t specialized static _ForegroundColorModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment();
  int v3 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Color?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v6;
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  }
  return result;
}

float specialized Color.ForegroundColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v2;
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = EnvironmentValues.foregroundStyle.getter();
  if (!v3)
  {
    uint64_t v7 = v1;
    uint64_t v8 = v2;
    uint64_t v3 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v3)
    {
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      uint64_t v3 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  uint64_t v4 = (void *)specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  swift_release();
  swift_release();
  if (!v4)
  {
    if (one-time initialization token for primary != -1) {
      swift_once();
    }
    uint64_t v4 = static Color.primary;
    swift_retain();
  }
  uint64_t v7 = v1;
  uint64_t v8 = v2;
  float v5 = (*(float (**)(uint64_t *))(*(void *)v4 + 104))(&v7);
  swift_release();
  return v5;
}

uint64_t sub_245B25F18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultForegroundColor : EnvironmentValues(a1, (uint64_t (*)(uint64_t))EnvironmentValues.foregroundStyle.getter, a2);
}

ValueMetadata *type metadata accessor for _ForegroundColorModifier()
{
  return &type metadata for _ForegroundColorModifier;
}

uint64_t sub_245B25F58()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>)
  {
    type metadata accessor for Color?(255, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for Color?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void *type metadata accessor for Color.ForegroundColorProvider()
{
  return &unk_26FA7C9D0;
}

ValueMetadata *type metadata accessor for _ForegroundColorModifier.ChildEnvironment()
{
  return &type metadata for _ForegroundColorModifier.ChildEnvironment;
}

uint64_t BitVector64.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t BitVector64.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*BitVector64.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BitVector64.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void BitVector64.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t BitVector64.subscript.getter(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = 1 << a1;
    if (a1 >= 0x40) {
      uint64_t v2 = 0;
    }
    return (*v1 & v2) != 0;
  }
  return result;
}

uint64_t BitVector64.subscript.setter(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 <= 0x3F)
    {
      uint64_t v3 = 1 << a2;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if (result)
      {
LABEL_4:
        uint64_t v4 = *v2 | v3;
LABEL_7:
        *uint64_t v2 = v4;
        return result;
      }
    }
    uint64_t v4 = *v2 & ~v3;
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*BitVector64.subscript.modify(uint64_t a1, unint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = (uint64_t (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = 1 << a2;
    if (a2 >= 0x40) {
      uint64_t v3 = 0;
    }
    *(unsigned char *)(a1 + 16) = (*v2 & v3) != 0;
    return BitVector64.subscript.modify;
  }
  return result;
}

uint64_t BitVector64.subscript.modify(uint64_t a1)
{
  return BitVector64.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(void *)a1);
}

void *protocol witness for SetAlgebra.union(_:) in conformance BitVector64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result | *v2;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance BitVector64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result & *v2;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance BitVector64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result ^ *v2;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance BitVector64@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result & *v2;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance BitVector64@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *result;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance BitVector64(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance BitVector64(void *result)
{
  *v1 ^= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance BitVector64(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance BitVector64(void *a1)
{
  return (*a1 & *v1) == 0;
}

uint64_t Collection.mapBool(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v33 = a5;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v34 = v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v39 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  int64_t v38 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (unint64_t *)((char *)&v32 - v16);
  uint64_t v18 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x270FA5388](v18);
  uint64_t v41 = type metadata accessor for EnumeratedSequence.Iterator();
  uint64_t v32 = *(void *)(v41 - 8);
  double v19 = MEMORY[0x270FA5388](v41);
  uint64_t v21 = (char *)&v32 - v20;
  MEMORY[0x24C522B90](a3, v6, v19);
  uint64_t v40 = v21;
  EnumeratedSequence.makeIterator()();
  uint64_t v22 = 0;
  uint64_t v23 = (void (**)(unint64_t *, char *, uint64_t))(v13 + 32);
  uint64_t v37 = TupleTypeMetadata2 - 8;
  uint64_t v24 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v25 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v26 = v34;
  while (1)
  {
    unint64_t v27 = v38;
    EnumeratedSequence.Iterator.next()();
    (*v23)(v17, v27, v39);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v17, 1, TupleTypeMetadata2) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v40, v41);
      *uint64_t v33 = v22;
      return result;
    }
    unint64_t v28 = *v17;
    (*v24)(v10, (char *)v17 + *(int *)(TupleTypeMetadata2 + 48), v26);
    char v29 = v35(v10);
    (*v25)(v10, v26);
    if ((v28 & 0x8000000000000000) != 0) {
      break;
    }
    if (v28 < 0x40)
    {
      uint64_t v30 = 1 << v28;
      if (v29) {
        goto LABEL_9;
      }
LABEL_2:
      v22 &= ~v30;
    }
    else
    {
      uint64_t v30 = 0;
      if ((v29 & 1) == 0) {
        goto LABEL_2;
      }
LABEL_9:
      v22 |= v30;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void BitVector.init(count:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 < 65)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    goto LABEL_5;
  }
  if (!__OFADD__(a1, 63))
  {
    unint64_t v4 = (unint64_t)(a1 + 63) >> 6;
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), 8 * v4);
LABEL_5:
    *(unsigned char *)a2 = a1 > 64;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = a1;
    return;
  }
  __break(1u);
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2, int32x2_t a3, int32x2_t a4, int32x2_t a5)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v7 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v8 = 0;
    __int32 v10 = a4.i32[0];
    __int32 v9 = a5.i32[0];
    __int32 v12 = a2.i32[0];
    __int32 v11 = a3.i32[0];
LABEL_9:
    unint64_t v20 = a1 - v8;
    do
    {
      *uint64_t v7 = v12;
      v7[1] = v11;
      uint64_t v7[2] = v10;
      void v7[3] = v9;
      v7 += 4;
      --v20;
    }
    while (v20);
    return result;
  }
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 += 4 * (a1 & 0xFFFFFFFFFFFFFFF8);
  __int32 v12 = a2.i32[0];
  __int32 v11 = a3.i32[0];
  int32x4_t v13 = vdupq_lane_s32(a2, 0);
  int32x4_t v14 = vdupq_lane_s32(a3, 0);
  __int32 v10 = a4.i32[0];
  __int32 v9 = a5.i32[0];
  int32x4_t v15 = vdupq_lane_s32(a4, 0);
  int32x4_t v16 = vdupq_lane_s32(a5, 0);
  unint64_t v17 = (float *)(result + 96);
  unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    double v19 = v17 - 16;
    vst4q_f32(v19, *(float32x4x4_t *)v13.i8);
    vst4q_f32(v17, *(float32x4x4_t *)v13.i8);
    v17 += 32;
    v18 -= 8;
  }
  while (v18);
  if (v8 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2, double a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for CGPoint(0);
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v5 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v6 = 0;
    double v7 = a3;
    double v8 = a2;
LABEL_9:
    unint64_t v14 = a1 - v6;
    do
    {
      double *v5 = v8;
      v5[1] = v7;
      v5 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += 2 * (a1 & 0xFFFFFFFFFFFFFFFCLL);
  double v8 = a2;
  int64x2_t v9 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  double v7 = a3;
  int64x2_t v10 = vdupq_lane_s64(*(uint64_t *)&a3, 0);
  __int32 v11 = (double *)(result + 64);
  unint64_t v12 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    int32x4_t v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v6 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  return specialized Array.init(repeating:count:)(a1, a2);
}

{
  return specialized Array.init(repeating:count:)(a1, a2);
}

{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    int64x2_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  double v7 = vdupq_n_s64(a1);
  double v8 = (int64x2_t *)(result + 48);
  int64x2_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *double v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  double v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *double v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  unint64_t v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  int16x8_t v7 = vdupq_n_s16(a1);
  double v8 = (int16x8_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *double v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t BitVector.startIndex.getter()
{
  return 0;
}

uint64_t BitVector.endIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t BitVector.subscript.getter(uint64_t a1)
{
  if (*(unsigned char *)v1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v2 = *(void *)(v1 + 16);
      if (a1 >> 6 < *(void *)(v2 + 16))
      {
        uint64_t v3 = *(void *)(v2 + 8 * (a1 >> 6) + 32);
        uint64_t v4 = 1 << a1;
        return (v3 & v4) != 0;
      }
    }
    __break(1u);
  }
  else if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v4 = 1 << a1;
    if ((unint64_t)a1 >= 0x40) {
      uint64_t v4 = 0;
    }
    return (v3 & v4) != 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BitVector.subscript.setter(uint64_t result, uint64_t a2)
{
  char v4 = result;
  if (*(unsigned char *)v2)
  {
    unint64_t v5 = *(void **)(v2 + 16);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((a2 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      if ((a2 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (a2 >> 6 < v5[2])
        {
          uint64_t result = BitVector64.subscript.setter(v4 & 1, a2 & 0x3F);
          *(void *)(v2 + 16) = v5;
          return result;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a2 < 0x40)
    {
      uint64_t v6 = 1 << a2;
      if (result) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (result)
      {
LABEL_9:
        uint64_t v7 = *(void *)(v2 + 8) | v6;
LABEL_12:
        *(void *)(v2 + 8) = v7;
        return result;
      }
    }
    uint64_t v7 = *(void *)(v2 + 8) & ~v6;
    goto LABEL_12;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*BitVector.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = BitVector.subscript.getter(a2) & 1;
  return BitVector.subscript.modify;
}

uint64_t BitVector.subscript.modify(uint64_t a1)
{
  return BitVector.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(void *)a1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BitVector(unsigned __int8 *a1, uint64_t *a2)
{
  return BitVector.subscript.setter(*a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BitVector(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v4 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = BitVector.subscript.getter(v4) & 1;
  return protocol witness for MutableCollection.subscript.modify in conformance BitVector;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance BitVector(uint64_t a1)
{
  return BitVector.subscript.setter(*(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BitVector(uint64_t a1, uint64_t *a2)
{
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], a1);

  return swift_bridgeObjectRelease();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance BitVector(void (***a1)(char **a1, char a2), uint64_t *a2))(void *a1)
{
  uint64_t v4 = (void (**)(char **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance BitVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t *protocol witness for MutableCollection.swapAt(_:_:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*result != *a2)
  {
    char v4 = BitVector.subscript.getter(v2);
    char v5 = BitVector.subscript.getter(v3);
    BitVector.subscript.setter(v5 & 1, v2);
    return (uint64_t *)BitVector.subscript.setter(v4 & 1, v3);
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance BitVector(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance BitVector(unsigned char *a1, uint64_t *a2))(void, void)
{
  *a1 = BitVector.subscript.getter(*a2) & 1;
  return _ViewInputs.base.modify;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance BitVector@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result[1];
  if (v3 >= v5)
  {
    uint64_t v7 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
    *(unsigned char *)(a2 + 16) = *(unsigned char *)v2;
    *(void *)(a2 + 24) = v7;
    *(void *)(a2 + 32) = v6;
    *(void *)(a2 + 40) = v3;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance BitVector(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance BitVector()
{
  return *(void *)(v0 + 24) == 0;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitVector(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance BitVector@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || v3 >= *(void *)(v2 + 24)) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance BitVector(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < 0 || v2 >= *(void *)(v1 + 24)) {
    __break(1u);
  }
  else {
    *uint64_t result = v2 + 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance BitVector@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(void *)(v2 + 24))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance BitVector(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(void *)(v1 + 24))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance BitVector@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(void *)(v3 + 24) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance BitVector@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4 >= *a2)
  {
    uint64_t v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5) {
      return (uint64_t *)(v3 - v5);
    }
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance BitVector@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 24);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance BitVector()
{
  uint64_t result = *(void *)(v0 + 24);
  if (result < 0) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance BitVector()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t lazy protocol witness table accessor for type BitVector64 and conformance BitVector64()
{
  unint64_t result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64;
  if (!lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector64 and conformance BitVector64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BitVector and conformance BitVector()
{
  unint64_t result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BitVector and conformance BitVector;
  if (!lazy protocol witness table cache variable for type BitVector and conformance BitVector)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector and conformance BitVector);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector);
}

uint64_t lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<BitVector>(255, &lazy cache variable for type metadata for Slice<BitVector>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<BitVector>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<BitVector> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type BitVector and conformance BitVector);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BitVector()
{
  return lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<BitVector> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<BitVector>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<BitVector> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<BitVector>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<BitVector>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type BitVector and conformance BitVector();
    unint64_t v7 = a3(a1, &type metadata for BitVector, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_245B27BDC@<X0>(unint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = BitVector64.subscript.getter(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_245B27C20(unsigned __int8 *a1, uint64_t a2, unint64_t *a3)
{
  return BitVector64.subscript.setter(*a1, *a3);
}

uint64_t sub_245B27C4C()
{
  return 0;
}

uint64_t sub_245B27C5C@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = BitVector.subscript.getter(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_245B27CB0(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  return BitVector.subscript.setter(*a1, *a3);
}

uint64_t sub_245B27CDC()
{
  return 0;
}

ValueMetadata *type metadata accessor for BitVector64()
{
  return &type metadata for BitVector64;
}

uint64_t initializeWithCopy for BitVector(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BitVector(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for BitVector(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BitVector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BitVector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BitVector()
{
  return &type metadata for BitVector;
}

unsigned char *storeEnumTagSinglePayload for BitVector.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B27F48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BitVector.Kind()
{
  return &unk_26FA804C0;
}

unint64_t lazy protocol witness table accessor for type BitVector.Kind and conformance BitVector.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind;
  if (!lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BitVector.Kind and conformance BitVector.Kind);
  }
  return result;
}

uint64_t EnvironmentValues.defaultAccentColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    uint64_t v5 = v4;
    swift_release_n();
    swift_release_n();
    if (v3)
    {
LABEL_3:
      v9[0] = v1;
      v9[1] = v2;
      return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 8))(v9, v3, v5);
    }
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v10);
    uint64_t v5 = v8;
    swift_release_n();
    if (v3) {
      goto LABEL_3;
    }
  }
  return 0;
}

uint64_t (*EnvironmentValues.accentColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)(a1 + 1));
  }
  swift_release_n();
  *a1 = v4;
  return EnvironmentValues.accentColor.modify;
}

uint64_t EnvironmentValues.accentColor.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized EnvironmentValues.accentColor.setter(v3);
    swift_release();
  }
  else
  {
    specialized EnvironmentValues.accentColor.setter(v2);
  }

  return swift_release();
}

uint64_t EnvironmentValues.defaultAccentColorProvider.getter()
{
  return EnvironmentValues.defaultAccentColorProvider.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.defaultAccentColorProvider.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *uint64_t v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.defaultAccentColorProvider.modify;
}

void EnvironmentValues.defaultAccentColorProvider.modify(uint64_t **a1, char a2)
{
}

uint64_t EnvironmentValues.systemAccentColor.getter()
{
  if (one-time initialization token for blue != -1) {
    swift_once();
  }

  return swift_retain();
}

void *EnvironmentValues.systemAccentValue.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v14);
    swift_release_n();
    unint64_t result = (void *)swift_release_n();
    LOBYTE(v5) = v14;
    if (v14 == 10)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
      uint64_t v7 = v6;
      swift_release_n();
      unint64_t result = (void *)swift_release_n();
      if (v5)
      {
LABEL_4:
        unint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v13, v5, v7);
        LOBYTE(v5) = v13[0];
        goto LABEL_11;
      }
LABEL_10:
      LOBYTE(v5) = 8;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SystemAccentValueKey>();
    BloomFilter.init(hashValue:)(v8);
    uint64_t v9 = swift_retain_n();
    uint64_t v10 = specialized find1<A>(_:key:filter:)(v9, v14);
    if (v10) {
      LODWORD(v5) = *(unsigned __int8 *)(v10 + 72);
    }
    else {
      LODWORD(v5) = 10;
    }
    unint64_t result = (void *)swift_release_n();
    if (v5 == 10)
    {
      uint64_t v11 = swift_retain_n();
      uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v13 + 1);
      uint64_t v7 = v12;
      unint64_t result = (void *)swift_release_n();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  *a1 = v5;
  return result;
}

uint64_t EnvironmentValues.systemAccentValue.setter(char *a1)
{
  uint64_t v2 = *v1;
  char v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.systemAccentValueProvider.getter()
{
  return EnvironmentValues.defaultAccentColorProvider.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultAccentColorProvider.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t (*EnvironmentValues.systemAccentValue.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  EnvironmentValues.systemAccentValue.getter((unsigned char *)(a1 + 24));
  return EnvironmentValues.systemAccentValue.modify;
}

uint64_t EnvironmentValues.systemAccentValue.modify(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = a2(v5);
    uint64_t v9 = v8;
    swift_release_n();
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    uint64_t v7 = a3(v11, &v14);
    uint64_t v9 = v12;
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  a4[1] = v9;
  return result;
}

uint64_t EnvironmentValues.systemAccentValueProvider.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.systemAccentValueProvider.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *uint64_t v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.systemAccentValueProvider.modify;
}

void EnvironmentValues.systemAccentValueProvider.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.defaultAccentColorProvider.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = (uint64_t *)(*a1)[5];
  uint64_t v10 = **a1;
  uint64_t v9 = (*a1)[1];
  uint64_t v11 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v12 = (void **)(v7 + 3);
  }
  else {
    uint64_t v12 = (void **)(v7 + 4);
  }
  a3(v8, v10, v9, v12);
  swift_release();
  if (v8[1])
  {
    uint64_t v13 = *(void *)v7[5];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

SwiftUI::SystemAccentValue_optional __swiftcall SystemAccentValue.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)(rawValue + 3) > 9) {
    *uint64_t v1 = 10;
  }
  else {
    *uint64_t v1 = byte_2461C3EB2[rawValue + 3];
  }
  return (SwiftUI::SystemAccentValue_optional)rawValue;
}

uint64_t SystemAccentValue.rawValue.getter()
{
  return qword_2461C3EC0[*v0];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemAccentValue()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_2461C3EC0[*v0]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemAccentValue()
{
  Hasher._combine(_:)(qword_2461C3EC0[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemAccentValue()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_2461C3EC0[*v0]);
  return Hasher._finalize()();
}

SwiftUI::SystemAccentValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SystemAccentValue(Swift::Int *a1)
{
  return SystemAccentValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SystemAccentValue(void *a1@<X8>)
{
  *a1 = qword_2461C3EC0[*v1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SystemAccentValue(char *a1, char *a2)
{
  return qword_2461C3EC0[*a1] == qword_2461C3EC0[*a2];
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance SystemAccentValueKey(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_245B28C24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized(a1, a2);
}

void type metadata accessor for EnvironmentPropertyKey<SystemAccentValueKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SystemAccentValueKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemAccentValue and conformance SystemAccentValue()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue;
  if (!lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemAccentValue and conformance SystemAccentValue);
  }
  return result;
}

uint64_t sub_245B28CFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.accentColor : EnvironmentValues, serialized(a1, a2);
}

uint64_t sub_245B28D1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245B28D5C(uint64_t *a1)
{
  return EnvironmentValues.defaultAccentColorProvider.setter(*a1, a1[1]);
}

void *sub_245B28D88@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = EnvironmentValues.systemAccentValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_245B28DCC(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.systemAccentValue.setter(&v2);
}

uint64_t sub_245B28E04@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultAccentColorProvider : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245B28E44(uint64_t *a1)
{
  return EnvironmentValues.systemAccentValueProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static DefaultAccentColorProvider.accentColor(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t getEnumTagSinglePayload for SystemAccentValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemAccentValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245B28FE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemAccentValue()
{
  return &type metadata for SystemAccentValue;
}

uint64_t dispatch thunk of static SystemAccentValueProvider.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_245B2902C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SystemAccentValueKey()
{
  return &type metadata for SystemAccentValueKey;
}

ValueMetadata *type metadata accessor for Color.AccentColorProvider()
{
  return &type metadata for Color.AccentColorProvider;
}

unint64_t lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor;
  if (!lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccentColorKey()
{
  return &type metadata for AccentColorKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultAccentColorProviderKey()
{
  return &type metadata for EnvironmentValues.DefaultAccentColorProviderKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SystemAccentValueProviderKey()
{
  return &type metadata for EnvironmentValues.SystemAccentValueProviderKey;
}

uint64_t ConditionalMetadata<>.MakeView.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v29)(void *__return_ptr, int *, ValueMetadata **, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  long long v44;
  int v45;
  int v46;
  void v47[3];
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned char v51[12];
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  ValueMetadata *v62;
  unint64_t v63;
  long long v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;

  uint64_t v5 = v4;
  char v43 = a4;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v4 + 32);
  if (*(unsigned char *)(v4 + 85)) {
    uint64_t v8 = specialized _GraphInputs.pushScope<A>(id:)(v11);
  }
  unint64_t v12 = *(void *)v4;
  LODWORD(v62) = *(_DWORD *)(v5 + 24);
  uint64_t v63 = v12;
  uint64_t v44 = *(_OWORD *)(v5 + 8);
  uint64_t v64 = v44;
  double v65 = v11;
  MEMORY[0x270FA5388](v8);
  *((void *)&v33 - 4) = a3;
  int64_t v48 = &type metadata for ViewDescriptor;
  uint64_t v49 = v13;
  int64_t v50 = a3;
  *(void *)uint64_t v51 = &protocol witness table for ViewDescriptor;
  uint64_t v14 = type metadata accessor for UnwrapConditional();
  *((void *)&v33 - 3) = v14;
  *((void *)&v33 - 2) = swift_getWitnessTable();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v12);
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v62, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v33 - 12), v14, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v63);
  uint64_t v17 = *(void *)(v5 + 40);
  if (!v17) {
    __break(1u);
  }
  uint64_t v18 = v48;
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v17, a3);
  MEMORY[0x270FA5388](v19);
  *((void *)&v33 - 2) = a3;
  *(&v33 - 2) = v18;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)(&v33 - 8), a3, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a3);
  _GraphValue.init(_:)(v18, &v46);
  LODWORD(v44) = v46;
  uint64_t v21 = *(ValueMetadata **)(v5 + 48);
  uint64_t v40 = *(_DWORD *)(v5 + 56);
  uint64_t v22 = *(void *)(v5 + 64);
  int64_t v38 = *(_DWORD *)(v5 + 72);
  uint64_t v37 = *(_DWORD *)(v5 + 76);
  unint64_t v42 = *(_DWORD *)(v5 + 80);
  uint64_t v39 = *(_DWORD *)(v5 + 84);
  uint64_t v23 = *(void *)(v5 + 88);
  uint64_t v24 = *(void *)(v5 + 96);
  int v25 = *(_DWORD *)(v5 + 108);
  uint64_t v36 = *(_DWORD *)(v5 + 104);
  int v26 = *(_DWORD *)(v5 + 112);
  int v27 = *(_DWORD *)(v5 + 116);
  uint64_t v35 = *(_DWORD *)(v5 + 120);
  uint64_t v34 = *(_DWORD *)(v5 + 124);
  uint64_t v33 = *(_DWORD *)(v5 + 128);
  LODWORD(v18) = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = v18;
  if (v18) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v62 = v21;
  LODWORD(v63) = v40;
  *(void *)&uint64_t v64 = v22;
  *((void *)&v64 + 1) = __PAIR64__(v37, v38);
  HIDWORD(v65) = v39;
  uint64_t v66 = v23;
  double v67 = v24;
  uint64_t v68 = v36;
  uint64_t v69 = v25;
  uint64_t v70 = v26;
  uint64_t v71 = v27;
  uint64_t v72 = v35;
  uint64_t v73 = v34;
  uint64_t v74 = v33;
  uint64_t v45 = v44;
  int64_t v48 = v21;
  LODWORD(v49) = v40;
  int64_t v50 = v22;
  *(_DWORD *)uint64_t v51 = v38;
  *(void *)&v51[4] = v37;
  uint64_t v52 = v39;
  int v53 = v23;
  uint64_t v54 = v24;
  uint64_t v55 = v36;
  int64_t v56 = v25;
  uint64_t v57 = v26;
  uint64_t v58 = v27;
  uint64_t v59 = v35;
  uint64_t v60 = v34;
  uint64_t v61 = v33;
  uint64_t v28 = v43;
  char v29 = *(void (**)(void *__return_ptr, int *, ValueMetadata **, uint64_t, uint64_t))(v43 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(v47, &v45, &v48, a3, v28);
  LODWORD(v65) = v42;
  if (v41)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v47, (uint64_t)&v62);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  uint64_t v30 = v47[0];
  uint64_t v31 = v47[1];
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)(v5 + 136) = v30;
  *(void *)(v5 + 144) = v31;
  return result;
}

uint64_t protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance ConditionalMetadata<A><>.MakeView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConditionalMetadata<>.MakeView.visit<A>(type:)(a1, a4, a2, a3);
}

unint64_t *ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v10 = a3[2];
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  int v13 = *((_DWORD *)a3 + 20);
  unint64_t v14 = *v5;
  uint64_t v15 = v5[1];
  unint64_t v16 = v5[2];
  *(void *)&long long v38 = v14;
  *((void *)&v38 + 1) = v15;
  unint64_t v39 = v16;
  int v40 = a2;
  long long v41 = 0uLL;
  uint64_t v42 = v8;
  int v43 = v9;
  long long v45 = *(_OWORD *)(a3 + 3);
  uint64_t v44 = v10;
  *(void *)&long long v46 = v11;
  *((void *)&v46 + 1) = v12;
  long long v47 = *(_OWORD *)(a3 + 7);
  uint64_t v48 = a3[9];
  int v49 = v13;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  v23[2] = a4;
  v23[3] = &v38;
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  specialized ConditionalTypeDescriptor.project(at:baseIndex:_:)(a1, 0, partial apply for closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:), (uint64_t)v23, v14, v15);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v14);
  uint64_t v17 = v50;
  unint64_t v18 = v51;
  if (v50)
  {
    unint64_t v19 = HIDWORD(v51);
    uint64_t v20 = v50;
    int v21 = v51;
  }
  else
  {
    int v21 = 0;
    LODWORD(v19) = *MEMORY[0x263F288F8];
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  *(void *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v21;
  *(_DWORD *)(a5 + 12) = v19;
  long long v24 = v38;
  unint64_t v25 = v39;
  int v26 = v40;
  long long v27 = v41;
  uint64_t v28 = v42;
  int v29 = v43;
  uint64_t v30 = v44;
  long long v31 = v45;
  long long v32 = v46;
  long long v33 = v47;
  uint64_t v34 = v48;
  int v35 = v49;
  uint64_t v36 = v17;
  unint64_t v37 = v18;
  swift_bridgeObjectRetain();
  return outlined release of ConditionalMetadata<ViewDescriptor><>.MakeView<A1>((unint64_t *)&v24);
}

uint64_t closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    *(void *)(a4 + 32) = result;
    *(void *)(a4 + 40) = a3;
    uint64_t View = type metadata accessor for ConditionalMetadata<>.MakeView();
    return TypeConformance<>.visitType<A>(visitor:)(a4, View, (uint64_t)&protocol witness table for ConditionalMetadata<A><>.MakeView<A1>);
  }
  return result;
}

uint64_t dispatch thunk of static ConditionalProtocolDescriptor.fetchConditionalType(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static ConditionalProtocolDescriptor.insertConditionalType(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t *assignWithCopy for ConditionalMetadata(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  unint64_t v6 = *a1;
  *a1 = v4;
  a1[1] = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t *assignWithTake for ConditionalMetadata(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  unint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t *initializeBufferWithCopyOfBuffer for ConditionalTypeDescriptor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

unint64_t *assignWithCopy for ConditionalTypeDescriptor(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  unint64_t v6 = *a1;
  *a1 = v4;
  a1[1] = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  a1[2] = a2[2];
  return a1;
}

unint64_t *assignWithTake for ConditionalTypeDescriptor(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalTypeDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConditionalTypeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for ConditionalTypeDescriptor.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

unint64_t destroy for ConditionalTypeDescriptor.Storage(unint64_t *a1)
{
  return outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
}

unint64_t *assignWithCopy for ConditionalTypeDescriptor.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*a2);
  unint64_t v5 = *a1;
  *a1 = v3;
  a1[1] = v4;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v5);
  return a1;
}

unint64_t *assignWithTake for ConditionalTypeDescriptor.Storage(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3 = *a1;
  *(_OWORD *)a1 = *a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalTypeDescriptor.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConditionalTypeDescriptor.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ConditionalTypeDescriptor.Storage(void *a1)
{
  return *a1 >> 62;
}

void *destructiveProjectEnumData for ConditionalTypeDescriptor.Storage(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *destructiveInjectEnumTag for ConditionalTypeDescriptor.Storage(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

uint64_t type metadata accessor for ConditionalTypeDescriptor.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance UnwrapConditional<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 56))(a2, 1, 1);
}

uint64_t partial apply for closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(uint64_t a1, void *a2, uint64_t a3)
{
  return closure #1 in ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, a2, a3, *(void *)(v3 + 24));
}

unint64_t *outlined release of ConditionalMetadata<ViewDescriptor><>.MakeView<A1>(unint64_t *a1)
{
  return a1;
}

uint64_t type metadata accessor for ConditionalMetadata<>.MakeView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t objectdestroy_3Tm()
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t destroy for ConditionalMetadata<>.MakeView(unint64_t *a1)
{
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(*a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)a2);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)a2);
  unint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ConditionalMetadata<>.MakeView(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata<>.MakeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata<>.MakeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)a2);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 176);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    long long v7 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v7;
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    long long v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v8;
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 136, a2 + 136);
    }
    *(unsigned char *)(a1 + 176) = v6 & 1;
    uint64_t v10 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v10;
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  }
  return a1;
}

uint64_t assignWithCopy for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(*(void *)a2);
  unint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  long long v7 = (_OWORD *)(a1 + 136);
  long long v8 = (_OWORD *)(a2 + 136);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned char *)(a1 + 176) != 0xFF)
  {
    if (v9 == 255)
    {
      outlined destroy of _ViewListOutputs(a1 + 136);
      *long long v7 = *v8;
      long long v14 = *(_OWORD *)(a2 + 168);
      long long v13 = *(_OWORD *)(a2 + 184);
      long long v15 = *(_OWORD *)(a2 + 152);
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v14;
      *(_OWORD *)(a1 + 184) = v13;
      *(_OWORD *)(a1 + 152) = v15;
      return a1;
    }
    if (a1 != a2)
    {
      outlined destroy of _ViewListOutputs.Views(a1 + 136);
      if (*(unsigned char *)(a2 + 176))
      {
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(unsigned char *)(a1 + 176) = 1;
        swift_retain();
      }
      else
      {
        uint64_t v17 = *(void *)(a2 + 160);
        *(void *)(a1 + 160) = v17;
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 136, a2 + 136);
        *(unsigned char *)(a1 + 176) = 0;
      }
    }
LABEL_14:
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    uint64_t v18 = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 192) = v18;
    return a1;
  }
  if (v9 != 255)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 160);
      *(void *)(a1 + 160) = v16;
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 136, a2 + 136);
    }
    *(unsigned char *)(a1 + 176) = v9 & 1;
    goto LABEL_14;
  }
  *long long v7 = *v8;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 152) = v10;
  return a1;
}

__n128 __swift_memcpy201_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for ConditionalMetadata<>.MakeList(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  long long v5 = (_OWORD *)(a1 + 136);
  long long v6 = (_OWORD *)(a2 + 136);
  if (*(unsigned char *)(a1 + 176) == 0xFF) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 176) == 0xFF)
  {
    outlined destroy of _ViewListOutputs(a1 + 136);
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v7;
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    long long v8 = *(_OWORD *)(a2 + 152);
    _OWORD *v5 = *v6;
    *(_OWORD *)(a1 + 152) = v8;
    return a1;
  }
  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1 + 136);
    long long v9 = *(_OWORD *)(a2 + 152);
    _OWORD *v5 = *v6;
    *(_OWORD *)(a1 + 152) = v9;
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  uint64_t v10 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v10;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata<>.MakeList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 201)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata<>.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 200) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 201) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 201) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithCopy for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  unint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v6);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for UnwrapConditional(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnwrapConditional(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnwrapConditional(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t Namespace.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Namespace.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::Namespace __swiftcall Namespace.init()()
{
  return 0;
}

uint64_t static Namespace._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(0, a3);
}

void protocol witness for DynamicPropertyBox.reset() in conformance Namespace.Box()
{
  *uint64_t v0 = 0;
}

Swift::Int Namespace.ID.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void *type metadata accessor for Namespace.Box()
{
  return &unk_26FA80C18;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in Namespace.Box()
{
  return &protocol witness table for Namespace;
}

uint64_t CAHostingLayer.viewGraph.getter()
{
  specialized CAHostingLayer.viewGraph.getter();

  return swift_retain();
}

uint64_t CAHostingLayer.renderer.getter()
{
  return swift_retain();
}

uint64_t CAHostingLayer.eventBindingManager.getter()
{
  specialized CAHostingLayer.eventBindingManager.getter();

  return swift_retain();
}

uint64_t CAHostingLayer.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v3 = (_WORD *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x78));
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t CAHostingLayer.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = (_WORD *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x78));
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.propertiesNeedingUpdate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x80);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t CAHostingLayer.renderingPhase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x80);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.renderingPhase.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t CAHostingLayer.isHiddenForReuse.getter()
{
  uint64_t v1 = (unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x90);
  swift_beginAccess();
  return *v1;
}

uint64_t CAHostingLayer.isHiddenForReuse.setter(char a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x90);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*CAHostingLayer.isHiddenForReuse.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double CAHostingLayer.currentTimestamp.getter@<D0>(void *a1@<X8>)
{
  uint64_t v3 = (double *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x98));
  swift_beginAccess();
  double result = *v3;
  *a1 = *(void *)v3;
  return result;
}

uint64_t CAHostingLayer.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x98));
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t (*CAHostingLayer.currentTimestamp.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.externalUpdateCount.getter()
{
  uint64_t v1 = (char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xA0);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t CAHostingLayer.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xA0));
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*CAHostingLayer.externalUpdateCount.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t CAHostingLayer.environmentOverride.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xA8));
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return outlined copy of EnvironmentValues?(v4);
}

uint64_t CAHostingLayer.environmentOverride.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xA8));
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = v2;
  v4[1] = v3;
  outlined consume of EnvironmentValues?(v5);
  return CAHostingLayer.environmentOverride.didset(2u, 1);
}

uint64_t (*CAHostingLayer.environmentOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.environmentOverride.modify;
}

uint64_t CAHostingLayer.environmentOverride.modify(uint64_t a1, char a2)
{
  return CAHostingLayer.environmentOverride.modify(a1, a2, 2u);
}

__n128 CAHostingLayer.safeAreaInsetsOverride.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xB0);
  char v3 = v2[32];
  __n128 result = *(__n128 *)v2;
  long long v5 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v3;
  return result;
}

uint64_t CAHostingLayer.safeAreaInsetsOverride.setter(uint64_t a1)
{
  outlined init with take of EdgeInsets?(a1, (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xB0));
  return CAHostingLayer.environmentOverride.didset(0x10u, 0);
}

uint64_t CAHostingLayer.accessibilityEnabled.getter()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x60));
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 360);
}

uint64_t CAHostingLayer.accessibilityEnabled.setter(char a1)
{
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x60));
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 360) = a1;
  return result;
}

void (*CAHostingLayer.accessibilityEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x60));
  swift_beginAccess();
  *((unsigned char *)v3 + 80) = *(unsigned char *)(v4 + 360);
  return CAHostingLayer.accessibilityEnabled.modify;
}

void CAHostingLayer.accessibilityEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 80);
  uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72)
                 + *(void *)((*MEMORY[0x263F8EED0] & **(void **)(*(void *)a1 + 72)) + 0x60));
  swift_beginAccess();
  *(unsigned char *)(v3 + 360) = v2;

  free(v1);
}

uint64_t CAHostingLayer.canAdvanceTimeAutomatically.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xC0));
}

uint64_t CAHostingLayer.canAdvanceTimeAutomatically.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xC0)) = result;
  return result;
}

uint64_t CAHostingLayer.allowFrameChanges.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xC8));
}

uint64_t CAHostingLayer.allowFrameChanges.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xC8)) = result;
  return result;
}

void CAHostingLayer.nextTimerTime.getter(uint64_t a1@<X8>)
{
  char v2 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xD0);
  uint64_t v3 = *(void *)v2;
  LOBYTE(v2) = v2[8];
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = (_BYTE)v2;
}

uint64_t CAHostingLayer.nextTimerTime.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xD0);
  *(void *)uint64_t v3 = *(void *)result;
  v3[8] = v2;
  return result;
}

void CAHostingLayer.updateTimer.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xD8);
  uint64_t v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
}

uint64_t CAHostingLayer.isUpdating.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE0));
}

uint64_t CAHostingLayer.isUpdating.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xE0)) = result;
  return result;
}

uint64_t CAHostingLayer.needsDeferredUpdate.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE8));
}

uint64_t CAHostingLayer.needsDeferredUpdate.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xE8)) = result;
  return result;
}

uint64_t CAHostingLayer.focusedResponder.getter()
{
  specialized CAHostingLayer.focusedResponder.getter();

  return swift_retain();
}

id CAHostingLayer.__allocating_init(rootView:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(v3);
  id v7 = specialized CAHostingLayer.init(rootView:environment:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*((void *)v3 + 10) - 8) + 8))(a1);
  return v7;
}

id CAHostingLayer.init(rootView:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *MEMORY[0x263F8EED0] & *v2;
  id v5 = specialized CAHostingLayer.init(rootView:environment:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a1);
  return v5;
}

uint64_t CAHostingLayer.init(layer:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v47 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v5 = v47;
  uint64_t v6 = *(void *)(v47 + 80);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v52 = (char *)&v44 - v8;
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v46 = (uint64_t)&v44 - v12;
  uint64_t v13 = *(void *)(v5 + 104);
  uint64_t v14 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 48) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v15 + 56) = 0;
  *(void *)(v15 + 64) = 0;
  *(void *)(v15 + 72) = 0;
  *(unsigned char *)(v15 + 80) = 1;
  *(void *)((char *)v2 + v13) = v15;
  *(void *)(v15 + 16) = v14;
  uint64_t v16 = v4;
  uint64_t v17 = *(void *)((*v4 & *v2) + 0x70);
  type metadata accessor for EventBindingManager();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v18 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v18 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v18 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v18 + 64) = 0;
  *(void *)(v18 + 72) = 0;
  *(void *)((char *)v2 + v17) = v18;
  uint64_t v19 = *(void *)((*v4 & *v2) + 0x78);
  uint64_t v20 = one-time initialization token for all;
  int v21 = v2;
  if (v20 != -1) {
    swift_once();
  }
  *(_WORD *)((char *)v2 + v19) = static ViewRendererHostProperties.all;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0x80)) = 0;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0x88)) = 0;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0x90)) = 0;
  *(void *)((char *)v21 + *(void *)((*v4 & *v21) + 0x98)) = 0;
  *(void *)((char *)v21 + *(void *)((*v4 & *v21) + 0xA0)) = 0;
  *(_OWORD *)((char *)v21 + *(void *)((*v4 & *v21) + 0xA8)) = xmmword_24619B520;
  uint64_t v22 = (char *)v21 + *(void *)((*v4 & *v21) + 0xB0);
  *(_OWORD *)uint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[32] = 1;
  *(void *)((char *)v21 + *(void *)((*v4 & *v21) + 0xB8)) = 0;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0xC0)) = 1;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0xC8)) = 1;
  uint64_t v23 = (char *)v21 + *(void *)((*v4 & *v21) + 0xD0);
  *(void *)uint64_t v23 = 0;
  v23[8] = 1;
  *(void *)((char *)v21 + *(void *)((*v4 & *v21) + 0xD8)) = 0;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0xE0)) = 0;
  *((unsigned char *)v21 + *(void *)((*v4 & *v21) + 0xE8)) = 0;
  *(void *)((char *)v21 + *(void *)((*v4 & *v21) + 0xF0)) = 0;
  long long v24 = (char *)v21 + *(void *)((*v4 & *v21) + 0x110);
  uint64_t v25 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  outlined init with copy of Any(a1, (uint64_t)v59);
  uint64_t v44 = *(void *)(v47 + 88);
  int v26 = (objc_class *)type metadata accessor for CAHostingLayer();
  int v27 = swift_dynamicCast();
  uint64_t v47 = a1;
  if (v27)
  {
    uint64_t v28 = v6;
    uint64_t v29 = v46;
    long long v45 = (void *)v58[2];
    CAHostingLayer.rootView.getter(v46);
    uint64_t v30 = v16;
    long long v31 = (char *)v21 + *(void *)((*v16 & *v21) + 0xF8);
    uint64_t v32 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v31, v29, v6);
    CAHostingLayer.environment.getter(v59);
    long long v33 = (char *)v21 + *(void *)((*v30 & *v21) + 0x100);
    *(_OWORD *)long long v33 = v59[0];
    uint64_t v34 = v48;
    static ContinuousClock.Instant.now.getter();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))((char *)v21 + *(void *)((*v30 & *v21) + 0x108), v34, v50);
    specialized static Update.begin()();
    uint64_t v50 = type metadata accessor for ViewGraph();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v29, v31, v28);
    uint64_t v35 = (uint64_t)v52;
    uint64_t v36 = v44;
    static ViewRendererHost.makeRootView<A>(_:)(v29, (uint64_t)v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v28);
    swift_beginAccess();
    uint64_t v37 = *((void *)v33 + 1);
    v58[0] = *(void *)v33;
    v58[1] = v37;
    uint64_t v56 = v36;
    uint64_t v57 = &protocol witness table for HitTestBindingModifier;
    swift_retain();
    swift_retain();
    uint64_t v38 = v54;
    uint64_t WitnessTable = swift_getWitnessTable();
    int v40 = specialized ViewGraph.__allocating_init<A>(rootView:environment:)(v35, (uint64_t)v58, v38, WitnessTable);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v35, v38);
    *(void *)((char *)v21 + *(void *)((*MEMORY[0x263F8EED0] & *v21) + 0x60)) = v40;

    v55.receiver = v21;
    v55.super_class = v26;
    long long v41 = v45;
    id v42 = objc_msgSendSuper2(&v55, sel_initWithLayer_, v45);
    CAHostingLayer.postInit()();
    static Update.end()();

    __swift_destroy_boxed_opaque_existential_1(v47);
    return (uint64_t)v42;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t @objc CAHostingLayer.init(layer:)()
{
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return CAHostingLayer.init(layer:)((uint64_t)&v1);
}

uint64_t CAHostingLayer.postInit()()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  type metadata accessor for CAHostingLayer();
  ViewRendererHost.initializeViewGraph()();
  uint64_t v2 = *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x68));
  swift_beginAccess();
  *(void *)(v2 + 48) = &protocol witness table for CAHostingLayer<A>;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v2 + 80) = 1;
  uint64_t v3 = *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x70));
  swift_beginAccess();
  *(void *)(v3 + 24) = &protocol witness table for CAHostingLayer<A>;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *(void *)(v3 + 40) = &protocol witness table for CAHostingLayer<A>;
  return swift_unknownObjectWeakAssign();
}

void @objc CAHostingLayer.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized CAHostingLayer.init(coder:)();
}

double @objc CAHostingLayer.bounds.getter(void *a1)
{
  id v1 = a1;
  CAHostingLayer.bounds.getter();
  double v3 = v2;

  return v3;
}

id CAHostingLayer.bounds.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAHostingLayer();
  return objc_msgSendSuper2(&v2, sel_bounds);
}

void @objc CAHostingLayer.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  CAHostingLayer.bounds.setter(a2, a3, a4, a5);
}

void CAHostingLayer.bounds.setter(double a1, double a2, double a3, double a4)
{
  if (*((unsigned char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0xC8)) == 1)
  {
    id v9 = (objc_class *)type metadata accessor for CAHostingLayer();
    v17.receiver = v4;
    v17.super_class = v9;
    objc_msgSendSuper2(&v17, sel_bounds);
    double v11 = v10;
    double v13 = v12;
    v16.receiver = v4;
    v16.super_class = v9;
    objc_msgSendSuper2(&v16, sel_setBounds_, a1, a2, a3, a4);
    if (v11 != a3 || v13 != a4)
    {
      unsigned __int16 v15 = 8;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v15, 0, (uint64_t)v9, (uint64_t)&protocol witness table for CAHostingLayer<A>);
    }
  }
}

double @objc CAHostingLayer.position.getter(void *a1)
{
  id v1 = a1;
  CAHostingLayer.position.getter();
  double v3 = v2;

  return v3;
}

id CAHostingLayer.position.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAHostingLayer();
  return objc_msgSendSuper2(&v2, sel_position);
}

void @objc CAHostingLayer.position.setter(void *a1, double a2, double a3)
{
  id v5 = a1;
  CAHostingLayer.position.setter(a2, a3);
}

void CAHostingLayer.position.setter(double a1, double a2)
{
  if (*((unsigned char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0xC8)) == 1)
  {
    v5.receiver = v2;
    v5.super_class = (Class)type metadata accessor for CAHostingLayer();
    objc_msgSendSuper2(&v5, sel_setPosition_, a1, a2);
  }
}

double @objc CAHostingLayer.contentsScale.getter(void *a1)
{
  id v1 = a1;
  CAHostingLayer.contentsScale.getter();
  double v3 = v2;

  return v3;
}

id CAHostingLayer.contentsScale.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAHostingLayer();
  return objc_msgSendSuper2(&v2, sel_contentsScale);
}

void @objc CAHostingLayer.contentsScale.setter(void *a1, double a2)
{
  id v3 = a1;
  CAHostingLayer.contentsScale.setter(a2);
}

id CAHostingLayer.contentsScale.setter(double a1)
{
  id v3 = (objc_class *)type metadata accessor for CAHostingLayer();
  v8.receiver = v1;
  v8.super_class = v3;
  objc_msgSendSuper2(&v8, sel_contentsScale);
  double v5 = v4;
  v7.receiver = v1;
  v7.super_class = v3;
  objc_msgSendSuper2(&v7, sel_setContentsScale_, a1);
  return CAHostingLayer.contentsScale.didset(v5);
}

id CAHostingLayer.contentsScale.didset(double a1)
{
  id result = objc_msgSend(v1, sel_contentsScale);
  if (v4 != a1)
  {
    unsigned __int16 v6 = 2;
    uint64_t v5 = type metadata accessor for CAHostingLayer();
    return (id)ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v6, 1, v5, (uint64_t)&protocol witness table for CAHostingLayer<A>);
  }
  return result;
}

Swift::Void __swiftcall CAHostingLayer.layoutSublayers()()
{
  id v1 = (void *)MEMORY[0x263F8EED0];
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAHostingLayer();
  objc_msgSendSuper2(&v3, sel_layoutSublayers);
  if (*((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0xC0)) == 1)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v2 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #1 in CAHostingLayer.layoutSublayers()(v0);
    _MovableLockUnlock(v2);
  }
}

void closure #1 in CAHostingLayer.layoutSublayers()(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *MEMORY[0x263F8EED0] & *a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v28 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  MEMORY[0x270FA5388](v6);
  objc_super v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  double v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - v13;
  CFTimeInterval v15 = CACurrentMediaTime();
  *((unsigned char *)a1 + *(void *)((*v2 & *a1) + 0xE0)) = 1;
  uint64_t aBlock = 0;
  LOBYTE(v35) = 1;
  uint64_t v16 = *(void *)(v3 + 80);
  uint64_t v17 = *(void *)(v3 + 88);
  type metadata accessor for CAHostingLayer();
  p_uint64_t aBlock = &aBlock;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(0.0, 1, *(SwiftUI::Time_optional *)(&p_aBlock - 1));
  *((unsigned char *)a1 + *(void *)((*v2 & *a1) + 0xE0)) = 0;
  if (*((unsigned char *)a1 + *(void *)((*v2 & *a1) + 0xE8)) == 1)
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v26 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    MEMORY[0x24C522110](v11, 0.0166666667);
    int v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v11, v33);
    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = (CFTimeInterval *)swift_allocObject();
    *((void *)v20 + 2) = v16;
    *((void *)v20 + 3) = v17;
    *((void *)v20 + 4) = v19;
    v20[5] = v15;
    uint64_t v38 = partial apply for closure #1 in closure #1 in CAHostingLayer.layoutSublayers();
    unint64_t v39 = v20;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v35 = 1107296256;
    uint64_t v36 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v37 = &block_descriptor_57;
    int v21 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v22 = v28;
    uint64_t v23 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    long long v24 = (void *)v26;
    MEMORY[0x24C5235E0](v14, v8, v22, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    v27(v14, v33);
    *((unsigned char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0xE8)) = 0;
  }
}

void closure #1 in closure #1 in CAHostingLayer.layoutSublayers()(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    CFTimeInterval v6 = CACurrentMediaTime() - a2;
    uint64_t v7 = (double *)((char *)v5 + *(void *)((*MEMORY[0x263F8EED0] & *v5) + 0x98));
    swift_beginAccess();
    *uint64_t v7 = v6 + *v7;
    objc_msgSend(v5, sel_setNeedsLayout);
  }
}

void @objc CAHostingLayer.layoutSublayers()(void *a1)
{
  id v1 = a1;
  CAHostingLayer.layoutSublayers()();
}

uint64_t CAHostingLayer.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0xF8);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t CAHostingLayer.rootView.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  specialized CAHostingLayer.rootView.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

uint64_t (*CAHostingLayer.rootView.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.rootView.modify;
}

uint64_t CAHostingLayer.rootView.modify(uint64_t a1, char a2)
{
  return CAHostingLayer.environmentOverride.modify(a1, a2, 1u);
}

uint64_t CAHostingLayer.environmentOverride.modify(uint64_t a1, char a2, unsigned __int16 a3)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return CAHostingLayer.environmentOverride.didset(a3, 1);
  }
  return result;
}

uint64_t key path setter for CAHostingLayer.environment : <A>CAHostingLayer<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return CAHostingLayer.environment.setter(v4);
}

uint64_t CAHostingLayer.environmentOverride.didset(unsigned __int16 a1, char a2)
{
  unsigned __int16 v5 = a1;
  uint64_t v3 = type metadata accessor for CAHostingLayer();
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v5, a2, v3, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t CAHostingLayer.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x100));
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t CAHostingLayer.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x100));
  swift_beginAccess();
  *uint64_t v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return CAHostingLayer.environmentOverride.didset(2u, 1);
}

uint64_t (*CAHostingLayer.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return CAHostingLayer.environmentOverride.modify;
}

double CAHostingLayer.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a1;
  char v23 = a2 & 1;
  uint64_t v24 = a3;
  char v25 = a4 & 1;
  uint64_t v12 = type metadata accessor for CAHostingLayer();
  double v13 = ViewRendererHost.sizeThatFits(_:)((uint64_t)&v22, v12, (uint64_t)&protocol witness table for CAHostingLayer<A>);
  uint64_t v15 = v14;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8E218], v8);
  swift_beginAccess();
  long long v21 = *(_OWORD *)AGGraphGetValue();
  EnvironmentValues.pixelLength.getter();
  double v17 = v16;
  v20[1] = v15;
  *(double *)&long long v21 = v13;
  specialized FloatingPoint.round(_:toMultipleOf:)(v11, v16);
  specialized FloatingPoint.round(_:toMultipleOf:)(v11, v17);
  double v18 = *(double *)&v21;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v18;
}

uint64_t CAHostingLayer.observeSizeThatFitsChanges(proposal:handler:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)((char *)v6 + *(void *)((*MEMORY[0x263F8EED0] & *v6) + 0x60));
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = a6;
  swift_beginAccess();
  memset(v18, 0, sizeof(v18));
  char v19 = 2;
  uint64_t v20 = partial apply for closure #1 in CAHostingLayer.observeSizeThatFitsChanges(proposal:handler:);
  uint64_t v21 = v14;
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *(void *)(v13 + 352);
  *(void *)(v13 + 352) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, a1, a2 & 1, a3, a4 & 1, isUniquelyReferenced_nonNull_native);
  *(void *)(v13 + 352) = v17;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t CAHostingLayer.stopObservingSizeThatFitsChanges(proposal:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)(*(void *)((char *)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x60)) + 352);
  swift_beginAccess();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
  if (v11)
  {
    unint64_t v12 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v9;
    uint64_t v16 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v14 = v16;
    }
    specialized _NativeDictionary._delete(at:)(v12, v14);
    *uint64_t v9 = v14;
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_endAccess();
}

unint64_t specialized ViewGraphGeometryObservers.stopObserving(proposal:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  unsigned __int16 v5 = v4;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2 & 1, a3, a4 & 1);
  if (v7)
  {
    unint64_t v8 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v4;
    uint64_t v11 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v11;
    }
    specialized _NativeDictionary._delete(at:)(v8, v10);
    uint64_t *v5 = v10;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CAHostingLayer.referenceInstant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x108);
  uint64_t v4 = type metadata accessor for ContinuousClock.Instant();
  unsigned __int16 v5 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t CAHostingLayer.eventContext.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  unsigned __int16 v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = &v17[-v7];
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x110);
  swift_beginAccess();
  outlined init with copy of CAHostingLayerEvent.Context?(v10, (uint64_t)v8);
  uint64_t v11 = type metadata accessor for CAHostingLayerEvent.Context();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) != 1) {
    return outlined init with take of CAHostingLayerEvent.Context((uint64_t)v8, a1);
  }
  outlined destroy of CAHostingLayerEvent.Context?((uint64_t)v8);
  uint64_t v13 = (char *)v1 + *(void *)((*v9 & *v1) + 0x108);
  uint64_t v14 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, v13, v14);
  uint64_t v15 = (unint64_t *)(a1 + *(int *)(v11 + 20));
  *uint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v15[1] = 1000;
  _OWORD v15[2] = MEMORY[0x263F8EE88];
  outlined init with copy of CAHostingLayerEvent.Context(a1, (uint64_t)v5);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v11);
  swift_beginAccess();
  outlined assign with take of CAHostingLayerEvent.Context?((uint64_t)v5, v10);
  return swift_endAccess();
}

uint64_t CAHostingLayer.eventContext.setter(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  unsigned __int16 v5 = (char *)&v9 - v4;
  outlined init with take of CAHostingLayerEvent.Context(a1, (uint64_t)&v9 - v4);
  uint64_t v6 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  uint64_t v7 = (uint64_t)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x110);
  swift_beginAccess();
  outlined assign with take of CAHostingLayerEvent.Context?((uint64_t)v5, v7);
  return swift_endAccess();
}

BOOL CAHostingLayer.send(event:)(uint64_t (**a1)(char *))
{
  uint64_t v2 = type metadata accessor for CAHostingLayerEvent.Context();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int16 v5 = *a1;
  CAHostingLayer.eventContext.getter((uint64_t)v4);
  uint64_t v6 = v5(v4);
  CAHostingLayer.eventContext.setter((uint64_t)v4);
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    v18[1] = v6;
    uint64_t v8 = v6 + 32;
    long long v19 = xmmword_2461B9DC0;
    do
    {
      outlined init with copy of CAHostingLayerEvent.Resolved(v8, (uint64_t)&v21);
      outlined init with copy of AnyTrackedValue((uint64_t)v22, (uint64_t)v20);
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      uint64_t DynamicType = swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      uint64_t v11 = v21;
      type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), MEMORY[0x263F8E0F8]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v19;
      *(void *)(inited + 32) = DynamicType;
      *(void *)(inited + 40) = v11;
      outlined init with copy of AnyTrackedValue((uint64_t)v22, inited + 48);
      unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      swift_setDeallocating();
      type metadata accessor for (EventID, EventType)();
      swift_arrayDestroy();
      swift_weakInit();
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      uint64_t v14 = static Update._lock;
      _MovableLockLock(static Update._lock);
      specialized static Update.begin()();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        uint64_t v9 = EventBindingManager.sendDownstream(_:)(v13);
        swift_release();
      }
      else
      {
        uint64_t v9 = MEMORY[0x263F8EE88];
      }
      static Update.end()();
      _MovableLockUnlock(v14);
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v9);
      outlined destroy of CAHostingLayerEvent.Resolved((uint64_t)&v21);
      v8 += 48;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v15 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  return v16 != 0;
}

void CAHostingLayer.didUpdate(phase:in:)(unsigned char *a1)
{
  int v1 = a1[1];
  if (v1 == 2 || v1 == 3 && !*a1) {
    EventBindingManager.reset(resetForwardedEventDispatchers:)(0);
  }
}

id CAHostingLayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAHostingLayer.init()()
{
}

void @objc CAHostingLayer.init()()
{
}

id CAHostingLayer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAHostingLayer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc CAHostingLayer.__ivar_destroyer(char *a1)
{
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = *MEMORY[0x263F8EED0] & *(void *)a1;
  swift_release();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)&a1[*(void *)((*v2 & *(void *)a1) + 0xA8)]);

  swift_release();
  (*(void (**)(char *))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(&a1[*(void *)((*v2 & *(void *)a1)
                                                                                                 + 0xF8)]);
  swift_release();
  swift_release();
  uint64_t v4 = &a1[*(void *)((*v2 & *(void *)a1) + 0x108)];
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t)&a1[*(void *)((*v2 & *(void *)a1) + 0x110)];

  return outlined destroy of CAHostingLayerEvent.Context?(v6);
}

uint64_t protocol witness for EventGraphHost.eventBindingManager.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.eventBindingManager.getter();

  return swift_retain();
}

uint64_t protocol witness for EventGraphHost.focusedResponder.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.focusedResponder.getter();

  return swift_retain();
}

void protocol witness for EventBindingManagerDelegate.didUpdate(phase:in:) in conformance CAHostingLayer<A>(unsigned char *a1)
{
  int v1 = a1[1];
  if (v1 == 2 || v1 == 3 && !*a1) {
    EventBindingManager.reset(resetForwardedEventDispatchers:)(0);
  }
}

uint64_t CAHostingLayer.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263F8EED0] & *(void *)v3;
  uint64_t result = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  if (result == a1)
  {
    uint64_t v10 = v3;
    uint64_t v11 = &protocol witness table for CAHostingLayer<A>;
    uint64_t v3 = *(void *)(a2 - 8);
    if (*(void *)(v3 + 64) == 16) {
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
  if (result == a1)
  {
LABEL_10:
    uint64_t v10 = v3;
    uint64_t v3 = *(void *)(a2 - 8);
    if (*(void *)(v3 + 64) == 8) {
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderDelegate);
  if (result == a1)
  {
LABEL_12:
    uint64_t v10 = v3;
    uint64_t v11 = &protocol witness table for CAHostingLayer<A>;
    uint64_t v3 = *(void *)(a2 - 8);
    if (*(void *)(v3 + 64) == 16) {
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = type metadata accessor for DisplayList.ViewRenderer();
  if (result == a1)
  {
LABEL_14:
    uint64_t v10 = *(void *)(v3 + *(void *)(v7 + 104));
    uint64_t v3 = *(void *)(a2 - 8);
    if (*(void *)(v3 + 64) != 8)
    {
      __break(1u);
      return result;
    }
LABEL_15:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v3 + 16))(a3, &v10, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a3, 0, 1, a2);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);

  return v9(a3, 1, 1, a2);
}

Swift::Void __swiftcall CAHostingLayer.updateRootView()()
{
  uint64_t v1 = *MEMORY[0x263F8EED0] & *v0;
  uint64_t v2 = *(void *)(v1 + 0x50);
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v5 = (char *)v12 - v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - v8;
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v11 = type metadata accessor for CAHostingLayer();
  CAHostingLayer.rootView.getter((uint64_t)v5);
  static ViewRendererHost.makeRootView<A>(_:)((uint64_t)v5, v11, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12[0] = v10;
  v12[1] = &protocol witness table for HitTestBindingModifier;
  swift_getWitnessTable();
  ViewGraph.setRootView<A>(_:)((uint64_t)v9, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Void __swiftcall CAHostingLayer.updateEnvironment()()
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CAHostingLayer.environment.getter(&v20);
  objc_msgSend(v0, sel_contentsScale);
  double v2 = v1;
  uint64_t v3 = (uint64_t)v20;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v20, v2);
  swift_release();
  uint64_t v4 = v21;
  if (v21)
  {
    uint64_t v5 = v20;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, (uint64_t)v5);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v5 = v20;
  }
  CAHostingLayer.environmentOverride.getter(&v19);
  uint64_t v6 = v19;
  if (v19 != 1)
  {
    if (v5)
    {
      if (v19)
      {
        if (v5[3])
        {
          type metadata accessor for TypedElement<EmptyKey>();
          swift_allocObject();
          swift_retain();
          swift_retain();
          v7.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v6, (uint64_t)v5).value;
        }
        else
        {
          uint64_t v9 = v5[4];
          uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*v5 + 216);
          swift_retain();
          swift_retain();
          uint64_t v11 = swift_retain();
          v7.value = v10(v11, v9);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_retain();
        v7.value = (Swift::UInt)v5;
      }
      uint64_t v8 = v5[8];
    }
    else
    {
      if (!v19)
      {
LABEL_18:
        outlined consume of EnvironmentValues?(v6);
        goto LABEL_19;
      }
      swift_retain();
      uint64_t v8 = 0;
      v7.value = v6;
    }
    if (v8 != *(void *)(v7.value + 64) && v4)
    {
      swift_retain();
      PropertyList.Tracker.invalidateAllValues(from:to:)((uint64_t)v5, v7.value);
      swift_release();
    }
    swift_release();
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v12 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x60));
  swift_beginAccess();
  unint64_t v13 = (void *)v12[2];
  uint64_t v14 = (void *)v12[3];
  uint64_t v15 = (void *)v12[4];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain();
  id v16 = v13;
  id v17 = v14;
  id v18 = v15;
  AGGraphSetValue();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
}

Swift::Void __swiftcall CAHostingLayer.updateSize()()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x60));
  objc_msgSend(v0, sel_bounds);
  if (AGGraphSetValue())
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

Swift::Void __swiftcall CAHostingLayer.updateSafeArea()()
{
  uint64_t v1 = (double *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xB0));
  double v2 = *v1;
  double v3 = v1[1];
  double v4 = v1[2];
  double v5 = v1[3];
  LOBYTE(v1) = *((unsigned char *)v1 + 32);
  *(double *)uint64_t v11 = v2;
  *(double *)&v11[1] = v3;
  *(double *)&void v11[2] = v4;
  *(double *)&void v11[3] = v5;
  char v12 = (char)v1;
  outlined init with take of EdgeInsets?((uint64_t)v11, (uint64_t)v13);
  if (v14) {
    double v6 = 0.0;
  }
  else {
    double v6 = v2;
  }
  if (v14) {
    double v7 = 0.0;
  }
  else {
    double v7 = v3;
  }
  if (v14) {
    double v8 = 0.0;
  }
  else {
    double v8 = v4;
  }
  if (v14) {
    double v9 = 0.0;
  }
  else {
    double v9 = v5;
  }
  type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  *(void *)(v10 + 32) = 1;
  *(double *)(v10 + 40) = v6;
  *(double *)(v10 + 48) = v7;
  *(double *)(v10 + 56) = v8;
  *(double *)(v10 + 64) = v9;
  ViewGraph.setSafeAreaInsets(_:)((Swift::OpaquePointer)v10);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CAHostingLayer.requestUpdate(after:)(Swift::Double after)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *(void *)v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (objc_msgSend(self, sel_isMainThread))
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v12 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #2 in CAHostingLayer.requestUpdate(after:)(v1, after);
    _MovableLockUnlock(v12);
  }
  else
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t v13 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = *(void *)(v3 + 80);
    *(void *)(v15 + 24) = *(void *)(v3 + 88);
    *(void *)(v15 + 32) = v14;
    *(Swift::Double *)(v15 + 40) = after;
    aBlock[4] = partial apply for closure #1 in CAHostingLayer.requestUpdate(after:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_4;
    id v16 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C523600](0, v11, v7, v16);
    _Block_release(v16);

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void closure #1 in CAHostingLayer.requestUpdate(after:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    CAHostingLayer.requestUpdate(after:)(a2);
  }
}

void closure #2 in CAHostingLayer.requestUpdate(after:)(char *a1, double a2)
{
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *MEMORY[0x263F8EED0] & *(void *)a1;
  if (a2 >= 0.25)
  {
    uint64_t v6 = (double *)&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x98)];
    swift_beginAccess();
    double v7 = *v6 + a2;
    uint64_t v8 = (uint64_t *)&a1[*(void *)((*v4 & *(void *)a1) + 0xD0)];
    if (*((unsigned char *)v8 + 8) == 1)
    {
      if (one-time initialization token for infinity != -1)
      {
        double v20 = *v6 + a2;
        swift_once();
        double v7 = v20;
      }
      uint64_t v8 = &static Time.infinity;
    }
    if (v7 < *(double *)v8)
    {
      objc_msgSend(*(id *)&a1[*(void *)((*v4 & *(void *)a1) + 0xD8)], sel_invalidate);
      uint64_t v9 = (double *)&a1[*(void *)((*v4 & *(void *)a1) + 0x98)];
      swift_beginAccess();
      uint64_t v10 = (double *)&a1[*(void *)((*v4 & *(void *)a1) + 0xD0)];
      *uint64_t v10 = *v9 + a2;
      *((unsigned char *)v10 + 8) = 0;
      uint64_t v11 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v12 = (void *)swift_allocObject();
      void v12[2] = *(void *)(v5 + 80);
      v12[3] = *(void *)(v5 + 88);
      v12[4] = v11;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = partial apply for closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:);
      *(void *)(v13 + 24) = v12;
      aBlock[4] = partial apply for closure #1 in withDelay(_:do:);
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _NSCustomTextRenderingDisplayLinkInfo) -> ();
      aBlock[3] = &block_descriptor_50;
      uint64_t v14 = _Block_copy(aBlock);
      uint64_t v15 = self;
      swift_retain();
      swift_retain();
      id v16 = objc_msgSend(v15, sel_timerWithTimeInterval_repeats_block_, 0, v14, a2);
      _Block_release(v14);
      swift_release();
      id v17 = objc_msgSend(self, sel_mainRunLoop);
      objc_msgSend(v17, sel_addTimer_forMode_, v16, *MEMORY[0x263EFF588]);
      swift_release();
      swift_release();

      uint64_t v18 = *(void *)((*v4 & *(void *)a1) + 0xD8);
      uint64_t v19 = *(void **)&a1[v18];
      *(void *)&a1[v18] = v16;
    }
  }
  else if (a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0xE0)])
  {
    a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0xE8)] = 1;
  }
  else
  {
    objc_msgSend(a1, sel_setNeedsLayout);
  }
}

void closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  double v2 = (void *)MEMORY[0x24C527E00](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    uint64_t v5 = *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0xD8);
    uint64_t v6 = *(void **)((char *)v2 + v5);
    *(void *)((char *)v2 + v5) = 0;

    double v7 = (char *)v3 + *(void *)((*v4 & *v3) + 0xD0);
    *(void *)double v7 = 0;
    v7[8] = 1;
    objc_msgSend(v3, sel_setNeedsLayout);
  }
}

uint64_t CAHostingLayer.preferenceValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263F8EED0] & *v3;
  void v8[2] = *(void *)(v4 + 0x50);
  int64_t v8[3] = a2;
  v8[4] = *(void *)(v4 + 88);
  _OWORD v8[5] = a3;
  v8[6] = a1;
  uint64_t v5 = type metadata accessor for CAHostingLayer();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return ViewRendererHost.updateViewGraph<A>(body:)((void (*)(void))partial apply for closure #1 in CAHostingLayer.preferenceValue<A>(_:), (uint64_t)v8, v5, AssociatedTypeWitness, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t CAHostingLayer.convertAnchor<A>(_:)(uint64_t a1)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)Value;
  long long v3 = *(_OWORD *)(Value + 24);
  long long v6 = *(_OWORD *)(Value + 8);
  long long v7 = v3;
  swift_retain();
  Anchor.convert(to:)(&v5, a1);

  return swift_release();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.viewGraph.getter();

  return swift_retain();
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance CAHostingLayer<A>(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.currentTimestamp.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance CAHostingLayer<A>(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.propertiesNeedingUpdate.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance CAHostingLayer<A>(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.renderingPhase.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance CAHostingLayer<A>(void *a1))()
{
  double v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.externalUpdateCount.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t CAHostingLayer.renderingRootView.getter()
{
  specialized CAHostingLayer.renderingRootView.getter();

  return swift_unknownObjectRetain();
}

id CAHostingLayer.updateRenderContext(_:)(void *a1)
{
  id result = objc_msgSend(v1, sel_contentsScale);
  *a1 = v4;
  return result;
}

uint64_t protocol witness for ViewGraphRenderDelegate.renderingRootView.getter in conformance CAHostingLayer<A>()
{
  specialized CAHostingLayer.renderingRootView.getter();

  return swift_unknownObjectRetain();
}

unint64_t CAHostingLayer.attributeCountInfo.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = result;
  return result;
}

uint64_t CAHostingLayer.viewCacheIsEmpty.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  closure #1 in CAHostingLayer.viewCacheIsEmpty.getter(v0, &v3);
  _MovableLockUnlock(v1);
  return v3;
}

void *closure #1 in CAHostingLayer.viewCacheIsEmpty.getter@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)((char *)result + *(void *)((*MEMORY[0x263F8EED0] & *result) + 0x68));
  if (*(void *)(v3 + 64))
  {
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t ObjectType = swift_getObjectType();
    long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
    swift_unknownObjectRetain();
    char v7 = v6(ObjectType, v4);
    unint64_t result = (void *)swift_unknownObjectRelease();
  }
  else
  {
    char v7 = 1;
  }
  *a2 = v7 & 1;
  return result;
}

Swift::Void __swiftcall CAHostingLayer.setTestSize(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  objc_msgSend(v1, sel_bounds);
  if (v6 != width || v5 != height)
  {
    *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 1;
    id v8 = objc_msgSend(v1, sel_superlayer);
    if (v8)
    {
      uint64_t v9 = v8;
      objc_msgSend(v8, sel_bounds);
      CGFloat x = v20.origin.x;
      CGFloat y = v20.origin.y;
      CGFloat v12 = v20.size.width;
      CGFloat v13 = v20.size.height;
      double MinX = CGRectGetMinX(v20);
      v21.origin.CGFloat x = x;
      v21.origin.CGFloat y = y;
      v21.size.double width = v12;
      v21.size.double height = v13;
      double v15 = MinX + (CGRectGetWidth(v21) - width) * 0.5;
      v22.origin.CGFloat x = x;
      v22.origin.CGFloat y = y;
      v22.size.double width = v12;
      v22.size.double height = v13;
      double MinY = CGRectGetMinY(v22);
      v23.origin.CGFloat x = x;
      v23.origin.CGFloat y = y;
      v23.size.double width = v12;
      v23.size.double height = v13;
      double v17 = CGRectGetHeight(v23);

      double v18 = MinY + (v17 - height) * 0.5;
    }
    else
    {
      double v18 = 0.0;
      double v15 = 0.0;
    }
    v19.receiver = v1;
    v19.super_class = (Class)type metadata accessor for CAHostingLayer();
    objc_msgSendSuper2(&v19, sel_setFrame_, v15, v18, width, height);
    *((unsigned char *)v1 + *(void *)((*v4 & *v1) + 0xC8)) = 0;
  }
}

double CAHostingLayer.testSize.getter()
{
  objc_msgSend(v0, sel_frame);
  return v1;
}

uint64_t CAHostingLayer.setTestSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  *(double *)double v6 = a1;
  *(double *)&v6[1] = a2;
  *(double *)&id v6[2] = a3;
  *(double *)&v6[3] = a4;
  char v7 = 0;
  outlined init with take of EdgeInsets?((uint64_t)v6, (uint64_t)v4 + *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0xB0));
  return CAHostingLayer.environmentOverride.didset(0x10u, 0);
}

Swift::Void __swiftcall CAHostingLayer._renderForTest(interval:)(Swift::Double interval)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  type metadata accessor for CAHostingLayer();
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  uint64_t v5 = *(void *)((*v4 & *v1) + 0xC0);
  char v16 = *((unsigned char *)v1 + v5);
  *((unsigned char *)v1 + v5) = 0;
  double v6 = self;
  char v7 = (void *)MEMORY[0x263F8EE78];
  do
  {
    while (1)
    {
      if (one-time initialization token for observerActions != -1) {
        swift_once();
      }
      swift_beginAccess();
      rawuint64_t Value = (char *)observerActions._rawValue;
      uint64_t v12 = *((void *)observerActions._rawValue + 2);
      if (!v12) {
        break;
      }
      observerActions._rawuint64_t Value = v7;
      specialized static Update.begin()();
      CGFloat v13 = rawValue + 40;
      do
      {
        uint64_t v14 = (void (*)(uint64_t))*((void *)v13 - 1);
        uint64_t v15 = swift_retain();
        v14(v15);
        swift_release();
        v13 += 16;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      static Update.end()();
    }
    uint64_t v17 = 0;
    char v18 = 1;
    id v8 = &v17;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(0.0, 1, *(SwiftUI::Time_optional *)&v10);
    objc_msgSend(v6, sel_flush);
    uint64_t v9 = (_WORD *)((char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x78));
    swift_beginAccess();
  }
  while (*v9);
  *((unsigned char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0xC0)) = v16;
}

Swift::Bool __swiftcall CAHostingLayer._renderAsyncForTest(interval:)(Swift::Double interval)
{
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  type metadata accessor for CAHostingLayer();
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  uint64_t v4 = *(void *)((*v3 & *v1) + 0xC0);
  char v17 = *((unsigned char *)v1 + v4);
  *((unsigned char *)v1 + v4) = 0;
  uint64_t v18 = *(void *)((*v3 & *v1) + 0x60);
  BOOL v5 = 1;
  double v6 = (void *)MEMORY[0x263F8EE78];
  objc_super v19 = v1;
  while (1)
  {
    BOOL v20 = v5;
    while (1)
    {
      if (one-time initialization token for observerActions != -1) {
        swift_once();
      }
      swift_beginAccess();
      rawuint64_t Value = (char *)observerActions._rawValue;
      uint64_t v9 = *((void *)observerActions._rawValue + 2);
      if (!v9) {
        break;
      }
      observerActions._rawuint64_t Value = v6;
      specialized static Update.begin()();
      uint64_t v10 = rawValue + 40;
      do
      {
        uint64_t v11 = (void (*)(uint64_t))*((void *)v10 - 1);
        uint64_t v12 = swift_retain();
        v11(v12);
        swift_release();
        v10 += 16;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      static Update.end()();
    }
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v13 = static Update._lock;
    _MovableLockLock(static Update._lock);
    closure #1 in CAHostingLayer._renderAsyncForTest(interval:)(&v21);
    _MovableLockUnlock(v13);
    if (!v21)
    {
      BOOL v5 = 0;
LABEL_18:
      *((unsigned char *)v19 + *(void *)((*MEMORY[0x263F8EED0] & *v19) + 0xC0)) = v17;
      LOBYTE(v15) = v5;
      return v15;
    }
    objc_msgSend(self, sel_flush);
    if (v20) {
      break;
    }
    BOOL v5 = 0;
LABEL_3:
    char v7 = (_WORD *)((char *)v19 + *(void *)((*MEMORY[0x263F8EED0] & *v19) + 0x78));
    swift_beginAccess();
    if (!*v7) {
      goto LABEL_18;
    }
  }
  uint64_t v14 = *(void *)((char *)v19 + v18);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    BOOL v5 = AGGraphGetCounter() == *(void *)(v14 + 368);
    goto LABEL_3;
  }
  __break(1u);
  return v15;
}

uint64_t closure #1 in CAHostingLayer._renderAsyncForTest(interval:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v4 = 0;
  char v5 = 1;
  type metadata accessor for CAHostingLayer();
  uint64_t v2 = &v4;
  SwiftUI::Time_optional v7 = ViewRendererHost.renderAsync(interval:targetTimestamp:)(0.0, *(SwiftUI::Time_optional *)(&v2 - 1));
  *a1 = (v6 & 1) == 0;
  LOBYTE(result) = v7.is_nil;
  return result;
}

void CAHostingLayer.forEachDescendantHost(body:)(void (*a1)(void *, uint64_t), uint64_t a2)
{
  specialized CALayer.forEachDescendant(_:)(v2, a1, a2);
}

uint64_t (*protocol witness for TestHost.environmentOverride.modify in conformance CAHostingLayer<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.environmentOverride.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for TestHost.isHiddenForReuse.modify in conformance CAHostingLayer<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.isHiddenForReuse.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for TestHost.accessibilityEnabled.modify in conformance CAHostingLayer<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CAHostingLayer.accessibilityEnabled.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

unint64_t protocol witness for TestHost.attributeCountInfo.getter in conformance CAHostingLayer<A>@<X0>(unint64_t *a1@<X8>)
{
  return CAHostingLayer.attributeCountInfo.getter(a1);
}

uint64_t specialized CAHostingLayer.viewGraph.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x60));
}

uint64_t specialized CAHostingLayer.eventBindingManager.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x70));
}

uint64_t specialized CAHostingLayer.focusedResponder.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0));
}

void *specialized ViewGraph.__allocating_init<A>(rootView:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  v15[0] = static ViewGraph.Outputs.defaults;
  SwiftUI::Time_optional v7 = (void *)ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)(a3, v15, a3, a4);
  swift_retain();
  ViewGraph.setRootView<A>(_:)(a1, a3);
  swift_beginAccess();
  id v8 = (void *)v7[2];
  uint64_t v9 = (void *)v7[3];
  uint64_t v10 = (void *)v7[4];
  swift_retain();
  swift_retain();
  id v11 = v8;
  id v12 = v9;
  id v13 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
  swift_release();
  return v7;
}

id specialized CAHostingLayer.init(rootView:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = a1;
  char v5 = (void *)MEMORY[0x263F8EED0];
  uint64_t v6 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v43 = v6;
  uint64_t v40 = *(void *)(v6 + 80);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  MEMORY[0x270FA5388](v7);
  long long v41 = (char *)&v39 - v8;
  uint64_t v39 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v9 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  id v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2[1];
  uint64_t v42 = *a2;
  uint64_t v13 = *(void *)(v6 + 104);
  uint64_t v14 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 48) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v15 + 56) = 0;
  *(void *)(v15 + 64) = 0;
  *(void *)(v15 + 72) = 0;
  *(unsigned char *)(v15 + 80) = 1;
  *(void *)((char *)v3 + v13) = v15;
  *(void *)(v15 + 16) = v14;
  uint64_t v16 = *(void *)((*v5 & *v3) + 0x70);
  type metadata accessor for EventBindingManager();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v17 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v17 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v17 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v17 + 64) = 0;
  *(void *)(v17 + 72) = 0;
  *(void *)((char *)v3 + v16) = v17;
  uint64_t v18 = v5;
  uint64_t v19 = *(void *)((*v5 & *v3) + 0x78);
  uint64_t v20 = one-time initialization token for all;
  BOOL v21 = v3;
  if (v20 != -1) {
    swift_once();
  }
  *(_WORD *)((char *)v21 + v19) = static ViewRendererHostProperties.all;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0x80)) = 0;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0x88)) = 0;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0x90)) = 0;
  *(void *)((char *)v21 + *(void *)((*v5 & *v21) + 0x98)) = 0;
  *(void *)((char *)v21 + *(void *)((*v5 & *v21) + 0xA0)) = 0;
  *(_OWORD *)((char *)v21 + *(void *)((*v5 & *v21) + 0xA8)) = xmmword_24619B520;
  CGRect v22 = (char *)v21 + *(void *)((*v5 & *v21) + 0xB0);
  *(_OWORD *)CGRect v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[32] = 1;
  *(void *)((char *)v21 + *(void *)((*v5 & *v21) + 0xB8)) = 0;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0xC0)) = 1;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0xC8)) = 1;
  CGRect v23 = (char *)v21 + *(void *)((*v5 & *v21) + 0xD0);
  *(void *)CGRect v23 = 0;
  v23[8] = 1;
  *(void *)((char *)v21 + *(void *)((*v5 & *v21) + 0xD8)) = 0;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0xE0)) = 0;
  *((unsigned char *)v21 + *(void *)((*v5 & *v21) + 0xE8)) = 0;
  *(void *)((char *)v21 + *(void *)((*v5 & *v21) + 0xF0)) = 0;
  uint64_t v24 = (char *)v21 + *(void *)((*v5 & *v21) + 0x110);
  uint64_t v25 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (char *)v21 + *(void *)((*v5 & *v21) + 0xF8);
  uint64_t v27 = v40;
  uint64_t v28 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v26, v44, v40);
  uint64_t v29 = (void *)((char *)v21 + *(void *)((*v18 & *v21) + 0x100));
  uint64_t v30 = v42;
  *uint64_t v29 = v42;
  v29[1] = v12;
  swift_retain();
  swift_retain();
  static ContinuousClock.Instant.now.getter();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))((char *)v21 + *(void *)((*v18 & *v21) + 0x108), v11, v39);
  specialized static Update.begin()();
  uint64_t v39 = type metadata accessor for ViewGraph();
  uint64_t v31 = *(void *)(v43 + 88);
  uint64_t v32 = (objc_class *)type metadata accessor for CAHostingLayer();
  uint64_t v33 = (uint64_t)v41;
  static ViewRendererHost.makeRootView<A>(_:)(v28, (uint64_t)v32, v27);
  v50[0] = v30;
  v50[1] = v12;
  uint64_t v48 = v31;
  uint64_t v49 = &protocol witness table for HitTestBindingModifier;
  uint64_t v34 = v46;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v36 = specialized ViewGraph.__allocating_init<A>(rootView:environment:)(v33, (uint64_t)v50, v34, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v33, v34);
  *(void *)((char *)v21 + *(void *)((*v18 & *v21) + 0x60)) = v36;

  v47.receiver = v21;
  v47.super_class = v32;
  id v37 = objc_msgSendSuper2(&v47, sel_init);
  CAHostingLayer.postInit()();
  static Update.end()();

  return v37;
}

uint64_t type metadata accessor for CAHostingLayer()
{
  return __swift_instantiateGenericMetadata();
}

void specialized CAHostingLayer.init(coder:)()
{
  double v1 = (void *)MEMORY[0x263F8EED0];
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x68);
  uint64_t v3 = type metadata accessor for CAHostingLayerPlatformDefinition() | 2;
  type metadata accessor for DisplayList.ViewRenderer();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(unsigned char *)(v4 + 80) = 1;
  *(void *)((char *)v0 + v2) = v4;
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = *(void *)((*v1 & *v0) + 0x70);
  type metadata accessor for EventBindingManager();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v6 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v6 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)((char *)v0 + v5) = v6;
  uint64_t v7 = *(void *)((*v1 & *v0) + 0x78);
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  *(_WORD *)((char *)v0 + v7) = static ViewRendererHostProperties.all;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x80)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x88)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x90)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x98)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0xA0)) = 0;
  *(_OWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0xA8)) = xmmword_24619B520;
  uint64_t v8 = (char *)v0 + *(void *)((*v1 & *v0) + 0xB0);
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0xB8)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0xC0)) = 1;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0xC8)) = 1;
  uint64_t v9 = (char *)v0 + *(void *)((*v1 & *v0) + 0xD0);
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0xD8)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0xE0)) = 0;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0xE8)) = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0xF0)) = 0;
  uint64_t v10 = (char *)v0 + *(void *)((*v1 & *v0) + 0x110);
  uint64_t v11 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CAHostingLayer.renderingRootView.getter()
{
  return v0;
}

uint64_t specialized CAHostingLayer.rootView.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0xF8);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  return CAHostingLayer.environmentOverride.didset(1u, 1);
}

uint64_t sub_245B31780()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAHostingLayer.observeSizeThatFitsChanges(proposal:handler:)(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double, double))(v2 + 16))(*a2, a2[1]);
}

uint64_t outlined init with copy of CAHostingLayerEvent.Resolved(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of CAHostingLayerEvent.Resolved(uint64_t a1)
{
  return a1;
}

void specialized CAHostingLayer.init()()
{
}

void type metadata accessor for TypedElement<EmptyKey>()
{
  if (!lazy cache variable for type metadata for TypedElement<EmptyKey>)
  {
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>);
    }
  }
}

uint64_t sub_245B31924()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in CAHostingLayer.requestUpdate(after:)()
{
  closure #1 in CAHostingLayer.requestUpdate(after:)(*(void *)(v0 + 32), *(Swift::Double *)(v0 + 40));
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

void specialized CALayer.forEachDescendant(_:)(void *a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    id v9 = a1;
    a2(v8, v7);
  }
  id v10 = objc_msgSend(a1, sel_sublayers);
  if (v10)
  {
    uint64_t v11 = v10;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v12 >> 62)) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v12 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62))
    {
LABEL_11:
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v13) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_20;
  }
LABEL_12:
  if (v13 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v15 = (id)MEMORY[0x24C523D60](i, v12);
    }
    else {
      id v15 = *(id *)(v12 + 8 * i + 32);
    }
    uint64_t v16 = v15;
    specialized CALayer.forEachDescendant(_:)(v15, a2, a3);
  }
LABEL_20:

  swift_bridgeObjectRelease();
}

uint64_t sub_245B31B54@<X0>(_WORD *a1@<X8>)
{
  return CAHostingLayer.propertiesNeedingUpdate.getter(a1);
}

uint64_t sub_245B31B78(__int16 *a1)
{
  __int16 v2 = *a1;
  return CAHostingLayer.propertiesNeedingUpdate.setter(&v2);
}

uint64_t sub_245B31BB0()
{
  return 16;
}

__n128 sub_245B31BBC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245B31BC8@<X0>(unsigned char *a1@<X8>)
{
  return CAHostingLayer.renderingPhase.getter(a1);
}

uint64_t sub_245B31BEC(char *a1)
{
  char v2 = *a1;
  return CAHostingLayer.renderingPhase.setter(&v2);
}

uint64_t sub_245B31C24()
{
  return 16;
}

__n128 sub_245B31C30(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245B31C3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAHostingLayer.isHiddenForReuse.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_245B31C6C(char *a1)
{
  return CAHostingLayer.isHiddenForReuse.setter(*a1);
}

uint64_t sub_245B31C94()
{
  return 16;
}

__n128 sub_245B31CA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245B31CAC@<D0>(void *a1@<X8>)
{
  return CAHostingLayer.currentTimestamp.getter(a1);
}

uint64_t sub_245B31CD0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return CAHostingLayer.currentTimestamp.setter(&v2);
}

uint64_t sub_245B31D08()
{
  return 16;
}

__n128 sub_245B31D14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245B31D20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAHostingLayer.externalUpdateCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245B31D4C(uint64_t *a1)
{
  return CAHostingLayer.externalUpdateCount.setter(*a1);
}

uint64_t sub_245B31D74()
{
  return 16;
}

__n128 sub_245B31D80(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245B31D8C@<D0>(_OWORD *a1@<X8>)
{
  CAHostingLayer.environmentOverride.getter((uint64_t *)&v3);
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_245B31DC8(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  outlined copy of EnvironmentValues?(v3[0]);
  return CAHostingLayer.environmentOverride.setter(v3);
}

uint64_t sub_245B31E0C()
{
  return 16;
}

__n128 sub_245B31E18(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245B31E24@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAHostingLayer.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_245B31E54(char *a1)
{
  return CAHostingLayer.accessibilityEnabled.setter(*a1);
}

uint64_t sub_245B31E7C()
{
  return 16;
}

__n128 sub_245B31E88(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245B31E94@<X0>(uint64_t a1@<X8>)
{
  return CAHostingLayer.rootView.getter(a1);
}

uint64_t sub_245B31EB8(uint64_t a1)
{
  return specialized CAHostingLayer.rootView.setter(a1);
}

uint64_t sub_245B31EDC()
{
  return 16;
}

__n128 sub_245B31EE8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_245B31EF4@<D0>(_OWORD *a1@<X8>)
{
  CAHostingLayer.environment.getter(&v3);
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_245B31F34()
{
  return 16;
}

__n128 sub_245B31F40(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for CAHostingLayer()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ContinuousClock.Instant();
    if (v1 <= 0x3F)
    {
      type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(319, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for CAHostingLayer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAHostingLayer);
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAHostingLayer.propertiesNeedingUpdate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAHostingLayer.renderingPhase.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAHostingLayer.isHiddenForReuse.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAHostingLayer.currentTimestamp.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAHostingLayer.externalUpdateCount.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAHostingLayer.environmentOverride.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAHostingLayer.accessibilityEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAHostingLayer.__allocating_init(rootView:environment:)()
{
  return (*(uint64_t (**)(void))(v0 + 664))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of CAHostingLayer.rootView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CAHostingLayer.environment.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CAHostingLayer.sizeThatFits(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CAHostingLayer.observeSizeThatFitsChanges(proposal:handler:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of CAHostingLayer.stopObservingSizeThatFitsChanges(proposal:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CAHostingLayer.send(event:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAHostingLayer.didBind(to:id:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of CAHostingLayer.didUpdate(phase:in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x318))();
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of CAHostingLayerEvent.Context?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_245B32A1C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)()
{
  closure #1 in closure #2 in CAHostingLayer.requestUpdate(after:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in withDelay(_:do:)(uint64_t a1)
{
  return closure #1 in withDelay(_:do:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t outlined init with take of CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CAHostingLayerEvent.Context?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAHostingLayerEvent.Context?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>(0, &lazy cache variable for type metadata for CAHostingLayerEvent.Context?, (uint64_t (*)(uint64_t))type metadata accessor for CAHostingLayerEvent.Context, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CAHostingLayerEvent.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAHostingLayerEvent.Context();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_245B32C58()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in CAHostingLayer.layoutSublayers()()
{
  closure #1 in closure #1 in CAHostingLayer.layoutSublayers()(*(void *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t static CodableByProxy<>.unwrap(codingProxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v5(AssociatedTypeWitness, a4);
}

uint64_t CodableRawRepresentable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t JSONCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t (*ProxyCodable.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProxyCodable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t ProxyCodable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t ProxyCodable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t ProxyCodable.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v8 = &v11[-v7 - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v4, v3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ProxyCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v25 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v20 - v10;
  uint64_t v28 = a3;
  uint64_t v11 = type metadata accessor for ProxyCodable();
  uint64_t v23 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v20 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    BOOL v21 = v13;
    uint64_t v22 = v11;
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    uint64_t v15 = AssociatedTypeWitness;
    uint64_t v14 = v28;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v16 = v9;
    uint64_t v17 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 40))(v30, a2, v14);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v15);
    uint64_t v18 = v21;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v21, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v18, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ProxyCodable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProxyCodable<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProxyCodable.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProxyCodable<A>(void *a1, uint64_t a2)
{
  return ProxyCodable.encode(to:)(a1, a2);
}

uint64_t static ProxyCodable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ProxyCodable<A>()
{
  return static ProxyCodable<>.== infix(_:_:)();
}

uint64_t ProxyCodable<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.hashValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> ProxyCodable<A>()
{
  return ProxyCodable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))ProxyCodable<>.hash(into:));
}

uint64_t Optional<A>.codingProxy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  return CodableOptional.init(_:)((uint64_t)v6, *(void *)(a1 + 16), a2);
}

uint64_t CodableOptional.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(a3, a1, v5);
}

uint64_t protocol witness for CodableByProxy.codingProxy.getter in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.codingProxy.getter(a1, a2);
}

uint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CodableOptional();
  uint64_t WitnessTable = swift_getWitnessTable();
  return static CodableByProxy<>.unwrap(codingProxy:)(a1, a2, a3, WitnessTable);
}

uint64_t RawRepresentable<>.codingProxy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, a1);
}

uint64_t RawRepresentableProxy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, void *, double))type metadata accessor for RawRepresentableProxy, a6);
}

uint64_t type metadata accessor for RawRepresentableProxy()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type Error and conformance Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error and conformance Error;
  if (!lazy protocol witness table cache variable for type Error and conformance Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error and conformance Error);
  }
  return result;
}

uint64_t RawRepresentableProxy.encode(to:)(void *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  unsigned char v8[24];
  uint64_t v9;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v5 = &v8[-v4 - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  dispatch thunk of RawRepresentable.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RawRepresentableProxy<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RawRepresentableProxy<A>(void *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

id protocol witness for CodableByProxy.codingProxy.getter in conformance NSAttributedStringKey@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

id protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance NSAttributedStringKey@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t Array<A>.codingProxy.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[7] = a1;
  v9[4] = a2;
  v9[5] = a3;
  void v9[2] = a3;
  void v9[3] = swift_getKeyPath();
  uint64_t v3 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in Array<A>.codingProxy.getter, (uint64_t)v9, v3, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
  swift_release();
  return v7;
}

uint64_t sub_245B3389C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 32))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_245B338DC()
{
  return 16;
}

__n128 sub_245B338E8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for implicit closure #1 in Array<A>.codingProxy.getter()
{
  return swift_getAtKeyPath();
}

uint64_t static Array<A>.unwrap(codingProxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v8[5] = a1;
  void v8[2] = a2;
  int64_t v8[3] = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Array<A>.unwrap(codingProxy:), (uint64_t)v8, v4, a2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
}

uint64_t partial apply for closure #1 in static Array<A>.unwrap(codingProxy:)()
{
  return partial apply for closure #1 in static Array<A>.unwrap(codingProxy:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 40))();
}

uint64_t protocol witness for CodableByProxy.codingProxy.getter in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Array<A>.codingProxy.getter(*v3, *(void *)(a1 + 16), *(void *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance <A> [A]@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = static Array<A>.unwrap(codingProxy:)(*a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t (*JSONCodable.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t JSONCodable.encode(to:)(void *a1)
{
  v12[5] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = self;
  v12[0] = 0;
  id v4 = objc_msgSend(v3, sel_dataWithJSONObject_options_error_, _bridgeAnythingToObjectiveC<A>(_:)(), 0, v12);
  swift_unknownObjectRelease();
  id v5 = v12[0];
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    static String.Encoding.utf8.getter();
    uint64_t result = String.init(data:encoding:)();
    if (v10)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Encoder.singleValueContainer()();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)v12[3]);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      outlined consume of Data._Representation(v6, v8);
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v11 = v5;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  return result;
}

uint64_t JSONCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a3;
  v54[5] = *MEMORY[0x263EF8340];
  uint64_t v42 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)&v38 - v5;
  uint64_t v45 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v6);
  objc_super v47 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v49 = *(void **)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONCodable();
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v14 = v50;
  dispatch thunk of Decoder.singleValueContainer()();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v40 = v13;
  uint64_t v41 = v11;
  uint64_t v50 = a2;
  __swift_project_boxed_opaque_existential_1(v54, v54[3]);
  uint64_t v16 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v18 = v17;
  uint64_t v39 = 0;
  static String.Encoding.utf8.getter();
  uint64_t v38 = v16;
  uint64_t v19 = String.data(using:allowLossyConversion:)();
  unint64_t v21 = v20;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v49[1])(v10, v8);
  if (v21 >> 60 == 15)
  {
    __break(1u);
    return result;
  }
  uint64_t v22 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v52[0] = 0;
  id v24 = objc_msgSend(v22, sel_JSONObjectWithData_options_error_, isa, 0, v52);

  id v25 = v52[0];
  uint64_t v26 = v50;
  if (!v24)
  {
    uint64_t v34 = v25;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(v19, v21);
    goto LABEL_3;
  }
  uint64_t v49 = a1;
  unint64_t v27 = v21;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v53, (uint64_t)v52);
  uint64_t v28 = v46;
  int v29 = swift_dynamicCast();
  uint64_t v30 = v45;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v28, v29 ^ 1u, 1, v26);
  outlined init with copy of Any((uint64_t)v53, (uint64_t)v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v26) != 1)
  {
    outlined consume of Data?(v19, v21);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v36 = v47;
    v35(v47, v28, v26);
    uint64_t v33 = v48;
LABEL_14:
    id v37 = v40;
    v35(v40, v36, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v33, v37, v41);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  uint64_t v31 = v47;
  uint64_t v32 = v39;
  closure #1 in implicit closure #1 in JSONCodable.init(from:)(v51, v38, v18);
  uint64_t v33 = v48;
  uint64_t v39 = v32;
  if (!v32)
  {
    outlined consume of Data?(v19, v27);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v42);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v36 = v31;
    goto LABEL_14;
  }
  outlined consume of Data?(v19, v27);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v42);
LABEL_3:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t closure #1 in implicit closure #1 in JSONCodable.init(from:)(void *a1, uint64_t a2, uint64_t a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  type metadata accessor for Any.Type();
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  type metadata accessor for JSONCodable.Error();
  swift_getWitnessTable();
  swift_allocError();
  *uint64_t v8 = v5;
  v8[1] = v7;
  void v8[2] = a2;
  int64_t v8[3] = a3;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t protocol witness for Decodable.init(from:) in conformance JSONCodable<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return JSONCodable.init(from:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JSONCodable<A>(void *a1)
{
  return JSONCodable.encode(to:)(a1);
}

uint64_t ProxyCodable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CodableRawRepresentable.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableRawRepresentable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableProxy.init(from:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, void *, double))type metadata accessor for CodableRawRepresentable, a6);
}

uint64_t RawRepresentableProxy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, void *, double)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v42 = (char *)&v32 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  uint64_t v36 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v38 = *(void *)(a2 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[0] = a2;
  v43[1] = a3;
  uint64_t v39 = a3;
  uint64_t v41 = a4;
  v43[2] = a4;
  uint64_t v44 = a5;
  uint64_t v22 = a6(0, v43, v19);
  uint64_t v34 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v32 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v25 = v45;
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v25)
  {
    uint64_t v32 = v24;
    uint64_t v33 = v21;
    uint64_t v45 = v22;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v26 = v17;
    dispatch thunk of RawRepresentable.init(rawValue:)();
    uint64_t v27 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v17, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v35);
      lazy protocol witness table accessor for type Error and conformance Error();
      swift_allocError();
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    }
    else
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      int v29 = v33;
      v28(v33, v26, a2);
      uint64_t v30 = v32;
      v28(v32, v29, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v37, v30, v45);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CodableRawRepresentable.encode(to:)(void *a1)
{
  return RawRepresentableProxy.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableRawRepresentable<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableRawRepresentable.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t static CodableRawRepresentable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CodableRawRepresentable<A>()
{
  return static CodableRawRepresentable<>.== infix(_:_:)();
}

Swift::Int ProxyCodable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> CodableRawRepresentable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))CodableRawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a3 - 8);
  Hasher.init(_seed:)();
  a4(v8, a2, v6);
  return Hasher._finalize()();
}

uint64_t CodableOptional.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t CodableOptional.base.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Optional();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*CodableOptional.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableOptional.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableOptional<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CodableOptional.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CodableOptional<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableOptional<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableOptional<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t CodableOptional.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v24 - v6;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v29 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v10);
  id v24 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v3;
  type metadata accessor for CodableOptional.CodingKeys();
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v12 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v14 = (char *)&v24 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v16 = v29;
  uint64_t v15 = v30;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v9, v32, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v9, v17);
  }
  else
  {
    uint64_t v19 = v12;
    uint64_t v20 = v24;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v24, v9, v4);
    unint64_t v21 = v26;
    (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v4, v25);
    uint64_t v22 = v28;
    swift_getAssociatedConformanceWitness();
    uint64_t v23 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v23);
  }
}

uint64_t CodableOptional.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v27 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v26 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v31 = (char *)&v26 - v9;
  type metadata accessor for CodableOptional.CodingKeys();
  swift_getWitnessTable();
  uint64_t v37 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v33 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v35 = a3;
  uint64_t v39 = type metadata accessor for CodableOptional();
  uint64_t v12 = *(void *)(v39 - 8);
  double v13 = MEMORY[0x270FA5388](v39);
  uint64_t v15 = (char *)&v26 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56))((char *)&v26 - v14, 1, 1, a2, v13);
  uint64_t v16 = a1[3];
  uint64_t v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v17 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v39);
  }
  else
  {
    uint64_t v18 = (uint64_t)v31;
    uint64_t v19 = v32;
    uint64_t v20 = v35;
    swift_getAssociatedConformanceWitness();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v38 = &v26;
    MEMORY[0x270FA5388](v21);
    *(&v26 - 2) = a2;
    *(&v26 - 1) = v20;
    uint64_t v22 = v36;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static Array<A>.unwrap(codingProxy:), (uint64_t)(&v26 - 4), MEMORY[0x263F8E628], a2, v23, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 40))(v15, v18, v29);
    uint64_t v24 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v30, v15, v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v24);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableOptional<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CodableOptional.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableOptional<A>(void *a1, uint64_t a2)
{
  return CodableOptional.encode(to:)(a1, a2);
}

uint64_t CodableNSAttributes.wrappedValue.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodableNSAttributes.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CodableNSAttributes.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableNSAttributes.projectedValue.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

SwiftUI::CodableNSAttributes __swiftcall CodableNSAttributes.init(_:)(SwiftUI::CodableNSAttributes result)
{
  v1->wrappedValue._rawuint64_t Value = result.wrappedValue._rawValue;
  return result;
}

SwiftUI::CodableNSAttributes __swiftcall CodableNSAttributes.init(wrappedValue:)(SwiftUI::CodableNSAttributes wrappedValue)
{
  v1->wrappedValue._rawuint64_t Value = wrappedValue.wrappedValue._rawValue;
  return wrappedValue;
}

void CodableNSAttributes.encode(to:)(uint64_t a1)
{
  id v2 = objc_allocWithZone(MEMORY[0x263F086A0]);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)MEMORY[0x24C522820](32, 0xE100000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v2, sel_initWithString_attributes_, v3, isa);

  CodableAttributedString.encode(to:)(a1);
}

void CodableNSAttributes.init(from:)(id *a1@<X0>, uint64_t *a2@<X8>)
{
  CodableAttributedString.init(from:)(a1, (id **)&v10);
  if (!v2)
  {
    id v4 = v10;
    if ((uint64_t)objc_msgSend(v10, sel_length) <= 0)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x263F8DCB8], v7);
      swift_willThrow();
    }
    else
    {
      id v5 = objc_msgSend(v4, sel_attributesAtIndex_effectiveRange_, 0, 0);
      type metadata accessor for NSAttributedStringKey(0);
      _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *a2 = v6;
    }
  }
}

uint64_t areEqual #1 <A>(lhs:rhs:) in static CodableNSAttributes.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v17[-v7];
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v12, v8, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t CodableNSAttributes.hash(into:)()
{
  uint64_t v15 = *v0 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(*v0 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(*v0 + 64);
  int64_t v16 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v17 = *v0;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v3) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v7 = v6 | (v5 << 6);
  while (2)
  {
    uint64_t v8 = *(void *)(v17 + 56);
    *(void *)&long long v22 = *(void *)(*(void *)(v17 + 48) + 8 * v7);
    uint64_t v9 = (void *)v22;
    outlined init with copy of Any(v8 + 32 * v7, (uint64_t)&v22 + 8);
    id v10 = v9;
    while (1)
    {
      outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)&v22, (uint64_t)&v25);
      uint64_t v14 = v25;
      if (!v25) {
        return swift_release();
      }
      outlined init with take of Any(&v26, v21);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined init with copy of Any((uint64_t)v21, (uint64_t)v20);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Hashable);
      if (swift_dynamicCast())
      {
        outlined init with take of ScrollStateRequest(v18, (uint64_t)&v22);
        __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
        dispatch thunk of Hashable.hash(into:)();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
        if (v3) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        uint64_t result = outlined destroy of AnyTrackedValue?((uint64_t)v18, &lazy cache variable for type metadata for Hashable?, &lazy cache variable for type metadata for Hashable);
        if (v3) {
          goto LABEL_6;
        }
      }
LABEL_8:
      int64_t v11 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v11 < v16)
      {
        unint64_t v12 = *(void *)(v15 + 8 * v11);
        if (v12) {
          goto LABEL_11;
        }
        int64_t v13 = v5 + 2;
        ++v5;
        if (v11 + 1 < v16)
        {
          unint64_t v12 = *(void *)(v15 + 8 * v13);
          if (v12) {
            goto LABEL_14;
          }
          int64_t v5 = v11 + 1;
          if (v11 + 2 < v16)
          {
            unint64_t v12 = *(void *)(v15 + 8 * (v11 + 2));
            if (v12)
            {
              v11 += 2;
              goto LABEL_11;
            }
            int64_t v13 = v11 + 3;
            int64_t v5 = v11 + 2;
            if (v11 + 3 < v16) {
              break;
            }
          }
        }
      }
LABEL_25:
      unint64_t v3 = 0;
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
    }
    unint64_t v12 = *(void *)(v15 + 8 * v13);
    if (v12)
    {
LABEL_14:
      int64_t v11 = v13;
LABEL_11:
      unint64_t v3 = (v12 - 1) & v12;
      unint64_t v7 = __clz(__rbit64(v12)) + (v11 << 6);
      int64_t v5 = v11;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v11 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v11 >= v16)
    {
      int64_t v5 = v16 - 1;
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v15 + 8 * v11);
    ++v13;
    if (v12) {
      goto LABEL_11;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Int CodableNSAttributes.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableNSAttributes()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableNSAttributes()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableNSAttributes@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableNSAttributes(void *a1)
{
  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableNSAttributes(uint64_t a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableNSAttributes(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

__n128 protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance UnitPoint@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance Font.Weight@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t type metadata accessor for JSONCodable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CodableRawRepresentable()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CodableOptional.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CodableOptional()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static CodableNSAttributes.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*(void *)(*a1 + 16) != *(void *)(*a2 + 16)) {
    return 0;
  }
  uint64_t v33 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  unint64_t v7 = &v44;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  id v10 = &lazy cache variable for type metadata for Equatable;
  uint64_t v11 = MEMORY[0x263F8D220];
  uint64_t v12 = MEMORY[0x263F8EE58] + 8;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v13 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v14 = v13 | (v9 << 6);
LABEL_8:
  uint64_t v15 = *(void *)(v2 + 56);
  *(void *)&long long v40 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
  int64_t v16 = (void *)v40;
  outlined init with copy of Any(v15 + 32 * v14, (uint64_t)&v40 + 8);
  id v17 = v16;
  while (1)
  {
    outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)&v40, (uint64_t)&v43);
    uint64_t v21 = v43;
    if (!v43)
    {
      swift_release();
      return 1;
    }
    outlined init with take of Any(v7, v39);
    if (!*(void *)(v3 + 16)) {
      break;
    }
    id v22 = v21;
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    if (v24)
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v23, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }

    if (!*((void *)&v41 + 1)) {
      goto LABEL_39;
    }
    outlined init with take of Any(&v40, v38);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v37);
    type metadata accessor for ScrollStateRequest(0, v10);
    if (swift_dynamicCast())
    {
      uint64_t v25 = v2;
      int64_t v26 = v9;
      uint64_t v27 = v7;
      uint64_t v28 = v12;
      uint64_t v29 = v11;
      uint64_t v30 = v10;
      outlined init with take of ScrollStateRequest(v35, (uint64_t)&v40);
      uint64_t v31 = *((void *)&v41 + 1);
      uint64_t v32 = __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
      LOBYTE(v31) = areEqual #1 <A>(lhs:rhs:) in static CodableNSAttributes.== infix(_:_:)((uint64_t)v32, (uint64_t)v38, v31);

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      if ((v31 & 1) == 0)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
        return 0;
      }
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
      id v10 = v30;
      uint64_t v11 = v29;
      uint64_t v12 = v28;
      unint64_t v7 = v27;
      int64_t v9 = v26;
      uint64_t v2 = v25;
      if (v6) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v36 = 0;
      memset(v35, 0, sizeof(v35));

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      uint64_t result = outlined destroy of AnyTrackedValue?((uint64_t)v35, &lazy cache variable for type metadata for Equatable?, v10);
      if (v6) {
        goto LABEL_7;
      }
    }
LABEL_9:
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v18 < v34)
    {
      unint64_t v19 = *(void *)(v33 + 8 * v18);
      if (v19) {
        goto LABEL_12;
      }
      int64_t v20 = v9 + 2;
      ++v9;
      if (v18 + 1 < v34)
      {
        unint64_t v19 = *(void *)(v33 + 8 * v20);
        if (v19) {
          goto LABEL_15;
        }
        int64_t v9 = v18 + 1;
        if (v18 + 2 < v34)
        {
          unint64_t v19 = *(void *)(v33 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_12;
          }
          int64_t v20 = v18 + 3;
          int64_t v9 = v18 + 2;
          if (v18 + 3 < v34)
          {
            unint64_t v19 = *(void *)(v33 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                int64_t v18 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  break;
                }
                if (v18 >= v34)
                {
                  int64_t v9 = v34 - 1;
                  goto LABEL_26;
                }
                unint64_t v19 = *(void *)(v33 + 8 * v18);
                ++v20;
                if (v19) {
                  goto LABEL_12;
                }
              }
LABEL_43:
              __break(1u);
              return result;
            }
LABEL_15:
            int64_t v18 = v20;
LABEL_12:
            unint64_t v6 = (v19 - 1) & v19;
            unint64_t v14 = __clz(__rbit64(v19)) + (v18 << 6);
            int64_t v9 = v18;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    unint64_t v6 = 0;
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
  }
  long long v40 = 0u;
  long long v41 = 0u;
LABEL_39:

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  swift_release();
  outlined destroy of Any?((uint64_t)&v40);
  return 0;
}

uint64_t outlined init with take of (key: NSAttributedStringKey, value: Any)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: NSAttributedStringKey, value: Any)?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in <> ProxyCodable<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in NSAttributedStringKey()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type RawRepresentableProxy<NSAttributedStringKey> and conformance RawRepresentableProxy<A>, (void (*)(uint64_t))type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>);
}

void type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>()
{
  if (!lazy cache variable for type metadata for RawRepresentableProxy<NSAttributedStringKey>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    unint64_t v0 = type metadata accessor for RawRepresentableProxy();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RawRepresentableProxy<NSAttributedStringKey>);
    }
  }
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in NSAttributedStringKey()
{
  return _sSo21NSAttributedStringKeyaABSHSCWlTm_0(&lazy protocol witness table cache variable for type RawRepresentableProxy<NSAttributedStringKey> and conformance RawRepresentableProxy<A>, (void (*)(uint64_t))type metadata accessor for RawRepresentableProxy<NSAttributedStringKey>);
}

uint64_t _sSo21NSAttributedStringKeyaABSHSCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A]()
{
  return associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A]();
}

{
  swift_getAssociatedConformanceWitness();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in <A> [A]()
{
  return associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in <A> [A]();
}

uint64_t base witness table accessor for Equatable in <> CodableRawRepresentable<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for CodableOptional<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

unint64_t instantiation function for generic protocol witness table for CodableNSAttributes(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  unint64_t result = lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes;
  if (!lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableNSAttributes and conformance CodableNSAttributes);
  }
  return result;
}

uint64_t dispatch thunk of CodableByProxy.codingProxy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static CodableByProxy.unwrap(codingProxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CodableProxy.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t getEnumTagSinglePayload for ProxyCodable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ProxyCodable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245B36CD4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CodableOptional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *initializeWithTake for CodableOptional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for CodableOptional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableOptional(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for CodableOptional(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245B37478);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          id v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for CodableNSAttributes()
{
  return &type metadata for CodableNSAttributes;
}

unsigned char *storeEnumTagSinglePayload for CodableOptional.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245B37550);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Error()
{
  return &unk_26FA7CC38;
}

{
  return &unk_26FA7CBA8;
}

uint64_t base witness table accessor for Equatable in CodableOptional<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CodableOptional<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in CodableOptional<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for JSONCodable.Error()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for JSONCodable.Error()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for JSONCodable.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JSONCodable.Error(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for JSONCodable.Error(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONCodable.Error(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONCodable.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t ImagePaint.init(image:sourceRect:scale:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  return result;
}

uint64_t ImagePaint.image.getter()
{
  return swift_retain();
}

uint64_t ImagePaint.image.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ImagePaint.image.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ImagePaint.sourceRect.getter()
{
  return *(double *)(v0 + 8);
}

void ImagePaint.sourceRect.setter(double a1, double a2, double a3, double a4)
{
  v4[1] = a1;
  uint64_t v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*ImagePaint.sourceRect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ImagePaint.scale.getter()
{
  return *(double *)(v0 + 40);
}

void ImagePaint.scale.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*ImagePaint.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id ImagePaint._Paint.image.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 60);
  char v6 = *(unsigned char *)(v1 + 96);
  char v7 = *(unsigned char *)(v1 + 97);
  __int16 v8 = *(_WORD *)(v1 + 98);
  *(void *)a1 = *(void *)v1;
  char v9 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(v1 + 44);
  *(unsigned char *)(a1 + 60) = v5;
  long long v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 97) = v7;
  *(_WORD *)(a1 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

__n128 ImagePaint._Paint.image.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[4];
  char v5 = *((unsigned char *)a1 + 40);
  uint64_t v6 = *(uint64_t *)((char *)a1 + 44);
  uint64_t v7 = *(uint64_t *)((char *)a1 + 52);
  char v8 = *((unsigned char *)a1 + 60);
  __n128 v15 = *((__n128 *)a1 + 4);
  long long v16 = *((_OWORD *)a1 + 1);
  uint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  char v11 = *((unsigned char *)a1 + 96);
  __int16 v13 = *((_WORD *)a1 + 49);
  char v14 = *((unsigned char *)a1 + 97);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_OWORD *)(v1 + 16) = v16;
  *(void *)(v1 + 32) = v4;
  *(unsigned char *)(v1 + 40) = v5;
  *(void *)(v1 + 44) = v6;
  *(void *)(v1 + 52) = v7;
  *(unsigned char *)(v1 + 60) = v8;
  __n128 result = v15;
  *(__n128 *)(v1 + 64) = v15;
  *(void *)(v1 + 80) = v9;
  *(void *)(v1 + 88) = v10;
  *(unsigned char *)(v1 + 96) = v11;
  *(unsigned char *)(v1 + 97) = v14;
  *(_WORD *)(v1 + 98) = v13;
  return result;
}

uint64_t (*ImagePaint._Paint.image.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ImagePaint._Paint.sourceRect.getter()
{
  return *(double *)(v0 + 104);
}

void ImagePaint._Paint.sourceRect.setter(double a1, double a2, double a3, double a4)
{
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = a3;
  v4[16] = a4;
}

uint64_t (*ImagePaint._Paint.sourceRect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ImagePaint._Paint.scale.getter()
{
  return *(double *)(v0 + 136);
}

void ImagePaint._Paint.scale.setter(double a1)
{
  *(double *)(v1 + 136) = a1;
}

uint64_t (*ImagePaint._Paint.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImagePaint._Paint.init(image:sourceRect:scale:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  char v7 = *(unsigned char *)(result + 8);
  uint64_t v8 = *(void *)(result + 32);
  char v9 = *(unsigned char *)(result + 40);
  char v11 = *(unsigned char *)(result + 96);
  char v12 = *(unsigned char *)(result + 97);
  __int16 v13 = *(_WORD *)(result + 98);
  char v10 = *(unsigned char *)(result + 60);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v7;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
  *(void *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(result + 44);
  *(unsigned char *)(a2 + 60) = v10;
  long long v14 = *(_OWORD *)(result + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 64);
  *(_OWORD *)(a2 + 80) = v14;
  *(unsigned char *)(a2 + 96) = v11;
  *(unsigned char *)(a2 + 97) = v12;
  *(_WORD *)(a2 + 98) = v13;
  *(double *)(a2 + 104) = a3;
  *(double *)(a2 + 112) = a4;
  *(double *)(a2 + 120) = a5;
  *(double *)(a2 + 128) = a6;
  *(double *)(a2 + 136) = a7;
  return result;
}

void static ImagePaint._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 6;
  *(unsigned char *)(a1 + 8) = 0;
}

void ImagePaint._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v80);
  uint64_t v8 = v80[0];
  uint64_t v9 = v80[1];
  uint64_t v49 = a2[1];
  uint64_t v50 = *a2;
  uint64_t v47 = a2[3];
  uint64_t v48 = a2[2];
  uint64_t v46 = a2[4];
  char v45 = *((unsigned char *)a2 + 40);
  char v10 = *(void **)v4;
  char v11 = *(unsigned char *)(v4 + 8);
  double v12 = *(double *)(v4 + 16);
  double v13 = *(double *)(v4 + 24);
  double v52 = *(double *)(v4 + 32);
  uint64_t v14 = *(unsigned __int8 *)(v4 + 40);
  uint64_t v15 = *(void *)(v4 + 44);
  uint64_t v16 = *(void *)(v4 + 52);
  char v17 = *(unsigned char *)(v4 + 60);
  uint64_t v18 = *(void *)(v4 + 72);
  uint64_t v40 = *(void *)(v4 + 80);
  uint64_t v41 = *(void *)(v4 + 64);
  uint64_t v39 = *(void *)(v4 + 88);
  char v37 = *(unsigned char *)(v4 + 97);
  char v38 = *(unsigned char *)(v4 + 96);
  char v35 = *(unsigned char *)(v4 + 99);
  char v36 = *(unsigned char *)(v4 + 98);
  double v19 = *(double *)(v4 + 104);
  double v20 = *(double *)(v4 + 112);
  CGFloat v22 = *(double *)(v4 + 120);
  double v21 = *(double *)(v4 + 128);
  uint64_t v42 = *(void *)(v4 + 136);
  outlined init with take of CGRect?(a4, (uint64_t)v81);
  if (v81[32] == 1)
  {
    Path.boundingRect.getter();
    uint64_t v8 = v23;
    uint64_t v9 = v24;
  }
  double v25 = 0.0;
  double v26 = 0.0;
  if (v12 != 0.0)
  {
    double v27 = v52;
    double v28 = v13;
    switch(v14)
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v27 = v13;
        double v28 = v52;
        break;
      default:
        break;
    }
    double v25 = 1.0 / v12 * v28;
    double v26 = 1.0 / v12 * v27;
  }
  double v43 = v13;
  double v44 = v12;
  uint64_t v29 = v9;
  uint64_t v30 = v8;
  if (v25 == 0.0) {
    double v31 = 1.0;
  }
  else {
    double v31 = 1.0 / v25;
  }
  if (v26 == 0.0) {
    double v32 = 1.0;
  }
  else {
    double v32 = 1.0 / v26;
  }
  v82.origin.CGFloat x = v19;
  v82.origin.CGFloat y = v20;
  v82.size.double width = v22;
  v82.size.double height = v21;
  if (!CGRectIsNull(v82))
  {
    v83.origin.CGFloat x = v19;
    v83.origin.CGFloat y = v20;
    v83.size.double width = v22;
    v83.size.double height = v21;
    if (!CGRectIsInfinite(v83))
    {
      double v34 = v19 * v31;
      v84.origin.CGFloat x = v19;
      v84.origin.CGFloat y = v20;
      v84.size.double width = v22;
      v84.size.double height = v21;
      CGFloat v33 = v31 * CGRectGetWidth(v84);
      v85.origin.CGFloat x = v19;
      v85.origin.CGFloat y = v20;
      v85.size.double width = v22;
      v85.size.double height = v21;
      double v21 = v32 * CGRectGetHeight(v85);
      double v20 = v20 * v32;
      double v19 = v34;
      CGFloat v22 = v33;
    }
  }
  v55[164] = v17;
  uint64_t v56 = v10;
  char v57 = v11;
  double v58 = v44;
  double v59 = v43;
  double v60 = v52;
  char v61 = v14;
  uint64_t v62 = v15;
  uint64_t v63 = v16;
  char v64 = v17;
  uint64_t v65 = v41;
  uint64_t v66 = v18;
  uint64_t v67 = v40;
  uint64_t v68 = v39;
  char v69 = v38;
  char v70 = v37;
  char v71 = v36;
  char v72 = v35;
  uint64_t v73 = v30;
  uint64_t v74 = v29;
  double v75 = v19;
  double v76 = v20;
  CGFloat v77 = v22;
  double v78 = v21;
  uint64_t v79 = v42;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi6_((uint64_t)&v56);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v56, (uint64_t)v55);
  v53[0] = v50;
  v53[1] = v49;
  v53[2] = v48;
  v53[3] = v47;
  v53[4] = v46;
  char v54 = v45;
  outlined copy of GraphicsImage.Contents?(v10, v11);
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v55, (uint64_t)v53, a3);
  outlined consume of GraphicsImage.Contents?(v10, v11);
}

uint64_t ImagePaint._Paint.isClear.getter()
{
  return 0;
}

uint64_t ImagePaint._Paint.isOpaque.getter()
{
  return 0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance ImagePaint._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 6;
  *(unsigned char *)(a1 + 8) = 0;
}

double ImagePaint.resolvePaint(in:)@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v50 - v5;
  uint64_t v63 = (uint64_t)&v50 - v5;
  uint64_t v7 = type metadata accessor for ImageResolutionContext();
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (uint64_t *)((char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v50 - v12;
  double v14 = *a1;
  double v13 = a1[1];
  uint64_t v15 = type metadata accessor for Text.Style(0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v6, 1, 1, v15);
  int v17 = *MEMORY[0x263F288F8];
  v10[2] = 0;
  uint64_t v18 = (uint64_t)v10 + v8[8];
  v16((char *)v18, 1, 1, v15);
  uint64_t v19 = (uint64_t)v53;
  uint64_t v20 = v8[9];
  *(_DWORD *)((char *)v10 + v20) = v17;
  *((unsigned char *)v10 + v8[10]) = 8;
  *((unsigned char *)v10 + v8[11]) = 3;
  *((unsigned char *)v10 + v8[12]) = 1;
  *(double *)char v10 = v14;
  *((double *)v10 + 1) = v13;
  double v52 = v13;
  swift_retain();
  double v21 = v14;
  swift_retain();
  outlined assign with take of Text.Style?(v63, v18);
  *(_DWORD *)((char *)v10 + v20) = v17;
  CGFloat v22 = v54;
  outlined init with take of ImageResolutionContext((uint64_t)v10, v19);
  (*(void (**)(id *__return_ptr, uint64_t))(**(void **)v22 + 80))(&v65, v19);
  id v23 = v65;
  char v24 = v66;
  double v25 = v67;
  double v26 = v68;
  uint64_t v27 = v69;
  unsigned int v28 = v70;
  unint64_t v29 = v71;
  unint64_t v30 = v72;
  char v31 = v73;
  uint64_t v62 = v74;
  uint64_t v61 = v75;
  uint64_t v60 = v76;
  uint64_t v59 = v77;
  int v58 = v78;
  int v57 = v79;
  int v56 = v80;
  int v55 = v81;
  outlined copy of GraphicsImage.Contents?(v65, v66);
  outlined release of Image.Resolved((uint64_t)&v65);
  outlined copy of GraphicsImage.Contents?(v23, v24);
  outlined copy of GraphicsImage.Contents?(v23, v24);
  if ((v31 & 1) == 0)
  {
    if (one-time initialization token for foreground != -1) {
      swift_once();
    }
    v64[0] = v21;
    v64[1] = v52;
    *(float *)&unsigned int v32 = (*(float (**)(double *))(*(void *)static Color.foreground + 104))(v64);
    unint64_t v29 = v32 | ((unint64_t)v33 << 32);
    unint64_t v30 = v34 | ((unint64_t)v35 << 32);
  }
  uint64_t v63 = v27;
  if (v25 == 0.0)
  {
    double v36 = v25;
    double v37 = v26;
    outlined consume of GraphicsImage.Contents?(v23, v24);
    double v38 = 0.0;
    double v39 = 0.0;
  }
  else
  {
    outlined consume of GraphicsImage.Contents?(v23, v24);
    if (v28 >= 4) {
      double v40 = v26;
    }
    else {
      double v40 = *(double *)&v27;
    }
    double v37 = v26;
    if (v28 >= 4) {
      double v41 = *(double *)&v27;
    }
    else {
      double v41 = v26;
    }
    double v36 = v25;
    double v38 = 1.0 / v25 * v41;
    double v39 = 1.0 / v25 * v40;
  }
  double v42 = v22[1];
  double v43 = v22[2];
  CGFloat v45 = v22[3];
  double v44 = v22[4];
  v82.origin.CGFloat x = v42;
  v82.origin.CGFloat y = v43;
  v82.size.double width = v45;
  v82.size.double height = v44;
  if (!CGRectIsNull(v82))
  {
    v83.origin.CGFloat x = v42;
    v83.origin.CGFloat y = v43;
    v83.size.double width = v45;
    v83.size.double height = v44;
    if (!CGRectIsInfinite(v83))
    {
      double v52 = v38 * v42;
      double v51 = v39 * v43;
      v84.origin.CGFloat x = v42;
      v84.origin.CGFloat y = v43;
      v84.size.double width = v45;
      v84.size.double height = v44;
      CGFloat v46 = v38 * CGRectGetWidth(v84);
      v85.origin.CGFloat x = v42;
      v85.origin.CGFloat y = v43;
      v85.size.double width = v45;
      v85.size.double height = v44;
      double v44 = v39 * CGRectGetHeight(v85);
      double v42 = v52;
      double v43 = v51;
      CGFloat v45 = v46;
    }
  }
  outlined destroy of ImageResolutionContext(v19);
  outlined consume of GraphicsImage.Contents?(v23, v24);
  double result = v22[5];
  *(void *)a2 = v23;
  *(unsigned char *)(a2 + 8) = v24;
  *(double *)(a2 + 16) = v36;
  *(double *)(a2 + 24) = v37;
  *(void *)(a2 + 32) = v63;
  *(unsigned char *)(a2 + 40) = v28;
  *(void *)(a2 + 44) = v29;
  *(void *)(a2 + 52) = v30;
  *(unsigned char *)(a2 + 60) = v31;
  uint64_t v48 = v61;
  *(void *)(a2 + 64) = v62;
  *(void *)(a2 + 72) = v48;
  uint64_t v49 = v59;
  *(void *)(a2 + 80) = v60;
  *(void *)(a2 + 88) = v49;
  *(unsigned char *)(a2 + 96) = v58;
  *(unsigned char *)(a2 + 97) = v57;
  *(unsigned char *)(a2 + 98) = v56;
  *(unsigned char *)(a2 + 99) = v55;
  *(double *)(a2 + 104) = v42;
  *(double *)(a2 + 112) = v43;
  *(CGFloat *)(a2 + 120) = v45;
  *(double *)(a2 + 128) = v44;
  *(double *)(a2 + 136) = result;
  return result;
}

double static ImagePaint._makeView<A>(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for ImagePaint, a4, (uint64_t)&protocol witness table for ImagePaint, a5);
}

int64_t ImagePaint._Paint.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  long long v5 = *(_OWORD *)(v3 + 80);
  v18[4] = *(_OWORD *)(v3 + 64);
  v18[5] = v5;
  int v19 = *(_DWORD *)(v3 + 96);
  long long v6 = *(_OWORD *)(v3 + 16);
  v18[0] = *(_OWORD *)v3;
  v18[1] = v6;
  long long v7 = *(_OWORD *)(v3 + 48);
  long long v18[2] = *(_OWORD *)(v3 + 32);
  v18[3] = v7;
  double v8 = *(double *)(v3 + 104);
  double v9 = *(double *)(v3 + 112);
  double v10 = *(double *)(v3 + 120);
  double v11 = *(double *)(v3 + 128);
  double v12 = *(double *)(v3 + 136);
  outlined retain of GraphicsImage((uint64_t)v18);
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  int64_t result = outlined release of GraphicsImage((uint64_t)v18);
  if (!v2)
  {
    v21.origin.CGFloat x = 0.0;
    v21.origin.CGFloat y = 0.0;
    v21.size.double width = 0.0;
    v21.size.double height = 0.0;
    v20.origin.CGFloat x = v8;
    v20.origin.CGFloat y = v9;
    v20.size.double width = v10;
    v20.size.double height = v11;
    int64_t result = CGRectEqualToRect(v20, v21);
    if ((result & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      int64_t result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v8, v9, v10, v11);
    }
    if (v12 != 0.0)
    {
      double v14 = fabs(v12);
      if (v14 >= 65536.0) {
        Swift::UInt v15 = 25;
      }
      else {
        Swift::UInt v15 = 29;
      }
      ProtobufEncoder.encodeVarint(_:)(v15);
      if (v14 >= 65536.0)
      {
        uint64_t v17 = a1[1];
        int64_t result = v17 + 8;
        if (__OFADD__(v17, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= result)
        {
          a1[1] = result;
          *(double *)(*a1 + v17) = v12;
          return result;
        }
        int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
        *(double *)int64_t result = v12;
        return result;
      }
      uint64_t v16 = a1[1];
      int64_t result = v16 + 4;
      if (__OFADD__(v16, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v14 = v12;
        if (a1[2] >= result)
        {
          a1[1] = result;
          *(_DWORD *)(*a1 + v16) = LODWORD(v14);
          return result;
        }
      }
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)int64_t result = LODWORD(v14);
    }
  }
  return result;
}

void ImagePaint._Paint.init(from:)(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  unint64_t v5 = (unint64_t)a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if (v5 < v6)
  {
    double v51 = 0;
    char v52 = 0;
    long long v53 = 0uLL;
    uint64_t v54 = 0;
    long long v55 = 0uLL;
    unint64_t v7 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v8 = 512;
    double v9 = 1.0;
    long long v45 = 0u;
    long long v46 = 0u;
    while (1)
    {
      unint64_t v11 = (unint64_t)a1[3];
      if (!v11) {
        goto LABEL_12;
      }
      id v12 = a1[4];
      if (v5 >= (unint64_t)v12) {
        break;
      }
LABEL_14:
      unint64_t v13 = v11 >> 3;
      if (v11 >> 3 == 3)
      {
        unint64_t v25 = v11 & 7;
        if (v25 == 5)
        {
          double v36 = (float *)a1[1];
          if (v6 < (unint64_t)(v36 + 1)) {
            goto LABEL_72;
          }
          float v37 = *v36;
          a1[1] = v36 + 1;
          double v9 = v37;
        }
        else
        {
          if (v25 == 2)
          {
            uint64_t v38 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_73;
            }
            if (v38 < 0) {
              goto LABEL_85;
            }
            double v26 = (double *)a1[1];
            if (v6 < (unint64_t)v26 + v38) {
              goto LABEL_72;
            }
            a1[3] = (id)25;
            a1[4] = (char *)v26 + v38;
          }
          else
          {
            if (v25 != 1) {
              goto LABEL_72;
            }
            double v26 = (double *)a1[1];
          }
          if (v6 < (unint64_t)(v26 + 1)) {
            goto LABEL_72;
          }
          double v9 = *v26;
          a1[1] = v26 + 1;
        }
      }
      else if (v13 == 2)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_72;
        }
        uint64_t v27 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
        }
        v27[2] = v29 + 1;
        v27[v29 + 4] = v6;
        a1[5] = v27;
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_73;
        }
        if (v30 < 0) {
          goto LABEL_81;
        }
        unint64_t v31 = (unint64_t)a1[1] + v30;
        if (v6 < v31) {
          goto LABEL_72;
        }
        a1[2] = (id)v31;
        long long v57 = 0u;
        long long v58 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v57, a1, &v56);
        unsigned int v32 = a1[5];
        if (!v32[2]) {
          goto LABEL_83;
        }
        long long v45 = v58;
        long long v46 = v57;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v33 = v32[2];
          if (!v33) {
            goto LABEL_71;
          }
        }
        else
        {
          unsigned int v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          uint64_t v33 = v32[2];
          if (!v33)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_73:
            outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
            return;
          }
        }
        uint64_t v34 = v33 - 1;
        unsigned int v35 = (void *)v32[v34 + 4];
        v32[2] = v34;
        a1[5] = v32;
        a1[2] = v35;
      }
      else if (v13 == 1)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_72;
        }
        double v14 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v16 = v14[2];
        unint64_t v15 = v14[3];
        if (v16 >= v15 >> 1) {
          double v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
        }
        _OWORD v14[2] = v16 + 1;
        v14[v16 + 4] = v6;
        a1[5] = v14;
        uint64_t v17 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_73;
        }
        if (v17 < 0)
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          __break(1u);
          double v41 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
          uint64_t v42 = v41[2];
          if (!v42)
          {
            __break(1u);
            double v41 = a1[5];
            if (v41[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v42 = v41[2];
                if (v42) {
                  goto LABEL_79;
                }
LABEL_90:
                __break(1u);
              }
            }
            else
            {
              __break(1u);
            }
            double v41 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            uint64_t v42 = v41[2];
            if (!v42) {
              goto LABEL_90;
            }
          }
LABEL_79:
          uint64_t v43 = v42 - 1;
          double v44 = (void *)v41[v43 + 4];
          v41[2] = v43;
          outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
          a1[5] = v41;
          a1[2] = v44;
          return;
        }
        unint64_t v18 = (unint64_t)a1[1] + v17;
        if (v6 < v18) {
          goto LABEL_72;
        }
        a1[2] = (id)v18;
        GraphicsImage.init(from:)(a1, (uint64_t)&v57);
        int v19 = a1[5];
        if (!v19[2]) {
          goto LABEL_82;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_84;
          }
        }
        else
        {
          int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_84;
          }
        }
        uint64_t v21 = v20 - 1;
        CGFloat v22 = (void *)v19[v21 + 4];
        v19[2] = v21;
        outlined consume of VariableBlurStyle.Mask(v51, v52, v53, *((uint64_t *)&v53 + 1), v54, v55, *((uint64_t *)&v55 + 1), v7, v50, v49, v48, v47, v8, BYTE1(v8));
        a1[5] = v19;
        a1[2] = v22;
        double v51 = (void *)v57;
        char v52 = BYTE8(v57);
        long long v53 = v58;
        uint64_t v54 = v59;
        uint64_t v49 = v64;
        uint64_t v50 = v63;
        uint64_t v47 = v66;
        uint64_t v48 = v65;
        *(void *)&long long v55 = v60 | ((void)v61 << 32);
        *((void *)&v55 + 1) = v61 >> 32;
        if (v62) {
          uint64_t v23 = 0x100000000;
        }
        else {
          uint64_t v23 = 0;
        }
        unint64_t v7 = v23 & 0xFFFFFFFF00000000 | HIDWORD(v61);
        if (v68) {
          int v24 = 256;
        }
        else {
          int v24 = 0;
        }
        int v8 = v24 | v67 | (v69 << 16) | (v70 << 24);
      }
      else
      {
        switch(v11 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_73;
            }
            break;
          case 1uLL:
            unint64_t v10 = (unint64_t)a1[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_72;
          case 2uLL:
            uint64_t v39 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_73;
            }
            if (v39 < 0) {
              goto LABEL_86;
            }
            unint64_t v10 = (unint64_t)a1[1] + v39;
            if (v6 < v10) {
              goto LABEL_72;
            }
LABEL_6:
            a1[1] = (id)v10;
            break;
          case 5uLL:
            unint64_t v10 = (unint64_t)a1[1] + 4;
            if (v6 < v10) {
              goto LABEL_72;
            }
            goto LABEL_6;
          default:
            goto LABEL_72;
        }
      }
      unint64_t v5 = (unint64_t)a1[1];
      unint64_t v6 = (unint64_t)a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if ((v8 & 0xFF00) == 0x200) {
          goto LABEL_4;
        }
        LOBYTE(v57) = BYTE4(v7) & 1;
        *(void *)a2 = v51;
        *(unsigned char *)(a2 + 8) = v52;
        *(_OWORD *)(a2 + 16) = v53;
        *((void *)&v40 + 1) = v7;
        *(void *)&long long v40 = *((void *)&v55 + 1);
        *(void *)(a2 + 32) = v54;
        *(unsigned char *)(a2 + 40) = v55;
        *(void *)(a2 + 44) = v55 >> 32;
        *(void *)(a2 + 52) = v40 >> 32;
        *(unsigned char *)(a2 + 60) = v57;
        *(void *)(a2 + 64) = v50;
        *(void *)(a2 + 72) = v49;
        *(void *)(a2 + 80) = v48;
        *(void *)(a2 + 88) = v47;
        *(unsigned char *)(a2 + 96) = v8;
        *(unsigned char *)(a2 + 97) = BYTE1(v8) & 1;
        *(unsigned char *)(a2 + 98) = BYTE2(v8);
        *(unsigned char *)(a2 + 99) = HIBYTE(v8);
        *(_OWORD *)(a2 + 104) = v46;
        *(_OWORD *)(a2 + 120) = v45;
        *(double *)(a2 + 136) = v9;
        return;
      }
    }
    if ((unint64_t)v12 < v5) {
      goto LABEL_72;
    }
    a1[3] = 0;
LABEL_12:
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_73;
    }
    if (v11 < 8) {
      goto LABEL_72;
    }
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ImagePaint._Paint(void *a1)
{
  return ImagePaint._Paint.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance ImagePaint._Paint(id *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t specialized static ImagePaint._Paint.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = a1[4];
  char v4 = *((unsigned char *)a1 + 40);
  char v5 = *((unsigned char *)a1 + 60);
  char v6 = *((unsigned char *)a1 + 96);
  char v7 = *((unsigned char *)a1 + 97);
  __int16 v8 = *((_WORD *)a1 + 49);
  CGFloat v9 = *((double *)a1 + 14);
  CGFloat v10 = *((double *)a1 + 15);
  CGFloat v11 = *((double *)a1 + 16);
  *(void *)&rect1.origin.CGFloat x = a1[13];
  *(void *)&rect1.origin.CGFloat y = a1[17];
  CGFloat v12 = *(double *)a2;
  char v13 = *(unsigned char *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 32);
  char v15 = *(unsigned char *)(a2 + 40);
  char v16 = *(unsigned char *)(a2 + 60);
  char v17 = *(unsigned char *)(a2 + 96);
  char v18 = *(unsigned char *)(a2 + 97);
  __int16 v19 = *(_WORD *)(a2 + 98);
  CGFloat v20 = *(double *)(a2 + 104);
  CGFloat v21 = *(double *)(a2 + 112);
  CGFloat v22 = *(double *)(a2 + 120);
  CGFloat v23 = *(double *)(a2 + 128);
  double v24 = *(double *)(a2 + 136);
  uint64_t v39 = *a1;
  char v40 = v2;
  long long v41 = *((_OWORD *)a1 + 1);
  uint64_t v42 = v3;
  char v43 = v4;
  long long v44 = *(_OWORD *)((char *)a1 + 44);
  char v45 = v5;
  long long v25 = *((_OWORD *)a1 + 5);
  long long v46 = *((_OWORD *)a1 + 4);
  long long v47 = v25;
  char v48 = v6;
  char v49 = v7;
  __int16 v50 = v8;
  rect1.size.double width = v12;
  LOBYTE(rect1.size.height) = v13;
  long long v29 = *(_OWORD *)(a2 + 16);
  uint64_t v30 = v14;
  char v31 = v15;
  long long v32 = *(_OWORD *)(a2 + 44);
  char v33 = v16;
  long long v26 = *(_OWORD *)(a2 + 80);
  long long v34 = *(_OWORD *)(a2 + 64);
  long long v35 = v26;
  char v36 = v17;
  char v37 = v18;
  __int16 v38 = v19;
  if ((specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v39, (uint64_t)&rect1.size) & 1) == 0) {
    return 0;
  }
  v51.origin.CGFloat x = rect1.origin.x;
  v51.origin.CGFloat y = v9;
  v51.size.double width = v10;
  v51.size.double height = v11;
  v52.origin.CGFloat x = v20;
  v52.origin.CGFloat y = v21;
  v52.size.double width = v22;
  v52.size.double height = v23;
  LODWORD(result) = CGRectEqualToRect(v51, v52);
  if (rect1.origin.y == v24) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi6_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x7000000000000000;
  return result;
}

uint64_t outlined retain of GraphicsImage(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of GraphicsImage(uint64_t a1)
{
  return a1;
}

unint64_t instantiation function for generic protocol witness table for ImagePaint._Paint(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint();
  unint64_t result = lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ImagePaint._Paint and conformance ImagePaint._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint;
  if (!lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImagePaint._Paint and conformance ImagePaint._Paint);
  }
  return result;
}

uint64_t initializeWithCopy for ImagePaint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

void *assignWithCopy for ImagePaint(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for ImagePaint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ImagePaint()
{
  return &type metadata for ImagePaint;
}

void destroy for ImagePaint._Paint(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)a1, v1);
  }
}

uint64_t initializeWithCopy for ImagePaint._Paint(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 255)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of GraphicsImage.Contents((id)*a2, *((unsigned char *)a2 + 8));
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 44);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(unsigned char *)(a1 + 99) = *((unsigned char *)a2 + 99);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
  *(void *)(a1 + 136) = a2[17];
  return a1;
}

uint64_t assignWithCopy for ImagePaint._Paint(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      id v10 = *(id *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v10;
    }
    else
    {
      id v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    char v9 = *(unsigned char *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v9;
  }
  else
  {
    id v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
    long long v6 = *(void **)a1;
    *(void *)a1 = v5;
    char v7 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for ImagePaint._Paint(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 255) {
    goto LABEL_5;
  }
  int v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
LABEL_5:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    goto LABEL_6;
  }
  long long v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v4);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImagePaint._Paint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 97);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ImagePaint._Paint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 97) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImagePaint._Paint()
{
  return &type metadata for ImagePaint._Paint;
}

uint64_t static RendererLeafView.requiresMainThread.getter()
{
  return 0;
}

uint64_t specialized RendererLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = 0;
  if (result && a2)
  {
    unint64_t v6 = 0;
    long long v7 = (double *)(result + 8);
    for (uint64_t i = 16 * a2; i; i -= 16)
    {
      double v10 = *(v7 - 1);
      if (v10 >= 0.0 && ((v11 = *v7, *v7 >= 0.0) ? (BOOL v12 = v10 < a4) : (BOOL v12 = 0), v12))
      {
        if (v6 < 0x40)
        {
          uint64_t v9 = 1 << v6;
          if (v11 < a5)
          {
LABEL_18:
            v5 |= v9;
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v9 = 0;
          if (v11 < a5) {
            goto LABEL_18;
          }
        }
      }
      else
      {
        uint64_t v9 = 1 << v6;
        if (v6 >= 0x40) {
          uint64_t v9 = 0;
        }
      }
      v5 &= ~v9;
LABEL_7:
      v7 += 2;
      ++v6;
    }
  }
  *a3 = v5;
  return result;
}

uint64_t RendererLeafView.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = 0;
  if (result && a2)
  {
    unint64_t v6 = 0;
    long long v7 = (double *)(result + 8);
    for (uint64_t i = 16 * a2; i; i -= 16)
    {
      double v10 = *(v7 - 1);
      if (v10 >= 0.0 && ((v11 = *v7, *v7 >= 0.0) ? (BOOL v12 = v10 < a4) : (BOOL v12 = 0), v12))
      {
        if (v6 < 0x40)
        {
          uint64_t v13 = 1 << v6;
          uint64_t v9 = 1 << v6;
          if (v11 < a5)
          {
LABEL_19:
            v5 |= v13;
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v9 = 0;
          if (v11 < a5) {
            goto LABEL_19;
          }
        }
      }
      else if (v6 >= 0x40)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = 1 << v6;
      }
      v5 &= ~v9;
LABEL_8:
      v7 += 2;
      ++v6;
    }
  }
  *a3 = v5;
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance LeafDisplayList<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeafDisplayList<A>()
{
  return 0x707369446661654CLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeafLayoutComputer<A>()
{
  return 0xD000000000000012;
}

uint64_t LeafLayoutEngine.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t dispatch thunk of static RendererLeafView.requiresMainThread.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of RendererLeafView.content()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LeafViewLayout.spacing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LeafViewLayout.sizeThatFits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for LeafLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    uint64_t v9 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)(v11 + 16);
    long long v12 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v12;
    long long v14 = *(_OWORD *)(v11 + 96);
    long long v16 = *(_OWORD *)(v11 + 48);
    long long v15 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(v10 + 96) = v14;
    *(_OWORD *)(v10 + 48) = v16;
    *(_OWORD *)(v10 + 64) = v15;
    long long v18 = *(_OWORD *)(v11 + 128);
    long long v17 = *(_OWORD *)(v11 + 144);
    long long v19 = *(_OWORD *)(v11 + 112);
    *(unsigned char *)(v10 + 160) = *(unsigned char *)(v11 + 160);
    *(_OWORD *)(v10 + 128) = v18;
    *(_OWORD *)(v10 + 144) = v17;
    *(_OWORD *)(v10 + 112) = v19;
  }
  return v4;
}

uint64_t assignWithCopy for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  long long v12 = *(_OWORD *)(v8 + 56);
  long long v13 = *(_OWORD *)(v8 + 72);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  char v15 = *(unsigned char *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 128);
  long long v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(unsigned char *)(v7 + 160) = v15;
  return a1;
}

uint64_t initializeWithTake for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v15 = *(_OWORD *)(v8 + 128);
  long long v14 = *(_OWORD *)(v8 + 144);
  long long v16 = *(_OWORD *)(v8 + 112);
  *(unsigned char *)(v7 + 160) = *(unsigned char *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  long long v12 = *(_OWORD *)(v8 + 56);
  long long v13 = *(_OWORD *)(v8 + 72);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  char v15 = *(unsigned char *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 128);
  long long v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(unsigned char *)(v7 + 160) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for LeafLayoutEngine(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
    unsigned int v7 = (a2 - v5 + 255) >> (8 * (((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xF8) - 95));
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245B39BECLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * (((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xF8) - 95));
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF60) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for LeafLayoutEngine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  size_t v9 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
  char v10 = 8 * (((*(unsigned char *)(v6 + 64) + 7) & 0xF8) - 95);
  if (v8 >= a3)
  {
    int v14 = 0;
    if (v8 >= a2)
    {
LABEL_14:
      switch(v14)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            long long v18 = *(void (**)(void))(v7 + 56);
            v18();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = (a3 - v8 + 255) >> v10;
    if (v9 <= 3) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v15 = (~v8 + a2) >> v10;
  if (v9 < 4) {
    int v16 = v15 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v9 >= 4) {
    unsigned int v17 = ~v8 + a2;
  }
  else {
    unsigned int v17 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v9);
  if (v9 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v9] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245B39DD4);
    case 4:
      *(_DWORD *)&a1[v9] = v16;
      break;
    default:
      return;
  }
}

uint64_t specialized Dictionary.subscript.getter(Swift::UInt64 a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unsigned int v5 = *(void **)(*(void *)(a2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (char *)v21 - v6;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)v21 - v8;
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  long long v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    Swift::UInt64 v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    double v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    long long v25 = v12;
    CGFloat v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    CGFloat v23 = v14;
    long long v26 = v11;
    int v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v18 = (uint64_t)v27;
    unsigned int v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (char *)v21 - v6;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)v21 - v8;
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  long long v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    Swift::UInt64 v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    double v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    long long v25 = v12;
    CGFloat v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    CGFloat v23 = v14;
    long long v26 = v11;
    int v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v18 = (uint64_t)v27;
    unsigned int v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for UUID();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (char *)v21 - v6;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)v21 - v8;
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  long long v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    Swift::UInt64 v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    double v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    long long v25 = v12;
    CGFloat v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    CGFloat v23 = v14;
    long long v26 = v11;
    int v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v18 = (uint64_t)v27;
    unsigned int v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    long long v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt64 *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  int64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  id v33 = a2;
  uint64_t v31 = a1;
  long long v32 = a3;
  if (v12)
  {
    char v43 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v13 = v7 + 16;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v39 = &a2[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    uint64_t v15 = *(void *)(v13 + 56);
    unint64_t v16 = v13 + 40;
    long long v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v42 = v13;
    char v40 = (void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    char v37 = (void (**)(uint64_t, uint64_t))(v13 - 8);
    uint64_t v38 = v15;
    swift_bridgeObjectRetain();
    unint64_t v30 = v16 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v17 = (uint64_t)v35;
    long long v34 = (void (**)(char *, void, uint64_t, uint64_t))v16;
    while (1)
    {
      v43(v11, v14, v6);
      long long v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v16;
      (*(void (**)(char *, void, uint64_t, uint64_t))v16)(v11, 0, 1, v6);
      if ((*v41)(v11, 1, v6) == 1) {
        break;
      }
      long long v19 = *v40;
      (*v40)(v17, v11, v6);
      CGFloat v20 = v39;
      swift_beginAccess();
      uint64_t v21 = *(void *)v20;
      if (*(void *)(v21 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v23 & 1) != 0))
      {
        double v24 = *(char **)(*(void *)(v21 + 56) + 8 * v22);
        swift_endAccess();
        long long v25 = *(void **)&v24[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        char v36 = v24;
        id v26 = objc_msgSend(v25, sel_superlayer);
        id v27 = objc_msgSend(v26, sel_superlayer);

        unint64_t v16 = (unint64_t)v34;
        uint64_t v17 = (uint64_t)v35;
        if (v27)
        {
          swift_bridgeObjectRelease();

          unint64_t v28 = v32;
          v19((uint64_t)v32, (char *)v17, v6);
          v18(v28, 0, 1, v6);
          goto LABEL_13;
        }
      }
      else
      {
        swift_endAccess();
      }
      (*v37)(v17, v6);
      v14 += v38;
      if (!--v12) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    long long v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    unint64_t v30 = (v7 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
LABEL_11:
    v18(v11, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  v18(v32, 1, 1, v6);
LABEL_13:
}

uint64_t one-time initialization function for _textAnimation()
{
  uint64_t result = MEMORY[0x24C522820](0x6E4174786554534ELL, 0xEF6E6F6974616D69);
  static NSAttributedStringKey._textAnimation = result;
  return result;
}

uint64_t one-time initialization function for _textFilterAnimation()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000016, 0x800000024621D980);
  static NSAttributedStringKey._textFilterAnimation = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RawTextLayout.Fragment(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RawTextLayout(uint64_t *a1, uint64_t *a2)
{
  CGFloat v2 = *((double *)a1 + 1);
  CGFloat v3 = *((double *)a1 + 2);
  CGFloat v4 = *((double *)a1 + 3);
  CGFloat v5 = *((double *)a1 + 4);
  CGFloat v6 = *((double *)a2 + 1);
  CGFloat v7 = *((double *)a2 + 2);
  CGFloat v8 = *((double *)a2 + 3);
  CGFloat v9 = *((double *)a2 + 4);
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    return 0;
  }
  v11.origin.CGFloat x = v2;
  v11.origin.CGFloat y = v3;
  v11.size.double width = v4;
  v11.size.double height = v5;
  v12.origin.CGFloat x = v6;
  v12.origin.CGFloat y = v7;
  v12.size.double width = v8;
  v12.size.double height = v9;
  return CGRectEqualToRect(v11, v12);
}

void Text.Layout.init(_:)(void *a1@<X0>, uint64_t isEscapingClosureAtFileLocation@<X8>)
{
  type metadata accessor for TextLayoutFragmentRenderer();
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a1;
  CGFloat v4 = a1;
  id v5 = objc_msgSend(v4, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  unint64_t CopyWithAttributeOverrides = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (CopyWithAttributeOverrides >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_22:

    swift_release();
    uint64_t v31 = 0;
    CGFloat v9 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v32 = v9[2];
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v31);
    *(void *)isEscapingClosureAtFileLocation = v9;
    *(unsigned char *)(isEscapingClosureAtFileLocation + 8) = 0;
    *(void *)(isEscapingClosureAtFileLocation + 16) = v32;
    return;
  }
  uint64_t v7 = *(void *)((CopyWithAttributeOverrides & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_22;
  }
LABEL_3:
  if (v7 >= 1)
  {
    id v33 = v4;
    uint64_t v34 = isEscapingClosureAtFileLocation;
    uint64_t v8 = 0;
    long long v35 = 0;
    unint64_t v36 = CopyWithAttributeOverrides & 0xC000000000000001;
    CGFloat v9 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (v36) {
        id v12 = (id)MEMORY[0x24C523D60](v8, CopyWithAttributeOverrides);
      }
      else {
        id v12 = *(id *)(CopyWithAttributeOverrides + 8 * v8 + 32);
      }
      CGRect v11 = v12;
      objc_msgSend(v12, sel_typographicBounds, v33);
      double v14 = v13;
      double v16 = v15;
      objc_msgSend(v11, sel_glyphOrigin);
      double v18 = v17;
      double v20 = v19;
      id v21 = (id)_NSTextLineFragmentGetCTLine(v11);
      if (v21)
      {
        unint64_t v22 = CopyWithAttributeOverrides;
        id v23 = v21;
        id v24 = _NSTextLineFragmentGetOverridesHandler(v11);
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = v25;
          swift_retain();
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v35);
          CGFloat v4 = (void *)swift_allocObject();
          long long v35 = thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          uint64_t v4[2] = thunk for @escaping @callee_unowned @convention(block) (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          v4[3] = v26;
          aBlock[4] = thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)partial apply;
          aBlock[5] = v4;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?);
          aBlock[3] = &block_descriptor_115;
          id v27 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          unint64_t CopyWithAttributeOverrides = CTLineCreateCopyWithAttributeOverrides();

          _Block_release(v27);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if (isEscapingClosureAtFileLocation)
          {
            __break(1u);
            goto LABEL_21;
          }
          id v23 = (id)CopyWithAttributeOverrides;
        }
        else
        {
        }
        id v28 = v23;
        swift_retain();
        unint64_t CopyWithAttributeOverrides = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          CGFloat v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v30 = v9[2];
        unint64_t v29 = v9[3];
        if (v30 >= v29 >> 1) {
          CGFloat v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v9);
        }
        void v9[2] = v30 + 1;
        uint64_t v10 = &v9[6 * v30];
        void v10[4] = v28;
        void v10[5] = v37;
        *((unsigned char *)v10 + 48) = 0;
        *((double *)v10 + 7) = v14 + v18;
        *((double *)v10 + 8) = v16 + v20;
        *((_DWORD *)v10 + 18) = 0;

        CGRect v11 = v28;
      }
      ++v8;

      if (v7 == v8)
      {

        swift_release();
        isEscapingClosureAtFileLocation = v34;
        uint64_t v31 = (uint64_t)v35;
        goto LABEL_23;
      }
    }
  }
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<CFRange>) -> (@unowned Unmanaged<CFDictionaryRef>?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t Text.Layout.effectsOrderAndMap.getter@<X0>(void *a1@<X8>)
{
  uint64_t v179 = a1;
  uint64_t v2 = *v1;
  uint64_t v208 = MEMORY[0x263F8EE88];
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    uint64_t v173 = (void *)MEMORY[0x263F8EE78];
    Swift::UInt64 v174 = MEMORY[0x263F8EE80];
    uint64_t v175 = MEMORY[0x263F8EE88];
    Swift::UInt64 v176 = MEMORY[0x263F8EE80];
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_104;
  }
  uint64_t v181 = v2 + 32;
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  CGFloat v6 = (void *)MEMORY[0x263F8EE78];
  uint64_t v7 = MEMORY[0x263F8EE58];
  uint64_t v199 = MEMORY[0x263F8EE58] + 8;
  long long v192 = xmmword_2461BE2B0;
  unint64_t v184 = (unint64_t)"_NSTextFilterAnimation";
  uint64_t v190 = (void *)0x800000024621D9A0;
  long long v191 = xmmword_2461B9DC0;
  uint64_t v182 = (void *)0x800000024621D860;
  Swift::UInt64 v195 = MEMORY[0x263F8EE80];
  Swift::UInt64 v196 = MEMORY[0x263F8EE80];
  uint64_t v8 = (void *)MEMORY[0x263F8EE80];
  uint64_t v180 = v4;
  while (2)
  {
    if (v5 >= v3)
    {
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    id v200 = v8;
    uint64_t v194 = v6;
    uint64_t v9 = v181 + 48 * v5;
    uint64_t v10 = *(void **)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    int v12 = *(unsigned __int8 *)(v9 + 16);
    unint64_t v186 = v5 + 1;
    char v207 = v12;
    outlined copy of Text.Layout.Line.Line(v10, v11, v12);
    outlined copy of Text.Layout.Line.Line(v10, v11, v12);
    CFIndex v13 = 0;
    int v185 = v12;
    uint64_t v198 = v11;
    uint64_t v193 = v10;
    while ((v12 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v10, v11, 0);
      swift_release();
      double v14 = (const __CTLine *)v10;
LABEL_14:
      CFArrayRef RunCount = _CTLineGetRunCount(v14);

      if ((const __CFArray *)v13 == RunCount) {
        goto LABEL_3;
      }
      if ((v12 & 1) == 0)
      {
        outlined copy of Text.Layout.Line.Line(v10, v11, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v10, v11, 0);

        outlined copy of Text.Layout.Line.Line(v10, v11, 0);
        outlined copy of Text.Layout.Line.Line(v10, v11, 0);
        swift_release();
        double v20 = (const __CTLine *)v10;
        double v17 = v10;
        CFArrayRef v19 = (const __CFArray *)v11;
        goto LABEL_20;
      }
LABEL_16:
      id v16 = (id)_NSTextLineFragmentGetCTLine(v10);
      if (!v16) {
        goto LABEL_115;
      }
      double v17 = v16;
      outlined copy of Text.Layout.Line.Line(v10, v11, 1);
      double v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v10);
      CFArrayRef v19 = 0;
      if (v18)
      {
        double v20 = v18;
LABEL_20:
        CFArrayRef v21 = v19;
        CFArrayRef v19 = _CTLineGetRunCount(v20);

        goto LABEL_22;
      }
      LOBYTE(v12) = 1;
      CFArrayRef v21 = 0;
LABEL_22:
      outlined consume of Text.Layout.Line.Line(v10, v11, v12 & 1);
      if (v13 >= (uint64_t)v19)
      {
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      uint64_t v22 = one-time initialization token for _textAnimation;
      id v23 = v17;
      swift_retain();
      if (v22 != -1) {
        swift_once();
      }
      id v24 = (const __CTLine *)v23;
      swift_retain();
      CFIndex v201 = v13;
      id v25 = (id)_CTLineGetRunAtIndex(v24, v13);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v27 = (void *)MEMORY[0x24C522820](v26);
      swift_bridgeObjectRelease();
      CFDictionaryRef v28 = _CTRunGetAttributeValueForKey((const __CTRun *)v25, v27);

      if (v28)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v202 = 0u;
        long long v203 = 0u;
      }
      _sypSgWObTm_1((uint64_t)&v202, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for Any?, v199);
      swift_release();

      CFIndex v29 = v201;
      if (!v206)
      {
        _sypSgWOhTm_1((uint64_t)&v204, (uint64_t)&lazy cache variable for type metadata for Any?, v7 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
LABEL_37:
        swift_release();

        goto LABEL_38;
      }
      type metadata accessor for AnyTextEffect();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_37;
      }
      unint64_t v30 = (char *)v202;
      swift_release();

      uint64_t v31 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
      uint64_t v32 = *(void *)&v30[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
      id v33 = v200;
      if (v200[2]
        && (uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)&v30[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id]),
            (v35 & 1) != 0))
      {
        if (v30 != *(char **)(v33[7] + 8 * v34))
        {
          CFArrayRef v197 = (const __CFArray *)v30;
          uint64_t v189 = (char *)&v179;
          LODWORD(v188) = static os_log_type_t.fault.getter();
          if (one-time initialization token for internalErrorsLog != -1) {
            swift_once();
          }
          swift_beginAccess();
          unint64_t v36 = (void *)static Log.internalErrorsLog;
          type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
          uint64_t v37 = swift_allocObject();
          *(_OWORD *)(v37 + 16) = v192;
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          id v38 = v36;
          _StringGuts.grow(_:)(37);
          v39._object = (void *)(v184 | 0x8000000000000000);
          double v187 = (void *)(v184 | 0x8000000000000000);
          v39._countAndFlagsBits = 0xD000000000000023;
          String.append(_:)(v39);
          *(void *)&long long v202 = v32;
          _print_unlocked<A, B>(_:_:)();
          v40._countAndFlagsBits = 0;
          v40._object = (void *)0xE000000000000000;
          String.append(_:)(v40);
          Swift::UInt64 v41 = v204;
          unint64_t v42 = v205;
          uint64_t v43 = MEMORY[0x263F8D310];
          *(void *)(v37 + 56) = MEMORY[0x263F8D310];
          unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v37 + 64) = v44;
          *(void *)(v37 + 32) = v41;
          *(void *)(v37 + 40) = v42;
          uint64_t v45 = StaticString.description.getter();
          *(void *)(v37 + 96) = v43;
          *(void *)(v37 + 104) = v44;
          *(void *)(v37 + 72) = v45;
          *(void *)(v37 + 80) = v46;
          Swift::UInt64 v204 = 107;
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v37 + 136) = v43;
          *(void *)(v37 + 144) = v44;
          *(void *)(v37 + 112) = v47;
          *(void *)(v37 + 120) = v48;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE58];
          type metadata accessor for TextRenderLayer.Layout?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
          uint64_t v49 = swift_allocObject();
          *(_OWORD *)(v49 + 16) = v191;
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          v50._countAndFlagsBits = 0xD000000000000023;
          v50._object = v187;
          String.append(_:)(v50);
          *(void *)&long long v202 = v32;
          _print_unlocked<A, B>(_:_:)();
          v51._countAndFlagsBits = 0;
          v51._object = (void *)0xE000000000000000;
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          v52._countAndFlagsBits = 2108704;
          v52._object = (void *)0xE300000000000000;
          String.append(_:)(v52);
          v53._countAndFlagsBits = StaticString.description.getter();
          String.append(_:)(v53);
          swift_bridgeObjectRelease();
          v54._countAndFlagsBits = 58;
          v54._object = (void *)0xE100000000000000;
          String.append(_:)(v54);
          *(void *)&long long v202 = 107;
          v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          v56._countAndFlagsBits = 0xD00000000000001CLL;
          v56._object = (void *)(v183 | 0x8000000000000000);
          String.append(_:)(v56);
          Swift::UInt64 v57 = v204;
          unint64_t v58 = v205;
          *(void *)(v49 + 56) = v43;
          *(void *)(v49 + 32) = v57;
          *(void *)(v49 + 40) = v58;
          print(_:separator:terminator:)();

          swift_bridgeObjectRelease();
          uint64_t v11 = v198;
          CFIndex v29 = v201;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v97 = v30;
        uint64_t v98 = v30;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::UInt64 v204 = (Swift::UInt64)v33;
        unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
        uint64_t v102 = v33[2];
        BOOL v103 = (v100 & 1) == 0;
        uint64_t v104 = v102 + v103;
        if (__OFADD__(v102, v103)) {
          goto LABEL_108;
        }
        char v105 = v100;
        if (v33[3] >= v104)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, isUniquelyReferenced_nonNull_native);
          uint64_t v106 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          if ((v105 & 1) != (v107 & 1)) {
            goto LABEL_116;
          }
          unint64_t v101 = v106;
        }
        long long v121 = (void *)v204;
        uint64_t v122 = 8 * v101;
        if (v105)
        {
          uint64_t v123 = *(void *)(v204 + 56);

          *(void *)(v123 + v122) = v98;
        }
        else
        {
          *(void *)(v204 + 8 * (v101 >> 6) + 64) |= 1 << v101;
          *(void *)(v121[6] + 8 * v101) = v32;
          *(void *)(v121[7] + 8 * v101) = v98;
          uint64_t v124 = v121[2];
          BOOL v125 = __OFADD__(v124, 1);
          uint64_t v126 = v124 + 1;
          if (v125) {
            goto LABEL_112;
          }
          v121[2] = v126;
        }
        id v200 = v121;
        swift_bridgeObjectRelease();
        unint64_t v30 = v97;
      }
      uint64_t v127 = *(void *)&v30[v31];
      uint64_t v128 = v30;
      uint64_t v129 = v30;
      Swift::UInt64 v130 = v196;
      char v131 = swift_isUniquelyReferenced_nonNull_native();
      Swift::UInt64 v204 = v130;
      unint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(v127);
      uint64_t v134 = *(void *)(v130 + 16);
      BOOL v135 = (v132 & 1) == 0;
      uint64_t v136 = v134 + v135;
      if (__OFADD__(v134, v135)) {
        goto LABEL_106;
      }
      char v137 = v132;
      if (*(void *)(v130 + 24) >= v136)
      {
        if ((v131 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v136, v131);
        uint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(v127);
        if ((v137 & 1) != (v139 & 1)) {
          goto LABEL_116;
        }
        unint64_t v133 = v138;
      }
      uint64_t v11 = v198;
      uint64_t v140 = (void *)v204;
      Swift::UInt64 v196 = v204;
      if (v137)
      {
        uint64_t v141 = *(void *)(v204 + 56);
        uint64_t v142 = 8 * v133;

        *(void *)(v141 + v142) = v129;
      }
      else
      {
        *(void *)(v204 + 8 * (v133 >> 6) + 64) |= 1 << v133;
        uint64_t v143 = 8 * v133;
        *(void *)(v140[6] + v143) = v127;
        *(void *)(v140[7] + v143) = v129;
        uint64_t v144 = v140[2];
        BOOL v125 = __OFADD__(v144, 1);
        uint64_t v145 = v144 + 1;
        if (v125) {
          goto LABEL_110;
        }
        v140[2] = v145;
      }
      swift_bridgeObjectRelease();
      Swift::UInt64 v146 = *(void *)&v128[v31];
      if (specialized Set.contains(_:)(v146, v208))
      {

        uint64_t v7 = MEMORY[0x263F8EE58];
        CFIndex v29 = v201;
        uint64_t v10 = v193;
      }
      else
      {
        specialized Set._Variant.insert(_:)(&v204, v146);
        char v147 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v10 = v193;
        if (v147) {
          uint64_t v148 = v194;
        }
        else {
          uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v194[2] + 1, 1, v194);
        }
        unint64_t v150 = v148[2];
        unint64_t v149 = v148[3];
        if (v150 >= v149 >> 1) {
          uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v149 > 1), v150 + 1, 1, v148);
        }
        v148[2] = v150 + 1;
        uint64_t v194 = v148;
        v148[v150 + 4] = v146;

        uint64_t v7 = MEMORY[0x263F8EE58];
        CFIndex v29 = v201;
      }
LABEL_38:
      uint64_t v59 = one-time initialization token for _textFilterAnimation;
      unsigned __int8 v60 = v24;
      swift_retain();
      if (v59 != -1) {
        swift_once();
      }
      long long v61 = v60;
      swift_retain();
      char v62 = (id)_CTLineGetRunAtIndex(v61, v29);
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = (void *)MEMORY[0x24C522820](v63);
      swift_bridgeObjectRelease();
      CFDictionaryRef v65 = _CTRunGetAttributeValueForKey((const __CTRun *)v62, v64);

      if (v65)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v202 = 0u;
        long long v203 = 0u;
      }
      _sypSgWObTm_1((uint64_t)&v202, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
      swift_release();

      CFIndex v66 = v201;
      if (!v206)
      {
        _sypSgWOhTm_1((uint64_t)&v204, (uint64_t)&lazy cache variable for type metadata for Any?, v7 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
LABEL_7:
        swift_release_n();

        goto LABEL_8;
      }
      type metadata accessor for AnyTextFilterEffect();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_7;
      }
      unsigned __int8 v67 = (char *)v202;
      CFArrayRef v197 = v21;
      swift_release();

      uint64_t v68 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
      uint64_t v69 = *(void *)&v67[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
      unsigned __int8 v70 = v200;
      if (v200[2]
        && (uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)&v67[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id]),
            (v72 & 1) != 0))
      {
        if (v67 != *(char **)(v70[7] + 8 * v71))
        {
          uint64_t v73 = v69;
          v188 = &v179;
          uint64_t v189 = v67;
          static os_log_type_t.fault.getter();
          if (one-time initialization token for internalErrorsLog != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v74 = (void *)static Log.internalErrorsLog;
          type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
          uint64_t v75 = swift_allocObject();
          *(_OWORD *)(v75 + 16) = v192;
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          id v76 = v74;
          _StringGuts.grow(_:)(37);
          v77._countAndFlagsBits = 0xD000000000000023;
          v77._object = v190;
          String.append(_:)(v77);
          *(void *)&long long v202 = v73;
          _print_unlocked<A, B>(_:_:)();
          v78._countAndFlagsBits = 0;
          v78._object = (void *)0xE000000000000000;
          String.append(_:)(v78);
          Swift::UInt64 v79 = v204;
          unint64_t v80 = v205;
          uint64_t v81 = MEMORY[0x263F8D310];
          *(void *)(v75 + 56) = MEMORY[0x263F8D310];
          unint64_t v82 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v75 + 64) = v82;
          *(void *)(v75 + 32) = v79;
          *(void *)(v75 + 40) = v80;
          uint64_t v83 = StaticString.description.getter();
          *(void *)(v75 + 96) = v81;
          *(void *)(v75 + 104) = v82;
          *(void *)(v75 + 72) = v83;
          *(void *)(v75 + 80) = v84;
          Swift::UInt64 v204 = 107;
          uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v75 + 136) = v81;
          *(void *)(v75 + 144) = v82;
          *(void *)(v75 + 112) = v85;
          *(void *)(v75 + 120) = v86;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE58];
          type metadata accessor for TextRenderLayer.Layout?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
          uint64_t v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = v191;
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          Swift::UInt64 v204 = 0;
          unint64_t v205 = 0xE000000000000000;
          _StringGuts.grow(_:)(37);
          v88._countAndFlagsBits = 0xD000000000000023;
          v88._object = v190;
          String.append(_:)(v88);
          *(void *)&long long v202 = v73;
          _print_unlocked<A, B>(_:_:)();
          v89._countAndFlagsBits = 0;
          v89._object = (void *)0xE000000000000000;
          String.append(_:)(v89);
          swift_bridgeObjectRelease();
          v90._countAndFlagsBits = 2108704;
          v90._object = (void *)0xE300000000000000;
          String.append(_:)(v90);
          v91._countAndFlagsBits = StaticString.description.getter();
          String.append(_:)(v91);
          swift_bridgeObjectRelease();
          v92._countAndFlagsBits = 58;
          v92._object = (void *)0xE100000000000000;
          String.append(_:)(v92);
          *(void *)&long long v202 = 107;
          v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v93);
          swift_bridgeObjectRelease();
          v94._countAndFlagsBits = 0xD00000000000001CLL;
          v94._object = v182;
          String.append(_:)(v94);
          Swift::UInt64 v95 = v204;
          unint64_t v96 = v205;
          *(void *)(v87 + 56) = v81;
          *(void *)(v87 + 32) = v95;
          *(void *)(v87 + 40) = v96;
          print(_:separator:terminator:)();

          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v11 = v198;
          CFIndex v66 = v201;
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v108 = v10;
        uint64_t v109 = v67;
        uint64_t v110 = v67;
        char v111 = swift_isUniquelyReferenced_nonNull_native();
        Swift::UInt64 v204 = (Swift::UInt64)v70;
        uint64_t v112 = v69;
        unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v69);
        uint64_t v115 = v70[2];
        BOOL v116 = (v113 & 1) == 0;
        uint64_t v117 = v115 + v116;
        if (__OFADD__(v115, v116)) {
          goto LABEL_109;
        }
        char v118 = v113;
        if (v70[3] >= v117)
        {
          if ((v111 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v111);
          uint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v112);
          if ((v118 & 1) != (v120 & 1)) {
            goto LABEL_116;
          }
          unint64_t v114 = v119;
        }
        uint64_t v151 = (void *)v204;
        uint64_t v152 = 8 * v114;
        if (v118)
        {
          uint64_t v153 = *(void *)(v204 + 56);

          *(void *)(v153 + v152) = v110;
        }
        else
        {
          *(void *)(v204 + 8 * (v114 >> 6) + 64) |= 1 << v114;
          *(void *)(v151[6] + 8 * v114) = v112;
          *(void *)(v151[7] + 8 * v114) = v110;
          uint64_t v154 = v151[2];
          BOOL v125 = __OFADD__(v154, 1);
          uint64_t v155 = v154 + 1;
          if (v125) {
            goto LABEL_113;
          }
          v151[2] = v155;
        }
        id v200 = v151;
        swift_bridgeObjectRelease();
        unsigned __int8 v67 = v109;
        uint64_t v10 = v108;
      }
      uint64_t v156 = *(void *)&v67[v68];
      char v157 = v67;
      Swift::UInt64 v158 = v195;
      char v159 = swift_isUniquelyReferenced_nonNull_native();
      Swift::UInt64 v204 = v158;
      unint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v156);
      uint64_t v162 = *(void *)(v158 + 16);
      BOOL v163 = (v160 & 1) == 0;
      uint64_t v164 = v162 + v163;
      if (__OFADD__(v162, v163)) {
        goto LABEL_107;
      }
      char v165 = v160;
      if (*(void *)(v158 + 24) >= v164)
      {
        if ((v159 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v164, v159);
        uint64_t v166 = specialized __RawDictionaryStorage.find<A>(_:)(v156);
        if ((v165 & 1) != (v167 & 1)) {
          goto LABEL_116;
        }
        unint64_t v161 = v166;
      }
      uint64_t v11 = v198;
      uint64_t v168 = (void *)v204;
      Swift::UInt64 v195 = v204;
      if (v165)
      {
        uint64_t v169 = *(void *)(v204 + 56);

        *(void *)(v169 + 8 * v161) = v157;
      }
      else
      {
        *(void *)(v204 + 8 * (v161 >> 6) + 64) |= 1 << v161;
        uint64_t v170 = 8 * v161;
        *(void *)(v168[6] + v170) = v156;
        *(void *)(v168[7] + v170) = v157;
        uint64_t v171 = v168[2];
        BOOL v125 = __OFADD__(v171, 1);
        uint64_t v172 = v171 + 1;
        if (v125) {
          goto LABEL_111;
        }
        v168[2] = v172;
      }

      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x263F8EE58];
      CFIndex v66 = v201;
LABEL_8:
      LOBYTE(v12) = v207;
      CFIndex v13 = v66 + 1;
    }
    double v14 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v10);
    if (v14) {
      goto LABEL_14;
    }
    if (v13) {
      goto LABEL_16;
    }
    LOBYTE(v12) = 1;
LABEL_3:
    outlined consume of Text.Layout.Line.Line(v10, v11, v12 & 1);
    outlined consume of Text.Layout.Line.Line(v10, v11, v185);
    unint64_t v3 = *(void *)(v180 + 16);
    unint64_t v5 = v186;
    CGFloat v6 = v194;
    uint64_t v8 = v200;
    if (v186 != v3) {
      continue;
    }
    break;
  }
  uint64_t v173 = v194;
  swift_bridgeObjectRelease();
  uint64_t v175 = MEMORY[0x263F8EE88];
  Swift::UInt64 v174 = v195;
  Swift::UInt64 v176 = v196;
LABEL_104:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v178 = v179;
  *uint64_t v179 = v173;
  v178[1] = v8;
  v178[2] = v176;
  v178[3] = v174;
  v178[4] = v175;
  return result;
}

void Text.Layout.Line.baseWritingDirection.getter(BOOL *a1@<X8>)
{
  long long v3 = v1[1];
  long long v20 = *v1;
  v21[0] = v3;
  *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)v1 + 28);
  outlined retain of Text.Layout.Line((uint64_t)&v20);
  specialized Collection.count.getter();
  uint64_t v5 = v4;
  outlined release of Text.Layout.Line((uint64_t)&v20);
  if (v5 < 1) {
    goto LABEL_19;
  }
  CGFloat v6 = (void *)v20;
  if ((v21[0] & 1) == 0)
  {
    outlined retain of Text.Layout.Line((uint64_t)&v20);
    outlined retain of Text.Layout.Line((uint64_t)&v20);

    swift_release();
LABEL_6:
    if (one-time initialization token for kitParagraphStyle != -1) {
      swift_once();
    }
    uint64_t v8 = (id)_CTLineGetRunAtIndex((const __CTLine *)v6, 0);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = (void *)MEMORY[0x24C522820](v9);
    swift_bridgeObjectRelease();
    CFDictionaryRef v11 = _CTRunGetAttributeValueForKey((const __CTRun *)v8, v10);

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)id v16 = 0u;
      long long v17 = 0u;
    }
    uint64_t v12 = MEMORY[0x263F8EE58] + 8;
    _sypSgWObTm_1((uint64_t)v16, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    swift_release();

    if (v19)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
      if (swift_dynamicCast())
      {
        id v13 = v16[0];
        goto LABEL_16;
      }
    }
    else
    {
      _sypSgWOhTm_1((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Any?, v12, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
    }
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F81658]), sel_init);
LABEL_16:
    id v14 = objc_msgSend(v13, sel_baseWritingDirection, v16[0], v16[1], v17);

    if (!v14)
    {
      BOOL v15 = 0;
      goto LABEL_21;
    }
    if (v14 == (id)1)
    {
      BOOL v15 = 1;
LABEL_21:
      *a1 = v15;
      return;
    }
LABEL_19:
    BOOL v15 = objc_msgSend(self, sel_defaultWritingDirectionForLanguage_, 0) == (id)1;
    goto LABEL_21;
  }
  outlined retain of Text.Layout.Line((uint64_t)&v20);
  id v7 = (id)_NSTextLineFragmentGetCTLine(v6);
  if (v7)
  {
    CGFloat v6 = v7;
    outlined release of Text.Layout.Line((uint64_t)&v20);
    goto LABEL_6;
  }
  __break(1u);
}

id Text.Layout.Line.paragraphStyle.getter()
{
  long long v1 = v0[1];
  long long v15 = *v0;
  v16[0] = v1;
  *(_OWORD *)((char *)v16 + 12) = *(long long *)((char *)v0 + 28);
  outlined retain of Text.Layout.Line((uint64_t)&v15);
  specialized Collection.count.getter();
  uint64_t v3 = v2;
  outlined release of Text.Layout.Line((uint64_t)&v15);
  if (v3 >= 1)
  {
    uint64_t v4 = (void *)v15;
    if (v16[0])
    {
      outlined retain of Text.Layout.Line((uint64_t)&v15);
      id result = (id)_NSTextLineFragmentGetCTLine(v4);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v4 = result;
      outlined release of Text.Layout.Line((uint64_t)&v15);
    }
    else
    {
      outlined retain of Text.Layout.Line((uint64_t)&v15);
      outlined retain of Text.Layout.Line((uint64_t)&v15);

      swift_release();
    }
    if (one-time initialization token for kitParagraphStyle != -1) {
      swift_once();
    }
    CGFloat v6 = (id)_CTLineGetRunAtIndex((const __CTLine *)v4, 0);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = (void *)MEMORY[0x24C522820](v7);
    swift_bridgeObjectRelease();
    CFDictionaryRef v9 = _CTRunGetAttributeValueForKey((const __CTRun *)v6, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    uint64_t v10 = MEMORY[0x263F8EE58] + 8;
    _sypSgWObTm_1((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    swift_release();

    if (v14)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
      if (swift_dynamicCast()) {
        return *(id *)&v12[0];
      }
    }
    else
    {
      _sypSgWOhTm_1((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Any?, v10, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
    }
  }
  id v11 = objc_msgSend(self, sel_defaultParagraphStyle);

  return v11;
}

void Text.Layout.Line.horizontalAlignmentFactor.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  char v3 = *((unsigned char *)v0 + 16);
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  int v6 = *((_DWORD *)v0 + 10);
  uint64_t v10 = *v0;
  uint64_t v11 = v1;
  char v12 = v3;
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  int v15 = v6;
  id v7 = Text.Layout.Line.paragraphStyle.getter();
  id v8 = objc_msgSend(v7, sel_horizontalAlignment);

  switch((unint64_t)v8)
  {
    case 0uLL:
    case 1uLL:
      uint64_t v10 = v2;
      uint64_t v11 = v1;
      char v12 = v3;
      uint64_t v13 = v5;
      uint64_t v14 = v4;
      int v15 = v6;
      Text.Layout.Line.baseWritingDirection.getter(&v9);
      break;
    default:
      return;
  }
}

uint64_t TextLinesLayer.init(layer:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v15);
  uint64_t v4 = v1;
  if (swift_dynamicCast())
  {
    uint64_t v5 = v14;
    uint64_t v6 = *(void *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 8];
    uint64_t v7 = *(void *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 16];
    id v8 = &v4[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
    long long v9 = *(_OWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 24];
    long long v10 = *(_OWORD *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content + 40];
    *(void *)id v8 = *(void *)&v14[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
    *((void *)v8 + 1) = v6;
    *((void *)v8 + 2) = v7;
    *(_OWORD *)(v8 + 24) = v9;
    *(_OWORD *)(v8 + 40) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    v13.receiver = v4;
    v13.super_class = ObjectType;
    id v11 = objc_msgSendSuper2(&v13, sel_initWithLayer_, v5);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v11;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in TextLinesLayer.draw(in:)(CGContext *a1, id a2, void *a3)
{
  objc_msgSend(a2, sel_contentsScale);
  uint64_t v7 = v6;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v8 = one-time initialization token for shared;
  id v9 = a2;
  id v10 = a3;
  if (v8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v11 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  char v12 = static CoreGlue2.shared;
  v11(&v15);

  v14[0] = v15;
  v14[1] = v16;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v14, v7, 0, (uint64_t)v9, (uint64_t)v10);

  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in TextLinesLayer.draw(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  Swift::String v51 = a1;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::String v50 = (char *)v46 - v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v58 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v60 = (uint64_t)v46 - v9;
  uint64_t v10 = a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content;
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(v10 + 8);
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout;
    swift_bridgeObjectRetain();
    uint64_t v59 = v13;
    swift_bridgeObjectRetain();
    uint64_t v57 = v14;
    if (v14)
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v56 = a3 + v15;
      double v18 = (void (**)(uint64_t, uint64_t))(v8 + 8);
      uint64_t v19 = v59 + 40;
      uint64_t v54 = v12 - 1;
      Swift::String v55 = v18;
      uint64_t v52 = a3;
      uint64_t v53 = v11;
      while (v16 < *(void *)(v59 + 16))
      {
        CFArrayRef v21 = *(char **)(v11 + v17 + 32);
        uint64_t v20 = *(void *)(v11 + v17 + 40);
        int v22 = *(unsigned __int8 *)(v11 + v17 + 48);
        uint64_t v23 = *(void *)(v11 + v17 + 56);
        uint64_t v24 = *(void *)(v11 + v17 + 64);
        int v61 = *(_DWORD *)(v11 + v17 + 72);
        int v62 = v22;
        if (v22)
        {
          outlined copy of Text.Layout.Line.Line(v21, v20, 1);
          location = (char *)objc_msgSend(v21, sel_characterRange);
          CFIndex length = v26;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v21, v20, 0);
          outlined copy of Text.Layout.Line.Line(v21, v20, 0);
          CFDictionaryRef v28 = v21;
          CFRange StringRange = CTLineGetStringRange(v28);
          location = (char *)StringRange.location;
          CFIndex length = StringRange.length;

          outlined consume of Text.Layout.Line.Line(v21, v20, 0);
        }
        if (__OFADD__(location, length)) {
          goto LABEL_23;
        }
        if ((uint64_t)&location[length] < (uint64_t)location) {
          goto LABEL_24;
        }
        uint64_t v63 = location;
        uint64_t v64 = &location[length];
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        uint64_t v30 = v60;
        RangeSet.init(_:)();
        _sypSgWObTm_1(v56, (uint64_t)v69, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
        _sypSgWObTm_1((uint64_t)v69, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
        if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v70) != 1)
        {
          uint64_t v31 = TextRenderLayer.textMarkers(for:)(v30);
          if (v31)
          {
            uint64_t v32 = v30;
            uint64_t v33 = v31;
            uint64_t v63 = v21;
            uint64_t v64 = (char *)v20;
            char v65 = v62;
            uint64_t v66 = v23;
            uint64_t v67 = v24;
            int v68 = v61;
            uint64_t v34 = type metadata accessor for Text.Effect.InteractionMetrics();
            uint64_t v35 = *(void *)(v34 - 8);
            uint64_t v36 = (uint64_t)v50;
            uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 56);
            uint64_t v48 = v34;
            v46[1] = v35 + 56;
            v47(v50, 1, 1);
            uint64_t v37 = swift_bridgeObjectRetain();
            id v38 = v51;
            TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v37, (uint64_t)&v63, v32, v36, v51);
            int v49 = v39;
            swift_bridgeObjectRelease();
            _sypSgWOhTm_1(v36, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
            uint64_t v40 = *v38;
            uint64_t v63 = v21;
            uint64_t v64 = (char *)v20;
            char v41 = v62;
            char v65 = v62;
            uint64_t v66 = v23;
            uint64_t v67 = v24;
            int v68 = v61;
            GraphicsContext.draw(_:options:)((uint64_t)&v63, 0, v40);
            if (v49)
            {
              swift_bridgeObjectRelease();
              unint64_t v42 = v51;
            }
            else
            {
              uint64_t v63 = v21;
              uint64_t v64 = (char *)v20;
              char v65 = v41;
              uint64_t v66 = v23;
              uint64_t v67 = v24;
              int v68 = v61;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v47)(v36, 1, 1, v48);
              unint64_t v42 = v51;
              TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v33, (uint64_t)&v63, v60, v36, v51);
              swift_bridgeObjectRelease();
              _sypSgWOhTm_1(v36, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
              char v41 = v62;
            }
            int v44 = v61;
          }
          else
          {
            unint64_t v42 = v51;
            uint64_t v43 = *v51;
            uint64_t v63 = v21;
            uint64_t v64 = (char *)v20;
            int v44 = v61;
            char v41 = v62;
            char v65 = v62;
            uint64_t v66 = v23;
            uint64_t v67 = v24;
            int v68 = v61;
            GraphicsContext.draw(_:options:)((uint64_t)&v63, 0, v43);
            uint64_t v36 = (uint64_t)v50;
          }
          uint64_t v63 = v21;
          uint64_t v64 = (char *)v20;
          char v65 = v41;
          uint64_t v66 = v23;
          uint64_t v67 = v24;
          int v68 = v44;
          uint64_t v45 = type metadata accessor for Text.Effect.InteractionMetrics();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v36, 1, 1, v45);
          uint64_t v30 = v60;
          TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v63, v60, v36, v42);
          _sypSgWOhTm_1(v36, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
        }
        (*v55)(v30, v58);
        outlined consume of Text.Layout.Line.Line(v21, v20, v62);
        if (v54 != v16)
        {
          ++v16;
          v19 += 16;
          v17 += 48;
          uint64_t v11 = v53;
          if (v57 != v16) {
            continue;
          }
        }
        goto LABEL_20;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t type metadata accessor for TextLinesLayer()
{
  return self;
}

uint64_t TextRunsLayer.init(layer:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v16);
  id v8 = v2;
  if (swift_dynamicCast())
  {
    uint64_t v9 = v15;
    uint64_t v10 = (uint64_t)v15 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
    swift_beginAccess();
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v10, (uint64_t)v7, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v7, (uint64_t)v8 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);

    v14.receiver = v8;
    v14.super_class = ObjectType;
    id v11 = objc_msgSendSuper2(&v14, sel_initWithLayer_, v9);
    objc_msgSend(v11, sel_setOpaque_, 0);
    objc_msgSend(v11, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v11;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t @objc TextLinesLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return a4(&v6);
}

uint64_t closure #1 in TextRunsLayer.draw(in:)(CGContext *a1, id a2, void *a3)
{
  objc_msgSend(a2, sel_contentsScale);
  uint64_t v7 = v6;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v8 = one-time initialization token for shared;
  id v9 = a3;
  id v10 = a2;
  if (v8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v11 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v12 = static CoreGlue2.shared;
  v11(&v15);

  v14[0] = v15;
  v14[1] = v16;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, (uint64_t)v14, v7, 0, (uint64_t)v9, v10);

  swift_release();
  return swift_release();
}

char *closure #1 in closure #1 in closure #1 in TextRunsLayer.draw(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v63 = a1;
  uint64_t v3 = MEMORY[0x263F8D6E0];
  type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
  uint64_t v5 = v4;
  uint64_t v60 = *(uint64_t **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v59 = (char *)&v50 - v6;
  *(void *)&long long v61 = type metadata accessor for RangeSet<>.IndexSequence;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v58 = (char *)&v50 - v8;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v57 = v9 - 8;
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v56 = (char *)&v50 - v10;
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, v3, MEMORY[0x263F8EDA0]);
  uint64_t v54 = v11;
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v12 = v52;
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int v62 = (char *)&v50 - v15;
  uint64_t v16 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0) - 8;
  MEMORY[0x270FA5388](v55);
  CFArrayRef v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a2 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
  swift_beginAccess();
  outlined init with copy of Text.Effect.RenderSegmentation.Segment(v22, (uint64_t)v19, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  uint64_t v24 = *(void **)v19;
  uint64_t v23 = *((void *)v19 + 1);
  LOBYTE(v3) = v19[16];
  int v50 = v3;
  uint64_t v25 = *((void *)v19 + 3);
  uint64_t v26 = *((void *)v19 + 4);
  int v51 = *((_DWORD *)v19 + 10);
  id v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  CFDictionaryRef v28 = v62;
  uint64_t v29 = v54;
  v27(v62, &v19[*(int *)(v17 + 32)], v54);
  *(void *)CFArrayRef v21 = v24;
  *((void *)v21 + 1) = v23;
  v21[16] = v3;
  *((void *)v21 + 3) = v25;
  *((void *)v21 + 4) = v26;
  *((_DWORD *)v21 + 10) = v51;
  uint64_t v30 = v53;
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  v27(v53, v31, v29);
  outlined copy of Text.Layout.Line.Line(v24, v23, v50);
  uint64_t v33 = v59;
  RangeSet.ranges.getter();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v52 + 8);
  v34(v30, v32);
  uint64_t v35 = v60;
  uint64_t v36 = (uint64_t)v58;
  ((void (*)(char *, char *, uint64_t))v60[4])(v58, v33, v5);
  uint64_t v37 = v56;
  ((void (*)(char *, uint64_t, uint64_t))v35[2])(&v56[*(int *)(v57 + 56)], v36, v5);
  *uint64_t v37 = 0;
  v37[1] = 0;
  v34(v62, v32);
  outlined destroy of RangeSet<Int><>.IndexSequence.Iterator(v36, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))v61);
  id v38 = (uint64_t *)&v21[*(int *)(v55 + 28)];
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v37, (uint64_t)v38);
  outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v19, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  uint64_t v39 = *v38;
  if (v39 >= RangeSet.Ranges.count.getter()) {
    return (char *)outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  }
  uint64_t v59 = v21;
  uint64_t v60 = v38;
  uint64_t v40 = v38[1];
  char v41 = *(char **)v21;
  uint64_t v42 = *((void *)v21 + 1);
  LODWORD(v62) = v21[16];
  long long v61 = *(_OWORD *)(v21 + 24);
  int v43 = *((_DWORD *)v21 + 10);
  while (1)
  {
    uint64_t result = (char *)RangeSet.Ranges.subscript.getter();
    uint64_t v48 = &v64[v40];
    if (__OFADD__(v64, v40)) {
      break;
    }
    if (__OFADD__(v40++, 1)) {
      goto LABEL_16;
    }
    uint64_t result = (char *)RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(v65, v64)) {
      goto LABEL_17;
    }
    if (v40 >= v65 - v64)
    {
      uint64_t v40 = 0;
      *uint64_t v60 = ++v39;
    }
    if (v62)
    {
      outlined copy of Text.Layout.Line.Line(v41, v42, 1);
      uint64_t result = (char *)(id)_NSTextLineFragmentGetCTLine(v41);
      if (!result) {
        goto LABEL_18;
      }
      uint64_t v45 = result;
      outlined consume of Text.Layout.Line.Line(v41, v42, 1);
      uint64_t v44 = 0;
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v41, v42, 0);
      outlined copy of Text.Layout.Line.Line(v41, v42, 0);

      swift_release();
      uint64_t v44 = v42;
      uint64_t v45 = v41;
    }
    uint64_t v46 = *v63;
    uint64_t v64 = v45;
    char v65 = v48;
    long long v66 = v61;
    int v67 = v43;
    uint64_t v68 = v44;
    GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)&v64, 0, 0, 1, 0, v46);

    swift_release();
    if (v39 >= RangeSet.Ranges.count.getter())
    {
      CFArrayRef v21 = v59;
      v60[1] = v40;
      return (char *)outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v21, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void @objc TextLinesLayer.draw(in:)(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t, id, id, uint64_t))
{
  id v6 = a3;
  id v12 = a1;
  id v7 = objc_msgSend(v12, sel_superlayer);
  if (v7)
  {
    uint64_t v8 = v7;
    type metadata accessor for TextRenderLayer(0);
    uint64_t v9 = swift_dynamicCastClass();
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = v6;
      id v6 = v12;
      id v12 = v8;
      a4(v10, v11, v6, v10);

      uint64_t v8 = v12;
    }

    id v6 = v12;
    id v12 = v8;
  }
}

uint64_t ObjC metadata update function for TextRunsLayer()
{
  return type metadata accessor for TextRunsLayer(0);
}

uint64_t type metadata accessor for TextRunsLayer(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TextRunsLayer);
}

uint64_t type metadata completion function for TextRunsLayer()
{
  uint64_t result = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t @objc StaticEffectLayer.init(layer:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  swift_unknownObjectRetain();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return DynamicEffectLayer.init(layer:)((uint64_t)&v8, a4, a5);
}

id DynamicEffectLayer.draw(inDisplayList:)(void *a1)
{
  uint64_t v2 = v1;
  id result = objc_msgSend(v2, sel_bounds);
  if (v6 > 0.0 && v5 > 0.0)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v7 = one-time initialization token for shared;
    id v8 = a1;
    if (v7 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v9 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v10 = static CoreGlue2.shared;
    v9(&v21);

    uint64_t v11 = v21;
    uint64_t v12 = v22;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 32) = xmmword_24619B520;
    *(void *)(v13 + 48) = 1065353216;
    *(void *)(v13 + 56) = 0x7FF8000000000000;
    v20[0] = v11;
    v20[1] = v12;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    id v14 = v8;
    *(void *)(v13 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v14, v20);
    *(void *)(v13 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v13 + 64) = 0;

    uint64_t v21 = v13;
    id v15 = objc_msgSend(v2, sel_superlayer);
    if (v15)
    {
      uint64_t v16 = v15;
      type metadata accessor for TextRenderLayer(0);
      uint64_t v17 = swift_dynamicCastClass();
      if (v17)
      {
        uint64_t v18 = (char *)v17;
        id v19 = v2;
        specialized TextRenderLayer.drawContent(_:)(v18, (uint64_t)v19, &v21);
      }
      else
      {
      }
    }
    return (id)swift_release();
  }
  return result;
}

uint64_t TextRenderLayer.draw(composition:segmentIndex:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v124 = a3;
  uint64_t v122 = a2;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v120 = (uint64_t)&v110 - v6;
  uint64_t v7 = type metadata accessor for Text.Effect.InteractionMetrics();
  uint64_t v118 = *(void *)(v7 - 8);
  uint64_t v119 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void **)((char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v11 = v10;
  uint64_t v121 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v110 - v12;
  id v15 = *(void **)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  int v16 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  int v126 = *(_DWORD *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v125 = *(void *)(a1 + 64);
  unint64_t v21 = v3;
  _sypSgWObTm_1(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v160, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v160, (uint64_t)v161, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v161);
  if (result != 1)
  {
    uint64_t v112 = v11;
    char v113 = v9;
    uint64_t v114 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
    uint64_t v115 = v13;
    uint64_t v23 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
    uint64_t v116 = v14;
    uint64_t v117 = v15;
    *(void *)&long long v138 = v15;
    *((void *)&v138 + 1) = v14;
    int v123 = v16;
    LOBYTE(v139) = v16;
    *((void *)&v139 + 1) = v17;
    *(void *)&long long v140 = v18;
    DWORD2(v140) = v126;
    *(void *)&long long v141 = v19;
    *((void *)&v141 + 1) = v20;
    uint64_t v24 = v125;
    *(void *)&long long v142 = v125;
    *(void *)&long long v129 = v23;
    BYTE8(v129) = 0;
    TextRenderLayer.compositionContext(_:time:)((uint64_t)&v138, (uint64_t)&v129, (uint64_t *)&v150);
    uint64_t v25 = *((void *)&v151 + 1);
    type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 24) = v23;
    long long v27 = v151;
    *(_OWORD *)(v26 + 32) = v150;
    *(_OWORD *)(v26 + 48) = v27;
    *(_OWORD *)(v26 + 64) = v152;
    *(void *)(v26 + 16) = MEMORY[0x263F8EE78];
    type metadata accessor for Text.Effect.DrawingContext.Storage();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 32) = 0;
    *(void *)(v28 + 40) = 0;
    *(void *)(v28 + 48) = 0x3FF0000000000000;
    *(void *)(v28 + 56) = 0;
    *(void *)(v28 + 64) = 0;
    *(void *)(v28 + 72) = 0x3FF0000000000000;
    *(void *)(v28 + 80) = 0;
    *(void *)(v28 + 88) = 0;
    *(unsigned char *)(v28 + 96) = 1;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 120) = 0u;
    *(_OWORD *)(v28 + 136) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v28 + 152) = _Q1;
    *(void *)(v28 + 168) = 0x3FF0000000000000;
    *(unsigned char *)(v28 + 176) = 0;
    *(_OWORD *)(v28 + 184) = 0u;
    *(_OWORD *)(v28 + 200) = 0u;
    *(void *)(v28 + 216) = 0;
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = 0x3FF0000000000000;
    uint64_t v34 = (char *)MEMORY[0x24C527E00](v25 + 16);
    if (v34)
    {
      double v35 = *(double *)&v34[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];
    }
    else
    {
      double v35 = 1.0;
    }
    uint64_t v36 = v124;
    v147[0] = v28;
    memset(&v147[1], 0, 24);
    char v148 = 1;
    double v149 = v35;
    uint64_t v38 = v116;
    uint64_t v37 = v117;
    *(void *)&long long v138 = v117;
    *((void *)&v138 + 1) = v116;
    char v39 = v123;
    LOBYTE(v139) = v123;
    *((void *)&v139 + 1) = v17;
    *(void *)&long long v140 = v18;
    DWORD2(v140) = v126;
    *(void *)&long long v141 = v19;
    *((void *)&v141 + 1) = v20;
    *(void *)&long long v142 = v24;
    Text.Effect.Composition.resolve(in:)((uint64_t)v147);
    uint64_t v124 = (uint64_t *)v147[0];
    uint64_t v40 = *(void *)(v147[0] + 16);
    swift_beginAccess();
    uint64_t v41 = *(void *)(v40 + 16);
    *(void *)(v40 + 16) = MEMORY[0x263F8EE78];
    uint64_t v42 = *(void *)(v21 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers);
    if (!v42 || !*(void *)(v42 + 16))
    {
      uint64_t v65 = *(void *)(v21 + v114);
      long long v66 = (_OWORD *)v124[2];
      long long v67 = v66[4];
      long long v68 = v66[2];
      long long v154 = v66[3];
      long long v155 = v67;
      long long v153 = v68;
      v128[0] = v68;
      uint64_t v158 = v154;
      uint64_t v159 = *((void *)&v67 + 1);
      *(void *)&long long v157 = v67;
      uint64_t v69 = *(void *)(v41 + 16);
      if (v69)
      {
        swift_bridgeObjectRetain();
        outlined retain of LinearGradient((uint64_t)v128);
        outlined retain of ViewTransform((uint64_t)&v158);
        swift_retain();
        outlined retain of LinearGradient((uint64_t)&v157);
        outlined retain of LinearGradient((uint64_t)&v159);
        uint64_t v70 = v69 - 1;
        for (uint64_t i = 32; ; i += 144)
        {
          long long v138 = *(_OWORD *)(v41 + i);
          long long v72 = *(_OWORD *)(v41 + i + 16);
          long long v73 = *(_OWORD *)(v41 + i + 32);
          long long v74 = *(_OWORD *)(v41 + i + 64);
          long long v141 = *(_OWORD *)(v41 + i + 48);
          long long v142 = v74;
          long long v139 = v72;
          long long v140 = v73;
          long long v75 = *(_OWORD *)(v41 + i + 80);
          long long v76 = *(_OWORD *)(v41 + i + 96);
          long long v77 = *(_OWORD *)(v41 + i + 128);
          long long v145 = *(_OWORD *)(v41 + i + 112);
          long long v146 = v77;
          long long v143 = v75;
          long long v144 = v76;
          long long v78 = *(_OWORD *)(v41 + i + 112);
          long long v135 = *(_OWORD *)(v41 + i + 96);
          long long v136 = v78;
          long long v137 = *(_OWORD *)(v41 + i + 128);
          long long v79 = *(_OWORD *)(v41 + i + 48);
          long long v131 = *(_OWORD *)(v41 + i + 32);
          long long v132 = v79;
          long long v80 = *(_OWORD *)(v41 + i + 80);
          long long v133 = *(_OWORD *)(v41 + i + 64);
          long long v134 = v80;
          long long v81 = *(_OWORD *)(v41 + i + 16);
          long long v129 = *(_OWORD *)(v41 + i);
          long long v130 = v81;
          uint64_t v156 = v65;
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v138, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(&v156, (uint64_t *)&v153, 0, 0, 1, v36);
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v138, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          if (!v70) {
            break;
          }
          --v70;
        }
        swift_bridgeObjectRelease_n();
      }
      else
      {
        outlined retain of LinearGradient((uint64_t)v128);
        outlined retain of ViewTransform((uint64_t)&v158);
        swift_retain();
        outlined retain of LinearGradient((uint64_t)&v157);
        outlined retain of LinearGradient((uint64_t)&v159);
        swift_bridgeObjectRelease();
      }
      outlined release of LinearGradient((uint64_t)v128);
      outlined release of ViewTransform((uint64_t)&v158);
      swift_release();
      outlined release of LinearGradient((uint64_t)&v157);
      outlined release of LinearGradient((uint64_t)&v159);
      return swift_release();
    }
    uint64_t v111 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers;
    outlined copy of Text.Layout.Line.Line(v37, v38, v39);
    unint64_t v110 = lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    uint64_t v43 = v24;
    swift_bridgeObjectRetain();
    char v44 = v39;
    uint64_t v45 = (uint64_t)v115;
    RangeSet.init()();
    *(void *)&long long v138 = v37;
    *((void *)&v138 + 1) = v38;
    LOBYTE(v139) = v44;
    *((void *)&v139 + 1) = v17;
    *(void *)&long long v140 = v18;
    unint64_t v110 = v21;
    int v46 = v126;
    DWORD2(v140) = v126;
    *(void *)&long long v141 = v19;
    *((void *)&v141 + 1) = v20;
    *(void *)&long long v142 = v43;
    *(void *)&long long v129 = v37;
    *((void *)&v129 + 1) = v38;
    LOBYTE(v130) = v44;
    *((void *)&v130 + 1) = v17;
    *(void *)&long long v131 = v18;
    DWORD2(v131) = v126;
    Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)&v129, v45);
    outlined consume of Text.Layout.Line.Line(v37, v38, v44);
    uint64_t v47 = v125;
    swift_bridgeObjectRelease();
    *(void *)&long long v138 = v37;
    *((void *)&v138 + 1) = v38;
    LOBYTE(v139) = v44;
    *((void *)&v139 + 1) = v17;
    *(void *)&long long v140 = v18;
    DWORD2(v140) = v46;
    unint64_t v48 = v110;
    *(void *)&long long v141 = v19;
    *((void *)&v141 + 1) = v20;
    uint64_t v49 = v114;
    uint64_t v50 = *(void *)(v110 + v114);
    *(void *)&long long v142 = v47;
    *(void *)&long long v129 = v50;
    uint64_t v52 = *(void *)(v110 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
    int v51 = *(char **)(v110 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
    uint64_t v53 = *(void *)(v110 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
    swift_beginAccess();
    uint64_t v54 = *(void *)(v53 + 112);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)((uint64_t)&v138, (uint64_t *)&v129, v52, v51, v54, v53, v122, v113);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v55 = TextRenderLayer.textMarkers(for:)((uint64_t)v115);
    if (v55)
    {
      uint64_t v56 = v55;
      if (*(void *)(v55 + 16))
      {
        uint64_t v58 = v116;
        uint64_t v57 = v117;
        *(void *)&long long v138 = v117;
        *((void *)&v138 + 1) = v116;
        char v59 = v123;
        LOBYTE(v139) = v123;
        *((void *)&v139 + 1) = v17;
        *(void *)&long long v140 = v18;
        DWORD2(v140) = v126;
        uint64_t v60 = v120;
        outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v113, v120, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v60, 0, 1, v119);
        uint64_t v61 = v58;
        uint64_t v49 = v114;
        outlined copy of Text.Layout.Line.Line(v57, v61, v59);
        TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(v56, (uint64_t)&v138, (uint64_t)v115, v60, v36);
        int v63 = v62;
        swift_bridgeObjectRelease();
        _sypSgWOhTm_1(v60, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
        outlined consume of Text.Layout.Line.Line((void *)v138, *((uint64_t *)&v138 + 1), v139);
        uint64_t v64 = (uint64_t *)v147[0];
LABEL_19:
        uint64_t v82 = *(void *)(v48 + v49);
        uint64_t v83 = (_OWORD *)v64[2];
        long long v84 = v83[4];
        long long v85 = v83[2];
        long long v154 = v83[3];
        long long v155 = v84;
        long long v153 = v85;
        long long v157 = v85;
        uint64_t v156 = v154;
        uint64_t v158 = *((void *)&v84 + 1);
        uint64_t v159 = v84;
        uint64_t v86 = *(void *)(v41 + 16);
        if (v86)
        {
          LODWORD(v125) = v63;
          swift_bridgeObjectRetain();
          outlined retain of LinearGradient((uint64_t)&v157);
          outlined retain of ViewTransform((uint64_t)&v156);
          swift_retain();
          outlined retain of LinearGradient((uint64_t)&v159);
          outlined retain of LinearGradient((uint64_t)&v158);
          uint64_t v87 = v86 - 1;
          for (uint64_t j = 32; ; j += 144)
          {
            long long v138 = *(_OWORD *)(v41 + j);
            long long v89 = *(_OWORD *)(v41 + j + 16);
            long long v90 = *(_OWORD *)(v41 + j + 32);
            long long v91 = *(_OWORD *)(v41 + j + 64);
            long long v141 = *(_OWORD *)(v41 + j + 48);
            long long v142 = v91;
            long long v139 = v89;
            long long v140 = v90;
            long long v92 = *(_OWORD *)(v41 + j + 80);
            long long v93 = *(_OWORD *)(v41 + j + 96);
            long long v94 = *(_OWORD *)(v41 + j + 128);
            long long v145 = *(_OWORD *)(v41 + j + 112);
            long long v146 = v94;
            long long v143 = v92;
            long long v144 = v93;
            long long v95 = *(_OWORD *)(v41 + j + 112);
            long long v135 = *(_OWORD *)(v41 + j + 96);
            long long v136 = v95;
            long long v137 = *(_OWORD *)(v41 + j + 128);
            long long v96 = *(_OWORD *)(v41 + j + 48);
            long long v131 = *(_OWORD *)(v41 + j + 32);
            long long v132 = v96;
            long long v97 = *(_OWORD *)(v41 + j + 80);
            long long v133 = *(_OWORD *)(v41 + j + 64);
            long long v134 = v97;
            long long v98 = *(_OWORD *)(v41 + j + 16);
            long long v129 = *(_OWORD *)(v41 + j);
            long long v130 = v98;
            uint64_t v127 = v82;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v138, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(&v127, (uint64_t *)&v153, 0, 0, 1, v36);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v138, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            if (!v87) {
              break;
            }
            --v87;
          }
          swift_bridgeObjectRelease_n();
          outlined release of LinearGradient((uint64_t)&v157);
          uint64_t v99 = v113;
          uint64_t v100 = v121;
          uint64_t v101 = (uint64_t)v115;
          LOBYTE(v63) = v125;
        }
        else
        {
          outlined retain of LinearGradient((uint64_t)&v157);
          outlined retain of ViewTransform((uint64_t)&v156);
          swift_retain();
          outlined retain of LinearGradient((uint64_t)&v159);
          outlined retain of LinearGradient((uint64_t)&v158);
          swift_bridgeObjectRelease();
          outlined release of LinearGradient((uint64_t)&v157);
          uint64_t v99 = v113;
          uint64_t v100 = v121;
          uint64_t v101 = (uint64_t)v115;
        }
        outlined release of ViewTransform((uint64_t)&v156);
        swift_release();
        outlined release of LinearGradient((uint64_t)&v159);
        outlined release of LinearGradient((uint64_t)&v158);
        if ((v63 & 1) == 0)
        {
          uint64_t v102 = TextRenderLayer.textMarkers(for:)(v101);
          if (v102)
          {
            uint64_t v103 = v102;
            if (*(void *)(v102 + 16))
            {
              uint64_t v105 = v116;
              uint64_t v104 = v117;
              *(void *)&long long v138 = v117;
              *((void *)&v138 + 1) = v116;
              LOBYTE(v139) = v123;
              *((void *)&v139 + 1) = v17;
              *(void *)&long long v140 = v18;
              DWORD2(v140) = v126;
              outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v99, v60, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v60, 0, 1, v119);
              outlined copy of Text.Layout.Line.Line(v104, v105, v123);
              TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(v103, (uint64_t)&v138, v101, v60, v36);
              swift_bridgeObjectRelease();
              _sypSgWOhTm_1(v60, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
              outlined consume of Text.Layout.Line.Line((void *)v138, *((uint64_t *)&v138 + 1), v139);
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
        uint64_t v106 = *(void *)(v48 + v111);
        if (v106)
        {
          if (*(void *)(v106 + 16))
          {
            uint64_t v108 = v116;
            char v107 = v117;
            *(void *)&long long v138 = v117;
            *((void *)&v138 + 1) = v116;
            char v109 = v123;
            LOBYTE(v139) = v123;
            *((void *)&v139 + 1) = v17;
            *(void *)&long long v140 = v18;
            DWORD2(v140) = v126;
            outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v99, v60, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v60, 0, 1, v119);
            outlined copy of Text.Layout.Line.Line(v107, v108, v109);
            TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)((uint64_t)&v138, v101, v60, v36);
            _sypSgWOhTm_1(v60, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
            outlined consume of Text.Layout.Line.Line((void *)v138, *((uint64_t *)&v138 + 1), v139);
          }
        }
        outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v101, v112);
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    int v63 = 0;
    uint64_t v60 = v120;
    uint64_t v64 = v124;
    goto LABEL_19;
  }
  return result;
}

uint64_t type metadata accessor for DynamicEffectLayer()
{
  return self;
}

uint64_t SharedDynamicLayer.init(layer:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v9);
  if (swift_dynamicCast())
  {
    uint64_t v4 = v8;
    v7.receiver = v1;
    v7.super_class = ObjectType;
    id v5 = objc_msgSendSuper2(&v7, sel_initWithLayer_, v8);
    objc_msgSend(v5, sel_setOpaque_, 0);
    objc_msgSend(v5, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v5;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void SharedDynamicLayer.draw(inDisplayList:)(void *a1)
{
  uint64_t v2 = v1;
  objc_msgSend(v2, sel_bounds);
  if (v5 > 0.0 && v4 > 0.0)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v6 = one-time initialization token for shared;
    id v7 = a1;
    if (v6 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v8 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v9 = static CoreGlue2.shared;
    v8(&v20);

    uint64_t v10 = v20;
    uint64_t v11 = v21;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 32) = xmmword_24619B520;
    *(void *)(v12 + 48) = 1065353216;
    *(void *)(v12 + 56) = 0x7FF8000000000000;
    v19[0] = v10;
    v19[1] = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    id v13 = v7;
    *(void *)(v12 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v13, v19);
    *(void *)(v12 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v12 + 64) = 0;

    uint64_t v20 = v12;
    id v14 = objc_msgSend(v2, sel_superlayer);
    if (v14)
    {
      id v15 = v14;
      type metadata accessor for TextRenderLayer(0);
      uint64_t v16 = swift_dynamicCastClass();
      if (v16)
      {
        uint64_t v17 = (char *)v16;
        id v18 = v2;
        specialized TextRenderLayer.drawContent(_:)(v17, v18, &v20);
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

void closure #1 in SharedDynamicLayer.draw(in:)(void *a1, uint64_t *a2)
{
  id v3 = objc_msgSend(a1, sel_superlayer);
  if (v3)
  {
    id v4 = v3;
    type metadata accessor for TextRenderLayer(0);
    if (swift_dynamicCastClass()) {
      TextRenderLayer.drawShared(in:)(a2);
    }
  }
}

void *TextRenderLayer.drawShared(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v54 = a1;
  uint64_t v3 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  uint64_t v60 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x263F8D6E0];
  type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
  uint64_t v9 = v8;
  uint64_t v58 = *(uint64_t **)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v56 = (char *)&v50 - v10;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v57 = (char *)&v50 - v12;
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, v7, MEMORY[0x263F8EDA0]);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v52 = (char *)&v50 - v19;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v51 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (uint64_t *)((char *)&v50 - v21);
  _sypSgWObTm_1(v2 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v70, (uint64_t)v71, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v71);
  if (result != 1)
  {
    uint64_t v53 = v2;
    uint64_t v24 = v2 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments;
    swift_beginAccess();
    uint64_t v55 = v9;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v26 = v52;
    v25(v52, v24, v14);
    v25(v17, (uint64_t)v26, v14);
    _sypSgWObTm_1((uint64_t)v70, (uint64_t)v69, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined retain of TextRenderLayer.Layout((uint64_t)v69);
    long long v27 = v56;
    RangeSet.ranges.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    v28(v17, v14);
    uint64_t v30 = (uint64_t)v57;
    uint64_t v29 = v58;
    uint64_t v31 = v27;
    uint64_t v32 = v55;
    ((void (*)(char *, char *, uint64_t))v58[4])(v57, v31, v55);
    v28(v26, v14);
    ((void (*)(char *, uint64_t, uint64_t))v29[2])((char *)v22 + *(int *)(v51 + 48), v30, v32);
    *uint64_t v22 = 0;
    v22[1] = 0;
    outlined destroy of RangeSet<Int><>.IndexSequence.Iterator(v30, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
    uint64_t v33 = *v22;
    uint64_t v34 = RangeSet.Ranges.count.getter();
    double v35 = v54;
    if (v33 >= v34)
    {
LABEL_23:
      outlined destroy of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v22, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
      return outlined release of TextRenderLayer.Layout?(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    }
    else
    {
      uint64_t v56 = &v72[(*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80)];
      uint64_t v57 = v72;
      uint64_t v58 = (uint64_t *)(v53 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements);
      swift_beginAccess();
      while (1)
      {
        uint64_t result = (void *)RangeSet.Ranges.subscript.getter();
        uint64_t v41 = v22[1];
        unint64_t v42 = (unint64_t)v61 + v41;
        if (__OFADD__(v61, v41)) {
          break;
        }
        uint64_t v43 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_26;
        }
        v22[1] = v43;
        uint64_t result = (void *)RangeSet.Ranges.subscript.getter();
        if (__OFSUB__(v62, v61)) {
          goto LABEL_27;
        }
        if (v43 >= v62 - (uint64_t)v61)
        {
          *uint64_t v22 = v33 + 1;
          v22[1] = 0;
        }
        v68[0] = *v35;
        if ((v42 & 0x8000000000000000) != 0) {
          goto LABEL_28;
        }
        if (v42 >= *(void *)(*v58 + 16)) {
          goto LABEL_29;
        }
        uint64_t v44 = *v58 + 16 * v42;
        double v45 = *(double *)(v44 + 32);
        double v46 = *(double *)(v44 + 40);
        uint64_t result = (void *)swift_retain();
        if (v45 != 0.0 || v46 != 0.0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v47 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v48 = swift_retain();
            v68[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v48, v47, 1, 0);
            swift_release();
          }
          uint64_t result = (void *)RBDrawingStateTranslateCTM();
        }
        if (v42 >= *((void *)v57 + 2)) {
          goto LABEL_30;
        }
        outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)&v56[*(void *)(v60 + 72) * v42], (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            swift_release();
            outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          }
          else
          {
            uint64_t v36 = (void *)*((void *)v6 + 3);
            uint64_t v37 = *((void *)v6 + 4);
            char v38 = v6[40];
            int v39 = *((_DWORD *)v6 + 16);
            uint64_t v40 = *((void *)v6 + 11);
            uint64_t v61 = v36;
            uint64_t v62 = v37;
            char v63 = v38;
            long long v64 = *((_OWORD *)v6 + 3);
            int v65 = v39;
            long long v66 = *(_OWORD *)(v6 + 72);
            uint64_t v67 = v40;
            outlined copy of Text.Layout.Line.Line(v36, v37, v38);
            swift_bridgeObjectRetain();
            TextRenderLayer.draw(composition:segmentIndex:in:)((uint64_t)&v61, v42, v68);
            outlined consume of Text.Layout.Line.Line(v36, v37, v38);
            swift_bridgeObjectRelease();
            outlined consume of Text.Layout.Line.Line(v36, v37, v38);
            double v35 = v54;
            swift_bridgeObjectRelease();
            swift_release();
          }
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v33 = *v22;
        if (v33 >= RangeSet.Ranges.count.getter()) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for SharedDynamicLayer()
{
  return self;
}

uint64_t DynamicEffectLayer.init(layer:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v24);
  uint64_t v8 = v3;
  if (swift_dynamicCast())
  {
    uint64_t v9 = v23;
    uint64_t v10 = &v23[*a2];
    uint64_t v12 = *((void *)v10 + 2);
    uint64_t v11 = (void *)*((void *)v10 + 3);
    uint64_t v13 = *((void *)v10 + 4);
    char v14 = v10[40];
    int v15 = *((_DWORD *)v10 + 16);
    uint64_t v16 = *((void *)v10 + 11);
    uint64_t v17 = &v8[*a2];
    long long v18 = *((_OWORD *)v10 + 3);
    long long v19 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v10;
    *((void *)v17 + 2) = v12;
    *((void *)v17 + 3) = v11;
    *((void *)v17 + 4) = v13;
    v17[40] = v14;
    *((_OWORD *)v17 + 3) = v18;
    *((_DWORD *)v17 + 16) = v15;
    *(_OWORD *)(v17 + 72) = v19;
    *((void *)v17 + 11) = v16;
    *(void *)&v8[*a3] = *(void *)&v9[*a3];
    outlined copy of Text.Layout.Line.Line(v11, v13, v14);
    swift_bridgeObjectRetain();

    v22.receiver = v8;
    v22.super_class = ObjectType;
    id v20 = objc_msgSendSuper2(&v22, sel_initWithLayer_, v9);
    objc_msgSend(v20, sel_setOpaque_, 0);
    objc_msgSend(v20, sel_setNeedsDisplay);

    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v20;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StaticEffectLayer.draw(in:)(CGContext *a1)
{
  objc_msgSend(v1, sel_contentsScale);
  uint64_t v4 = v3;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v5 = one-time initialization token for shared;
  id v6 = v1;
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v8 = static CoreGlue2.shared;
  v7(&v11);

  v10[0] = v11;
  v10[1] = v12;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v10, v4, 0, v6);

  swift_release();
  return swift_release();
}

void closure #1 in DynamicEffectLayer.draw(in:)(char *a1, uint64_t *a2, void *a3, void *a4)
{
  id v15 = objc_msgSend(a1, sel_superlayer);
  if (v15)
  {
    type metadata accessor for TextRenderLayer(0);
    if (swift_dynamicCastClass())
    {
      uint64_t v8 = &a1[*a3];
      uint64_t v9 = (void *)*((void *)v8 + 3);
      uint64_t v10 = *((void *)v8 + 4);
      char v11 = v8[40];
      int v12 = *((_DWORD *)v8 + 16);
      uint64_t v13 = *((void *)v8 + 11);
      v16[0] = v9;
      v16[1] = v10;
      char v17 = v11;
      long long v18 = *((_OWORD *)v8 + 3);
      int v19 = v12;
      long long v20 = *(_OWORD *)(v8 + 72);
      uint64_t v21 = v13;
      uint64_t v14 = *(void *)&a1[*a4];
      outlined copy of Text.Layout.Line.Line(v9, v10, v11);
      swift_bridgeObjectRetain();
      TextRenderLayer.draw(composition:segmentIndex:in:)((uint64_t)v16, v14, a2);

      outlined consume of Text.Layout.Line.Line(v9, v10, v11);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t @objc DynamicEffectLayer.__ivar_destroyer(uint64_t a1, uint64_t a2, void *a3)
{
  outlined consume of Text.Layout.Line.Line(*(void **)(a1 + *a3 + 24), *(void *)(a1 + *a3 + 32), *(unsigned char *)(a1 + *a3 + 40));

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for StaticEffectLayer()
{
  return self;
}

void LayerGeometryObserver.validateLayers()()
{
  uint64_t v3 = v0;
  unint64_t v4 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor;
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
  uint64_t v6 = (uint64_t)&unk_268EF7000;
  if (!v5)
  {
LABEL_9:
    id v15 = (void *)(v3 + *(void *)(v6 + 1872));
    swift_beginAccess();
    if (*v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v31) {
        return;
      }
    }
    else if (!*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      return;
    }
    LayerGeometryObserver.removeObservers()();
    *id v15 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver__root);
    *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver__root) = 0;

    return;
  }
  uint64_t v7 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if ((unint64_t)v8 >> 62)
  {
    id v17 = v5;
    swift_bridgeObjectRetain();
    id v9 = (id)_CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_4;
    }
LABEL_13:

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  id v9 = *(id *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v10 = v5;
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0) {
    goto LABEL_51;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_53;
  }
  for (id i = *(id *)(v8 + 32); ; id i = (id)MEMORY[0x24C523D60](0, v8))
  {
    int v12 = i;
    swift_bridgeObjectRelease();
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    id v13 = v5;
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {

      if (*(void *)(v3 + v4)) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    unint64_t v33 = MEMORY[0x263F8EE78];
    id v9 = v5;
    uint64_t v6 = 0;
    id v18 = v9;
    while (1)
    {
      id v19 = v5;
      id v20 = v18;
      MEMORY[0x24C522D60]();
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (objc_msgSend(v20, sel_masksToBounds))
      {
        if (v33 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v6 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
      }
      id v21 = objc_msgSend(v20, sel_superlayer);

      if (!v21) {
        break;
      }
      id v18 = v21;

      uint64_t v5 = v21;
    }
    objc_super v22 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver__root);
    *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver__root) = v5;
    id v1 = v19;

    unint64_t v4 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_47;
    }
    uint64_t v6 = v33;
    uint64_t v5 = (void *)(v33 >> 62);
    if (v33 >> 62) {
      goto LABEL_48;
    }
    uint64_t v8 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8 >= (uint64_t)v4) {
      goto LABEL_27;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    ;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v32 < 0)
  {
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8 < (uint64_t)v4) {
    goto LABEL_50;
  }
LABEL_27:
  if ((v6 & 0xC000000000000001) != 0 && v4)
  {
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    Swift::Int v23 = 0;
    do
    {
      Swift::Int v24 = v23 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v23);
      Swift::Int v23 = v24;
    }
    while (v4 != v24);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v2 = v25;
    uint64_t v5 = v26;
    unint64_t v4 = v27;
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
    uint64_t v2 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v4 = (2 * v4) | 1;
    swift_bridgeObjectRetain();
    if ((v4 & 1) == 0) {
      goto LABEL_35;
    }
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v29 = swift_dynamicCastClass();
  if (!v29)
  {
    swift_unknownObjectRelease();
    uint64_t v29 = MEMORY[0x263F8EE78];
  }
  uint64_t v30 = *(void *)(v29 + 16);
  swift_release();
  if (!__OFSUB__(v4 >> 1, v5))
  {
    if (v30 != (v4 >> 1) - (void)v5) {
      goto LABEL_54;
    }
    unint64_t v28 = swift_dynamicCastClass();
    if (!v28)
    {
      swift_unknownObjectRelease();
      unint64_t v28 = MEMORY[0x263F8EE78];
    }
    goto LABEL_42;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  swift_unknownObjectRelease();
LABEL_35:
  unint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v2, (uint64_t)v5, v4);
LABEL_42:
  swift_unknownObjectRelease();
  LayerGeometryObserver.updateObserversIfChanged(_:)(v28);
  swift_release();

  swift_bridgeObjectRelease();
}

void LayerGeometryObserver.updateObserversIfChanged(_:)(unint64_t a1)
{
  swift_getObjectType();
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v4 = (unint64_t *)(v1
                            + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
    swift_beginAccess();
    if (*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v3 != v10)
      {
LABEL_23:
        LayerGeometryObserver.removeObservers()();
        *unint64_t v4 = a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        closure #1 in LayerGeometryObserver.addObservers()((uint64_t)&static LayerGeometryObserver.context, v1);
        swift_endAccess();
        return;
      }
    }
    else if (v3 != *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_23;
    }
    if (v3 < 0) {
      break;
    }
    if (!v3) {
      return;
    }
    unint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x24C523D60](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      swift_beginAccess();
      unint64_t v8 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = MEMORY[0x24C523D60](v5);
        swift_endAccess();
        swift_unknownObjectRelease();
      }
      else
      {
        if (v5 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_20;
        }
        uint64_t v9 = *(void *)(v8 + 8 * v5 + 32);
        swift_endAccess();
      }

      if (v7 != (void *)v9) {
        goto LABEL_23;
      }
      if (v3 == ++v5) {
        return;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

uint64_t LayerGeometryObserver.removeObservers()()
{
  uint64_t v1 = (unint64_t *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x24C523D60](v5, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      unint64_t v8 = (void *)MEMORY[0x24C522820](0x73646E756F62, 0xE600000000000000);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v8, &static LayerGeometryObserver.context);

      uint64_t v9 = (void *)MEMORY[0x24C522820](0x6E6F697469736F70, 0xE800000000000000);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v9, &static LayerGeometryObserver.context);

      uint64_t v10 = (void *)MEMORY[0x24C522820](0x6F50726F68636E61, 0xEB00000000746E69);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v10, &static LayerGeometryObserver.context);

      char v11 = (void *)MEMORY[0x24C522820](0x726F66736E617274, 0xE90000000000006DLL);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v11, &static LayerGeometryObserver.context);

      int v12 = (void *)MEMORY[0x24C522820](0x426F54736B73616DLL, 0xED000073646E756FLL);
      objc_msgSend(v7, sel_removeObserver_forKeyPath_context_, v0, v12, &static LayerGeometryObserver.context);
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void LayerGeometryObserver.clip(bounds:for:)(void *a1, CGFloat x, CGFloat y, CGFloat width, CGFloat height)
{
  LayerGeometryObserver.validateLayers()();
  unint64_t v11 = v5 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers;
  swift_beginAccess();
  unint64_t v12 = *(void *)v11;
  if (*(void *)v11 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v14 = swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_12;
    }
  }
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v16 = (id)MEMORY[0x24C523D60](i, v12);
    }
    else {
      id v16 = *(id *)(v12 + 8 * i + 32);
    }
    id v17 = v16;
    if (objc_msgSend(v16, sel_masksToBounds))
    {
      objc_msgSend(v17, sel_bounds);
      objc_msgSend(a1, sel_convertRect_fromLayer_, v17);
      v32.origin.CGFloat x = v18;
      v32.origin.CGFloat y = v19;
      v32.size.double width = v20;
      v32.size.double height = v21;
      v29.origin.CGFloat x = x;
      v29.origin.CGFloat y = y;
      v29.size.double width = width;
      v29.size.double height = height;
      CGRect v30 = CGRectIntersection(v29, v32);
      CGFloat x = v30.origin.x;
      CGFloat y = v30.origin.y;
      double width = v30.size.width;
      double height = v30.size.height;
    }
  }
LABEL_12:
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)v11;
  if (!(v11 >> 62))
  {
    uint64_t v22 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22) {
      goto LABEL_14;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  if (!v22) {
    goto LABEL_23;
  }
LABEL_14:
  unint64_t v14 = v22 - 1;
  if (__OFSUB__(v22, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_26:
    id v23 = (id)MEMORY[0x24C523D60](v14, v11);
    goto LABEL_19;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v14 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    __break(1u);
    return;
  }
  id v23 = *(id *)(v11 + 8 * v14 + 32);
LABEL_19:
  Swift::Int v24 = v23;
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v24, sel_masksToBounds) & 1) == 0)
  {
    objc_msgSend(v24, sel_bounds);
    objc_msgSend(a1, sel_convertRect_fromLayer_, v24);
    v33.origin.CGFloat x = v25;
    v33.origin.CGFloat y = v26;
    v33.size.double width = v27;
    v33.size.double height = v28;
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.double width = width;
    v31.size.double height = height;
    CGRectIntersection(v31, v33);
  }
}

uint64_t closure #1 in LayerGeometryObserver.addObservers()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a2
                          + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_observedLayers);
  swift_beginAccess();
  unint64_t v4 = *v3;
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x24C523D60](v7, v4);
      }
      else {
        id v8 = *(id *)(v4 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      ++v7;
      uint64_t v10 = (void *)MEMORY[0x24C522820](0x73646E756F62, 0xE600000000000000);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v10, 1, &static LayerGeometryObserver.context);

      unint64_t v11 = (void *)MEMORY[0x24C522820](0x6E6F697469736F70, 0xE800000000000000);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v11, 1, a1);

      unint64_t v12 = (void *)MEMORY[0x24C522820](0x6F50726F68636E61, 0xEB00000000746E69);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v12, 1, &static LayerGeometryObserver.context);

      uint64_t v13 = (void *)MEMORY[0x24C522820](0x726F66736E617274, 0xE90000000000006DLL);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v13, 1, &static LayerGeometryObserver.context);

      unint64_t v14 = (void *)MEMORY[0x24C522820](0x426F54736B73616DLL, 0xED000073646E756FLL);
      objc_msgSend(v9, sel_addObserver_forKeyPath_options_context_, a2, v14, 1, &static LayerGeometryObserver.context);
    }
    while (v5 != v7);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void LayerGeometryObserver.observeValue(forKeyPath:of:change:context:)(uint64_t a1, void *a2, uint64_t a3, Class isa, void *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (!a5 || a5 != &static LayerGeometryObserver.context)
  {
    if (a2) {
      a2 = (void *)MEMORY[0x24C522820](a1, a2);
    }
    outlined init with copy of Any?(a3, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TextRenderLayer.Layout?);
    uint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = __swift_project_boxed_opaque_existential_1(v23, v24);
      uint64_t v15 = *(void *)(v13 - 8);
      double v16 = MEMORY[0x270FA5388](v14);
      CGFloat v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v15 + 16))(v18, v16);
      uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      if (!isa)
      {
LABEL_12:
        v22.receiver = v5;
        v22.super_class = ObjectType;
        objc_msgSendSuper2(&v22, sel_observeValueForKeyPath_ofObject_change_context_, a2, v19, isa, a5);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v19 = 0;
      if (!isa) {
        goto LABEL_12;
      }
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  unint64_t v12 = (void *)MEMORY[0x24C527E00](&v5[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_renderer]);
  if (v12)
  {
    id v21 = v12;
    TextEffectsRenderer.layerGeometryDidChange()();
  }
}

Swift::Void __swiftcall TextEffectsRenderer.layerGeometryDidChange()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v26 = v8;
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v11 = v2 + 16;
    unint64_t v12 = v13;
    uint64_t v14 = v8 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v31 = *(void *)(v11 + 56);
    CGRect v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    CGRect v29 = (void (**)(char *, uint64_t))(v11 - 8);
    CGRect v30 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    CGRect v33 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    unint64_t v25 = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    CGFloat v27 = v10;
    CGFloat v28 = v13;
    while (1)
    {
      v12(v7, v14, v1);
      uint64_t v15 = *v33;
      (*v33)(v7, 0, 1, v1);
      if ((*v32)(v7, 1, v1) == 1) {
        break;
      }
      (*v30)(v4, v7, v1);
      swift_beginAccess();
      uint64_t v16 = *v10;
      if (*(void *)(*v10 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v18 & 1) != 0))
      {
        uint64_t v19 = *(void **)(*(void *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        uint64_t v20 = v11;
        id v21 = *v29;
        objc_super v22 = v19;
        v21(v4, v1);
        uint64_t v11 = v20;
        uint64_t v10 = v27;
        unint64_t v12 = v28;
        id v23 = *(unsigned char **)&v22[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        v23[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] |= 0x40u;
        objc_msgSend(v23, sel_setNeedsLayout, v25, v26);
      }
      else
      {
        swift_endAccess();
        (*v29)(v4, v1);
      }
      v14 += v31;
      if (!--v9)
      {
        v15(v7, 1, 1, v1);
        break;
      }
    }
  }
  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
    v24(v7, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for LayerGeometryObserver()
{
  return self;
}

uint64_t type metadata accessor for TextEffectKeyframeBox()
{
  return self;
}

double CGRect.roundedCoordinates(toMultipleOf:)(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v13.origin.CGFloat x = a3;
  v13.origin.CGFloat y = a4;
  v13.size.double width = a5;
  v13.size.double height = a6;
  double v11 = floor(CGRectGetMinX(v13) / a1) * a1;
  v14.origin.CGFloat x = a3;
  v14.origin.CGFloat y = a4;
  v14.size.double width = a5;
  v14.size.double height = a6;
  CGRectGetMaxX(v14);
  v15.origin.CGFloat x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.double width = a5;
  v15.size.double height = a6;
  CGRectGetMinY(v15);
  v16.origin.CGFloat x = a3;
  v16.origin.CGFloat y = a4;
  v16.size.double width = a5;
  v16.size.double height = a6;
  CGRectGetMaxY(v16);
  return v11;
}

void TextRenderLayer.SegmentLayer.updateEffect(dynamic:superlayer:segmentIndex:)(char a1, char *a2, unint64_t a3)
{
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v11 = (char *)&v89 - v10;
  unint64_t v12 = *v3;
  unint64_t v13 = *v3 >> 62;
  if (v13 == 2)
  {
    if (a1) {
      return;
    }
    long long v94 = v3;
    id v93 = (id)(v12 & 0x3FFFFFFFFFFFFFFFLL);
    unint64_t v95 = a3;
    uint64_t v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL)
        + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content;
    long long v92 = *(_OWORD *)v14;
    uint64_t v16 = *(void *)(v14 + 16);
    CGRect v15 = *(void **)(v14 + 24);
    uint64_t v17 = *(void *)(v14 + 32);
    char v18 = *(unsigned char *)(v14 + 40);
    uint64_t v19 = *(void *)(v14 + 48);
    uint64_t v20 = *(void *)(v14 + 56);
    int v21 = *(_DWORD *)(v14 + 64);
    uint64_t v22 = *(void *)(v14 + 72);
    uint64_t v23 = *(void *)(v14 + 80);
    uint64_t v24 = a2;
    uint64_t v25 = *(void *)(v14 + 88);
    uint64_t v26 = (objc_class *)type metadata accessor for StaticEffectLayer();
    CGFloat v27 = (char *)objc_allocWithZone(v26);
    CGFloat v28 = &v27[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
    *(_OWORD *)CGFloat v28 = v92;
    *((void *)v28 + 2) = v16;
    *((void *)v28 + 3) = v15;
    *((void *)v28 + 4) = v17;
    v28[40] = v18;
    *((void *)v28 + 6) = v19;
    *((void *)v28 + 7) = v20;
    *((_DWORD *)v28 + 16) = v21;
    *((void *)v28 + 9) = v22;
    *((void *)v28 + 10) = v23;
    *((void *)v28 + 11) = v25;
    *(void *)&v27[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_segmentIndex] = v95;
    outlined copy of Text.Layout.Line.Line(v15, v17, v18);
    v102.receiver = v27;
    v102.super_class = v26;
    swift_bridgeObjectRetain();
    id v29 = objc_msgSendSuper2(&v102, sel_init);
    objc_msgSend(v29, sel_setOpaque_, 0);
    objc_msgSend(v29, sel_setNeedsDisplay);
    objc_msgSend(v29, sel_setDelegate_, v24);
    CGRect v30 = *(void **)(v14 + 24);
    uint64_t v31 = *(void *)(v14 + 32);
    LOBYTE(v26) = *(unsigned char *)(v14 + 40);
    int v32 = *(_DWORD *)(v14 + 64);
    uint64_t v33 = *(void *)(v14 + 88);
    v96[0] = (uint64_t)v30;
    v96[1] = v31;
    char v97 = (char)v26;
    long long v98 = *(_OWORD *)(v14 + 48);
    int v99 = v32;
    long long v34 = *(_OWORD *)(v14 + 72);
    unint64_t v35 = v95;
    long long v100 = v34;
    uint64_t v101 = v33;
    outlined copy of Text.Layout.Line.Line(v30, v31, (char)v26);
    swift_bridgeObjectRetain();
    double v36 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)(v96, v35, 0);
    CGFloat v38 = v37;
    CGFloat v40 = v39;
    CGFloat v42 = v41;
    uint64_t v43 = v24;
    outlined consume of Text.Layout.Line.Line(v30, v31, (char)v26);
    swift_bridgeObjectRelease();
    TextRenderLayer.pixelLength.getter();
    double v45 = v44;
    v105.origin.CGFloat x = v36;
    v105.origin.CGFloat y = v38;
    v105.size.double width = v40;
    v105.size.double height = v42;
    double MinX = CGRectGetMinX(v105);
    v106.origin.CGFloat x = v36;
    v106.origin.CGFloat y = v38;
    v106.size.double width = v40;
    v106.size.double height = v42;
    double MaxX = CGRectGetMaxX(v106);
    v107.origin.CGFloat x = v36;
    v107.origin.CGFloat y = v38;
    v107.size.double width = v40;
    v107.size.double height = v42;
    double MinY = CGRectGetMinY(v107);
    v108.origin.CGFloat x = v36;
    v108.origin.CGFloat y = v38;
    v108.size.double width = v40;
    v108.size.double height = v42;
    double MaxY = CGRectGetMaxY(v108);
    uint64_t v50 = &v24[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements];
    swift_beginAccess();
    if ((v35 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(*(void *)v50 + 16) > v35)
    {
      double v51 = v45 * floor(MinX / v45);
      double v52 = ceil(MaxX / v45);
      double v53 = v45 * floor(MinY / v45);
      double v54 = v45 * ceil(MaxY / v45);
      double v55 = v45 * v52 - v51;
      double v56 = v54 - v53;
      objc_msgSend(v29, sel_setFrame_, v51 + *(double *)(*(void *)v50 + 16 * v35 + 32), v53 + *(double *)(*(void *)v50 + 16 * v35 + 40), v55, v54 - v53);
      objc_msgSend(v29, sel_setBounds_, v51, v53, v55, v56);
      unint64_t v57 = (unint64_t)v29;
      double v58 = 1.0;
      if (objc_msgSend(v24, sel_delegate))
      {
        type metadata accessor for TextRenderSurface();
        uint64_t v59 = swift_dynamicCastClass();
        id v60 = v93;
        uint64_t v61 = v94;
        if (v59)
        {
          uint64_t v62 = v94;
          uint64_t v63 = MEMORY[0x24C527E00](v59 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
          if (v63)
          {
            long long v64 = (void *)v63;
            double v58 = *(double *)(v63 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
          }
          uint64_t v61 = v62;
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v60 = v93;
        uint64_t v61 = v94;
      }
      objc_msgSend((id)v57, sel_setContentsScale_, v58);

      objc_msgSend(v43, sel_insertSublayer_above_, v57, v60);
      unint64_t v88 = 0xC000000000000000;
      goto LABEL_27;
    }
    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v13 != 3) {
    goto LABEL_31;
  }
  if ((a1 & 1) == 0) {
    return;
  }
  long long v94 = v3;
  id v93 = (id)(v12 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v65 = (v12 & 0x3FFFFFFFFFFFFFFFLL)
      + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content;
  long long v91 = *(_OWORD *)v65;
  long long v66 = *(void **)(v65 + 24);
  uint64_t v90 = *(void *)(v65 + 16);
  *(void *)&long long v92 = a2;
  uint64_t v67 = *(void *)(v65 + 32);
  char v68 = *(unsigned char *)(v65 + 40);
  uint64_t v69 = *(void *)(v65 + 48);
  uint64_t v70 = *(void *)(v65 + 56);
  HIDWORD(v89) = *(_DWORD *)(v65 + 64);
  uint64_t v71 = *(void *)(v65 + 72);
  uint64_t v72 = *(void *)(v65 + 80);
  uint64_t v73 = *(void *)(v65 + 88);
  long long v74 = (objc_class *)type metadata accessor for DynamicEffectLayer();
  unint64_t v95 = a3;
  long long v75 = v74;
  long long v76 = (char *)objc_allocWithZone(v74);
  long long v77 = &v76[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
  *(_OWORD *)long long v77 = v91;
  *((void *)v77 + 2) = v90;
  *((void *)v77 + 3) = v66;
  *((void *)v77 + 4) = v67;
  v77[40] = v68;
  *((void *)v77 + 6) = v69;
  *((void *)v77 + 7) = v70;
  *((_DWORD *)v77 + 16) = HIDWORD(v89);
  *((void *)v77 + 9) = v71;
  *((void *)v77 + 10) = v72;
  *((void *)v77 + 11) = v73;
  *(void *)&v76[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex] = a3;
  uint64_t v78 = v67;
  long long v79 = (char *)v92;
  outlined copy of Text.Layout.Line.Line(v66, v78, v68);
  v104.receiver = v76;
  v104.super_class = v75;
  swift_bridgeObjectRetain();
  unint64_t v57 = (unint64_t)objc_msgSendSuper2(&v104, sel_init);
  objc_msgSend((id)v57, sel_setOpaque_, 0);
  objc_msgSend((id)v57, sel_setNeedsDisplay);

  objc_msgSend((id)v57, sel_setDelegate_, v79);
  long long v80 = &v79[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v80, v8);
  unint64_t v103 = v95;
  LOBYTE(v80) = RangeSet.contains(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v80)
  {
    objc_msgSend((id)v57, sel_setFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend((id)v57, sel_setHidden_, 1);
    id v60 = v93;
  }
  else
  {
    id v81 = (id)v57;
    id v60 = v93;
    objc_msgSend(v93, sel_frame);
    objc_msgSend(v81, sel_setFrame_);

    id v82 = v81;
    objc_msgSend(v60, sel_bounds);
    objc_msgSend(v82, sel_setBounds_);
  }
  id v83 = objc_msgSend(v79, sel_delegate);
  double v84 = 1.0;
  uint64_t v61 = v94;
  if (v83)
  {
    type metadata accessor for TextRenderSurface();
    uint64_t v85 = swift_dynamicCastClass();
    if (v85)
    {
      uint64_t v86 = MEMORY[0x24C527E00](v85 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
      if (v86)
      {
        uint64_t v87 = (void *)v86;
        double v84 = *(double *)(v86 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      uint64_t v61 = v94;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  objc_msgSend((id)v57, sel_setContentsScale_, v84);
  objc_msgSend(v79, sel_insertSublayer_above_, v57, v60);
  unint64_t v88 = 0x8000000000000000;
LABEL_27:
  objc_msgSend(v60, sel_removeFromSuperlayer);

  unint64_t *v61 = v88 | v57;
}

double TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)(uint64_t *a1, uint64_t a2, char a3)
{
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  int v7 = *((_DWORD *)a1 + 10);
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  CGFloat v10 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
  uint64_t v11 = a1[8];
  uint64_t v480 = a1[1];
  uint64_t v481 = *a1;
  *(void *)&long long v575 = *a1;
  *((void *)&v575 + 1) = v480;
  char v479 = v4;
  LOBYTE(v576) = v4;
  uint64_t v477 = v6;
  uint64_t v478 = v5;
  *((void *)&v576 + 1) = v5;
  *(void *)&long long v577 = v6;
  int v476 = v7;
  DWORD2(v577) = v7;
  uint64_t v474 = v9;
  uint64_t v475 = v8;
  *(void *)&long long v578 = v8;
  *((void *)&v578 + 1) = v9;
  uint64_t v473 = v11;
  *(void *)&long long v579 = v11;
  v570.CGFloat a = v10;
  LOBYTE(v570.b) = 0;
  TextRenderLayer.compositionContext(_:time:)((uint64_t)&v575, (uint64_t)&v570, (uint64_t *)&v585);
  uint64_t v12 = *((void *)&v586 + 1);
  type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
  uint64_t v13 = swift_allocObject();
  *(CGFloat *)(v13 + 24) = v10;
  long long v14 = v586;
  *(_OWORD *)(v13 + 32) = v585;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 64) = v587;
  uint64_t v15 = MEMORY[0x263F8EE78];
  *(void *)(v13 + 16) = MEMORY[0x263F8EE78];
  type metadata accessor for Text.Effect.DrawingContext.Storage();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 0x3FF0000000000000;
  *(void *)(v16 + 56) = 0;
  *(void *)(v16 + 64) = 0;
  *(void *)(v16 + 72) = 0x3FF0000000000000;
  *(void *)(v16 + 80) = 0;
  *(void *)(v16 + 88) = 0;
  *(unsigned char *)(v16 + 96) = 1;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v16 + 152) = _Q1;
  *(void *)(v16 + 168) = 0x3FF0000000000000;
  *(unsigned char *)(v16 + 176) = 0;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(void *)(v16 + 216) = 0;
  *(void *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = 0x3FF0000000000000;
  uint64_t v22 = (char *)MEMORY[0x24C527E00](v12 + 16);
  if (v22)
  {
    double v23 = *(double *)&v22[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale];
  }
  else
  {
    double v23 = 1.0;
  }
  v582[0] = v16;
  memset(&v582[1], 0, 24);
  char v583 = 1;
  double v584 = v23;
  *(void *)&long long v575 = v481;
  *((void *)&v575 + 1) = v480;
  LOBYTE(v576) = v479;
  *((void *)&v576 + 1) = v478;
  *(void *)&long long v577 = v477;
  DWORD2(v577) = v476;
  *(void *)&long long v578 = v475;
  *((void *)&v578 + 1) = v474;
  *(void *)&long long v579 = v473;
  Text.Effect.Composition.resolve(in:)((uint64_t)v582);
  uint64_t v24 = v582[0];
  uint64_t v25 = *(void *)(v582[0] + 16);
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = v15;
  CGFloat v27 = *(_OWORD **)(v24 + 16);
  long long v28 = v27[4];
  long long v29 = v27[2];
  long long v589 = v27[3];
  long long v590 = v28;
  long long v588 = v29;
  long long v592 = v29;
  uint64_t v591 = v589;
  uint64_t v593 = *((void *)&v28 + 1);
  v594[0] = v28;
  CGFloat v30 = *MEMORY[0x263F001A0];
  CGFloat v31 = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v32 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v33 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v34 = *(void *)(v26 + 16);
  if (v34)
  {
    uint64_t v35 = v26 + 32;
    double v36 = (uint64_t *)(v589 + 40);
    v503 = (uint64_t *)(v589 + 32);
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)&v592);
    outlined retain of ViewTransform((uint64_t)&v591);
    swift_retain();
    outlined retain of LinearGradient((uint64_t)v594);
    outlined retain of LinearGradient((uint64_t)&v593);
    v513 = v36;
    swift_beginAccess();
    uint64_t v37 = 0;
    CGFloat v38 = v30;
    CGFloat v39 = v31;
    CGFloat v40 = v32;
    CGFloat v41 = v33;
    double v532 = v30;
    double r2_8 = v31;
    double r2_24 = v32;
    double r2_16 = v33;
    uint64_t v487 = v34;
    uint64_t v486 = v35;
    do
    {
      double v46 = (long long *)(v35 + 144 * v37);
      long long v575 = *v46;
      long long v47 = v46[1];
      long long v48 = v46[2];
      long long v49 = v46[3];
      long long v579 = v46[4];
      long long v578 = v49;
      long long v577 = v48;
      long long v576 = v47;
      long long v50 = v46[5];
      long long v51 = v46[6];
      long long v52 = v46[7];
      *(_OWORD *)&v581.tCGFloat x = v46[8];
      *(_OWORD *)&v581.CGFloat c = v52;
      *(_OWORD *)&v581.CGFloat a = v51;
      long long v580 = v50;
      if (*((double *)&v50 + 1) <= 0.0009765625)
      {
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        CGFloat v42 = v30;
        CGFloat v43 = v31;
        CGFloat v44 = v32;
        CGFloat v45 = v33;
      }
      else
      {
        uint64_t v496 = v37;
        long long v53 = v575;
        CGFloat v542 = *((double *)&v576 + 1);
        CGFloat v54 = *(double *)&v576;
        CGFloat v55 = *(double *)&v577;
        uint64_t v57 = *((void *)&v578 + 1);
        CFIndex v56 = v578;
        double v492 = v41;
        double v493 = v40;
        double v494 = v39;
        double v495 = v38;
        switch(v580 >> 5)
        {
          case 1:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            swift_retain_n();
            long long v75 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v53, *((CFIndex *)&v53 + 1));
            if (__OFSUB__(v57, v56)) {
              goto LABEL_282;
            }
            long long v76 = v75;
            v596.location = v56;
            v596.CFIndex length = v57 - v56;
            CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v75, 0, v596);
            CGFloat x = ImageBounds.origin.x;
            CGFloat y = ImageBounds.origin.y;
            CGFloat width = ImageBounds.size.width;
            CGFloat height = ImageBounds.size.height;

            v570.CGFloat b = 0.0;
            v570.CGFloat c = 0.0;
            v570.CGFloat a = 1.0;
            v570.CGFloat d = -1.0;
            v570.tCGFloat x = v54;
            v570.tCGFloat y = v542;
            v615.origin.CGFloat x = x;
            v615.origin.CGFloat y = y;
            v615.size.CGFloat width = width;
            v615.size.CGFloat height = height;
            CGRect v616 = CGRectApplyAffineTransform(v615, &v570);
            CGFloat v81 = v616.origin.x;
            CGFloat v82 = v616.origin.y;
            CGFloat v83 = v616.size.width;
            CGFloat v84 = v616.size.height;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            v617.origin.CGFloat x = v81;
            v617.origin.CGFloat y = v82;
            v617.size.CGFloat width = v83;
            v617.size.CGFloat height = v84;
            CGRect v618 = CGRectInset(v617, -1.0, -1.0);
            CGFloat v30 = v618.origin.x;
            CGFloat v31 = v618.origin.y;
            CGFloat v32 = v618.size.width;
            CGFloat v33 = v618.size.height;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            uint64_t v85 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
            goto LABEL_257;
          case 2:
            switch((char)v577)
            {
              case 2:
                CGFloat v30 = *(double *)(v575 + 16);
                CGFloat v31 = *(double *)(v575 + 24);
                CGFloat v32 = *(double *)(v575 + 32);
                CGFloat v33 = *(double *)(v575 + 40);
                goto LABEL_255;
              case 3:
              case 4:
                goto LABEL_297;
              case 5:
                if (*(unsigned char *)(v575 + 16))
                {
                  if (*(unsigned char *)(v575 + 16) == 1)
                  {
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    RBPathGetBoundingRect();
                  }
                  else
                  {
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    MEMORY[0x24C526C90](v53 + 24);
                  }
LABEL_24:
                  CGFloat v30 = v87;
                  CGFloat v31 = v88;
                  CGFloat v32 = v89;
                  CGFloat v33 = v90;
                  goto LABEL_258;
                }
                long long v452 = *(void **)(v575 + 24);
                if (!v452) {
                  goto LABEL_296;
                }
                char v453 = v452;
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                swift_retain();
                PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v453);
                CGFloat v30 = PathBoundingBox.origin.x;
                CGFloat v31 = PathBoundingBox.origin.y;
                CGFloat v32 = PathBoundingBox.size.width;
                CGFloat v33 = PathBoundingBox.size.height;

                __n128 v451 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                break;
              case 6:
                goto LABEL_258;
              default:
                CGFloat v31 = *((double *)&v575 + 1);
                CGFloat v30 = *(double *)&v575;
                CGFloat v33 = *((double *)&v576 + 1);
                CGFloat v32 = *(double *)&v576;
                goto LABEL_258;
            }
            break;
          case 3:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            LODWORD(v86) = DWORD2(v53);
            objc_msgSend((id)v53, sel_boundingRectWithProgress_, v86);
            goto LABEL_24;
          case 4:
            if (specialized Set.contains(_:)(v575, *v513)) {
              goto LABEL_31;
            }
            swift_beginAccess();
            uint64_t v91 = *v503;
            if (*(void *)(*v503 + 16) && (uint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v53), (v93 & 1) != 0))
            {
              long long v94 = *(void **)(*(void *)(v91 + 56) + 8 * v92);
              swift_endAccess();
              unint64_t v95 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v94) + 0xE0);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              long long v96 = v94;
              double v97 = v95();
              double v471 = v98;
              double v472 = v97;
              double v469 = v99;
              double v470 = v100;

              uint64_t v101 = *(void *)(*(void *)&v54 + 16);
              if (!v101) {
                goto LABEL_247;
              }
            }
            else
            {
              swift_endAccess();
LABEL_31:
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              swift_bridgeObjectRetain();
              double v471 = 0.0;
              double v472 = 0.0;
              double v469 = 0.0;
              double v470 = 0.0;
              uint64_t v101 = *(void *)(*(void *)&v54 + 16);
              if (!v101) {
                goto LABEL_247;
              }
            }
            uint64_t v102 = *(void *)&v54 + 32;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            uint64_t v103 = 0;
            uint64_t v497 = *(void *)&v54 + 32;
            uint64_t v498 = v101;
            do
            {
              CGRect v108 = (_OWORD *)(v102 + 144 * v103);
              *(_OWORD *)&v570.CGFloat a = *v108;
              long long v109 = v108[1];
              long long v110 = v108[2];
              long long v111 = v108[3];
              long long v572 = v108[4];
              long long v571 = v111;
              *(_OWORD *)&v570.tCGFloat x = v110;
              *(_OWORD *)&v570.CGFloat c = v109;
              long long v112 = v108[5];
              long long v113 = v108[6];
              long long v114 = v108[7];
              *(_OWORD *)&v574.tCGFloat x = v108[8];
              *(_OWORD *)&v574.CGFloat c = v114;
              *(_OWORD *)&v574.CGFloat a = v113;
              long long v573 = v112;
              if (*((double *)&v112 + 1) <= 0.0009765625)
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                CGFloat v104 = v532;
                CGFloat v105 = r2_8;
                CGFloat v106 = r2_24;
                CGFloat v107 = r2_16;
              }
              else
              {
                Swift::UInt64 v115 = *(void *)&v570.a;
                CFIndex v116 = *(void *)&v570.b;
                CGFloat c = v570.c;
                CGFloat d = v570.d;
                tCGFloat x = v570.tx;
                uint64_t v121 = *((void *)&v571 + 1);
                CFIndex v120 = v571;
                unsigned __int8 v122 = v573;
                double v505 = v33;
                double v506 = v32;
                double v507 = v31;
                double v508 = v30;
                uint64_t v504 = v103;
                switch(v573 >> 5)
                {
                  case 1:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    swift_retain_n();
                    uint64_t v156 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v115, v116);
                    if (__OFSUB__(v121, v120)) {
                      goto LABEL_279;
                    }
                    long long v157 = v156;
                    v598.location = v120;
                    v598.CFIndex length = v121 - v120;
                    CGRect v627 = CTRunGetImageBounds((CTRunRef)v156, 0, v598);
                    CGFloat v158 = v627.origin.x;
                    CGFloat v159 = v627.origin.y;
                    CGFloat v160 = v627.size.width;
                    CGFloat v161 = v627.size.height;

                    v565.CGFloat b = 0.0;
                    v565.CGFloat c = 0.0;
                    v565.CGFloat a = 1.0;
                    v565.CGFloat d = -1.0;
                    v565.tCGFloat x = c;
                    v565.tCGFloat y = d;
                    v628.origin.CGFloat x = v158;
                    v628.origin.CGFloat y = v159;
                    v628.size.CGFloat width = v160;
                    v628.size.CGFloat height = v161;
                    CGRect v629 = CGRectApplyAffineTransform(v628, &v565);
                    CGFloat v162 = v629.origin.x;
                    CGFloat v163 = v629.origin.y;
                    CGFloat v164 = v629.size.width;
                    CGFloat v165 = v629.size.height;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    v630.origin.CGFloat x = v162;
                    v630.origin.CGFloat y = v163;
                    v630.size.CGFloat width = v164;
                    v630.size.CGFloat height = v165;
                    CGRect v631 = CGRectInset(v630, -1.0, -1.0);
                    CGFloat a = v631.origin.x;
                    CGFloat b = v631.origin.y;
                    CGFloat v124 = v631.size.width;
                    CGFloat v123 = v631.size.height;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    uint64_t v166 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                    goto LABEL_236;
                  case 2:
                    CGFloat v123 = r2_16;
                    CGFloat v127 = r2_24;
                    CGFloat b = r2_8;
                    CGFloat a = v532;
                    switch(LOBYTE(v570.tx))
                    {
                      case 2:
                        CGFloat a = *(double *)(*(void *)&v570.a + 16);
                        CGFloat b = *(double *)(*(void *)&v570.a + 24);
                        CGFloat v124 = *(double *)(*(void *)&v570.a + 32);
                        CGFloat v123 = *(double *)(*(void *)&v570.a + 40);
                        goto LABEL_234;
                      case 3:
                      case 4:
                        goto LABEL_297;
                      case 5:
                        if (*(unsigned char *)(*(void *)&v570.a + 16))
                        {
                          if (*(unsigned char *)(*(void *)&v570.a + 16) == 1)
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            RBPathGetBoundingRect();
                          }
                          else
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            MEMORY[0x24C526C90](v115 + 24);
                          }
LABEL_58:
                          CGFloat a = v168;
                          CGFloat b = v169;
                          CGFloat v123 = v170;
                          goto LABEL_238;
                        }
                        uint64_t v444 = *(void **)(*(void *)&v570.a + 24);
                        if (!v444) {
                          goto LABEL_295;
                        }
                        v445 = v444;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        swift_retain();
                        CGRect v706 = CGPathGetPathBoundingBox(v445);
                        CGFloat a = v706.origin.x;
                        CGFloat b = v706.origin.y;
                        CGFloat v124 = v706.size.width;
                        CGFloat v123 = v706.size.height;

                        v440 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                        break;
                      case 6:
                        goto LABEL_238;
                      default:
                        CGFloat a = v570.a;
                        CGFloat b = v570.b;
                        CGFloat v127 = v570.c;
                        CGFloat v123 = v570.d;
                        goto LABEL_238;
                    }
                    goto LABEL_235;
                  case 3:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    LODWORD(v167) = v116;
                    objc_msgSend((id)v115, sel_boundingRectWithProgress_, v167);
                    goto LABEL_58;
                  case 4:
                    uint64_t v534 = *((void *)&v572 + 1);
                    uint64_t v538 = v572;
                    uint64_t v543 = *(void *)&v570.ty;
                    uint64_t v149 = *v513;
                    double v150 = r2_16;
                    CGFloat v124 = r2_24;
                    CGFloat b = r2_8;
                    CGFloat a = v532;
                    if (!*(void *)(*v513 + 16)) {
                      goto LABEL_59;
                    }
                    Hasher.init(_seed:)();
                    Hasher._combine(_:)(v115);
                    Swift::Int v151 = Hasher._finalize()();
                    uint64_t v152 = -1 << *(unsigned char *)(v149 + 32);
                    unint64_t v153 = v151 & ~v152;
                    if (((*(void *)(v149 + 56 + ((v153 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v153) & 1) == 0) {
                      goto LABEL_59;
                    }
                    uint64_t v154 = *(void *)(v149 + 48);
                    if (*(void *)(v154 + 8 * v153) == v115) {
                      goto LABEL_64;
                    }
                    uint64_t v155 = ~v152;
                    while (1)
                    {
                      unint64_t v153 = (v153 + 1) & v155;
                      if (((*(void *)(v149 + 56 + ((v153 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v153) & 1) == 0) {
                        break;
                      }
                      if (*(void *)(v154 + 8 * v153) == v115) {
                        goto LABEL_64;
                      }
                    }
LABEL_59:
                    swift_beginAccess();
                    uint64_t v171 = *v503;
                    if (*(void *)(*v503 + 16)
                      && (uint64_t v172 = specialized __RawDictionaryStorage.find<A>(_:)(v115), (v173 & 1) != 0))
                    {
                      Swift::UInt64 v174 = *(void **)(*(void *)(v171 + 56) + 8 * v172);
                      swift_endAccess();
                      uint64_t v175 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v174) + 0xE0);
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      Swift::UInt64 v176 = v174;
                      double v177 = v175();
                      double v484 = v178;
                      double v485 = v177;
                      double v482 = v179;
                      double v483 = v180;

                      uint64_t v181 = *(void *)(*(void *)&c + 16);
                      if (!v181) {
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                      swift_endAccess();
LABEL_64:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v115, v116, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(tx), v543, v120, v121, v538, v534, v122);
                      double v484 = 0.0;
                      double v485 = 0.0;
                      double v482 = 0.0;
                      double v483 = 0.0;
                      uint64_t v181 = *(void *)(*(void *)&c + 16);
                      if (!v181)
                      {
LABEL_62:
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        CGFloat v123 = r2_16;
                        goto LABEL_226;
                      }
                    }
                    uint64_t v182 = *(void *)&c + 32;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    uint64_t v183 = 0;
                    CGFloat v523 = v532;
                    CGFloat v522 = r2_8;
                    CGFloat r1 = r2_24;
                    CGFloat v123 = r2_16;
                    uint64_t v509 = *(void *)&c + 32;
                    uint64_t v510 = v181;
                    do
                    {
                      v188 = (_OWORD *)(v182 + 144 * v183);
                      *(_OWORD *)&v565.CGFloat a = *v188;
                      long long v189 = v188[1];
                      long long v190 = v188[2];
                      long long v191 = v188[3];
                      long long v567 = v188[4];
                      long long v566 = v191;
                      *(_OWORD *)&v565.tCGFloat x = v190;
                      *(_OWORD *)&v565.CGFloat c = v189;
                      long long v192 = v188[5];
                      long long v193 = v188[6];
                      long long v194 = v188[7];
                      *(_OWORD *)&v569.tCGFloat x = v188[8];
                      *(_OWORD *)&v569.CGFloat c = v194;
                      *(_OWORD *)&v569.CGFloat a = v193;
                      long long v568 = v192;
                      if (*((double *)&v192 + 1) <= 0.0009765625)
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        CGFloat v184 = a;
                        CGFloat v185 = b;
                        CGFloat v186 = v124;
                        CGFloat v187 = v150;
                      }
                      else
                      {
                        Swift::UInt64 v195 = *(void *)&v565.a;
                        CFIndex v196 = *(void *)&v565.b;
                        CGFloat v197 = v565.c;
                        CGFloat v198 = v565.d;
                        CGFloat v199 = v565.tx;
                        uint64_t v201 = *((void *)&v566 + 1);
                        CFIndex v200 = v566;
                        unsigned __int8 v202 = v568;
                        double v515 = v123;
                        uint64_t v514 = v183;
                        switch(v568 >> 5)
                        {
                          case 1:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            swift_retain_n();
                            v228 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v195, v196);
                            if (__OFSUB__(v201, v200)) {
                              goto LABEL_276;
                            }
                            uint64_t v229 = v228;
                            v600.location = v200;
                            v600.CFIndex length = v201 - v200;
                            CGRect v641 = CTRunGetImageBounds((CTRunRef)v228, 0, v600);
                            CGFloat v230 = v641.origin.x;
                            CGFloat v231 = v641.origin.y;
                            CGFloat v232 = v641.size.width;
                            CGFloat v233 = v641.size.height;

                            v560.CGFloat b = 0.0;
                            v560.CGFloat c = 0.0;
                            v560.CGFloat a = 1.0;
                            v560.CGFloat d = -1.0;
                            v560.tCGFloat x = v197;
                            v560.tCGFloat y = v198;
                            v642.origin.CGFloat x = v230;
                            v642.origin.CGFloat y = v231;
                            v642.size.CGFloat width = v232;
                            v642.size.CGFloat height = v233;
                            CGRect v643 = CGRectApplyAffineTransform(v642, &v560);
                            CGFloat v234 = v643.origin.x;
                            CGFloat v235 = v643.origin.y;
                            CGFloat v236 = v643.size.width;
                            CGFloat v237 = v643.size.height;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            v644.origin.CGFloat x = v234;
                            v644.origin.CGFloat y = v235;
                            v644.size.CGFloat width = v236;
                            v644.size.CGFloat height = v237;
                            CGRect v645 = CGRectInset(v644, -1.0, -1.0);
                            CGFloat a = v645.origin.x;
                            CGFloat b = v645.origin.y;
                            CGFloat v203 = v645.size.width;
                            CGFloat v204 = v645.size.height;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            uint64_t v238 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                            goto LABEL_216;
                          case 2:
                            switch(LOBYTE(v565.tx))
                            {
                              case 2:
                                CGFloat a = *(double *)(*(void *)&v565.a + 16);
                                CGFloat b = *(double *)(*(void *)&v565.a + 24);
                                CGFloat v203 = *(double *)(*(void *)&v565.a + 32);
                                CGFloat v204 = *(double *)(*(void *)&v565.a + 40);
                                goto LABEL_214;
                              case 3:
                              case 4:
                                goto LABEL_297;
                              case 5:
                                if (*(unsigned char *)(*(void *)&v565.a + 16))
                                {
                                  if (*(unsigned char *)(*(void *)&v565.a + 16) == 1)
                                  {
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    RBPathGetBoundingRect();
                                  }
                                  else
                                  {
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    MEMORY[0x24C526C90](v195 + 24);
                                  }
LABEL_91:
                                  CGFloat a = v240;
                                  CGFloat b = v241;
                                  CGFloat v203 = v242;
                                  CGFloat v204 = v243;
                                }
                                else
                                {
                                  uint64_t v431 = *(void **)(*(void *)&v565.a + 24);
                                  if (!v431) {
                                    goto LABEL_294;
                                  }
                                  uint64_t v432 = v431;
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  swift_retain();
                                  CGRect v699 = CGPathGetPathBoundingBox(v432);
                                  CGFloat a = v699.origin.x;
                                  CGFloat b = v699.origin.y;
                                  CGFloat v203 = v699.size.width;
                                  CGFloat v204 = v699.size.height;

                                  unint64_t v430 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_215:
                                  uint64_t v238 = v430;
LABEL_216:
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v238);
                                }
                                break;
                              case 6:
                                goto LABEL_96;
                              default:
                                CGFloat a = v565.a;
                                CGFloat b = v565.b;
                                CGFloat v203 = v565.c;
                                CGFloat v204 = v565.d;
LABEL_214:
                                unint64_t v430 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                goto LABEL_215;
                            }
                            goto LABEL_217;
                          case 3:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            LODWORD(v239) = v196;
                            objc_msgSend((id)v195, sel_boundingRectWithProgress_, v239);
                            goto LABEL_91;
                          case 4:
                            uint64_t v535 = *((void *)&v567 + 1);
                            uint64_t v539 = v567;
                            uint64_t v544 = *(void *)&v565.ty;
                            uint64_t v222 = *v513;
                            if (!*(void *)(*v513 + 16)) {
                              goto LABEL_92;
                            }
                            Hasher.init(_seed:)();
                            Hasher._combine(_:)(v195);
                            Swift::Int v223 = Hasher._finalize()();
                            uint64_t v224 = -1 << *(unsigned char *)(v222 + 32);
                            unint64_t v225 = v223 & ~v224;
                            if (((*(void *)(v222 + 56 + ((v225 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v225) & 1) == 0) {
                              goto LABEL_92;
                            }
                            uint64_t v226 = *(void *)(v222 + 48);
                            if (*(void *)(v226 + 8 * v225) == v195) {
                              goto LABEL_98;
                            }
                            uint64_t v227 = ~v224;
                            while (1)
                            {
                              unint64_t v225 = (v225 + 1) & v227;
                              if (((*(void *)(v222 + 56 + ((v225 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v225) & 1) == 0) {
                                break;
                              }
                              if (*(void *)(v226 + 8 * v225) == v195) {
                                goto LABEL_98;
                              }
                            }
LABEL_92:
                            swift_beginAccess();
                            uint64_t v244 = *v503;
                            if (*(void *)(*v503 + 16)
                              && (uint64_t v245 = specialized __RawDictionaryStorage.find<A>(_:)(v195), (v246 & 1) != 0))
                            {
                              v247 = *(void **)(*(void *)(v244 + 56) + 8 * v245);
                              swift_endAccess();
                              uint64_t v248 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v247) + 0xE0);
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              uint64_t v249 = v247;
                              double v250 = v248();
                              double v490 = v251;
                              double v491 = v250;
                              double v488 = v252;
                              double v489 = v253;

                              uint64_t v254 = *(void *)(*(void *)&v197 + 16);
                              if (!v254) {
                                goto LABEL_95;
                              }
                            }
                            else
                            {
                              swift_endAccess();
LABEL_98:
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v195, v196, *(uint64_t *)&v197, *(uint64_t *)&v198, LOBYTE(v199), v544, v200, v201, v539, v535, v202);
                              double v490 = 0.0;
                              double v491 = 0.0;
                              double v488 = 0.0;
                              double v489 = 0.0;
                              uint64_t v254 = *(void *)(*(void *)&v197 + 16);
                              if (!v254)
                              {
LABEL_95:
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                CGFloat v255 = b;
                                CGFloat v203 = v124;
                                CGFloat v204 = v150;
                                goto LABEL_205;
                              }
                            }
                            uint64_t v256 = *(void *)&v197 + 32;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            uint64_t v257 = 0;
                            CGFloat r2 = a;
                            CGFloat v527 = b;
                            CGFloat v203 = v124;
                            CGFloat v204 = v150;
                            uint64_t v516 = *(void *)&v197 + 32;
                            uint64_t v517 = v254;
                            do
                            {
                              uint64_t v262 = (_OWORD *)(v256 + 144 * v257);
                              *(_OWORD *)&v560.CGFloat a = *v262;
                              long long v263 = v262[1];
                              long long v264 = v262[2];
                              long long v265 = v262[3];
                              long long v562 = v262[4];
                              long long v561 = v265;
                              *(_OWORD *)&v560.tCGFloat x = v264;
                              *(_OWORD *)&v560.CGFloat c = v263;
                              long long v266 = v262[5];
                              long long v267 = v262[6];
                              long long v268 = v262[7];
                              *(_OWORD *)&v564.tCGFloat x = v262[8];
                              *(_OWORD *)&v564.CGFloat c = v268;
                              *(_OWORD *)&v564.CGFloat a = v267;
                              long long v563 = v266;
                              if (*((double *)&v266 + 1) <= 0.0009765625)
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                CGFloat v258 = a;
                                CGFloat v259 = b;
                                CGFloat v260 = v124;
                                CGFloat v261 = v150;
                              }
                              else
                              {
                                Swift::UInt64 v269 = *(void *)&v560.a;
                                CFIndex v270 = *(void *)&v560.b;
                                CGFloat v271 = v560.c;
                                CGFloat v272 = v560.d;
                                CGFloat v273 = v560.tx;
                                uint64_t v275 = *((void *)&v561 + 1);
                                CFIndex v274 = v561;
                                unsigned __int8 v276 = v563;
                                double v519 = v204;
                                double v520 = v203;
                                uint64_t v518 = v257;
                                switch(v563 >> 5)
                                {
                                  case 1:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    swift_retain_n();
                                    uint64_t v287 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v269, v270);
                                    if (__OFSUB__(v275, v274)) {
                                      goto LABEL_273;
                                    }
                                    uint64_t v288 = v287;
                                    v601.location = v274;
                                    v601.CFIndex length = v275 - v274;
                                    CGRect v648 = CTRunGetImageBounds((CTRunRef)v287, 0, v601);
                                    CGFloat v289 = v648.origin.x;
                                    CGFloat v290 = v648.origin.y;
                                    CGFloat v291 = v648.size.width;
                                    CGFloat v292 = v648.size.height;

                                    v555.CGFloat b = 0.0;
                                    v555.CGFloat c = 0.0;
                                    v555.CGFloat a = 1.0;
                                    v555.CGFloat d = -1.0;
                                    v555.tCGFloat x = v271;
                                    v555.tCGFloat y = v272;
                                    v649.origin.CGFloat x = v289;
                                    v649.origin.CGFloat y = v290;
                                    v649.size.CGFloat width = v291;
                                    v649.size.CGFloat height = v292;
                                    CGRect v650 = CGRectApplyAffineTransform(v649, &v555);
                                    CGFloat v293 = v650.origin.x;
                                    CGFloat v294 = v650.origin.y;
                                    CGFloat v295 = v650.size.width;
                                    CGFloat v296 = v650.size.height;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    v651.origin.CGFloat x = v293;
                                    v651.origin.CGFloat y = v294;
                                    v651.size.CGFloat width = v295;
                                    v651.size.CGFloat height = v296;
                                    CGRect v652 = CGRectInset(v651, -1.0, -1.0);
                                    CGFloat v280 = v652.origin.x;
                                    CGFloat v278 = v652.origin.y;
                                    CGFloat v277 = v652.size.width;
                                    CGFloat v279 = v652.size.height;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    v297 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                                    goto LABEL_201;
                                  case 2:
                                    CGFloat v277 = v124;
                                    CGFloat v278 = b;
                                    CGFloat v279 = v150;
                                    CGFloat v280 = a;
                                    switch(LOBYTE(v560.tx))
                                    {
                                      case 2:
                                        CGFloat v280 = *(double *)(*(void *)&v560.a + 16);
                                        CGFloat v278 = *(double *)(*(void *)&v560.a + 24);
                                        CGFloat v277 = *(double *)(*(void *)&v560.a + 32);
                                        CGFloat v279 = *(double *)(*(void *)&v560.a + 40);
                                        v422 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                        goto LABEL_200;
                                      case 3:
                                      case 4:
                                        goto LABEL_297;
                                      case 5:
                                        if (*(unsigned char *)(*(void *)&v560.a + 16))
                                        {
                                          if (*(unsigned char *)(*(void *)&v560.a + 16) == 1)
                                          {
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            RBPathGetBoundingRect();
                                          }
                                          else
                                          {
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            MEMORY[0x24C526C90](v269 + 24);
                                          }
LABEL_118:
                                          CGFloat v280 = v299;
                                          CGFloat v278 = v300;
                                          CGFloat v277 = v301;
                                          CGFloat v279 = v302;
                                        }
                                        else
                                        {
                                          v423 = *(void **)(*(void *)&v560.a + 24);
                                          if (!v423) {
                                            goto LABEL_293;
                                          }
                                          uint64_t v424 = v423;
                                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                          swift_retain();
                                          CGRect v689 = CGPathGetPathBoundingBox(v424);
                                          CGFloat v280 = v689.origin.x;
                                          CGFloat v278 = v689.origin.y;
                                          CGFloat v277 = v689.size.width;
                                          CGFloat v279 = v689.size.height;

                                          v422 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_200:
                                          v297 = v422;
LABEL_201:
                                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v297);
                                        }
                                        break;
                                      case 6:
                                        goto LABEL_202;
                                      default:
                                        CGFloat v280 = v560.a;
                                        CGFloat v278 = v560.b;
                                        CGFloat v277 = v560.c;
                                        CGFloat v279 = v560.d;
                                        goto LABEL_202;
                                    }
                                    goto LABEL_202;
                                  case 3:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    LODWORD(v298) = v270;
                                    objc_msgSend((id)v269, sel_boundingRectWithProgress_, v298);
                                    goto LABEL_118;
                                  case 4:
                                    uint64_t v536 = *((void *)&v562 + 1);
                                    uint64_t v540 = v562;
                                    uint64_t v545 = *(void *)&v560.ty;
                                    uint64_t v281 = *v513;
                                    if (!*(void *)(*v513 + 16)) {
                                      goto LABEL_119;
                                    }
                                    Hasher.init(_seed:)();
                                    Hasher._combine(_:)(v269);
                                    Swift::Int v282 = Hasher._finalize()();
                                    uint64_t v283 = -1 << *(unsigned char *)(v281 + 32);
                                    unint64_t v284 = v282 & ~v283;
                                    if (((*(void *)(v281 + 56 + ((v284 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v284) & 1) == 0) {
                                      goto LABEL_119;
                                    }
                                    uint64_t v285 = *(void *)(v281 + 48);
                                    if (*(void *)(v285 + 8 * v284) == v269) {
                                      goto LABEL_124;
                                    }
                                    uint64_t v286 = ~v283;
                                    while (1)
                                    {
                                      unint64_t v284 = (v284 + 1) & v286;
                                      if (((*(void *)(v281 + 56 + ((v284 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v284) & 1) == 0) {
                                        break;
                                      }
                                      if (*(void *)(v285 + 8 * v284) == v269) {
                                        goto LABEL_124;
                                      }
                                    }
LABEL_119:
                                    swift_beginAccess();
                                    uint64_t v303 = *v503;
                                    if (*(void *)(*v503 + 16)
                                      && (uint64_t v304 = specialized __RawDictionaryStorage.find<A>(_:)(v269), (v305 & 1) != 0))
                                    {
                                      uint64_t v306 = *(void **)(*(void *)(v303 + 56) + 8 * v304);
                                      swift_endAccess();
                                      uint64_t v307 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v306) + 0xE0);
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                      uint64_t v308 = v306;
                                      double v309 = v307();
                                      double v501 = v310;
                                      double v502 = v309;
                                      double v499 = v311;
                                      double v500 = v312;

                                      uint64_t v313 = *(void *)(*(void *)&v271 + 16);
                                      if (!v313) {
                                        goto LABEL_122;
                                      }
                                    }
                                    else
                                    {
                                      swift_endAccess();
LABEL_124:
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                      outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v269, v270, *(uint64_t *)&v271, *(uint64_t *)&v272, LOBYTE(v273), v545, v274, v275, v540, v536, v276);
                                      double v501 = 0.0;
                                      double v502 = 0.0;
                                      double v499 = 0.0;
                                      double v500 = 0.0;
                                      uint64_t v313 = *(void *)(*(void *)&v271 + 16);
                                      if (!v313)
                                      {
LABEL_122:
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        CGFloat v314 = v124;
                                        CGFloat v315 = v150;
                                        goto LABEL_177;
                                      }
                                    }
                                    uint64_t v316 = *(void *)&v271 + 32;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    uint64_t v317 = 0;
                                    CGFloat v541 = a;
                                    CGFloat v537 = b;
                                    CGFloat v314 = v124;
                                    CGFloat v533 = v150;
                                    uint64_t v525 = v313;
                                    uint64_t v524 = *(void *)&v271 + 32;
                                    do
                                    {
                                      v322 = (_OWORD *)(v316 + 144 * v317);
                                      *(_OWORD *)&v555.CGFloat a = *v322;
                                      long long v323 = v322[1];
                                      long long v324 = v322[2];
                                      long long v325 = v322[4];
                                      long long v556 = v322[3];
                                      long long v557 = v325;
                                      *(_OWORD *)&v555.CGFloat c = v323;
                                      *(_OWORD *)&v555.tCGFloat x = v324;
                                      long long v326 = v322[5];
                                      long long v327 = v322[6];
                                      long long v328 = v322[7];
                                      *(_OWORD *)&v559.tCGFloat x = v322[8];
                                      *(_OWORD *)&v559.CGFloat c = v328;
                                      *(_OWORD *)&v559.CGFloat a = v327;
                                      long long v558 = v326;
                                      if (*((double *)&v326 + 1) <= 0.0009765625)
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        CGFloat v318 = a;
                                        CGFloat v319 = b;
                                        CGFloat v320 = v124;
                                        CGFloat v321 = v150;
                                      }
                                      else
                                      {
                                        uint64_t v329 = *(void *)&v555.a;
                                        CFIndex v330 = *(void *)&v555.b;
                                        CGFloat v331 = v555.c;
                                        CGFloat v546 = v555.d;
                                        CGFloat v332 = v555.tx;
                                        uint64_t v334 = *((void *)&v556 + 1);
                                        CFIndex v333 = v556;
                                        double v526 = v314;
                                        switch(v558 >> 5)
                                        {
                                          case 1:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            swift_retain_n();
                                            v354 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v329, v330);
                                            if (__OFSUB__(v334, v333))
                                            {
                                              __break(1u);
LABEL_273:
                                              __break(1u);
LABEL_274:
                                              __break(1u);
                                              goto LABEL_275;
                                            }
                                            v355 = v354;
                                            v602.location = v333;
                                            v602.CFIndex length = v334 - v333;
                                            CGRect v655 = CTRunGetImageBounds((CTRunRef)v354, 0, v602);
                                            CGFloat v356 = v655.origin.x;
                                            CGFloat v357 = v655.origin.y;
                                            CGFloat v358 = v655.size.width;
                                            CGFloat v359 = v655.size.height;

                                            v548.CGFloat b = 0.0;
                                            v548.CGFloat c = 0.0;
                                            v548.CGFloat a = 1.0;
                                            v548.CGFloat d = -1.0;
                                            v548.tCGFloat x = v331;
                                            v548.tCGFloat y = v546;
                                            v656.origin.CGFloat x = v356;
                                            v656.origin.CGFloat y = v357;
                                            v656.size.CGFloat width = v358;
                                            v656.size.CGFloat height = v359;
                                            CGRect v657 = CGRectApplyAffineTransform(v656, &v548);
                                            CGFloat v360 = v657.origin.x;
                                            CGFloat v361 = v657.origin.y;
                                            CGFloat v362 = v657.size.width;
                                            CGFloat v363 = v657.size.height;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            v658.origin.CGFloat x = v360;
                                            v658.origin.CGFloat y = v361;
                                            v658.size.CGFloat width = v362;
                                            v658.size.CGFloat height = v363;
                                            CGRect v659 = CGRectInset(v658, -1.0, -1.0);
                                            CGFloat a = v659.origin.x;
                                            CGFloat b = v659.origin.y;
                                            CGFloat v335 = v659.size.width;
                                            CGFloat v336 = v659.size.height;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            v364 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_173:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v364);
                                            goto LABEL_174;
                                          case 2:
                                            CGFloat v335 = v124;
                                            CGFloat v336 = v150;
                                            switch(LOBYTE(v555.tx))
                                            {
                                              case 2:
                                                CGFloat a = *(double *)(*(void *)&v555.a + 16);
                                                CGFloat b = *(double *)(*(void *)&v555.a + 24);
                                                CGFloat v335 = *(double *)(*(void *)&v555.a + 32);
                                                CGFloat v336 = *(double *)(*(void *)&v555.a + 40);
                                                v397 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                                goto LABEL_172;
                                              case 3:
                                              case 4:
                                                goto LABEL_297;
                                              case 5:
                                                if (*(unsigned char *)(*(void *)&v555.a + 16))
                                                {
                                                  if (*(unsigned char *)(*(void *)&v555.a + 16) == 1)
                                                  {
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                    RBPathGetBoundingRect();
                                                  }
                                                  else
                                                  {
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                    MEMORY[0x24C526C90](v329 + 24);
                                                  }
LABEL_141:
                                                  CGFloat a = v350;
                                                  CGFloat b = v351;
                                                  CGFloat v335 = v352;
                                                  CGFloat v336 = v353;
                                                  goto LABEL_174;
                                                }
                                                v398 = *(void **)(*(void *)&v555.a + 24);
                                                if (!v398) {
                                                  goto LABEL_292;
                                                }
                                                v399 = v398;
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                swift_retain();
                                                CGRect v674 = CGPathGetPathBoundingBox(v399);
                                                CGFloat a = v674.origin.x;
                                                CGFloat b = v674.origin.y;
                                                CGFloat v335 = v674.size.width;
                                                CGFloat v336 = v674.size.height;

                                                v397 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_172:
                                                v364 = v397;
                                                break;
                                              case 6:
                                                goto LABEL_174;
                                              default:
                                                CGFloat a = v555.a;
                                                CGFloat b = v555.b;
                                                CGFloat v335 = v555.c;
                                                CGFloat v336 = v555.d;
                                                goto LABEL_174;
                                            }
                                            goto LABEL_173;
                                          case 3:
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            LODWORD(v349) = v330;
                                            objc_msgSend((id)v329, sel_boundingRectWithProgress_, v349);
                                            goto LABEL_141;
                                          case 4:
                                            if (specialized Set.contains(_:)(*(Swift::UInt64 *)&v555.a, *v513)) {
                                              goto LABEL_153;
                                            }
                                            swift_beginAccess();
                                            uint64_t v337 = *v503;
                                            if (*(void *)(*v503 + 16)
                                              && (uint64_t v338 = specialized __RawDictionaryStorage.find<A>(_:)(v329),
                                                  (v339 & 1) != 0))
                                            {
                                              v340 = *(void **)(*(void *)(v337 + 56) + 8 * v338);
                                              swift_endAccess();
                                              v341 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v340) + 0xE0);
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              v342 = v340;
                                              double v343 = v341();
                                              double v511 = v344;
                                              double v512 = v343;
                                              double v547 = v345;
                                              double v347 = v346;

                                              uint64_t v348 = *(void *)(*(void *)&v331 + 16);
                                              if (!v348) {
                                                goto LABEL_137;
                                              }
                                            }
                                            else
                                            {
                                              swift_endAccess();
LABEL_153:
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              swift_bridgeObjectRetain();
                                              double v511 = 0.0;
                                              double v512 = 0.0;
                                              double v547 = 0.0;
                                              double v347 = 0.0;
                                              uint64_t v348 = *(void *)(*(void *)&v331 + 16);
                                              if (!v348)
                                              {
LABEL_137:
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                CGFloat v335 = v124;
                                                CGFloat v336 = v150;
                                                goto LABEL_158;
                                              }
                                            }
                                            v381 = (_OWORD *)(*(void *)&v331 + 32);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            uint64_t v382 = v348 - 1;
                                            CGFloat v335 = v124;
                                            CGFloat v336 = v150;
                                            while (1)
                                            {
                                              *(_OWORD *)&v548.CGFloat a = *v381;
                                              long long v383 = v381[1];
                                              long long v384 = v381[2];
                                              long long v385 = v381[4];
                                              long long v549 = v381[3];
                                              long long v550 = v385;
                                              *(_OWORD *)&v548.CGFloat c = v383;
                                              *(_OWORD *)&v548.tCGFloat x = v384;
                                              long long v386 = v381[5];
                                              long long v387 = v381[6];
                                              long long v388 = v381[8];
                                              long long v553 = v381[7];
                                              long long v554 = v388;
                                              long long v551 = v386;
                                              long long v552 = v387;
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v548, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)((uint64_t)&v588);
                                              v723.origin.CGFloat x = v389;
                                              v723.origin.CGFloat y = v390;
                                              v723.size.CGFloat width = v391;
                                              v723.size.CGFloat height = v392;
                                              v667.origin.CGFloat x = a;
                                              v667.origin.CGFloat y = b;
                                              v667.size.CGFloat width = v335;
                                              v667.size.CGFloat height = v336;
                                              CGRect v668 = CGRectUnion(v667, v723);
                                              CGFloat a = v668.origin.x;
                                              CGFloat b = v668.origin.y;
                                              CGFloat v335 = v668.size.width;
                                              CGFloat v336 = v668.size.height;
                                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v548, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                              if (!v382) {
                                                break;
                                              }
                                              --v382;
                                              v381 += 9;
                                            }
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_158:
                                            v669.origin.CGFloat x = a;
                                            v669.origin.CGFloat y = b;
                                            v669.size.CGFloat width = v335;
                                            v669.size.CGFloat height = v336;
                                            if (CGRectIsNull(v669)) {
                                              goto LABEL_174;
                                            }
                                            v670.origin.CGFloat x = a;
                                            v670.origin.CGFloat y = b;
                                            v670.size.CGFloat width = v335;
                                            v670.size.CGFloat height = v336;
                                            CGRect v671 = CGRectStandardize(v670);
                                            double v393 = v547 == v347 ? v347 : v547;
                                            double v394 = v671.origin.x - v393;
                                            double v395 = v671.origin.y - v512;
                                            double v396 = v671.size.width - (-v347 - v547);
                                            double v150 = v671.size.height - (-v511 - v512);
                                            v672.origin.CGFloat x = v671.origin.x - v393;
                                            v672.origin.CGFloat y = v671.origin.y - v512;
                                            v672.size.CGFloat width = v396;
                                            v672.size.CGFloat height = v150;
                                            CGFloat a = v532;
                                            CGFloat b = r2_8;
                                            CGFloat v335 = r2_24;
                                            CGFloat v336 = r2_16;
                                            if (CGRectGetWidth(v672) < 0.0) {
                                              goto LABEL_174;
                                            }
                                            v673.origin.CGFloat x = v394;
                                            v673.origin.CGFloat y = v395;
                                            v673.size.CGFloat width = v396;
                                            v673.size.CGFloat height = v150;
                                            if (CGRectGetHeight(v673) < 0.0)
                                            {
                                              CGFloat a = v532;
                                              CGFloat b = r2_8;
                                              CGFloat v335 = r2_24;
                                              CGFloat v336 = r2_16;
                                              goto LABEL_174;
                                            }
                                            CGFloat a = v394;
                                            CGFloat b = v395;
                                            CGFloat v335 = v396;
                                            goto LABEL_132;
                                          default:
                                            if ((void)v556 != *((void *)&v556 + 1))
                                            {
                                              if (*((uint64_t *)&v556 + 1) < (uint64_t)v556) {
                                                goto LABEL_274;
                                              }
                                              if ((uint64_t)v556 < *((uint64_t *)&v556 + 1))
                                              {
                                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                CGFloat v335 = v124;
                                                CGFloat v336 = v150;
                                                char v365 = LOBYTE(v331);
                                                while (1)
                                                {
                                                  if (LOBYTE(v331))
                                                  {
                                                    outlined copy of Text.Layout.Line.Line((void *)v329, v330, 1);
                                                    id v380 = (id)_NSTextLineFragmentGetCTLine((void *)v329);
                                                    if (!v380) {
                                                      goto LABEL_287;
                                                    }
                                                    v366 = v380;
                                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                                  }
                                                  else
                                                  {
                                                    outlined copy of Text.Layout.Line.Line((void *)v329, v330, 0);
                                                    outlined copy of Text.Layout.Line.Line((void *)v329, v330, 0);

                                                    swift_release();
                                                    v366 = (void *)v329;
                                                  }
                                                  swift_retain();
                                                  CGFloat v331 = COERCE_DOUBLE(v366);
                                                  v367 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)&v331, v333);
                                                  v603.location = 0;
                                                  v603.CFIndex length = 0;
                                                  CGRect v660 = CTRunGetImageBounds((CTRunRef)v367, 0, v603);
                                                  CGFloat v368 = v660.origin.x;
                                                  CGFloat v369 = v660.origin.y;
                                                  CGFloat v370 = v660.size.width;
                                                  CGFloat v371 = v660.size.height;

                                                  v548.CGFloat b = 0.0;
                                                  v548.CGFloat c = 0.0;
                                                  v548.CGFloat a = 1.0;
                                                  v548.CGFloat d = -1.0;
                                                  v548.tCGFloat x = v546;
                                                  v548.tCGFloat y = v332;
                                                  v661.origin.CGFloat x = v368;
                                                  v661.origin.CGFloat y = v369;
                                                  v661.size.CGFloat width = v370;
                                                  v661.size.CGFloat height = v371;
                                                  CGRect v662 = CGRectApplyAffineTransform(v661, &v548);
                                                  CGFloat v372 = v662.origin.x;
                                                  CGFloat v373 = v662.origin.y;
                                                  CGFloat v374 = v662.size.width;
                                                  CGFloat v375 = v662.size.height;
                                                  swift_release();

                                                  v663.origin.CGFloat x = v372;
                                                  v663.origin.CGFloat y = v373;
                                                  v663.size.CGFloat width = v374;
                                                  v663.size.CGFloat height = v375;
                                                  CGRect v664 = CGRectInset(v663, -1.0, -1.0);
                                                  CGFloat v376 = v664.origin.x;
                                                  CGFloat v377 = v664.origin.y;
                                                  CGFloat v378 = v664.size.width;
                                                  CGFloat v379 = v664.size.height;
                                                  swift_release();

                                                  v665.origin.CGFloat x = a;
                                                  v665.origin.CGFloat y = b;
                                                  v665.size.CGFloat width = v335;
                                                  v665.size.CGFloat height = v336;
                                                  v722.origin.CGFloat x = v376;
                                                  v722.origin.CGFloat y = v377;
                                                  v722.size.CGFloat width = v378;
                                                  v722.size.CGFloat height = v379;
                                                  CGRect v666 = CGRectUnion(v665, v722);
                                                  CGFloat a = v666.origin.x;
                                                  CGFloat b = v666.origin.y;
                                                  CGFloat v335 = v666.size.width;
                                                  CGFloat v336 = v666.size.height;
                                                  ++v333;
                                                  LOBYTE(v331) = v365;
                                                  if (v334 == v333) {
                                                    goto LABEL_174;
                                                  }
                                                }
                                              }
LABEL_275:
                                              __break(1u);
LABEL_276:
                                              __break(1u);
LABEL_277:
                                              __break(1u);
                                              goto LABEL_278;
                                            }
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                            CGFloat v335 = v124;
LABEL_132:
                                            CGFloat v336 = v150;
LABEL_174:
                                            CGAffineTransform v548 = v559;
                                            v675.origin.CGFloat x = a;
                                            v675.origin.CGFloat y = b;
                                            v675.size.CGFloat width = v335;
                                            v675.size.CGFloat height = v336;
                                            CGRect v676 = CGRectApplyAffineTransform(v675, &v548);
                                            CGFloat v318 = v676.origin.x;
                                            CGFloat v319 = v676.origin.y;
                                            CGFloat v320 = v676.size.width;
                                            CGFloat v321 = v676.size.height;
                                            CGFloat a = v532;
                                            CGFloat b = r2_8;
                                            CGFloat v124 = r2_24;
                                            double v150 = r2_16;
                                            CGFloat v314 = v526;
                                            uint64_t v313 = v525;
                                            uint64_t v316 = v524;
                                            break;
                                        }
                                      }
                                      ++v317;
                                      v653.origin.CGFloat x = v541;
                                      v653.origin.CGFloat y = v537;
                                      v653.size.CGFloat width = v314;
                                      v653.size.CGFloat height = v533;
                                      CGRect v654 = CGRectUnion(v653, *(CGRect *)&v318);
                                      CGFloat v541 = v654.origin.x;
                                      CGFloat v537 = v654.origin.y;
                                      CGFloat v314 = v654.size.width;
                                      CGFloat v533 = v654.size.height;
                                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    }
                                    while (v317 != v313);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    CGFloat a = v541;
                                    CGFloat b = v537;
                                    CGFloat v315 = v533;
LABEL_177:
                                    v677.origin.CGFloat x = a;
                                    v677.origin.CGFloat y = b;
                                    v677.size.CGFloat width = v314;
                                    v677.size.CGFloat height = v315;
                                    CGFloat v280 = a;
                                    CGFloat v278 = b;
                                    if (CGRectIsNull(v677))
                                    {
                                      CGFloat v277 = v314;
                                      CGFloat v279 = v315;
                                    }
                                    else
                                    {
                                      v685.origin.CGFloat y = b;
                                      v685.origin.CGFloat x = a;
                                      v685.size.CGFloat width = v314;
                                      v685.size.CGFloat height = v315;
                                      CGRect v686 = CGRectStandardize(v685);
                                      if (v501 == v500) {
                                        double v417 = v500;
                                      }
                                      else {
                                        double v417 = v501;
                                      }
                                      double v418 = v686.origin.x - v417;
                                      double v419 = v686.origin.y - v502;
                                      double v420 = v686.size.width - (-v500 - v501);
                                      double v421 = v686.size.height - (-v499 - v502);
                                      v687.origin.CGFloat x = v686.origin.x - v417;
                                      v687.origin.CGFloat y = v686.origin.y - v502;
                                      v687.size.CGFloat width = v420;
                                      v687.size.CGFloat height = v421;
                                      CGFloat v280 = v532;
                                      CGFloat v278 = r2_8;
                                      CGFloat v277 = r2_24;
                                      CGFloat v279 = r2_16;
                                      if (CGRectGetWidth(v687) >= 0.0)
                                      {
                                        v688.origin.CGFloat x = v418;
                                        v688.origin.CGFloat y = v419;
                                        v688.size.CGFloat width = v420;
                                        v688.size.CGFloat height = v421;
                                        if (CGRectGetHeight(v688) >= 0.0)
                                        {
                                          CGFloat v280 = v418;
                                          CGFloat v278 = v419;
                                          CGFloat v277 = v420;
                                          CGFloat v279 = v421;
                                        }
                                        else
                                        {
                                          CGFloat v280 = v532;
                                          CGFloat v278 = r2_8;
                                          CGFloat v277 = r2_24;
                                          CGFloat v279 = r2_16;
                                        }
                                      }
                                    }
                                    goto LABEL_202;
                                  default:
                                    if ((void)v561 != *((void *)&v561 + 1))
                                    {
                                      if (*((uint64_t *)&v561 + 1) < (uint64_t)v561) {
                                        goto LABEL_277;
                                      }
                                      if ((uint64_t)v561 < *((uint64_t *)&v561 + 1))
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        CGFloat v277 = v124;
                                        CGFloat v278 = b;
                                        CGFloat v279 = v150;
                                        CGFloat v280 = a;
                                        while (1)
                                        {
                                          if (LOBYTE(v271))
                                          {
                                            outlined copy of Text.Layout.Line.Line((void *)v269, v270, 1);
                                            id v416 = (id)_NSTextLineFragmentGetCTLine((void *)v269);
                                            if (!v416) {
                                              goto LABEL_288;
                                            }
                                            uint64_t v400 = v416;
                                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                          }
                                          else
                                          {
                                            outlined copy of Text.Layout.Line.Line((void *)v269, v270, 0);
                                            outlined copy of Text.Layout.Line.Line((void *)v269, v270, 0);

                                            swift_release();
                                            uint64_t v400 = (void *)v269;
                                          }
                                          CFIndex v401 = v274 + 1;
                                          swift_retain();
                                          v402 = v400;
                                          v403 = (id)_CTLineGetRunAtIndex(v402, v274);
                                          v604.location = 0;
                                          v604.CFIndex length = 0;
                                          CGRect v678 = CTRunGetImageBounds((CTRunRef)v403, 0, v604);
                                          CGFloat v404 = v678.origin.x;
                                          CGFloat v405 = v678.origin.y;
                                          CGFloat v406 = v678.size.width;
                                          CGFloat v407 = v678.size.height;

                                          v555.CGFloat b = 0.0;
                                          v555.CGFloat c = 0.0;
                                          v555.CGFloat a = 1.0;
                                          v555.CGFloat d = -1.0;
                                          v555.tCGFloat x = v272;
                                          v555.tCGFloat y = v273;
                                          v679.origin.CGFloat x = v404;
                                          v679.origin.CGFloat y = v405;
                                          v679.size.CGFloat width = v406;
                                          v679.size.CGFloat height = v407;
                                          CGRect v680 = CGRectApplyAffineTransform(v679, &v555);
                                          CGFloat v408 = v680.origin.x;
                                          CGFloat v409 = v680.origin.y;
                                          CGFloat v410 = v680.size.width;
                                          CGFloat v411 = v680.size.height;
                                          swift_release();

                                          v681.origin.CGFloat x = v408;
                                          v681.origin.CGFloat y = v409;
                                          v681.size.CGFloat width = v410;
                                          v681.size.CGFloat height = v411;
                                          CGRect v682 = CGRectInset(v681, -1.0, -1.0);
                                          CGFloat v412 = v682.origin.x;
                                          CGFloat v413 = v682.origin.y;
                                          CGFloat v414 = v682.size.width;
                                          CGFloat v415 = v682.size.height;
                                          swift_release();

                                          v683.origin.CGFloat x = v280;
                                          v683.origin.CGFloat y = v278;
                                          v683.size.CGFloat width = v277;
                                          v683.size.CGFloat height = v279;
                                          v724.origin.CGFloat x = v412;
                                          v724.origin.CGFloat y = v413;
                                          v724.size.CGFloat width = v414;
                                          v724.size.CGFloat height = v415;
                                          CGRect v684 = CGRectUnion(v683, v724);
                                          CGFloat v280 = v684.origin.x;
                                          CGFloat v278 = v684.origin.y;
                                          CGFloat v277 = v684.size.width;
                                          CGFloat v279 = v684.size.height;
                                          CFIndex v274 = v401;
                                          if (v275 == v401) {
                                            goto LABEL_202;
                                          }
                                        }
                                      }
LABEL_278:
                                      __break(1u);
LABEL_279:
                                      __break(1u);
LABEL_280:
                                      __break(1u);
                                      goto LABEL_281;
                                    }
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    CGFloat v277 = v124;
                                    CGFloat v278 = b;
                                    CGFloat v279 = v150;
                                    CGFloat v280 = a;
LABEL_202:
                                    CGAffineTransform v555 = v564;
                                    v690.origin.CGFloat x = v280;
                                    v690.origin.CGFloat y = v278;
                                    v690.size.CGFloat width = v277;
                                    v690.size.CGFloat height = v279;
                                    CGRect v691 = CGRectApplyAffineTransform(v690, &v555);
                                    CGFloat v258 = v691.origin.x;
                                    CGFloat v259 = v691.origin.y;
                                    CGFloat v260 = v691.size.width;
                                    CGFloat v261 = v691.size.height;
                                    CGFloat a = v532;
                                    CGFloat b = r2_8;
                                    CGFloat v124 = r2_24;
                                    double v150 = r2_16;
                                    CGFloat v204 = v519;
                                    CGFloat v203 = v520;
                                    uint64_t v256 = v516;
                                    uint64_t v254 = v517;
                                    uint64_t v257 = v518;
                                    break;
                                }
                              }
                              ++v257;
                              v646.origin.CGFloat x = r2;
                              v646.origin.CGFloat y = v527;
                              v646.size.CGFloat width = v203;
                              v646.size.CGFloat height = v204;
                              CGRect v647 = CGRectUnion(v646, *(CGRect *)&v258);
                              CGFloat r2 = v647.origin.x;
                              CGFloat v527 = v647.origin.y;
                              CGFloat v203 = v647.size.width;
                              CGFloat v204 = v647.size.height;
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v560, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            }
                            while (v257 != v254);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            CGFloat a = r2;
                            CGFloat v255 = v527;
LABEL_205:
                            v692.origin.CGFloat x = a;
                            v692.origin.CGFloat y = v255;
                            v692.size.CGFloat width = v203;
                            v692.size.CGFloat height = v204;
                            if (CGRectIsNull(v692))
                            {
                              CGFloat b = v255;
                            }
                            else
                            {
                              v693.origin.CGFloat x = a;
                              v693.origin.CGFloat y = v255;
                              v693.size.CGFloat width = v203;
                              v693.size.CGFloat height = v204;
                              CGRect v694 = CGRectStandardize(v693);
                              if (v490 == v489) {
                                double v425 = v489;
                              }
                              else {
                                double v425 = v490;
                              }
                              double v426 = v694.origin.x - v425;
                              double v427 = v694.origin.y - v491;
                              double v428 = v694.size.width - (-v489 - v490);
                              double v429 = v694.size.height - (-v488 - v491);
                              v695.origin.CGFloat x = v694.origin.x - v425;
                              v695.origin.CGFloat y = v694.origin.y - v491;
                              v695.size.CGFloat width = v428;
                              v695.size.CGFloat height = v429;
                              CGFloat a = v532;
                              CGFloat v203 = r2_24;
                              CGFloat v204 = r2_16;
                              if (CGRectGetWidth(v695) >= 0.0)
                              {
                                v696.origin.CGFloat x = v426;
                                v696.origin.CGFloat y = v427;
                                v696.size.CGFloat width = v428;
                                v696.size.CGFloat height = v429;
                                if (CGRectGetHeight(v696) >= 0.0)
                                {
                                  CGFloat a = v426;
                                  CGFloat b = v427;
                                  CGFloat v203 = v428;
                                  CGFloat v204 = v429;
                                }
                                else
                                {
                                  CGFloat a = v532;
                                  CGFloat b = r2_8;
                                  CGFloat v203 = r2_24;
                                  CGFloat v204 = r2_16;
                                }
                              }
                            }
                            goto LABEL_217;
                          default:
                            if ((void)v566 != *((void *)&v566 + 1))
                            {
                              if (*((uint64_t *)&v566 + 1) < (uint64_t)v566) {
                                goto LABEL_280;
                              }
                              if ((uint64_t)v566 < *((uint64_t *)&v566 + 1))
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                CGFloat v203 = v124;
                                CGFloat v204 = v150;
                                while (1)
                                {
                                  if (LOBYTE(v197))
                                  {
                                    outlined copy of Text.Layout.Line.Line((void *)v195, v196, 1);
                                    id v221 = (id)_NSTextLineFragmentGetCTLine((void *)v195);
                                    if (!v221) {
                                      goto LABEL_289;
                                    }
                                    unint64_t v205 = v221;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  }
                                  else
                                  {
                                    outlined copy of Text.Layout.Line.Line((void *)v195, v196, 0);
                                    outlined copy of Text.Layout.Line.Line((void *)v195, v196, 0);

                                    swift_release();
                                    unint64_t v205 = (void *)v195;
                                  }
                                  CFIndex v206 = v200 + 1;
                                  swift_retain();
                                  char v207 = v205;
                                  uint64_t v208 = (id)_CTLineGetRunAtIndex(v207, v200);
                                  v599.location = 0;
                                  v599.CFIndex length = 0;
                                  CGRect v634 = CTRunGetImageBounds((CTRunRef)v208, 0, v599);
                                  CGFloat v209 = v634.origin.x;
                                  CGFloat v210 = v634.origin.y;
                                  CGFloat v211 = v634.size.width;
                                  CGFloat v212 = v634.size.height;

                                  v560.CGFloat b = 0.0;
                                  v560.CGFloat c = 0.0;
                                  v560.CGFloat a = 1.0;
                                  v560.CGFloat d = -1.0;
                                  v560.tCGFloat x = v198;
                                  v560.tCGFloat y = v199;
                                  v635.origin.CGFloat x = v209;
                                  v635.origin.CGFloat y = v210;
                                  v635.size.CGFloat width = v211;
                                  v635.size.CGFloat height = v212;
                                  CGRect v636 = CGRectApplyAffineTransform(v635, &v560);
                                  CGFloat v213 = v636.origin.x;
                                  CGFloat v214 = v636.origin.y;
                                  CGFloat v215 = v636.size.width;
                                  CGFloat v216 = v636.size.height;
                                  swift_release();

                                  v637.origin.CGFloat x = v213;
                                  v637.origin.CGFloat y = v214;
                                  v637.size.CGFloat width = v215;
                                  v637.size.CGFloat height = v216;
                                  CGRect v638 = CGRectInset(v637, -1.0, -1.0);
                                  CGFloat v217 = v638.origin.x;
                                  CGFloat v218 = v638.origin.y;
                                  CGFloat v219 = v638.size.width;
                                  CGFloat v220 = v638.size.height;
                                  swift_release();

                                  v639.origin.CGFloat x = a;
                                  v639.origin.CGFloat y = b;
                                  v639.size.CGFloat width = v203;
                                  v639.size.CGFloat height = v204;
                                  v721.origin.CGFloat x = v217;
                                  v721.origin.CGFloat y = v218;
                                  v721.size.CGFloat width = v219;
                                  v721.size.CGFloat height = v220;
                                  CGRect v640 = CGRectUnion(v639, v721);
                                  CGFloat a = v640.origin.x;
                                  CGFloat b = v640.origin.y;
                                  CGFloat v203 = v640.size.width;
                                  CGFloat v204 = v640.size.height;
                                  CFIndex v200 = v206;
                                  if (v201 == v206) {
                                    goto LABEL_217;
                                  }
                                }
                              }
LABEL_281:
                              __break(1u);
LABEL_282:
                              __break(1u);
LABEL_283:
                              __break(1u);
                              goto LABEL_284;
                            }
LABEL_96:
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            CGFloat v203 = v124;
                            CGFloat v204 = v150;
LABEL_217:
                            CGAffineTransform v560 = v569;
                            v697.origin.CGFloat x = a;
                            v697.origin.CGFloat y = b;
                            v697.size.CGFloat width = v203;
                            v697.size.CGFloat height = v204;
                            CGRect v698 = CGRectApplyAffineTransform(v697, &v560);
                            CGFloat v184 = v698.origin.x;
                            CGFloat v185 = v698.origin.y;
                            CGFloat v186 = v698.size.width;
                            CGFloat v187 = v698.size.height;
                            uint64_t v182 = v509;
                            uint64_t v181 = v510;
                            uint64_t v183 = v514;
                            CGFloat v124 = r2_24;
                            CGFloat a = v532;
                            double v150 = r2_16;
                            CGFloat b = r2_8;
                            CGFloat v123 = v515;
                            break;
                        }
                      }
                      ++v183;
                      v632.origin.CGFloat x = v523;
                      v632.origin.CGFloat y = v522;
                      v632.size.CGFloat width = r1;
                      v632.size.CGFloat height = v123;
                      CGRect v633 = CGRectUnion(v632, *(CGRect *)&v184);
                      CGFloat v523 = v633.origin.x;
                      CGFloat v522 = v633.origin.y;
                      CGFloat r1 = v633.size.width;
                      CGFloat v123 = v633.size.height;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v565, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    }
                    while (v183 != v181);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    CGFloat a = v523;
                    CGFloat b = v522;
                    CGFloat v124 = r1;
LABEL_226:
                    v700.origin.CGFloat x = a;
                    v700.origin.CGFloat y = b;
                    v700.size.CGFloat width = v124;
                    v700.size.CGFloat height = v123;
                    if (CGRectIsNull(v700)) {
                      goto LABEL_237;
                    }
                    double v433 = v150;
                    v701.origin.CGFloat x = a;
                    v701.origin.CGFloat y = b;
                    v701.size.CGFloat width = v124;
                    v701.size.CGFloat height = v123;
                    CGRect v702 = CGRectStandardize(v701);
                    if (v484 == v483) {
                      double v434 = v483;
                    }
                    else {
                      double v434 = v484;
                    }
                    double v435 = v702.origin.x - v434;
                    double v436 = v702.origin.y - v485;
                    double v437 = v702.size.width - (-v483 - v484);
                    double v438 = v702.size.height - (-v482 - v485);
                    v703.origin.CGFloat x = v702.origin.x - v434;
                    v703.origin.CGFloat y = v702.origin.y - v485;
                    v703.size.CGFloat width = v437;
                    v703.size.CGFloat height = v438;
                    CGFloat v439 = CGRectGetWidth(v703);
                    CGFloat a = v532;
                    CGFloat b = r2_8;
                    CGFloat v127 = r2_24;
                    CGFloat v123 = v433;
                    if (v439 >= 0.0)
                    {
                      v704.origin.CGFloat x = v435;
                      v704.origin.CGFloat y = v436;
                      v704.size.CGFloat width = v437;
                      v704.size.CGFloat height = v438;
                      if (CGRectGetHeight(v704) >= 0.0)
                      {
                        CGFloat a = v435;
                        CGFloat b = v436;
                        CGFloat v127 = v437;
                        CGFloat v123 = v438;
                      }
                      else
                      {
                        CGFloat a = v532;
                        CGFloat b = r2_8;
                        CGFloat v127 = r2_24;
                        CGFloat v123 = r2_16;
                      }
                    }
                    goto LABEL_238;
                  default:
                    CGFloat v123 = r2_16;
                    CGFloat v124 = r2_24;
                    CGFloat b = r2_8;
                    CGFloat a = v532;
                    if ((void)v571 != *((void *)&v571 + 1))
                    {
                      if (*((uint64_t *)&v571 + 1) < (uint64_t)v571) {
                        goto LABEL_283;
                      }
                      if ((uint64_t)v571 < *((uint64_t *)&v571 + 1))
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        CGFloat v127 = r2_24;
                        while (1)
                        {
                          CGFloat v147 = v127;
                          if (LOBYTE(c))
                          {
                            outlined copy of Text.Layout.Line.Line((void *)v115, v116, 1);
                            id v148 = (id)_NSTextLineFragmentGetCTLine((void *)v115);
                            if (!v148) {
                              goto LABEL_290;
                            }
                            uint64_t v128 = v148;
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                          }
                          else
                          {
                            outlined copy of Text.Layout.Line.Line((void *)v115, v116, 0);
                            outlined copy of Text.Layout.Line.Line((void *)v115, v116, 0);

                            swift_release();
                            uint64_t v128 = (void *)v115;
                          }
                          CFIndex v129 = v120 + 1;
                          swift_retain();
                          long long v130 = v128;
                          long long v131 = (id)_CTLineGetRunAtIndex(v130, v120);
                          v597.location = 0;
                          v597.CFIndex length = 0;
                          CGRect v621 = CTRunGetImageBounds((CTRunRef)v131, 0, v597);
                          CGFloat v132 = v621.origin.x;
                          CGFloat v133 = v621.origin.y;
                          CGFloat v134 = v621.size.width;
                          CGFloat v135 = v621.size.height;

                          v565.CGFloat b = 0.0;
                          v565.CGFloat c = 0.0;
                          v565.CGFloat a = 1.0;
                          v565.CGFloat d = -1.0;
                          v565.tCGFloat x = d;
                          v565.tCGFloat y = tx;
                          v622.origin.CGFloat x = v132;
                          v622.origin.CGFloat y = v133;
                          v622.size.CGFloat width = v134;
                          v622.size.CGFloat height = v135;
                          CGRect v623 = CGRectApplyAffineTransform(v622, &v565);
                          CGFloat v136 = v623.origin.x;
                          CGFloat v137 = v623.origin.y;
                          CGFloat v138 = v623.size.width;
                          CGFloat v139 = v623.size.height;
                          swift_release();

                          v624.origin.CGFloat x = v136;
                          v624.origin.CGFloat y = v137;
                          v624.size.CGFloat width = v138;
                          v624.size.CGFloat height = v139;
                          CGRect v625 = CGRectInset(v624, -1.0, -1.0);
                          CGFloat v140 = v625.origin.x;
                          CGFloat v141 = v625.origin.y;
                          CGFloat v142 = v625.size.width;
                          CGFloat v143 = v625.size.height;
                          swift_release();

                          v626.origin.CGFloat x = a;
                          v626.origin.CGFloat y = b;
                          v626.size.CGFloat width = v147;
                          v626.size.CGFloat height = v123;
                          v720.origin.CGFloat x = v140;
                          v720.origin.CGFloat y = v141;
                          v720.size.CGFloat width = v142;
                          v720.size.CGFloat height = v143;
                          *(CGRect *)(&v127 - 2) = CGRectUnion(v626, v720);
                          CGFloat a = v144;
                          CGFloat b = v145;
                          CGFloat v123 = v146;
                          CFIndex v120 = v129;
                          if (v121 == v129) {
                            goto LABEL_238;
                          }
                        }
                      }
LABEL_284:
                      __break(1u);
LABEL_285:
                      __break(1u);
                      goto LABEL_286;
                    }
LABEL_234:
                    v440 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_235:
                    uint64_t v166 = v440;
LABEL_236:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v166);
LABEL_237:
                    CGFloat v127 = v124;
LABEL_238:
                    CGAffineTransform v565 = v574;
                    CGFloat v441 = a;
                    CGFloat v442 = b;
                    CGFloat v443 = v123;
                    CGRect v705 = CGRectApplyAffineTransform(*(CGRect *)(&v127 - 2), &v565);
                    CGFloat v104 = v705.origin.x;
                    CGFloat v105 = v705.origin.y;
                    CGFloat v106 = v705.size.width;
                    CGFloat v107 = v705.size.height;
                    CGFloat v31 = v507;
                    CGFloat v30 = v508;
                    CGFloat v33 = v505;
                    CGFloat v32 = v506;
                    uint64_t v102 = v497;
                    uint64_t v101 = v498;
                    uint64_t v103 = v504;
                    break;
                }
              }
              ++v103;
              v619.origin.CGFloat x = v30;
              v619.origin.CGFloat y = v31;
              v619.size.CGFloat width = v32;
              v619.size.CGFloat height = v33;
              CGRect v620 = CGRectUnion(v619, *(CGRect *)&v104);
              CGFloat v30 = v620.origin.x;
              CGFloat v31 = v620.origin.y;
              CGFloat v32 = v620.size.width;
              CGFloat v33 = v620.size.height;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v570, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            }
            while (v103 != v101);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_247:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            v707.origin.CGFloat x = v30;
            v707.origin.CGFloat y = v31;
            v707.size.CGFloat width = v32;
            v707.size.CGFloat height = v33;
            if (!CGRectIsNull(v707))
            {
              v708.origin.CGFloat x = v30;
              v708.origin.CGFloat y = v31;
              v708.size.CGFloat width = v32;
              v708.size.CGFloat height = v33;
              CGRect v709 = CGRectStandardize(v708);
              double v446 = v471 == v470 ? v470 : v471;
              double v447 = v709.origin.x - v446;
              double v448 = v709.origin.y - v472;
              double v449 = v709.size.width - (-v470 - v471);
              double v450 = v709.size.height - (-v469 - v472);
              v710.origin.CGFloat x = v709.origin.x - v446;
              v710.origin.CGFloat y = v709.origin.y - v472;
              v710.size.CGFloat width = v449;
              v710.size.CGFloat height = v450;
              CGFloat v30 = v532;
              CGFloat v31 = r2_8;
              CGFloat v32 = r2_24;
              CGFloat v33 = r2_16;
              if (CGRectGetWidth(v710) >= 0.0)
              {
                v711.origin.CGFloat x = v447;
                v711.origin.CGFloat y = v448;
                v711.size.CGFloat width = v449;
                v711.size.CGFloat height = v450;
                if (CGRectGetHeight(v711) >= 0.0)
                {
                  CGFloat v30 = v447;
                  CGFloat v31 = v448;
                  CGFloat v32 = v449;
                  CGFloat v33 = v450;
                }
                else
                {
                  CGFloat v30 = v532;
                  CGFloat v31 = r2_8;
                  CGFloat v32 = r2_24;
                  CGFloat v33 = r2_16;
                }
              }
            }
            goto LABEL_258;
          default:
            if ((void)v578 != *((void *)&v578 + 1))
            {
              if (*((uint64_t *)&v578 + 1) < (uint64_t)v578) {
                goto LABEL_285;
              }
              if ((uint64_t)v578 < *((uint64_t *)&v578 + 1))
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                while (1)
                {
                  double v73 = v54;
                  if (LOBYTE(v54))
                  {
                    outlined copy of Text.Layout.Line.Line((void *)v53, *((uint64_t *)&v53 + 1), 1);
                    id v74 = (id)_NSTextLineFragmentGetCTLine((void *)v53);
                    if (!v74) {
                      goto LABEL_291;
                    }
                    double v58 = v74;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                  }
                  else
                  {
                    outlined copy of Text.Layout.Line.Line((void *)v53, *((uint64_t *)&v53 + 1), 0);
                    outlined copy of Text.Layout.Line.Line((void *)v53, *((uint64_t *)&v53 + 1), 0);

                    swift_release();
                    double v58 = (void *)v53;
                  }
                  swift_retain();
                  uint64_t v59 = v58;
                  id v60 = (id)_CTLineGetRunAtIndex(v59, v56);
                  v595.location = 0;
                  v595.CFIndex length = 0;
                  CGRect v607 = CTRunGetImageBounds((CTRunRef)v60, 0, v595);
                  CGFloat v61 = v607.origin.x;
                  CGFloat v62 = v607.origin.y;
                  CGFloat v63 = v607.size.width;
                  CGFloat v64 = v607.size.height;

                  v570.CGFloat b = 0.0;
                  v570.CGFloat c = 0.0;
                  v570.CGFloat a = 1.0;
                  v570.CGFloat d = -1.0;
                  v570.tCGFloat x = v542;
                  v570.tCGFloat y = v55;
                  v608.origin.CGFloat x = v61;
                  v608.origin.CGFloat y = v62;
                  v608.size.CGFloat width = v63;
                  v608.size.CGFloat height = v64;
                  CGRect v609 = CGRectApplyAffineTransform(v608, &v570);
                  CGFloat v65 = v609.origin.x;
                  CGFloat v66 = v609.origin.y;
                  CGFloat v67 = v609.size.width;
                  CGFloat v68 = v609.size.height;
                  swift_release();

                  v610.origin.CGFloat x = v65;
                  v610.origin.CGFloat y = v66;
                  v610.size.CGFloat width = v67;
                  v610.size.CGFloat height = v68;
                  CGRect v611 = CGRectInset(v610, -1.0, -1.0);
                  CGFloat v69 = v611.origin.x;
                  CGFloat v70 = v611.origin.y;
                  CGFloat v71 = v611.size.width;
                  CGFloat v72 = v611.size.height;
                  swift_release();

                  v612.origin.CGFloat x = v30;
                  v612.origin.CGFloat y = v31;
                  v612.size.CGFloat width = v32;
                  v612.size.CGFloat height = v33;
                  v719.origin.CGFloat x = v69;
                  v719.origin.CGFloat y = v70;
                  v719.size.CGFloat width = v71;
                  v719.size.CGFloat height = v72;
                  CGRect v613 = CGRectUnion(v612, v719);
                  CGFloat v30 = v613.origin.x;
                  CGFloat v31 = v613.origin.y;
                  CGFloat v32 = v613.size.width;
                  CGFloat v33 = v613.size.height;
                  ++v56;
                  CGFloat v54 = v73;
                  if (v57 == v56) {
                    goto LABEL_258;
                  }
                }
              }
LABEL_286:
              __break(1u);
LABEL_287:
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
LABEL_292:
              __break(1u);
LABEL_293:
              __break(1u);
LABEL_294:
              __break(1u);
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x245B44F50);
            }
LABEL_255:
            __n128 v451 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
            break;
        }
        uint64_t v85 = v451;
LABEL_257:
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v85);
LABEL_258:
        CGAffineTransform v570 = v581;
        v712.origin.CGFloat x = v30;
        v712.origin.CGFloat y = v31;
        v712.size.CGFloat width = v32;
        v712.size.CGFloat height = v33;
        CGRect v713 = CGRectApplyAffineTransform(v712, &v570);
        CGFloat v42 = v713.origin.x;
        CGFloat v43 = v713.origin.y;
        CGFloat v44 = v713.size.width;
        CGFloat v45 = v713.size.height;
        uint64_t v34 = v487;
        uint64_t v35 = v486;
        uint64_t v37 = v496;
        CGFloat v39 = v494;
        CGFloat v38 = v495;
        CGFloat v41 = v492;
        CGFloat v40 = v493;
        CGFloat v33 = r2_16;
        CGFloat v32 = r2_24;
        CGFloat v31 = r2_8;
        CGFloat v30 = v532;
      }
      ++v37;
      v605.origin.CGFloat x = v38;
      v605.origin.CGFloat y = v39;
      v605.size.CGFloat width = v40;
      v605.size.CGFloat height = v41;
      CGRect v606 = CGRectUnion(v605, *(CGRect *)&v42);
      CGFloat v38 = v606.origin.x;
      CGFloat v39 = v606.origin.y;
      CGFloat v40 = v606.size.width;
      CGFloat v41 = v606.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v575, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
    }
    while (v37 != v34);
    swift_bridgeObjectRelease_n();
    outlined release of LinearGradient((uint64_t)&v592);
  }
  else
  {
    outlined retain of LinearGradient((uint64_t)&v592);
    outlined retain of ViewTransform((uint64_t)&v591);
    swift_retain();
    outlined retain of LinearGradient((uint64_t)v594);
    outlined retain of LinearGradient((uint64_t)&v593);
    swift_bridgeObjectRelease();
    outlined release of LinearGradient((uint64_t)&v592);
    CGFloat v38 = v30;
    CGFloat v39 = v31;
    CGFloat v40 = v32;
    CGFloat v41 = v33;
  }
  outlined release of ViewTransform((uint64_t)&v591);
  swift_release();
  outlined release of LinearGradient((uint64_t)v594);
  outlined release of LinearGradient((uint64_t)&v593);
  *(void *)&long long v575 = v481;
  *((void *)&v575 + 1) = v480;
  LOBYTE(v576) = v479;
  *((void *)&v576 + 1) = v478;
  *(void *)&long long v577 = v477;
  DWORD2(v577) = v476;
  *(void *)&long long v578 = v475;
  *((void *)&v578 + 1) = v474;
  *(void *)&long long v579 = v473;
  v725.origin.CGFloat x = TextRenderLayer.correctionMarkersBounds(composition:segmentIndex:)((uint64_t)&v575, a2, (double (*)(void **, uint64_t, uint64_t, double, double))TextRenderLayer.correctionMarkersBounds(line:glyphOrigin:ranges:metrics:));
  v725.origin.CGFloat y = v454;
  v725.size.CGFloat width = v455;
  v725.size.CGFloat height = v456;
  v715.origin.CGFloat x = v38;
  v715.origin.CGFloat y = v39;
  v715.size.CGFloat width = v40;
  v715.size.CGFloat height = v41;
  CGRect v716 = CGRectUnion(v715, v725);
  CGFloat v457 = v716.origin.x;
  CGFloat v458 = v716.origin.y;
  CGFloat v459 = v716.size.width;
  CGFloat v460 = v716.size.height;
  *(void *)&long long v575 = v481;
  *((void *)&v575 + 1) = v480;
  LOBYTE(v576) = v479;
  *((void *)&v576 + 1) = v478;
  *(void *)&long long v577 = v477;
  DWORD2(v577) = v476;
  *(void *)&long long v578 = v475;
  *((void *)&v578 + 1) = v474;
  *(void *)&long long v579 = v473;
  v726.origin.CGFloat x = TextRenderLayer.correctionMarkersBounds(composition:segmentIndex:)((uint64_t)&v575, a2, (double (*)(void **, uint64_t, uint64_t, double, double))TextRenderLayer.markedTextBounds(line:glyphOrigin:ranges:metrics:));
  v726.origin.CGFloat y = v461;
  v726.size.CGFloat width = v462;
  v726.size.CGFloat height = v463;
  v717.origin.CGFloat x = v457;
  v717.origin.CGFloat y = v458;
  v717.size.CGFloat width = v459;
  v717.size.CGFloat height = v460;
  CGRect v718 = CGRectUnion(v717, v726);
  double v464 = v718.origin.x;
  BOOL IsNull = CGRectIsNull(v718);
  swift_release();
  if (IsNull && (a3 & 1) == 0) {
    return 0.0;
  }
  return v464;
}

void TextRenderLayer.pixelLength.getter()
{
  if (objc_msgSend(v0, sel_delegate))
  {
    type metadata accessor for TextRenderSurface();
    uint64_t v1 = swift_dynamicCastClass();
    if (v1
      && (uint64_t v2 = MEMORY[0x24C527E00](v1 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
    {
      uint64_t v3 = (void *)v2;
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t TextRenderLayer.init(layer:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment] = 0;
  uint64_t v5 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout];
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v32);
  _sypSgWObTm_1((uint64_t)v32, v5, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t v6 = &v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers] = 0;
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags;
  v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = 0;
  uint64_t v8 = MEMORY[0x263F8EE80];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics] = MEMORY[0x263F8EE80];
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers] = MEMORY[0x263F8EE78];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices] = v8;
  uint64_t v10 = MEMORY[0x263F8EE88];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers] = MEMORY[0x263F8EE88];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version] = -1;
  uint64_t v11 = v2;
  RangeSet.init()();
  *(void *)&v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer] = 0;
  *(void *)&v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements] = v9;
  uint64_t v12 = &v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  uint64_t v13 = &v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets];
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *(void *)&v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutLineFragmentPadding] = 0;
  long long v14 = &v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement];
  *(_OWORD *)long long v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(void *)&v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers] = v10;
  uint64_t v15 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  *(CFTimeInterval *)&v11[v15] = CACurrentMediaTime();
  uint64_t v26 = a1;
  outlined init with copy of Any(a1, (uint64_t)v31);
  if (swift_dynamicCast())
  {
    uint64_t v16 = v30;
    *(void *)&v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController] = *(void *)&v30[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
    uint64_t v17 = (void *)MEMORY[0x24C527E00](&v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_geometryObserver]);
    swift_unknownObjectWeakAssign();
    swift_retain();

    char v18 = *(void **)&v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment];
    uint64_t v19 = *(void **)&v2[v4];
    *(void *)&v2[v4] = v18;
    id v20 = v18;

    _sypSgWObTm_1((uint64_t)&v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1(v5, (uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1((uint64_t)v28, v5, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined release of TextRenderLayer.Layout?(v28, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
    outlined release of TextRenderLayer.Layout?(v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    v2[v7] = 15;
    uint64_t v21 = *(void *)&v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8];
    uint64_t v22 = &v11[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
    *(void *)uint64_t v22 = *(void *)&v16[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
    *((void *)v22 + 1) = v21;
    swift_bridgeObjectRetain();

    v27.receiver = v11;
    v27.super_class = ObjectType;
    id v23 = objc_msgSendSuper2(&v27, sel_initWithLayer_, v16);

    __swift_destroy_boxed_opaque_existential_1(v26);
    return (uint64_t)v23;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void **a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v36 = a3;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  long long v14 = (char *)&v33 - v13;
  uint64_t v15 = type metadata accessor for Text.Effect.InteractionMetrics();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  int v35 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 32);
  int v34 = *(_DWORD *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = *a2;
  objc_super v27 = (uint64_t *)(v8 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics);
  swift_beginAccess();
  uint64_t v28 = *v27;
  if (*(void *)(*v27 + 16) && (uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v40), (v30 & 1) != 0))
  {
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(*(void *)(v28 + 56) + *(void *)(v16 + 72) * v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v18, (uint64_t)a8, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  }
  else
  {
    swift_endAccess();
    *a8 = (void *)MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    RangeSet.init()();
    *(void **)((char *)a8 + *(int *)(v15 + 24)) = (void *)MEMORY[0x263F8EE88];
    CGFloat v31 = (void **)((char *)a8 + *(int *)(v15 + 28));
    *CGFloat v31 = 0;
    v31[1] = 0;
    v41[1] = v20;
    v41[2] = v19;
    char v42 = v35;
    uint64_t v43 = v21;
    uint64_t v44 = v22;
    int v45 = v34;
    uint64_t v46 = v23;
    uint64_t v47 = v24;
    uint64_t v48 = v25;
    v41[0] = v26;
    Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(a8, v41, v36, v37, v38, v39);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)a8, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, v40);
  }
  return swift_endAccess();
}

uint64_t TextRenderLayer.compositionContext(_:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)a2;
  int v14 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
  uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 112);
  v24[1] = v5;
  v24[2] = v6;
  char v25 = v7;
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  int v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v12;
  uint64_t v31 = v22;
  if (v14 == 1) {
    uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
  }
  v24[0] = v13;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v18 = Text.Effect.Composition.displacements(at:context:)(v24, v15, v23, v17, v16);
  uint64_t v20 = v19;
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v15;
  a3[1] = v23;
  a3[2] = v17;
  a3[3] = v16;
  a3[4] = v18;
  a3[5] = v20;
  return result;
}

uint64_t TextRenderLayer.textMarkers(for:)(uint64_t a1)
{
  uint64_t v44 = a1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v38 - v5;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v43 = v7;
  MEMORY[0x270FA5388](v7);
  char v42 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers);
  if (!v12) {
    return 0;
  }
  uint64_t v41 = *(void *)(v12 + 16);
  if (!v41)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)MEMORY[0x263F8EE78];
LABEL_24:
    uint64_t v37 = v36[2];
    swift_bridgeObjectRelease();
    if (v37) {
      return (uint64_t)v36;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v39 = v12 + 32;
  long long v50 = (void (**)(char *, uint64_t))(v4 + 8);
  long long v51 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t result = swift_bridgeObjectRetain_n();
  unint64_t v14 = 0;
  uint64_t v46 = (void *)MEMORY[0x263F8EE78];
  uint64_t v40 = v12;
  while (v14 < *(void *)(v12 + 16))
  {
    unint64_t v45 = v14;
    uint64_t v15 = v39 + 32 * v14;
    int v16 = *(unsigned __int8 *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(v15 + 24);
    uint64_t v47 = *(void *)v15;
    int v52 = v16;
    outlined copy of Text.Effect.Markers.MarkerType(v47, v16);
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    RangeSet.ranges.getter();
    uint64_t v19 = (uint64_t)v42;
    long long v49 = *v51;
    v49(v42, v6, v3);
    lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v48 = *v50;
    v48(v6, v3);
    uint64_t v20 = v43;
    *(void *)(v19 + *(int *)(v43 + 36)) = v53[0];
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v19, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    uint64_t v21 = &v11[*(int *)(v20 + 36)];
    while (1)
    {
      uint64_t v22 = *(void *)v21;
      dispatch thunk of Collection.endIndex.getter();
      if (v22 == v53[0]) {
        break;
      }
      uint64_t v23 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      v23(v53, 0);
      v49(v6, v11, v3);
      dispatch thunk of Collection.formIndex(after:)();
      v48(v6, v3);
      if (v18 <= v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = v18;
      }
      if (v17 >= v25) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = v17;
      }
      char v29 = v52;
      if (v27 >= v28) {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
        }
        unint64_t v31 = v46[2];
        unint64_t v30 = v46[3];
        unint64_t v32 = v31 + 1;
        if (v31 >= v30 >> 1)
        {
          unint64_t v38 = v31 + 1;
          int v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v46);
          unint64_t v32 = v38;
          uint64_t v46 = v35;
        }
        uint64_t v33 = v46;
        void v46[2] = v32;
        int v34 = &v33[4 * v31];
        v34[4] = v47;
        *((unsigned char *)v34 + 40) = 0;
        v34[6] = v27;
        v34[7] = v28;
      }
    }
    unint64_t v14 = v45 + 1;
    outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    uint64_t result = outlined consume of Text.Effect.Markers.MarkerType(v47, v52);
    uint64_t v12 = v40;
    if (v14 == v41)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = v46;
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

void TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v9 = *(void **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    char v11 = *(unsigned char *)(a2 + 16);
    long long v24 = *(_OWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a2 + 40);
    _sypSgWObTm_1(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v31) != 1
      && (v11 & 1) == 0)
    {
      outlined release of TextRenderLayer.Layout?(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
      outlined copy of Text.Layout.Line.Line(v9, v10, 0);

      if (v10)
      {
        uint64_t v13 = v9;
        swift_retain();
        CFRange StringRange = CTLineGetStringRange(v13);
        outlined consume of Text.Layout.Line.Line(v9, v10, 0);
        if (__OFADD__(StringRange.location, StringRange.length))
        {
          __break(1u);
        }
        else if (StringRange.location + StringRange.length >= StringRange.location)
        {
          uint64_t v15 = (void *)(*(uint64_t (**)(CFIndex))(*(void *)v10 + 88))(StringRange.location);
          swift_release();
          if (v15)
          {
            uint64_t aBlock = v9;
            uint64_t v26 = v10;
            LOBYTE(v27) = 0;
            long long v28 = v24;
            LODWORD(v29) = v12;
            uint64_t v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&aBlock, a4, v31[17], a1);
            uint64_t v17 = *a5;
            uint64_t v18 = (CGContext *)(id)RBDrawingStateBeginCGContext();
            uint64_t v19 = (char *)v18;
            CGBlendMode v20 = *(_DWORD *)(v17 + 52);
            if (v20) {
              CGContextSetBlendMode(v18, v20);
            }
            uint64_t v21 = swift_allocObject();
            *(void *)(v21 + 16) = v15;
            *(void *)(v21 + 24) = v16;
            *((void *)&v28 + 1) = partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersIndicator(markers:line:glyphOrigin:ranges:metrics:in:);
            uint64_t v29 = v21;
            uint64_t aBlock = (void *)MEMORY[0x263EF8330];
            uint64_t v26 = 1107296256;
            uint64_t v27 = thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect);
            *(void *)&long long v28 = &block_descriptor_134;
            uint64_t v22 = _Block_copy(&aBlock);
            id v23 = v15;
            swift_bridgeObjectRetain();
            swift_release();
            _NSMarkedTextDrawIndicator(v23, v19, (uint64_t)v22);
            _Block_release(v22);
            RBDrawingStateEndCGContext();

            swift_bridgeObjectRelease();
          }
          goto LABEL_11;
        }
        __break(1u);
        return;
      }
LABEL_11:
      outlined release of TextRenderLayer.Layout?(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    }
  }
}

void TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v9 = *(void **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  char v11 = *(unsigned char *)(a2 + 16);
  long long v24 = *(_OWORD *)(a2 + 24);
  int v12 = *(_DWORD *)(a2 + 40);
  _sypSgWObTm_1(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v30, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v31) == 1
    || (v11 & 1) != 0)
  {
    return;
  }
  outlined release of TextRenderLayer.Layout?(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  outlined copy of Text.Layout.Line.Line(v9, v10, 0);

  if (!v10)
  {
LABEL_11:
    outlined release of TextRenderLayer.Layout?(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    return;
  }
  uint64_t v13 = v9;
  swift_retain();
  CFRange StringRange = CTLineGetStringRange(v13);
  outlined consume of Text.Layout.Line.Line(v9, v10, 0);
  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (StringRange.location + StringRange.length < StringRange.location)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v15 = (void *)(*(uint64_t (**)(CFIndex))(*(void *)v10 + 88))(StringRange.location);
  swift_release();
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t aBlock = v9;
  uint64_t v26 = v10;
  LOBYTE(v27) = 0;
  long long v28 = v24;
  LODWORD(v29) = v12;
  uint64_t v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&aBlock, a4, v31[17], a1);
  uint64_t v17 = *a5;
  uint64_t v18 = (CGContext *)(id)RBDrawingStateBeginCGContext();
  uint64_t v19 = (char *)v18;
  CGBlendMode v20 = *(_DWORD *)(v17 + 52);
  if (v20) {
    CGContextSetBlendMode(v18, v20);
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v15;
  *(void *)(v21 + 24) = v16;
  *((void *)&v28 + 1) = partial apply for closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:);
  uint64_t v29 = v21;
  uint64_t aBlock = (void *)MEMORY[0x263EF8330];
  uint64_t v26 = 1107296256;
  uint64_t v27 = thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect);
  *(void *)&long long v28 = &block_descriptor_128;
  uint64_t v22 = _Block_copy(&aBlock);
  id v23 = v15;
  swift_bridgeObjectRetain();
  swift_release();
  _NSMarkedTextDrawBackground(v23, v19, (uint64_t)v22);
  _Block_release(v22);
  RBDrawingStateEndCGContext();

  outlined release of TextRenderLayer.Layout?(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  swift_bridgeObjectRelease();
}

void *TextRenderLayer.drawCorrectionMarkers(line:glyphOrigin:ranges:metrics:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(_DWORD *)(a1 + 40);
  _sypSgWObTm_1(v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v37, (uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v38);
  if (result != 1)
  {
    _sypSgWObTm_1((uint64_t)v37, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined retain of TextRenderLayer.Layout((uint64_t)v36);
    uint64_t v15 = TextRenderLayer.correctionMarkers(for:)(a2);
    if (v15)
    {
      if (*(void *)(v15 + 16))
      {
        uint64_t v30 = v8;
        uint64_t v31 = v9;
        char v32 = v10;
        uint64_t v33 = v11;
        uint64_t v34 = v12;
        int v35 = v13;
        uint64_t v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&v30, a3, v38[17], v15);
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)(v16 + 16);
        if (v17)
        {
          uint64_t v18 = v16 + 32;
          uint64_t v19 = MEMORY[0x263F8EE58] + 8;
          do
          {
            outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v18, (uint64_t)&v30);
            if (v31)
            {
              uint64_t v21 = v30;
              outlined init with copy of Any?((uint64_t)&v34, (uint64_t)&v26, (uint64_t)&lazy cache variable for type metadata for Any?, v19, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TextRenderLayer.Layout?);
              if (!v27)
              {
                _sypSgWOhTm_1((uint64_t)&v26, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
                uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return result;
              }
              outlined init with take of Any(&v26, &v28);
              uint64_t v22 = *a4;
              id v23 = (CGContext *)(id)RBDrawingStateBeginCGContext();
              long long v24 = v23;
              CGBlendMode v25 = *(_DWORD *)(v22 + 52);
              if (v25) {
                CGContextSetBlendMode(v23, v25);
              }
              __swift_project_boxed_opaque_existential_1(&v28, v29);
              uint64_t v20 = _bridgeAnythingToObjectiveC<A>(_:)();
              _NSTextCorrectionMarkerDraw(v21, v20, (uint64_t)v24);
              swift_unknownObjectRelease();
              RBDrawingStateEndCGContext();

              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
            }
            outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v30);
            v18 += 96;
            --v17;
          }
          while (v17);
        }
      }
      swift_bridgeObjectRelease();
    }
    return outlined release of TextRenderLayer.Layout?(v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  }
  return result;
}

void *TextRenderLayer.correctionMarkersBounds(line:glyphOrigin:ranges:metrics:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(_DWORD *)(a1 + 40);
  _sypSgWObTm_1(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v44, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v45);
  if (result != 1)
  {
    _sypSgWObTm_1((uint64_t)v44, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined retain of TextRenderLayer.Layout((uint64_t)v43);
    uint64_t v13 = TextRenderLayer.correctionMarkers(for:)(a2);
    if (v13)
    {
      uint64_t v37 = v6;
      uint64_t v38 = v7;
      char v39 = v8;
      uint64_t v40 = v9;
      uint64_t v41 = v10;
      int v42 = v11;
      uint64_t v14 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&v37, a3, v45[17], v13);
      swift_bridgeObjectRelease();
      CGFloat x = *MEMORY[0x263F001A0];
      CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
      CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
      CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
      uint64_t v19 = *(void *)(v14 + 16);
      if (!v19)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        return outlined release of TextRenderLayer.Layout?(v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      }
      uint64_t v20 = v14 + 32;
      uint64_t v21 = MEMORY[0x263F8EE58];
      uint64_t v22 = MEMORY[0x263F8EE58] + 8;
      while (1)
      {
        outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v20, (uint64_t)&v37);
        if (v38)
        {
          uint64_t v23 = v37;
          outlined init with copy of Any?((uint64_t)&v41, (uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for Any?, v22, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TextRenderLayer.Layout?);
          if (!v34)
          {
            _sypSgWOhTm_1((uint64_t)&v33, (uint64_t)&lazy cache variable for type metadata for Any?, v21 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for TextRenderLayer.Layout?);
            uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          outlined init with take of Any(&v33, &v35);
          __swift_project_boxed_opaque_existential_1(&v35, v36);
          uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
          _NSTextCorrectionMarkerBounds(v23, v24);
          CGFloat v26 = v25;
          CGFloat v28 = v27;
          CGFloat v30 = v29;
          CGFloat v32 = v31;
          swift_unknownObjectRelease();
          v46.origin.CGFloat x = x;
          v46.origin.CGFloat y = y;
          v46.size.CGFloat width = width;
          v46.size.CGFloat height = height;
          v48.origin.CGFloat x = v26;
          v48.origin.CGFloat y = v28;
          v48.size.CGFloat width = v30;
          v48.size.CGFloat height = v32;
          CGRect v47 = CGRectUnion(v46, v48);
          CGFloat x = v47.origin.x;
          CGFloat y = v47.origin.y;
          CGFloat width = v47.size.width;
          CGFloat height = v47.size.height;
          outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v37);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
        }
        else
        {
          outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v37);
        }
        v20 += 96;
        if (!--v19) {
          goto LABEL_10;
        }
      }
    }
    return outlined release of TextRenderLayer.Layout?(v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  }
  return result;
}

double TextRenderLayer.correctionMarkersBounds(composition:segmentIndex:)(uint64_t a1, uint64_t a2, double (*a3)(void **, uint64_t, uint64_t, double, double))
{
  uint64_t v5 = v3;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v42 - v9;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers);
  if (!v21 || !*(void *)(v21 + 16)) {
    return *MEMORY[0x263F001A0];
  }
  uint64_t v22 = *(void **)a1;
  uint64_t v23 = *(void *)(a1 + 8);
  long long v51 = a3;
  char v24 = *(unsigned char *)(a1 + 16);
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v52 = v13;
  int v27 = *(_DWORD *)(a1 + 40);
  double v28 = *(double *)(a1 + 48);
  double v29 = *(double *)(a1 + 56);
  uint64_t v45 = *(void *)(a1 + 64);
  CGFloat v64 = v22;
  uint64_t v65 = v23;
  char v66 = v24;
  uint64_t v67 = v25;
  uint64_t v68 = v26;
  int v69 = v27;
  double v70 = v28;
  double v71 = v29;
  CGFloat v30 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time);
  uint64_t v72 = v45;
  double v58 = v30;
  uint64_t v43 = a2;
  uint64_t v31 = *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
  CGFloat v32 = (void **)v20;
  CGRect v46 = v20;
  uint64_t v49 = v17;
  uint64_t v44 = v15;
  CGRect v48 = v10;
  uint64_t v34 = *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
  long long v33 = *(char **)(v5 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
  uint64_t v47 = v18;
  swift_beginAccess();
  uint64_t v50 = v12;
  uint64_t v35 = *(void *)(v31 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TextRenderLayer.interactionMetrics(for:at:context:segmentIndex:)((uint64_t)&v64, (uint64_t *)&v58, v34, v33, v35, v31, v43, v32);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  double v58 = v22;
  uint64_t v59 = v23;
  char v60 = v24;
  uint64_t v61 = v25;
  uint64_t v62 = v26;
  int v63 = v27;
  outlined copy of Text.Layout.Line.Line(v22, v23, v24);
  outlined copy of Text.Layout.Line.Line(v22, v23, v24);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  uint64_t v36 = v45;
  swift_bridgeObjectRetain();
  uint64_t v37 = (uint64_t)v44;
  RangeSet.init()();
  CGFloat v64 = v22;
  uint64_t v65 = v23;
  char v66 = v24;
  uint64_t v67 = v25;
  uint64_t v68 = v26;
  int v69 = v27;
  double v70 = v28;
  double v71 = v29;
  uint64_t v72 = v36;
  v53[0] = v22;
  v53[1] = v23;
  char v54 = v24;
  uint64_t v55 = v25;
  uint64_t v56 = v26;
  int v57 = v27;
  Text.Effect.Composition.appendCharacterRanges(line:to:)((char *)v53, v37);
  outlined consume of Text.Layout.Line.Line(v22, v23, v24);
  swift_bridgeObjectRelease();
  uint64_t v38 = (uint64_t)v46;
  uint64_t v39 = (uint64_t)v48;
  outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v46, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v39, 0, 1, v49);
  double v40 = v51(&v58, v37, v39, v28, v29);
  _sypSgWOhTm_1(v39, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v37, v50);
  outlined consume of Text.Layout.Line.Line(v58, v59, v60);
  outlined destroy of Text.Effect.RenderSegmentation.Segment(v38, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  return v40;
}

void *TextRenderLayer.markedTextBounds(line:glyphOrigin:ranges:metrics:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v8 = *((unsigned char *)a1 + 16);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  int v11 = *((_DWORD *)a1 + 10);
  _sypSgWObTm_1(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v69, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v69, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v70);
  if (result != 1)
  {
    uint64_t v13 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment);
    if (v13)
    {
      id v14 = v13;
      outlined release of TextRenderLayer.Layout?(v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
      uint64_t v15 = TextRenderLayer.textMarkers(for:)(a2);
      if (v15)
      {
        uint64_t v63 = v6;
        uint64_t v64 = v7;
        LOBYTE(v65) = v8;
        uint64_t v66 = v9;
        uint64_t v67 = v10;
        int v68 = v11;
        uint64_t v16 = Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)((double *)&v63, a3, v70[17], v15);
        swift_bridgeObjectRelease();
        uint64_t v17 = swift_allocObject();
        long long v18 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
        *(_OWORD *)(v17 + 16) = *MEMORY[0x263F001A0];
        uint64_t v56 = (double *)v17;
        *(_OWORD *)(v17 + 32) = v18;
        uint64_t v19 = *(void *)(v16 + 16);
        if (v19)
        {
          uint64_t v20 = v16 + 32;
          uint64_t result = (void *)swift_beginAccess();
          unint64_t v21 = 0;
          uint64_t v59 = v16;
          id v60 = v14;
          uint64_t v57 = v16 + 32;
          uint64_t v58 = v19;
          while (v21 < *(void *)(v16 + 16))
          {
            outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v20 + 96 * v21, (uint64_t)&v63);
            if (v64)
            {
              uint64_t result = (void *)outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v63);
            }
            else
            {
              id v22 = objc_msgSend(v14, sel_textLineFragments);
              type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
              unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v23 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v24)
                {
LABEL_12:
                  uint64_t v26 = v65;
                  uint64_t v25 = v66;
                  BOOL v27 = __OFSUB__(v66, v65);
                  uint64_t v28 = 4;
                  while (1)
                  {
                    uint64_t result = (v23 & 0xC000000000000001) != 0
                           ? (void *)MEMORY[0x24C523D60](v28 - 4, v23)
                           : *(id *)(v23 + 8 * v28);
                    double v29 = result;
                    uint64_t v30 = v28 - 3;
                    if (__OFADD__(v28 - 4, 1)) {
                      break;
                    }
                    uint64_t result = objc_msgSend(result, sel_characterRange);
                    CGFloat v32 = (void *)((char *)result + v31);
                    if (__OFADD__(result, v31)) {
                      goto LABEL_42;
                    }
                    if ((uint64_t)v32 < (uint64_t)result) {
                      goto LABEL_43;
                    }
                    if ((uint64_t)result < v25 && v26 < (uint64_t)v32)
                    {
                      if (__OFSUB__(v32, result)) {
                        goto LABEL_44;
                      }
                      if (v32 != result)
                      {
                        if (v27) {
                          goto LABEL_45;
                        }
                        if (v25 != v26)
                        {
                          swift_bridgeObjectRelease();
                          CGFloat v34 = v56[2];
                          CGFloat v35 = v56[3];
                          CGFloat v36 = v56[4];
                          CGFloat v37 = v56[5];
                          uint64_t v38 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F81630]), sel_initWithRange_, v26, v25);
                          outlined init with copy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v63, (uint64_t)v62);
                          uint64_t v39 = swift_allocObject();
                          long long v40 = v62[3];
                          *(_OWORD *)(v39 + 48) = v62[2];
                          *(_OWORD *)(v39 + 64) = v40;
                          long long v41 = v62[5];
                          *(_OWORD *)(v39 + 80) = v62[4];
                          *(_OWORD *)(v39 + 96) = v41;
                          long long v42 = v62[1];
                          *(_OWORD *)(v39 + 16) = v62[0];
                          *(_OWORD *)(v39 + 32) = v42;
                          *(void *)(v39 + 112) = v56;
                          aBlock[4] = partial apply for closure #1 in TextRenderLayer.markedTextBounds(line:glyphOrigin:ranges:metrics:);
                          aBlock[5] = v39;
                          aBlock[0] = MEMORY[0x263EF8330];
                          aBlock[1] = 1107296256;
                          aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect);
                          aBlock[3] = &block_descriptor_67;
                          uint64_t v43 = _Block_copy(aBlock);
                          swift_retain();
                          swift_release();
                          _NSMarkedTextBounds(v29, v38, (uint64_t)v43);
                          CGFloat v45 = v44;
                          CGFloat v47 = v46;
                          CGFloat v49 = v48;
                          CGFloat v51 = v50;
                          _Block_release(v43);

                          v71.origin.CGFloat x = v34;
                          v71.origin.CGFloat y = v35;
                          v71.size.CGFloat width = v36;
                          v71.size.CGFloat height = v37;
                          v73.origin.CGFloat x = v45;
                          v73.origin.CGFloat y = v47;
                          v73.size.CGFloat width = v49;
                          v73.size.CGFloat height = v51;
                          CGRect v72 = CGRectUnion(v71, v73);
                          CGFloat x = v72.origin.x;
                          CGFloat y = v72.origin.y;
                          CGFloat width = v72.size.width;
                          CGFloat height = v72.size.height;

                          uint64_t result = (void *)outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v63);
                          v56[2] = x;
                          v56[3] = y;
                          v56[4] = width;
                          v56[5] = height;
                          goto LABEL_35;
                        }
                      }
                    }

                    ++v28;
                    if (v30 == v24) {
                      goto LABEL_34;
                    }
                  }
                  __break(1u);
LABEL_42:
                  __break(1u);
LABEL_43:
                  __break(1u);
LABEL_44:
                  __break(1u);
LABEL_45:
                  __break(1u);
                  break;
                }
              }
              else
              {
                uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v24) {
                  goto LABEL_12;
                }
              }
LABEL_34:
              swift_bridgeObjectRelease();
              uint64_t result = (void *)outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v63);
LABEL_35:
              uint64_t v16 = v59;
              id v14 = v60;
              uint64_t v20 = v57;
              uint64_t v19 = v58;
            }
            if (++v21 == v19)
            {

              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
          }
          __break(1u);
        }
        else
        {

          swift_bridgeObjectRelease();
LABEL_40:
          outlined release of TextRenderLayer.Layout?(v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
          swift_beginAccess();
          return (void *)swift_release();
        }
      }
      else
      {

        return outlined release of TextRenderLayer.Layout?(v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      }
    }
  }
  return result;
}

uint64_t TextRenderLayer.correctionMarkers(for:)(uint64_t a1)
{
  uint64_t v42 = a1;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v37 - v5;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  long long v40 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v37 - v10;
  uint64_t result = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers);
  if (result)
  {
    uint64_t v39 = *(void *)(result + 16);
    if (v39)
    {
      uint64_t v37 = result + 32;
      double v48 = (void (**)(char *, uint64_t))(v4 + 8);
      CGFloat v49 = (void (**)(char *, char *, uint64_t))(v4 + 16);
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v13 = 0;
      CGFloat v45 = (void *)MEMORY[0x263F8EE78];
      uint64_t v38 = result;
      while (v13 < *(void *)(result + 16))
      {
        uint64_t v14 = v37 + 32 * v13;
        uint64_t v15 = *(void *)v14;
        int v16 = *(unsigned __int8 *)(v14 + 8);
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        unint64_t v43 = v13;
        uint64_t v44 = v15;
        int v50 = v16;
        outlined copy of Text.Effect.Markers.MarkerType(v15, v16);
        type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
        RangeSet.ranges.getter();
        uint64_t v19 = (uint64_t)v40;
        CGFloat v47 = *v49;
        v47(v40, v6, v3);
        lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
        dispatch thunk of Collection.startIndex.getter();
        double v46 = *v48;
        v46(v6, v3);
        uint64_t v20 = v41;
        *(void *)(v19 + *(int *)(v41 + 36)) = v51[0];
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v19, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
        unint64_t v21 = &v11[*(int *)(v20 + 36)];
        while (1)
        {
          uint64_t v22 = *(void *)v21;
          dispatch thunk of Collection.endIndex.getter();
          if (v22 == v51[0]) {
            break;
          }
          unint64_t v23 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v26 = *v24;
          uint64_t v25 = v24[1];
          v23(v51, 0);
          v47(v6, v11, v3);
          dispatch thunk of Collection.formIndex(after:)();
          v46(v6, v3);
          if (v18 <= v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = v18;
          }
          if (v17 >= v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v17;
          }
          int v29 = v50;
          if (v27 >= v28) {
            int v29 = 0;
          }
          if (v29 == 1)
          {
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v30 = v45;
            }
            else {
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
            }
            unint64_t v32 = v30[2];
            unint64_t v31 = v30[3];
            long long v33 = (void *)(v32 + 1);
            if (v32 >= v31 >> 1)
            {
              CGFloat v45 = (void *)(v32 + 1);
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
              long long v33 = v45;
            }
            v30[2] = v33;
            CGFloat v45 = v30;
            CGFloat v34 = &v30[4 * v32];
            v34[4] = v44;
            *((unsigned char *)v34 + 40) = 1;
            v34[6] = v27;
            v34[7] = v28;
          }
        }
        unint64_t v13 = v43 + 1;
        outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
        outlined consume of Text.Effect.Markers.MarkerType(v44, v50);
        uint64_t result = v38;
        if (v13 == v39) {
          goto LABEL_24;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      CGFloat v45 = (void *)MEMORY[0x263F8EE78];
LABEL_24:
      CGFloat v35 = v45;
      uint64_t v36 = v45[2];
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)v35;
      if (!v36)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return result;
}

double thunk for @escaping @callee_guaranteed (@unowned CGRect, @guaranteed NSTextRange) -> (@unowned CGRect)(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  int v11 = *(double (**)(double, double, double, double))(a1 + 32);
  swift_retain();
  id v12 = a2;
  double v13 = v11(a3, a4, a5, a6);
  swift_release();

  return v13;
}

void closure #1 in closure #1 in TextRenderLayer.drawTextMarkersBackground(markers:line:glyphOrigin:ranges:metrics:in:)(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = NSTextRange.textRange.getter();
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (uint64_t)v7;
    uint64_t v11 = v8;
    id v12 = objc_msgSend(a3, sel_textLayoutFragment);
    if (!v12) {
      goto LABEL_9;
    }
    double v13 = v12;
    id v14 = objc_msgSend(v12, sel_rangeInElement);

    uint64_t v15 = NSTextRange.textRange.getter();
    char v17 = v16;

    if (v17) {
      goto LABEL_9;
    }
    uint64_t v18 = v10 - (void)v15;
    if (__OFSUB__(v10, v15))
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = v11 - v10;
      if (!__OFSUB__(v11, v10))
      {
        uint64_t v11 = v19 + v18;
        if (!__OFADD__(v19, v18))
        {
          if (v11 >= v18)
          {
            v10 -= (uint64_t)v15;
LABEL_9:
            Text.Effect.MarkerLayoutInfo.rect(for:with:)(v10, v11, a4, a1);
            return;
          }
LABEL_14:
          __break(1u);
          return;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t TextRenderLayer.updateActive(animations:)(uint64_t a1)
{
  uint64_t v57 = 0;
  uint64_t v3 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sypSgWObTm_1((uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v76, (uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  int v7 = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v77);
  uint64_t v8 = MEMORY[0x263F8EE88];
  uint64_t v62 = v1;
  uint64_t v63 = a1;
  if (v7 != 1)
  {
    _sypSgWObTm_1((uint64_t)v76, (uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined retain of TextRenderLayer.Layout((uint64_t)v73);
    uint64_t result = TextRenderLayer.segmentIndices(for:)(a1);
    uint64_t v11 = result;
    int64_t v12 = 0;
    uint64_t v13 = 1 << *(unsigned char *)(result + 32);
    uint64_t v14 = -1;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    unint64_t v15 = v14 & *(void *)(result + 56);
    int v50 = (uint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers];
    uint64_t v51 = result;
    uint64_t v58 = result + 56;
    int64_t v59 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v52 = v4;
    uint64_t v53 = v3;
    if (v15) {
      goto LABEL_8;
    }
LABEL_9:
    BOOL v18 = __OFADD__(v12++, 1);
    if (v18) {
      goto LABEL_64;
    }
    if (v12 < v59)
    {
      unint64_t v19 = *(void *)(v58 + 8 * v12);
      if (v19) {
        goto LABEL_19;
      }
      int64_t v20 = v12 + 1;
      if (v12 + 1 < v59)
      {
        unint64_t v19 = *(void *)(v58 + 8 * v20);
        if (v19) {
          goto LABEL_18;
        }
        int64_t v20 = v12 + 2;
        if (v12 + 2 >= v59) {
          goto LABEL_35;
        }
        unint64_t v19 = *(void *)(v58 + 8 * v20);
        if (v19)
        {
LABEL_18:
          int64_t v12 = v20;
LABEL_19:
          unint64_t v15 = (v19 - 1) & v19;
          for (unint64_t i = __clz(__rbit64(v19)) + (v12 << 6); ; unint64_t i = v16 | (v12 << 6))
          {
            unint64_t v21 = *(void *)(*(void *)(v11 + 48) + 8 * i);
            if ((v21 & 0x8000000000000000) != 0) {
              break;
            }
            if (v21 >= *(void *)(v78 + 16)) {
              goto LABEL_62;
            }
            outlined init with copy of Text.Effect.RenderSegmentation.Segment(v78+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v21, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              uint64_t v60 = v15;
              uint64_t v61 = v12;
              uint64_t v22 = (void *)*((void *)v6 + 3);
              uint64_t v23 = *((void *)v6 + 4);
              char v24 = v6[40];
              uint64_t v25 = *((void *)v6 + 6);
              uint64_t v26 = *((void *)v6 + 7);
              int v27 = *((_DWORD *)v6 + 16);
              uint64_t v28 = *((void *)v6 + 9);
              uint64_t v29 = *((void *)v6 + 10);
              uint64_t v30 = *((void *)v6 + 11);
              uint64_t v31 = MEMORY[0x263F8EE88];
              uint64_t v75 = MEMORY[0x263F8EE88];
              uint64_t v64 = (uint64_t)v22;
              uint64_t v65 = v23;
              char v66 = v24;
              uint64_t v67 = v25;
              uint64_t v68 = v26;
              int v69 = v27;
              uint64_t v70 = v28;
              uint64_t v71 = v29;
              uint64_t v72 = v30;
              Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v75);
              uint64_t v32 = *(void *)(specialized _NativeSet.intersection(_:)(v63, v75, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:))+ 16);
              swift_release();
              if (v32)
              {
                uint64_t v75 = v31;
                uint64_t v55 = v30;
                uint64_t v56 = v22;
                uint64_t v64 = (uint64_t)v22;
                uint64_t v65 = v23;
                uint64_t v54 = v23;
                char v66 = v24;
                uint64_t v67 = v25;
                uint64_t v68 = v26;
                int v69 = v27;
                uint64_t v70 = v28;
                uint64_t v71 = v29;
                uint64_t v72 = v30;
                Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)&v75);
                uint64_t v33 = v75;
                CGFloat v34 = v62;
                uint64_t v35 = v57;
                char v36 = specialized Sequence.contains(where:)(v33, (uint64_t)v34);
                swift_bridgeObjectRelease();

                uint64_t v37 = v50;
                swift_beginAccess();
                uint64_t v38 = (void *)*v37;
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v37 = (uint64_t)v38;
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v38);
                  uint64_t v38 = (void *)result;
                  *int v50 = result;
                }
                uint64_t v39 = v56;
                if (v21 >= v38[2]) {
                  goto LABEL_65;
                }
                uint64_t v57 = v35;
                TextRenderLayer.SegmentLayer.updateEffect(dynamic:superlayer:segmentIndex:)(v36 & 1, v34, v21);
                swift_endAccess();
                outlined consume of Text.Layout.Line.Line(v39, v54, v24);
              }
              else
              {
                outlined consume of Text.Layout.Line.Line(v22, v23, v24);
              }
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v4 = v52;
              uint64_t v11 = v51;
              unint64_t v15 = v60;
              int64_t v12 = v61;
              if (!v60) {
                goto LABEL_9;
              }
            }
            else
            {
              uint64_t result = outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
              if (!v15) {
                goto LABEL_9;
              }
            }
LABEL_8:
            unint64_t v16 = __clz(__rbit64(v15));
            v15 &= v15 - 1;
          }
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        int64_t v20 = v12 + 3;
        if (v12 + 3 < v59)
        {
          unint64_t v19 = *(void *)(v58 + 8 * v20);
          if (v19) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v12 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_67;
            }
            if (v12 >= v59) {
              break;
            }
            unint64_t v19 = *(void *)(v58 + 8 * v12);
            ++v20;
            if (v19) {
              goto LABEL_19;
            }
          }
        }
      }
    }
LABEL_35:
    swift_release();
    outlined release of TextRenderLayer.Layout?(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    char v9 = v62;
    a1 = v63;
    uint64_t v8 = MEMORY[0x263F8EE88];
    goto LABEL_36;
  }
  char v9 = v1;
LABEL_36:
  uint64_t v40 = *(void *)(a1 + 56);
  uint64_t v58 = a1 + 56;
  uint64_t v64 = v8;
  uint64_t v41 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v43 = v42 & v40;
  uint64_t v60 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController;
  uint64_t v61 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  int64_t v59 = (unint64_t)(v41 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v44 = 0;
  while (1)
  {
    if (v43)
    {
      unint64_t v45 = __clz(__rbit64(v43));
      v43 &= v43 - 1;
      unint64_t v46 = v45 | (v44 << 6);
      goto LABEL_54;
    }
    BOOL v18 = __OFADD__(v44++, 1);
    if (v18) {
      goto LABEL_63;
    }
    if (v44 >= v59)
    {
LABEL_60:
      swift_release();
      v73[0] = *(void *)&v9[v61];
      TextRenderLayer.updateLayers(for:at:chunk:)(v64, v73, 0);
      return swift_bridgeObjectRelease();
    }
    unint64_t v47 = *(void *)(v58 + 8 * v44);
    if (!v47) {
      break;
    }
LABEL_53:
    unint64_t v43 = (v47 - 1) & v47;
    unint64_t v46 = __clz(__rbit64(v47)) + (v44 << 6);
LABEL_54:
    Swift::UInt64 v49 = *(void *)(*(void *)(a1 + 48) + 8 * v46);
    uint64_t v75 = *(void *)&v9[v61];
    TextEffectsAnimationController.state(for:time:)(v49, (double *)&v75, (uint64_t)v73);
    if (v74 == 2)
    {
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)&v75, v49);
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v49);
      swift_endAccess();
      specialized Set._Variant.insert(_:)((Swift::UInt64 *)v73, v49);
    }
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    char v9 = v62;
    a1 = v63;
  }
  int64_t v48 = v44 + 1;
  if (v44 + 1 >= v59) {
    goto LABEL_60;
  }
  unint64_t v47 = *(void *)(v58 + 8 * v48);
  if (v47) {
    goto LABEL_52;
  }
  int64_t v48 = v44 + 2;
  if (v44 + 2 >= v59) {
    goto LABEL_60;
  }
  unint64_t v47 = *(void *)(v58 + 8 * v48);
  if (v47) {
    goto LABEL_52;
  }
  int64_t v48 = v44 + 3;
  if (v44 + 3 >= v59) {
    goto LABEL_60;
  }
  unint64_t v47 = *(void *)(v58 + 8 * v48);
  if (v47)
  {
LABEL_52:
    int64_t v44 = v48;
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v44 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v44 >= v59) {
      goto LABEL_60;
    }
    unint64_t v47 = *(void *)(v58 + 8 * v44);
    ++v48;
    if (v47) {
      goto LABEL_53;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

void TextRenderLayer.updateLayers(for:at:chunk:)(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = v3;
  int v589 = a3;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  long long v588 = &v582[-v8];
  uint64_t v9 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v677 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v582[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = &v582[-v15];
  uint64_t v17 = *a2;
  _sypSgWObTm_1(v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v743, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v743, (uint64_t)v744, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v744) == 1) {
    return;
  }
  _sypSgWObTm_1((uint64_t)v743, (uint64_t)v742, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  outlined retain of TextRenderLayer.Layout((uint64_t)v742);
  uint64_t v18 = TextRenderLayer.segmentIndices(for:)(a1);
  uint64_t v676 = v18;
  uint64_t v19 = v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments;
  swift_beginAccess();
  int64_t v20 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v597 = v19;
  uint64_t v591 = v20;
  uint64_t v592 = v14 + 16;
  v20(v16, v19, v13);
  int v583 = RangeSet.isEmpty.getter();
  unint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  uint64_t v593 = v14 + 8;
  long long v590 = v21;
  v21(v16, v13);
  uint64_t v22 = *(void *)(v18 + 56);
  uint64_t v626 = v18 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(v18 + 32);
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  else {
    uint64_t v24 = -1;
  }
  unint64_t v25 = v24 & v22;
  CGRect v631 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
  uint64_t v611 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController;
  uint64_t v587 = v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics;
  uint64_t v584 = v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_geometryObserver;
  uint64_t v26 = v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements;
  uint64_t v595 = v4 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers;
  swift_beginAccess();
  uint64_t v585 = v26;
  swift_beginAccess();
  unint64_t v27 = v25;
  int v594 = 0;
  int64_t v28 = 0;
  uint64_t v727 = 0;
  int64_t v629 = (unint64_t)(v23 + 63) >> 6;
  CGRect v630 = v16;
  uint64_t v675 = v4;
  uint64_t v596 = v13;
  CGRect v617 = v11;
  uint64_t v29 = v16;
  uint64_t v678 = v9;
  uint64_t v586 = v17;
LABEL_7:
  while (2)
  {
    if (v27)
    {
      unint64_t v30 = __clz(__rbit64(v27));
      uint64_t v31 = (v27 - 1) & v27;
      unint64_t v32 = v30 | (v28 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v28++, 1)) {
      goto LABEL_303;
    }
    if (v28 < v629)
    {
      unint64_t v34 = *(void *)(v626 + 8 * v28);
      if (!v34)
      {
        int64_t v35 = v28 + 1;
        if (v28 + 1 >= v629) {
          break;
        }
        unint64_t v34 = *(void *)(v626 + 8 * v35);
        if (!v34)
        {
          int64_t v35 = v28 + 2;
          if (v28 + 2 >= v629) {
            break;
          }
          unint64_t v34 = *(void *)(v626 + 8 * v35);
          if (!v34)
          {
            int64_t v35 = v28 + 3;
            if (v28 + 3 >= v629) {
              break;
            }
            unint64_t v34 = *(void *)(v626 + 8 * v35);
            if (!v34)
            {
              while (1)
              {
                int64_t v28 = v35 + 1;
                if (__OFADD__(v35, 1)) {
                  goto LABEL_306;
                }
                if (v28 >= v629) {
                  goto LABEL_293;
                }
                unint64_t v34 = *(void *)(v626 + 8 * v28);
                ++v35;
                if (v34) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
        int64_t v28 = v35;
      }
LABEL_19:
      uint64_t v31 = (v34 - 1) & v34;
      unint64_t v32 = __clz(__rbit64(v34)) + (v28 << 6);
LABEL_20:
      unint64_t v36 = *(void *)(*(void *)(v676 + 48) + 8 * v32);
      if ((v36 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }
      if (v36 >= *(void *)(v745 + 16)) {
        goto LABEL_302;
      }
      unint64_t v711 = v31;
      int64_t v712 = v28;
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v745+ ((*(unsigned __int8 *)(v677 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v677 + 80))+ *(void *)(v677 + 72) * v36, (uint64_t)v11, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v11, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        goto LABEL_194;
      }
      uint64_t v680 = v36;
      uint64_t v37 = *((void *)v11 + 4);
      int v39 = v11[40];
      uint64_t v40 = *((void *)v11 + 6);
      uint64_t v41 = *((void *)v11 + 7);
      int v42 = *((_DWORD *)v11 + 16);
      uint64_t v43 = *((void *)v11 + 9);
      unint64_t v44 = *((void *)v11 + 10);
      uint64_t v45 = *((void *)v11 + 11);
      v731 = (void *)*((void *)v11 + 3);
      uint64_t v38 = v731;
      uint64_t v732 = v37;
      LOBYTE(v733) = v39;
      uint64_t v734 = v40;
      uint64_t v735 = v41;
      int v615 = v42;
      LODWORD(v736) = v42;
      uint64_t v737 = v43;
      unint64_t v738 = v44;
      uint64_t v739 = v45;
      v730[0] = v17;
      uint64_t v46 = *(void *)(v675 + v611);
      uint64_t v47 = *v631;
      uint64_t v48 = v631[1];
      CGRect v632 = (uint64_t *)(v46 + 112);
      swift_beginAccess();
      Swift::UInt64 v49 = *(uint64_t **)(v46 + 112);
      outlined copy of Text.Layout.Line.Line(v38, v37, v39);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      char v50 = Text.Effect.Composition.needsUpdate(at:context:)(v730, v47, v48, v49, v46);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      int v689 = v39;
      outlined consume of Text.Layout.Line.Line(v38, v37, v39);
      swift_bridgeObjectRelease();
      if ((v50 & 1) == 0)
      {
        TextRenderLayer.ensureUnsharedDrawing(for:)(v680);
        outlined consume of Text.Layout.Line.Line(v38, v37, v689);
        swift_bridgeObjectRelease();
        uint64_t v29 = v630;
        int64_t v28 = v712;
        unint64_t v27 = v711;
        uint64_t v11 = v617;
        continue;
      }
      uint64_t v51 = *(void *)(v45 + 16);
      uint64_t v667 = v45;
      uint64_t v666 = v37;
      CGRect v665 = v38;
      uint64_t v720 = v46;
      if (v51)
      {
        uint64_t v52 = *v631;
        uint64_t v717 = v631[1];
        uint64_t v53 = *v632;
        uint64_t v692 = *v632 + 24;
        uint64_t v669 = v45 + 32;
        swift_bridgeObjectRetain();
        outlined copy of Text.Layout.Line.Line(v38, v37, v689);
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v719 = v52;
        swift_bridgeObjectRetain();
        uint64_t v718 = v53;
        swift_retain();
        swift_beginAccess();
        uint64_t v54 = 0;
        uint64_t v606 = v51;
        unint64_t v716 = v53 + 40;
        while (1)
        {
          uint64_t v55 = (uint64_t *)(v669 + 88 * v54);
          uint64_t v56 = *v55;
          uint64_t v57 = v55[1];
          uint64_t v58 = v55[3];
          CGRect v709 = (void *)v55[2];
          uint64_t v59 = v55[4];
          uint64_t v60 = v55[5];
          uint64_t v61 = v55[6];
          unint64_t v62 = v55[7];
          uint64_t v63 = v55[8];
          uint64_t v64 = v55[9];
          uint64_t v65 = v55[10];
          if (v62 >> 62)
          {
            if (v62 >> 62 == 1)
            {
LABEL_190:
              outlined consume of Text.Effect.Composition.Operation(v56, v57, v709, v58, v59, v60, v61, v62);
              goto LABEL_191;
            }
            uint64_t v66 = *(void *)v716;
            uint64_t v67 = *(void *)(*(void *)v716 + 16);
            uint64_t v651 = v60;
            uint64_t v674 = v59;
            uint64_t v673 = v58;
            uint64_t v650 = v57;
            uint64_t v649 = v63;
            uint64_t v648 = v65;
            uint64_t v620 = v54;
            if (!v67)
            {
              uint64_t v70 = v64;
              goto LABEL_184;
            }
            uint64_t v68 = v61;
            unint64_t v69 = v62;
            uint64_t v70 = v64;
            Swift::UInt64 v71 = v56;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v71);
            Swift::Int v72 = Hasher._finalize()();
            uint64_t v73 = -1 << *(unsigned char *)(v66 + 32);
            unint64_t v74 = v72 & ~v73;
            uint64_t v75 = v66 + 56;
            if ((*(void *)(v66 + 56 + ((v74 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v74))
            {
              uint64_t v76 = *(void *)(v66 + 48);
              uint64_t v56 = v71;
              if (*(void *)(v76 + 8 * v74) == v71)
              {
                uint64_t v77 = v727;
                uint64_t v78 = v651;
                char v79 = v674;
                uint64_t v80 = v673;
LABEL_182:
                uint64_t v386 = v650;
                uint64_t v385 = v70;
LABEL_189:
                uint64_t v662 = v385;
                uint64_t v727 = v77;
                uint64_t v382 = v56;
                uint64_t v383 = v78;
                char v384 = v79;
                outlined consume of Text.Effect.Composition.Operation(v56, v386, v709, v80, v79, v78, v68, v69);
                LOBYTE(v59) = v384;
                uint64_t v56 = v382;
                uint64_t v60 = v383;
                uint64_t v51 = v606;
                uint64_t v54 = v620;
                uint64_t v58 = v80;
                uint64_t v57 = v386;
                uint64_t v61 = v68;
                unint64_t v62 = v69;
                goto LABEL_190;
              }
              uint64_t v367 = ~v73;
              unint64_t v368 = (v74 + 1) & v367;
              if ((*(void *)(v75 + ((v368 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v368))
              {
                unint64_t v62 = v69;
                uint64_t v61 = v68;
                if (*(void *)(v76 + 8 * v368) == v71)
                {
LABEL_181:
                  uint64_t v77 = v727;
                  uint64_t v78 = v651;
                  char v79 = v674;
                  uint64_t v80 = v673;
                  goto LABEL_182;
                }
                while (1)
                {
                  unint64_t v368 = (v368 + 1) & v367;
                  if (((*(void *)(v75 + ((v368 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v368) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v76 + 8 * v368) == v71) {
                    goto LABEL_181;
                  }
                }
LABEL_184:
                uint64_t v628 = v61;
                unint64_t v652 = v62;
                uint64_t v369 = v56;
                CGFloat v370 = (uint64_t *)v692;
                swift_beginAccess();
                uint64_t v371 = *v370;
                if (*(void *)(v371 + 16))
                {
                  uint64_t v372 = specialized __RawDictionaryStorage.find<A>(_:)(v369);
                  if (v373)
                  {
                    CGFloat v374 = *(void **)(*(void *)(v371 + 56) + 8 * v372);
                    swift_endAccess();
                    CGFloat v375 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v374) + 0x110);
                    CGFloat v376 = v374;
                    LODWORD(v726) = v375();

                    uint64_t v377 = v650;
                    uint64_t v378 = v673;
                    char v379 = v674;
                    uint64_t v380 = v651;
                    unint64_t v381 = v652;
                    outlined consume of Text.Effect.Composition.Operation(v369, v650, v709, v673, v674, v651, v628, v652);
                    outlined consume of Text.Effect.Composition.Operation(v369, v377, v709, v378, v379, v380, v628, v381);
                    uint64_t v51 = v606;
                    uint64_t v54 = v620;
                    if (v726) {
                      goto LABEL_202;
                    }
                    goto LABEL_191;
                  }
                }
                uint64_t v77 = v727;
                swift_endAccess();
                uint64_t v78 = v651;
                char v79 = v674;
                uint64_t v80 = v673;
                uint64_t v386 = v650;
                uint64_t v56 = v369;
                uint64_t v385 = v70;
                unint64_t v69 = v652;
                uint64_t v68 = v628;
                goto LABEL_189;
              }
            }
            else
            {
              uint64_t v56 = v71;
            }
            unint64_t v62 = v69;
            uint64_t v61 = v68;
            goto LABEL_184;
          }
          uint64_t v660 = *(void *)(v65 + 16);
          if (v660) {
            break;
          }
LABEL_191:
          if (++v54 == v51)
          {
            uint64_t v29 = v630;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Layout.Line.Line(v665, v666, v689);
            swift_bridgeObjectRelease();
            goto LABEL_215;
          }
        }
        uint64_t v620 = v54;
        uint64_t v668 = v65 + 32;
        uint64_t v81 = v56;
        uint64_t v82 = v60;
        uint64_t v674 = v59;
        uint64_t v83 = v63;
        unint64_t v652 = v62;
        uint64_t v84 = v57;
        uint64_t v85 = v58;
        uint64_t v673 = v58;
        uint64_t v86 = v61;
        uint64_t v628 = v61;
        uint64_t v662 = v64;
        outlined copy of Text.Effect.Composition.Operation(v56, v57, v709, v58, v59, v60, v61, v62);
        swift_bridgeObjectRetain();
        uint64_t v649 = v83;
        uint64_t v600 = v81;
        uint64_t v650 = v84;
        uint64_t v651 = v82;
        outlined copy of Text.Effect.Composition.Operation(v81, v84, v709, v85, v674, v82, v86, v652);
        uint64_t v648 = v65;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v87 = 0;
        while (2)
        {
          double v88 = (Swift::UInt64 *)(v668 + 88 * v87);
          Swift::UInt64 v714 = *v88;
          Swift::UInt64 v707 = v88[1];
          CGRect v704 = (void *)v88[2];
          Swift::UInt64 v693 = v88[3];
          Swift::UInt64 v697 = v88[4];
          uint64_t v694 = v88[5];
          uint64_t v705 = v88[6];
          unint64_t v89 = v88[7];
          Swift::UInt64 v703 = v88[8];
          Swift::UInt64 v90 = v88[9];
          Swift::UInt64 v710 = v88[10];
          CGRect v695 = (uint64_t *)v89;
          if (v89 >> 62)
          {
            uint64_t v679 = v87;
            if (v89 >> 62 == 1)
            {
              uint64_t v91 = v694;
              char v92 = v697;
              uint64_t v93 = v707;
              unint64_t v94 = (unint64_t)v695;
              uint64_t v95 = v693;
              goto LABEL_172;
            }
            uint64_t v347 = *(void *)v716;
            if (*(void *)(*(void *)v716 + 16)
              && (Hasher.init(_seed:)(),
                  Hasher._combine(_:)(v714),
                  Swift::Int v348 = Hasher._finalize()(),
                  uint64_t v349 = -1 << *(unsigned char *)(v347 + 32),
                  unint64_t v350 = v348 & ~v349,
                  ((*(void *)(v347 + 56 + ((v350 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v350) & 1) != 0))
            {
              uint64_t v351 = *(void *)(v347 + 48);
              if (*(void *)(v351 + 8 * v350) != v714)
              {
                uint64_t v352 = ~v349;
                do
                {
                  unint64_t v350 = (v350 + 1) & v352;
                  if (((*(void *)(v347 + 56 + ((v350 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v350) & 1) == 0) {
                    goto LABEL_165;
                  }
                }
                while (*(void *)(v351 + 8 * v350) != v714);
              }
LABEL_170:
              uint64_t v91 = v694;
              char v92 = v697;
              uint64_t v95 = v693;
LABEL_171:
              uint64_t v93 = v707;
              unint64_t v94 = (unint64_t)v695;
              outlined consume of Text.Effect.Composition.Operation(v714, v707, v704, v95, v92, v91, v705, (unint64_t)v695);
LABEL_172:
              outlined consume of Text.Effect.Composition.Operation(v714, v93, v704, v95, v92, v91, v705, v94);
              uint64_t v87 = v679;
            }
            else
            {
LABEL_165:
              double v353 = (uint64_t *)v692;
              swift_beginAccess();
              uint64_t v354 = *v353;
              if (!*(void *)(v354 + 16)
                || (uint64_t v355 = specialized __RawDictionaryStorage.find<A>(_:)(v714), (v356 & 1) == 0))
              {
                swift_endAccess();
                goto LABEL_170;
              }
              CGFloat v357 = *(void **)(*(void *)(v354 + 56) + 8 * v355);
              swift_endAccess();
              uint64_t v726 = (*MEMORY[0x263F8EED0] & *v357) + 272;
              uint64_t v358 = v707;
              uint64_t v359 = v714;
              uint64_t v360 = v693;
              CGFloat v361 = v704;
              Swift::UInt64 v627 = v90;
              CGFloat v362 = *(uint64_t (**)(void))v726;
              CGFloat v363 = v357;
              LODWORD(v726) = v362();

              uint64_t v364 = v694;
              uint64_t v365 = v705;
              unint64_t v366 = (unint64_t)v695;
              outlined consume of Text.Effect.Composition.Operation(v359, v358, v361, v360, v697, v694, v705, (unint64_t)v695);
              outlined consume of Text.Effect.Composition.Operation(v359, v358, v361, v360, v697, v364, v365, v366);
              uint64_t v87 = v679;
              if (v726) {
                goto LABEL_201;
              }
            }
LABEL_173:
            if (++v87 == v660)
            {
              unint64_t v69 = v652;
              uint64_t v80 = v673;
              uint64_t v77 = v727;
              swift_bridgeObjectRelease_n();
              uint64_t v78 = v651;
              uint64_t v56 = v600;
              uint64_t v68 = v628;
              uint64_t v385 = v662;
              uint64_t v386 = v650;
              char v79 = v674;
              goto LABEL_189;
            }
            continue;
          }
          break;
        }
        uint64_t v659 = *(void *)(v710 + 16);
        if (!v659) {
          goto LABEL_173;
        }
        uint64_t v679 = v87;
        Swift::UInt64 v664 = v710 + 32;
        uint64_t v96 = v714;
        Swift::UInt64 v97 = v90;
        uint64_t v98 = v705;
        double v99 = v704;
        Swift::UInt64 v627 = v97;
        unint64_t v100 = (unint64_t)v695;
        uint64_t v101 = v693;
        char v102 = v697;
        uint64_t v103 = v694;
        outlined copy of Text.Effect.Composition.Operation(v714, v707, v704, v693, v697, v694, v705, (unint64_t)v695);
        swift_bridgeObjectRetain();
        outlined copy of Text.Effect.Composition.Operation(v96, v707, v99, v101, v102, v103, v98, v100);
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v104 = 0;
        while (2)
        {
          CGFloat v105 = (Swift::UInt64 *)(v664 + 88 * v104);
          Swift::UInt64 v715 = *v105;
          CGFloat v106 = (void *)v105[2];
          CGRect v708 = (void *)v105[1];
          uint64_t v107 = v105[3];
          Swift::UInt64 v700 = v105[4];
          Swift::UInt64 v702 = v105[5];
          Swift::UInt64 v690 = v105[6];
          unint64_t v108 = v105[7];
          Swift::UInt64 v109 = v105[8];
          Swift::UInt64 v111 = v105[9];
          uint64_t v110 = v105[10];
          Swift::UInt64 v701 = v111;
          uint64_t v713 = v110;
          CGRect v691 = (uint64_t *)v108;
          if (v108 >> 62)
          {
            if (v108 >> 62 == 1)
            {
              uint64_t v112 = v690;
              char v113 = v700;
              unint64_t v114 = (unint64_t)v691;
              goto LABEL_155;
            }
            uint64_t v325 = *(void *)v716;
            uint64_t v326 = *(void *)(*(void *)v716 + 16);
            CGRect v645 = v106;
            uint64_t v646 = v107;
            uint64_t v619 = v104;
            if (v326
              && (Hasher.init(_seed:)(),
                  Hasher._combine(_:)(v715),
                  Swift::Int v327 = Hasher._finalize()(),
                  uint64_t v328 = -1 << *(unsigned char *)(v325 + 32),
                  unint64_t v329 = v327 & ~v328,
                  ((*(void *)(v325 + 56 + ((v329 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v329) & 1) != 0))
            {
              uint64_t v330 = *(void *)(v325 + 48);
              if (*(void *)(v330 + 8 * v329) != v715)
              {
                uint64_t v331 = ~v328;
                do
                {
                  unint64_t v329 = (v329 + 1) & v331;
                  if (((*(void *)(v325 + 56 + ((v329 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v329) & 1) == 0) {
                    goto LABEL_148;
                  }
                }
                while (*(void *)(v330 + 8 * v329) != v715);
              }
LABEL_153:
              CGFloat v106 = v645;
              uint64_t v346 = v646;
              uint64_t v112 = v690;
              unint64_t v114 = (unint64_t)v691;
LABEL_154:
              char v113 = v700;
              uint64_t v345 = v346;
              outlined consume of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v106, v346, v700, v702, v112, v114);
              uint64_t v107 = v345;
              uint64_t v104 = v619;
LABEL_155:
              outlined consume of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v106, v107, v113, v702, v112, v114);
            }
            else
            {
LABEL_148:
              CGFloat v332 = (uint64_t *)v692;
              swift_beginAccess();
              uint64_t v333 = *v332;
              if (!*(void *)(v333 + 16)
                || (uint64_t v334 = specialized __RawDictionaryStorage.find<A>(_:)(v715), (v335 & 1) == 0))
              {
                swift_endAccess();
                goto LABEL_153;
              }
              CGFloat v336 = *(void **)(*(void *)(v333 + 56) + 8 * v334);
              swift_endAccess();
              uint64_t v337 = v702;
              uint64_t v338 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v336) + 0x110);
              char v339 = v336;
              LODWORD(v726) = v338();

              uint64_t v340 = (uint64_t)v708;
              v342 = v645;
              uint64_t v341 = v646;
              uint64_t v343 = v690;
              unint64_t v344 = (unint64_t)v691;
              outlined consume of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v645, v646, v700, v337, v690, (unint64_t)v691);
              outlined consume of Text.Effect.Composition.Operation(v715, v340, v342, v341, v700, v337, v343, v344);
              uint64_t v104 = v619;
              if (v726) {
                goto LABEL_200;
              }
            }
LABEL_156:
            if (++v104 == v659)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v91 = v694;
              char v92 = v697;
              uint64_t v95 = v693;
              goto LABEL_171;
            }
            continue;
          }
          break;
        }
        uint64_t v653 = *(void *)(v713 + 16);
        if (!v653) {
          goto LABEL_156;
        }
        uint64_t v619 = v104;
        uint64_t v663 = v713 + 32;
        Swift::UInt64 v115 = v109;
        CFIndex v116 = v106;
        char v117 = v700;
        uint64_t v118 = v106;
        uint64_t v119 = v702;
        uint64_t v120 = v690;
        unint64_t v121 = (unint64_t)v691;
        uint64_t v122 = v107;
        outlined copy of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v116, v107, v700, v702, v690, (unint64_t)v691);
        swift_bridgeObjectRetain();
        Swift::UInt64 v599 = v115;
        CGRect v645 = v118;
        uint64_t v646 = v122;
        outlined copy of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v118, v122, v117, v119, v120, v121);
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v123 = 0;
        while (2)
        {
          CGFloat v124 = (uint64_t *)(v663 + 88 * v123);
          uint64_t v126 = *v124;
          uint64_t v125 = v124[1];
          CGFloat v127 = (void *)v124[2];
          uint64_t v128 = v124[3];
          uint64_t v129 = v124[5];
          CGRect v698 = (void *)v124[4];
          unint64_t v130 = v124[7];
          uint64_t v699 = v124[6];
          uint64_t v131 = v124[8];
          uint64_t v132 = v124[9];
          uint64_t v133 = v124[10];
          unint64_t v706 = v130;
          if (v130 >> 62)
          {
            if (v130 >> 62 != 1)
            {
              uint64_t v134 = *(void *)v716;
              uint64_t v135 = *(void *)(*(void *)v716 + 16);
              uint64_t v643 = v128;
              uint64_t v644 = v129;
              uint64_t v641 = v125;
              CGRect v642 = v127;
              uint64_t v639 = v132;
              uint64_t v640 = v131;
              uint64_t v618 = v123;
              if (!v135) {
                goto LABEL_131;
              }
              Hasher.init(_seed:)();
              Hasher._combine(_:)(v126);
              Swift::Int v136 = Hasher._finalize()();
              uint64_t v137 = -1 << *(unsigned char *)(v134 + 32);
              unint64_t v138 = v136 & ~v137;
              if (((*(void *)(v134 + 56 + ((v138 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v138) & 1) == 0) {
                goto LABEL_131;
              }
              uint64_t v139 = *(void *)(v134 + 48);
              if (*(void *)(v139 + 8 * v138) != v126)
              {
                uint64_t v140 = ~v137;
                while (1)
                {
                  unint64_t v138 = (v138 + 1) & v140;
                  if (((*(void *)(v134 + 56 + ((v138 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v138) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v139 + 8 * v138) == v126) {
                    goto LABEL_136;
                  }
                }
LABEL_131:
                uint64_t v304 = (uint64_t *)v692;
                swift_beginAccess();
                uint64_t v305 = *v304;
                if (*(void *)(v305 + 16))
                {
                  uint64_t v306 = specialized __RawDictionaryStorage.find<A>(_:)(v126);
                  if (v307)
                  {
                    uint64_t v308 = *(void **)(*(void *)(v305 + 56) + 8 * v306);
                    swift_endAccess();
                    uint64_t v309 = *MEMORY[0x263F8EED0] & *v308;
                    uint64_t v310 = v126;
                    uint64_t v622 = v126;
                    uint64_t v311 = v699;
                    double v312 = *(uint64_t (**)(void))(v309 + 272);
                    uint64_t v313 = v308;
                    LODWORD(v726) = v312();

                    uint64_t v314 = v310;
                    uint64_t v316 = v641;
                    CGFloat v315 = v642;
                    uint64_t v318 = v643;
                    uint64_t v317 = v644;
                    LOBYTE(v312) = (_BYTE)v698;
                    outlined consume of Text.Effect.Composition.Operation(v314, v641, v642, v643, (char)v698, v644, v311, v706);
                    uint64_t v123 = v618;
                    outlined consume of Text.Effect.Composition.Operation(v622, v316, v315, v318, (char)v312, v317, v311, v706);
                    if (v726) {
                      goto LABEL_199;
                    }
LABEL_139:
                    if (++v123 == v653)
                    {
                      swift_bridgeObjectRelease_n();
                      CGFloat v106 = v645;
                      uint64_t v346 = v646;
                      uint64_t v112 = v690;
                      unint64_t v114 = (unint64_t)v691;
                      goto LABEL_154;
                    }
                    continue;
                  }
                }
                swift_endAccess();
              }
LABEL_136:
              uint64_t v128 = v643;
              uint64_t v322 = v644;
              uint64_t v323 = v641;
              long long v324 = v642;
LABEL_137:
              uint64_t v319 = v322;
              CGFloat v320 = v324;
              uint64_t v321 = v323;
              outlined consume of Text.Effect.Composition.Operation(v126, v323, v324, v128, (char)v698, v322, v699, v706);
              uint64_t v125 = v321;
              CGFloat v127 = v320;
              uint64_t v129 = v319;
              uint64_t v123 = v618;
            }
            outlined consume of Text.Effect.Composition.Operation(v126, v125, v127, v128, (char)v698, v129, v699, v706);
            goto LABEL_139;
          }
          break;
        }
        uint64_t v608 = *(void *)(v133 + 16);
        if (!v608) {
          goto LABEL_139;
        }
        uint64_t v618 = v123;
        uint64_t v614 = v133 + 32;
        uint64_t v141 = v126;
        char v142 = (char)v698;
        uint64_t v143 = v699;
        unint64_t v144 = v706;
        uint64_t v145 = v129;
        double v146 = v127;
        uint64_t v622 = v126;
        uint64_t v147 = v125;
        uint64_t v148 = v131;
        uint64_t v672 = v133;
        uint64_t v149 = v132;
        outlined copy of Text.Effect.Composition.Operation(v141, v125, v127, v128, (char)v698, v129, v699, v706);
        swift_bridgeObjectRetain();
        uint64_t v639 = v149;
        uint64_t v640 = v148;
        uint64_t v641 = v147;
        CGRect v642 = v146;
        uint64_t v643 = v128;
        uint64_t v644 = v145;
        char v150 = v142;
        uint64_t v151 = v614;
        outlined copy of Text.Effect.Composition.Operation(v622, v147, v146, v128, v150, v145, v143, v144);
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v152 = 0;
        uint64_t v153 = v608;
        while (2)
        {
          uint64_t v154 = (uint64_t *)(v151 + 88 * v152);
          uint64_t v156 = *v154;
          uint64_t v155 = v154[1];
          long long v157 = (void *)v154[2];
          uint64_t v158 = v154[3];
          uint64_t v159 = v154[4];
          uint64_t v160 = v154[5];
          uint64_t v162 = v154[6];
          unint64_t v161 = v154[7];
          uint64_t v163 = v154[8];
          uint64_t v164 = v154[9];
          uint64_t v165 = v154[10];
          if (v161 >> 62)
          {
            if (v161 >> 62 == 1) {
              goto LABEL_123;
            }
            uint64_t v166 = v153;
            unint64_t v167 = v154[7];
            uint64_t v168 = v154[6];
            uint64_t v633 = v154[10];
            uint64_t v634 = v163;
            Swift::UInt64 v169 = v156;
            uint64_t v635 = v155;
            CGRect v636 = v157;
            uint64_t v637 = v158;
            uint64_t v638 = v159;
            uint64_t v654 = v160;
            uint64_t v170 = *(void *)v716;
            if (*(void *)(*(void *)v716 + 16)
              && (Hasher.init(_seed:)(),
                  Hasher._combine(_:)(v169),
                  Swift::Int v171 = Hasher._finalize()(),
                  uint64_t v172 = -1 << *(unsigned char *)(v170 + 32),
                  unint64_t v173 = v171 & ~v172,
                  uint64_t v174 = v170 + 56,
                  ((*(void *)(v170 + 56 + ((v173 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v173) & 1) != 0))
            {
              uint64_t v175 = *(void *)(v170 + 48);
              uint64_t v156 = v169;
              if (*(void *)(v175 + 8 * v173) == v169)
              {
                uint64_t v160 = v654;
                uint64_t v158 = v637;
                LOBYTE(v159) = v638;
                uint64_t v155 = v635;
                long long v157 = v636;
                uint64_t v162 = v168;
                unint64_t v161 = v167;
                uint64_t v153 = v166;
                uint64_t v151 = v614;
                goto LABEL_123;
              }
              uint64_t v302 = ~v172;
              unint64_t v303 = (v173 + 1) & v302;
              if ((*(void *)(v174 + ((v303 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v303))
              {
                uint64_t v162 = v168;
                unint64_t v161 = v167;
                uint64_t v153 = v166;
                uint64_t v151 = v614;
                while (*(void *)(v175 + 8 * v303) != v156)
                {
                  unint64_t v303 = (v303 + 1) & v302;
                  if (((*(void *)(v174 + ((v303 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v303) & 1) == 0) {
                    goto LABEL_117;
                  }
                }
                goto LABEL_122;
              }
            }
            else
            {
              uint64_t v156 = v169;
            }
            uint64_t v162 = v168;
            unint64_t v161 = v167;
            uint64_t v153 = v166;
            uint64_t v151 = v614;
LABEL_117:
            uint64_t v287 = (uint64_t *)v692;
            swift_beginAccess();
            uint64_t v288 = *v287;
            if (*(void *)(v288 + 16)
              && (uint64_t v289 = specialized __RawDictionaryStorage.find<A>(_:)(v156), (v290 & 1) != 0))
            {
              CGFloat v291 = *(void **)(*(void *)(v288 + 56) + 8 * v289);
              swift_endAccess();
              uint64_t v292 = *MEMORY[0x263F8EED0] & *v291;
              uint64_t v607 = v156;
              uint64_t v624 = v162;
              unint64_t v625 = v161;
              uint64_t v598 = v152;
              CGFloat v293 = *(uint64_t (**)(void))(v292 + 272);
              CGFloat v294 = v291;
              LODWORD(v726) = v293();

              uint64_t v295 = v156;
              uint64_t v296 = v635;
              v297 = v636;
              uint64_t v298 = v637;
              LOBYTE(v293) = v638;
              uint64_t v299 = v624;
              outlined consume of Text.Effect.Composition.Operation(v295, v635, v636, v637, v638, v654, v624, v161);
              uint64_t v151 = v614;
              uint64_t v300 = v296;
              char v301 = (char)v293;
              uint64_t v152 = v598;
              uint64_t v153 = v608;
              outlined consume of Text.Effect.Composition.Operation(v607, v300, v297, v298, v301, v654, v299, v625);
              if (v726) {
                goto LABEL_198;
              }
            }
            else
            {
              swift_endAccess();
LABEL_122:
              uint64_t v160 = v654;
              uint64_t v158 = v637;
              LOBYTE(v159) = v638;
              uint64_t v155 = v635;
              long long v157 = v636;
LABEL_123:
              outlined consume of Text.Effect.Composition.Operation(v156, v155, v157, v158, v159, v160, v162, v161);
            }
LABEL_124:
            if (++v152 == v153)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v128 = v643;
              uint64_t v322 = v644;
              uint64_t v323 = v641;
              long long v324 = v642;
              uint64_t v126 = v622;
              goto LABEL_137;
            }
            continue;
          }
          break;
        }
        uint64_t v176 = *(void *)(v165 + 16);
        if (!v176) {
          goto LABEL_124;
        }
        uint64_t v598 = v152;
        uint64_t v670 = v165 + 32;
        uint64_t v177 = v162;
        unint64_t v178 = v161;
        uint64_t v179 = v160;
        uint64_t v180 = v159;
        uint64_t v647 = v176;
        uint64_t v181 = v158;
        uint64_t v624 = v162;
        unint64_t v625 = v161;
        uint64_t v182 = v157;
        uint64_t v183 = v155;
        uint64_t v184 = v163;
        uint64_t v185 = v164;
        outlined copy of Text.Effect.Composition.Operation(v156, v155, v157, v158, v159, v160, v177, v178);
        swift_bridgeObjectRetain();
        uint64_t v601 = v185;
        uint64_t v634 = v184;
        uint64_t v607 = v156;
        uint64_t v635 = v183;
        CGRect v636 = v182;
        uint64_t v637 = v181;
        uint64_t v638 = v180;
        uint64_t v654 = v179;
        outlined copy of Text.Effect.Composition.Operation(v156, v183, v182, v181, v180, v179, v624, v625);
        uint64_t v633 = v165;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        uint64_t v186 = 0;
        while (2)
        {
          CGFloat v187 = (uint64_t *)(v670 + 88 * v186);
          uint64_t v188 = *v187;
          uint64_t v189 = v187[1];
          long long v190 = (void *)v187[2];
          uint64_t v191 = v187[3];
          uint64_t v192 = v187[4];
          uint64_t v193 = v187[5];
          uint64_t v194 = v187[6];
          unint64_t v195 = v187[7];
          uint64_t v196 = v187[8];
          uint64_t v197 = v187[9];
          uint64_t v198 = v187[10];
          if (v195 >> 62)
          {
            if (v195 >> 62 == 1) {
              goto LABEL_112;
            }
            uint64_t v655 = v187[10];
            uint64_t v656 = v197;
            uint64_t v657 = v196;
            uint64_t v658 = v189;
            uint64_t v199 = *(void *)v716;
            if (*(void *)(*(void *)v716 + 16))
            {
              unint64_t v616 = v195;
              uint64_t v200 = v191;
              uint64_t v201 = v190;
              Swift::UInt64 v202 = v188;
              Hasher.init(_seed:)();
              Hasher._combine(_:)(v202);
              Swift::Int v203 = Hasher._finalize()();
              uint64_t v204 = -1 << *(unsigned char *)(v199 + 32);
              unint64_t v205 = v203 & ~v204;
              uint64_t v206 = v199 + 56;
              if ((*(void *)(v199 + 56 + ((v205 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v205))
              {
                uint64_t v207 = *(void *)(v199 + 48);
                uint64_t v188 = v202;
                if (*(void *)(v207 + 8 * v205) == v202)
                {
                  uint64_t v189 = v658;
                  long long v190 = v201;
                  uint64_t v191 = v200;
                  unint64_t v195 = v616;
                  goto LABEL_112;
                }
                uint64_t v269 = ~v204;
                unint64_t v270 = (v205 + 1) & v269;
                long long v190 = v201;
                if ((*(void *)(v206 + ((v270 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v270))
                {
                  uint64_t v191 = v200;
                  unint64_t v195 = v616;
                  while (*(void *)(v207 + 8 * v270) != v202)
                  {
                    unint64_t v270 = (v270 + 1) & v269;
                    if (((*(void *)(v206 + ((v270 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v270) & 1) == 0) {
                      goto LABEL_105;
                    }
                  }
                  uint64_t v189 = v658;
LABEL_112:
                  outlined consume of Text.Effect.Composition.Operation(v188, v189, v190, v191, v192, v193, v194, v195);
LABEL_113:
                  if (++v186 == v647)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v281 = v635;
                    Swift::Int v282 = v636;
                    uint64_t v283 = v624;
                    unint64_t v161 = v625;
                    uint64_t v284 = v637;
                    char v285 = v638;
                    uint64_t v286 = v654;
                    outlined consume of Text.Effect.Composition.Operation(v607, v635, v636, v637, v638, v654, v624, v625);
                    uint64_t v155 = v281;
                    long long v157 = v282;
                    uint64_t v162 = v283;
                    uint64_t v158 = v284;
                    LOBYTE(v159) = v285;
                    uint64_t v156 = v607;
                    uint64_t v153 = v608;
                    uint64_t v160 = v286;
                    uint64_t v151 = v614;
                    uint64_t v152 = v598;
                    goto LABEL_123;
                  }
                  continue;
                }
              }
              else
              {
                uint64_t v188 = v202;
                long long v190 = v201;
              }
              uint64_t v191 = v200;
              unint64_t v195 = v616;
            }
LABEL_105:
            CGFloat v271 = v190;
            uint64_t v272 = v188;
            CGFloat v273 = (uint64_t *)v692;
            swift_beginAccess();
            uint64_t v274 = *v273;
            if (!*(void *)(v274 + 16)
              || (uint64_t v275 = specialized __RawDictionaryStorage.find<A>(_:)(v272), (v276 & 1) == 0))
            {
              swift_endAccess();
              uint64_t v189 = v658;
              uint64_t v188 = v272;
              long long v190 = v271;
              goto LABEL_112;
            }
            CGFloat v277 = *(void **)(*(void *)(v274 + 56) + 8 * v275);
            swift_endAccess();
            uint64_t v278 = *MEMORY[0x263F8EED0] & *v277;
            CGRect v623 = v271;
            uint64_t v613 = v194;
            uint64_t v604 = v186;
            CGFloat v279 = *(uint64_t (**)(void))(v278 + 272);
            CGFloat v280 = v277;
            LOBYTE(v279) = v279();

            uint64_t v186 = v604;
            outlined consume of Text.Effect.Composition.Operation(v272, v658, v623, v191, v192, v193, v613, v195);
            if (v279) {
              goto LABEL_197;
            }
            goto LABEL_113;
          }
          break;
        }
        uint64_t v208 = *(void *)(v198 + 16);
        if (!v208) {
          goto LABEL_113;
        }
        uint64_t v687 = v198 + 32;
        CGRect v623 = v190;
        uint64_t v209 = v188;
        uint64_t v210 = v196;
        uint64_t v661 = v192;
        uint64_t v613 = v194;
        uint64_t v211 = v197;
        uint64_t v671 = v208;
        unint64_t v212 = v195;
        uint64_t v213 = v198;
        swift_bridgeObjectRetain_n();
        uint64_t v655 = v213;
        uint64_t v656 = v211;
        uint64_t v192 = v661;
        uint64_t v657 = v210;
        uint64_t v658 = v189;
        uint64_t v605 = v191;
        uint64_t v214 = v193;
        uint64_t v215 = v671;
        uint64_t v602 = v209;
        uint64_t v603 = v214;
        outlined copy of Text.Effect.Composition.Operation(v209, v189, v623, v191, v661, v214, v613, v212);
        swift_beginAccess();
        unint64_t v616 = v212;
        uint64_t v216 = 0;
        uint64_t v604 = v186;
LABEL_74:
        uint64_t v222 = (uint64_t *)(v687 + 88 * v216);
        uint64_t v219 = *v222;
        uint64_t v218 = v222[1];
        CGFloat v217 = (void *)v222[2];
        uint64_t v220 = v222[3];
        uint64_t v223 = v222[4];
        uint64_t v224 = v222[5];
        uint64_t v221 = v222[6];
        unint64_t v225 = v222[7];
        uint64_t v226 = (void *)v222[8];
        uint64_t v227 = v222[9];
        uint64_t v228 = v222[10];
        if (!(v225 >> 62))
        {
          if (*(void *)(v228 + 16))
          {
            uint64_t v721 = *(void *)(v228 + 16);
            uint64_t v612 = v216;
            uint64_t v240 = v219;
            uint64_t v241 = v218;
            double v242 = v226;
            uint64_t v243 = v228;
            uint64_t v244 = v227;
            uint64_t v696 = v220;
            uint64_t v685 = v221;
            swift_bridgeObjectRetain();
            uint64_t v681 = v244;
            CGRect v682 = v242;
            uint64_t v609 = v240;
            unint64_t v610 = v225;
            uint64_t v683 = v241;
            CGRect v686 = v217;
            uint64_t v688 = v223;
            uint64_t v621 = v224;
            outlined copy of Text.Effect.Composition.Operation(v240, v241, v217, v696, v223, v224, v685, v225);
            uint64_t v684 = v243;
            uint64_t v245 = (uint64_t *)(v243 + 56);
            while (1)
            {
              uint64_t v246 = v245[6];
              uint64_t v723 = v245[7];
              unint64_t v247 = v245[4];
              uint64_t v722 = v245[5];
              unint64_t v725 = v247;
              uint64_t v248 = v245[2];
              uint64_t v724 = v245[3];
              uint64_t v249 = *v245;
              uint64_t v250 = v245[1];
              uint64_t v252 = *(v245 - 2);
              double v251 = (void *)*(v245 - 1);
              uint64_t v253 = *(v245 - 3);
              v731 = (void *)v253;
              uint64_t v732 = v252;
              v733 = v251;
              uint64_t v734 = v249;
              uint64_t v735 = v250;
              uint64_t v736 = v248;
              uint64_t v737 = v724;
              unint64_t v738 = v247;
              uint64_t v739 = v722;
              uint64_t v740 = v246;
              uint64_t v741 = v723;
              outlined copy of Text.Effect.Composition.Operation(v253, v252, v251, v249, v250, v248, v724, v247);
              uint64_t v254 = v727;
              LODWORD(v726) = closure #1 in Text.Effect.Composition.useSharedDrawing(context:)((Swift::UInt64 *)&v731, v719, v717, v718, v720);
              uint64_t v727 = v254;
              outlined consume of Text.Effect.Composition.Operation(v253, v252, v251, v249, v250, v248, v724, v725);
              if (v726) {
                break;
              }
              v245 += 11;
              if (!--v721)
              {
                swift_bridgeObjectRelease();
                uint64_t v192 = v661;
                uint64_t v186 = v604;
                uint64_t v215 = v671;
                uint64_t v216 = v612;
                uint64_t v219 = v609;
                unint64_t v225 = v610;
                uint64_t v221 = v685;
                uint64_t v224 = v621;
                LOBYTE(v223) = v688;
                uint64_t v220 = v696;
                CGFloat v217 = v686;
                goto LABEL_85;
              }
            }
            swift_bridgeObjectRelease();
            outlined consume of Text.Effect.Composition.Operation(v609, v683, v686, v696, v688, v621, v685, v610);
            swift_bridgeObjectRelease_n();
            uint64_t v387 = v602;
            uint64_t v388 = v658;
            CGFloat v389 = v623;
            uint64_t v390 = v605;
LABEL_196:
            outlined consume of Text.Effect.Composition.Operation(v387, v388, v389, v390, v661, v603, v613, v616);
LABEL_197:
            swift_bridgeObjectRelease_n();
            uint64_t v391 = v607;
            uint64_t v392 = v635;
            double v393 = v636;
            uint64_t v394 = v637;
            char v395 = v638;
            uint64_t v396 = v654;
            outlined consume of Text.Effect.Composition.Operation(v607, v635, v636, v637, v638, v654, v624, v625);
            outlined consume of Text.Effect.Composition.Operation(v391, v392, v393, v394, v395, v396, v624, v625);
LABEL_198:
            swift_bridgeObjectRelease_n();
            unint64_t v397 = v706;
            uint64_t v398 = v699;
            char v399 = (char)v698;
            uint64_t v401 = v641;
            uint64_t v400 = v642;
            uint64_t v403 = v643;
            uint64_t v402 = v644;
            outlined consume of Text.Effect.Composition.Operation(v622, v641, v642, v643, (char)v698, v644, v699, v706);
            outlined consume of Text.Effect.Composition.Operation(v622, v401, v400, v403, v399, v402, v398, v397);
LABEL_199:
            swift_bridgeObjectRelease_n();
            uint64_t v404 = (uint64_t)v708;
            uint64_t v405 = v715;
            CGFloat v407 = v645;
            uint64_t v406 = v646;
            uint64_t v408 = v702;
            uint64_t v409 = v690;
            unint64_t v410 = (unint64_t)v691;
            outlined consume of Text.Effect.Composition.Operation(v715, (uint64_t)v708, v645, v646, v700, v702, v690, (unint64_t)v691);
            outlined consume of Text.Effect.Composition.Operation(v405, v404, v407, v406, v700, v408, v409, v410);
LABEL_200:
            swift_bridgeObjectRelease_n();
            uint64_t v411 = v714;
            CGFloat v412 = v704;
            unint64_t v413 = (unint64_t)v695;
            uint64_t v414 = v693;
            char v415 = v697;
            uint64_t v416 = v694;
            uint64_t v417 = v705;
            outlined consume of Text.Effect.Composition.Operation(v714, v707, v704, v693, v697, v694, v705, (unint64_t)v695);
            outlined consume of Text.Effect.Composition.Operation(v411, v707, v412, v414, v415, v416, v417, v413);
LABEL_201:
            unint64_t v418 = v652;
            uint64_t v419 = v628;
            swift_bridgeObjectRelease_n();
            double v420 = v709;
            uint64_t v421 = v600;
            uint64_t v422 = v650;
            char v423 = v674;
            uint64_t v424 = v651;
            outlined consume of Text.Effect.Composition.Operation(v600, v650, v709, v673, v674, v651, v419, v418);
            outlined consume of Text.Effect.Composition.Operation(v421, v422, v420, v673, v423, v424, v419, v418);
LABEL_202:
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            double v425 = v630;
            double v426 = v665;
            uint64_t v427 = v666;
            char v428 = v689;
            outlined consume of Text.Layout.Line.Line(v665, v666, v689);
            swift_bridgeObjectRelease();
            uint64_t v429 = v596;
            v591(v425, v597, v596);
            uint64_t v430 = v680;
            v731 = (void *)v680;
            char v431 = RangeSet.contains(_:)();
            v590(v425, v429);
            if (v431)
            {
LABEL_283:
              outlined consume of Text.Layout.Line.Line(v426, v427, v428);
              swift_bridgeObjectRelease();
              int v594 = 1;
              int64_t v28 = v712;
              unint64_t v27 = v711;
              uint64_t v29 = v630;
              uint64_t v11 = v617;
              continue;
            }
            swift_beginAccess();
            uint64_t v432 = v430 + 1;
            if (!__OFADD__(v430, 1))
            {
              if (v432 >= v430)
              {
                uint64_t v728 = v430;
                uint64_t v729 = v430 + 1;
                if (v430 != v432)
                {
                  double v433 = (void (*)(void **, void))RangeSet._ranges.modify();
                  type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
                  RangeSet.Ranges._insert(contentsOf:)();
                  v433(&v731, 0);
                }
                swift_endAccess();
                if (v680 < *(void *)(*(void *)v595 + 16))
                {
                  unint64_t v434 = *(void *)(*(void *)v595 + 8 * v680 + 32);
                  switch(v434 >> 62)
                  {
                    case 1uLL:
                    case 2uLL:
                    case 3uLL:
                      double v435 = (void *)(v434 & 0x3FFFFFFFFFFFFFFFLL);
                      v434 &= 0x3FFFFFFFFFFFFFFFuLL;
                      break;
                    default:
                      double v435 = (void *)(v434 & 0x3FFFFFFFFFFFFFFFLL);
                      break;
                  }
                  id v572 = v435;
                  objc_msgSend((id)v434, sel_setFrame_, 0.0, 0.0, 0.0, 0.0);
                  objc_msgSend((id)v434, sel_setHidden_, 1);

                  uint64_t v427 = v666;
                  double v426 = v665;
                  goto LABEL_283;
                }
LABEL_309:
                __break(1u);
                JUMPOUT(0x245B4BCE0);
              }
LABEL_308:
              __break(1u);
              goto LABEL_309;
            }
LABEL_307:
            __break(1u);
            goto LABEL_308;
          }
          goto LABEL_73;
        }
        if (v225 >> 62 == 1) {
          goto LABEL_72;
        }
        uint64_t v684 = v222[10];
        uint64_t v696 = v220;
        uint64_t v688 = v223;
        uint64_t v229 = v224;
        uint64_t v230 = v221;
        unint64_t v231 = v225;
        uint64_t v232 = *(void *)v716;
        uint64_t v233 = *(void *)(*(void *)v716 + 16);
        CGRect v686 = v217;
        uint64_t v683 = v218;
        CGRect v682 = v226;
        uint64_t v681 = v227;
        if (!v233) {
          goto LABEL_92;
        }
        uint64_t v223 = v192;
        Swift::UInt64 v234 = v219;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v234);
        Swift::Int v235 = Hasher._finalize()();
        uint64_t v236 = -1 << *(unsigned char *)(v232 + 32);
        unint64_t v237 = v235 & ~v236;
        uint64_t v238 = v232 + 56;
        if ((*(void *)(v232 + 56 + ((v237 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v237))
        {
          uint64_t v239 = *(void *)(v232 + 48);
          CGFloat v217 = v686;
          uint64_t v219 = v234;
          if (*(void *)(v239 + 8 * v237) == v234)
          {
            unint64_t v225 = v231;
            uint64_t v221 = v230;
            uint64_t v224 = v229;
            uint64_t v192 = v223;
            LOBYTE(v223) = v688;
            uint64_t v220 = v696;
            uint64_t v218 = v683;
            uint64_t v215 = v671;
            goto LABEL_72;
          }
          uint64_t v255 = ~v236;
          unint64_t v256 = (v237 + 1) & v255;
          if ((*(void *)(v238 + ((v256 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v256))
          {
            unint64_t v225 = v231;
            uint64_t v221 = v230;
            uint64_t v224 = v229;
            uint64_t v192 = v223;
            LOBYTE(v223) = v688;
            uint64_t v220 = v696;
            uint64_t v215 = v671;
            while (*(void *)(v239 + 8 * v256) != v219)
            {
              unint64_t v256 = (v256 + 1) & v255;
              if (((*(void *)(v238 + ((v256 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v256) & 1) == 0) {
                goto LABEL_94;
              }
            }
LABEL_85:
            uint64_t v218 = v683;
LABEL_72:
            outlined consume of Text.Effect.Composition.Operation(v219, v218, v217, v220, v223, v224, v221, v225);
LABEL_73:
            if (++v216 == v215)
            {
              uint64_t v194 = v613;
              uint64_t v193 = v603;
              swift_bridgeObjectRelease_n();
              uint64_t v189 = v658;
              uint64_t v188 = v602;
              uint64_t v191 = v605;
              unint64_t v195 = v616;
              long long v190 = v623;
              goto LABEL_112;
            }
            goto LABEL_74;
          }
LABEL_92:
          unint64_t v225 = v231;
          uint64_t v221 = v230;
          uint64_t v224 = v229;
          LOBYTE(v223) = v688;
        }
        else
        {
          unint64_t v225 = v231;
          uint64_t v221 = v230;
          uint64_t v224 = v229;
          LOBYTE(v223) = v688;
          uint64_t v219 = v234;
        }
        uint64_t v215 = v671;
LABEL_94:
        uint64_t v685 = v221;
        uint64_t v257 = v219;
        CGFloat v258 = (uint64_t *)v692;
        swift_beginAccess();
        uint64_t v259 = *v258;
        if (!*(void *)(v259 + 16) || (uint64_t v260 = specialized __RawDictionaryStorage.find<A>(_:)(v257), (v261 & 1) == 0))
        {
          swift_endAccess();
          CGFloat v217 = v686;
          uint64_t v218 = v683;
          uint64_t v219 = v257;
          uint64_t v192 = v661;
          uint64_t v220 = v696;
          uint64_t v221 = v685;
          goto LABEL_72;
        }
        uint64_t v612 = v216;
        uint64_t v621 = v224;
        uint64_t v262 = v623;
        uint64_t v263 = v605;
        long long v264 = *(void **)(*(void *)(v259 + 56) + 8 * v260);
        swift_endAccess();
        unint64_t v265 = v225;
        long long v266 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v264) + 0x110);
        long long v267 = v264;
        char v268 = v266();

        outlined consume of Text.Effect.Composition.Operation(v257, v683, v686, v696, v688, v621, v685, v265);
        if (v268)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v387 = v602;
          uint64_t v388 = v658;
          CGFloat v389 = v262;
          uint64_t v390 = v263;
          goto LABEL_196;
        }
        uint64_t v192 = v661;
        uint64_t v215 = v671;
        uint64_t v216 = v612;
        goto LABEL_73;
      }
      uint64_t v29 = v630;
LABEL_215:
      swift_beginAccess();
      double v436 = v588;
      uint64_t v437 = v680;
      specialized Dictionary.removeValue(forKey:)(v680, (uint64_t)v588);
      swift_endAccess();
      _sypSgWOhTm_1((uint64_t)v436, (uint64_t)&lazy cache variable for type metadata for Text.Effect.InteractionMetrics?, (uint64_t)type metadata accessor for Text.Effect.InteractionMetrics, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
      double v438 = v665;
      v731 = v665;
      uint64_t v439 = v666;
      uint64_t v732 = v666;
      char v440 = v689;
      LOBYTE(v733) = v689;
      uint64_t v734 = v40;
      uint64_t v735 = v41;
      LODWORD(v736) = v615;
      uint64_t v737 = v43;
      unint64_t v738 = v44;
      uint64_t v739 = v667;
      outlined copy of Text.Layout.Line.Line(v665, v666, v689);
      swift_bridgeObjectRetain();
      double v441 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)((uint64_t *)&v731, v437, 0);
      CGFloat v443 = v442;
      CGFloat v445 = v444;
      CGFloat v447 = v446;
      outlined consume of Text.Layout.Line.Line(v438, v439, v440);
      swift_bridgeObjectRelease();
      double v448 = 16.0;
      if ((v589 & 1) == 0)
      {
        TextRenderLayer.pixelLength.getter();
        double v448 = v449;
      }
      v746.origin.CGFloat x = v441;
      v746.origin.CGFloat y = v443;
      v746.size.CGFloat width = v445;
      v746.size.CGFloat height = v447;
      double MinX = CGRectGetMinX(v746);
      v747.origin.CGFloat x = v441;
      v747.origin.CGFloat y = v443;
      v747.size.CGFloat width = v445;
      v747.size.CGFloat height = v447;
      double MaxX = CGRectGetMaxX(v747);
      v748.origin.CGFloat x = v441;
      v748.origin.CGFloat y = v443;
      v748.size.CGFloat width = v445;
      v748.size.CGFloat height = v447;
      double MinY = CGRectGetMinY(v748);
      v749.origin.CGFloat x = v441;
      v749.origin.CGFloat y = v443;
      v749.size.CGFloat width = v445;
      v749.size.CGFloat height = v447;
      double MaxY = CGRectGetMaxY(v749);
      if (v437 >= *(void *)(*(void *)v595 + 16)) {
        goto LABEL_304;
      }
      double v454 = v448 * floor(MinX / v448);
      double v455 = v448 * floor(MinY / v448);
      double v456 = v448 * ceil(MaxY / v448);
      double v457 = v448 * ceil(MaxX / v448) - v454;
      double v458 = v456 - v455;
      Swift::UInt64 v701 = *(void *)(*(void *)v595 + 8 * v437 + 32);
      CGFloat v459 = (void *)v701;
      uint64_t v17 = v586;
      switch(v701 >> 62)
      {
        case 1uLL:
        case 2uLL:
        case 3uLL:
          CGFloat v459 = (void *)(v701 & 0x3FFFFFFFFFFFFFFFLL);
          break;
        default:
          break;
      }
      uint64_t v460 = *(void *)(v667 + 16);
      if (!v460)
      {
        long long v568 = v665;
        uint64_t v569 = v666;
        char v570 = v689;
        outlined copy of Text.Layout.Line.Line(v665, v666, v689);
        id v571 = (id)(v701 & 0x3FFFFFFFFFFFFFFFLL);
        swift_bridgeObjectRetain();
        outlined consume of Text.Layout.Line.Line(v568, v569, v570);
        swift_bridgeObjectRelease();
        uint64_t v11 = v617;
        goto LABEL_285;
      }
      CGRect v682 = v459;
      uint64_t v461 = *v631;
      uint64_t v717 = v631[1];
      uint64_t v462 = *v632;
      uint64_t v463 = v667 + 32;
      uint64_t v464 = *v632 + 40;
      CGRect v691 = (uint64_t *)(*v632 + 24);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v665, v666, v689);
      id v465 = (id)(v701 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v719 = v461;
      swift_bridgeObjectRetain();
      uint64_t v718 = v462;
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_retain();
      CGRect v695 = (uint64_t *)v464;
      swift_beginAccess();
      uint64_t v466 = 0;
      uint64_t v11 = v617;
      uint64_t v692 = v460;
      uint64_t v687 = v463;
      while (1)
      {
        uint64_t v467 = v463 + 88 * v466;
        double v469 = *(void **)v467;
        uint64_t v468 = *(void *)(v467 + 8);
        double v470 = *(void **)(v467 + 16);
        uint64_t v471 = *(void *)(v467 + 24);
        Swift::UInt64 v472 = *(void *)(v467 + 32);
        uint64_t v473 = *(void *)(v467 + 40);
        uint64_t v474 = *(void *)(v467 + 48);
        uint64_t v475 = *(void *)(v467 + 64);
        uint64_t v476 = *(void *)(v467 + 72);
        uint64_t v477 = *(void *)(v467 + 80);
        unint64_t v716 = *(void *)(v467 + 56);
        if (v716 >> 62)
        {
          if (v716 >> 62 == 1)
          {
LABEL_272:
            outlined consume of Text.Effect.Composition.Operation((uint64_t)v469, v468, v470, v471, v472, v473, v474, v716);
            goto LABEL_273;
          }
          Swift::UInt64 v702 = v474;
          Swift::UInt64 v703 = v473;
          uint64_t v696 = v475;
          Swift::UInt64 v478 = (Swift::UInt64)v469;
          Swift::UInt64 v697 = v468;
          CGRect v698 = v470;
          uint64_t v699 = v471;
          Swift::UInt64 v700 = v472;
          uint64_t v479 = *v695;
          if (*(void *)(*v695 + 16))
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v478);
            Swift::Int v480 = Hasher._finalize()();
            uint64_t v481 = -1 << *(unsigned char *)(v479 + 32);
            unint64_t v482 = v480 & ~v481;
            uint64_t v483 = v479 + 56;
            if ((*(void *)(v479 + 56 + ((v482 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v482))
            {
              uint64_t v484 = *(void *)(v479 + 48);
              double v469 = (void *)v478;
              if (*(void *)(v484 + 8 * v482) == v478)
              {
                LOBYTE(v472) = v700;
                uint64_t v471 = v699;
                double v470 = v698;
                uint64_t v468 = v697;
                uint64_t v463 = v687;
                uint64_t v473 = v703;
LABEL_271:
                uint64_t v474 = v702;
                goto LABEL_272;
              }
              uint64_t v549 = ~v481;
              unint64_t v550 = (v482 + 1) & v549;
              if ((*(void *)(v483 + ((v550 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v550))
              {
                uint64_t v473 = v703;
                while (*(void **)(v484 + 8 * v550) != v469)
                {
                  unint64_t v550 = (v550 + 1) & v549;
                  if (((*(void *)(v483 + ((v550 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v550) & 1) == 0) {
                    goto LABEL_265;
                  }
                }
LABEL_270:
                LOBYTE(v472) = v700;
                uint64_t v471 = v699;
                double v470 = v698;
                uint64_t v468 = v697;
                uint64_t v463 = v687;
                goto LABEL_271;
              }
            }
            else
            {
              double v469 = (void *)v478;
            }
          }
          else
          {
            double v469 = (void *)v478;
          }
          uint64_t v473 = v703;
LABEL_265:
          long long v551 = v691;
          swift_beginAccess();
          uint64_t v552 = *v551;
          if (*(void *)(v552 + 16))
          {
            uint64_t v553 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v469);
            if (v554)
            {
              CGAffineTransform v555 = *(void **)(*(void *)(v552 + 56) + 8 * v553);
              swift_endAccess();
              uint64_t v556 = v460;
              uint64_t v557 = (uint64_t)v469;
              long long v558 = (uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v555) + 272);
              uint64_t v683 = v466;
              CGAffineTransform v559 = *v558;
              CGAffineTransform v560 = v555;
              LOBYTE(v558) = v559();

              uint64_t v561 = v557;
              uint64_t v460 = v556;
              uint64_t v466 = v683;
              outlined consume of Text.Effect.Composition.Operation(v561, v697, v698, v699, v700, v473, v702, v716);
              uint64_t v463 = v687;
              if (v558) {
                goto LABEL_277;
              }
              goto LABEL_273;
            }
          }
          swift_endAccess();
          goto LABEL_270;
        }
        uint64_t v694 = *(void *)(v477 + 16);
        if (v694) {
          break;
        }
LABEL_273:
        if (++v466 == v460)
        {
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Layout.Line.Line(v665, v666, v689);
          swift_bridgeObjectRelease();
          goto LABEL_284;
        }
      }
      uint64_t v683 = v466;
      uint64_t v688 = v477 + 32;
      Swift::UInt64 v485 = v472;
      Swift::UInt64 v703 = v473;
      uint64_t v486 = v471;
      uint64_t v487 = v468;
      uint64_t v488 = v475;
      uint64_t v489 = v477;
      Swift::UInt64 v702 = v474;
      double v490 = v470;
      swift_bridgeObjectRetain_n();
      uint64_t v684 = v489;
      uint64_t v685 = v476;
      uint64_t v696 = v488;
      uint64_t v460 = v692;
      CGRect v686 = v469;
      Swift::UInt64 v697 = v487;
      CGRect v698 = v490;
      double v491 = v490;
      uint64_t v699 = v486;
      uint64_t v492 = v486;
      uint64_t v473 = v703;
      Swift::UInt64 v700 = v485;
      uint64_t v493 = v688;
      outlined copy of Text.Effect.Composition.Operation((uint64_t)v469, v487, v491, v492, v485, v703, v702, v716);
      double v494 = 0;
      uint64_t v495 = v694;
      while (1)
      {
        uint64_t v504 = (uint64_t *)(v493 + 88 * (void)v494);
        uint64_t v503 = *v504;
        uint64_t v502 = v504[1];
        double v501 = (void *)v504[2];
        double v500 = (void *)v504[3];
        uint64_t v499 = v504[4];
        uint64_t v498 = v504[5];
        uint64_t v497 = v504[6];
        unint64_t v496 = v504[7];
        unint64_t v505 = v504[8];
        uint64_t v506 = v504[9];
        uint64_t v507 = v504[10];
        if (v496 >> 62)
        {
          if (v496 >> 62 == 1) {
            goto LABEL_231;
          }
          uint64_t v705 = v504[9];
          unint64_t v706 = v505;
          Swift::UInt64 v707 = v502;
          CGRect v708 = v501;
          CGRect v709 = v500;
          Swift::UInt64 v710 = v499;
          Swift::UInt64 v715 = v498;
          uint64_t v713 = v497;
          Swift::UInt64 v714 = v496;
          CGRect v704 = v494;
          uint64_t v508 = *v695;
          if (*(void *)(*v695 + 16))
          {
            uint64_t v509 = v460;
            Swift::UInt64 v510 = v503;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v510);
            Swift::Int v511 = Hasher._finalize()();
            uint64_t v512 = -1 << *(unsigned char *)(v508 + 32);
            unint64_t v513 = v511 & ~v512;
            uint64_t v514 = v508 + 56;
            if ((*(void *)(v508 + 56 + ((v513 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v513))
            {
              uint64_t v515 = *(void *)(v508 + 48);
              uint64_t v503 = v510;
              if (*(void *)(v515 + 8 * v513) == v510)
              {
                double v494 = v704;
                unint64_t v496 = v714;
                uint64_t v497 = v713;
                uint64_t v498 = v715;
                LOBYTE(v499) = v710;
                double v500 = v709;
                double v501 = v708;
                uint64_t v502 = v707;
                uint64_t v460 = v509;
                uint64_t v495 = v694;
                goto LABEL_231;
              }
              uint64_t v537 = ~v512;
              unint64_t v538 = (v513 + 1) & v537;
              double v494 = v704;
              if ((*(void *)(v514 + ((v538 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v538))
              {
                uint64_t v460 = v509;
                uint64_t v495 = v694;
                while (*(void *)(v515 + 8 * v538) != v503)
                {
                  unint64_t v538 = (v538 + 1) & v537;
                  if (((*(void *)(v514 + ((v538 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v538) & 1) == 0) {
                    goto LABEL_252;
                  }
                }
                unint64_t v496 = v714;
                uint64_t v497 = v713;
                uint64_t v498 = v715;
                LOBYTE(v499) = v710;
                double v500 = v709;
                double v501 = v708;
                uint64_t v502 = v707;
                goto LABEL_231;
              }
            }
            else
            {
              double v494 = v704;
              uint64_t v503 = v510;
            }
            uint64_t v495 = v694;
          }
          else
          {
            double v494 = v704;
          }
LABEL_252:
          uint64_t v539 = v503;
          uint64_t v540 = v691;
          swift_beginAccess();
          uint64_t v541 = *v540;
          if (!*(void *)(v541 + 16) || (uint64_t v542 = specialized __RawDictionaryStorage.find<A>(_:)(v539), (v543 & 1) == 0))
          {
            swift_endAccess();
            unint64_t v496 = v714;
            uint64_t v497 = v713;
            uint64_t v498 = v715;
            LOBYTE(v499) = v710;
            double v500 = v709;
            double v501 = v708;
            uint64_t v502 = v707;
            uint64_t v503 = v539;
            uint64_t v460 = v692;
LABEL_231:
            outlined consume of Text.Effect.Composition.Operation(v503, v502, v501, (uint64_t)v500, v499, v498, v497, v496);
            goto LABEL_232;
          }
          uint64_t v544 = v495;
          uint64_t v545 = *(void **)(*(void *)(v541 + 56) + 8 * v542);
          swift_endAccess();
          CGFloat v546 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v545) + 0x110);
          double v547 = v545;
          char v548 = v546();

          outlined consume of Text.Effect.Composition.Operation(v539, v707, v708, (uint64_t)v709, v710, v715, v713, v714);
          if (v548)
          {
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation((uint64_t)v686, v697, v698, v699, v700, v473, v702, v716);
            goto LABEL_277;
          }
          double v494 = v704;
          uint64_t v460 = v692;
          uint64_t v495 = v544;
        }
        else if (*(void *)(v507 + 16))
        {
          uint64_t v721 = *(void *)(v507 + 16);
          CGRect v704 = v494;
          Swift::UInt64 v693 = v503;
          uint64_t v516 = v497;
          Swift::UInt64 v715 = v498;
          uint64_t v517 = v499;
          uint64_t v518 = v507;
          double v519 = v500;
          double v520 = v501;
          uint64_t v521 = v502;
          unint64_t v522 = v505;
          uint64_t v523 = v506;
          swift_bridgeObjectRetain();
          uint64_t v705 = v523;
          unint64_t v706 = v522;
          Swift::UInt64 v707 = v521;
          CGRect v708 = v520;
          CGRect v709 = v519;
          Swift::UInt64 v710 = v517;
          uint64_t v713 = v516;
          Swift::UInt64 v714 = v496;
          outlined copy of Text.Effect.Composition.Operation(v693, v521, v520, (uint64_t)v519, v517, v715, v516, v496);
          Swift::UInt64 v690 = v518;
          uint64_t v524 = (uint64_t *)(v518 + 56);
          while (1)
          {
            uint64_t v526 = v524[6];
            uint64_t v525 = v524[7];
            unint64_t v527 = v524[4];
            uint64_t v528 = v524[5];
            uint64_t v530 = v524[2];
            uint64_t v529 = v524[3];
            uint64_t v532 = *v524;
            uint64_t v531 = v524[1];
            uint64_t v533 = *(v524 - 2);
            uint64_t v534 = (void *)*(v524 - 1);
            uint64_t v535 = *(v524 - 3);
            v731 = (void *)v535;
            uint64_t v732 = v533;
            v733 = v534;
            uint64_t v734 = v532;
            uint64_t v735 = v531;
            uint64_t v723 = v531;
            uint64_t v736 = v530;
            uint64_t v724 = v530;
            uint64_t v737 = v529;
            unint64_t v725 = v529;
            unint64_t v738 = v527;
            uint64_t v726 = v527;
            uint64_t v739 = v528;
            uint64_t v740 = v526;
            uint64_t v741 = v525;
            outlined copy of Text.Effect.Composition.Operation(v535, v533, v534, v532, v531, v530, v529, v527);
            uint64_t v536 = v727;
            LODWORD(v722) = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)((Swift::UInt64 *)&v731, v719, v717, v718, v720);
            uint64_t v727 = v536;
            outlined consume of Text.Effect.Composition.Operation(v535, v533, v534, v532, v723, v724, v725, v726);
            if (v722) {
              break;
            }
            v524 += 11;
            if (!--v721)
            {
              swift_bridgeObjectRelease();
              uint64_t v11 = v617;
              uint64_t v460 = v692;
              uint64_t v473 = v703;
              uint64_t v495 = v694;
              uint64_t v493 = v688;
              double v494 = v704;
              unint64_t v496 = v714;
              uint64_t v497 = v713;
              uint64_t v498 = v715;
              LOBYTE(v499) = v710;
              double v500 = v709;
              double v501 = v708;
              uint64_t v502 = v707;
              uint64_t v503 = v693;
              goto LABEL_231;
            }
          }
          swift_bridgeObjectRelease();
          outlined consume of Text.Effect.Composition.Operation(v693, v707, v708, (uint64_t)v709, v710, v715, v713, v714);
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Effect.Composition.Operation((uint64_t)v686, v697, v698, v699, v700, v703, v702, v716);
          uint64_t v11 = v617;
LABEL_277:
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v665, v666, v689);
          swift_bridgeObjectRelease();
          uint64_t v562 = MEMORY[0x24C527E00](v584);
          if (v562)
          {
            long long v563 = (void *)v562;
            CGFloat v459 = v682;
            LayerGeometryObserver.clip(bounds:for:)(v682, v454, v455, v457, v458);
            double v454 = v564;
            double v455 = v565;
            double v457 = v566;
            double v458 = v567;

            uint64_t v29 = v630;
            goto LABEL_285;
          }
LABEL_284:
          uint64_t v29 = v630;
          CGFloat v459 = v682;
LABEL_285:
          objc_msgSend(v459, sel_bounds);
          v752.origin.CGFloat x = v454;
          v752.origin.CGFloat y = v455;
          v752.size.CGFloat width = v457;
          v752.size.CGFloat height = v458;
          if (!CGRectEqualToRect(v750, v752)) {
            objc_msgSend(v459, sel_setBounds_, v454, v455, v457, v458);
          }
          if (v680 >= *(void *)(*(void *)v585 + 16)) {
            goto LABEL_305;
          }
          uint64_t v573 = *(void *)v585 + 16 * v680;
          double v574 = v454 + *(double *)(v573 + 32);
          double v575 = v455 + *(double *)(v573 + 40);
          objc_msgSend(v459, sel_frame);
          v753.origin.CGFloat x = v574;
          v753.origin.CGFloat y = v575;
          v753.size.CGFloat width = v457;
          v753.size.CGFloat height = v458;
          if (!CGRectEqualToRect(v751, v753)) {
            objc_msgSend(v459, sel_setFrame_, v574, v575, v457, v458);
          }
          objc_msgSend(v459, sel_setNeedsDisplay);
          outlined consume of Text.Layout.Line.Line(v665, v666, v689);
          swift_bridgeObjectRelease();

LABEL_194:
          int64_t v28 = v712;
          unint64_t v27 = v711;
          goto LABEL_7;
        }
LABEL_232:
        double v494 = (char *)v494 + 1;
        if (v494 == (void *)v495)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v463 = v687;
          LOBYTE(v472) = v700;
          uint64_t v471 = v699;
          uint64_t v468 = v697;
          uint64_t v466 = v683;
          double v469 = v686;
          uint64_t v474 = v702;
          double v470 = v698;
          goto LABEL_272;
        }
      }
    }
    break;
  }
LABEL_293:
  swift_release();
  int v576 = v594;
  uint64_t v577 = v675;
  if (v583)
  {
    if ((v594 & 1) == 0)
    {
LABEL_299:
      outlined release of TextRenderLayer.Layout?(v743, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      return;
    }
  }
  else
  {
    uint64_t v578 = v596;
    v591(v29, v597, v596);
    int v579 = RangeSet.isEmpty.getter();
    v590(v29, v578);
    if (((v579 | v576) & 1) == 0) {
      goto LABEL_299;
    }
  }
  TextRenderLayer.updateSharedDrawingBounds()();
  long long v580 = *(void **)(v577 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer);
  if (!v580) {
    goto LABEL_299;
  }
  id v581 = v580;
  objc_msgSend(v581, sel_setNeedsDisplay);
  outlined release of TextRenderLayer.Layout?(v743, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
}

uint64_t TextRenderLayer.segmentIndices(for:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x263F8EE88];
  uint64_t v19 = MEMORY[0x263F8EE88];
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags) & 8) == 0)
  {
    uint64_t v4 = a1 + 56;
    uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v6 = -1;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    unint64_t v7 = v6 & *(void *)(a1 + 56);
    uint64_t v8 = v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices;
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = 0;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (v14) {
        goto LABEL_21;
      }
      int64_t v10 = v13 + 2;
      if (v13 + 2 >= v9)
      {
LABEL_26:
        swift_release();
        return v19;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v15 = v13 + 3;
        if (v15 < v9)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14)
          {
            int64_t v10 = v15;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v10 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_29;
            }
            if (v10 >= v9) {
              goto LABEL_26;
            }
            unint64_t v14 = *(void *)(v4 + 8 * v10);
            ++v15;
            if (v14) {
              goto LABEL_21;
            }
          }
        }
        goto LABEL_26;
      }
    }
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    for (unint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; unint64_t i = v11 | (v10 << 6))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8 * i);
      swift_beginAccess();
      if (*(void *)(*(void *)v8 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v16), (v17 & 1) != 0))
      {
        swift_endAccess();
        uint64_t v18 = swift_bridgeObjectRetain();
        uint64_t result = specialized Set.formUnion<A>(_:)(v18);
        if (!v7) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t result = swift_endAccess();
        if (!v7) {
          goto LABEL_8;
        }
      }
LABEL_7:
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
    }
  }
  return result;
}

void *TextRenderLayer.ensureUnsharedDrawing(for:)(unint64_t a1)
{
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v71 = v3;
  uint64_t v72 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v61 - v5;
  uint64_t v7 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1;
  _sypSgWObTm_1(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v84, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v84, (uint64_t)v85, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v85);
  if (result != 1)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(v86 + 16) > a1)
    {
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v86+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * a1, (uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if (swift_getEnumCaseMultiPayload() != 2) {
        return (void *)outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v10, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      }
      int64_t v13 = (void *)*((void *)v10 + 3);
      uint64_t v14 = *((void *)v10 + 4);
      int v69 = v10[40];
      uint64_t v15 = *((void *)v10 + 6);
      uint64_t v16 = *((void *)v10 + 7);
      LODWORD(v68) = *((_DWORD *)v10 + 16);
      uint64_t v17 = *((void *)v10 + 9);
      uint64_t v18 = *((void *)v10 + 10);
      uint64_t v70 = *((void *)v10 + 11);
      uint64_t v19 = v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments;
      swift_beginAccess();
      unint64_t v20 = a1;
      uint64_t v21 = v71;
      uint64_t v22 = v72;
      uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
      uint64_t v67 = v72 + 16;
      v66(v6, v19, v71);
      v75[0] = v20;
      _sypSgWObTm_1((uint64_t)v84, (uint64_t)v83, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
      outlined retain of TextRenderLayer.Layout((uint64_t)v83);
      char v23 = RangeSet.contains(_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v22 + 8);
      uint64_t v72 = v22 + 8;
      uint64_t v65 = v24;
      v24(v6, v21);
      if ((v23 & 1) == 0)
      {
        outlined consume of Text.Layout.Line.Line(v13, v14, v69);
LABEL_22:
        swift_bridgeObjectRelease();
        return outlined release of TextRenderLayer.Layout?(v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      }
      unint64_t v73 = v20;
      unint64_t v74 = v20 + 1;
      swift_beginAccess();
      uint64_t v64 = v19;
      RangeSet.remove(contentsOf:)();
      swift_endAccess();
      v75[0] = (uint64_t)v13;
      v75[1] = v14;
      char v25 = v69;
      char v76 = v69;
      uint64_t v77 = v15;
      uint64_t v78 = v16;
      int v79 = (int)v68;
      uint64_t v80 = v17;
      uint64_t v81 = v18;
      uint64_t v82 = v70;
      outlined copy of Text.Layout.Line.Line(v13, v14, v69);
      swift_bridgeObjectRetain();
      double v26 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)(v75, v20, 0);
      CGFloat v28 = v27;
      CGFloat v30 = v29;
      CGFloat v32 = v31;
      uint64_t v68 = v13;
      uint64_t v63 = v14;
      outlined consume of Text.Layout.Line.Line(v13, v14, v25);
      swift_bridgeObjectRelease();
      TextRenderLayer.pixelLength.getter();
      double v34 = v33;
      v87.origin.CGFloat x = v26;
      v87.origin.CGFloat y = v28;
      v87.size.CGFloat width = v30;
      v87.size.CGFloat height = v32;
      double MinX = CGRectGetMinX(v87);
      v88.origin.CGFloat x = v26;
      v88.origin.CGFloat y = v28;
      v88.size.CGFloat width = v30;
      v88.size.CGFloat height = v32;
      double MaxX = CGRectGetMaxX(v88);
      v89.origin.CGFloat x = v26;
      v89.origin.CGFloat y = v28;
      v89.size.CGFloat width = v30;
      v89.size.CGFloat height = v32;
      double MinY = CGRectGetMinY(v89);
      v90.origin.CGFloat x = v26;
      v90.origin.CGFloat y = v28;
      v90.size.CGFloat width = v30;
      v90.size.CGFloat height = v32;
      double MaxY = CGRectGetMaxY(v90);
      uint64_t v39 = v11 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers;
      swift_beginAccess();
      if (*(void *)(*(void *)v39 + 16) > v20)
      {
        double v40 = v34 * floor(MinX / v34);
        double v41 = ceil(MaxX / v34);
        double v42 = v34 * floor(MinY / v34);
        double v43 = v34 * ceil(MaxY / v34);
        double v44 = v34 * v41 - v40;
        double v45 = v43 - v42;
        unint64_t v46 = *(void *)(*(void *)v39 + 8 * v20 + 32);
        char v47 = v25;
        switch(v46 >> 62)
        {
          case 1uLL:
          case 2uLL:
          case 3uLL:
            uint64_t v48 = (void *)(v46 & 0x3FFFFFFFFFFFFFFFLL);
            v46 &= 0x3FFFFFFFFFFFFFFFuLL;
            break;
          default:
            uint64_t v48 = (void *)(v46 & 0x3FFFFFFFFFFFFFFFLL);
            break;
        }
        id v49 = v48;
        objc_msgSend((id)v46, sel_bounds);
        v93.origin.CGFloat x = v40;
        v93.origin.CGFloat y = v42;
        v93.size.CGFloat width = v44;
        v93.size.CGFloat height = v45;
        if (!CGRectEqualToRect(v91, v93))
        {
          objc_msgSend((id)v46, sel_setBounds_, v40, v42, v44, v45);
          objc_msgSend((id)v46, sel_setNeedsDisplay);
        }
        char v50 = (uint64_t *)(v11 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements);
        swift_beginAccess();
        uint64_t v51 = *v50;
        if (*(void *)(*v50 + 16) > v20)
        {
          uint64_t v61 = v11;
          id v62 = v49;
          uint64_t v52 = v51 + 16 * v20;
          double v53 = v40 + *(double *)(v52 + 32);
          double v54 = v42 + *(double *)(v52 + 40);
          objc_msgSend((id)v46, sel_frame, v11);
          v94.origin.CGFloat x = v53;
          v94.origin.CGFloat y = v54;
          v94.size.CGFloat width = v44;
          v94.size.CGFloat height = v45;
          BOOL v55 = CGRectEqualToRect(v92, v94);
          uint64_t v56 = v63;
          if (!v55) {
            objc_msgSend((id)v46, sel_setFrame_, v53, v54, v44, v45);
          }
          unsigned int v57 = objc_msgSend((id)v46, sel_isHidden);
          uint64_t v58 = v68;
          uint64_t v59 = v64;
          if (v57) {
            objc_msgSend((id)v46, sel_setHidden_, 0);
          }
          v66(v6, v59, v21);
          char v60 = RangeSet.isEmpty.getter();
          v65(v6, v21);
          if (v60) {
            TextRenderLayer.updateSharedDrawingBounds()();
          }
          outlined consume of Text.Layout.Line.Line(v58, v56, v47);

          goto LABEL_22;
        }
LABEL_27:
        __break(1u);
        JUMPOUT(0x245B4C588);
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_26;
  }
  return result;
}

void TextRenderLayer.updateSharedDrawingBounds()()
{
  double v86 = COERCE_DOUBLE(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0));
  uint64_t v81 = *(void *)(*(void *)&v86 - 8);
  MEMORY[0x270FA5388](*(void *)&v86);
  uint64_t v2 = (char *)&v75 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x263F8D6E0];
  type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
  uint64_t v82 = v4;
  uint64_t v5 = *(uint64_t **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v75 - v6;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v75 - v8;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v83 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v75 - v11);
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, v3, MEMORY[0x263F8EDA0]);
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v13);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v75 - v18;
  unint64_t v20 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer];
  if (!v20) {
    return;
  }
  uint64_t v78 = v16;
  int v79 = v9;
  uint64_t v80 = v5;
  uint64_t v21 = v17;
  uint64_t v22 = &v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments];
  swift_beginAccess();
  uint64_t v85 = v0;
  char v23 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  char v76 = v22;
  uint64_t v24 = v22;
  uint64_t v25 = v21;
  double v26 = v23;
  v23(v19, v24, v14);
  id v27 = v20;
  char v28 = RangeSet.isEmpty.getter();
  uint64_t v77 = *(void (**)(char *, uint64_t))(v25 + 8);
  v77(v19, v14);
  double v29 = 0.0;
  double v30 = 0.0;
  double v31 = 0.0;
  double v32 = 0.0;
  if (v28) {
    goto LABEL_27;
  }
  id v75 = v27;
  _sypSgWObTm_1((uint64_t)&v85[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)v95, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v95, (uint64_t)v96, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v96) == 1) {
    goto LABEL_23;
  }
  CGFloat x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  v26(v19, v76, v14);
  uint64_t v37 = v78;
  v26(v78, v19, v14);
  _sypSgWObTm_1((uint64_t)v95, (uint64_t)v94, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  outlined retain of TextRenderLayer.Layout((uint64_t)v94);
  uint64_t v38 = v84;
  RangeSet.ranges.getter();
  uint64_t v39 = v77;
  v77(v37, v14);
  uint64_t v41 = (uint64_t)v79;
  double v40 = v80;
  double v42 = v38;
  uint64_t v43 = v82;
  ((void (*)(char *, char *, uint64_t))v80[4])(v79, v42, v82);
  v39(v19, v14);
  ((void (*)(char *, uint64_t, uint64_t))v40[2])((char *)v12 + *((int *)v83 + 12), v41, v43);
  *uint64_t v12 = 0;
  v12[1] = 0;
  outlined destroy of RangeSet<Int><>.IndexSequence.Iterator(v41, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  uint64_t v44 = *v12;
  if (v44 >= RangeSet.Ranges.count.getter())
  {
LABEL_20:
    outlined destroy of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v12, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
    v101.origin.CGFloat x = x;
    v101.origin.CGFloat y = y;
    v101.size.CGFloat width = width;
    v101.size.CGFloat height = height;
    if (CGRectIsNull(v101))
    {
      outlined release of TextRenderLayer.Layout?(v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      double v30 = 0.0;
      double v31 = 0.0;
      double v32 = 0.0;
      uint64_t v66 = v85;
      double v29 = 0.0;
LABEL_24:
      uint64_t v69 = MEMORY[0x24C527E00](&v66[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_geometryObserver]);
      if (v69)
      {
        uint64_t v70 = (void *)v69;
        LayerGeometryObserver.clip(bounds:for:)(v66, v31, v32, v29, v30);
        double v31 = v71;
        double v32 = v72;
        double v29 = v73;
        double v30 = v74;
      }
      id v27 = v75;
LABEL_27:
      objc_msgSend(v27, sel_bounds);
      v109.origin.CGFloat x = v31;
      v109.origin.CGFloat y = v32;
      v109.size.CGFloat width = v29;
      v109.size.CGFloat height = v30;
      if (!CGRectEqualToRect(v106, v109))
      {
        objc_msgSend(v27, sel_setBounds_, v31, v32, v29, v30);
        objc_msgSend(v27, sel_setNeedsDisplay);
      }
      objc_msgSend(v27, sel_frame);
      v110.origin.CGFloat x = v31;
      v110.origin.CGFloat y = v32;
      v110.size.CGFloat width = v29;
      v110.size.CGFloat height = v30;
      if (!CGRectEqualToRect(v107, v110)) {
        objc_msgSend(v27, sel_setFrame_, v31, v32, v29, v30);
      }

      return;
    }
    v102.origin.CGFloat x = x;
    v102.origin.CGFloat y = y;
    v102.size.CGFloat width = width;
    v102.size.CGFloat height = height;
    double v31 = floor(CGRectGetMinX(v102) * 0.0625) * 16.0;
    v103.origin.CGFloat x = x;
    v103.origin.CGFloat y = y;
    v103.size.CGFloat width = width;
    v103.size.CGFloat height = height;
    double v86 = ceil(CGRectGetMaxX(v103) * 0.0625) * 16.0;
    v104.origin.CGFloat x = x;
    v104.origin.CGFloat y = y;
    v104.size.CGFloat width = width;
    v104.size.CGFloat height = height;
    double v32 = floor(CGRectGetMinY(v104) * 0.0625) * 16.0;
    v105.origin.CGFloat x = x;
    v105.origin.CGFloat y = y;
    v105.size.CGFloat width = width;
    v105.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v105);
    outlined release of TextRenderLayer.Layout?(v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    double v68 = ceil(MaxY * 0.0625) * 16.0;
    double v29 = v86 - v31;
    double v30 = v68 - v32;
LABEL_23:
    uint64_t v66 = v85;
    goto LABEL_24;
  }
  uint64_t v45 = v81;
  uint64_t v83 = &v97[(*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80)];
  uint64_t v84 = v97;
  uint64_t v80 = (uint64_t *)&v85[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements];
  swift_beginAccess();
  while (1)
  {
    RangeSet.Ranges.subscript.getter();
    uint64_t v46 = v12[1];
    unint64_t v47 = (unint64_t)v87 + v46;
    if (__OFADD__(v87, v46)) {
      break;
    }
    uint64_t v48 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      goto LABEL_34;
    }
    v12[1] = v48;
    RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(v88, v87)) {
      goto LABEL_35;
    }
    if (v48 >= v88 - (uint64_t)v87)
    {
      *uint64_t v12 = v44 + 1;
      v12[1] = 0;
    }
    if ((v47 & 0x8000000000000000) != 0) {
      goto LABEL_36;
    }
    if (v47 >= *((void *)v84 + 2)) {
      goto LABEL_37;
    }
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)&v83[*(void *)(v45 + 72) * v47], (uint64_t)v2, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      CGFloat v49 = height;
      CGFloat v50 = width;
      CGFloat v51 = y;
      CGFloat v52 = x;
      double v53 = (void *)*((void *)v2 + 3);
      uint64_t v54 = *((void *)v2 + 4);
      char v55 = v2[40];
      int v56 = *((_DWORD *)v2 + 16);
      uint64_t v57 = *((void *)v2 + 11);
      CGRect v87 = v53;
      uint64_t v88 = v54;
      char v89 = v55;
      long long v90 = *((_OWORD *)v2 + 3);
      int v91 = v56;
      long long v92 = *(_OWORD *)(v2 + 72);
      uint64_t v93 = v57;
      outlined copy of Text.Layout.Line.Line(v53, v54, v55);
      swift_bridgeObjectRetain();
      double v58 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)((uint64_t *)&v87, v47, 1);
      double v60 = v59;
      CGFloat v62 = v61;
      CGFloat v64 = v63;
      outlined consume of Text.Layout.Line.Line(v53, v54, v55);
      swift_bridgeObjectRelease();
      v98.origin.CGFloat x = v58;
      v98.origin.CGFloat y = v60;
      v98.size.CGFloat width = v62;
      v98.size.CGFloat height = v64;
      if (CGRectIsNull(v98))
      {
        outlined consume of Text.Layout.Line.Line(v53, v54, v55);
        swift_bridgeObjectRelease();
        uint64_t v45 = v81;
        CGFloat x = v52;
        CGFloat y = v51;
        CGFloat width = v50;
        CGFloat height = v49;
      }
      else
      {
        if (v47 >= *(void *)(*v80 + 16)) {
          goto LABEL_38;
        }
        uint64_t v65 = *v80 + 16 * v47;
        v108.origin.CGFloat x = v58 + *(double *)(v65 + 32);
        v108.origin.CGFloat y = v60 + *(double *)(v65 + 40);
        v99.origin.CGFloat x = v52;
        v99.origin.CGFloat y = v51;
        v99.size.CGFloat width = v50;
        v99.size.CGFloat height = v49;
        v108.size.CGFloat width = v62;
        v108.size.CGFloat height = v64;
        CGRect v100 = CGRectUnion(v99, v108);
        CGFloat x = v100.origin.x;
        CGFloat y = v100.origin.y;
        CGFloat width = v100.size.width;
        CGFloat height = v100.size.height;
        outlined consume of Text.Layout.Line.Line(v53, v54, v55);
        swift_bridgeObjectRelease();
        uint64_t v45 = v81;
      }
    }
    else
    {
      outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v2, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    }
    uint64_t v44 = *v12;
    if (v44 >= RangeSet.Ranges.count.getter()) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *TextRenderLayer.updateClippingBounds()()
{
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  uint64_t v664 = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v663 = (char *)&v653 - v3;
  uint64_t v4 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v733 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v653 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sypSgWObTm_1(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v880, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v880, (uint64_t)v881, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v881);
  if (result != 1)
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap);
    uint64_t v860 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8);
    uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v9 + 112);
    uint64_t v11 = v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers;
    uint64_t result = (void *)swift_beginAccess();
    uint64_t v656 = v11;
    uint64_t v731 = *(void *)(*(void *)v11 + 16);
    if (v731)
    {
      v856 = (uint64_t *)(v10 + 24);
      uint64_t v12 = v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments;
      uint64_t v654 = v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_geometryObserver;
      uint64_t v655 = v0;
      uint64_t v13 = v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements;
      uint64_t v14 = *(unsigned __int8 *)(v733 + 80);
      uint64_t v730 = v882;
      uint64_t v729 = v882 + ((v14 + 32) & ~v14);
      outlined release of TextRenderLayer.Layout?(v880, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
      uint64_t v861 = v8;
      swift_bridgeObjectRetain();
      uint64_t v862 = v10;
      swift_retain();
      uint64_t v863 = v9;
      swift_retain();
      uint64_t v659 = v12;
      swift_beginAccess();
      uint64_t v653 = v13;
      swift_beginAccess();
      unint64_t v858 = 0;
      uint64_t v870 = 0;
      uint64_t v657 = (void (**)(char *, uint64_t))(v2 + 8);
      uint64_t v658 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
      uint64_t v15 = (uint64_t *)(v10 + 40);
      v859 = (uint64_t *)(v10 + 40);
      uint64_t v661 = v6;
      uint64_t v662 = v4;
LABEL_6:
      if (v858 >= *(void *)(v730 + 16))
      {
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
        JUMPOUT(0x245B50ADCLL);
      }
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v729 + *(void *)(v733 + 72) * v858, (uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v6, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        goto LABEL_5;
      }
      uint64_t v16 = (void *)*((void *)v6 + 3);
      uint64_t v17 = *((void *)v6 + 4);
      int v18 = v6[40];
      uint64_t v19 = *((void *)v6 + 11);
      uint64_t v817 = *(void *)(v19 + 16);
      if (!v817)
      {
        outlined consume of Text.Layout.Line.Line(v16, v17, v18);
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      long long v667 = *((_OWORD *)v6 + 3);
      int v666 = *((_DWORD *)v6 + 16);
      uint64_t v829 = v19 + 32;
      long long v665 = *(_OWORD *)(v6 + 72);
      uint64_t v20 = v19;
      uint64_t v21 = v16;
      int v22 = v18;
      swift_bridgeObjectRetain_n();
      uint64_t v720 = v21;
      uint64_t v721 = v17;
      int v722 = v22;
      outlined copy of Text.Layout.Line.Line(v21, v17, v22);
      uint64_t v707 = v20;
      swift_bridgeObjectRetain();
      char v23 = v15;
      swift_beginAccess();
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (uint64_t *)(v829 + 88 * v24);
        uint64_t v27 = *v25;
        uint64_t v26 = v25[1];
        char v28 = (void *)v25[2];
        uint64_t v29 = v25[3];
        uint64_t v30 = v25[4];
        uint64_t v31 = v25[5];
        uint64_t v32 = v25[6];
        unint64_t v33 = v25[7];
        uint64_t v35 = v25[8];
        uint64_t v34 = v25[9];
        uint64_t v36 = v25[10];
        if (v33 >> 62)
        {
          if (v33 >> 62 != 1)
          {
            uint64_t v37 = *v23;
            uint64_t v38 = *(void *)(*v23 + 16);
            unint64_t v801 = v33;
            uint64_t v800 = v32;
            uint64_t v799 = v31;
            uint64_t v798 = v30;
            uint64_t v797 = v29;
            v796 = v28;
            uint64_t v743 = v24;
            uint64_t v39 = v26;
            if (!v38) {
              goto LABEL_256;
            }
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v27);
            Swift::Int v40 = Hasher._finalize()();
            uint64_t v41 = -1 << *(unsigned char *)(v37 + 32);
            unint64_t v42 = v40 & ~v41;
            if (((*(void *)(v37 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42) & 1) == 0) {
              goto LABEL_256;
            }
            uint64_t v43 = *(void *)(v37 + 48);
            if (*(void *)(v43 + 8 * v42) != v27)
            {
              uint64_t v44 = ~v41;
              while (1)
              {
                unint64_t v42 = (v42 + 1) & v44;
                if (((*(void *)(v37 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v42) & 1) == 0) {
                  break;
                }
                if (*(void *)(v43 + 8 * v42) == v27) {
                  goto LABEL_261;
                }
              }
LABEL_256:
              uint64_t v553 = v856;
              swift_beginAccess();
              uint64_t v554 = *v553;
              if (*(void *)(v554 + 16))
              {
                uint64_t v555 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
                if (v556)
                {
                  uint64_t v557 = *(void **)(*(void *)(v554 + 56) + 8 * v555);
                  swift_endAccess();
                  uint64_t v558 = *MEMORY[0x263F8EED0] & *v557;
                  uint64_t v833 = v27;
                  CGAffineTransform v559 = *(uint64_t (**)(void))(v558 + 272);
                  CGAffineTransform v560 = v557;
                  LODWORD(v869) = v559();

                  uint64_t v717 = v36;
                  uint64_t v561 = v39;
                  uint64_t v562 = v39;
                  long long v563 = v796;
                  uint64_t v564 = v797;
                  char v565 = v798;
                  uint64_t v566 = v799;
                  uint64_t v567 = v800;
                  unint64_t v568 = v801;
                  outlined consume of Text.Effect.Composition.Operation(v27, v562, v796, v797, v798, v799, v800, v801);
                  uint64_t v569 = v566;
                  char v23 = v859;
                  outlined consume of Text.Effect.Composition.Operation(v833, v561, v563, v564, v565, v569, v567, v568);
                  uint64_t v24 = v743;
                  if (v869) {
                    goto LABEL_279;
                  }
                  goto LABEL_264;
                }
              }
              swift_endAccess();
            }
LABEL_261:
            unint64_t v575 = v801;
            uint64_t v577 = v800;
            uint64_t v578 = v799;
            char v576 = v798;
            uint64_t v579 = v797;
            long long v580 = v796;
            uint64_t v581 = v39;
LABEL_262:
            uint64_t v833 = v27;
            uint64_t v825 = v35;
            uint64_t v570 = v27;
            uint64_t v571 = v578;
            uint64_t v572 = v581;
            uint64_t v573 = v577;
            unint64_t v574 = v575;
            outlined consume of Text.Effect.Composition.Operation(v570, v581, v580, v579, v576, v578, v577, v575);
            char v28 = v580;
            uint64_t v29 = v579;
            uint64_t v31 = v571;
            uint64_t v32 = v573;
            uint64_t v26 = v572;
            uint64_t v27 = v833;
            LOBYTE(v30) = v576;
            unint64_t v33 = v574;
            uint64_t v24 = v743;
            char v23 = v859;
          }
          outlined consume of Text.Effect.Composition.Operation(v27, v26, v28, v29, v30, v31, v32, v33);
          goto LABEL_264;
        }
        uint64_t v813 = *(void *)(v36 + 16);
        if (v813) {
          break;
        }
LABEL_264:
        if (++v24 == v817)
        {
          uint64_t v15 = v23;
          swift_bridgeObjectRelease_n();
          uint64_t v624 = v720;
          uint64_t v625 = v721;
          char v626 = v722;
          outlined consume of Text.Layout.Line.Line(v720, v721, v722);
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v624, v625, v626);
          uint64_t v6 = v661;
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      uint64_t v743 = v24;
      uint64_t v826 = v36 + 32;
      uint64_t v45 = v28;
      uint64_t v46 = v29;
      uint64_t v47 = v30;
      uint64_t v825 = v35;
      uint64_t v48 = v31;
      uint64_t v735 = v26;
      uint64_t v49 = v32;
      unint64_t v50 = v33;
      outlined copy of Text.Effect.Composition.Operation(v27, v26, v28, v29, v30, v31, v32, v33);
      swift_bridgeObjectRetain();
      uint64_t v706 = v34;
      v796 = v45;
      uint64_t v797 = v46;
      uint64_t v798 = v47;
      uint64_t v799 = v48;
      uint64_t v800 = v49;
      unint64_t v801 = v50;
      outlined copy of Text.Effect.Composition.Operation(v27, v735, v45, v46, v47, v48, v49, v50);
      uint64_t v717 = v36;
      swift_bridgeObjectRetain();
      uint64_t v51 = 0;
      uint64_t v833 = v27;
      while (1)
      {
        CGFloat v52 = (uint64_t *)(v826 + 88 * v51);
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        char v55 = (void *)v52[2];
        uint64_t v56 = v52[3];
        uint64_t v57 = v52[4];
        uint64_t v58 = v52[5];
        uint64_t v60 = v52[6];
        unint64_t v59 = v52[7];
        uint64_t v61 = v52[8];
        uint64_t v62 = v52[9];
        uint64_t v63 = v52[10];
        if (v59 >> 62)
        {
          if (v59 >> 62 == 1)
          {
LABEL_253:
            outlined consume of Text.Effect.Composition.Operation(v54, v53, v55, v56, v57, v58, v60, v59);
            goto LABEL_254;
          }
          uint64_t v794 = v52[9];
          uint64_t v64 = *v859;
          uint64_t v65 = *(void *)(*v859 + 16);
          unint64_t v793 = v59;
          uint64_t v831 = v56;
          v792 = v55;
          uint64_t v837 = v53;
          uint64_t v814 = v61;
          uint64_t v742 = v51;
          char v66 = v57;
          if (v65)
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v54);
            Swift::Int v67 = Hasher._finalize()();
            uint64_t v68 = -1 << *(unsigned char *)(v64 + 32);
            unint64_t v69 = v67 & ~v68;
            if ((*(void *)(v64 + 56 + ((v69 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v69))
            {
              uint64_t v70 = *(void *)(v64 + 48);
              if (*(void *)(v70 + 8 * v69) == v54)
              {
                char v71 = v66;
                uint64_t v72 = v831;
                double v73 = v792;
                unint64_t v74 = v793;
                uint64_t v75 = v837;
LABEL_252:
                uint64_t v748 = v63;
                uint64_t v809 = v54;
                uint64_t v548 = v54;
                uint64_t v549 = v75;
                unint64_t v550 = v73;
                char v551 = v71;
                unint64_t v552 = v74;
                outlined consume of Text.Effect.Composition.Operation(v548, v75, v73, v72, v71, v58, v60, v74);
                char v55 = v550;
                uint64_t v53 = v549;
                uint64_t v54 = v809;
                unint64_t v59 = v552;
                LOBYTE(v57) = v551;
                uint64_t v51 = v742;
                uint64_t v56 = v72;
                goto LABEL_253;
              }
              uint64_t v532 = ~v68;
              while (1)
              {
                unint64_t v69 = (v69 + 1) & v532;
                if (((*(void *)(v64 + 56 + ((v69 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v69) & 1) == 0) {
                  break;
                }
                if (*(void *)(v70 + 8 * v69) == v54) {
                  goto LABEL_251;
                }
              }
            }
          }
          uint64_t v533 = v856;
          swift_beginAccess();
          uint64_t v534 = *v533;
          if (*(void *)(v534 + 16))
          {
            uint64_t v535 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
            if (v536)
            {
              uint64_t v537 = *(void **)(*(void *)(v534 + 56) + 8 * v535);
              swift_endAccess();
              uint64_t v538 = *MEMORY[0x263F8EED0] & *v537;
              uint64_t v714 = v60;
              uint64_t v809 = v54;
              uint64_t v539 = *(uint64_t (**)(void))(v538 + 272);
              uint64_t v540 = v537;
              LODWORD(v869) = v539();

              uint64_t v541 = v54;
              uint64_t v542 = v837;
              char v543 = v792;
              uint64_t v544 = v831;
              LOBYTE(v540) = v66;
              char v545 = v66;
              uint64_t v546 = v714;
              unint64_t v547 = v793;
              outlined consume of Text.Effect.Composition.Operation(v541, v837, v792, v831, v545, v58, v714, v793);
              outlined consume of Text.Effect.Composition.Operation(v809, v542, v543, v544, (char)v540, v58, v546, v547);
              uint64_t v51 = v742;
              if (v869) {
                goto LABEL_278;
              }
              goto LABEL_254;
            }
          }
          swift_endAccess();
LABEL_251:
          char v71 = v66;
          uint64_t v72 = v831;
          double v73 = v792;
          uint64_t v75 = v837;
          unint64_t v74 = v793;
          goto LABEL_252;
        }
        uint64_t v811 = *(void *)(v63 + 16);
        if (v811) {
          break;
        }
LABEL_254:
        if (++v51 == v813)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v575 = v801;
          char v576 = v798;
          uint64_t v577 = v800;
          uint64_t v578 = v799;
          uint64_t v579 = v797;
          long long v580 = v796;
          uint64_t v581 = v735;
          uint64_t v35 = v825;
          uint64_t v27 = v833;
          goto LABEL_262;
        }
      }
      uint64_t v742 = v51;
      uint64_t v822 = v63 + 32;
      uint64_t v76 = v54;
      uint64_t v77 = v54;
      uint64_t v837 = v53;
      uint64_t v78 = v55;
      uint64_t v79 = v57;
      uint64_t v814 = v61;
      uint64_t v831 = v56;
      uint64_t v718 = v58;
      unint64_t v80 = v59;
      outlined copy of Text.Effect.Composition.Operation(v76, v53, v55, v56, v57, v58, v60, v59);
      swift_bridgeObjectRetain();
      uint64_t v794 = v62;
      v792 = v78;
      uint64_t v705 = v79;
      uint64_t v714 = v60;
      unint64_t v793 = v80;
      outlined copy of Text.Effect.Composition.Operation(v77, v837, v78, v831, v79, v58, v60, v80);
      uint64_t v748 = v63;
      swift_bridgeObjectRetain();
      uint64_t v81 = 0;
      uint64_t v809 = v77;
      uint64_t v82 = v859;
      while (1)
      {
        uint64_t v83 = (uint64_t *)(v822 + 88 * v81);
        uint64_t v85 = *v83;
        uint64_t v84 = v83[1];
        double v86 = (void *)v83[2];
        uint64_t v87 = v83[3];
        uint64_t v88 = v83[4];
        uint64_t v89 = v83[5];
        uint64_t v90 = v83[6];
        unint64_t v91 = v83[7];
        uint64_t v92 = v83[8];
        uint64_t v93 = v83[9];
        uint64_t v94 = v83[10];
        if (v91 >> 62)
        {
          if (v91 >> 62 == 1)
          {
LABEL_239:
            outlined consume of Text.Effect.Composition.Operation(v85, v84, v86, v87, v88, v89, v90, v91);
            goto LABEL_240;
          }
          uint64_t v740 = v81;
          uint64_t v95 = v84;
          v780 = v86;
          uint64_t v781 = v87;
          uint64_t v782 = v88;
          uint64_t v836 = v89;
          uint64_t v783 = v90;
          unint64_t v784 = v91;
          uint64_t v96 = *v82;
          if (*(void *)(*v82 + 16))
          {
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v85);
            Swift::Int v97 = Hasher._finalize()();
            uint64_t v98 = -1 << *(unsigned char *)(v96 + 32);
            unint64_t v99 = v97 & ~v98;
            if ((*(void *)(v96 + 56 + ((v99 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v99))
            {
              uint64_t v100 = *(void *)(v96 + 48);
              if (*(void *)(v100 + 8 * v99) == v85)
              {
LABEL_237:
                unint64_t v525 = v784;
                uint64_t v528 = v783;
                uint64_t v527 = v836;
                char v529 = v782;
                uint64_t v530 = v781;
                uint64_t v526 = v780;
                uint64_t v531 = v95;
LABEL_238:
                uint64_t v806 = v85;
                uint64_t v834 = v531;
                uint64_t v521 = v530;
                char v522 = v529;
                unint64_t v523 = v525;
                uint64_t v524 = v526;
                outlined consume of Text.Effect.Composition.Operation(v85, v531, v526, v530, v529, v527, v528, v525);
                uint64_t v87 = v521;
                LOBYTE(v88) = v522;
                uint64_t v84 = v834;
                uint64_t v90 = v528;
                double v86 = v524;
                uint64_t v85 = v806;
                unint64_t v91 = v523;
                uint64_t v81 = v740;
                uint64_t v89 = v527;
                uint64_t v82 = v859;
                goto LABEL_239;
              }
              uint64_t v101 = ~v98;
              while (1)
              {
                unint64_t v99 = (v99 + 1) & v101;
                if (((*(void *)(v96 + 56 + ((v99 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v99) & 1) == 0) {
                  break;
                }
                if (*(void *)(v100 + 8 * v99) == v85) {
                  goto LABEL_237;
                }
              }
            }
          }
          uint64_t v502 = v856;
          swift_beginAccess();
          uint64_t v503 = *v502;
          if (*(void *)(v503 + 16))
          {
            uint64_t v504 = specialized __RawDictionaryStorage.find<A>(_:)(v85);
            if (v505)
            {
              uint64_t v506 = *(void **)(*(void *)(v503 + 56) + 8 * v504);
              swift_endAccess();
              uint64_t v507 = *MEMORY[0x263F8EED0] & *v506;
              uint64_t v508 = v85;
              uint64_t v806 = v85;
              uint64_t v509 = *(uint64_t (**)(void))(v507 + 272);
              Swift::UInt64 v510 = v506;
              LODWORD(v869) = v509();

              uint64_t v712 = v94;
              uint64_t v511 = v508;
              uint64_t v512 = v95;
              uint64_t v513 = v95;
              uint64_t v514 = v780;
              uint64_t v515 = v781;
              char v516 = v782;
              uint64_t v517 = v836;
              uint64_t v518 = v783;
              unint64_t v519 = v784;
              outlined consume of Text.Effect.Composition.Operation(v511, v513, v780, v781, v782, v836, v783, v784);
              uint64_t v520 = v512;
              uint64_t v82 = v859;
              outlined consume of Text.Effect.Composition.Operation(v806, v520, v514, v515, v516, v517, v518, v519);
              uint64_t v81 = v740;
              if (v869) {
                goto LABEL_277;
              }
              goto LABEL_240;
            }
          }
          swift_endAccess();
          goto LABEL_237;
        }
        uint64_t v807 = *(void *)(v94 + 16);
        if (v807) {
          break;
        }
LABEL_240:
        if (++v81 == v811)
        {
          uint64_t v63 = v748;
          swift_bridgeObjectRelease_n();
          char v71 = v705;
          unint64_t v74 = v793;
          uint64_t v60 = v714;
          uint64_t v72 = v831;
          double v73 = v792;
          uint64_t v75 = v837;
          uint64_t v54 = v809;
          uint64_t v58 = v718;
          goto LABEL_252;
        }
      }
      uint64_t v740 = v81;
      uint64_t v818 = v94 + 32;
      uint64_t v102 = v87;
      uint64_t v834 = v84;
      uint64_t v103 = v88;
      uint64_t v836 = v89;
      uint64_t v104 = v90;
      unint64_t v105 = v91;
      uint64_t v106 = v92;
      CGRect v107 = v86;
      outlined copy of Text.Effect.Composition.Operation(v85, v84, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRetain();
      uint64_t v698 = v93;
      uint64_t v699 = v106;
      v780 = v107;
      uint64_t v781 = v102;
      uint64_t v782 = v103;
      uint64_t v783 = v104;
      unint64_t v784 = v105;
      outlined copy of Text.Effect.Composition.Operation(v85, v834, v107, v102, v103, v836, v104, v105);
      uint64_t v712 = v94;
      swift_bridgeObjectRetain();
      uint64_t v108 = 0;
      uint64_t v806 = v85;
      while (1)
      {
        CGRect v109 = (uint64_t *)(v818 + 88 * v108);
        uint64_t v111 = *v109;
        uint64_t v110 = v109[1];
        uint64_t v112 = (void *)v109[2];
        uint64_t v113 = v109[3];
        uint64_t v114 = v109[4];
        uint64_t v115 = v109[5];
        uint64_t v116 = v109[6];
        unint64_t v117 = v109[7];
        uint64_t v119 = v109[8];
        uint64_t v118 = v109[9];
        uint64_t v120 = v109[10];
        if (v117 >> 62)
        {
          if (v117 >> 62 == 1)
          {
LABEL_223:
            outlined consume of Text.Effect.Composition.Operation(v111, v110, v112, v113, v114, v115, v116, v117);
            goto LABEL_224;
          }
          uint64_t v746 = v108;
          uint64_t v121 = v116;
          unint64_t v122 = v117;
          uint64_t v123 = v118;
          uint64_t v124 = v110;
          v775 = v112;
          uint64_t v776 = v113;
          uint64_t v777 = v114;
          uint64_t v778 = v115;
          uint64_t v125 = *v859;
          uint64_t v126 = *(void *)(*v859 + 16);
          uint64_t v830 = v111;
          if (!v126) {
            goto LABEL_215;
          }
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v111);
          Swift::Int v127 = Hasher._finalize()();
          uint64_t v128 = -1 << *(unsigned char *)(v125 + 32);
          unint64_t v129 = v127 & ~v128;
          uint64_t v130 = v125 + 56;
          if (((*(void *)(v125 + 56 + ((v129 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v129) & 1) == 0) {
            goto LABEL_215;
          }
          uint64_t v131 = *(void *)(v125 + 48);
          if (*(void *)(v131 + 8 * v129) == v111)
          {
            uint64_t v132 = v778;
            char v133 = v777;
            uint64_t v134 = v776;
            uint64_t v135 = v775;
            unint64_t v136 = v122;
LABEL_214:
            uint64_t v500 = v124;
            uint64_t v499 = v121;
            uint64_t v108 = v746;
LABEL_222:
            unint64_t v802 = v136;
            uint64_t v747 = v123;
            uint64_t v815 = v500;
            uint64_t v494 = v830;
            uint64_t v495 = v135;
            uint64_t v496 = v134;
            char v497 = v133;
            uint64_t v498 = v132;
            outlined consume of Text.Effect.Composition.Operation(v830, v500, v135, v134, v133, v132, v499, v136);
            unint64_t v117 = v802;
            uint64_t v112 = v495;
            uint64_t v116 = v499;
            uint64_t v111 = v494;
            uint64_t v113 = v496;
            LOBYTE(v114) = v497;
            uint64_t v110 = v815;
            uint64_t v115 = v498;
            goto LABEL_223;
          }
          uint64_t v474 = ~v128;
          unint64_t v475 = (v129 + 1) & v474;
          if ((*(void *)(v130 + ((v475 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v475))
          {
            unint64_t v136 = v122;
            if (*(void *)(v131 + 8 * v475) == v111)
            {
              uint64_t v132 = v778;
              char v133 = v777;
              uint64_t v134 = v776;
              uint64_t v135 = v775;
              goto LABEL_214;
            }
            unint64_t v501 = (v475 + 1) & v474;
            if ((*(void *)(v130 + ((v501 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v501))
            {
              uint64_t v476 = v121;
              uint64_t v108 = v746;
              while (*(void *)(v131 + 8 * v501) != v111)
              {
                unint64_t v501 = (v501 + 1) & v474;
                if (((*(void *)(v130 + ((v501 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v501) & 1) == 0) {
                  goto LABEL_217;
                }
              }
              uint64_t v499 = v476;
              uint64_t v132 = v778;
              char v133 = v777;
              uint64_t v134 = v776;
              uint64_t v135 = v775;
              uint64_t v500 = v124;
              goto LABEL_222;
            }
          }
          else
          {
LABEL_215:
            unint64_t v136 = v122;
          }
          uint64_t v476 = v121;
          uint64_t v108 = v746;
LABEL_217:
          unint64_t v477 = v136;
          Swift::UInt64 v478 = v856;
          swift_beginAccess();
          uint64_t v479 = *v478;
          if (*(void *)(v479 + 16))
          {
            uint64_t v480 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
            if (v481)
            {
              unint64_t v482 = *(void **)(*(void *)(v479 + 56) + 8 * v480);
              swift_endAccess();
              uint64_t v483 = *MEMORY[0x263F8EED0] & *v482;
              unint64_t v802 = v477;
              uint64_t v732 = v119;
              uint64_t v484 = *(uint64_t (**)(void))(v483 + 272);
              Swift::UInt64 v485 = v482;
              LODWORD(v869) = v484();

              uint64_t v486 = v111;
              uint64_t v487 = v124;
              uint64_t v488 = v124;
              uint64_t v489 = v775;
              uint64_t v490 = v776;
              char v491 = v777;
              uint64_t v492 = v778;
              unint64_t v493 = v802;
              outlined consume of Text.Effect.Composition.Operation(v486, v488, v775, v776, v777, v778, v476, v802);
              uint64_t v108 = v746;
              outlined consume of Text.Effect.Composition.Operation(v830, v487, v489, v490, v491, v492, v476, v493);
              if (v869) {
                goto LABEL_276;
              }
              goto LABEL_224;
            }
          }
          uint64_t v499 = v476;
          swift_endAccess();
          uint64_t v132 = v778;
          char v133 = v777;
          uint64_t v134 = v776;
          uint64_t v135 = v775;
          uint64_t v500 = v124;
          unint64_t v136 = v477;
          goto LABEL_222;
        }
        uint64_t v804 = *(void *)(v120 + 16);
        if (v804) {
          break;
        }
LABEL_224:
        if (++v108 == v807)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v525 = v784;
          uint64_t v526 = v780;
          uint64_t v527 = v836;
          uint64_t v528 = v783;
          char v529 = v782;
          uint64_t v530 = v781;
          uint64_t v85 = v806;
          uint64_t v531 = v834;
          goto LABEL_238;
        }
      }
      uint64_t v746 = v108;
      uint64_t v816 = v120 + 32;
      uint64_t v137 = v111;
      uint64_t v830 = v111;
      unint64_t v138 = v112;
      uint64_t v139 = v113;
      uint64_t v815 = v110;
      uint64_t v140 = v118;
      uint64_t v141 = v114;
      uint64_t v142 = v115;
      uint64_t v734 = v116;
      unint64_t v143 = v117;
      outlined copy of Text.Effect.Composition.Operation(v137, v110, v112, v113, v114, v115, v116, v117);
      swift_bridgeObjectRetain();
      uint64_t v747 = v140;
      uint64_t v732 = v119;
      v775 = v138;
      uint64_t v776 = v139;
      uint64_t v777 = v141;
      uint64_t v778 = v142;
      unint64_t v802 = v143;
      outlined copy of Text.Effect.Composition.Operation(v830, v815, v138, v139, v141, v142, v734, v143);
      uint64_t v697 = v120;
      swift_bridgeObjectRetain();
      uint64_t v144 = 0;
      while (1)
      {
        uint64_t v145 = (uint64_t *)(v816 + 88 * v144);
        uint64_t v147 = *v145;
        uint64_t v146 = v145[1];
        uint64_t v148 = (void *)v145[2];
        uint64_t v149 = v145[3];
        uint64_t v150 = v145[4];
        uint64_t v151 = v145[5];
        uint64_t v152 = v145[6];
        unint64_t v153 = v145[7];
        uint64_t v154 = v145[8];
        uint64_t v155 = v145[9];
        uint64_t v156 = v145[10];
        if (v153 >> 62)
        {
          if (v153 >> 62 == 1)
          {
LABEL_207:
            outlined consume of Text.Effect.Composition.Operation(v147, v146, v148, v149, v150, v151, v152, v153);
            goto LABEL_208;
          }
          uint64_t v839 = v145[6];
          uint64_t v745 = v144;
          unint64_t v157 = v153;
          uint64_t v158 = v146;
          v835 = v148;
          uint64_t v771 = v149;
          uint64_t v772 = v150;
          uint64_t v773 = v151;
          uint64_t v159 = *v859;
          if (*(void *)(*v859 + 16))
          {
            Swift::UInt64 v160 = v147;
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v160);
            Swift::Int v161 = Hasher._finalize()();
            uint64_t v162 = -1 << *(unsigned char *)(v159 + 32);
            unint64_t v163 = v161 & ~v162;
            uint64_t v164 = v159 + 56;
            if (((*(void *)(v159 + 56 + ((v163 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v163) & 1) == 0)
            {
              unint64_t v153 = v157;
              uint64_t v144 = v745;
              uint64_t v147 = v160;
LABEL_202:
              uint64_t v450 = v147;
              __n128 v451 = v856;
              swift_beginAccess();
              uint64_t v452 = *v451;
              if (*(void *)(v452 + 16))
              {
                uint64_t v453 = specialized __RawDictionaryStorage.find<A>(_:)(v450);
                if (v454)
                {
                  double v455 = *(void **)(*(void *)(v452 + 56) + 8 * v453);
                  swift_endAccess();
                  uint64_t v456 = *MEMORY[0x263F8EED0] & *v455;
                  unint64_t v711 = v153;
                  uint64_t v715 = v154;
                  uint64_t v716 = v450;
                  double v457 = *(uint64_t (**)(void))(v456 + 272);
                  double v458 = v455;
                  LODWORD(v869) = v457();

                  uint64_t v459 = v450;
                  uint64_t v460 = v158;
                  uint64_t v461 = v158;
                  uint64_t v462 = v835;
                  uint64_t v463 = v771;
                  char v464 = v772;
                  uint64_t v465 = v773;
                  uint64_t v466 = v839;
                  outlined consume of Text.Effect.Composition.Operation(v459, v461, v835, v771, v772, v773, v839, v153);
                  uint64_t v144 = v745;
                  outlined consume of Text.Effect.Composition.Operation(v716, v460, v462, v463, v464, v465, v466, v711);
                  if (v869) {
                    goto LABEL_275;
                  }
                  goto LABEL_208;
                }
              }
              swift_endAccess();
              uint64_t v151 = v773;
              LOBYTE(v150) = v772;
              uint64_t v149 = v771;
              uint64_t v148 = v835;
              uint64_t v146 = v158;
              uint64_t v152 = v839;
              uint64_t v147 = v450;
              goto LABEL_207;
            }
            uint64_t v165 = *(void *)(v159 + 48);
            uint64_t v147 = v160;
            if (*(void *)(v165 + 8 * v163) == v160)
            {
              uint64_t v151 = v773;
              LOBYTE(v150) = v772;
              uint64_t v149 = v771;
              uint64_t v148 = v835;
              uint64_t v146 = v158;
              unint64_t v153 = v157;
              uint64_t v144 = v745;
              uint64_t v152 = v839;
              goto LABEL_207;
            }
            uint64_t v448 = ~v162;
            unint64_t v449 = (v163 + 1) & v448;
            unint64_t v153 = v157;
            if ((*(void *)(v164 + ((v449 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v449))
            {
              uint64_t v144 = v745;
              while (*(void *)(v165 + 8 * v449) != v160)
              {
                unint64_t v449 = (v449 + 1) & v448;
                if (((*(void *)(v164 + ((v449 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v449) & 1) == 0) {
                  goto LABEL_202;
                }
              }
              uint64_t v151 = v773;
              LOBYTE(v150) = v772;
              uint64_t v149 = v771;
              uint64_t v148 = v835;
              uint64_t v146 = v158;
              uint64_t v152 = v839;
              goto LABEL_207;
            }
          }
          else
          {
            unint64_t v153 = v157;
          }
          uint64_t v144 = v745;
          goto LABEL_202;
        }
        uint64_t v795 = *(void *)(v156 + 16);
        if (v795) {
          break;
        }
LABEL_208:
        if (++v144 == v804)
        {
          uint64_t v499 = v734;
          swift_bridgeObjectRelease_n();
          uint64_t v132 = v778;
          unint64_t v136 = v802;
          uint64_t v108 = v746;
          char v133 = v777;
          uint64_t v134 = v776;
          uint64_t v135 = v775;
          uint64_t v123 = v747;
          uint64_t v500 = v815;
          goto LABEL_222;
        }
      }
      uint64_t v745 = v144;
      uint64_t v812 = v156 + 32;
      v835 = v148;
      uint64_t v839 = v152;
      uint64_t v719 = v146;
      uint64_t v166 = v149;
      uint64_t v167 = v150;
      uint64_t v168 = v147;
      uint64_t v169 = v151;
      outlined copy of Text.Effect.Composition.Operation(v147, v146, v148, v149, v150, v151, v152, v153);
      swift_bridgeObjectRetain();
      uint64_t v696 = v155;
      uint64_t v715 = v154;
      uint64_t v771 = v166;
      uint64_t v772 = v167;
      uint64_t v773 = v169;
      unint64_t v711 = v153;
      outlined copy of Text.Effect.Composition.Operation(v168, v719, v835, v166, v167, v169, v839, v153);
      uint64_t v695 = v156;
      swift_bridgeObjectRetain();
      uint64_t v170 = 0;
      uint64_t v716 = v168;
      while (1)
      {
        Swift::Int v171 = (uint64_t *)(v812 + 88 * v170);
        uint64_t v172 = *v171;
        uint64_t v173 = v171[1];
        uint64_t v174 = (void *)v171[2];
        uint64_t v175 = v171[3];
        uint64_t v176 = v171[4];
        uint64_t v177 = v171[5];
        uint64_t v178 = v171[6];
        unint64_t v179 = v171[7];
        uint64_t v181 = v171[8];
        uint64_t v180 = v171[9];
        uint64_t v182 = v171[10];
        if (v179 >> 62)
        {
          if (v179 >> 62 == 1)
          {
LABEL_188:
            outlined consume of Text.Effect.Composition.Operation(v172, v173, v174, v175, v176, v177, v178, v179);
            goto LABEL_189;
          }
          uint64_t v770 = v171[7];
          uint64_t v183 = v170;
          v766 = v174;
          uint64_t v767 = v175;
          uint64_t v768 = v176;
          uint64_t v769 = v177;
          uint64_t v828 = v178;
          uint64_t v184 = *v859;
          if (!*(void *)(*v859 + 16)) {
            goto LABEL_181;
          }
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v172);
          Swift::Int v185 = Hasher._finalize()();
          uint64_t v186 = -1 << *(unsigned char *)(v184 + 32);
          unint64_t v187 = v185 & ~v186;
          uint64_t v188 = v184 + 56;
          if (((*(void *)(v184 + 56 + ((v187 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v187) & 1) == 0) {
            goto LABEL_181;
          }
          uint64_t v189 = *(void *)(v184 + 48);
          if (*(void *)(v189 + 8 * v187) == v172)
          {
            uint64_t v178 = v828;
            uint64_t v177 = v769;
            LOBYTE(v176) = v768;
            uint64_t v175 = v767;
            uint64_t v174 = v766;
LABEL_187:
            unint64_t v179 = v770;
            goto LABEL_188;
          }
          uint64_t v446 = ~v186;
          unint64_t v447 = (v187 + 1) & v446;
          if ((*(void *)(v188 + ((v447 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v447))
          {
            while (*(void *)(v189 + 8 * v447) != v172)
            {
              unint64_t v447 = (v447 + 1) & v446;
              if (((*(void *)(v188 + ((v447 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v447) & 1) == 0) {
                goto LABEL_181;
              }
            }
          }
          else
          {
LABEL_181:
            double v436 = v856;
            swift_beginAccess();
            uint64_t v437 = *v436;
            if (*(void *)(v437 + 16))
            {
              uint64_t v438 = specialized __RawDictionaryStorage.find<A>(_:)(v172);
              if (v439)
              {
                char v440 = *(void **)(*(void *)(v437 + 56) + 8 * v438);
                swift_endAccess();
                uint64_t v441 = v172;
                double v442 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v440) + 0x110);
                CGFloat v443 = v440;
                char v444 = v442();

                uint64_t v445 = v441;
                uint64_t v170 = v183;
                outlined consume of Text.Effect.Composition.Operation(v445, v173, v766, v767, v768, v769, v828, v770);
                if (v444) {
                  goto LABEL_274;
                }
                goto LABEL_189;
              }
            }
            swift_endAccess();
          }
          uint64_t v178 = v828;
          uint64_t v177 = v769;
          LOBYTE(v176) = v768;
          uint64_t v175 = v767;
          uint64_t v174 = v766;
          goto LABEL_187;
        }
        uint64_t v791 = *(void *)(v182 + 16);
        if (v791) {
          break;
        }
LABEL_189:
        if (++v170 == v795)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v467 = v719;
          uint64_t v468 = v835;
          uint64_t v469 = v771;
          char v470 = v772;
          uint64_t v471 = v773;
          uint64_t v472 = v839;
          unint64_t v473 = v711;
          outlined consume of Text.Effect.Composition.Operation(v716, v719, v835, v771, v772, v773, v839, v711);
          uint64_t v147 = v716;
          uint64_t v146 = v467;
          uint64_t v152 = v472;
          uint64_t v148 = v468;
          uint64_t v149 = v469;
          LOBYTE(v150) = v470;
          unint64_t v153 = v473;
          uint64_t v151 = v471;
          uint64_t v144 = v745;
          goto LABEL_207;
        }
      }
      uint64_t v660 = v170;
      uint64_t v810 = v182 + 32;
      uint64_t v190 = v182;
      uint64_t v828 = v178;
      uint64_t v191 = v176;
      uint64_t v192 = v175;
      uint64_t v193 = v174;
      uint64_t v832 = v172;
      uint64_t v194 = v177;
      swift_bridgeObjectRetain_n();
      uint64_t v691 = v190;
      uint64_t v692 = v180;
      uint64_t v693 = v181;
      uint64_t v694 = v173;
      v766 = v193;
      uint64_t v767 = v192;
      uint64_t v768 = v191;
      uint64_t v769 = v194;
      uint64_t v770 = v179;
      outlined copy of Text.Effect.Composition.Operation(v832, v173, v193, v192, v191, v194, v828, v179);
      uint64_t v195 = 0;
      while (1)
      {
        uint64_t v196 = (uint64_t *)(v810 + 88 * v195);
        uint64_t v198 = *v196;
        uint64_t v197 = v196[1];
        uint64_t v199 = (void *)v196[2];
        uint64_t v200 = v196[3];
        uint64_t v201 = v196[4];
        uint64_t v202 = v196[5];
        uint64_t v203 = v196[6];
        unint64_t v204 = v196[7];
        uint64_t v205 = v196[8];
        uint64_t v206 = v196[9];
        uint64_t v207 = v196[10];
        if (v204 >> 62)
        {
          if (v204 >> 62 == 1)
          {
            uint64_t v208 = v196[5];
LABEL_172:
            outlined consume of Text.Effect.Composition.Operation(v198, v197, v199, v200, v201, v208, v203, v204);
            goto LABEL_173;
          }
          uint64_t v744 = v195;
          uint64_t v759 = v205;
          uint64_t v760 = v197;
          v761 = v199;
          uint64_t v762 = v200;
          uint64_t v838 = v201;
          uint64_t v853 = v202;
          uint64_t v827 = v203;
          uint64_t v419 = *v859;
          if (!*(void *)(*v859 + 16)) {
            goto LABEL_165;
          }
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v198);
          Swift::Int v420 = Hasher._finalize()();
          uint64_t v421 = -1 << *(unsigned char *)(v419 + 32);
          unint64_t v422 = v420 & ~v421;
          uint64_t v423 = v419 + 56;
          if (((*(void *)(v419 + 56 + ((v422 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v422) & 1) == 0) {
            goto LABEL_165;
          }
          uint64_t v424 = *(void *)(v419 + 48);
          if (*(void *)(v424 + 8 * v422) == v198)
          {
            uint64_t v203 = v827;
            uint64_t v208 = v853;
            LOBYTE(v201) = v838;
            uint64_t v200 = v762;
            uint64_t v199 = v761;
            uint64_t v197 = v760;
            uint64_t v195 = v744;
            goto LABEL_172;
          }
          uint64_t v434 = ~v421;
          unint64_t v435 = (v422 + 1) & v434;
          if ((*(void *)(v423 + ((v435 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v435))
          {
            uint64_t v195 = v744;
            while (*(void *)(v424 + 8 * v435) != v198)
            {
              unint64_t v435 = (v435 + 1) & v434;
              if (((*(void *)(v423 + ((v435 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v435) & 1) == 0) {
                goto LABEL_166;
              }
            }
          }
          else
          {
LABEL_165:
            uint64_t v195 = v744;
LABEL_166:
            double v425 = v856;
            swift_beginAccess();
            uint64_t v426 = *v425;
            if (*(void *)(v426 + 16))
            {
              uint64_t v427 = specialized __RawDictionaryStorage.find<A>(_:)(v198);
              if (v428)
              {
                uint64_t v429 = *(void **)(*(void *)(v426 + 56) + 8 * v427);
                swift_endAccess();
                uint64_t v430 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v429) + 0x110);
                char v431 = v429;
                char v432 = v430();
                uint64_t v172 = v832;
                char v433 = v432;

                uint64_t v195 = v744;
                outlined consume of Text.Effect.Composition.Operation(v198, v760, v761, v762, v838, v853, v827, v204);
                if (v433) {
                  goto LABEL_273;
                }
                goto LABEL_174;
              }
            }
            swift_endAccess();
          }
          uint64_t v203 = v827;
          uint64_t v208 = v853;
          LOBYTE(v201) = v838;
          uint64_t v200 = v762;
          uint64_t v199 = v761;
          uint64_t v197 = v760;
          goto LABEL_172;
        }
        unint64_t v728 = v196[7];
        uint64_t v785 = *(void *)(v207 + 16);
        if (v785) {
          break;
        }
LABEL_173:
        uint64_t v172 = v832;
LABEL_174:
        if (++v195 == v791)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v178 = v828;
          uint64_t v173 = v694;
          uint64_t v170 = v660;
          unint64_t v179 = v770;
          LOBYTE(v176) = v768;
          uint64_t v177 = v769;
          uint64_t v175 = v767;
          uint64_t v174 = v766;
          goto LABEL_188;
        }
      }
      uint64_t v744 = v195;
      uint64_t v808 = v207 + 32;
      uint64_t v209 = v198;
      uint64_t v838 = v201;
      uint64_t v210 = v197;
      uint64_t v211 = v207;
      uint64_t v827 = v203;
      uint64_t v212 = v200;
      uint64_t v213 = v199;
      swift_bridgeObjectRetain_n();
      uint64_t v688 = v211;
      uint64_t v689 = v206;
      uint64_t v759 = v205;
      uint64_t v760 = v210;
      LOBYTE(v201) = v838;
      v761 = v213;
      uint64_t v762 = v212;
      outlined copy of Text.Effect.Composition.Operation(v209, v210, v213, v212, v838, v202, v827, v728);
      uint64_t v214 = 0;
      uint64_t v690 = v209;
      uint64_t v853 = v202;
      while (1)
      {
        uint64_t v215 = (uint64_t *)(v808 + 88 * v214);
        uint64_t v216 = *v215;
        uint64_t v217 = v215[1];
        uint64_t v219 = (void *)v215[2];
        uint64_t v218 = v215[3];
        uint64_t v220 = v215[4];
        uint64_t v221 = v215[5];
        uint64_t v222 = v215[6];
        unint64_t v223 = v215[7];
        uint64_t v224 = v215[8];
        uint64_t v225 = v215[9];
        uint64_t v226 = v215[10];
        if (!(v223 >> 62)) {
          break;
        }
        if (v223 >> 62 != 1)
        {
          uint64_t v823 = v215[5];
          uint64_t v824 = v222;
          uint64_t v739 = v214;
          uint64_t v758 = v218;
          char v227 = v220;
          uint64_t v228 = v216;
          if (!specialized Set.contains(_:)(v216, *v859))
          {
            uint64_t v229 = v856;
            swift_beginAccess();
            uint64_t v230 = *v229;
            if (*(void *)(v230 + 16))
            {
              uint64_t v231 = specialized __RawDictionaryStorage.find<A>(_:)(v228);
              if (v232)
              {
                uint64_t v233 = *(void **)(*(void *)(v230 + 56) + 8 * v231);
                swift_endAccess();
                uint64_t v869 = (*MEMORY[0x263F8EED0] & *v233) + 272;
                v868 = *(uint64_t (**)(void))v869;
                Swift::UInt64 v234 = v233;
                LODWORD(v869) = v868();

                outlined consume of Text.Effect.Composition.Operation(v228, v217, v219, v758, v227, v823, v824, v223);
                uint64_t v202 = v853;
                LOBYTE(v201) = v838;
                uint64_t v214 = v739;
                if (v869) {
                  goto LABEL_272;
                }
                goto LABEL_159;
              }
            }
            swift_endAccess();
          }
          LOBYTE(v220) = v227;
          uint64_t v218 = v758;
          uint64_t v216 = v228;
          uint64_t v202 = v853;
          LOBYTE(v201) = v838;
          uint64_t v214 = v739;
          uint64_t v222 = v824;
          uint64_t v221 = v823;
        }
LABEL_158:
        outlined consume of Text.Effect.Composition.Operation(v216, v217, v219, v218, v220, v221, v222, v223);
LABEL_159:
        if (++v214 == v785)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v208 = v202;
          unint64_t v204 = v728;
          uint64_t v203 = v827;
          uint64_t v198 = v690;
          uint64_t v195 = v744;
          uint64_t v200 = v762;
          uint64_t v197 = v760;
          uint64_t v199 = v761;
          goto LABEL_172;
        }
      }
      uint64_t v235 = *(void *)(v226 + 16);
      if (!v235) {
        goto LABEL_159;
      }
      uint64_t v739 = v214;
      uint64_t v713 = v226 + 32;
      uint64_t v236 = v219;
      uint64_t v237 = v224;
      uint64_t v823 = v221;
      uint64_t v238 = v216;
      uint64_t v824 = v222;
      v821 = v236;
      uint64_t v239 = v220;
      uint64_t v240 = v225;
      uint64_t v241 = v218;
      swift_bridgeObjectRetain_n();
      uint64_t v681 = v226;
      uint64_t v242 = v713;
      uint64_t v682 = v240;
      uint64_t v683 = v237;
      uint64_t v219 = v821;
      uint64_t v684 = v238;
      uint64_t v685 = v217;
      uint64_t v758 = v241;
      uint64_t v686 = v239;
      unint64_t v687 = v223;
      char v243 = v239;
      uint64_t v202 = v853;
      outlined copy of Text.Effect.Composition.Operation(v238, v217, v821, v241, v243, v823, v824, v223);
      uint64_t v244 = 0;
      uint64_t v710 = v235;
      while (1)
      {
        uint64_t v245 = (uint64_t *)(v242 + 88 * v244);
        uint64_t v246 = *v245;
        uint64_t v247 = v245[1];
        uint64_t v248 = (void *)v245[2];
        uint64_t v249 = v245[3];
        uint64_t v250 = v245[4];
        uint64_t v251 = v245[5];
        uint64_t v252 = v245[6];
        uint64_t v254 = v245[8];
        uint64_t v253 = v245[9];
        uint64_t v255 = v245[10];
        unint64_t v845 = v245[7];
        if (!(v845 >> 62)) {
          break;
        }
        if (v845 >> 62 != 1)
        {
          uint64_t v737 = v244;
          uint64_t v256 = v247;
          uint64_t v257 = v248;
          uint64_t v755 = v249;
          uint64_t v756 = v250;
          uint64_t v757 = v251;
          uint64_t v258 = v246;
          if (specialized Set.contains(_:)(v246, *v859))
          {
            uint64_t v251 = v757;
            LOBYTE(v250) = v756;
            uint64_t v249 = v755;
            uint64_t v248 = v257;
            uint64_t v247 = v256;
            uint64_t v246 = v258;
            uint64_t v235 = v710;
          }
          else
          {
            uint64_t v411 = v856;
            swift_beginAccess();
            uint64_t v412 = *v411;
            if (*(void *)(v412 + 16))
            {
              uint64_t v413 = specialized __RawDictionaryStorage.find<A>(_:)(v258);
              if (v414)
              {
                char v415 = *(void **)(*(void *)(v412 + 56) + 8 * v413);
                swift_endAccess();
                uint64_t v869 = (*MEMORY[0x263F8EED0] & *v415) + 272;
                uint64_t v416 = *(uint64_t (**)(void))v869;
                uint64_t v417 = v415;
                int v418 = v416();
                uint64_t v202 = v853;
                LODWORD(v869) = v418;

                outlined consume of Text.Effect.Composition.Operation(v258, v256, v257, v755, v756, v757, v252, v845);
                uint64_t v235 = v710;
                uint64_t v242 = v713;
                uint64_t v219 = v821;
                uint64_t v244 = v737;
                if (v869) {
                  goto LABEL_271;
                }
                goto LABEL_154;
              }
            }
            swift_endAccess();
            uint64_t v251 = v757;
            LOBYTE(v250) = v756;
            uint64_t v249 = v755;
            uint64_t v248 = v257;
            uint64_t v247 = v256;
            uint64_t v246 = v258;
            uint64_t v235 = v710;
            uint64_t v242 = v713;
          }
          uint64_t v219 = v821;
          uint64_t v244 = v737;
        }
LABEL_153:
        outlined consume of Text.Effect.Composition.Operation(v246, v247, v248, v249, v250, v251, v252, v845);
LABEL_154:
        if (++v244 == v235)
        {
          swift_bridgeObjectRelease_n();
          LOBYTE(v220) = v686;
          unint64_t v223 = v687;
          uint64_t v216 = v684;
          uint64_t v217 = v685;
          uint64_t v214 = v739;
          LOBYTE(v201) = v838;
          uint64_t v221 = v823;
          uint64_t v218 = v758;
          uint64_t v222 = v824;
          goto LABEL_158;
        }
      }
      uint64_t v727 = v252;
      uint64_t v774 = *(void *)(v255 + 16);
      if (!v774) {
        goto LABEL_154;
      }
      uint64_t v737 = v244;
      uint64_t v803 = v255 + 32;
      uint64_t v259 = v246;
      uint64_t v260 = v247;
      uint64_t v261 = v251;
      uint64_t v262 = v255;
      uint64_t v263 = v248;
      uint64_t v264 = v253;
      uint64_t v265 = v250;
      uint64_t v266 = v249;
      swift_bridgeObjectRetain_n();
      uint64_t v675 = v262;
      uint64_t v676 = v264;
      uint64_t v202 = v853;
      uint64_t v677 = v254;
      uint64_t v678 = v259;
      uint64_t v679 = v260;
      uint64_t v267 = v260;
      uint64_t v219 = v821;
      uint64_t v680 = v263;
      uint64_t v755 = v266;
      uint64_t v756 = v265;
      uint64_t v757 = v261;
      outlined copy of Text.Effect.Composition.Operation(v259, v267, v263, v266, v265, v261, v727, v845);
      uint64_t v268 = 0;
      while (1)
      {
        uint64_t v269 = (uint64_t *)(v803 + 88 * v268);
        uint64_t v270 = *v269;
        uint64_t v271 = v269[1];
        uint64_t v272 = (void *)v269[2];
        uint64_t v273 = v269[3];
        uint64_t v274 = v269[4];
        uint64_t v275 = v269[5];
        uint64_t v277 = v269[6];
        unint64_t v276 = v269[7];
        uint64_t v278 = v269[8];
        uint64_t v279 = v269[9];
        uint64_t v280 = v269[10];
        if (!(v276 >> 62)) {
          break;
        }
        if (v276 >> 62 != 1)
        {
          uint64_t v752 = v269[4];
          uint64_t v842 = v273;
          uint64_t v736 = v268;
          uint64_t v749 = v278;
          uint64_t v281 = v202;
          uint64_t v750 = v271;
          CGRect v751 = v272;
          uint64_t v282 = v270;
          if (!specialized Set.contains(_:)(v270, *v859))
          {
            uint64_t v283 = v856;
            swift_beginAccess();
            uint64_t v284 = *v283;
            if (*(void *)(v284 + 16))
            {
              uint64_t v285 = specialized __RawDictionaryStorage.find<A>(_:)(v282);
              if (v286)
              {
                uint64_t v287 = *(void **)(*(void *)(v284 + 56) + 8 * v285);
                swift_endAccess();
                uint64_t v869 = (*MEMORY[0x263F8EED0] & *v287) + 272;
                uint64_t v708 = v282;
                uint64_t v202 = v281;
                uint64_t v288 = *(uint64_t (**)(void))v869;
                uint64_t v289 = v287;
                LOBYTE(v288) = v288();

                outlined consume of Text.Effect.Composition.Operation(v708, v750, v751, v842, v752, v275, v277, v276);
                uint64_t v268 = v736;
                if (v288) {
                  goto LABEL_270;
                }
                goto LABEL_145;
              }
            }
            swift_endAccess();
          }
          uint64_t v272 = v751;
          uint64_t v271 = v750;
          uint64_t v270 = v282;
          uint64_t v202 = v281;
          uint64_t v268 = v736;
          uint64_t v273 = v842;
LABEL_143:
          LOBYTE(v274) = v752;
        }
        outlined consume of Text.Effect.Composition.Operation(v270, v271, v272, v273, v274, v275, v277, v276);
LABEL_145:
        if (++v268 == v774)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v252 = v727;
          uint64_t v251 = v757;
          uint64_t v247 = v679;
          uint64_t v248 = v680;
          uint64_t v246 = v678;
          uint64_t v235 = v710;
          uint64_t v242 = v713;
          uint64_t v244 = v737;
          LOBYTE(v250) = v756;
          uint64_t v249 = v755;
          goto LABEL_153;
        }
      }
      uint64_t v724 = v269[5];
      uint64_t v725 = v277;
      unint64_t v726 = v276;
      uint64_t v779 = *(void *)(v280 + 16);
      if (!v779)
      {
        uint64_t v219 = v821;
        goto LABEL_145;
      }
      uint64_t v736 = v268;
      uint64_t v805 = v280 + 32;
      uint64_t v290 = v270;
      uint64_t v291 = v271;
      uint64_t v292 = v272;
      uint64_t v293 = v273;
      uint64_t v294 = v278;
      uint64_t v295 = v279;
      uint64_t v296 = v274;
      swift_bridgeObjectRetain_n();
      uint64_t v668 = v280;
      uint64_t v669 = v295;
      uint64_t v749 = v294;
      uint64_t v273 = v293;
      uint64_t v708 = v290;
      uint64_t v750 = v291;
      CGRect v751 = v292;
      outlined copy of Text.Effect.Composition.Operation(v290, v291, v292, v293, v296, v724, v725, v726);
      uint64_t v297 = 0;
      uint64_t v752 = v296;
      uint64_t v842 = v293;
      while (1)
      {
        uint64_t v298 = (uint64_t *)(v805 + 88 * v297);
        uint64_t v299 = *v298;
        uint64_t v300 = v298[1];
        char v301 = (void *)v298[2];
        uint64_t v844 = v298[3];
        uint64_t v303 = v298[4];
        uint64_t v302 = v298[5];
        uint64_t v304 = v298[6];
        unint64_t v305 = v298[7];
        uint64_t v307 = v298[8];
        uint64_t v306 = v298[9];
        uint64_t v308 = v298[10];
        if (!(v305 >> 62)) {
          break;
        }
        if (v305 >> 62 != 1)
        {
          v843 = v301;
          uint64_t v820 = v304;
          uint64_t v753 = v308;
          uint64_t v738 = v297;
          uint64_t v309 = v300;
          uint64_t v754 = v302;
          uint64_t v310 = v299;
          if (!specialized Set.contains(_:)(v299, *v859))
          {
            uint64_t v311 = v856;
            swift_beginAccess();
            uint64_t v312 = *v311;
            if (*(void *)(v312 + 16))
            {
              uint64_t v313 = specialized __RawDictionaryStorage.find<A>(_:)(v310);
              if (v314)
              {
                CGFloat v315 = *(void **)(*(void *)(v312 + 56) + 8 * v313);
                swift_endAccess();
                uint64_t v316 = *MEMORY[0x263F8EED0] & *v315;
                uint64_t v709 = v303;
                uint64_t v317 = v310;
                uint64_t v318 = v202;
                uint64_t v319 = *(uint64_t (**)(void))(v316 + 272);
                CGFloat v320 = v315;
                char v321 = v319();
                uint64_t v202 = v318;
                char v322 = v321;

                outlined consume of Text.Effect.Composition.Operation(v317, v309, v843, v844, v709, v754, v820, v305);
                uint64_t v273 = v842;
                uint64_t v297 = v738;
                if (v322) {
                  goto LABEL_269;
                }
                goto LABEL_138;
              }
            }
            swift_endAccess();
          }
          uint64_t v302 = v754;
          uint64_t v300 = v309;
          uint64_t v299 = v310;
          uint64_t v273 = v842;
          uint64_t v297 = v738;
          uint64_t v304 = v820;
          char v301 = v843;
        }
LABEL_137:
        outlined consume of Text.Effect.Composition.Operation(v299, v300, v301, v844, v303, v302, v304, v305);
LABEL_138:
        if (++v297 == v779)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v219 = v821;
          unint64_t v276 = v726;
          uint64_t v277 = v725;
          uint64_t v275 = v724;
          uint64_t v272 = v751;
          uint64_t v271 = v750;
          uint64_t v270 = v708;
          uint64_t v268 = v736;
          goto LABEL_143;
        }
      }
      uint64_t v323 = *(void *)(v308 + 16);
      if (!v323) {
        goto LABEL_138;
      }
      uint64_t v738 = v297;
      uint64_t v819 = v308 + 32;
      uint64_t v763 = v323;
      uint64_t v820 = v304;
      v843 = v301;
      uint64_t v324 = v299;
      uint64_t v325 = v300;
      uint64_t v326 = v303;
      uint64_t v327 = v302;
      uint64_t v328 = v306;
      uint64_t v329 = v308;
      swift_bridgeObjectRetain_n();
      uint64_t v753 = v329;
      uint64_t v670 = v328;
      uint64_t v671 = v307;
      uint64_t v672 = v324;
      uint64_t v673 = v325;
      uint64_t v330 = v324;
      char v301 = v843;
      uint64_t v331 = v325;
      uint64_t v273 = v842;
      uint64_t v202 = v853;
      uint64_t v709 = v326;
      uint64_t v754 = v327;
      unint64_t v674 = v305;
      outlined copy of Text.Effect.Composition.Operation(v330, v331, v843, v844, v326, v327, v820, v305);
      uint64_t v332 = 0;
      while (1)
      {
        uint64_t v333 = (uint64_t *)(v819 + 88 * v332);
        uint64_t v334 = *v333;
        uint64_t v335 = v333[1];
        CGFloat v336 = (void *)v333[2];
        uint64_t v337 = v333[3];
        uint64_t v338 = v333[4];
        uint64_t v339 = v333[5];
        uint64_t v340 = v333[6];
        unint64_t v341 = v333[7];
        uint64_t v342 = v333[8];
        uint64_t v343 = v333[9];
        uint64_t v344 = v333[10];
        if (!(v341 >> 62)) {
          break;
        }
        if (v341 >> 62 == 1) {
          goto LABEL_132;
        }
        unint64_t v345 = v333[7];
        uint64_t v786 = v333[10];
        uint64_t v787 = v343;
        uint64_t v788 = v342;
        uint64_t v765 = v332;
        uint64_t v346 = v335;
        uint64_t v347 = v336;
        uint64_t v348 = v337;
        uint64_t v789 = v338;
        uint64_t v790 = v339;
        uint64_t v349 = v340;
        uint64_t v350 = v334;
        if (!specialized Set.contains(_:)(v334, *v859))
        {
          uint64_t v351 = v856;
          swift_beginAccess();
          uint64_t v352 = *v351;
          if (*(void *)(v352 + 16))
          {
            uint64_t v353 = specialized __RawDictionaryStorage.find<A>(_:)(v350);
            if (v354)
            {
              uint64_t v355 = *(void **)(*(void *)(v352 + 56) + 8 * v353);
              swift_endAccess();
              uint64_t v869 = (*MEMORY[0x263F8EED0] & *v355) + 272;
              unint64_t v741 = v345;
              uint64_t v356 = v273;
              CGFloat v357 = *(uint64_t (**)(void))v869;
              uint64_t v358 = v355;
              char v359 = v357();
              uint64_t v273 = v356;
              LOBYTE(v356) = v359;

              outlined consume of Text.Effect.Composition.Operation(v350, v346, v347, v348, v789, v790, v349, v741);
              uint64_t v332 = v765;
              char v301 = v843;
              if (v356) {
                goto LABEL_268;
              }
              goto LABEL_133;
            }
          }
          swift_endAccess();
        }
        uint64_t v340 = v349;
        uint64_t v339 = v790;
        LOBYTE(v338) = v789;
        uint64_t v337 = v348;
        CGFloat v336 = v347;
        uint64_t v335 = v346;
        uint64_t v334 = v350;
        uint64_t v332 = v765;
        char v301 = v843;
        unint64_t v341 = v345;
LABEL_132:
        outlined consume of Text.Effect.Composition.Operation(v334, v335, v336, v337, v338, v339, v340, v341);
LABEL_133:
        if (++v332 == v763)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v300 = v673;
          unint64_t v305 = v674;
          uint64_t v302 = v754;
          LOBYTE(v303) = v709;
          uint64_t v299 = v672;
          uint64_t v297 = v738;
          uint64_t v304 = v820;
          goto LABEL_137;
        }
      }
      uint64_t v840 = *(void *)(v344 + 16);
      if (!v840) {
        goto LABEL_133;
      }
      uint64_t v841 = v344 + 32;
      uint64_t v787 = v343;
      uint64_t v788 = v342;
      uint64_t v700 = v334;
      uint64_t v701 = v335;
      Swift::UInt64 v702 = v336;
      uint64_t v703 = v337;
      uint64_t v789 = v338;
      uint64_t v790 = v339;
      uint64_t v704 = v340;
      outlined copy of Text.Effect.Composition.Operation(v334, v335, v336, v337, v338, v339, v340, v341);
      uint64_t v786 = v344;
      swift_bridgeObjectRetain();
      uint64_t v360 = 0;
      unint64_t v741 = v341;
      uint64_t v765 = v332;
      while (1)
      {
        CGFloat v361 = (uint64_t *)(v841 + 88 * v360);
        uint64_t v363 = *v361;
        uint64_t v362 = v361[1];
        uint64_t v364 = (void *)v361[2];
        uint64_t v365 = v361[3];
        uint64_t v366 = v361[4];
        uint64_t v367 = v361[5];
        uint64_t v368 = v361[6];
        unint64_t v369 = v361[7];
        uint64_t v370 = v361[8];
        uint64_t v371 = v361[9];
        uint64_t v372 = v361[10];
        uint64_t v857 = v360;
        if (v369 >> 62)
        {
          if (v369 >> 62 != 1)
          {
            uint64_t v846 = v371;
            uint64_t v847 = v370;
            uint64_t v848 = v362;
            v849 = v364;
            uint64_t v850 = v365;
            uint64_t v852 = v366;
            uint64_t v851 = v367;
            uint64_t v854 = v368;
            unint64_t v855 = v369;
            if (!specialized Set.contains(_:)(v363, *v859))
            {
              char v373 = v856;
              swift_beginAccess();
              uint64_t v374 = *v373;
              if (*(void *)(v374 + 16))
              {
                uint64_t v375 = specialized __RawDictionaryStorage.find<A>(_:)(v363);
                if (v376)
                {
                  uint64_t v377 = *(void **)(*(void *)(v374 + 56) + 8 * v375);
                  swift_endAccess();
                  uint64_t v869 = (*MEMORY[0x263F8EED0] & *v377) + 272;
                  uint64_t v378 = v202;
                  uint64_t v379 = v363;
                  uint64_t v380 = *(uint64_t (**)(void))v869;
                  unint64_t v381 = v377;
                  char v382 = v380();
                  uint64_t v383 = v273;
                  unint64_t v384 = v741;
                  char v385 = v382;

                  uint64_t v386 = v379;
                  unint64_t v341 = v384;
                  uint64_t v273 = v383;
                  uint64_t v202 = v378;
                  outlined consume of Text.Effect.Composition.Operation(v386, v848, v849, v850, v852, v851, v854, v855);
                  if (v385) {
                    goto LABEL_267;
                  }
                  goto LABEL_128;
                }
              }
              swift_endAccess();
            }
            unint64_t v369 = v855;
            uint64_t v368 = v854;
            uint64_t v367 = v851;
            LOBYTE(v366) = v852;
            uint64_t v365 = v850;
            uint64_t v364 = v849;
            uint64_t v362 = v848;
          }
        }
        else
        {
          uint64_t v387 = *(void *)(v372 + 16);
          unint64_t v855 = v369;
          uint64_t v854 = v368;
          uint64_t v851 = v367;
          uint64_t v852 = v366;
          uint64_t v850 = v365;
          v849 = v364;
          uint64_t v848 = v362;
          uint64_t v764 = v363;
          uint64_t v847 = v370;
          uint64_t v846 = v371;
          if (v387)
          {
            uint64_t v864 = v387;
            uint64_t v388 = v372;
            uint64_t v389 = v367;
            char v390 = v366;
            uint64_t v391 = v363;
            uint64_t v392 = v365;
            double v393 = v364;
            uint64_t v394 = v362;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            outlined copy of Text.Effect.Composition.Operation(v391, v394, v393, v392, v390, v389, v854, v855);
            uint64_t v723 = v388;
            char v395 = (uint64_t *)(v388 + 56);
            while (1)
            {
              uint64_t v396 = v395[6];
              uint64_t v867 = v395[7];
              uint64_t v866 = v396;
              unint64_t v397 = v395[4];
              uint64_t v865 = v395[5];
              uint64_t v399 = v395[2];
              uint64_t v398 = v395[3];
              uint64_t v400 = *v395;
              v868 = (uint64_t (*)(void))v395[1];
              uint64_t v401 = *(v395 - 2);
              uint64_t v402 = (void *)*(v395 - 1);
              uint64_t v403 = *(v395 - 3);
              unint64_t v871 = v403;
              uint64_t v872 = v401;
              v873 = v402;
              *(void *)&long long v874 = v400;
              *((void *)&v874 + 1) = v868;
              uint64_t v875 = v399;
              *(void *)&long long v876 = v398;
              *((void *)&v876 + 1) = v397;
              uint64_t v877 = v865;
              uint64_t v878 = v396;
              uint64_t v879 = v867;
              outlined copy of Text.Effect.Composition.Operation(v403, v401, v402, v400, (char)v868, v399, v398, v397);
              uint64_t v404 = v870;
              LODWORD(v869) = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)(&v871, v861, v860, v862, v863);
              uint64_t v870 = v404;
              outlined consume of Text.Effect.Composition.Operation(v403, v401, v402, v400, (char)v868, v399, v398, v397);
              if (v869) {
                break;
              }
              v395 += 11;
              if (!--v864)
              {
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v202 = v853;
                uint64_t v273 = v842;
                char v301 = v843;
                unint64_t v341 = v741;
                uint64_t v332 = v765;
                goto LABEL_124;
              }
            }
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Text.Effect.Composition.Operation(v764, v848, v849, v850, v852, v851, v854, v855);
            uint64_t v202 = v853;
            uint64_t v273 = v842;
            char v301 = v843;
            unint64_t v341 = v741;
LABEL_267:
            swift_bridgeObjectRelease();
            outlined consume of Text.Effect.Composition.Operation(v700, v701, v702, v703, v789, v790, v704, v341);
LABEL_268:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v672, v673, v301, v844, v709, v754, v820, v674);
LABEL_269:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v708, v750, v751, v273, v752, v724, v725, v726);
            uint64_t v219 = v821;
LABEL_270:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v678, v679, v680, v755, v756, v757, v727, v845);
LABEL_271:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v684, v685, v219, v758, v686, v823, v824, v687);
            LOBYTE(v201) = v838;
LABEL_272:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v690, v760, v761, v762, v201, v202, v827, v728);
            uint64_t v172 = v832;
LABEL_273:
            swift_bridgeObjectRelease_n();
            outlined consume of Text.Effect.Composition.Operation(v172, v694, v766, v767, v768, v769, v828, v770);
LABEL_274:
            swift_bridgeObjectRelease_n();
            uint64_t v582 = v716;
            uint64_t v583 = v719;
            uint64_t v584 = v771;
            char v585 = v772;
            uint64_t v586 = v773;
            unint64_t v587 = v711;
            outlined consume of Text.Effect.Composition.Operation(v716, v719, v835, v771, v772, v773, v839, v711);
            outlined consume of Text.Effect.Composition.Operation(v582, v583, v835, v584, v585, v586, v839, v587);
LABEL_275:
            swift_bridgeObjectRelease_n();
            uint64_t v588 = v830;
            uint64_t v589 = v815;
            long long v590 = v775;
            uint64_t v591 = v776;
            char v592 = v777;
            uint64_t v593 = v778;
            unint64_t v594 = v802;
            outlined consume of Text.Effect.Composition.Operation(v830, v815, v775, v776, v777, v778, v734, v802);
            outlined consume of Text.Effect.Composition.Operation(v588, v589, v590, v591, v592, v593, v734, v594);
LABEL_276:
            swift_bridgeObjectRelease_n();
            uint64_t v595 = v806;
            uint64_t v596 = v780;
            uint64_t v597 = v781;
            char v598 = v782;
            uint64_t v599 = v783;
            unint64_t v600 = v784;
            outlined consume of Text.Effect.Composition.Operation(v806, v834, v780, v781, v782, v836, v783, v784);
            outlined consume of Text.Effect.Composition.Operation(v595, v834, v596, v597, v598, v836, v599, v600);
LABEL_277:
            swift_bridgeObjectRelease_n();
            uint64_t v601 = v831;
            uint64_t v602 = v809;
            uint64_t v603 = v792;
            char v604 = v705;
            uint64_t v605 = v714;
            unint64_t v606 = v793;
            outlined consume of Text.Effect.Composition.Operation(v809, v837, v792, v831, v705, v718, v714, v793);
            outlined consume of Text.Effect.Composition.Operation(v602, v837, v603, v601, v604, v718, v605, v606);
LABEL_278:
            swift_bridgeObjectRelease_n();
            uint64_t v607 = v796;
            uint64_t v608 = v797;
            char v609 = v798;
            uint64_t v610 = v799;
            uint64_t v611 = v800;
            unint64_t v612 = v801;
            outlined consume of Text.Effect.Composition.Operation(v833, v735, v796, v797, v798, v799, v800, v801);
            outlined consume of Text.Effect.Composition.Operation(v833, v735, v607, v608, v609, v610, v611, v612);
LABEL_279:
            uint64_t v613 = v707;
            swift_bridgeObjectRelease_n();
            uint64_t v614 = v720;
            uint64_t v615 = v721;
            char v616 = v722;
            outlined consume of Text.Layout.Line.Line(v720, v721, v722);
            swift_bridgeObjectRelease();
            uint64_t v618 = v663;
            uint64_t v617 = v664;
            (*v658)(v663, v659, v664);
            unint64_t v871 = v858;
            char v619 = RangeSet.contains(_:)();
            (*v657)(v618, v617);
            if (v619)
            {
              outlined consume of Text.Layout.Line.Line(v614, v615, v616);
              swift_bridgeObjectRelease();
              uint64_t v15 = v859;
              uint64_t v6 = v661;
              goto LABEL_5;
            }
            if (v858 >= *(void *)(*(void *)v656 + 16)) {
              goto LABEL_299;
            }
            unint64_t v620 = *(void *)(*(void *)v656 + 8 * v858 + 32);
            uint64_t v621 = v613;
            char v622 = v722;
            switch(v620 >> 62)
            {
              case 1uLL:
              case 2uLL:
              case 3uLL:
                CGRect v623 = (void *)(v620 & 0x3FFFFFFFFFFFFFFFLL);
                v620 &= 0x3FFFFFFFFFFFFFFFuLL;
                break;
              default:
                CGRect v623 = (void *)(v620 & 0x3FFFFFFFFFFFFFFFLL);
                break;
            }
            Swift::UInt64 v627 = v720;
            unint64_t v871 = (unint64_t)v720;
            uint64_t v628 = v721;
            uint64_t v872 = v721;
            LOBYTE(v873) = v722;
            long long v874 = v667;
            LODWORD(v875) = v666;
            long long v876 = v665;
            uint64_t v877 = v621;
            outlined copy of Text.Layout.Line.Line(v720, v721, v722);
            id v629 = v623;
            swift_bridgeObjectRetain();
            double v630 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)((uint64_t *)&v871, v858, 0);
            CGFloat v632 = v631;
            CGFloat v634 = v633;
            CGFloat v636 = v635;
            outlined consume of Text.Layout.Line.Line(v627, v628, v622);
            swift_bridgeObjectRelease();
            TextRenderLayer.pixelLength.getter();
            double v638 = v637;
            v883.origin.CGFloat x = v630;
            v883.origin.CGFloat y = v632;
            v883.size.CGFloat width = v634;
            v883.size.CGFloat height = v636;
            double v639 = v638 * floor(CGRectGetMinX(v883) / v638);
            v884.origin.CGFloat x = v630;
            v884.origin.CGFloat y = v632;
            v884.size.CGFloat width = v634;
            v884.size.CGFloat height = v636;
            double v640 = v638 * ceil(CGRectGetMaxX(v884) / v638);
            v885.origin.CGFloat x = v630;
            v885.origin.CGFloat y = v632;
            v885.size.CGFloat width = v634;
            v885.size.CGFloat height = v636;
            double v641 = v638 * floor(CGRectGetMinY(v885) / v638);
            v886.origin.CGFloat x = v630;
            v886.origin.CGFloat y = v632;
            v886.size.CGFloat width = v634;
            v886.size.CGFloat height = v636;
            double v642 = v640 - v639;
            double v643 = v638 * ceil(CGRectGetMaxY(v886) / v638) - v641;
            uint64_t v644 = MEMORY[0x24C527E00](v654);
            if (v644)
            {
              CGRect v645 = (void *)v644;
              LayerGeometryObserver.clip(bounds:for:)((void *)v620, v639, v641, v640 - v639, v643);
              double v639 = v646;
              double v641 = v647;
              double v642 = v648;
              double v643 = v649;
            }
            uint64_t v6 = v661;
            objc_msgSend((id)v620, sel_bounds);
            v889.origin.CGFloat x = v639;
            v889.origin.CGFloat y = v641;
            v889.size.CGFloat width = v642;
            v889.size.CGFloat height = v643;
            if (!CGRectEqualToRect(v887, v889))
            {
              objc_msgSend((id)v620, sel_setBounds_, v639, v641, v642, v643);
              objc_msgSend((id)v620, sel_setNeedsDisplay);
            }
            if (v858 >= *(void *)(*(void *)v653 + 16)) {
              goto LABEL_300;
            }
            uint64_t v650 = *(void *)v653 + 16 * v858;
            double v651 = v639 + *(double *)(v650 + 32);
            double v652 = v641 + *(double *)(v650 + 40);
            objc_msgSend((id)v620, sel_frame);
            v890.origin.CGFloat x = v651;
            v890.origin.CGFloat y = v652;
            v890.size.CGFloat width = v642;
            v890.size.CGFloat height = v643;
            if (!CGRectEqualToRect(v888, v890)) {
              objc_msgSend((id)v620, sel_setFrame_, v651, v652, v642, v643);
            }
            if (objc_msgSend((id)v620, sel_isHidden)) {
              objc_msgSend((id)v620, sel_setHidden_, 0);
            }
            outlined consume of Text.Layout.Line.Line(v720, v721, v722);

            swift_bridgeObjectRelease();
            uint64_t v15 = v859;
LABEL_5:
            if (++v858 == v731)
            {
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              return outlined release of TextRenderLayer.Layout?(v880, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
            }
            goto LABEL_6;
          }
          uint64_t v405 = v367;
          uint64_t v406 = v365;
          CGFloat v407 = v364;
          uint64_t v408 = v362;
          swift_retain();
          swift_retain();
          uint64_t v409 = v408;
          unint64_t v341 = v741;
          uint64_t v410 = v406;
          char v301 = v843;
          uint64_t v202 = v853;
          uint64_t v273 = v842;
          outlined copy of Text.Effect.Composition.Operation(v363, v409, v407, v410, v852, v405, v854, v855);
          swift_bridgeObjectRetain();
          swift_release();
LABEL_124:
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v369 = v855;
          uint64_t v368 = v854;
          uint64_t v367 = v851;
          LOBYTE(v366) = v852;
          uint64_t v365 = v850;
          uint64_t v364 = v849;
          uint64_t v362 = v848;
          uint64_t v363 = v764;
        }
        outlined consume of Text.Effect.Composition.Operation(v363, v362, v364, v365, v366, v367, v368, v369);
LABEL_128:
        uint64_t v360 = v857 + 1;
        if (v857 + 1 == v840)
        {
          swift_bridgeObjectRelease();
          uint64_t v337 = v703;
          uint64_t v340 = v704;
          uint64_t v339 = v790;
          LOBYTE(v338) = v789;
          uint64_t v335 = v701;
          CGFloat v336 = v702;
          uint64_t v334 = v700;
          goto LABEL_132;
        }
      }
    }
  }
  return result;
}

uint64_t TextEffectsAnimationController.state(for:time:)@<X0>(Swift::UInt64 a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  double v7 = *a2;
  uint64_t v8 = (uint64_t *)(v3 + 64);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 64);
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v11)
    {
      uint64_t v86 = v4;
      uint64_t v84 = v8;
      uint64_t v12 = *(void *)(v9 + 56) + 120 * v10;
      uint64_t v13 = *(void *)v12;
      double v14 = *(double *)(v12 + 8);
      double v15 = *(double *)(v12 + 16);
      char v79 = *(unsigned char *)(v12 + 24);
      char v16 = *(unsigned char *)(v12 + 25);
      double v17 = *(double *)(v12 + 32);
      int v82 = *(unsigned __int8 *)(v12 + 40);
      uint64_t v18 = *(void *)(v12 + 56);
      uint64_t v19 = *(void *)(v12 + 72);
      int v20 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v21 = *(void *)(v12 + 88);
      uint64_t v92 = *(void *)(v12 + 64);
      uint64_t v93 = *(void *)(v12 + 96);
      uint64_t v22 = *(void *)(v12 + 104);
      int v23 = *(unsigned __int8 *)(v12 + 112);
      swift_retain_n();
      char v80 = v16;
      Swift::UInt64 v85 = a1;
      if (v20 == 1)
      {
        int v91 = 1;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v92, v19, 1);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v93, v22, v23);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v93, v22, v23);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v92, v19, 1);
        uint64_t v83 = v18;
        swift_release();
        uint64_t v24 = v21;
        swift_release();
        uint64_t v25 = v22;
        uint64_t v81 = v19;
        if (!v23) {
          goto LABEL_5;
        }
      }
      else
      {
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v92, v19, 0);
        int v90 = v23;
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v93, v22, v23);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v21, v93, v22, v23);
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v18, v92, v19, 0);
        uint64_t v48 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(a1, v18, v92, v19);
        uint64_t v49 = v19;
        uint64_t v51 = v50;
        uint64_t v52 = v18;
        uint64_t v54 = v53;
        uint64_t v55 = a1;
        int v57 = v56 & 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v48, v51, v54, v57);
        uint64_t v58 = v52;
        uint64_t v24 = v21;
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v58, v92, v49, 0);
        swift_beginAccess();
        outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v48, v51, v54, v57);
        specialized TextEffectsAnimationController.TimingMap.update(_:body:)(v55, v84, v48, v51, v54, v57);
        swift_endAccess();
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v48, v51, v54, v57);
        int v91 = v57;
        outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v48, v51, v54, v57);
        uint64_t v83 = v48;
        uint64_t v92 = v51;
        uint64_t v25 = v22;
        uint64_t v81 = v54;
        if (!v90)
        {
LABEL_5:
          uint64_t v26 = v86;
          uint64_t v27 = v25;
          uint64_t v28 = TextEffectsAnimationController.phaseConfiguration(with:phase:configuration:)(v85, v24, v93, v25);
          uint64_t v30 = v29;
          uint64_t v32 = v31;
          int v34 = v33 & 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v30, v32, v34);
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v24, v93, v27, 0);
          swift_beginAccess();
          outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v30, v32, v34);
          specialized TextEffectsAnimationController.TimingMap.update(_:body:)(v85, v84, v28, v30, v32, v34);
          swift_endAccess();
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v30, v32, v34);
          int v89 = v34;
          outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v30, v32, v34);
          uint64_t v24 = v28;
          uint64_t v93 = v30;
          uint64_t v35 = v32;
          char v36 = v80;
          uint64_t v37 = v83;
          uint64_t v87 = v24;
          uint64_t v88 = v35;
          if ((v79 & 1) == 0) {
            goto LABEL_6;
          }
          goto LABEL_17;
        }
      }
      swift_release();
      swift_release();
      int v89 = 1;
      char v36 = v80;
      uint64_t v37 = v83;
      uint64_t v26 = v86;
      uint64_t v87 = v24;
      uint64_t v88 = v25;
      if ((v79 & 1) == 0)
      {
LABEL_6:
        swift_release();
        int v38 = v82;
        double v39 = 0.0;
        if (v82) {
          goto LABEL_7;
        }
        goto LABEL_26;
      }
LABEL_17:
      if (v91)
      {
        char v59 = v36;
        uint64_t v60 = v92;
        swift_retain();
        swift_retain();
        if (!v89)
        {
LABEL_19:
          uint64_t v61 = 0;
          uint64_t v62 = 0;
LABEL_24:
          *(double *)&uint64_t v63 = COERCE_DOUBLE(TextEffectsAnimationController.duration(with:from:to:variant:)(v85, v37, v60, v61, v62, v59));
          char v65 = v64;
          char v66 = v64 & 1;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_beginAccess();
          TextEffectsAnimationController.TimingMap.resolve(_:duration:)(v85, v63, v66);
          swift_endAccess();
          swift_release();
          if (v65)
          {
            char v36 = v59;
            uint64_t v37 = v83;
            int v38 = v82;
            if ((v36 & 1) == 0)
            {
              swift_release();
              char v40 = 1;
              double v15 = 1.0;
              double v14 = 0.0;
              double v39 = 0.0;
              double v7 = 0.0;
              uint64_t v13 = 0;
              goto LABEL_37;
            }
            char v40 = 1;
            double v39 = 0.0;
            double v15 = 1.0;
            double v7 = 0.0;
            uint64_t v13 = 0;
            uint64_t v26 = v86;
            goto LABEL_30;
          }
          double v15 = *(double *)&v63;
          char v36 = v59;
          uint64_t v37 = v83;
          int v38 = v82;
          uint64_t v26 = v86;
          double v39 = 0.0;
          if (v82)
          {
LABEL_7:
            if (v38 == 1)
            {
              char v40 = 0;
              double v39 = v17;
              if (v36) {
                goto LABEL_30;
              }
            }
            else
            {
              char v40 = 1;
              if (v36) {
                goto LABEL_30;
              }
            }
LABEL_27:
            swift_release();
            goto LABEL_37;
          }
LABEL_26:
          char v40 = 1;
          double v7 = v17;
          if ((v36 & 1) == 0) {
            goto LABEL_27;
          }
LABEL_30:
          swift_beginAccess();
          Swift::Int v67 = Text.Effect.Keyframes.validTransform(_:)(v85, *(void *)(v26 + 112));
          if (v67)
          {
            uint64_t v68 = v67;
            *(double *)&uint64_t v69 = COERCE_DOUBLE((*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v67) + 0x108))());
            char v71 = v70;

            swift_release();
            double v72 = *(double *)&v69;
            int v38 = v82;
            if (v71) {
              double v72 = 0.5;
            }
          }
          else
          {
            swift_release();
            double v72 = 0.5;
          }
          double v14 = v7 - v15 * v72;
LABEL_37:
          if (v38) {
            char v73 = 2;
          }
          else {
            char v73 = 3;
          }
          if (v91)
          {
            uint64_t v74 = v92;
            swift_retain();
            swift_retain();
            uint64_t v75 = v37;
            if (!v89)
            {
LABEL_42:
              uint64_t v76 = 0;
              uint64_t v77 = 0;
              uint64_t v78 = v87;
LABEL_45:
              *(unsigned char *)a3 = v36;
              *(void *)(a3 + 8) = v13;
              *(double *)(a3 + 16) = v14;
              *(double *)(a3 + 24) = v7;
              *(double *)(a3 + 32) = v39;
              *(unsigned char *)(a3 + 40) = v40;
              *(double *)(a3 + 48) = v15;
              *(unsigned char *)(a3 + 56) = v73;
              *(void *)(a3 + 64) = v75;
              *(void *)(a3 + 72) = v74;
              *(void *)(a3 + 80) = v76;
              *(void *)(a3 + 88) = v77;
              swift_release();
              outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v37, v92, v81, v91);
              return outlined consume of TextEffectsAnimationController.Timing.PhaseConfiguration(v78, v93, v88, v89);
            }
          }
          else
          {
            uint64_t v75 = 0;
            uint64_t v74 = 0;
            if (!v89) {
              goto LABEL_42;
            }
          }
          uint64_t v77 = v93;
          swift_retain();
          uint64_t v78 = v87;
          swift_retain();
          uint64_t v76 = v87;
          goto LABEL_45;
        }
      }
      else
      {
        char v59 = v36;
        uint64_t v37 = 0;
        uint64_t v60 = 0;
        if (!v89) {
          goto LABEL_19;
        }
      }
      uint64_t v62 = v93;
      swift_retain();
      swift_retain();
      uint64_t v61 = v24;
      goto LABEL_24;
    }
  }
  swift_beginAccess();
  uint64_t v41 = *(void *)(v4 + 88);
  if (*(void *)(v41 + 16) && (uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v43 & 1) != 0))
  {
    uint64_t v44 = (uint64_t *)(*(void *)(v41 + 56) + 16 * v42);
    uint64_t v45 = *v44;
    uint64_t v46 = v44[1];
    swift_endAccess();
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = v45;
  *(void *)(a3 + 72) = v46;
  *(void *)(a3 + 80) = v45;
  *(void *)(a3 + 88) = v46;
  swift_retain();
  return swift_retain();
}

void TextRenderLayer.updateEffect(identifiers:)(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers;
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers);
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Set.formSymmetricDifference(_:)(v4);
  Swift::Int v5 = v17;
  *(void *)(v1 + v3) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  TextRenderLayer.updateActive(animations:)(v17);
  if (*(void *)(*(void *)(v1 + v3) + 16) <= *(void *)(v17 + 16) >> 3)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v10);
    swift_bridgeObjectRelease();
    if (*(void *)(v17 + 16)) {
      goto LABEL_3;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v6 = swift_bridgeObjectRetain();
  Swift::Int v5 = specialized _NativeSet.subtracting<A>(_:)(v6, v17);
  swift_bridgeObjectRelease();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
  swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)(v7 + 72) + 16);
  closure #1 in TextEffectsAnimationController.invalidateAnimations(_:)(v7, v5);
  uint64_t v9 = *(void *)(*(void *)(v7 + 72) + 16);
  if (v8)
  {
    if (!v9) {
      TextEffectsAnimationController.clearDisplayLink()();
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v9) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v7 + 40)) {
    goto LABEL_14;
  }
  *(unsigned char *)(v7 + 40) = 1;
  *(CFTimeInterval *)(v7 + 56) = CACurrentMediaTime();
  if (TextEffectsAnimationController.startExternalDisplayLink()() || *(void *)(v7 + 48)) {
    goto LABEL_14;
  }
  id v11 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v7, sel_displayLink_);
  uint64_t v12 = *(void **)(v7 + 48);
  *(void *)(v7 + 48) = v11;

  uint64_t v13 = *(void **)(v7 + 48);
  if (v13)
  {
    double v14 = self;
    id v15 = v13;
    id v16 = objc_msgSend(v14, sel_mainRunLoop);
    objc_msgSend(v15, sel_addToRunLoop_forMode_, v16, *MEMORY[0x263EFF588]);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t TextRenderLayer.hasChanged(_:)(void *a1)
{
  if (*(char *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags) < 0)
  {
    id v14 = a1;
    specialized RawTextLayout.init(_:)(v14, &v17);
    uint64_t v15 = v17;

    uint64_t v16 = v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout;
    *(void *)uint64_t v16 = v15;
    *(CGPoint *)(v16 + 8) = v18;
    *(CGSize *)(v16 + 24) = v19;
  }
  else
  {
    uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment);
    if (v2) {
      BOOL v3 = v2 == a1;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3) {
      return 0;
    }
    id v4 = a1;
    specialized RawTextLayout.init(_:)(v4, &v17);
    uint64_t v5 = v17;
    CGPoint v6 = v18;
    CGSize v7 = v19;

    uint64_t v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout);
    if (*v8)
    {
      CGFloat v10 = *((double *)v8 + 3);
      CGFloat v9 = *((double *)v8 + 4);
      CGFloat v12 = *((double *)v8 + 1);
      CGFloat v11 = *((double *)v8 + 2);
      if (specialized static Array<A>.== infix(_:_:)(*v8, v5))
      {
        v21.origin = v6;
        v21.size = v7;
        v20.origin.CGFloat x = v12;
        v20.origin.CGFloat y = v11;
        v20.size.CGFloat width = v10;
        v20.size.CGFloat height = v9;
        if (CGRectEqualToRect(v20, v21))
        {
          outlined release of LinearGradient((uint64_t)&v17);
          return 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    *uint64_t v8 = v5;
    *(CGPoint *)(v8 + 1) = v6;
    *(CGSize *)(v8 + 3) = v7;
  }
  swift_bridgeObjectRelease();
  return 1;
}

void TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  CGPoint v6 = v5;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v116 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version] = a4;
  uint64_t v15 = &v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
  *uint64_t v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(a1, sel_textLayoutManager);
  uint64_t v17 = 0;
  if (v16)
  {
    CGPoint v18 = v16;
    id v19 = objc_msgSend(v16, sel_textContainer);

    if (v19)
    {
      objc_msgSend(v19, sel_lineFragmentPadding);
      uint64_t v17 = v20;
    }
  }
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutLineFragmentPadding] = v17;
  CGRect v21 = &v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  CGFloat v22 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  CGFloat v23 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8];
  CGFloat v24 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 16];
  CGFloat v25 = *(double *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 24];
  objc_msgSend(a1, sel_layoutFragmentFrame);
  v157.origin.CGFloat x = v26;
  v157.origin.CGFloat y = v27;
  v157.size.CGFloat width = v28;
  v157.size.CGFloat height = v29;
  v156.origin.CGFloat x = v22;
  v156.origin.CGFloat y = v23;
  v156.size.CGFloat width = v24;
  v156.size.CGFloat height = v25;
  BOOL v30 = CGRectEqualToRect(v156, v157);
  objc_msgSend(a1, sel_layoutFragmentFrame);
  *CGRect v21 = v31;
  v21[1] = v32;
  _OWORD v21[2] = v33;
  v21[3] = v34;
  uint64_t v35 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags;
  uint64_t v117 = v13;
  if (!v30)
  {
    int v36 = v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags];
    if ((~v36 & 6) != 0)
    {
      v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = v36 | 6;
      uint64_t v35 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags;
    }
  }
  v6[v35] |= 0x20u;
  objc_msgSend(v6, sel_setNeedsLayout);
  int v37 = TextRenderLayer.hasChanged(_:)(a1);
  char v38 = v37;
  if ((v37 & 1) == 0)
  {
    _sypSgWObTm_1((uint64_t)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)&v126, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1((uint64_t)&v126, (uint64_t)&v145, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    if (_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg((uint64_t *)&v145) == 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = MEMORY[0x263F8EE88];
      uint64_t v58 = MEMORY[0x263F8EE80];
      char v59 = (void *)MEMORY[0x263F8EE80];
      uint64_t v60 = MEMORY[0x263F8EE80];
      uint64_t v61 = (void *)MEMORY[0x263F8EE80];
      uint64_t v62 = MEMORY[0x263F8EE80];
    }
    else
    {
      uint64_t v60 = v149;
      uint64_t v61 = v150;
      uint64_t v62 = v151;
      uint64_t v57 = v152;
      uint64_t v58 = v153;
      char v59 = v154;
      uint64_t v56 = v155;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
LABEL_27:
    *(void *)a5 = v60;
    *(void *)(a5 + 8) = v61;
    *(void *)(a5 + 16) = v62;
    *(void *)(a5 + 24) = v57;
    *(void *)(a5 + 32) = v58;
    *(void *)(a5 + 40) = v59;
    *(void *)(a5 + 48) = v56;
    *(unsigned char *)(a5 + 56) = v38 & 1;
    return;
  }
  uint64_t v110 = v35;
  uint64_t v111 = a5;
  uint64_t v109 = v12;
  int v112 = v37;
  double v39 = *(void **)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment];
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment] = a1;

  id v40 = a1;
  Text.Layout.init(_:)(v40, (uint64_t)&v145);
  uint64_t v41 = v145;
  int v42 = BYTE8(v145);
  char v43 = v146;
  id v44 = v40;
  swift_bridgeObjectRetain();
  specialized Text.Effect.RenderSegmentation.init(layout:fragment:)((uint64_t *)&v145, v44);
  uint64_t v108 = v45;
  uint64_t v46 = v41;
  uint64_t v126 = v41;
  int v114 = v42;
  char v127 = v42;
  uint64_t v115 = v43;
  unint64_t v129 = v43;
  Text.Layout.effectsOrderAndMap.getter(&v145);
  long long v47 = v145;
  uint64_t v49 = v146;
  CFIndex v48 = v147;
  uint64_t v123 = *((void *)&v145 + 1);
  uint64_t v124 = v146;
  long long v125 = v147;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v50 = swift_bridgeObjectRetain();
  uint64_t v107 = v47;
  uint64_t v106 = specialized Text.Effect.KeyframeSequence.init(order:map:)(v50, *((uint64_t *)&v47 + 1), v49);
  uint64_t v113 = v44;
  id v51 = objc_msgSend(v44, sel_textLineFragments);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
  unint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v52 >> 62))
  {
    if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    CFAttributedStringRef v55 = (const __CFAttributedString *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F086A0]), sel_init);
LABEL_21:
    CFIndex Length = CFAttributedStringGetLength(v55);
    uint64_t v120 = MEMORY[0x263F8EE80];
    uint64_t v121 = (void *)MEMORY[0x263F8EE80];
    uint64_t v122 = Length;
    *(void *)&long long v145 = v46;
    BYTE8(v145) = v114;
    uint64_t v146 = v115;
    CFAttributedStringRef v65 = v55;
    char v66 = v113;
    specialized Text.Effect.KeyframeSequence.gather(into:fragment:layout:attributedString:map:segmentation:)(&v120, v113, (uint64_t)&v145, v65, *((uint64_t *)&v47 + 1), (uint64_t)v49, v48, v106);
    CFAttributedStringRef v105 = v65;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = v120;
    uint64_t v68 = v121;
    uint64_t v106 = v122;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v69 = objc_msgSend(v66, sel_textLayoutManager);
    uint64_t v70 = 0;
    if (v69)
    {
      char v71 = v69;
      id v72 = objc_msgSend(v69, sel_textContainer);

      if (v72)
      {
        objc_msgSend(v72, sel_size);
      }
    }
    specialized Text.Effect.PartialMap.validate(keyframes:size:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v46 + 16))
    {
      char v73 = *(unsigned char *)(v46 + 48);
      int v74 = *(_DWORD *)(v46 + 72);
      long long v145 = *(_OWORD *)(v46 + 32);
      LOBYTE(v146) = v73;
      long long v147 = *(_OWORD *)(v46 + 56);
      int v148 = v74;
      Text.Layout.Line.horizontalAlignmentFactor.getter();
      uint64_t v70 = v75;
    }
    uint64_t v77 = v123;
    uint64_t v76 = v124;
    uint64_t v78 = *((void *)&v125 + 1);
    uint64_t v103 = v125;
    uint64_t v104 = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double v79 = NSTextLayoutFragment.drawingInsets.getter();
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    uint64_t v86 = *MEMORY[0x263F8E218];
    uint64_t v113 = v68;
    uint64_t v87 = v116;
    uint64_t v88 = v117;
    uint64_t v89 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 104))(v116, v86, v109);
    TextRenderLayer.pixelLength.getter();
    double v91 = v90;
    *(double *)&long long v145 = v79;
    uint64_t v126 = v81;
    uint64_t v118 = v83;
    uint64_t v119 = v85;
    specialized FloatingPoint.round(_:toMultipleOf:)(v87, v90);
    specialized FloatingPoint.round(_:toMultipleOf:)(v87, v91);
    specialized FloatingPoint.round(_:toMultipleOf:)(v87, v91);
    specialized FloatingPoint.round(_:toMultipleOf:)(v87, v91);
    uint64_t v92 = v145;
    uint64_t v93 = v126;
    uint64_t v94 = v118;
    uint64_t v95 = v119;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v89);
    uint64_t v126 = v104;
    char v127 = v114;
    *(_DWORD *)uint64_t v128 = v119;
    *(_DWORD *)&v128[3] = *(_DWORD *)((char *)&v119 + 3);
    unint64_t v129 = v115;
    uint64_t v130 = v70;
    uint64_t v131 = v108;
    uint64_t v132 = v107;
    uint64_t v133 = v77;
    uint64_t v134 = v76;
    uint64_t v135 = v103;
    uint64_t v136 = v78;
    uint64_t v137 = v67;
    unint64_t v138 = v113;
    CFAttributedStringRef v96 = v105;
    uint64_t v139 = v106;
    uint64_t v140 = v92;
    uint64_t v141 = v93;
    uint64_t v142 = v94;
    uint64_t v143 = v95;
    CFAttributedStringRef v144 = v105;
    _ViewInputs.base.modify(&v126, v97);
    uint64_t v98 = (uint64_t)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout];
    _sypSgWObTm_1((uint64_t)&v6[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)&v145, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    _sypSgWObTm_1((uint64_t)&v126, v98, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    CFAttributedStringRef v99 = v96;
    outlined release of TextRenderLayer.Layout?(&v145, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    uint64_t v60 = v123;
    uint64_t v100 = swift_bridgeObjectRetain();
    uint64_t v101 = specialized Set.init<A>(_:)(v100);
    v6[v110] = v6[v110] & 0x62 | 0xD;
    objc_msgSend(v6, sel_setNeedsLayout);
    TextRenderLayer.updateEffect(identifiers:)(v101);
    swift_beginAccess();
    uint64_t v102 = swift_bridgeObjectRetain();
    specialized Set.formUnion<A>(_:)(v102);
    swift_endAccess();
    swift_bridgeObjectRelease();

    uint64_t v61 = v124;
    uint64_t v57 = *((void *)&v125 + 1);
    uint64_t v62 = v125;
    uint64_t v58 = v120;
    char v59 = v121;
    uint64_t v56 = v122;
    char v38 = v112;
    a5 = v111;
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v52 & 0xC000000000000001) != 0)
  {
    id v53 = (id)MEMORY[0x24C523D60](0, v52);
LABEL_13:
    uint64_t v54 = v53;
    swift_bridgeObjectRelease();
    CFAttributedStringRef v55 = (const __CFAttributedString *)objc_msgSend(v54, sel_attributedString);

    if (v55) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v53 = *(id *)(v52 + 32);
    goto LABEL_13;
  }
  __break(1u);
}

double NSTextLayoutFragment.drawingInsets.getter()
{
  objc_msgSend(v0, sel_layoutFragmentFrame);
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  objc_msgSend(v0, sel_renderingSurfaceBounds);
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  double MinY = CGRectGetMinY(v12);
  v13.origin.CGFloat x = 0.0;
  v13.origin.CGFloat y = 0.0;
  v13.size.CGFloat width = v2;
  v13.size.CGFloat height = v4;
  double v11 = fmin(MinY - CGRectGetMinY(v13), 0.0);
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGRectGetMinX(v14);
  v15.origin.CGFloat x = 0.0;
  v15.origin.CGFloat y = 0.0;
  v15.size.CGFloat width = v2;
  v15.size.CGFloat height = v4;
  CGRectGetMinX(v15);
  v16.origin.CGFloat x = 0.0;
  v16.origin.CGFloat y = 0.0;
  v16.size.CGFloat width = v2;
  v16.size.CGFloat height = v4;
  CGRectGetMaxY(v16);
  v17.origin.CGFloat x = x;
  v17.origin.CGFloat y = y;
  v17.size.CGFloat width = width;
  v17.size.CGFloat height = height;
  CGRectGetMaxY(v17);
  v18.origin.CGFloat y = 0.0;
  v18.origin.CGFloat x = 0.0;
  v18.size.CGFloat width = v2;
  v18.size.CGFloat height = v4;
  CGRectGetMaxX(v18);
  v19.origin.CGFloat x = x;
  v19.origin.CGFloat y = y;
  v19.size.CGFloat width = width;
  v19.size.CGFloat height = height;
  CGRectGetMaxX(v19);
  return v11;
}

void *TextRenderLayer.appendBaselineOffsets(to:)(void **a1)
{
  uint64_t v54 = a1;
  uint64_t v59 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v59);
  uint64_t v58 = (uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v61 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v57 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v56 = (uint64_t *)((char *)&v52 - v6);
  MEMORY[0x270FA5388](v7);
  CGFloat v9 = (char *)&v52 - v8;
  MEMORY[0x270FA5388](v10);
  CGRect v12 = (char *)&v52 - v11;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  uint64_t v55 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v60 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  CGRect v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  CGRect v21 = (unint64_t *)((char *)&v52 - v20);
  _sypSgWObTm_1(v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v70, (uint64_t)v71, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v71);
  if (result == 1) {
    return result;
  }
  CFAttributedStringRef v65 = (unint64_t *)v18;
  uint64_t v23 = v72;
  uint64_t v68 = *(void *)(v72 + 16);
  uint64_t v24 = v1 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements;
  outlined release of TextRenderLayer.Layout?(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  uint64_t v69 = v23;
  swift_bridgeObjectRetain();
  uint64_t v53 = v24;
  uint64_t result = (void *)swift_beginAccess();
  uint64_t v63 = v12;
  uint64_t v64 = 0;
  uint64_t v25 = v14;
  char v26 = 0;
  unint64_t v27 = 0;
  char v66 = (unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v62 = v3;
  uint64_t v28 = v55;
  while (1)
  {
    if (v27 == v68)
    {
      uint64_t v29 = 1;
      unint64_t v27 = v68;
      uint64_t v30 = (uint64_t)v65;
      goto LABEL_9;
    }
    if ((v27 & 0x8000000000000000) != 0) {
      break;
    }
    if (v27 >= *(void *)(v69 + 16)) {
      goto LABEL_54;
    }
    if ((uint64_t)v27 >= v68) {
      goto LABEL_55;
    }
    uint64_t v31 = (uint64_t)&v60[*(int *)(v28 + 48)];
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v69+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v27, v31, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v30 = (uint64_t)v65;
    uint64_t v32 = (uint64_t)v65 + *(int *)(v28 + 48);
    *CFAttributedStringRef v65 = v27;
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v31, v32, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v29 = 0;
    ++v27;
LABEL_9:
    (*v67)(v30, v29, 1, v28);
    outlined init with take of (key: UUID, value: TextRenderSurface)?(v30, (uint64_t)v21, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    if ((*v66)(v21, 1, v28) == 1)
    {
      swift_bridgeObjectRelease();
      return outlined release of TextRenderLayer.Layout?(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    }
    unint64_t v33 = *v21;
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v21 + *(int *)(v28 + 48), (uint64_t)v12, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v12, (uint64_t)v9, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v35 = v58;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v9, v58, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        uint64_t v36 = *(void *)(v35 + *(int *)(v59 + 28));
        uint64_t result = (void *)outlined destroy of Text.Effect.RenderSegmentation.Segment(v35, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        goto LABEL_16;
      }
      uint64_t v36 = *(void *)v9;
      outlined consume of Text.Layout.Line.Line(*((void **)v9 + 3), *((void *)v9 + 4), v9[40]);
    }
    else
    {
      uint64_t v36 = *((void *)v9 + 2);
      swift_bridgeObjectRelease();
    }
    uint64_t result = (void *)swift_bridgeObjectRelease();
LABEL_16:
    if ((v26 & (v36 == v64)) != 0)
    {
      CGRect v12 = v63;
      goto LABEL_18;
    }
    CGRect v12 = v63;
    if ((v33 & 0x8000000000000000) != 0) {
      goto LABEL_56;
    }
    if (v33 >= *(void *)(*(void *)v53 + 16)) {
      goto LABEL_57;
    }
    double v37 = *(double *)(*(void *)v53 + 16 * v33 + 40);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v63, (uint64_t)v56, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v38 = swift_getEnumCaseMultiPayload();
    if (v38)
    {
      if (v38 == 1)
      {
        uint64_t v39 = v58;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v56, v58, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        uint64_t v64 = *(void *)(v39 + *(int *)(v59 + 28));
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v39, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        goto LABEL_27;
      }
      uint64_t v64 = *v56;
      outlined consume of Text.Layout.Line.Line((void *)v56[3], v56[4], *((unsigned char *)v56 + 40));
    }
    else
    {
      uint64_t v64 = v56[2];
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_27:
    outlined init with copy of Text.Effect.RenderSegmentation.Segment((uint64_t)v12, v57, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v40 = swift_getEnumCaseMultiPayload();
    if (v40)
    {
      if (v40 == 1)
      {
        uint64_t v41 = v58;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v57, v58, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        int64_t v42 = *(void *)(v41 + *(int *)(v59 + 28));
        uint64_t result = (void *)outlined destroy of Text.Effect.RenderSegmentation.Segment(v41, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        int64_t v43 = v42 + 1;
        if (__OFADD__(v42, 1)) {
          goto LABEL_62;
        }
        if (v43 < v42) {
          goto LABEL_63;
        }
      }
      else
      {
        int64_t v42 = *(void *)v57;
        outlined consume of Text.Layout.Line.Line(*(void **)(v57 + 24), *(void *)(v57 + 32), *(unsigned char *)(v57 + 40));
        uint64_t result = (void *)swift_bridgeObjectRelease();
        int64_t v43 = v42 + 1;
        if (__OFADD__(v42, 1)) {
          goto LABEL_66;
        }
        if (v43 < v42) {
          goto LABEL_67;
        }
      }
    }
    else
    {
      int64_t v42 = *(void *)(v57 + 16);
      uint64_t v44 = *(void *)(*(void *)v57 + 16);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      int64_t v43 = v42 + v44;
      if (__OFADD__(v42, v44)) {
        goto LABEL_64;
      }
      if (v43 < v42) {
        goto LABEL_65;
      }
    }
    if (v43 != v42)
    {
      if (v43 < v42) {
        goto LABEL_58;
      }
      int64_t v45 = v43 - v42;
      if (v43 <= v42) {
        goto LABEL_59;
      }
      if (v42 < 0) {
        goto LABEL_60;
      }
      unint64_t v46 = *(void *)(v71[0] + 16);
      if (v42 >= v46 || v43 - 1 >= v46) {
        goto LABEL_61;
      }
      long long v47 = *v54;
      CFIndex v48 = (double *)(v71[0] + 48 * v42 + 64);
      do
      {
        double v49 = *v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
        }
        unint64_t v51 = v47[2];
        unint64_t v50 = v47[3];
        if (v51 >= v50 >> 1) {
          long long v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v47);
        }
        v47[2] = v51 + 1;
        *(double *)&v47[v51 + 4] = v37 + v49;
        v48 += 6;
        --v45;
      }
      while (v45);
      *uint64_t v54 = v47;
      CGRect v12 = v63;
    }
LABEL_18:
    uint64_t result = (void *)outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v12, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    char v26 = 1;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

void TextRenderLayer.drawingBounds.getter()
{
  uint64_t v1 = MEMORY[0x263F8D6E0];
  type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
  uint64_t v142 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v141 = (char *)&v128 - v4;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v140 = (char *)&v128 - v6;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v139 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v138 = (char *)&v128 - v8;
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, v1, MEMORY[0x263F8EDA0]);
  uint64_t v137 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v136 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v147 = (char *)&v128 - v13;
  uint64_t v135 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0);
  MEMORY[0x270FA5388](v135);
  uint64_t v134 = (uint64_t *)((char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  CFAttributedStringRef v144 = (char *)&v128 - v16;
  uint64_t v133 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v133);
  int v148 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v146 = *(void *)(v152 - 8);
  MEMORY[0x270FA5388](v152);
  Swift::UInt64 v160 = (CGFloat *)((char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  long long v145 = (char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v166 = (unint64_t *)((char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v25);
  uint64_t v154 = (uint64_t *)((char *)&v128 - v26);
  uint64_t v143 = v0;
  _sypSgWObTm_1(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v175, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v175, (uint64_t)v176, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  int v27 = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v176);
  double v28 = *MEMORY[0x263F001A0];
  double v29 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v30 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v31 = *(double *)(MEMORY[0x263F001A0] + 24);
  if (v27 == 1) {
    return;
  }
  uint64_t v32 = v177;
  uint64_t v151 = *(void *)(v177 + 16);
  outlined release of TextRenderLayer.Layout?(v175, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  uint64_t v149 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v150 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v131 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v132 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  unint64_t v129 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v130 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  p_CGFloat b = &v172.b;
  uint64_t v153 = v32;
  swift_bridgeObjectRetain();
  unint64_t v33 = 0;
  CGFloat v34 = v28;
  double v35 = v29;
  double v36 = v30;
  double v37 = v31;
  uint64_t v38 = (uint64_t)v148;
  uint64_t v165 = v20;
  uint64_t v39 = v166;
  double v163 = v29;
  double v164 = v28;
  double v161 = v31;
  double v162 = v30;
  while (1)
  {
    CGFloat v158 = v35;
    CGFloat v159 = v34;
    CGFloat v156 = v37;
    CGFloat v157 = v36;
    if (v33 == v151)
    {
      uint64_t v52 = 1;
      unint64_t v155 = v151;
    }
    else
    {
      if ((v33 & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      if (v33 >= *(void *)(v153 + 16)) {
        goto LABEL_46;
      }
      if ((uint64_t)v33 >= v151) {
        goto LABEL_47;
      }
      unint64_t v53 = v33 + 1;
      uint64_t v54 = (uint64_t)&v145[*(int *)(v165 + 48)];
      unint64_t v55 = v33;
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v153+ ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80))+ *(void *)(v146 + 72) * v33, v54, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      uint64_t v56 = (uint64_t)v166 + *(int *)(v165 + 48);
      *uint64_t v166 = v55;
      uint64_t v57 = v54;
      uint64_t v39 = v166;
      outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v57, v56, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      uint64_t v52 = 0;
      unint64_t v155 = v53;
      uint64_t v20 = v165;
    }
    (*v150)(v39, v52, 1, v20);
    uint64_t v58 = (uint64_t)v39;
    uint64_t v59 = v154;
    outlined init with take of (key: UUID, value: TextRenderSurface)?(v58, (uint64_t)v154, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
    if ((*v149)(v59, 1, v20) == 1)
    {
      swift_bridgeObjectRelease();
      TextRenderLayer.pixelLength.getter();
      v172.CGFloat a = v159;
      v172.CGFloat b = v158;
      v172.CGFloat c = v157;
      v172.CGFloat d = v156;
      CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v127);
      outlined release of TextRenderLayer.Layout?(v175, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
      return;
    }
    uint64_t v60 = v59;
    uint64_t v61 = *v59;
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v60 + *(int *)(v20 + 48), (uint64_t)v160, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload) {
      break;
    }
    uint64_t v106 = *(void *)v160;
    uint64_t v107 = (void (*)(void, void))*((void *)v160 + 1);
    uint64_t v108 = *(void *)(*(void *)v160 + 16);
    if (v108)
    {
      swift_bridgeObjectRetain();
      uint64_t v170 = (void (*)(char *, uint64_t))v107;
      swift_bridgeObjectRetain();
      unint64_t v109 = 0;
      uint64_t v110 = (CGFloat *)(v106 + 64);
      CGFloat v45 = v28;
      CGFloat v47 = v29;
      CGFloat v51 = v161;
      CGFloat v49 = v162;
      while (1)
      {
        if (v109 >= *(void *)(v106 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v122 = (void *)*((void *)v110 - 4);
        uint64_t v123 = *((void *)v110 - 3);
        char v124 = *((unsigned char *)v110 - 16);
        CGFloat v125 = *(v110 - 1);
        CGFloat v126 = *v110;
        if (v124)
        {
          char v117 = 1;
          outlined copy of Text.Layout.Line.Line(*((void **)v110 - 4), *((void *)v110 - 3), 1);
          outlined copy of Text.Layout.Line.Line(v122, v123, 1);
          outlined copy of Text.Layout.Line.Line(v122, v123, 1);
          uint64_t v111 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v122);
          if (!v111)
          {
            CGFloat y = v163;
            CGFloat x = v164;
            CGFloat height = v161;
            CGFloat width = v162;
            goto LABEL_30;
          }
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(*((void **)v110 - 4), *((void *)v110 - 3), 0);
          outlined copy of Text.Layout.Line.Line(v122, v123, 0);
          outlined copy of Text.Layout.Line.Line(v122, v123, 0);
          outlined copy of Text.Layout.Line.Line(v122, v123, 0);
          swift_release();
          uint64_t v111 = (const __CTLine *)v122;
        }
        CGRect ImageBounds = CTLineGetImageBounds(v111, 0);
        int v112 = p_b;
        *p_CGFloat b = 0.0;
        v112[1] = 0.0;
        v172.CGFloat a = 1.0;
        v172.CGFloat d = -1.0;
        v172.tCGFloat x = v125;
        v172.tCGFloat y = v126;
        CGRect v188 = CGRectApplyAffineTransform(ImageBounds, &v172);
        CGFloat x = v188.origin.x;
        CGFloat y = v188.origin.y;
        CGFloat width = v188.size.width;
        CGFloat height = v188.size.height;

        char v117 = v124;
LABEL_30:
        outlined consume of Text.Layout.Line.Line(v122, v123, v117);
        ++v109;
        v189.origin.CGFloat x = x;
        v189.origin.CGFloat y = y;
        v189.size.CGFloat width = width;
        v189.size.CGFloat height = height;
        CGRect v190 = CGRectInset(v189, -1.0, -1.0);
        CGFloat v118 = v190.origin.x;
        CGFloat v119 = v190.origin.y;
        CGFloat v120 = v190.size.width;
        CGFloat v121 = v190.size.height;
        outlined consume of Text.Layout.Line.Line(v122, v123, v124);
        v191.origin.CGFloat x = v45;
        v191.origin.CGFloat y = v47;
        v191.size.CGFloat width = v49;
        v191.size.CGFloat height = v51;
        v195.origin.CGFloat x = v118;
        v195.origin.CGFloat y = v119;
        v195.size.CGFloat width = v120;
        v195.size.CGFloat height = v121;
        CGRect v192 = CGRectUnion(v191, v195);
        CGFloat v45 = v192.origin.x;
        CGFloat v47 = v192.origin.y;
        CGFloat v49 = v192.size.width;
        CGFloat v51 = v192.size.height;
        outlined consume of Text.Layout.Line.Line(v122, v123, v124);
        v110 += 6;
        if (v108 == v109)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v38 = (uint64_t)v148;
          goto LABEL_4;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CGFloat v45 = v28;
    CGFloat v47 = v29;
    CGFloat v51 = v161;
    CGFloat v49 = v162;
LABEL_4:
    v179.origin.CGFloat y = v158;
    v179.origin.CGFloat x = v159;
    v179.size.CGFloat height = v156;
    v179.size.CGFloat width = v157;
    v193.origin.CGFloat x = v45;
    v193.origin.CGFloat y = v47;
    v193.size.CGFloat width = v49;
    v193.size.CGFloat height = v51;
    *(CGRect *)&CGFloat v34 = CGRectUnion(v179, v193);
    uint64_t v20 = v165;
    uint64_t v39 = v166;
    double v29 = v163;
    double v28 = v164;
    unint64_t v33 = v155;
  }
  if (EnumCaseMultiPayload != 1)
  {
    int v40 = (void *)*((void *)v160 + 3);
    CGFloat v41 = v160[4];
    char v42 = *((unsigned char *)v160 + 40);
    int v43 = *((_DWORD *)v160 + 16);
    uint64_t v44 = *((void *)v160 + 11);
    *(void *)&v172.CGFloat a = v40;
    v172.CGFloat b = v41;
    LOBYTE(v172.c) = v42;
    *(_OWORD *)&v172.CGFloat d = *((_OWORD *)v160 + 3);
    LODWORD(v172.ty) = v43;
    long long v173 = *(_OWORD *)(v160 + 9);
    uint64_t v174 = v44;
    outlined copy of Text.Layout.Line.Line(v40, *(uint64_t *)&v41, v42);
    swift_bridgeObjectRetain();
    CGFloat v45 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)((uint64_t *)&v172, v61, 0);
    CGFloat v47 = v46;
    CGFloat v49 = v48;
    CGFloat v51 = v50;
    outlined consume of Text.Layout.Line.Line(v40, *(uint64_t *)&v41, v42);
    swift_bridgeObjectRelease();
    uint64_t v38 = (uint64_t)v148;
    outlined consume of Text.Layout.Line.Line(v40, *(uint64_t *)&v41, v42);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v160, v38, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  uint64_t v64 = *(void **)v38;
  CGFloat v168 = *(double *)(v38 + 8);
  CGFloat v63 = v168;
  uint64_t v169 = v64;
  char v65 = *(unsigned char *)(v38 + 16);
  uint64_t v66 = *(void *)(v38 + 24);
  uint64_t v67 = *(void *)(v38 + 32);
  LODWORD(v170) = *(_DWORD *)(v38 + 40);
  uint64_t v68 = *v132;
  uint64_t v69 = v147;
  uint64_t v70 = v137;
  (*v132)(v147, v38 + *(int *)(v133 + 24), v137);
  uint64_t v71 = (uint64_t)v134;
  *uint64_t v134 = v64;
  *(CGFloat *)(v71 + 8) = v63;
  *(unsigned char *)(v71 + 16) = v65;
  *(void *)(v71 + 24) = v66;
  *(void *)(v71 + 32) = v67;
  *(_DWORD *)(v71 + 40) = v170;
  uint64_t v72 = v142;
  char v73 = v136;
  v68(v136, (uint64_t)v69, v70);
  outlined copy of Text.Layout.Line.Line(v169, *(uint64_t *)&v168, v65);
  int v74 = v141;
  RangeSet.ranges.getter();
  uint64_t v170 = *v131;
  uint64_t v75 = v73;
  uint64_t v76 = (uint64_t)v144;
  v170(v75, v70);
  uint64_t v77 = (uint64_t)v140;
  (*v130)(v140, v74, v72);
  uint64_t v78 = v138;
  (*v129)(&v138[*(int *)(v139 + 48)], v77, v72);
  *uint64_t v78 = 0;
  v78[1] = 0;
  v170(v147, v70);
  outlined destroy of RangeSet<Int><>.IndexSequence.Iterator(v77, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  uint64_t v79 = v135;
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v78, v71 + *(int *)(v135 + 20));
  outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v71, v76, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  uint64_t v80 = (uint64_t *)(v76 + *(int *)(v79 + 20));
  uint64_t v81 = *v80;
  uint64_t v82 = RangeSet.Ranges.count.getter();
  CGFloat v45 = v28;
  CGFloat v47 = v29;
  CGFloat v51 = v161;
  CGFloat v49 = v162;
  if (v81 >= v82)
  {
LABEL_37:
    outlined destroy of Text.Effect.RenderSegmentation.Segment(v76, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
    outlined destroy of Text.Effect.RenderSegmentation.Segment(v38, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
    goto LABEL_4;
  }
  uint64_t v167 = v80;
  uint64_t v83 = v80[1];
  uint64_t v84 = *(void **)v76;
  uint64_t v85 = *(void *)(v76 + 8);
  LODWORD(v170) = *(unsigned __int8 *)(v76 + 16);
  CGFloat v47 = v163;
  CGFloat v45 = v164;
  CGFloat v51 = v161;
  CGFloat v49 = v162;
  uint64_t v86 = *(void **)(v76 + 24);
  CGFloat v168 = *(double *)(v76 + 32);
  uint64_t v169 = v86;
  while (1)
  {
    RangeSet.Ranges.subscript.getter();
    CFIndex v103 = *(void *)&v172.a + v83;
    if (__OFADD__(*(void *)&v172.a, v83)) {
      break;
    }
    if (__OFADD__(v83++, 1)) {
      goto LABEL_43;
    }
    RangeSet.Ranges.subscript.getter();
    if (__OFSUB__(*(void *)&v172.b, *(void *)&v172.a)) {
      goto LABEL_44;
    }
    if (v83 >= *(void *)&v172.b - *(void *)&v172.a)
    {
      uint64_t v83 = 0;
      *uint64_t v167 = ++v81;
    }
    if (v170)
    {
      outlined copy of Text.Layout.Line.Line(v84, v85, 1);
      id v105 = (id)_NSTextLineFragmentGetCTLine(v84);
      if (!v105) {
        goto LABEL_48;
      }
      uint64_t v87 = v105;
      outlined consume of Text.Layout.Line.Line(v84, v85, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v84, v85, 0);
      outlined copy of Text.Layout.Line.Line(v84, v85, 0);

      swift_release();
      uint64_t v87 = v84;
    }
    swift_retain_n();
    uint64_t v88 = v87;
    uint64_t v89 = (id)_CTLineGetRunAtIndex(v88, v103);
    v178.location = 0;
    v178.CFIndex length = 0;
    CGRect v180 = CTRunGetImageBounds((CTRunRef)v89, 0, v178);
    CGFloat v90 = v180.origin.x;
    CGFloat v91 = v180.origin.y;
    CGFloat v92 = v180.size.width;
    CGFloat v93 = v180.size.height;

    uint64_t v94 = p_b;
    *p_CGFloat b = 0.0;
    v94[1] = 0.0;
    v172.CGFloat a = 1.0;
    v172.CGFloat d = -1.0;
    *(void *)&v172.tCGFloat x = v169;
    v172.tCGFloat y = v168;
    v181.origin.CGFloat x = v90;
    v181.origin.CGFloat y = v91;
    v181.size.CGFloat width = v92;
    v181.size.CGFloat height = v93;
    CGRect v182 = CGRectApplyAffineTransform(v181, &v172);
    CGFloat v95 = v182.origin.x;
    CGFloat v96 = v182.origin.y;
    CGFloat v97 = v182.size.width;
    CGFloat v98 = v182.size.height;
    swift_release();

    v183.origin.CGFloat x = v95;
    v183.origin.CGFloat y = v96;
    v183.size.CGFloat width = v97;
    v183.size.CGFloat height = v98;
    CGRect v184 = CGRectInset(v183, -1.0, -1.0);
    CGFloat v99 = v184.origin.x;
    CGFloat v100 = v184.origin.y;
    CGFloat v101 = v184.size.width;
    CGFloat v102 = v184.size.height;
    swift_release();

    v185.origin.CGFloat x = v45;
    v185.origin.CGFloat y = v47;
    v185.size.CGFloat width = v49;
    v185.size.CGFloat height = v51;
    v194.origin.CGFloat x = v99;
    v194.origin.CGFloat y = v100;
    v194.size.CGFloat width = v101;
    v194.size.CGFloat height = v102;
    CGRect v186 = CGRectUnion(v185, v194);
    CGFloat v45 = v186.origin.x;
    CGFloat v47 = v186.origin.y;
    CGFloat v49 = v186.size.width;
    CGFloat v51 = v186.size.height;
    swift_release();

    if (v81 >= RangeSet.Ranges.count.getter())
    {
      v167[1] = v83;
      uint64_t v76 = (uint64_t)v144;
      uint64_t v38 = (uint64_t)v148;
      goto LABEL_37;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}

Swift::Void __swiftcall TextRenderLayer.layoutSublayers()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v398 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v398);
  uint64_t v421 = (uint64_t)&v392 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v407 = (uint64_t)&v392 - v5;
  uint64_t v430 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v410 = *(void *)(v430 - 8);
  MEMORY[0x270FA5388](v430);
  uint64_t v412 = (uint64_t)&v392 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v413 = (uint64_t)&v392 - v8;
  MEMORY[0x270FA5388](v9);
  char v431 = (uint64_t *)((char *)&v392 - v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v433 = (uint64_t)&v392 - v12;
  type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)();
  uint64_t v432 = v13;
  CGFloat v14 = *(double *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v409 = (char *)&v392 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v392 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v427 = (uint64_t *)((char *)&v392 - v20);
  type metadata accessor for RangeSet<Int>(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  uint64_t v396 = v21;
  uint64_t v22 = *(uint64_t **)(v21 - 8);
  double v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v392 - v24;
  v475.receiver = v1;
  v475.super_class = ObjectType;
  objc_msgSendSuper2(&v475, sel_layoutSublayers, v23);
  uint64_t v26 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController];
  int v27 = (uint64_t **)(v26 + 112);
  swift_beginAccess();
  uint64_t v437 = v26;
  uint64_t v28 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags;
  if (*(void *)(*(void *)(v26 + 112) + 56) != *(void *)&v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
  {
    v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = 0;
    objc_msgSend(v1, sel_setSublayers_, 0);
    unint64_t v33 = &v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers];
    swift_beginAccess();
    *(void *)unint64_t v33 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v417 = v1;
  int v418 = (unint64_t *)v18;
  int v29 = v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags];
  uint64_t v408 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags;
  if (v29 < 0)
  {
    v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = v29 & 0x7F;
    id v30 = objc_msgSend(v1, sel_delegate);
    uint64_t v28 = v408;
    if (v30)
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v31 = swift_dynamicCastClass();
      if (v31)
      {
        uint64_t v32 = (void *)MEMORY[0x24C527E00](v31 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        swift_unknownObjectRelease();
        uint64_t v1 = v417;
        uint64_t v28 = v408;
        if (!v32) {
          goto LABEL_10;
        }
        TextEffectsRenderer.refreshRenderingAttributes()();
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v1 = v417;
      }
      uint64_t v28 = v408;
    }
  }
LABEL_10:
  CGFloat v34 = v1;
  if ((v1[v28] & 0x20) != 0)
  {
    v1[v28] &= ~0x20u;
    double v35 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment];
    id v36 = v35;
    specialized Text.Effect.Markers.init(fragment:)(v35);
    uint64_t v38 = v37;
    uint64_t v39 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers;
    if (*(void *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers])
    {
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = swift_bridgeObjectRetain();
        char v41 = specialized static Array<A>.== infix(_:_:)(v40, v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v41)
        {
          swift_bridgeObjectRelease();
          CGFloat v34 = v417;
          uint64_t v28 = v408;
          goto LABEL_18;
        }
      }
    }
    else
    {
      CGFloat v34 = v417;
      uint64_t v28 = v408;
      if (!v37) {
        goto LABEL_18;
      }
    }
    char v42 = v417;
    *(void *)&v417[v39] = v38;
    CGFloat v34 = v42;
    swift_bridgeObjectRelease();
    uint64_t v28 = v408;
    if ((v34[v408] & 0x10) == 0) {
      v34[v408] |= 0x10u;
    }
  }
LABEL_18:
  char v43 = v34[v28];
  if ((v43 & 1) == 0)
  {
    unint64_t v44 = 0;
    if ((v34[v28] & 4) == 0) {
      goto LABEL_287;
    }
    goto LABEL_20;
  }
  double v45 = 1.0;
  if (objc_msgSend(v34, sel_delegate))
  {
    type metadata accessor for TextRenderSurface();
    uint64_t v46 = swift_dynamicCastClass();
    if (v46)
    {
      uint64_t v47 = MEMORY[0x24C527E00](v46 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
      if (v47)
      {
        double v48 = (void *)v47;
        double v45 = *(double *)(v47 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      CGFloat v34 = v417;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  CGFloat y = v14;
  uint64_t v446 = v22;
  char v49 = v34[v408];
  if ((v49 & 0x4B) != 2) {
    v34[v408] = v49 & 0xB4 | 2;
  }
  unint64_t v473 = MEMORY[0x263F8EE78];
  unint64_t v474 = MEMORY[0x263F8EE78];
  uint64_t v471 = MEMORY[0x263F8EE78];
  uint64_t v472 = MEMORY[0x263F8EE78];
  double v50 = &v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers];
  swift_beginAccess();
  unint64_t v422 = (uint64_t *)v50;
  uint64_t v51 = *(void *)v50;
  uint64_t v52 = *(void *)(*(void *)v50 + 16);
  if (v52)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = 0;
    do
    {
      unint64_t v56 = *(void *)(v51 + 8 * v53++ + 32);
      switch(v56 >> 62)
      {
        case 1uLL:
          id v54 = (id)(v56 & 0x3FFFFFFFFFFFFFFFLL);
          MEMORY[0x24C522D60]();
          unint64_t v55 = v473;
          goto LABEL_36;
        case 2uLL:
          id v54 = (id)(v56 & 0x3FFFFFFFFFFFFFFFLL);
          MEMORY[0x24C522D60]();
          unint64_t v55 = v471;
          goto LABEL_36;
        case 3uLL:
          id v54 = (id)(v56 & 0x3FFFFFFFFFFFFFFFLL);
          MEMORY[0x24C522D60]();
          unint64_t v55 = v472;
LABEL_36:
          if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          break;
        default:
          id v57 = (id)v56;
          MEMORY[0x24C522D60]();
          if (*(void *)((v474 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v474 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v54 = (id)(v56 & 0x3FFFFFFFFFFFFFFFLL);
          break;
      }
    }
    while (v52 != v53);
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = v422;
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v60 = *v58;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v60 + 16));
  }
  else
  {
    uint64_t *v58 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v60 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  CGFloat v34 = v417;
  uint64_t v61 = v446;
  swift_endAccess();
  uint64_t v62 = (uint64_t *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices];
  swift_beginAccess();
  if (*(void *)(*v62 + 16))
  {
    char v63 = swift_isUniquelyReferenced_nonNull_native();
    v465[0] = *v62;
    *uint64_t v62 = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<Text.Effect.Identifier, Set<Int>>();
    _NativeDictionary.removeAll(isUnique:)(v63);
    *uint64_t v62 = v465[0];
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v64 = &v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements];
  swift_beginAccess();
  int v65 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v66 = *(void *)v64;
  if (v65)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v66 + 16));
  }
  else
  {
    *(void *)uint64_t v64 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v66 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  RangeSet.init()();
  uint64_t v67 = &v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments];
  swift_beginAccess();
  uint64_t v68 = (void (*)(void, void, void))v61[5];
  uint64_t v394 = v67;
  v68(v67, v25, v396);
  swift_endAccess();
  uint64_t v69 = *(void *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
  uint64_t v434 = *(void *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap + 8];
  uint64_t v70 = *v27;
  _sypSgWObTm_1((uint64_t)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)v465, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v465, (uint64_t)v466, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  int v71 = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v466);
  unint64_t v435 = v70;
  uint64_t v436 = v69;
  if (v71 == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v44 = 0;
    goto LABEL_280;
  }
  uint64_t v429 = v64;
  uint64_t v446 = v62;
  uint64_t v72 = v466[4];
  char v73 = (uint64_t *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers];
  uint64_t v393 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  unint64_t v397 = &v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_geometryObserver];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined release of TextRenderLayer.Layout?(v465, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
  uint64_t v425 = v72;
  swift_bridgeObjectRetain();
  char v395 = v73;
  swift_beginAccess();
  unint64_t v44 = 0;
  int v406 = 0;
  unint64_t v74 = 0;
  uint64_t v443 = 0;
  uint64_t v416 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)&y + 56);
  char v415 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)&y + 48);
  double v75 = *MEMORY[0x263F001A0];
  double v404 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v405 = v75;
  double v76 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v402 = *(double *)(MEMORY[0x263F001A0] + 24);
  double v403 = v76;
  uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  uint64_t v78 = v427;
  double v411 = v45;
LABEL_58:
  unint64_t v79 = *(void *)(v425 + 16);
  uint64_t v80 = v432;
  if (v74 == v79)
  {
    uint64_t v81 = 1;
    uint64_t v82 = (uint64_t)v418;
  }
  else
  {
    if (v74 >= v79) {
      goto LABEL_234;
    }
    uint64_t v83 = (uint64_t)&v409[*(int *)(v432 + 48)];
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v425+ ((*(unsigned __int8 *)(v410 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v410 + 80))+ *(void *)(v410 + 72) * v74, v83, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v82 = (uint64_t)v418;
    uint64_t v84 = (uint64_t)v418 + *(int *)(v432 + 48);
    *int v418 = v74;
    uint64_t v85 = v83;
    uint64_t v80 = v432;
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v85, v84, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    uint64_t v81 = 0;
    ++v74;
    uint64_t v78 = v427;
  }
  (*v416)(v82, v81, 1, v80);
  outlined init with take of (key: UUID, value: TextRenderSurface)?(v82, (uint64_t)v78, &lazy cache variable for type metadata for (offset: Int, element: Text.Effect.RenderSegmentation.Segment)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: Text.Effect.RenderSegmentation.Segment));
  if ((*v415)(v78, 1, v80) != 1)
  {
    CGFloat y = *(double *)v78;
    uint64_t v86 = (uint64_t)v78 + *(int *)(v80 + 48);
    uint64_t v87 = v433;
    outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v86, v433, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v87, (uint64_t)v431, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    unint64_t v428 = v74;
    if (!EnumCaseMultiPayload)
    {
      uint64_t v95 = *v431;
      uint64_t v96 = v431[1];
      uint64_t v97 = v431[2];
      uint64_t v99 = v431[3];
      uint64_t v98 = v431[4];
      uint64_t v101 = v431[5];
      uint64_t v100 = v431[6];
      uint64_t v80 = v474;
      if (v474 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v295 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v295) {
          goto LABEL_181;
        }
        swift_bridgeObjectRetain();
        uint64_t v296 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v296) {
          goto LABEL_311;
        }
        swift_bridgeObjectRetain();
        uint64_t v297 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v297) {
          goto LABEL_237;
        }
LABEL_75:
        if ((v80 & 0xC000000000000001) != 0)
        {
          CGFloat v102 = (char *)MEMORY[0x24C523D60](0, v80);
        }
        else
        {
          if (!*(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_238;
          }
          CGFloat v102 = (char *)*(id *)(v80 + 32);
        }
        CFIndex v103 = v102;
        if (!specialized Array._getCount()(v80)) {
          goto LABEL_241;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        uint64_t v104 = &v103[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
        *(void *)uint64_t v104 = v95;
        *((void *)v104 + 1) = v96;
        *((void *)v104 + 2) = v97;
        *((void *)v104 + 3) = v99;
        *((void *)v104 + 4) = v98;
        *((void *)v104 + 5) = v101;
        *((void *)v104 + 6) = v100;
        id v105 = v103;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v105, sel_setNeedsDisplay);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (*(void *)((v474 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_75;
        }
LABEL_181:
        uint64_t v298 = (objc_class *)type metadata accessor for TextLinesLayer();
        uint64_t v299 = (char *)objc_allocWithZone(v298);
        uint64_t v300 = &v299[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D414TextLinesLayer_content];
        *(void *)uint64_t v300 = v95;
        *((void *)v300 + 1) = v96;
        *((void *)v300 + 2) = v97;
        *((void *)v300 + 3) = v99;
        *((void *)v300 + 4) = v98;
        *((void *)v300 + 5) = v101;
        *((void *)v300 + 6) = v100;
        v447.receiver = v299;
        v447.super_class = v298;
        id v105 = (char *)objc_msgSendSuper2(&v447, sel_init);
        objc_msgSend(v105, sel_setOpaque_, 0);
        objc_msgSend(v105, sel_setNeedsDisplay);
      }
      char v301 = v422;
      swift_beginAccess();
      uint64_t v302 = (void *)*v301;
      unint64_t v227 = v105;
      char v303 = swift_isUniquelyReferenced_nonNull_native();
      *char v301 = (uint64_t)v302;
      uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
      if ((v303 & 1) == 0)
      {
        uint64_t v302 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v302[2] + 1, 1, v302);
        *char v301 = (uint64_t)v302;
      }
      unint64_t v305 = v302[2];
      unint64_t v304 = v302[3];
      if (v305 >= v304 >> 1)
      {
        uint64_t v302 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v304 > 1), v305 + 1, 1, v302);
        uint64_t *v422 = (uint64_t)v302;
      }
      v302[2] = v305 + 1;
      v302[v305 + 4] = v227;
      swift_endAccess();
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v433, v413, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v306 = swift_getEnumCaseMultiPayload();
      if (v306)
      {
        uint64_t v78 = v427;
        if (v306 == 1)
        {
          uint64_t v307 = v407;
          outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v413, v407, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          uint64_t v308 = (CGFloat *)(v307 + *(int *)(v398 + 32));
          CGFloat v309 = *v308;
          CGFloat v310 = v308[1];
          CGFloat v312 = v308[2];
          CGFloat v311 = v308[3];
          id v313 = (id)v227;
          outlined destroy of Text.Effect.RenderSegmentation.Segment(v307, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          CGFloat v315 = *(void **)(v413 + 24);
          uint64_t v316 = *(void *)(v413 + 32);
          char v317 = *(unsigned char *)(v413 + 40);
          id v318 = (id)v227;
          outlined consume of Text.Layout.Line.Line(v315, v316, v317);
          uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          swift_bridgeObjectRelease();
          specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
          CGFloat v310 = v404;
          CGFloat v309 = v405;
          CGFloat v311 = v402;
          CGFloat v312 = v403;
        }
      }
      else
      {
        CGFloat v309 = *(double *)(v413 + 24);
        CGFloat v310 = *(double *)(v413 + 32);
        CGFloat v312 = *(double *)(v413 + 40);
        CGFloat v311 = *(double *)(v413 + 48);
        id v314 = (id)v227;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v78 = v427;
      }
      double v319 = v467;
      double v320 = v468;
      double v321 = v469;
      double v322 = v470;
      v481.origin.CGFloat x = v309;
      v481.origin.CGFloat y = v310;
      v481.size.CGFloat width = v312;
      v481.size.CGFloat height = v311;
      if (CGRectIsNull(v481))
      {
        CGFloat v323 = v310;
        CGFloat v324 = v309;
      }
      else
      {
        v482.origin.CGFloat x = v309;
        v482.origin.CGFloat y = v310;
        v482.size.CGFloat width = v312;
        v482.size.CGFloat height = v311;
        CGRect v483 = CGRectStandardize(v482);
        if (v320 == v322) {
          double v325 = v322;
        }
        else {
          double v325 = v320;
        }
        double v326 = v325 + v483.origin.x;
        double v327 = v319 + v483.origin.y;
        double v328 = v483.size.width - (v320 + v322);
        double v329 = v483.size.height - (v319 + v321);
        v484.origin.CGFloat x = v325 + v483.origin.x;
        v484.origin.CGFloat y = v327;
        v484.size.CGFloat width = v328;
        v484.size.CGFloat height = v329;
        CGFloat Width = CGRectGetWidth(v484);
        CGFloat v323 = v404;
        CGFloat v324 = v405;
        CGFloat v311 = v402;
        CGFloat v312 = v403;
        if (Width >= 0.0)
        {
          v485.origin.CGFloat x = v326;
          v485.origin.CGFloat y = v327;
          v485.size.CGFloat width = v328;
          v485.size.CGFloat height = v329;
          if (CGRectGetHeight(v485) >= 0.0)
          {
            CGFloat v324 = v326;
            CGFloat v323 = v327;
            CGFloat v312 = v328;
            CGFloat v311 = v329;
          }
          else
          {
            CGFloat v323 = v404;
            CGFloat v324 = v405;
            CGFloat v311 = v402;
            CGFloat v312 = v403;
          }
        }
      }
      double v331 = 1.0;
      if (objc_msgSend(v34, sel_delegate))
      {
        type metadata accessor for TextRenderSurface();
        uint64_t v332 = swift_dynamicCastClass();
        double v333 = v411;
        if (v332
          && (uint64_t v334 = MEMORY[0x24C527E00](v332 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
        {
          uint64_t v335 = (void *)v334;
          double v331 = *(double *)(v334 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        double v333 = v411;
      }
      double v336 = 1.0 / v331;
      if (v331 == 0.0) {
        double v336 = 1.0;
      }
      double v236 = CGRect.roundedCoordinates(toMultipleOf:)(v336, v336, v324, v323, v312, v311);
      CGFloat v237 = v337;
      CGFloat v234 = v338;
      CGFloat v235 = v339;
      objc_msgSend((id)v227, (SEL)v77[343], v333);

      goto LABEL_209;
    }
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v431, v421, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      uint64_t v80 = v473;
      if (v473 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v257 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v257) {
          goto LABEL_159;
        }
LABEL_67:
        if (!specialized Array._getCount()(v80)) {
          goto LABEL_235;
        }
        if (!specialized Array._getCount()(v80)) {
          goto LABEL_236;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v80 & 0xC000000000000001) == 0, v80);
        if ((v80 & 0xC000000000000001) != 0) {
          id v89 = (id)MEMORY[0x24C523D60](0, v80);
        }
        else {
          id v89 = *(id *)(v80 + 32);
        }
        CGFloat v90 = v89;
        uint64_t v91 = specialized Array._getCount()(v80);
        CGFloat v92 = v422;
        if (!v91) {
          goto LABEL_242;
        }
        specialized Array.replaceSubrange<A>(_:with:)(0, 1);
        uint64_t v93 = (uint64_t)v90 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content;
        swift_beginAccess();
        id v94 = v90;
        outlined assign with copy of Text.Effect.RenderSegmentation.StaticRuns(v421, v93);
        swift_endAccess();
        objc_msgSend(v94, sel_setNeedsDisplay);
      }
      else
      {
        if (*(void *)((v473 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_67;
        }
LABEL_159:
        uint64_t v258 = v407;
        outlined init with copy of Text.Effect.RenderSegmentation.Segment(v421, v407, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        uint64_t v259 = (objc_class *)type metadata accessor for TextRunsLayer(0);
        id v260 = objc_allocWithZone(v259);
        outlined init with copy of Text.Effect.RenderSegmentation.Segment(v258, (uint64_t)v260 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D413TextRunsLayer_content, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        v448.receiver = v260;
        v448.super_class = v259;
        id v94 = objc_msgSendSuper2(&v448, sel_init);
        objc_msgSend(v94, sel_setOpaque_, 0);
        objc_msgSend(v94, sel_setNeedsDisplay);

        outlined destroy of Text.Effect.RenderSegmentation.Segment(v258, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        CGFloat v92 = v422;
      }
      swift_beginAccess();
      uint64_t v261 = (void *)*v92;
      unint64_t v227 = (unint64_t)v94;
      char v262 = swift_isUniquelyReferenced_nonNull_native();
      *CGFloat v92 = (uint64_t)v261;
      if ((v262 & 1) == 0)
      {
        uint64_t v261 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v261[2] + 1, 1, v261);
        *CGFloat v92 = (uint64_t)v261;
      }
      uint64_t v78 = v427;
      uint64_t v263 = v261[2];
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v263);
      uint64_t v264 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v263, v227 | 0x4000000000000000);
      _ViewInputs.base.modify(v264, v265);
      swift_endAccess();
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v433, v412, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v266 = swift_getEnumCaseMultiPayload();
      if (v266)
      {
        if (v266 == 1)
        {
          uint64_t v267 = v407;
          outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v412, v407, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
          uint64_t v268 = (CGFloat *)(v267 + *(int *)(v398 + 32));
          CGFloat v269 = *v268;
          CGFloat v270 = v268[1];
          CGFloat v271 = v268[2];
          CGFloat v272 = v268[3];
          id v273 = (id)v227;
          outlined destroy of Text.Effect.RenderSegmentation.Segment(v267, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        }
        else
        {
          uint64_t v275 = *(void **)(v412 + 24);
          uint64_t v276 = *(void *)(v412 + 32);
          char v277 = *(unsigned char *)(v412 + 40);
          id v278 = (id)v227;
          outlined consume of Text.Layout.Line.Line(v275, v276, v277);
          uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          swift_bridgeObjectRelease();
          specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107);
          CGFloat v270 = v404;
          CGFloat v269 = v405;
          CGFloat v272 = v402;
          CGFloat v271 = v403;
        }
      }
      else
      {
        CGFloat v269 = *(double *)(v412 + 24);
        CGFloat v270 = *(double *)(v412 + 32);
        CGFloat v271 = *(double *)(v412 + 40);
        CGFloat v272 = *(double *)(v412 + 48);
        id v274 = (id)v227;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      double v279 = v467;
      double v280 = v468;
      double v281 = v469;
      double v282 = v470;
      v476.origin.CGFloat x = v269;
      v476.origin.CGFloat y = v270;
      v476.size.CGFloat width = v271;
      v476.size.CGFloat height = v272;
      if (CGRectIsNull(v476))
      {
        double v283 = v411;
      }
      else
      {
        v477.origin.CGFloat x = v269;
        v477.origin.CGFloat y = v270;
        v477.size.CGFloat width = v271;
        v477.size.CGFloat height = v272;
        CGRect v478 = CGRectStandardize(v477);
        if (v280 == v282) {
          double v284 = v282;
        }
        else {
          double v284 = v280;
        }
        CGFloat v285 = v284 + v478.origin.x;
        v479.origin.CGFloat y = v279 + v478.origin.y;
        double v286 = v280 + v282;
        CGFloat v287 = v285;
        double v288 = v478.size.width - v286;
        double v289 = v478.size.height - (v279 + v281);
        v479.origin.CGFloat x = v285;
        CGFloat y = v479.origin.y;
        v479.size.CGFloat width = v288;
        v479.size.CGFloat height = v289;
        CGFloat v290 = CGRectGetWidth(v479);
        CGFloat v270 = v404;
        CGFloat v269 = v405;
        CGFloat v272 = v402;
        CGFloat v271 = v403;
        double v283 = v411;
        if (v290 >= 0.0)
        {
          v480.origin.CGFloat x = v287;
          CGFloat v270 = y;
          v480.origin.CGFloat y = y;
          v480.size.CGFloat width = v288;
          v480.size.CGFloat height = v289;
          if (CGRectGetHeight(v480) >= 0.0)
          {
            CGFloat v269 = v287;
            CGFloat v271 = v288;
            CGFloat v272 = v289;
          }
          else
          {
            CGFloat v270 = v404;
            CGFloat v269 = v405;
            CGFloat v272 = v402;
            CGFloat v271 = v403;
          }
        }
      }
      TextRenderLayer.pixelLength.getter();
      double v236 = CGRect.roundedCoordinates(toMultipleOf:)(v291, v291, v269, v270, v271, v272);
      CGFloat v237 = v292;
      CGFloat v234 = v293;
      CGFloat v235 = v294;
      objc_msgSend((id)v227, (SEL)v77[343], v283);

      outlined destroy of Text.Effect.RenderSegmentation.Segment(v421, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
LABEL_209:
      int v232 = 0;
      goto LABEL_210;
    }
    uint64_t v106 = v431[1];
    uint64_t v399 = *v431;
    uint64_t v400 = v106;
    uint64_t v107 = (void *)v431[3];
    uint64_t v401 = v431[2];
    uint64_t v108 = v431[4];
    int v109 = *((unsigned __int8 *)v431 + 40);
    uint64_t v111 = v431[6];
    uint64_t v110 = v431[7];
    int v426 = *((_DWORD *)v431 + 16);
    uint64_t v113 = v431[9];
    unint64_t v112 = v431[10];
    uint64_t v114 = v431[11];
    uint64_t v115 = *(void *)(v114 + 16);
    uint64_t v419 = v114;
    int v420 = v109;
    uint64_t v423 = v107;
    uint64_t v424 = v108;
    if (v115)
    {
      unint64_t v414 = v44;
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v107, v108, v109);
      swift_bridgeObjectRetain();
      uint64_t v116 = (uint64_t *)(v114 + 56);
      while (1)
      {
        uint64_t v438 = v115;
        uint64_t v118 = v116[6];
        uint64_t v117 = v116[7];
        unint64_t v119 = v116[4];
        uint64_t v120 = v116[5];
        uint64_t v122 = v116[2];
        uint64_t v121 = v116[3];
        uint64_t v124 = *v116;
        uint64_t v123 = v116[1];
        uint64_t v125 = *(v116 - 2);
        CGFloat v126 = (void *)*(v116 - 1);
        uint64_t v127 = *(v116 - 3);
        uint64_t v454 = v127;
        uint64_t v455 = v125;
        uint64_t v456 = v126;
        uint64_t v457 = v124;
        uint64_t v458 = v123;
        uint64_t v440 = v123;
        uint64_t v441 = v122;
        uint64_t v459 = v122;
        uint64_t v460 = v121;
        uint64_t v442 = v121;
        unint64_t v461 = v119;
        uint64_t v444 = v119;
        uint64_t v462 = v120;
        uint64_t v463 = v118;
        uint64_t v464 = v117;
        outlined copy of Text.Effect.Composition.Operation(v127, v125, v126, v124, v123, v122, v121, v119);
        uint64_t v128 = v443;
        int v439 = closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)((Swift::UInt64 *)&v454, v436, v434, (uint64_t)v435, v437);
        uint64_t v443 = v128;
        outlined consume of Text.Effect.Composition.Operation(v127, v125, v126, v124, v440, v441, v442, v444);
        if (v439) {
          break;
        }
        v116 += 11;
        uint64_t v115 = v438 - 1;
        if (v438 == 1)
        {
          uint64_t v114 = v419;
          swift_bridgeObjectRelease();
          uint64_t v107 = v423;
          uint64_t v108 = v424;
          LOBYTE(v109) = v420;
          outlined consume of Text.Layout.Line.Line(v423, v424, v420);
          swift_bridgeObjectRelease();
          LODWORD(v442) = 0;
          goto LABEL_87;
        }
      }
      uint64_t v114 = v419;
      swift_bridgeObjectRelease();
      uint64_t v107 = v423;
      uint64_t v108 = v424;
      LOBYTE(v109) = v420;
      outlined consume of Text.Layout.Line.Line(v423, v424, v420);
      swift_bridgeObjectRelease();
      LODWORD(v442) = 1;
LABEL_87:
      unint64_t v44 = v414;
    }
    else
    {
      LODWORD(v442) = 0;
    }
    v453[0] = MEMORY[0x263F8EE88];
    uint64_t v454 = (uint64_t)v107;
    uint64_t v455 = v108;
    LOBYTE(v456) = v109;
    uint64_t v457 = v111;
    uint64_t v458 = v110;
    LODWORD(v459) = v426;
    uint64_t v460 = v113;
    unint64_t v461 = v112;
    uint64_t v462 = v114;
    uint64_t v80 = (uint64_t)&v454;
    Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)v453);
    int64_t v129 = 0;
    uint64_t v130 = v453[0];
    uint64_t v131 = v453[0] + 56;
    uint64_t v132 = 1 << *(unsigned char *)(v453[0] + 32);
    if (v132 < 64) {
      uint64_t v133 = ~(-1 << v132);
    }
    else {
      uint64_t v133 = -1;
    }
    unint64_t v134 = v133 & *(void *)(v453[0] + 56);
    uint64_t v444 = (unint64_t)(v132 + 63) >> 6;
    while (1)
    {
      if (v134)
      {
        unint64_t v136 = __clz(__rbit64(v134));
        v134 &= v134 - 1;
        unint64_t v137 = v136 | (v129 << 6);
      }
      else
      {
        if (__OFADD__(v129++, 1)) {
          goto LABEL_232;
        }
        if (v129 >= v444)
        {
LABEL_130:
          unint64_t v414 = v44;
          swift_release();
          double v164 = v423;
          uint64_t v165 = v424;
          uint64_t v454 = (uint64_t)v423;
          uint64_t v455 = v424;
          char v166 = v420;
          LOBYTE(v456) = v420;
          uint64_t v457 = v111;
          uint64_t v458 = v110;
          LODWORD(v459) = v426;
          uint64_t v460 = v113;
          unint64_t v461 = v112;
          uint64_t v167 = v419;
          uint64_t v462 = v419;
          outlined copy of Text.Layout.Line.Line(v423, v424, v420);
          swift_bridgeObjectRetain();
          double v168 = TextRenderLayer.drawingBounds(for:segmentIndex:allowingNull:)(&v454, *(uint64_t *)&y, 0);
          CGFloat v170 = v169;
          CGFloat v172 = v171;
          CGFloat v174 = v173;
          outlined consume of Text.Layout.Line.Line(v164, v165, v166);
          swift_bridgeObjectRelease();
          uint64_t v175 = v436;
          swift_bridgeObjectRetain();
          uint64_t v176 = v435;
          swift_retain();
          uint64_t v177 = v437;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined copy of Text.Layout.Line.Line(v164, v165, v166);
          uint64_t v178 = swift_bridgeObjectRetain();
          uint64_t v179 = v443;
          int v180 = specialized Sequence.contains(where:)(v178, v175, v434, (uint64_t)v176, v177);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of Text.Layout.Line.Line(v164, v165, v166);
          swift_bridgeObjectRelease();
          LODWORD(v444) = v180;
          LODWORD(v176) = v406 | v180;
          uint64_t v181 = *v395;
          v453[0] = MEMORY[0x263F8EE88];
          uint64_t v454 = (uint64_t)v164;
          uint64_t v455 = v165;
          LOBYTE(v456) = v166;
          uint64_t v457 = v111;
          uint64_t v458 = v110;
          LODWORD(v459) = v426;
          uint64_t v460 = v113;
          unint64_t v461 = v112;
          uint64_t v462 = v167;
          swift_bridgeObjectRetain();
          Text.Effect.Composition.appendIdentifiers(to:)((uint64_t)v453);
          uint64_t v182 = specialized _NativeSet.intersection(_:)(v453[0], v181, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
          swift_bridgeObjectRelease();
          uint64_t v183 = *(void *)(v182 + 16);
          swift_release();
          int v406 = (int)v176;
          uint64_t v443 = v179;
          if (!v183)
          {
            uint64_t v80 = v472;
            uint64_t v202 = swift_bridgeObjectRetain();
            uint64_t v203 = specialized Array._getCount()(v202);
            swift_bridgeObjectRelease();
            if (!v203)
            {
              uint64_t v242 = (objc_class *)type metadata accessor for StaticEffectLayer();
              char v243 = (char *)objc_allocWithZone(v242);
              uint64_t v244 = &v243[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
              uint64_t v245 = v400;
              *(void *)uint64_t v244 = v399;
              *((void *)v244 + 1) = v245;
              uint64_t v246 = v423;
              uint64_t v247 = v424;
              *((void *)v244 + 2) = v401;
              *((void *)v244 + 3) = v246;
              *((void *)v244 + 4) = v247;
              v244[40] = v166;
              *((void *)v244 + 6) = v111;
              *((void *)v244 + 7) = v110;
              *((_DWORD *)v244 + 16) = v426;
              *((void *)v244 + 9) = v113;
              *((void *)v244 + 10) = v112;
              *((void *)v244 + 11) = v167;
              *(CGFloat *)&v243[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_segmentIndex] = y;
              outlined copy of Text.Layout.Line.Line(v246, v247, v166);
              v449.receiver = v243;
              v449.super_class = v242;
              swift_bridgeObjectRetain();
              unint64_t v215 = (unint64_t)objc_msgSendSuper2(&v449, sel_init);
              objc_msgSend((id)v215, sel_setOpaque_, 0);
              uint64_t v78 = v427;
              uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
              unint64_t v44 = v414;
              goto LABEL_157;
            }
            uint64_t v204 = specialized Array._getCount()(v80);
            unint64_t v44 = v414;
            if (!v204) {
              goto LABEL_243;
            }
            if (!specialized Array._getCount()(v80))
            {
LABEL_244:
              __break(1u);
              goto LABEL_245;
            }
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v80 & 0xC000000000000001) == 0, v80);
            if ((v80 & 0xC000000000000001) != 0) {
              uint64_t v205 = (unsigned char *)MEMORY[0x24C523D60](0, v80);
            }
            else {
              uint64_t v205 = *(id *)(v80 + 32);
            }
            uint64_t v206 = v205;
            uint64_t v207 = specialized Array._getCount()(v80);
            uint64_t v78 = v427;
            if (v207)
            {
              specialized Array.replaceSubrange<A>(_:with:)(0, 1);
              uint64_t v208 = &v206[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content];
              uint64_t v209 = *(void **)&v206[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                                   + 24];
              uint64_t v210 = *(void *)&v206[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content
                                    + 32];
              char v211 = v206[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_content + 40];
              uint64_t v212 = v400;
              *(void *)uint64_t v208 = v399;
              *((void *)v208 + 1) = v212;
              uint64_t v213 = v423;
              uint64_t v214 = v424;
              *((void *)v208 + 2) = v401;
              *((void *)v208 + 3) = v213;
              *((void *)v208 + 4) = v214;
              char v166 = v420;
              v208[40] = v420;
              *((void *)v208 + 6) = v111;
              *((void *)v208 + 7) = v110;
              *((_DWORD *)v208 + 16) = v426;
              *((void *)v208 + 9) = v113;
              *((void *)v208 + 10) = v112;
              *((void *)v208 + 11) = v167;
              outlined copy of Text.Layout.Line.Line(v213, v214, v166);
              swift_bridgeObjectRetain();
              unint64_t v215 = v206;
              outlined consume of Text.Layout.Line.Line(v209, v210, v211);
              swift_bridgeObjectRelease();
              *(CGFloat *)(v215
                         + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417StaticEffectLayer_segmentIndex) = y;
              uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
LABEL_157:
              objc_msgSend((id)v215, sel_setNeedsDisplay);

              uint64_t v248 = v422;
              swift_beginAccess();
              id v249 = (id)v215;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              uint64_t v250 = *(void *)(*v248 + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v250);
              uint64_t v251 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v250, v215 | 0xC000000000000000);
              _ViewInputs.base.modify(v251, v252);
              swift_endAccess();
              unint64_t v227 = (unint64_t)v249;
              objc_msgSend((id)v227, (SEL)v77[343], v411);
              CGFloat v34 = v417;
              TextRenderLayer.pixelLength.getter();
              double v236 = CGRect.roundedCoordinates(toMultipleOf:)(v253, v253, v168, v170, v172, v174);
              CGFloat v237 = v254;
              CGFloat v234 = v255;
              CGFloat v235 = v256;

              outlined consume of Text.Layout.Line.Line(v423, v424, v166);
              swift_bridgeObjectRelease();
              int v232 = v442;
              goto LABEL_210;
            }
LABEL_248:
            __break(1u);
LABEL_249:
            swift_bridgeObjectRetain();
            uint64_t v354 = _CocoaArrayWrapper.endIndex.getter();
            if (!v354) {
              goto LABEL_250;
            }
LABEL_224:
            if (v354 >= 1)
            {
              for (uint64_t i = 0; i != v354; ++i)
              {
                if ((v80 & 0xC000000000000001) != 0) {
                  id v356 = (id)MEMORY[0x24C523D60](i, v80);
                }
                else {
                  id v356 = *(id *)(v80 + 8 * i + 32);
                }
                CGFloat v357 = v356;
                objc_msgSend(v356, sel_removeFromSuperlayer);
              }
              goto LABEL_250;
            }
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x245B5646CLL);
          }
          uint64_t v80 = v471;
          uint64_t v184 = swift_bridgeObjectRetain();
          uint64_t v185 = specialized Array._getCount()(v184);
          swift_bridgeObjectRelease();
          uint64_t v441 = *(void *)&v170;
          if (v185)
          {
            uint64_t v186 = specialized Array._getCount()(v80);
            unint64_t v44 = v414;
            if (v186)
            {
              if (specialized Array._getCount()(v80))
              {
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v80 & 0xC000000000000001) == 0, v80);
                CGFloat v187 = v172;
                if ((v80 & 0xC000000000000001) != 0) {
                  CGRect v188 = (unsigned char *)MEMORY[0x24C523D60](0, v80);
                }
                else {
                  CGRect v188 = *(id *)(v80 + 32);
                }
                CGRect v189 = v188;
                CGFloat v190 = v174;
                uint64_t v191 = specialized Array._getCount()(v80);
                uint64_t v78 = v427;
                if (v191)
                {
                  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
                  CGRect v192 = &v189[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
                  CGRect v193 = *(void **)&v189[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                       + 24];
                  uint64_t v194 = *(void *)&v189[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                        + 32];
                  char v195 = v189[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                            + 40];
                  uint64_t v196 = v400;
                  *(void *)CGRect v192 = v399;
                  *((void *)v192 + 1) = v196;
                  uint64_t v197 = v423;
                  uint64_t v198 = v424;
                  *((void *)v192 + 2) = v401;
                  *((void *)v192 + 3) = v197;
                  *((void *)v192 + 4) = v198;
                  char v199 = v420;
                  v192[40] = v420;
                  *((void *)v192 + 6) = v111;
                  *((void *)v192 + 7) = v110;
                  *((_DWORD *)v192 + 16) = v426;
                  *((void *)v192 + 9) = v113;
                  *((void *)v192 + 10) = v112;
                  *((void *)v192 + 11) = v167;
                  outlined copy of Text.Layout.Line.Line(v197, v198, v199);
                  swift_bridgeObjectRetain();
                  unint64_t v200 = v189;
                  outlined consume of Text.Layout.Line.Line(v193, v194, v195);
                  swift_bridgeObjectRelease();
                  *(CGFloat *)(v200
                             + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex) = y;
                  objc_msgSend((id)v200, sel_setNeedsDisplay);

                  double v201 = v411;
                  uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                  goto LABEL_146;
                }
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
                goto LABEL_247;
              }
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
              goto LABEL_244;
            }
LABEL_239:
            __break(1u);
            goto LABEL_240;
          }
          CGFloat v187 = v172;
          CGFloat v190 = v174;
          uint64_t v216 = (objc_class *)type metadata accessor for DynamicEffectLayer();
          uint64_t v217 = (char *)objc_allocWithZone(v216);
          uint64_t v218 = &v217[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content];
          uint64_t v219 = v400;
          *(void *)uint64_t v218 = v399;
          *((void *)v218 + 1) = v219;
          uint64_t v220 = v423;
          uint64_t v221 = v424;
          *((void *)v218 + 2) = v401;
          *((void *)v218 + 3) = v220;
          *((void *)v218 + 4) = v221;
          v218[40] = v166;
          *((void *)v218 + 6) = v111;
          *((void *)v218 + 7) = v110;
          *((_DWORD *)v218 + 16) = v426;
          *((void *)v218 + 9) = v113;
          *((void *)v218 + 10) = v112;
          *((void *)v218 + 11) = v167;
          *(CGFloat *)&v217[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex] = y;
          outlined copy of Text.Layout.Line.Line(v220, v221, v166);
          v450.receiver = v217;
          v450.super_class = v216;
          swift_bridgeObjectRetain();
          unint64_t v200 = (unint64_t)objc_msgSendSuper2(&v450, sel_init);
          objc_msgSend((id)v200, sel_setOpaque_, 0);
          objc_msgSend((id)v200, sel_setNeedsDisplay);

          uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          double v201 = v411;
          objc_msgSend((id)v200, sel_setContentsScale_, v411);
          uint64_t v78 = v427;
          unint64_t v44 = v414;
LABEL_146:
          uint64_t v222 = v422;
          swift_beginAccess();
          id v223 = (id)v200;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v224 = *(void *)(*v222 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v224);
          uint64_t v225 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v224, v200 | 0x8000000000000000);
          _ViewInputs.base.modify(v225, v226);
          swift_endAccess();
          unint64_t v227 = (unint64_t)v223;
          objc_msgSend((id)v227, (SEL)v77[343], v201);
          if ((v444 & 1) == 0)
          {
            objc_msgSend((id)v227, sel_setHidden_, 0);
            double v238 = 16.0;
            CGFloat v34 = v417;
LABEL_155:
            int v232 = v442;
            double v236 = CGRect.roundedCoordinates(toMultipleOf:)(v238, v238, v168, *(CGFloat *)&v441, v187, v190);
            CGFloat v237 = v239;
            CGFloat v234 = v240;
            CGFloat v235 = v241;

            outlined consume of Text.Layout.Line.Line(v423, v424, v420);
            swift_bridgeObjectRelease();
            goto LABEL_210;
          }
          uint64_t v228 = v423;
          uint64_t v229 = v424;
          uint64_t v454 = (uint64_t)v423;
          uint64_t v455 = v424;
          char v230 = v420;
          LOBYTE(v456) = v420;
          uint64_t v457 = v111;
          uint64_t v458 = v110;
          LODWORD(v459) = v426;
          uint64_t v460 = v113;
          unint64_t v461 = v112;
          uint64_t v462 = v419;
          CGFloat v34 = v417;
          v453[0] = *(void *)&v417[v393];
          outlined copy of Text.Layout.Line.Line(v423, v424, v420);
          swift_bridgeObjectRetain();
          uint64_t v80 = Text.Effect.Composition.needsUpdate(at:context:)(v453, v436, v434, v435, v437);
          outlined consume of Text.Layout.Line.Line(v228, v229, v230);
          swift_bridgeObjectRelease();
          if ((v80 & 1) == 0)
          {
            objc_msgSend((id)v227, sel_setHidden_, 0);
            TextRenderLayer.pixelLength.getter();
            uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
            goto LABEL_155;
          }
          swift_beginAccess();
          *(void *)&CGFloat v231 = *(void *)&y + 1;
          int v232 = v442;
          if (__OFADD__(*(void *)&y, 1)) {
            goto LABEL_246;
          }
          uint64_t v77 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          if (*(uint64_t *)&v231 < *(uint64_t *)&y)
          {
LABEL_247:
            __break(1u);
            goto LABEL_248;
          }
          CGFloat v451 = y;
          uint64_t v452 = *(void *)&y + 1;
          if (*(void *)&y != *(void *)&v231)
          {
            uint64_t v233 = (void (*)(void, void))RangeSet._ranges.modify();
            type metadata accessor for RangeSet<Int>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8D6E0], MEMORY[0x263F8ED78]);
            RangeSet.Ranges._insert(contentsOf:)();
            v233(&v454, 0);
          }
          swift_endAccess();
          objc_msgSend((id)v227, sel_setHidden_, 1);
          outlined consume of Text.Layout.Line.Line(v423, v424, v420);

          swift_bridgeObjectRelease();
          CGFloat v234 = 0.0;
          CGFloat v235 = 0.0;
          double v236 = 0.0;
          CGFloat v237 = 0.0;
LABEL_210:
          objc_msgSend((id)v227, sel_setDelegate_, v34);
          objc_msgSend(v34, sel_addSublayer_, v227);
          if (v232)
          {
            uint64_t v340 = MEMORY[0x24C527E00](v397);
            if (v340)
            {
              unint64_t v341 = (void *)v340;
              LayerGeometryObserver.clip(bounds:for:)((void *)v227, v236, v237, v234, v235);
              double v236 = v342;
              CGFloat v237 = v343;
              CGFloat v234 = v344;
              CGFloat v235 = v345;
            }
          }
          objc_msgSend((id)v227, sel_setFrame_, v236, v237, v234, v235);
          objc_msgSend((id)v227, sel_setBounds_, v236, v237, v234, v235);
          uint64_t v346 = v429;
          swift_beginAccess();
          uint64_t v347 = *(void **)v346;
          char v348 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v346 = v347;
          if ((v348 & 1) == 0)
          {
            uint64_t v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v347[2] + 1, 1, v347);
            *(void *)uint64_t v429 = v347;
          }
          unint64_t v350 = v347[2];
          unint64_t v349 = v347[3];
          if (v350 >= v349 >> 1)
          {
            uint64_t v353 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v349 > 1), v350 + 1, 1, v347);
            *(void *)uint64_t v429 = v353;
          }
          uint64_t v351 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v350, 0.0, 0.0);
          _ViewInputs.base.modify(v351, v352);
          swift_endAccess();

          outlined destroy of Text.Effect.RenderSegmentation.Segment(v433, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          unint64_t v74 = v428;
          goto LABEL_58;
        }
        unint64_t v139 = *(void *)(v131 + 8 * v129);
        if (!v139)
        {
          int64_t v140 = v129 + 1;
          if (v129 + 1 >= v444) {
            goto LABEL_130;
          }
          unint64_t v139 = *(void *)(v131 + 8 * v140);
          if (!v139)
          {
            int64_t v140 = v129 + 2;
            if (v129 + 2 >= v444) {
              goto LABEL_130;
            }
            unint64_t v139 = *(void *)(v131 + 8 * v140);
            if (!v139)
            {
              int64_t v140 = v129 + 3;
              if (v129 + 3 >= v444) {
                goto LABEL_130;
              }
              unint64_t v139 = *(void *)(v131 + 8 * v140);
              if (!v139)
              {
                while (1)
                {
                  int64_t v129 = v140 + 1;
                  if (__OFADD__(v140, 1)) {
                    goto LABEL_233;
                  }
                  if (v129 >= v444) {
                    goto LABEL_130;
                  }
                  unint64_t v139 = *(void *)(v131 + 8 * v129);
                  ++v140;
                  if (v139) {
                    goto LABEL_106;
                  }
                }
              }
            }
          }
          int64_t v129 = v140;
        }
LABEL_106:
        unint64_t v134 = (v139 - 1) & v139;
        unint64_t v137 = __clz(__rbit64(v139)) + (v129 << 6);
      }
      uint64_t v141 = *(void *)(*(void *)(v130 + 48) + 8 * v137);
      uint64_t v142 = v446;
      swift_beginAccess();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v44);
      char v143 = swift_isUniquelyReferenced_nonNull_native();
      v453[0] = *v142;
      uint64_t v80 = v453[0];
      *uint64_t v142 = 0x8000000000000000;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v141);
      uint64_t v145 = *(void *)(v80 + 16);
      BOOL v146 = (v144 & 1) == 0;
      uint64_t v147 = v145 + v146;
      if (__OFADD__(v145, v146))
      {
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
      char v148 = v144;
      if (*(void *)(v80 + 24) >= v147)
      {
        if ((v143 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v80 = v453[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v147, v143);
        uint64_t v80 = v453[0];
        uint64_t v149 = specialized __RawDictionaryStorage.find<A>(_:)(v141);
        if ((v148 & 1) != (v150 & 1)) {
          goto LABEL_312;
        }
        unint64_t v44 = v149;
      }
      uint64_t v151 = v446;
      uint64_t *v446 = v80;
      swift_bridgeObjectRelease();
      uint64_t v152 = (void *)*v151;
      uint64_t v153 = 8 * v44;
      if (v148)
      {
        uint64_t v154 = swift_bridgeObjectRetain();
      }
      else
      {
        v152[(v44 >> 6) + 8] |= 1 << v44;
        *(void *)(v152[6] + 8 * v44) = v141;
        *(void *)(v152[7] + 8 * v44) = MEMORY[0x263F8EE88];
        uint64_t v155 = v152[2];
        uint64_t v80 = v155 + 1;
        BOOL v156 = __OFADD__(v155, 1);
        uint64_t v154 = swift_bridgeObjectRetain();
        if (v156) {
          goto LABEL_231;
        }
        *(void *)(v154 + 16) = v80;
      }
      uint64_t v157 = *(void *)(v154 + 56);
      swift_bridgeObjectRelease();
      uint64_t v80 = *(void *)(v157 + 8 * v44);
      uint64_t v158 = *(void *)&y;
      uint64_t v159 = static Hasher._hash(seed:_:)();
      uint64_t v160 = -1 << *(unsigned char *)(v80 + 32);
      unint64_t v161 = v159 & ~v160;
      if (((*(void *)(v80 + 56 + ((v161 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v161) & 1) == 0) {
        goto LABEL_92;
      }
      uint64_t v162 = *(void *)(v80 + 48);
      if (*(void *)(v162 + 8 * v161) != v158) {
        break;
      }
LABEL_93:
      swift_endAccess();
      unint64_t v44 = (unint64_t)specialized thunk for @callee_guaranteed () -> (@owned Set<Int>);
    }
    uint64_t v163 = ~v160;
    while (1)
    {
      unint64_t v161 = (v161 + 1) & v163;
      if (((*(void *)(v80 + 56 + ((v161 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v161) & 1) == 0) {
        break;
      }
      if (*(void *)(v162 + 8 * v161) == v158) {
        goto LABEL_93;
      }
    }
LABEL_92:
    char v135 = swift_isUniquelyReferenced_nonNull_native();
    v453[0] = *(void *)(v157 + v153);
    *(void *)(v157 + v153) = 0x8000000000000000;
    uint64_t v80 = (uint64_t)v453;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v158, v161, v135);
    *(void *)(v157 + v153) = v453[0];
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = v474;
  if (v474 >> 62) {
    goto LABEL_249;
  }
  uint64_t v354 = *(void *)((v474 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v354) {
    goto LABEL_224;
  }
LABEL_250:
  swift_bridgeObjectRelease();
  unint64_t v358 = v473;
  if (v473 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v359 = _CocoaArrayWrapper.endIndex.getter();
    if (v359)
    {
LABEL_252:
      if (v359 < 1) {
        goto LABEL_308;
      }
      for (uint64_t j = 0; j != v359; ++j)
      {
        if ((v358 & 0xC000000000000001) != 0) {
          id v361 = (id)MEMORY[0x24C523D60](j, v358);
        }
        else {
          id v361 = *(id *)(v358 + 8 * j + 32);
        }
        uint64_t v362 = v361;
        objc_msgSend(v361, sel_removeFromSuperlayer);
      }
    }
  }
  else
  {
    uint64_t v359 = *(void *)((v473 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v359) {
      goto LABEL_252;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v363 = v472;
  uint64_t v364 = swift_bridgeObjectRetain();
  uint64_t v365 = specialized Array._getCount()(v364);
  if (v365)
  {
    uint64_t v366 = v365;
    if (v365 < 1) {
      goto LABEL_309;
    }
    for (uint64_t k = 0; k != v366; ++k)
    {
      if ((v363 & 0xC000000000000001) != 0) {
        id v368 = (id)MEMORY[0x24C523D60](k, v363);
      }
      else {
        id v368 = *(id *)(v363 + 8 * k + 32);
      }
      unint64_t v369 = v368;
      objc_msgSend(v368, sel_removeFromSuperlayer);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v370 = v471;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v371 = specialized Array._getCount()(v370);
  if (v371)
  {
    uint64_t v372 = v371;
    if (v371 < 1) {
      goto LABEL_310;
    }
    for (uint64_t m = 0; m != v372; ++m)
    {
      if ((v370 & 0xC000000000000001) != 0) {
        id v374 = (id)MEMORY[0x24C523D60](m, v370);
      }
      else {
        id v374 = *(id *)(v370 + 8 * m + 32);
      }
      uint64_t v375 = v374;
      objc_msgSend(v374, sel_removeFromSuperlayer);
    }
  }
  swift_bridgeObjectRelease();
  outlined release of TextRenderLayer.Layout?(v465, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  if ((v406 & 1) == 0)
  {
    CGFloat v34 = v417;
LABEL_280:
    uint64_t v382 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer;
    uint64_t v383 = *(void **)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer];
    if (v383)
    {
      objc_msgSend(v383, sel_removeFromSuperlayer);
      unint64_t v384 = *(void **)&v34[v382];
      *(void *)&v34[v382] = 0;
      goto LABEL_282;
    }
    goto LABEL_283;
  }
  uint64_t v376 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer;
  CGFloat v34 = v417;
  if (!*(void *)&v417[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer])
  {
    id v377 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SharedDynamicLayer()), sel_init);
    objc_msgSend(v377, sel_setDelegate_, v34);
    double v378 = 1.0;
    if (objc_msgSend(v34, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v379 = swift_dynamicCastClass();
      if (v379
        && (uint64_t v380 = MEMORY[0x24C527E00](v379 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)
      {
        unint64_t v381 = (void *)v380;
        double v378 = *(double *)(v380 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    objc_msgSend(v377, sel_setContentsScale_, v378);
    unint64_t v384 = *(void **)&v34[v376];
    *(void *)&v34[v376] = v377;
LABEL_282:
  }
LABEL_283:
  TextRenderLayer.updateSharedDrawingBounds()();
  if (*(void *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer]) {
    objc_msgSend(v34, sel_addSublayer_);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = v408;
  char v43 = v34[v408];
  if ((v43 & 0x10) != 0)
  {
    v43 &= ~0x10u;
    v34[v408] = v43;
    if ((v43 & 4) != 0) {
      goto LABEL_20;
    }
LABEL_287:
    if ((v43 & 2) != 0) {
      goto LABEL_21;
    }
LABEL_288:
    if ((v43 & 0x40) == 0) {
      goto LABEL_289;
    }
LABEL_22:
    v34[v28] = v43 & 0xBF;
    TextRenderLayer.updateClippingBounds()();
    TextRenderLayer.updateSharedDrawingBounds()();
    uint64_t v28 = v408;
    char v43 = v34[v408];
    if ((v43 & 0x10) == 0) {
      goto LABEL_305;
    }
LABEL_290:
    v34[v28] = v43 & 0xEF;
    id v385 = objc_msgSend(v34, sel_sublayers);
    if (!v385) {
      goto LABEL_305;
    }
    uint64_t v386 = v385;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    unint64_t v387 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v387 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v388 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v388) {
        goto LABEL_293;
      }
    }
    else
    {
      uint64_t v388 = *(void *)((v387 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v388)
      {
LABEL_293:
        if (v388 < 1)
        {
          __break(1u);
          goto LABEL_307;
        }
        for (uint64_t n = 0; n != v388; ++n)
        {
          if ((v387 & 0xC000000000000001) != 0) {
            id v390 = (id)MEMORY[0x24C523D60](n, v387);
          }
          else {
            id v390 = *(id *)(v387 + 8 * n + 32);
          }
          uint64_t v391 = v390;
          objc_msgSend(v390, sel_setNeedsDisplay);
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_305;
  }
  if ((v34[v408] & 4) == 0) {
    goto LABEL_287;
  }
LABEL_20:
  v34[v28] = v43 & 0xFB;
  TextRenderLayer.computeLayoutBoundsNaturalOutsets()();
  uint64_t v28 = v408;
  char v43 = v34[v408];
  if ((v43 & 2) == 0) {
    goto LABEL_288;
  }
LABEL_21:
  v34[v28] = v43 & 0xFD;
  TextRenderLayer.displaceSublayers()();
  uint64_t v28 = v408;
  char v43 = v34[v408];
  if ((v43 & 0x40) != 0) {
    goto LABEL_22;
  }
LABEL_289:
  if ((v43 & 0x10) != 0) {
    goto LABEL_290;
  }
LABEL_305:
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v44);
}

Swift::Void __swiftcall TextEffectsRenderer.refreshRenderingAttributes()()
{
  unint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  if (v1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24C523D60](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v4, sel_textElement);

      if (!v7)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();

  specialized TextEffectsRenderer.updateKeyframes(with:)(v0);
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<Int>)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE88];
}

uint64_t TextRenderLayer.computeLayoutBoundsNaturalOutsets()()
{
  v51[18] = *MEMORY[0x263EF8340];
  _sypSgWObTm_1(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v50, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg(v51);
  if (result == 1)
  {
    uint64_t v2 = (_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets);
    *uint64_t v2 = 0u;
    v2[1] = 0u;
  }
  else
  {
    double x = *MEMORY[0x263F001A0];
    double y = *(double *)(MEMORY[0x263F001A0] + 8);
    double width = *(double *)(MEMORY[0x263F001A0] + 16);
    double height = *(double *)(MEMORY[0x263F001A0] + 24);
    uint64_t v7 = v51[0];
    uint64_t v8 = *(void *)(v51[0] + 16);
    if (v8)
    {
      outlined release of TextRenderLayer.Layout?(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
      swift_bridgeObjectRetain();
      uint64_t v9 = (double *)(v7 + 64);
      do
      {
        uint64_t v16 = (void *)*((void *)v9 - 4);
        uint64_t v17 = *((void *)v9 - 3);
        char v18 = *((unsigned char *)v9 - 16);
        double v20 = *(v9 - 1);
        double v19 = *v9;
        if (v18)
        {
          outlined copy of Text.Layout.Line.Line(v16, v17, 1);
          objc_msgSend(v16, sel_typographicBounds);
          double TypographicBounds = v10;
          double v13 = v12;
          objc_msgSend(v16, sel_glyphOrigin);
          double v15 = v13 - v14;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v16, v17, 0);
          outlined copy of Text.Layout.Line.Line(v16, v17, 0);
          uint64_t v21 = v16;
          CGFloat descent = 0.0;
          ascent[0] = 0.0;
          CGFloat leading = 0.0;
          double TypographicBounds = CTLineGetTypographicBounds(v21, ascent, &descent, &leading);

          outlined consume of Text.Layout.Line.Line(v16, v17, 0);
          double v15 = descent;
          double v14 = ascent[0];
        }
        v62.origin.double x = v20 + 0.0;
        v62.origin.double y = v19 + 0.0 - v14;
        v62.size.double height = v15 + v14;
        v52.origin.double x = x;
        v52.origin.double y = y;
        v52.size.double width = width;
        v52.size.double height = height;
        v62.size.double width = TypographicBounds;
        CGRect v53 = CGRectUnion(v52, v62);
        double x = v53.origin.x;
        double y = v53.origin.y;
        double width = v53.size.width;
        double height = v53.size.height;
        outlined consume of Text.Layout.Line.Line(v16, v17, v18);
        v9 += 6;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      _sypSgWObTm_1((uint64_t)v50, (uint64_t)ascent, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
      outlined retain of TextRenderLayer.Layout((uint64_t)ascent);
    }
    v54.origin.double x = x;
    v54.origin.double y = y;
    v54.size.double width = width;
    v54.size.double height = height;
    BOOL IsNull = CGRectIsNull(v54);
    double v23 = 0.0;
    if (IsNull) {
      double v24 = 0.0;
    }
    else {
      double v24 = width;
    }
    if (IsNull) {
      double v25 = 0.0;
    }
    else {
      double v25 = height;
    }
    CGFloat v43 = v25;
    if (IsNull) {
      double v26 = 0.0;
    }
    else {
      double v26 = y;
    }
    if (!IsNull) {
      double v23 = x;
    }
    double v27 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds);
    double v28 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8);
    CGFloat v31 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 16);
    CGFloat v32 = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 24);
    CGFloat v33 = v23 + v27;
    CGFloat v29 = v33;
    CGFloat v34 = v26 + v28;
    CGFloat v30 = v34;
    CGFloat v35 = v24;
    CGFloat rect_8 = v24;
    double MinY = CGRectGetMinY(*(CGRect *)(&v24 - 2));
    v55.origin.double x = v27;
    v55.origin.double y = v28;
    v55.size.double width = v31;
    v55.size.double height = v32;
    double rect_24 = MinY - CGRectGetMinY(v55);
    v56.origin.double x = v29;
    v56.origin.double y = v30;
    v56.size.double width = v35;
    v56.size.double height = v43;
    double MinX = CGRectGetMinX(v56);
    v57.origin.double x = v27;
    v57.origin.double y = v28;
    v57.size.double width = v31;
    v57.size.double height = v32;
    double rect_16 = MinX - CGRectGetMinX(v57);
    v58.origin.double x = v27;
    v58.origin.double y = v28;
    v58.size.double width = v31;
    v58.size.double height = v32;
    double MaxY = CGRectGetMaxY(v58);
    v59.origin.double x = v29;
    v59.origin.double y = v30;
    v59.size.double width = rect_8;
    v59.size.double height = v43;
    double v39 = MaxY - CGRectGetMaxY(v59);
    v60.origin.double x = v27;
    v60.origin.double y = v28;
    v60.size.double width = v31;
    v60.size.double height = v32;
    double MaxX = CGRectGetMaxX(v60);
    v61.origin.double x = v29;
    v61.origin.double y = v30;
    v61.size.double width = rect_8;
    v61.size.double height = v43;
    double v41 = CGRectGetMaxX(v61);
    uint64_t result = (uint64_t)outlined release of TextRenderLayer.Layout?(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    char v42 = (double *)(v0 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets);
    *char v42 = rect_24;
    v42[1] = rect_16;
    v42[2] = v39;
    v42[3] = MaxX - v41;
  }
  return result;
}

void *TextRenderLayer.displaceSublayers()()
{
  uint64_t v780 = *MEMORY[0x263EF8340];
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v702 = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v663 = (char *)&v626 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  CGRect v645 = (char *)&v626 - v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v691 = (char *)&v626 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v669 = (char *)&v626 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v683 = (char *)&v626 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v679 = (char *)&v626 - v13;
  MEMORY[0x270FA5388](v14);
  double v648 = (char *)&v626 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v692 = (char *)&v626 - v17;
  MEMORY[0x270FA5388](v18);
  unint64_t v674 = (char *)&v626 - v19;
  uint64_t v647 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0);
  MEMORY[0x270FA5388](v647);
  uint64_t v646 = (uint64_t)&v626 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v642 = (uint64_t)&v626 - v22;
  uint64_t v676 = type metadata accessor for Text.Effect.RenderSegmentation.Segment(0);
  uint64_t v644 = *(void *)(v676 - 8);
  MEMORY[0x270FA5388](v676);
  uint64_t v658 = (double *)((char *)&v626 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  uint64_t v661 = (uint64_t)&v626 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v677 = (uint64_t)&v626 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v649 = (uint64_t)&v626 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v650 = (uint64_t)&v626 - v31;
  uint64_t v659 = v0;
  _sypSgWObTm_1((uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout], (uint64_t)v770, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  _sypSgWObTm_1((uint64_t)v770, (uint64_t)&v771, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  uint64_t result = (void *)_s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOg((uint64_t *)&v771);
  if (result == 1) {
    return result;
  }
  v746[6] = v777;
  v746[7] = v778;
  v746[8] = v779;
  v746[2] = v773;
  v746[3] = v774;
  v746[5] = v776;
  v746[4] = v775;
  v746[0] = v771;
  v746[1] = v772;
  uint64_t v670 = v773;
  uint64_t v33 = specialized Array._getCount()(v773);
  if (v33 < 0) {
    goto LABEL_445;
  }
  double v35 = *MEMORY[0x263F001A0];
  double v34 = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v36 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v37 = *(double *)(MEMORY[0x263F001A0] + 24);
  if (!v33)
  {
    _sypSgWObTm_1((uint64_t)v770, (uint64_t)v761, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
    outlined retain of TextRenderLayer.Layout((uint64_t)v761);
    goto LABEL_375;
  }
  double v635 = (uint64_t *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
  uint64_t v634 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController;
  uint64_t v639 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
  uint64_t v637 = v33;
  double v638 = &v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements];
  _sypSgWObTm_1((uint64_t)v770, (uint64_t)v761, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
  outlined retain of TextRenderLayer.Layout((uint64_t)v761);
  int64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = v644;
  uint64_t v41 = v670;
  uint64_t v42 = v670 + ((*(unsigned __int8 *)(v644 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v644 + 80));
  uint64_t v671 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v685 = (void (**)(char *, uint64_t))(v2 + 8);
  CGFloat v628 = v37;
  CGFloat v629 = v36;
  CGFloat height = v37;
  CGFloat width = v36;
  double v626 = v35;
  double v627 = v34;
  CGFloat v630 = v35;
  CGFloat v631 = v34;
  double v636 = 0.0;
  uint64_t v664 = v42;
  while (2)
  {
    int64_t v43 = v38;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v38, 1, v41);
    uint64_t v660 = *(void *)(v40 + 72);
    uint64_t v44 = v42 + v660 * v43;
    uint64_t v45 = v650;
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v44, v650, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v45, v649, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      uint64_t v47 = v39;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v48 = v642;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v649, v642, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        uint64_t v49 = *(void *)(v48 + *(int *)(v647 + 28));
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v48, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
      }
      else
      {
        uint64_t v49 = *(void *)v649;
        outlined consume of Text.Layout.Line.Line(*(void **)(v649 + 24), *(void *)(v649 + 32), *(unsigned char *)(v649 + 40));
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v49 = *(void *)(v649 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = v39;
    }
    outlined destroy of Text.Effect.RenderSegmentation.Segment(v650, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    outlined release of TextRenderLayer.Layout?(v770, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of TextRenderLayer.Layout?);
    specialized Collection.prefix(while:)(v43, v637, (uint64_t)v746, v49);
    int64_t v51 = v50;
    uint64_t v53 = v52;
    outlined release of TextRenderLayer.Layout?(v770, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
    uint64_t v54 = *v635;
    uint64_t v726 = v635[1];
    uint64_t v55 = *(void *)&v659[v634];
    swift_beginAccess();
    uint64_t v56 = v53;
    uint64_t v57 = *(void *)(v55 + 112);
    BOOL v611 = v51 == v53;
    uint64_t v58 = v664;
    uint64_t v678 = v56;
    uint64_t v729 = v54;
    uint64_t v728 = v55;
    uint64_t v727 = v57;
    uint64_t v684 = v49;
    int64_t v662 = v51;
    if (v611)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      double v654 = 0.0;
      double v655 = 0.0;
      double v656 = 0.0;
      double v657 = 0.0;
      double v59 = 0.0;
      goto LABEL_13;
    }
    if (v56 < v51) {
      goto LABEL_450;
    }
    int64_t v331 = v51;
    uint64_t v332 = (uint64_t *)(v57 + 40);
    uint64_t v682 = (uint64_t *)(v57 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    double v654 = 0.0;
    double v655 = 0.0;
    uint64_t v333 = v331;
    double v656 = 0.0;
    double v657 = 0.0;
    double v672 = 0.0;
    double v673 = 0.0;
    uint64_t v334 = v670;
    uint64_t v335 = v678;
    uint64_t v699 = v332;
    while (2)
    {
      if (v333 >= v335) {
        goto LABEL_432;
      }
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v333, 1, v334);
      Swift::UInt64 v675 = v333;
      outlined init with copy of Text.Effect.RenderSegmentation.Segment(v58 + v333 * v660, v677, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
      int v336 = swift_getEnumCaseMultiPayload();
      if (!v336)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_155;
      }
      if (v336 == 1)
      {
        uint64_t v337 = v646;
        outlined init with take of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v677, v646, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        double v338 = (double *)(v337 + *(int *)(v647 + 36));
        double v339 = *v338;
        double v340 = v338[1];
        double v341 = v338[2];
        outlined destroy of Text.Effect.RenderSegmentation.Segment(v337, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
        if (v672 > v339) {
          double v342 = v672;
        }
        else {
          double v342 = v339;
        }
        if (v656 > v340) {
          double v343 = v656;
        }
        else {
          double v343 = v340;
        }
        if (v654 > v341) {
          double v344 = v654;
        }
        else {
          double v344 = v341;
        }
        double v345 = v673;
        if (v673 <= v339) {
          double v345 = v339;
        }
        double v672 = v342;
        double v673 = v345;
        double v346 = v657;
        if (v657 <= v340) {
          double v346 = v340;
        }
        double v656 = v343;
        double v657 = v346;
        double v347 = v655;
        if (v655 <= v341) {
          double v347 = v341;
        }
        double v654 = v344;
        double v655 = v347;
        goto LABEL_155;
      }
      char v348 = *(void **)(v677 + 24);
      unint64_t v349 = *(uint64_t **)(v677 + 32);
      int v350 = *(unsigned __int8 *)(v677 + 40);
      Swift::UInt64 v351 = *(void *)(v677 + 48);
      Swift::UInt64 v667 = *(void *)(v677 + 56);
      Swift::UInt64 v668 = v351;
      LODWORD(v653) = *(_DWORD *)(v677 + 64);
      uint64_t v352 = *(void *)(v677 + 72);
      unint64_t v665 = *(void *)(v677 + 80);
      uint64_t v666 = v352;
      uint64_t v353 = *(__objc2_prot ***)(v677 + 88);
      uint64_t v681 = specialized Array._getCount()(v353);
      if (!v681)
      {
        double v512 = 0.0;
        double v513 = 0.0;
        double v355 = 0.0;
        goto LABEL_321;
      }
      swift_bridgeObjectRetain_n();
      LODWORD(v706) = v350;
      outlined copy of Text.Layout.Line.Line(v348, (uint64_t)v349, v350);
      uint64_t v680 = v353 + 4;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v354 = 0;
      double v355 = 0.0;
      double v689 = 0.0;
      double v690 = 0.0;
      uint64_t v709 = v348;
      uint64_t v708 = v349;
      double v652 = v353;
      do
      {
        uint64_t v364 = v354 + 1;
        if (__OFADD__(v354, 1)) {
          goto LABEL_425;
        }
        uint64_t v365 = (char **)&v680[11 * v354];
        uint64_t v700 = *v365;
        uint64_t v366 = v365[1];
        uint64_t v367 = v365[2];
        id v368 = (__objc2_prot **)v365[4];
        uint64_t v716 = (__objc2_prot **)v365[3];
        uint64_t v693 = v365[5];
        uint64_t v696 = v365[6];
        uint64_t v369 = (uint64_t)v365[8];
        uint64_t v371 = (uint64_t)v365[9];
        uint64_t v370 = (uint64_t)v365[10];
        unint64_t v695 = (unint64_t)v365[7];
        uint64_t v718 = v367;
        uint64_t v707 = v366;
        double v687 = v355;
        uint64_t v686 = v364;
        uint64_t v688 = v369;
        uint64_t v694 = v371;
        uint64_t v697 = v370;
        if (v695 >> 62)
        {
          if (v695 >> 62 == 1)
          {
            double v372 = 0.0;
            char v373 = v700;
            if (v700 == v366)
            {
              uint64_t v707 = v700;
              double v374 = 0.0;
              double v375 = 0.0;
            }
            else
            {
              if ((uint64_t)v366 < (uint64_t)v700) {
                goto LABEL_438;
              }
              outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, v706);
              unint64_t v473 = v707;
              double v375 = 0.0;
              double v374 = 0.0;
              do
              {
                if ((uint64_t)v373 >= (uint64_t)v473) {
                  goto LABEL_408;
                }
                uint64_t v479 = v47;
                if (v706)
                {
                  CGRect v480 = v709;
                  CGRect v481 = v708;
                  outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, 1);
                  id v482 = (id)_NSTextLineFragmentGetCTLine(v480);
                  if (!v482) {
                    goto LABEL_458;
                  }
                  unint64_t v474 = v482;
                  outlined consume of Text.Layout.Line.Line(v480, (uint64_t)v481, 1);
                }
                else
                {
                  unint64_t v474 = v709;
                  objc_super v475 = v708;
                  outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, 0);
                  outlined copy of Text.Layout.Line.Line(v474, (uint64_t)v475, 0);

                  swift_release();
                }
                CGRect v476 = v373 + 1;
                CGRect v477 = (id)_CTLineGetRunAtIndex((const __CTLine *)v474, (CFIndex)v373);
                v752.CGFloat y = 0.0;
                v752.CGFloat x = 0.0;
                v737[0] = 0.0;
                double v736 = 0.0;
                CGFloat v735 = 0.0;
                v747.CGFloat y = 0.0;
                v747.CGFloat x = 0.0;
                v781.locatiouint64_t n = 0;
                v781.CFIndex length = 1;
                CTRunGetPositions((CTRunRef)v477, v781, &v752);
                v782.locatiouint64_t n = 0;
                v782.CFIndex length = 1;
                CTRunGetBaseAdvancesAndOrigins((CTRunRef)v477, v782, 0, &v747);
                v783.locatiouint64_t n = 0;
                v783.CFIndex length = 0;
                CTRunGetTypographicBounds((CTRunRef)v477, v783, v737, &v736, &v735);

                swift_release();
                double v478 = fabs(v736);
                if (v372 <= v737[0]) {
                  double v372 = v737[0];
                }
                if (v374 <= v478) {
                  double v374 = v478;
                }
                if (v375 <= v735) {
                  double v375 = v735;
                }
                char v373 = v476;
                unint64_t v473 = v707;
                BOOL v611 = v707 == v476;
                uint64_t v47 = v479;
                uint64_t v367 = v718;
              }
              while (!v611);
              outlined consume of Text.Layout.Line.Line(v709, (uint64_t)v708, v706);
            }
            goto LABEL_178;
          }
          uint64_t v465 = v47;
          uint64_t v466 = *v699;
          if (*(void *)(*v699 + 16))
          {
            Hasher.init(_seed:)();
            double v467 = v700;
            Hasher._combine(_:)((Swift::UInt64)v700);
            Swift::Int v468 = Hasher._finalize()();
            uint64_t v469 = -1 << *(unsigned char *)(v466 + 32);
            unint64_t v470 = v468 & ~v469;
            uint64_t v471 = v466 + 56;
            if (((*(void *)(v466 + 56 + ((v470 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v470) & 1) == 0) {
              goto LABEL_290;
            }
            uint64_t v472 = *(void *)(v466 + 48);
            double v372 = 0.0;
            if (*(char **)(v472 + 8 * v470) == v467)
            {
              double v374 = 0.0;
              double v375 = 0.0;
              uint64_t v47 = v465;
LABEL_318:
              uint64_t v367 = v718;
              goto LABEL_178;
            }
            uint64_t v483 = ~v469;
            unint64_t v484 = (v470 + 1) & v483;
            if ((*(void *)(v471 + ((v484 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v484))
            {
              uint64_t v47 = v465;
              uint64_t v367 = v718;
              if (*(char **)(v472 + 8 * v484) == v700) {
                goto LABEL_299;
              }
              while (1)
              {
                unint64_t v484 = (v484 + 1) & v483;
                if (((*(void *)(v471 + ((v484 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v484) & 1) == 0) {
                  break;
                }
                if (*(char **)(v472 + 8 * v484) == v700) {
                  goto LABEL_299;
                }
              }
            }
            else
            {
LABEL_290:
              uint64_t v47 = v465;
              uint64_t v367 = v718;
            }
          }
          else
          {
            uint64_t v47 = v465;
          }
          CGRect v485 = v682;
          swift_beginAccess();
          uint64_t v486 = *v485;
          if (*(void *)(v486 + 16))
          {
            uint64_t v487 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v700);
            if (v488)
            {
              uint64_t v715 = v47;
              uint64_t v489 = *(void **)(*(void *)(v486 + 56) + 8 * v487);
              swift_endAccess();
              uint64_t v490 = (uint64_t)v367;
              char v491 = v706;
              outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, v706);
              lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
              uint64_t v492 = v489;
              RangeSet.init()();
              uint64_t v493 = (uint64_t)v716;
              if ((__objc2_prot **)v490 != v716)
              {
                CFIndex v499 = v490;
                if ((uint64_t)v716 < v490) {
                  goto LABEL_451;
                }
                while (v499 < v493)
                {
                  if (v491)
                  {
                    uint64_t v500 = v709;
                    unint64_t v501 = v708;
                    outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, 1);
                    id v502 = (id)_NSTextLineFragmentGetCTLine(v500);
                    if (!v502) {
                      goto LABEL_462;
                    }
                    uint64_t v503 = v502;
                    outlined consume of Text.Layout.Line.Line(v500, (uint64_t)v501, 1);
                  }
                  else
                  {
                    uint64_t v503 = v709;
                    uint64_t v504 = v708;
                    outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, 0);
                    outlined copy of Text.Layout.Line.Line(v503, (uint64_t)v504, 0);

                    swift_release();
                  }
                  char v505 = (id)_CTLineGetRunAtIndex((const __CTLine *)v503, v499);
                  CFRange StringRange = CTRunGetStringRange((CTRunRef)v505);

                  swift_release();
                  CFIndex v507 = StringRange.location + StringRange.length;
                  if (__OFADD__(StringRange.location, StringRange.length)) {
                    goto LABEL_422;
                  }
                  if (v507 < StringRange.location) {
                    goto LABEL_423;
                  }
                  *(void *)&v747.CGFloat x = StringRange.location;
                  *(void *)&v747.CGFloat y = StringRange.location + StringRange.length;
                  if (__OFSUB__(v507, StringRange.location)) {
                    goto LABEL_424;
                  }
                  if (v507 != StringRange.location)
                  {
                    uint64_t v508 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
                    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
                    RangeSet.Ranges._insert(contentsOf:)();
                    v508(&v752, 0);
                  }
                  ++v499;
                  uint64_t v493 = (uint64_t)v716;
                  char v491 = v706;
                  uint64_t v494 = v700;
                  if (v716 == (__objc2_prot **)v499) {
                    goto LABEL_295;
                  }
                }
LABEL_421:
                __break(1u);
LABEL_422:
                __break(1u);
LABEL_423:
                __break(1u);
LABEL_424:
                __break(1u);
LABEL_425:
                __break(1u);
LABEL_426:
                __break(1u);
LABEL_427:
                __break(1u);
LABEL_428:
                __break(1u);
LABEL_429:
                __break(1u);
LABEL_430:
                __break(1u);
LABEL_431:
                __break(1u);
LABEL_432:
                __break(1u);
LABEL_433:
                __break(1u);
                goto LABEL_434;
              }
              uint64_t v494 = v700;
LABEL_295:
              (*v671)(v648, v679, v702);
              uint64_t v495 = *(void *)(v729 + 16);
              if (v495)
              {
                uint64_t v496 = v729;
                uint64_t v497 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v494);
                if (v498) {
                  uint64_t v495 = *(void *)(*(void *)(v496 + 56) + 8 * v497);
                }
                else {
                  uint64_t v495 = 0;
                }
                uint64_t v494 = v700;
              }
              if (__OFADD__(v495, v707)) {
                goto LABEL_446;
              }
              uint64_t v509 = v648;
              double v372 = (*(double (**)(char *, char *, char *))((*MEMORY[0x263F8EED0] & *v492) + 0xE8))(v494, &v707[v495], v648);
              double v374 = v510;
              double v375 = v511;

              (*v685)(v509, v702);
              outlined consume of Text.Layout.Line.Line(v709, (uint64_t)v708, v491);
              uint64_t v47 = v715;
              goto LABEL_318;
            }
          }
          swift_endAccess();
          double v372 = 0.0;
LABEL_299:
          double v374 = 0.0;
          double v375 = 0.0;
LABEL_178:
          uint64_t v356 = (uint64_t)v700;
          uint64_t v357 = (uint64_t)v707;
          uint64_t v358 = (uint64_t)v716;
          uint64_t v359 = (uint64_t)v693;
          uint64_t v360 = (uint64_t)v696;
          unint64_t v361 = v695;
          outlined consume of Text.Effect.Composition.Operation((uint64_t)v700, (uint64_t)v707, v367, (uint64_t)v716, (char)v368, (uint64_t)v693, (uint64_t)v696, v695);
          outlined consume of Text.Effect.Composition.Operation(v356, v357, v367, v358, (char)v368, v359, v360, v361);
          uint64_t v49 = v684;
          goto LABEL_179;
        }
        uint64_t v376 = v370;
        uint64_t v704 = (char *)specialized Array._getCount()(v370);
        if (v704)
        {
          uint64_t v377 = (uint64_t)v700;
          uint64_t v378 = (uint64_t)v707;
          uint64_t v379 = (uint64_t)v693;
          outlined copy of Text.Effect.Composition.Operation((uint64_t)v700, (uint64_t)v707, v367, (uint64_t)v716, (char)v368, (uint64_t)v693, (uint64_t)v696, v695);
          swift_bridgeObjectRetain();
          uint64_t v380 = v377;
          int64_t v129 = v716;
          outlined copy of Text.Effect.Composition.Operation(v380, v378, v367, (uint64_t)v716, (char)v368, v379, (uint64_t)v696, v695);
          swift_bridgeObjectRetain();
          outlined copy of Text.Layout.Line.Line(v709, (uint64_t)v708, v706);
          uint64_t v703 = v376 + 32;
          swift_beginAccess();
          uint64_t v381 = 0;
          double v375 = 0.0;
          double v374 = 0.0;
          double v372 = 0.0;
          uint64_t v710 = v368;
          while (1)
          {
            uint64_t v385 = v381 + 1;
            if (__OFADD__(v381, 1))
            {
              __break(1u);
LABEL_408:
              __break(1u);
LABEL_409:
              __break(1u);
              goto LABEL_410;
            }
            uint64_t v715 = v47;
            unint64_t v387 = (uint64_t *)(v703 + 88 * v381);
            uint64_t v386 = *v387;
            uint64_t v713 = v387[1];
            uint64_t v388 = *((void **)v387 + 2);
            CGFloat y = *((double *)v387 + 3);
            unint64_t v390 = *((unint64_t *)v387 + 4);
            uint64_t v389 = v387[5];
            uint64_t v392 = v387[6];
            unint64_t v391 = v387[7];
            id v368 = (__objc2_prot **)v387[8];
            uint64_t v393 = v387[9];
            uint64_t v394 = v387[10];
            unint64_t v722 = v391;
            uint64_t v721 = v389;
            uint64_t v720 = v392;
            uint64_t v714 = v394;
            if (v391 >> 62) {
              break;
            }
            *(void *)&v719.CGFloat x = v388;
            unint64_t v712 = v393;
            unint64_t v711 = v368;
            LOBYTE(v368) = (_BYTE)v710;
            uint64_t v397 = specialized Array._getCount()(v394);
            if (!v397)
            {
              double v395 = 0.0;
              double v403 = 0.0;
              double v402 = 0.0;
              uint64_t v47 = v715;
              goto LABEL_196;
            }
            if (v397 < 1)
            {
              __break(1u);
              goto LABEL_421;
            }
            uint64_t v705 = v385;
            double v698 = v372;
            char v398 = v368 & 1;
            uint64_t v399 = v714;
            Swift::UInt64 v701 = v386;
            uint64_t v400 = (void *)v397;
            outlined copy of Text.Effect.Composition.Operation(v386, v713, *(void **)&v719.x, *(uint64_t *)&y, v390, v721, v720, v722);
            swift_bridgeObjectRetain();
            outlined copy of Text.Layout.Line.Line(v367, (uint64_t)v129, v398);
            uint64_t v401 = (uint64_t *)(v399 + 56);
            double v402 = 0.0;
            double v403 = 0.0;
            double v395 = 0.0;
            v719.CGFloat y = y;
            uint64_t v717 = (void *)v390;
            do
            {
              double v734 = *(double *)&v400;
              char v404 = v390 & 1;
              double v405 = *((double *)v401 - 2);
              int v406 = *((void **)v401 - 1);
              uint64_t v407 = *v401;
              uint64_t v408 = v401[1];
              uint64_t v409 = v401[2];
              uint64_t v410 = v401[3];
              unint64_t v390 = *((unint64_t *)v401 + 4);
              uint64_t v411 = v401[5];
              uint64_t v412 = v401[6];
              uint64_t v413 = v401[7];
              *(void *)&v752.CGFloat x = *(v401 - 3);
              CGFloat x = v752.x;
              v752.CGFloat y = v405;
              double MinY = v405;
              uint64_t v753 = v406;
              double MinX = *(double *)&v406;
              *(void *)&long long v754 = v407;
              double MaxY = *(double *)&v407;
              *((void *)&v754 + 1) = v408;
              uint64_t v725 = v408;
              uint64_t v755 = v409;
              unint64_t v724 = v409;
              uint64_t v756 = v410;
              uint64_t v723 = v410;
              unint64_t v757 = v390;
              uint64_t v758 = (__objc2_prot **)v411;
              uint64_t v759 = v412;
              uint64_t v760 = v413;
              CGFloat v414 = v719.x;
              CGPoint v747 = v719;
              uint64_t v415 = *(void *)&v719.y;
              char v748 = v404;
              uint64_t v749 = v721;
              uint64_t v750 = v720;
              int v751 = v722;
              outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v752.x, *(uint64_t *)&v405, v406, v407, v408, v409, v410, v390);
              outlined copy of Text.Layout.Line.Line(*(void **)&v414, v415, v404);
              double v416 = Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)((uint64_t)&v747, v729, v726, v727, v728);
              double v418 = v417;
              double v420 = v419;
              outlined consume of Text.Layout.Line.Line(*(void **)&v414, v415, v404);
              double v421 = v734;
              unint64_t v422 = v390;
              LOBYTE(v390) = (_BYTE)v717;
              outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&x, *(uint64_t *)&MinY, *(void **)&MinX, *(uint64_t *)&MaxY, v725, v724, v723, v422);
              if (v395 <= v416) {
                double v395 = v416;
              }
              if (v403 <= v418) {
                double v403 = v418;
              }
              if (v402 <= v420) {
                double v402 = v420;
              }
              v401 += 11;
              uint64_t v400 = (void *)(*(void *)&v421 - 1);
            }
            while (*(double *)&v400 != 0.0);
            char v423 = v710 & 1;
            swift_bridgeObjectRelease();
            uint64_t v367 = v718;
            int64_t v129 = v716;
            outlined consume of Text.Layout.Line.Line(v718, (uint64_t)v716, v423);
            uint64_t v47 = v715;
            double v372 = v698;
            uint64_t v385 = v705;
            uint64_t v386 = v701;
            CGFloat v384 = v719.x;
            CGFloat y = v719.y;
            uint64_t v396 = v713;
LABEL_195:
            outlined consume of Text.Effect.Composition.Operation(v386, v396, *(void **)&v384, *(uint64_t *)&y, v390, v721, v720, v722);
            LOBYTE(v368) = (_BYTE)v710;
LABEL_196:
            if (v372 <= v395) {
              double v372 = v395;
            }
            if (v374 <= v403) {
              double v374 = v403;
            }
            if (v375 <= v402) {
              double v375 = v402;
            }
            uint64_t v381 = v385;
            if ((char *)v385 == v704)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of Text.Layout.Line.Line(v709, (uint64_t)v708, v706);
              goto LABEL_178;
            }
          }
          v719.CGFloat y = y;
          if (v391 >> 62 == 1)
          {
            if (v386 != v713)
            {
              if (v713 < v386) {
                goto LABEL_426;
              }
              unint64_t v712 = v393;
              unint64_t v711 = v368;
              *(void *)&v719.CGFloat x = v388;
              uint64_t v705 = v385;
              char v424 = (char)v710;
              outlined copy of Text.Layout.Line.Line(v367, (uint64_t)v129, v710 & 1);
              double v402 = 0.0;
              Swift::UInt64 v701 = v386;
              CFIndex v425 = v386;
              double v403 = 0.0;
              double v395 = 0.0;
              uint64_t v396 = v713;
              uint64_t v47 = v715;
              do
              {
                if (v425 >= v396)
                {
                  __break(1u);
LABEL_393:
                  __break(1u);
                  goto LABEL_394;
                }
                uint64_t v429 = v47;
                if (v424)
                {
                  outlined copy of Text.Layout.Line.Line(v367, (uint64_t)v129, 1);
                  uint64_t v430 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v367);
                  if (!v430) {
                    goto LABEL_453;
                  }
                  int v426 = v430;
                  outlined consume of Text.Layout.Line.Line(v367, (uint64_t)v129, 1);
                }
                else
                {
                  outlined copy of Text.Layout.Line.Line(v367, (uint64_t)v129, 0);
                  outlined copy of Text.Layout.Line.Line(v367, (uint64_t)v129, 0);

                  swift_release();
                  int v426 = (const __CTLine *)v367;
                }
                CFIndex v427 = v425 + 1;
                unint64_t v428 = (id)_CTLineGetRunAtIndex(v426, v425);
                specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v428, (CFRange)0, &v738);

                swift_release();
                if (v395 <= v739) {
                  double v395 = v739;
                }
                if (v403 <= v740) {
                  double v403 = v740;
                }
                if (v402 <= v741) {
                  double v402 = v741;
                }
                CFIndex v425 = v427;
                BOOL v611 = v396 == v427;
                uint64_t v47 = v429;
                uint64_t v367 = v718;
                int64_t v129 = v716;
              }
              while (!v611);
              outlined consume of Text.Layout.Line.Line(v718, (uint64_t)v716, v424 & 1);
              CGFloat v382 = v719.x;
              CGFloat y = v719.y;
              outlined consume of Text.Effect.Composition.Operation(v701, v396, *(void **)&v719.x, *(uint64_t *)&v719.y, v390, v721, v720, v722);
              CGFloat v384 = v382;
              uint64_t v385 = v705;
              uint64_t v386 = v701;
              goto LABEL_195;
            }
            outlined consume of Text.Effect.Composition.Operation(v386, v386, v388, *(uint64_t *)&y, v390, v389, v392, v391);
            CGFloat v384 = *(double *)&v388;
            double v395 = 0.0;
            uint64_t v396 = v386;
          }
          else
          {
            unint64_t v712 = v393;
            unint64_t v711 = v368;
            if (!specialized Set.contains(_:)(v386, *v699))
            {
              uint64_t v431 = v386;
              uint64_t v705 = v385;
              uint64_t v432 = v682;
              swift_beginAccess();
              uint64_t v433 = *v432;
              if (*(void *)(v433 + 16))
              {
                uint64_t v434 = specialized __RawDictionaryStorage.find<A>(_:)(v386);
                uint64_t v717 = (void *)v390;
                if (v435)
                {
                  CGFloat v436 = *(double *)&v388;
                  char v437 = (char)v710;
                  char v438 = v710 & 1;
                  uint64_t v439 = *(void *)(v433 + 56);
                  uint64_t v440 = (uint64_t)v129;
                  uint64_t v441 = *(void **)(v439 + 8 * v434);
                  swift_endAccess();
                  outlined copy of Text.Layout.Line.Line(v367, v440, v438);
                  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
                  double v734 = COERCE_DOUBLE(v441);
                  RangeSet.init()();
                  v719.CGFloat x = v436;
                  if (*(void *)&v436 != *(void *)&v719.y)
                  {
                    CFIndex v447 = *(void *)&v436;
                    BOOL v448 = *(void *)&v719.y < *(void *)&v436;
                    uint64_t v449 = (uint64_t)v716;
                    CGFloat y = v719.y;
                    uint64_t v442 = v713;
                    if (v448) {
                      goto LABEL_439;
                    }
                    while (v447 < *(uint64_t *)&y)
                    {
                      if (v437)
                      {
                        outlined copy of Text.Layout.Line.Line(v367, v449, 1);
                        objc_super v450 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v367);
                        if (!v450) {
                          goto LABEL_459;
                        }
                        CGFloat v451 = v450;
                        outlined consume of Text.Layout.Line.Line(v367, v449, 1);
                      }
                      else
                      {
                        outlined copy of Text.Layout.Line.Line(v367, v449, 0);
                        outlined copy of Text.Layout.Line.Line(v367, v449, 0);

                        swift_release();
                        CGFloat v451 = (const __CTLine *)v367;
                      }
                      uint64_t v452 = (id)_CTLineGetRunAtIndex(v451, v447);
                      CFRange v453 = CTRunGetStringRange((CTRunRef)v452);

                      swift_release();
                      CFIndex v454 = v453.location + v453.length;
                      if (__OFADD__(v453.location, v453.length)) {
                        goto LABEL_411;
                      }
                      CGFloat y = v719.y;
                      if (v454 < v453.location) {
                        goto LABEL_412;
                      }
                      *(void *)&v747.CGFloat x = v453.location;
                      *(void *)&v747.CGFloat y = v453.location + v453.length;
                      if (__OFSUB__(v454, v453.location)) {
                        goto LABEL_413;
                      }
                      if (v454 != v453.location)
                      {
                        uint64_t v455 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
                        type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
                        RangeSet.Ranges._insert(contentsOf:)();
                        v455(&v752, 0);
                      }
                      ++v447;
                      uint64_t v367 = v718;
                      uint64_t v449 = (uint64_t)v716;
                      if (*(void *)&y == v447) {
                        goto LABEL_241;
                      }
                    }
LABEL_410:
                    __break(1u);
LABEL_411:
                    __break(1u);
LABEL_412:
                    __break(1u);
LABEL_413:
                    __break(1u);
                    goto LABEL_414;
                  }
                  CGFloat y = v719.y;
                  uint64_t v442 = v713;
LABEL_241:
                  (*v671)(v674, v692, v702);
                  uint64_t v443 = *(void *)(v729 + 16);
                  LOBYTE(v390) = (_BYTE)v717;
                  if (v443)
                  {
                    uint64_t v444 = v729;
                    uint64_t v445 = specialized __RawDictionaryStorage.find<A>(_:)(v431);
                    if (v446) {
                      uint64_t v443 = *(void *)(*(void *)(v444 + 56) + 8 * v445);
                    }
                    else {
                      uint64_t v443 = 0;
                    }
                  }
                  uint64_t v456 = v443 + v442;
                  if (__OFADD__(v443, v442)) {
                    goto LABEL_433;
                  }
                  char v457 = v437 & 1;
                  double v458 = v734;
                  uint64_t v459 = v442;
                  uint64_t v386 = v431;
                  uint64_t v460 = v674;
                  double v395 = (*(double (**)(uint64_t, uint64_t, char *))((*MEMORY[0x263F8EED0] & **(void **)&v734)
                                                                            + 0xE8))(v431, v456, v674);
                  double v403 = v461;
                  double v402 = v462;

                  uint64_t v463 = v460;
                  int64_t v129 = v716;
                  (*v685)(v463, v702);
                  outlined consume of Text.Layout.Line.Line(v367, (uint64_t)v129, v457);
                  uint64_t v396 = v459;
                  CGFloat v464 = v719.x;
                  outlined consume of Text.Effect.Composition.Operation(v386, v459, *(void **)&v719.x, *(uint64_t *)&y, v390, v721, v720, v722);
                  uint64_t v47 = v715;
                  CGFloat v384 = v464;
                  uint64_t v385 = v705;
                  goto LABEL_195;
                }
                swift_endAccess();
                uint64_t v396 = v713;
                unint64_t v390 = *(unint64_t *)&v719.y;
                outlined consume of Text.Effect.Composition.Operation(v386, v713, v388, *(uint64_t *)&v719.y, (char)v717, v721, v720, v722);
                CGFloat v384 = *(double *)&v388;
                double v395 = 0.0;
                double v403 = 0.0;
                double v402 = 0.0;
                uint64_t v385 = v705;
                CGFloat y = *(double *)&v390;
                LOBYTE(v390) = (_BYTE)v717;
              }
              else
              {
                swift_endAccess();
                Swift::UInt64 v701 = v386;
                uint64_t v396 = v713;
                outlined consume of Text.Effect.Composition.Operation(v386, v713, v388, *(uint64_t *)&y, v390, v721, v720, v722);
                CGFloat v384 = *(double *)&v388;
                double v395 = 0.0;
                double v403 = 0.0;
                double v402 = 0.0;
                uint64_t v385 = v705;
                uint64_t v386 = v701;
              }
              goto LABEL_222;
            }
            uint64_t v396 = v713;
            outlined consume of Text.Effect.Composition.Operation(v386, v713, v388, *(uint64_t *)&y, v390, v721, v720, v722);
            CGFloat v384 = *(double *)&v388;
            double v395 = 0.0;
          }
          double v403 = 0.0;
          double v402 = 0.0;
LABEL_222:
          uint64_t v47 = v715;
          goto LABEL_195;
        }
        double v372 = 0.0;
        double v374 = 0.0;
        double v375 = 0.0;
LABEL_179:
        if (v689 > v372) {
          double v362 = v689;
        }
        else {
          double v362 = v372;
        }
        double v363 = v690;
        if (v690 <= v374) {
          double v363 = v374;
        }
        double v689 = v362;
        double v690 = v363;
        double v355 = v687;
        if (v687 <= v375) {
          double v355 = v375;
        }
        uint64_t v354 = v686;
        char v348 = v709;
        unint64_t v349 = v708;
      }
      while (v686 != v681);
      uint64_t v353 = v652;
      swift_bridgeObjectRelease_n();
      LOBYTE(v350) = v706;
      outlined consume of Text.Layout.Line.Line(v348, (uint64_t)v349, v706);
      swift_bridgeObjectRelease();
      double v512 = v689;
      double v513 = v690;
LABEL_321:
      double v514 = v672;
      if (v672 <= v512) {
        double v514 = v512;
      }
      double v672 = v514;
      double v515 = v656;
      if (v656 <= v513) {
        double v515 = v513;
      }
      double v656 = v515;
      double v516 = v654;
      if (v654 <= v355) {
        double v516 = v355;
      }
      double v654 = v516;
      *(void *)&v752.CGFloat x = v348;
      *(void *)&v752.CGFloat y = v349;
      LOBYTE(v753) = v350;
      *(void *)&long long v754 = v668;
      *((void *)&v754 + 1) = v667;
      LODWORD(v755) = v653;
      uint64_t v756 = v666;
      unint64_t v757 = v665;
      uint64_t v758 = v353;
      v747.CGFloat x = *(CGFloat *)&v659[v639];
      outlined copy of Text.Layout.Line.Line(v348, (uint64_t)v349, v350);
      swift_bridgeObjectRetain();
      double v517 = Text.Effect.Composition.metrics(at:context:)(&v747.x, v729, v726, v727, v728);
      double v519 = v518;
      double v521 = v520;
      outlined consume of Text.Layout.Line.Line(v348, (uint64_t)v349, v350);
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v348, (uint64_t)v349, v350);
      swift_bridgeObjectRelease();
      double v522 = v673;
      if (v673 <= v517) {
        double v522 = v517;
      }
      double v673 = v522;
      double v523 = v657;
      if (v657 <= v519) {
        double v523 = v519;
      }
      double v657 = v523;
      double v524 = v655;
      if (v655 <= v521) {
        double v524 = v521;
      }
      double v655 = v524;
LABEL_155:
      uint64_t v333 = v675 + 1;
      uint64_t v335 = v678;
      uint64_t v334 = v670;
      uint64_t v58 = v664;
      if (v675 + 1 != v678) {
        continue;
      }
      break;
    }
    double v59 = v673 - v672;
LABEL_13:
    uint64_t result = objc_msgSend(v659, sel_sublayers, *(void *)&v626, *(void *)&v627, *(void *)&v628, *(void *)&v629);
    if (!result)
    {
      __break(1u);
      goto LABEL_465;
    }
    CGRect v60 = result;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
    uint64_t v640 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v61 = v678 - v662;
    if (__OFSUB__(v678, v662)) {
      goto LABEL_447;
    }
    double v62 = v636 + v59;
    uint64_t v643 = v678 - v662;
    if (!v61)
    {
      uint64_t v329 = specialized static Array._allocateUninitialized(_:)(0);
      double v71 = 0.0;
      uint64_t v326 = v678;
      int64_t v327 = v662;
      if (v662 == v678)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_360;
      }
      double v328 = v658;
      goto LABEL_337;
    }
    *(void *)&v737[0] = protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance ViewResponder();
    specialized ContiguousArray.reserveCapacity(_:)(v61);
    if (v61 < 0) {
      goto LABEL_452;
    }
    int64_t v63 = v61;
    uint64_t v64 = 0;
    uint64_t v708 = (uint64_t *)(v727 + 40);
    uint64_t v696 = (char *)(v727 + 24);
    uint64_t v65 = v678;
    if (v662 > v678) {
      uint64_t v65 = v662;
    }
    uint64_t v641 = v65 - v662;
    double v66 = 0.0;
    int64_t v67 = v662;
LABEL_20:
    if (v64 == (__objc2_prot **)v63) {
      goto LABEL_435;
    }
    double v652 = v64;
    int64_t v68 = v67;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v67, 1, v670);
    int64_t v651 = v68;
    outlined init with copy of Text.Effect.RenderSegmentation.Segment(v664 + v68 * v660, v661, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    int v69 = swift_getEnumCaseMultiPayload();
    if (!v69)
    {
      uint64_t v70 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      double v71 = v66;
LABEL_146:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v323 = *(void *)(*(void *)&v737[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v323);
      uint64_t v324 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v323, v66, v62);
      _ViewInputs.base.modify(v324, v325);
      uint64_t v326 = v678;
      int64_t v327 = v662;
      if (v678 < v662) {
        goto LABEL_436;
      }
      if (v652 == (__objc2_prot **)v641) {
        goto LABEL_437;
      }
      uint64_t v64 = (__objc2_prot **)((char *)v652 + 1);
      int64_t v67 = v651 + 1;
      double v66 = v71;
      int64_t v63 = v643;
      double v328 = v658;
      uint64_t v47 = v70;
      if ((__objc2_prot **)((char *)v652 + 1) == (__objc2_prot **)v643)
      {
        uint64_t v329 = *(void *)&v737[0];
        if (v662 == v678)
        {
          uint64_t v330 = v643;
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_release();
          if (v330 == 1) {
            goto LABEL_465;
          }
LABEL_360:
          uint64_t v555 = v771;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v49, 1, v771);
          uint64_t v556 = v555 + 48 * v49;
          char v557 = *(unsigned char *)(v556 + 48);
          int v558 = *(_DWORD *)(v556 + 72);
          CGPoint v752 = *(CGPoint *)(v556 + 32);
          LOBYTE(v753) = v557;
          long long v754 = *(_OWORD *)(v556 + 56);
          LODWORD(v755) = v558;
          Text.Layout.Line.typographicBounds.getter(&v742);
          double v559 = v742.f64[1] - v744;
          double v560 = v744 + v745;
          double v561 = v742.f64[0] - v71 * *((double *)&v772 + 1);
          double v562 = v71 + v743;
LABEL_361:
          uint64_t v39 = v47;
          v796.origin.CGFloat y = v636 + v559;
          double v563 = v657 - v656 + v62;
          v796.size.CGFloat height = v563 - v636 + v560;
          v784.origin.CGFloat x = v630;
          v784.origin.CGFloat y = v631;
          v784.size.CGFloat height = height;
          v784.size.CGFloat width = width;
          v796.origin.CGFloat x = v561;
          v796.size.CGFloat width = v562;
          CGRect v785 = CGRectUnion(v784, v796);
          CGFloat v630 = v785.origin.x;
          CGFloat v631 = v785.origin.y;
          CGFloat height = v785.size.height;
          CGFloat width = v785.size.width;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          int64_t v38 = v678;
          uint64_t v40 = v644;
          if (v637 < v678) {
            goto LABEL_454;
          }
          double v636 = v655 - v654 + v563;
          uint64_t v41 = v670;
          uint64_t v42 = v664;
          if (v678 == v637) {
            goto LABEL_419;
          }
          continue;
        }
LABEL_337:
        if (v326 < v327) {
          goto LABEL_456;
        }
        if (v327 >= v326) {
          goto LABEL_457;
        }
        double v734 = COERCE_DOUBLE(specialized Array._getCount()(v329));
        if (v734 == 0.0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v49 = v684;
          uint64_t result = (void *)v662;
          if (v643 != 1) {
            goto LABEL_360;
          }
LABEL_358:
          uint64_t v554 = result;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(result, 1, v670);
          outlined init with copy of Text.Effect.RenderSegmentation.Segment(v664 + (void)v554 * v660, (uint64_t)v328, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
          if (swift_getEnumCaseMultiPayload())
          {
            outlined destroy of Text.Effect.RenderSegmentation.Segment((uint64_t)v328, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
            goto LABEL_360;
          }
          uint64_t v564 = v328;
          uint64_t v565 = *(void *)v328;
          double v566 = v564[1];
          if (specialized Array._getCount()(v565))
          {
            CGFloat x = v62;
            uint64_t v567 = v47;
            uint64_t v568 = specialized Array._getCount()(v565);
            uint64_t v569 = specialized Array._getCount()(v565);
            if (v569 < 1) {
              goto LABEL_461;
            }
            uint64_t v570 = v569;
            uint64_t v571 = v568 & ~(v568 >> 63);
            swift_bridgeObjectRetain();
            double MinY = v566;
            swift_bridgeObjectRetain();
            uint64_t v572 = 0;
            uint64_t v573 = (double *)(v565 + 64);
            double v561 = v626;
            double v559 = v627;
            double v560 = v628;
            double v562 = v629;
            uint64_t v47 = v567;
            do
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v572, 1, v565);
              if (v571 == v572) {
                goto LABEL_449;
              }
              long long v580 = (void *)*((void *)v573 - 4);
              uint64_t v581 = *((void *)v573 - 3);
              LODWORD(v582) = *((unsigned __int8 *)v573 - 16);
              double v583 = *(v573 - 1);
              double v584 = *v573;
              if (v582)
              {
                outlined copy of Text.Layout.Line.Line(v580, v581, 1);
                objc_msgSend(v580, sel_typographicBounds);
                double TypographicBounds = v574;
                double v577 = v576;
                objc_msgSend(v580, sel_glyphOrigin);
                double v579 = v577 - v578;
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v580, v581, 0);
                outlined copy of Text.Layout.Line.Line(v580, v581, 0);
                char v585 = v580;
                LODWORD(v734) = v582;
                uint64_t v582 = v570;
                uint64_t v586 = v565;
                uint64_t v587 = v571;
                uint64_t v588 = v47;
                uint64_t v589 = v585;
                v752.CGFloat x = 0.0;
                v747.CGFloat x = 0.0;
                v737[0] = 0.0;
                double TypographicBounds = CTLineGetTypographicBounds(v585, &v752.x, &v747.x, v737);

                uint64_t v47 = v588;
                uint64_t v571 = v587;
                uint64_t v565 = v586;
                uint64_t v570 = v582;
                LOBYTE(v582) = LOBYTE(v734);
                outlined consume of Text.Layout.Line.Line(v580, v581, 0);
                double v578 = v752.x;
                double v579 = v747.x;
              }
              ++v572;
              v797.origin.CGFloat x = v583 + 0.0;
              v797.origin.CGFloat y = v584 + 0.0 - v578;
              v797.size.CGFloat height = v579 + v578;
              v786.origin.CGFloat x = v561;
              v786.origin.CGFloat y = v559;
              v786.size.CGFloat width = v562;
              v786.size.CGFloat height = v560;
              v797.size.CGFloat width = TypographicBounds;
              CGRect v787 = CGRectUnion(v786, v797);
              double v561 = v787.origin.x;
              double v559 = v787.origin.y;
              double v562 = v787.size.width;
              double v560 = v787.size.height;
              outlined consume of Text.Layout.Line.Line(v580, v581, v582);
              v573 += 6;
            }
            while (v570 != v572);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            double v62 = x;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            double v560 = v628;
            double v562 = v629;
            double v561 = v626;
            double v559 = v627;
          }
          goto LABEL_361;
        }
        double v525 = v62;
        double v526 = v71 * *((double *)&v772 + 1);
        uint64_t v527 = v640;
        *(void *)&double MinY = v640 & 0xC000000000000001;
        uint64_t v725 = v329;
        *(void *)&CGFloat x = v329 + 32;
        swift_beginAccess();
        uint64_t v528 = 0;
        char v529 = 0;
        int64_t v530 = v662;
        *(void *)&double MinX = ~v662 + v678;
        *(void *)&double MaxY = v662 + 1;
        uint64_t v531 = 16 * v662;
        uint64_t v726 = v527 + 8 * v662 + 32;
        while (1)
        {
          uint64_t v532 = (char *)v529 + 1;
          if (__OFADD__(v529, 1)) {
            goto LABEL_441;
          }
          uint64_t v533 = v47;
          uint64_t v534 = (char *)v529 + v530;
          double v535 = *(double *)(*(void *)&x + v528 + 8);
          double v536 = *(double *)(*(void *)&x + v528);
          uint64_t v537 = v638;
          uint64_t v538 = *(void *)v638;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)((char *)v529 + v530, 1, *(void *)v638);
          uint64_t v539 = v538 + v531 + v528;
          double v540 = *(double *)(v539 + 32);
          double v541 = *(double *)(v539 + 40);
          swift_beginAccess();
          MutableAnCGFloat d = specialized Array._makeMutableAndUnique()();
          if (v662 < 0) {
            goto LABEL_442;
          }
          if (*(void *)(*(void *)v537 + 16) <= (unint64_t)v534) {
            goto LABEL_443;
          }
          double v544 = v536 - v526;
          double v545 = MinY;
          uint64_t v546 = *(void *)v537 + v531 + v528;
          *(double *)(v546 + 32) = v544;
          *(double *)(v546 + 40) = v535;
          _ViewInputs.base.modify(MutableAnd, v543);
          swift_endAccess();
          uint64_t v547 = v640;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v534, *(void *)&v545 == 0, v640);
          id v548 = v545 == 0.0 ? *(id *)(v726 + 8 * (void)v529) : (id)MEMORY[0x24C523D60](v534, v547);
          uint64_t v549 = v548;
          uint64_t v47 = v533;
          objc_msgSend(v548, sel_frame);
          double v552 = v544 + v550 - v540;
          double v553 = v535 + v551 - v541;
          objc_msgSend(v549, sel_frame);
          objc_msgSend(v549, sel_setFrame_, v552, v553);

          if (*(void **)&MinX == v529) {
            break;
          }
          int64_t v530 = v662;
          double v328 = v658;
          if ((unint64_t)v529 + *(void *)&MaxY < v662 || (uint64_t)v529 + *(void *)&MaxY >= v678) {
            goto LABEL_444;
          }
          char v529 = (char *)v529 + 1;
          v528 += 16;
          if (v532 == *(void **)&v734) {
            goto LABEL_356;
          }
        }
        double v328 = v658;
LABEL_356:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = v684;
        double v62 = v525;
        if (v643 != 1) {
          goto LABEL_360;
        }
        uint64_t result = (void *)v662;
        if (v662 != v678) {
          goto LABEL_358;
        }
LABEL_465:
        __break(1u);
        return result;
      }
      goto LABEL_20;
    }
    break;
  }
  if (v69 == 1)
  {
    uint64_t v70 = v47;
    outlined destroy of Text.Effect.RenderSegmentation.Segment(v661, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
    goto LABEL_25;
  }
  uint64_t v72 = *(uint64_t **)(v661 + 24);
  uint64_t v73 = *(void *)(v661 + 32);
  int v74 = *(unsigned __int8 *)(v661 + 40);
  uint64_t v75 = *(void *)(v661 + 88);
  double v76 = *(double *)&v659[v639];
  uint64_t v666 = specialized Array._getCount()(v75);
  if (!v666)
  {
    double v78 = 0.0;
LABEL_145:
    uint64_t v70 = v47;
    outlined consume of Text.Layout.Line.Line(v72, v73, v74);
    swift_bridgeObjectRelease();
    double v71 = v66 + v78;
    goto LABEL_146;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v681 = v73;
  uint64_t v682 = v72;
  LODWORD(v680) = v74;
  outlined copy of Text.Layout.Line.Line(v72, v73, v74);
  unint64_t v665 = v75 + 32;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  double v77 = 0.0;
  double v78 = 0.0;
  uint64_t v653 = v75;
  while (1)
  {
    *(void *)&double v87 = *(void *)&v77 + 1;
    if (__OFADD__(*(void *)&v77, 1)) {
      goto LABEL_431;
    }
    uint64_t v88 = (Swift::UInt64 *)(v665 + 88 * *(void *)&v77);
    Swift::UInt64 v89 = *v88;
    uint64_t v90 = v88[1];
    uint64_t v700 = (char *)v88[2];
    uint64_t v704 = (char *)v88[3];
    uint64_t v91 = *((uint64_t *)v88 + 5);
    Swift::UInt64 v701 = v88[4];
    uint64_t v92 = v88[6];
    Swift::UInt64 v94 = v88[8];
    Swift::UInt64 v93 = v88[9];
    Swift::UInt64 v95 = v88[10];
    double v689 = *((double *)v88 + 7);
    double v687 = v87;
    if (!(*(void *)&v689 >> 62)) {
      break;
    }
    uint64_t v686 = v92;
    uint64_t v688 = v90;
    if (*(void *)&v689 >> 62 == 1)
    {
      uint64_t v79 = v90;
      uint64_t v80 = v700;
      Swift::UInt64 v675 = v94;
      uint64_t v81 = (uint64_t)v704;
      char v82 = v701;
      uint64_t v83 = v92;
      double v672 = *(double *)&v91;
      unint64_t v84 = *(void *)&v689;
      outlined consume of Text.Effect.Composition.Operation(v89, v79, v700, (uint64_t)v704, v701, v91, v83, *(unint64_t *)&v689);
      uint64_t v85 = v80;
      uint64_t v49 = v684;
      outlined consume of Text.Effect.Composition.Operation(v89, v688, v85, v81, v82, *(uint64_t *)&v672, v686, v84);
      double v86 = 0.0;
      goto LABEL_29;
    }
    uint64_t v96 = v47;
    uint64_t v97 = *v708;
    uint64_t v98 = *(void *)(*v708 + 16);
    double v673 = *(double *)&v89;
    Swift::UInt64 v668 = v95;
    if (v98
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(v89),
          Swift::Int v99 = Hasher._finalize()(),
          uint64_t v100 = -1 << *(unsigned char *)(v97 + 32),
          unint64_t v101 = v99 & ~v100,
          uint64_t v102 = v97 + 56,
          ((*(void *)(v97 + 56 + ((v101 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v101) & 1) != 0))
    {
      uint64_t v103 = *(void *)(v97 + 48);
      if (*(void *)(v103 + 8 * v101) == v89)
      {
        uint64_t v104 = v89;
        id v105 = v700;
        uint64_t v106 = (uint64_t)v704;
        char v107 = v701;
        uint64_t v108 = v686;
        unint64_t v109 = *(void *)&v689;
        outlined consume of Text.Effect.Composition.Operation(v104, v90, v700, (uint64_t)v704, v701, v91, v686, *(unint64_t *)&v689);
        uint64_t v110 = v105;
        uint64_t v49 = v684;
        outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v673, v688, v110, v106, v107, v91, v108, v109);
        double v86 = 0.0;
        uint64_t v47 = v96;
        goto LABEL_29;
      }
      uint64_t v301 = ~v100;
      unint64_t v302 = (v101 + 1) & v301;
      uint64_t v47 = v96;
      if ((*(void *)(v102 + ((v302 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v302))
      {
        uint64_t v269 = v686;
        if (*(void *)(v103 + 8 * v302) == v89)
        {
LABEL_124:
          uint64_t v303 = v90;
          unint64_t v304 = v700;
          uint64_t v305 = (uint64_t)v704;
          Swift::UInt64 v667 = v93;
          char v306 = v701;
          unint64_t v307 = *(void *)&v689;
          outlined consume of Text.Effect.Composition.Operation(v89, v303, v700, (uint64_t)v704, v701, v91, v686, *(unint64_t *)&v689);
          outlined consume of Text.Effect.Composition.Operation(v89, v688, v304, v305, v306, v91, v686, v307);
          double v86 = 0.0;
LABEL_142:
          uint64_t v49 = v684;
          goto LABEL_29;
        }
        while (1)
        {
          unint64_t v302 = (v302 + 1) & v301;
          if (((*(void *)(v102 + ((v302 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v302) & 1) == 0) {
            goto LABEL_110;
          }
          if (*(void *)(v103 + 8 * v302) == v89) {
            goto LABEL_124;
          }
        }
      }
    }
    else
    {
      uint64_t v47 = v96;
    }
    uint64_t v269 = v686;
LABEL_110:
    CGFloat v270 = (uint64_t *)v696;
    swift_beginAccess();
    uint64_t v271 = *v270;
    uint64_t v272 = *(void *)(v271 + 16);
    Swift::UInt64 v667 = v93;
    if (v272)
    {
      uint64_t v273 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
      if (v274)
      {
        double v672 = *(double *)&v91;
        uint64_t v715 = v47;
        uint64_t v275 = *(void **)(*(void *)(v271 + 56) + 8 * v273);
        swift_endAccess();
        uint64_t v277 = v681;
        uint64_t v276 = v682;
        char v278 = (char)v680;
        outlined copy of Text.Layout.Line.Line(v682, v681, (char)v680);
        lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
        double v279 = v275;
        RangeSet.init()();
        double v280 = v704;
        if (v700 != v704)
        {
          uint64_t v308 = v700;
          uint64_t v281 = v688;
          if ((uint64_t)v704 < (uint64_t)v700) {
            goto LABEL_455;
          }
          while ((uint64_t)v308 < (uint64_t)v280)
          {
            if (v278)
            {
              outlined copy of Text.Layout.Line.Line(v276, v277, 1);
              CGFloat v309 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v276);
              if (!v309) {
                goto LABEL_463;
              }
              CGFloat v310 = v309;
              outlined consume of Text.Layout.Line.Line(v276, v277, 1);
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(v276, v277, 0);
              outlined copy of Text.Layout.Line.Line(v276, v277, 0);

              swift_release();
              CGFloat v310 = (const __CTLine *)v276;
            }
            CGFloat v311 = (id)_CTLineGetRunAtIndex(v310, (CFIndex)v308);
            CFRange v312 = CTRunGetStringRange((CTRunRef)v311);

            swift_release();
            CFIndex v313 = v312.location + v312.length;
            if (__OFADD__(v312.location, v312.length)) {
              goto LABEL_428;
            }
            if (v313 < v312.location) {
              goto LABEL_429;
            }
            *(void *)&v747.CGFloat x = v312.location;
            *(void *)&v747.CGFloat y = v312.location + v312.length;
            if (__OFSUB__(v313, v312.location)) {
              goto LABEL_430;
            }
            if (v313 != v312.location)
            {
              id v314 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
              type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
              RangeSet.Ranges._insert(contentsOf:)();
              v314(&v752, 0);
            }
            ++v308;
            double v280 = v704;
            uint64_t v277 = v681;
            uint64_t v276 = v682;
            char v278 = (char)v680;
            if (v704 == v308) {
              goto LABEL_114;
            }
          }
          goto LABEL_427;
        }
        uint64_t v281 = v688;
LABEL_114:
        (*v671)(v645, v663, v702);
        uint64_t v282 = v729;
        uint64_t v283 = *(void *)(v729 + 16);
        if (v283)
        {
          uint64_t v284 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)&v673);
          CGFloat v285 = v279;
          if (v286) {
            uint64_t v283 = *(void *)(*(void *)(v282 + 56) + 8 * v284);
          }
          else {
            uint64_t v283 = 0;
          }
        }
        else
        {
          CGFloat v285 = v279;
        }
        if (__OFADD__(v283, v281)) {
          goto LABEL_448;
        }
        v752.CGFloat x = v76;
        CGFloat v315 = v645;
        double v86 = (*(double (**)(double, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v285) + 0xF8))(COERCE_DOUBLE(*(void *)&v673), v283 + v281, v645, &v752, v282, v726, v727, v728);

        (*v685)(v315, v702);
        outlined consume of Text.Layout.Line.Line(v276, v277, v278);
        uint64_t v316 = v281;
        char v317 = v700;
        uint64_t v318 = (uint64_t)v704;
        char v319 = v701;
        uint64_t v320 = *(void *)&v672;
        uint64_t v321 = v686;
        unint64_t v322 = *(void *)&v689;
        outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v673, v316, v700, (uint64_t)v704, v701, *(uint64_t *)&v672, v686, *(unint64_t *)&v689);
        outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v673, v688, v317, v318, v319, v320, v321, v322);
        uint64_t v47 = v715;
        goto LABEL_142;
      }
    }
    swift_endAccess();
    uint64_t v295 = v89;
    unint64_t v296 = *(void *)&v689;
    uint64_t v297 = v700;
    uint64_t v298 = (uint64_t)v704;
    char v299 = v701;
    outlined consume of Text.Effect.Composition.Operation(v295, v688, v700, (uint64_t)v704, v701, v91, v269, *(unint64_t *)&v689);
    uint64_t v300 = v297;
    uint64_t v49 = v684;
    outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v673, v688, v300, v298, v299, v91, v269, v296);
LABEL_119:
    double v86 = 0.0;
LABEL_29:
    double v78 = v78 + v86;
    double v77 = v687;
    if (*(void *)&v687 == v666)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v73 = v681;
      uint64_t v72 = v682;
      LOBYTE(v74) = (_BYTE)v680;
      outlined consume of Text.Layout.Line.Line(v682, v681, (char)v680);
      swift_bridgeObjectRelease();
      goto LABEL_145;
    }
  }
  Swift::UInt64 v111 = v95;
  uint64_t v694 = specialized Array._getCount()(v95);
  if (!v694) {
    goto LABEL_119;
  }
  unint64_t v112 = v700;
  outlined copy of Text.Effect.Composition.Operation(v89, v90, v700, (uint64_t)v704, v701, v91, v92, *(unint64_t *)&v689);
  swift_bridgeObjectRetain();
  Swift::UInt64 v667 = v93;
  Swift::UInt64 v675 = v94;
  double v672 = *(double *)&v91;
  double v673 = *(double *)&v89;
  uint64_t v688 = v90;
  uint64_t v686 = v92;
  outlined copy of Text.Effect.Composition.Operation(v89, v90, v112, (uint64_t)v704, v701, v91, v92, *(unint64_t *)&v689);
  swift_bridgeObjectRetain();
  outlined copy of Text.Layout.Line.Line(v682, v681, (char)v680);
  Swift::UInt64 v668 = v111;
  uint64_t v693 = (char *)(v111 + 32);
  swift_beginAccess();
  unint64_t v113 = 0;
  double v86 = 0.0;
  while (2)
  {
    unint64_t v123 = v113 + 1;
    if (__OFADD__(v113, 1)) {
      goto LABEL_418;
    }
    uint64_t v124 = (uint64_t *)&v693[88 * v113];
    uint64_t v125 = *v124;
    CGFloat v126 = (uint64_t *)v124[1];
    uint64_t v127 = (char *)v124[2];
    CGFloat v128 = *((double *)v124 + 3);
    int64_t v129 = (__objc2_prot **)v124[4];
    uint64_t v707 = (char *)v124[5];
    uint64_t v705 = v124[6];
    unint64_t v130 = v124[7];
    uint64_t v703 = v124[8];
    uint64_t v132 = v124[9];
    double v131 = *((double *)v124 + 10);
    unint64_t v706 = v130;
    v719.CGFloat x = v128;
    if (!(v130 >> 62))
    {
      double v144 = v131;
      uint64_t v720 = specialized Array._getCount()(*(void *)&v131);
      if (!v720) {
        goto LABEL_70;
      }
      uint64_t v715 = v47;
      unint64_t v695 = v123;
      LODWORD(v734) = v701 & 1;
      uint64_t v145 = *(void *)&v128;
      uint64_t v146 = v132;
      uint64_t v147 = (uint64_t)v126;
      char v148 = v126;
      uint64_t v149 = v705;
      unint64_t v150 = v706;
      outlined copy of Text.Effect.Composition.Operation(v125, v147, v127, v145, (char)v129, (uint64_t)v707, v705, v706);
      swift_bridgeObjectRetain();
      uint64_t v697 = v146;
      double v698 = *(double *)&v125;
      uint64_t v699 = v148;
      unint64_t v711 = (__objc2_prot **)v127;
      uint64_t v710 = v129;
      outlined copy of Text.Effect.Composition.Operation(v125, (uint64_t)v148, v127, v145, (char)v129, (uint64_t)v707, v149, v150);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v700, (uint64_t)v704, SLOBYTE(v734));
      double v690 = v144;
      *(void *)&v719.CGFloat y = *(void *)&v144 + 32;
      swift_beginAccess();
      uint64_t v151 = 0;
      double v122 = 0.0;
      while (1)
      {
        if (__OFADD__(v151, 1)) {
          goto LABEL_393;
        }
        uint64_t v723 = v151 + 1;
        uint64_t v152 = (unint64_t *)(*(void *)&v719.y + 88 * v151);
        unint64_t v153 = *v152;
        unint64_t v724 = v152[1];
        uint64_t v154 = (void *)v152[2];
        uint64_t v155 = (char *)v152[3];
        unint64_t v157 = v152[4];
        uint64_t v156 = v152[5];
        int64_t v129 = (__objc2_prot **)v152[6];
        unint64_t v158 = v152[7];
        uint64_t v160 = v152[8];
        uint64_t v159 = (void *)v152[9];
        uint64_t v725 = v152[10];
        if (!(v158 >> 62)) {
          break;
        }
        unint64_t v722 = v153;
        if (v158 >> 62 == 1)
        {
          uint64_t v161 = v153;
          uint64_t v721 = v160;
          uint64_t v162 = v724;
          outlined consume of Text.Effect.Composition.Operation(v161, v724, v154, (uint64_t)v155, v157, v156, (uint64_t)v129, v158);
          goto LABEL_65;
        }
        uint64_t v185 = v159;
        if (specialized Set.contains(_:)(v153, *v708))
        {
          uint64_t v186 = v153;
          uint64_t v162 = v724;
          uint64_t v187 = v724;
          CGRect v188 = v154;
          uint64_t v189 = (uint64_t)v155;
          char v190 = v157;
          uint64_t v191 = v156;
          uint64_t v192 = (uint64_t)v129;
          goto LABEL_64;
        }
        uint64_t v716 = (__objc2_prot **)v158;
        CGRect v193 = (uint64_t *)v696;
        swift_beginAccess();
        uint64_t v194 = *v193;
        if (!*(void *)(v194 + 16) || (uint64_t v195 = specialized __RawDictionaryStorage.find<A>(_:)(v153), (v196 & 1) == 0))
        {
          swift_endAccess();
          uint64_t v186 = v153;
          uint64_t v162 = v724;
          uint64_t v187 = v724;
          CGRect v188 = v154;
          uint64_t v189 = (uint64_t)v155;
          char v190 = v157;
          uint64_t v191 = v156;
          uint64_t v192 = (uint64_t)v129;
          unint64_t v158 = (unint64_t)v716;
LABEL_64:
          outlined consume of Text.Effect.Composition.Operation(v186, v187, v188, v189, v190, v191, v192, v158);
LABEL_65:
          outlined consume of Text.Effect.Composition.Operation(v722, v162, v154, (uint64_t)v155, v157, v156, (uint64_t)v129, v158);
LABEL_66:
          double v183 = 0.0;
          goto LABEL_67;
        }
        *(void *)&double v734 = v710 & 1;
        uint64_t v197 = *(void **)(*(void *)(v194 + 56) + 8 * v195);
        swift_endAccess();
        *(void *)&v752.CGFloat x = v711;
        v752.CGFloat y = v719.x;
        LOBYTE(v753) = LOBYTE(v734);
        *(void *)&long long v754 = v707;
        *((void *)&v754 + 1) = v705;
        LODWORD(v755) = v706;
        outlined copy of Text.Layout.Line.Line(v711, *(uint64_t *)&v719.x, SLOBYTE(v734));
        uint64_t v198 = v197;
        uint64_t v721 = v160;
        char v199 = v198;
        uint64_t v709 = v185;
        unint64_t v200 = v683;
        uint64_t v717 = v154;
        uint64_t v718 = v155;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v154, (CFIndex)v155);
        unint64_t v201 = v153;
        uint64_t v202 = v724;
        uint64_t v203 = Text.Effect.RelativeIdentifierKey.identifierKey(base:)(v729, v726, v153, v724);
        v752.CGFloat x = v76;
        double v183 = (*(double (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v199) + 0xF8))(v203);

        uint64_t v204 = v723;
        (*v685)(v200, v702);
        outlined consume of Text.Layout.Line.Line(v711, *(uint64_t *)&v719.x, SLOBYTE(v734));
        uint64_t v205 = v201;
        uint64_t v206 = v202;
        uint64_t v207 = v717;
        uint64_t v208 = (uint64_t)v718;
        unint64_t v209 = (unint64_t)v716;
        outlined consume of Text.Effect.Composition.Operation(v205, v206, v717, (uint64_t)v718, v157, v156, (uint64_t)v129, (unint64_t)v716);
        outlined consume of Text.Effect.Composition.Operation(v722, v724, v207, v208, v157, v156, (uint64_t)v129, v209);
LABEL_68:
        double v122 = v122 + v183;
        uint64_t v151 = v204;
        if (v204 == v720)
        {
          char v210 = v701 & 1;
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Layout.Line.Line(v700, (uint64_t)v704, v210);
          uint64_t v211 = *(void *)&v719.x;
          uint64_t v212 = *(void *)&v698;
          uint64_t v213 = v699;
          uint64_t v214 = (uint64_t)v707;
          uint64_t v215 = v705;
          unint64_t v216 = v706;
          outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v698, (uint64_t)v699, v711, *(uint64_t *)&v719.x, (char)v710, (uint64_t)v707, v705, v706);
          outlined consume of Text.Effect.Composition.Operation(v212, (uint64_t)v213, v711, v211, (char)v710, v214, v215, v216);
          unint64_t v123 = v695;
          uint64_t v47 = v715;
          goto LABEL_41;
        }
      }
      uint64_t v717 = v154;
      *(void *)&long long v762 = v154;
      uint64_t v718 = v155;
      *((void *)&v762 + 1) = v155;
      unint64_t v712 = v157;
      char v763 = v157 & 1;
      uint64_t v713 = v156;
      uint64_t v764 = v156;
      uint64_t v714 = (uint64_t)v129;
      uint64_t v765 = v129;
      int v766 = v158;
      uint64_t v767 = v160;
      uint64_t v163 = v159;
      uint64_t v768 = v159;
      uint64_t v769 = v725;
      v747.CGFloat x = 0.0;
      uint64_t v164 = specialized Array._getCount()(v725);
      if (!v164) {
        goto LABEL_66;
      }
      uint64_t v165 = (void *)v164;
      if (v164 < 1) {
        goto LABEL_409;
      }
      unint64_t v166 = v158;
      char v167 = v710 & 1;
      uint64_t v168 = v725;
      uint64_t v709 = v163;
      uint64_t v721 = v160;
      unint64_t v722 = v153;
      uint64_t v716 = (__objc2_prot **)v166;
      outlined copy of Text.Effect.Composition.Operation(v153, v724, v717, (uint64_t)v718, v712, v713, v714, v166);
      swift_bridgeObjectRetain();
      outlined copy of Text.Layout.Line.Line(v711, *(uint64_t *)&v719.x, v167);
      double v169 = (uint64_t *)(v168 + 56);
      uint64_t v170 = v715;
      do
      {
        double v734 = *(double *)&v165;
        CGFloat v172 = *((double *)v169 - 3);
        double v171 = *((double *)v169 - 2);
        double v173 = *((void **)v169 - 1);
        uint64_t v174 = *v169;
        double v175 = *((double *)v169 + 1);
        uint64_t v176 = v169[2];
        uint64_t v178 = v169[3];
        double v177 = *((double *)v169 + 4);
        int64_t v129 = (__objc2_prot **)v169[5];
        uint64_t v179 = v169[6];
        uint64_t v180 = v169[7];
        v752.CGFloat x = v172;
        v752.CGFloat y = v171;
        double MaxY = v171;
        CGFloat x = *(double *)&v173;
        uint64_t v753 = v173;
        *(void *)&long long v754 = v174;
        double MinY = v175;
        *((double *)&v754 + 1) = v175;
        uint64_t v755 = v176;
        uint64_t v756 = v178;
        double MinX = v177;
        unint64_t v757 = *(void *)&v177;
        uint64_t v758 = v129;
        uint64_t v759 = v179;
        uint64_t v760 = v180;
        outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&v172, *(uint64_t *)&v171, v173, v174, SLOBYTE(v175), v176, v178, *(unint64_t *)&v177);
        closure #1 in Text.Effect.Composition.widthDifference(at:context:)(&v747.x, (uint64_t *)&v752, &v762, v729, v726, v727, v728, &v736, v76);
        uint64_t v181 = v176;
        double v182 = v734;
        outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v172, *(uint64_t *)&MaxY, *(void **)&x, v174, SLOBYTE(MinY), v181, v178, *(unint64_t *)&MinX);
        double v183 = v736;
        v747.CGFloat x = v736;
        v169 += 11;
        uint64_t v165 = (void *)(*(void *)&v182 - 1);
      }
      while (*(double *)&v165 != 0.0);
      uint64_t v715 = v170;
      char v184 = v710 & 1;
      swift_bridgeObjectRelease();
      outlined consume of Text.Layout.Line.Line(v711, *(uint64_t *)&v719.x, v184);
      outlined consume of Text.Effect.Composition.Operation(v722, v724, v717, (uint64_t)v718, v712, v713, v714, (unint64_t)v716);
LABEL_67:
      uint64_t v204 = v723;
      goto LABEL_68;
    }
    uint64_t v699 = v126;
    double v698 = *(double *)&v125;
    uint64_t v697 = v132;
    if (v130 >> 62 == 1)
    {
      uint64_t v133 = v125;
      char v134 = (char)v129;
      char v135 = (char)v129;
      uint64_t v136 = (uint64_t)v707;
      uint64_t v137 = v705;
      unint64_t v138 = v706;
      outlined consume of Text.Effect.Composition.Operation(v133, (uint64_t)v126, v127, *(uint64_t *)&v128, v135, (uint64_t)v707, v705, v706);
      uint64_t v139 = *(void *)&v698;
      int64_t v140 = v699;
      uint64_t v141 = (__objc2_prot **)v127;
      uint64_t v142 = *(void *)&v719.x;
      char v143 = v134;
      goto LABEL_46;
    }
    unint64_t v711 = (__objc2_prot **)v127;
    unint64_t v695 = v123;
    uint64_t v217 = v47;
    uint64_t v218 = *v708;
    if (*(void *)(*v708 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v125);
      Swift::Int v219 = Hasher._finalize()();
      uint64_t v220 = -1 << *(unsigned char *)(v218 + 32);
      unint64_t v221 = v219 & ~v220;
      uint64_t v222 = v218 + 56;
      if ((*(void *)(v218 + 56 + ((v221 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v221))
      {
        uint64_t v223 = *(void *)(v218 + 48);
        if (*(void *)(v223 + 8 * v221) == v125)
        {
          uint64_t v224 = v125;
          uint64_t v225 = v711;
          uint64_t v226 = (uint64_t)v707;
          uint64_t v227 = v705;
          unint64_t v228 = v706;
          outlined consume of Text.Effect.Composition.Operation(v224, (uint64_t)v126, v711, *(uint64_t *)&v128, (char)v129, (uint64_t)v707, v705, v706);
          outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v698, (uint64_t)v699, v225, *(uint64_t *)&v719.x, (char)v129, v226, v227, v228);
          double v122 = 0.0;
          uint64_t v47 = v217;
          goto LABEL_40;
        }
        uint64_t v244 = ~v220;
        unint64_t v245 = (v221 + 1) & v244;
        uint64_t v47 = v217;
        unint64_t v123 = v695;
        if (((*(void *)(v222 + ((v245 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v245) & 1) == 0) {
          goto LABEL_76;
        }
        if (*(void *)(v223 + 8 * v245) == v125)
        {
          uint64_t v246 = (uint64_t)v126;
          uint64_t v247 = *(void *)&v128;
        }
        else
        {
          do
          {
            unint64_t v245 = (v245 + 1) & v244;
            if (((*(void *)(v222 + ((v245 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v245) & 1) == 0) {
              goto LABEL_76;
            }
          }
          while (*(void *)(v223 + 8 * v245) != v125);
          uint64_t v246 = (uint64_t)v126;
          uint64_t v247 = *(void *)&v128;
          unint64_t v123 = v695;
        }
        uint64_t v248 = v125;
        id v249 = v711;
        uint64_t v710 = v129;
        char v250 = (char)v129;
        uint64_t v136 = (uint64_t)v707;
        uint64_t v137 = v705;
        unint64_t v138 = v706;
        outlined consume of Text.Effect.Composition.Operation(v248, v246, v711, v247, v250, (uint64_t)v707, v705, v706);
        uint64_t v139 = *(void *)&v698;
        int64_t v140 = v699;
        uint64_t v141 = v249;
        uint64_t v142 = v247;
        char v143 = (char)v710;
LABEL_46:
        outlined consume of Text.Effect.Composition.Operation(v139, (uint64_t)v140, v141, v142, v143, v136, v137, v138);
LABEL_70:
        double v122 = 0.0;
LABEL_41:
        double v86 = v86 + v122;
        unint64_t v113 = v123;
        if (v123 == v694)
        {
          swift_bridgeObjectRelease_n();
          outlined consume of Text.Layout.Line.Line(v682, v681, (char)v680);
          uint64_t v287 = *(void *)&v672;
          uint64_t v288 = *(void *)&v673;
          unint64_t v289 = *(void *)&v689;
          CGFloat v290 = v700;
          uint64_t v291 = (uint64_t)v704;
          char v292 = v701;
          uint64_t v293 = v686;
          outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v673, v688, v700, (uint64_t)v704, v701, *(uint64_t *)&v672, v686, *(unint64_t *)&v689);
          double v294 = v290;
          uint64_t v49 = v684;
          outlined consume of Text.Effect.Composition.Operation(v288, v688, v294, v291, v292, v287, v293, v289);
          goto LABEL_29;
        }
        continue;
      }
    }
    break;
  }
  uint64_t v47 = v217;
LABEL_76:
  uint64_t v229 = (uint64_t *)v696;
  swift_beginAccess();
  uint64_t v230 = *v229;
  if (!*(void *)(v230 + 16) || (uint64_t v231 = specialized __RawDictionaryStorage.find<A>(_:)(v125), (v232 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v114 = v125;
    uint64_t v115 = (uint64_t)v126;
    uint64_t v116 = v711;
    char v117 = (char)v129;
    char v118 = (char)v129;
    uint64_t v119 = (uint64_t)v707;
    uint64_t v120 = v705;
    unint64_t v121 = v706;
    outlined consume of Text.Effect.Composition.Operation(v114, v115, v711, *(uint64_t *)&v128, v118, (uint64_t)v707, v705, v706);
    outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v698, (uint64_t)v699, v116, *(uint64_t *)&v128, v117, v119, v120, v121);
    double v122 = 0.0;
LABEL_40:
    unint64_t v123 = v695;
    goto LABEL_41;
  }
  uint64_t v710 = v129;
  uint64_t v715 = v47;
  char v233 = v701 & 1;
  CGFloat v234 = *(void **)(*(void *)(v230 + 56) + 8 * v231);
  swift_endAccess();
  CGFloat v235 = v700;
  outlined copy of Text.Layout.Line.Line(v700, (uint64_t)v704, v233);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  double v236 = v234;
  RangeSet.init()();
  if (v711 == *(__objc2_prot ***)&v128)
  {
    uint64_t v237 = (uint64_t)v704;
LABEL_80:
    (*v671)(v669, v691, v702);
    uint64_t v238 = *(void *)(v729 + 16);
    if (v238)
    {
      uint64_t v239 = *(void *)&v698;
      uint64_t v240 = v729;
      uint64_t v241 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)&v698);
      uint64_t v242 = v699;
      if (v243) {
        uint64_t v238 = *(void *)(*(void *)(v240 + 56) + 8 * v241);
      }
      else {
        uint64_t v238 = 0;
      }
      uint64_t v237 = (uint64_t)v704;
    }
    else
    {
      uint64_t v242 = v699;
      uint64_t v239 = *(void *)&v698;
    }
    uint64_t v258 = (char *)v242 + v238;
    if (!__OFADD__(v238, v242))
    {
      uint64_t v259 = v236;
      id v260 = v242;
      char v261 = v701 & 1;
      v752.CGFloat x = v76;
      char v262 = v669;
      double v122 = (*(double (**)(uint64_t, char *, char *, CGPoint *))((*MEMORY[0x263F8EED0] & *v259) + 0xF8))(v239, v258, v669, &v752);

      (*v685)(v262, v702);
      outlined consume of Text.Layout.Line.Line(v235, v237, v261);
      uint64_t v263 = (uint64_t)v260;
      uint64_t v264 = v711;
      uint64_t v265 = *(void *)&v719.x;
      LOBYTE(v262) = (_BYTE)v710;
      uint64_t v266 = (uint64_t)v707;
      uint64_t v267 = v705;
      unint64_t v268 = v706;
      outlined consume of Text.Effect.Composition.Operation(v239, v263, v711, *(uint64_t *)&v719.x, (char)v710, (uint64_t)v707, v705, v706);
      outlined consume of Text.Effect.Composition.Operation(*(uint64_t *)&v698, (uint64_t)v699, v264, v265, (char)v262, v266, v267, v268);
      uint64_t v47 = v715;
      goto LABEL_40;
    }
LABEL_434:
    __break(1u);
LABEL_435:
    __break(1u);
LABEL_436:
    __break(1u);
LABEL_437:
    __break(1u);
LABEL_438:
    __break(1u);
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
LABEL_443:
    __break(1u);
LABEL_444:
    __break(1u);
LABEL_445:
    __break(1u);
LABEL_446:
    __break(1u);
LABEL_447:
    __break(1u);
LABEL_448:
    __break(1u);
LABEL_449:
    __break(1u);
LABEL_450:
    __break(1u);
LABEL_451:
    __break(1u);
LABEL_452:
    __break(1u);
LABEL_453:
    __break(1u);
LABEL_454:
    __break(1u);
LABEL_455:
    __break(1u);
LABEL_456:
    __break(1u);
LABEL_457:
    __break(1u);
LABEL_458:
    __break(1u);
LABEL_459:
    __break(1u);
LABEL_460:
    __break(1u);
LABEL_461:
    __break(1u);
LABEL_462:
    __break(1u);
LABEL_463:
    __break(1u);
  }
  uint64_t v251 = (char *)v711;
  uint64_t v237 = (uint64_t)v704;
  if (*(uint64_t *)&v128 < (uint64_t)v711) {
    goto LABEL_440;
  }
  while ((uint64_t)v251 < *(uint64_t *)&v128)
  {
    if (v701)
    {
      outlined copy of Text.Layout.Line.Line(v235, v237, 1);
      uint64_t v252 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v235);
      if (!v252) {
        goto LABEL_460;
      }
      double v253 = v252;
      outlined consume of Text.Layout.Line.Line(v235, v237, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v235, v237, 0);
      outlined copy of Text.Layout.Line.Line(v235, v237, 0);

      swift_release();
      double v253 = (const __CTLine *)v235;
    }
    double v254 = (id)_CTLineGetRunAtIndex(v253, (CFIndex)v251);
    CFRange v255 = CTRunGetStringRange((CTRunRef)v254);

    swift_release();
    CFIndex v256 = v255.location + v255.length;
    if (__OFADD__(v255.location, v255.length)) {
      goto LABEL_415;
    }
    if (v256 < v255.location) {
      goto LABEL_416;
    }
    *(void *)&v747.CGFloat x = v255.location;
    *(void *)&v747.CGFloat y = v255.location + v255.length;
    if (__OFSUB__(v256, v255.location)) {
      goto LABEL_417;
    }
    if (v256 != v255.location)
    {
      uint64_t v257 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
      type metadata accessor for RangeSet<Text.Layout.CharacterIndex>(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
      RangeSet.Ranges._insert(contentsOf:)();
      v257(&v752, 0);
    }
    ++v251;
    CGFloat v128 = v719.x;
    uint64_t v237 = (uint64_t)v704;
    CGFloat v235 = v700;
    if (*(char **)&v719.x == v251) {
      goto LABEL_80;
    }
  }
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  CGFloat v37 = height;
  CGFloat v36 = width;
  double v35 = v630;
  double v34 = v631;
LABEL_375:
  v788.origin.CGFloat x = v35;
  v788.origin.CGFloat y = v34;
  v788.size.CGFloat width = v36;
  v788.size.CGFloat height = v37;
  BOOL IsNull = CGRectIsNull(v788);
  uint64_t v591 = v659;
  char v592 = (double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  double v593 = *(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
  double v594 = *(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8];
  if (IsNull)
  {
    CGFloat v596 = v592[2];
    double v595 = v592[3];
    double v734 = v596;
    CGFloat x = v595;
    CGFloat v597 = v594;
    double v598 = v593;
  }
  else
  {
    double v598 = CGRect.outset(by:)(*(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets], *(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets + 8], *(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets + 16], *(double *)&v659[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets + 24], v35 + v593, v34 + v594, v36, v37);
    CGFloat v597 = v599;
    double v734 = *(double *)&v600;
    CGFloat x = v601;
    double v593 = *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
    double v594 = *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8];
    CGFloat v596 = *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 16];
    double v595 = *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 24];
  }
  CGFloat v602 = v593;
  double v603 = v594;
  CGFloat v604 = v596;
  double v605 = v595;
  double MinY = CGRectGetMinY(*(CGRect *)&v593);
  v789.origin.CGFloat x = v598;
  v789.origin.CGFloat y = v597;
  CGFloat v606 = v734;
  v789.size.CGFloat width = v734;
  CGFloat v607 = x;
  v789.size.CGFloat height = x;
  double MinY = MinY - CGRectGetMinY(v789);
  v790.origin.CGFloat x = v602;
  v790.origin.CGFloat y = v594;
  v790.size.CGFloat width = v596;
  v790.size.CGFloat height = v595;
  double MinX = CGRectGetMinX(v790);
  v791.origin.CGFloat x = v598;
  v791.origin.CGFloat y = v597;
  v791.size.CGFloat width = v606;
  v791.size.CGFloat height = v607;
  double MinX = MinX - CGRectGetMinX(v791);
  v792.origin.CGFloat x = v598;
  v792.origin.CGFloat y = v597;
  v792.size.CGFloat width = v606;
  v792.size.CGFloat height = v607;
  double MaxY = CGRectGetMaxY(v792);
  v793.origin.CGFloat x = v602;
  v793.origin.CGFloat y = v594;
  v793.size.CGFloat width = v596;
  v793.size.CGFloat height = v595;
  double MaxY = MaxY - CGRectGetMaxY(v793);
  v794.origin.CGFloat x = v598;
  v794.origin.CGFloat y = v597;
  v794.size.CGFloat width = v606;
  v794.size.CGFloat height = v607;
  double MaxX = CGRectGetMaxX(v794);
  v795.origin.CGFloat x = v602;
  v795.origin.CGFloat y = v594;
  v795.size.CGFloat width = v596;
  v795.size.CGFloat height = v595;
  double v609 = MaxX - CGRectGetMaxX(v795);
  uint64_t v610 = (double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement];
  BOOL v611 = MinY == *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement]
      && MinX == *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement + 8];
  double v612 = MinX;
  double v613 = MaxY;
  BOOL v615 = v611
      && MaxY == *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement + 16]
      && v609 == *(double *)&v591[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement + 24];
  int64_t v129 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  if (!v615)
  {
    *uint64_t v610 = MinY;
    v610[1] = v612;
    v610[2] = v613;
    v610[3] = v609;
    if (objc_msgSend(v591, sel_delegate))
    {
      type metadata accessor for TextRenderSurface();
      uint64_t v616 = swift_dynamicCastClass();
      if (v616)
      {
        uint64_t v617 = MEMORY[0x24C527E00](v616 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
        if (v617)
        {
          uint64_t v618 = (void *)v617;
          TextEffectsRenderer.updateDisplacementAndBounds(changed:)(0);
          swift_unknownObjectRelease();

          goto LABEL_395;
        }
      }
LABEL_394:
      swift_unknownObjectRelease();
LABEL_395:
      uint64_t v591 = v659;
    }
  }
  if (!objc_msgSend(v591, (SEL)v129[471], *(void *)&v626, *(void *)&v627, *(void *)&v628, *(void *)&v629)) {
    return outlined release of TextRenderLayer.Layout?(v770, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  }
  type metadata accessor for TextRenderSurface();
  uint64_t v619 = swift_dynamicCastClass();
  if (!v619)
  {
    swift_unknownObjectRelease();
    return outlined release of TextRenderLayer.Layout?(v770, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  }
  uint64_t v620 = MEMORY[0x24C527E00](v619 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer);
  if (v620)
  {
    uint64_t v621 = (unsigned char *)v620;
    uint64_t v622 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
    char v623 = *(unsigned char *)(v620 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
    *(unsigned char *)(v620 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags) = v623 | 2;
    if ((v623 & 1) == 0)
    {
      uint64_t v624 = (void *)MEMORY[0x24C527E00](v620 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
      _NSTextCustomRenderingDelegateInvalidateInteractionGeometry(v624);
      swift_unknownObjectRelease();
      if ((v621[v622] & 4) != 0)
      {
        uint64_t v625 = (void *)MEMORY[0x24C527E00](&v621[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate]);
        _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v625);
        swift_unknownObjectRelease();
      }
      v621[v622] = 0;
    }
  }
  outlined release of TextRenderLayer.Layout?(v770, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of TextRenderLayer.Layout?);
  return (void *)swift_unknownObjectRelease();
}

uint64_t ObjC metadata update function for TextRenderLayer()
{
  return type metadata accessor for TextRenderLayer(0);
}

uint64_t type metadata accessor for TextRenderLayer(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TextRenderLayer);
}

void type metadata completion function for TextRenderLayer()
{
  type metadata accessor for RangeSet<Int>(319, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8D6E0], MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void Text.Layout.Line.xrange(runIndex:range:)(CFIndex a1@<X0>, CFIndex a2@<X1>, CFIndex a3@<X2>, uint64_t a4@<X8>)
{
  secondaryOffset[1] = *(CGFloat *)MEMORY[0x263EF8340];
  uint64_t v7 = *(void **)v4;
  uint64_t v8 = *(void *)(v4 + 8);
  char v9 = *(unsigned char *)(v4 + 16);
  double v10 = *(double *)(v4 + 24);
  uint64_t v11 = *(void **)v4;
  if (v9)
  {
    outlined copy of Text.Layout.Line.Line(v11, v8, 1);
    uint64_t v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v12) {
      goto LABEL_72;
    }
    uint64_t v13 = v12;
    outlined consume of Text.Layout.Line.Line(v7, v8, 1);
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v11, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    uint64_t v13 = (const __CTLine *)v7;
  }
  CFIndex v52 = a1;
  uint64_t v14 = (id)_CTLineGetRunAtIndex(v13, a1);
  CFRange StringRange = CTRunGetStringRange((CTRunRef)v14);

  swift_release();
  CFIndex v16 = StringRange.location + StringRange.length;
  if (__OFADD__(StringRange.location, StringRange.length)) {
    goto LABEL_61;
  }
  if (v16 < StringRange.location)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (StringRange.location <= a2) {
    locatiouint64_t n = a2;
  }
  else {
    locatiouint64_t n = StringRange.location;
  }
  CFIndex v18 = a3;
  if (v16 < a3) {
    CFIndex v18 = StringRange.location + StringRange.length;
  }
  double v19 = 0.0;
  CFIndex v50 = v18;
  if (location >= v18) {
    goto LABEL_17;
  }
  charIndeCGFloat x = location;
  if ((v9 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    uint64_t v23 = (const __CTLine *)v7;
    uint64_t v21 = (const __CTLine *)v7;
    goto LABEL_19;
  }
  uint64_t v20 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (!v20)
  {
LABEL_17:
    CFIndex v24 = 0;
    CFIndex v25 = 0;
    char v26 = 1;
    double v27 = 0.0;
    uint64_t v28 = a4;
LABEL_58:
    *(double *)uint64_t v28 = v19;
    *(double *)(v28 + 8) = v27;
    *(void *)(v28 + 16) = v24;
    *(void *)(v28 + 24) = v25;
    *(unsigned char *)(v28 + 32) = v26;
    return;
  }
  uint64_t v21 = v20;
  outlined copy of Text.Layout.Line.Line(v7, v8, 1);
  uint64_t v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (!v22) {
    goto LABEL_73;
  }
  uint64_t v23 = v22;
  outlined consume of Text.Layout.Line.Line(v7, v8, 1);
LABEL_19:
  uint64_t v29 = (id)_CTLineGetRunAtIndex(v23, a1);
  char Status = CTRunGetStatus((CTRunRef)v29);

  swift_release();
  secondaryOffset[0] = 0.0;
  OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v21, charIndex, secondaryOffset);
  if (OffsetForStringIndex == secondaryOffset[0]) {
    goto LABEL_33;
  }
  if (__OFSUB__(charIndex, StringRange.location))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (StringRange.location < a2) {
    goto LABEL_33;
  }
  uint64_t v31 = Status & 1;
  CFIndex v32 = a1 + v31;
  if (__OFADD__(a1, v31))
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v32 < 0)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (!v32) {
    goto LABEL_33;
  }
  outlined copy of Text.Layout.Line.Line(v7, v8, v9);
  CFIndex v33 = 0;
  while (1)
  {
    if (v32 == v33)
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v9) {
      break;
    }
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);

    swift_release();
    double v34 = (const __CTLine *)v7;
LABEL_27:
    double v35 = (id)_CTLineGetRunAtIndex(v34, v33);
    buffer.CGFloat x = 0.0;
    buffer.CGFloat y = 0.0;
    CGFloat ascent = 0.0;
    CGFloat leading = 0.0;
    CGFloat descent = 0.0;
    originsBuffer.CGFloat x = 0.0;
    originsBuffer.CGFloat y = 0.0;
    v62.locatiouint64_t n = 0;
    v62.CFIndex length = 1;
    CTRunGetPositions((CTRunRef)v35, v62, &buffer);
    v63.locatiouint64_t n = 0;
    v63.CFIndex length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v35, v63, 0, &originsBuffer);
    v64.locatiouint64_t n = 0;
    v64.CFIndex length = 0;
    CTRunGetTypographicBounds((CTRunRef)v35, v64, &ascent, &descent, &leading);

    swift_release();
    if (v32 == ++v33)
    {
      outlined consume of Text.Layout.Line.Line(v7, v8, v9);
LABEL_33:
      CGFloat ascent = 0.0;
      CFIndex v25 = v50;
      double v37 = CTLineGetOffsetForStringIndex(v21, v50, &ascent);
      double v38 = 0.0;
      if (ascent != 0.0)
      {
        if (__OFSUB__(v16, v50))
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        if (v16 <= a3)
        {
          BOOL v39 = (Status & 1) == 0;
          CFIndex v40 = v52 + v39;
          if (__OFADD__(v52, v39))
          {
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
          }
          if (v40 < 0) {
            goto LABEL_69;
          }
          if (v40)
          {
            outlined copy of Text.Layout.Line.Line(v7, v8, v9);
            for (CFIndex i = 0; i != v40; ++i)
            {
              if (v40 == i) {
                goto LABEL_60;
              }
              if (v9)
              {
                outlined copy of Text.Layout.Line.Line(v7, v8, 1);
                uint64_t v45 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
                if (!v45) {
                  goto LABEL_71;
                }
                uint64_t v42 = v45;
                outlined consume of Text.Layout.Line.Line(v7, v8, 1);
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v7, v8, 0);
                outlined copy of Text.Layout.Line.Line(v7, v8, 0);

                swift_release();
                uint64_t v42 = (const __CTLine *)v7;
              }
              int64_t v43 = (id)_CTLineGetRunAtIndex(v42, i);
              buffer.CGFloat x = 0.0;
              buffer.CGFloat y = 0.0;
              CGFloat leading = 0.0;
              CGFloat descent = 0.0;
              originsBuffer.CGFloat y = 0.0;
              CGFloat v56 = 0.0;
              originsBuffer.CGFloat x = 0.0;
              v65.locatiouint64_t n = 0;
              v65.CFIndex length = 1;
              CTRunGetPositions((CTRunRef)v43, v65, &buffer);
              v66.locatiouint64_t n = 0;
              v66.CFIndex length = 1;
              CTRunGetBaseAdvancesAndOrigins((CTRunRef)v43, v66, 0, &originsBuffer);
              v67.locatiouint64_t n = 0;
              v67.CFIndex length = 0;
              double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v43, v67, &descent, &leading, &v56);

              swift_release();
              double v38 = v38 + TypographicBounds;
            }
            outlined consume of Text.Layout.Line.Line(v7, v8, v9);
            CFIndex v25 = v50;
          }
        }
      }

      if (v38 >= v37) {
        double v46 = v38;
      }
      else {
        double v46 = v37;
      }
      if (v38 >= v37) {
        double v47 = v37;
      }
      else {
        double v47 = v38;
      }
      double v19 = v10 + v47;
      double v27 = v10 + v46;
      if (v47 <= v46 && v19 <= v27)
      {
        char v26 = 0;
        uint64_t v28 = a4;
        CFIndex v24 = charIndex;
        goto LABEL_58;
      }
      goto LABEL_63;
    }
  }
  outlined copy of Text.Layout.Line.Line(v7, v8, 1);
  CGFloat v36 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (v36)
  {
    double v34 = v36;
    outlined consume of Text.Layout.Line.Line(v7, v8, 1);
    goto LABEL_27;
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
}

CFIndex Text.Layout.Line.xranges(range:)(CFIndex a1, CFIndex a2)
{
  uint64_t v8 = *(void **)v3;
  uint64_t v9 = *(void *)(v3 + 8);
  char v10 = *(unsigned char *)(v3 + 16);
  double v11 = *(double *)(v3 + 24);
  uint64_t v12 = *(void **)v3;
  if (v10)
  {
    uint64_t v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v12);
    if (!v13) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v2 = v13;
    outlined copy of Text.Layout.Line.Line(v8, v9, 1);
    locatiouint64_t n = objc_msgSend(v8, sel_characterRange);
    uint64_t v16 = v15;
    outlined consume of Text.Layout.Line.Line(v8, v9, 1);
    CFIndex v18 = (CFIndex)location + v16;
    if (__OFADD__(location, v16))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= (uint64_t)location) {
      goto LABEL_9;
    }
    __break(1u);
  }
  outlined copy of Text.Layout.Line.Line(v12, v9, 0);
  swift_release();
  CFRange StringRange = CTLineGetStringRange((CTLineRef)v8);
  CFIndex v18 = StringRange.location + StringRange.length;
  if (__OFADD__(StringRange.location, StringRange.length))
  {
    __break(1u);
    goto LABEL_25;
  }
  locatiouint64_t n = (id)StringRange.location;
  if (v18 < StringRange.location)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v2 = (const __CTLine *)v8;
LABEL_9:
  if ((uint64_t)location <= a1) {
    CFIndex v20 = a1;
  }
  else {
    CFIndex v20 = (CFIndex)location;
  }
  if (v18 >= a2) {
    CFIndex RunCount = a2;
  }
  else {
    CFIndex RunCount = v18;
  }
  if (v20 >= RunCount) {
    goto LABEL_34;
  }
  Text.Layout.Line.containsRightToLeft.getter();
  if ((v22 & 1) == 0)
  {
    OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v2, v20, 0);
    double v24 = CTLineGetOffsetForStringIndex(v2, RunCount, 0);
    if (OffsetForStringIndex < v24)
    {
      double v4 = v24;
      type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_2461B9DC0;
      double v26 = v11 + OffsetForStringIndex;
      double v27 = v11 + v4;
      if (OffsetForStringIndex <= v4 && v26 <= v27)
      {
        CFIndex RunCount = v25;
        *(double *)(v25 + 32) = v26;
        *(double *)(v25 + 40) = v27;
        goto LABEL_23;
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    goto LABEL_34;
  }
LABEL_26:
  uint64_t v12 = v8;
  uint64_t v17 = v9;
  if (v10)
  {
    outlined copy of Text.Layout.Line.Line(v8, v9, 1);
    uint64_t v29 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v8);
    if (!v29)
    {
      outlined consume of Text.Layout.Line.Line(v8, v9, 1);
LABEL_34:

      return MEMORY[0x263F8EE78];
    }
    goto LABEL_31;
  }
LABEL_30:
  outlined copy of Text.Layout.Line.Line(v12, v17, 0);
  outlined copy of Text.Layout.Line.Line(v8, v9, 0);
  swift_release();
  uint64_t v29 = (const __CTLine *)v8;
LABEL_31:
  CFIndex RunCount = (CFIndex)_CTLineGetRunCount(v29);

  outlined consume of Text.Layout.Line.Line(v8, v9, v10);
  if (RunCount < 0)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    CFIndex RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(RunCount + 16) + 1, 1, (void *)RunCount);
LABEL_59:
    unint64_t v45 = *(void *)(RunCount + 16);
    unint64_t v44 = *(void *)(RunCount + 24);
    if (v45 >= v44 >> 1) {
      CFIndex RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, (void *)RunCount);
    }
    *(void *)(RunCount + 16) = v45 + 1;
    CFIndex v46 = RunCount + 16 * v45;
    *(double *)(v46 + 32) = v4;
    *(double *)(v46 + 40) = v5;
    goto LABEL_23;
  }
  CFIndex v47 = RunCount;
  if (!RunCount) {
    goto LABEL_34;
  }
  uint64_t v49 = 0;
  uint64_t v51 = 0;
  CFIndex v30 = 0;
  CFIndex RunCount = MEMORY[0x263F8EE78];
  char v48 = 1;
  double v4 = 0.0;
  double v5 = 0.0;
  do
  {
    Text.Layout.Line.xrange(runIndex:range:)(v30, a1, a2, (uint64_t)v53);
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v53, (uint64_t)&v54, &lazy cache variable for type metadata for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>)?, (uint64_t (*)(uint64_t))type metadata accessor for (xrange: ClosedRange<CGFloat>, characterRange: Range<Text.Layout.CharacterIndex>));
    if (v58)
    {
      uint64_t v33 = v49;
      uint64_t v32 = v51;
      goto LABEL_38;
    }
    double v35 = v54;
    double v34 = v55;
    uint64_t v33 = v56;
    uint64_t v32 = v57;
    if (v48)
    {
      char v48 = 0;
    }
    else
    {
      if (vabdd_f64(v5, v54) < 0.001)
      {
        if (__OFSUB__(v56, v51)) {
          goto LABEL_63;
        }
        if (v56 == v51)
        {
          uint64_t v33 = v49;
          if (v4 > v55 || v57 < v49) {
            goto LABEL_64;
          }
          char v48 = 0;
          goto LABEL_56;
        }
      }
      uint64_t v52 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        CFIndex RunCount = (CFIndex)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(RunCount + 16) + 1, 1, (void *)RunCount);
      }
      unint64_t v38 = *(void *)(RunCount + 16);
      unint64_t v37 = *(void *)(RunCount + 24);
      unint64_t v39 = v38 + 1;
      uint64_t v32 = v52;
      if (v38 >= v37 >> 1)
      {
        unint64_t v50 = v38 + 1;
        uint64_t v41 = (void *)RunCount;
        unint64_t v42 = *(void *)(RunCount + 16);
        int64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v41);
        unint64_t v39 = v50;
        uint64_t v32 = v52;
        unint64_t v38 = v42;
        CFIndex RunCount = (CFIndex)v43;
      }
      char v48 = 0;
      *(void *)(RunCount + 16) = v39;
      CFIndex v40 = RunCount + 16 * v38;
      *(double *)(v40 + 32) = v4;
      *(double *)(v40 + 40) = v5;
    }
    double v4 = v35;
LABEL_56:
    double v5 = v34;
LABEL_38:
    ++v30;
    uint64_t v49 = v33;
    uint64_t v51 = v32;
  }
  while (v47 != v30);
  if ((v48 & 1) == 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_59;
    }
    goto LABEL_66;
  }
LABEL_23:

  return RunCount;
}

void Text.Layout.Line.containsRightToLeft.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3)
  {
    id v4 = (id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (!v4) {
      return;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(*(void **)v0, *(void *)(v0 + 8), 0);
    swift_release();
    id v4 = v1;
  }
  if ((CTLineIsRightToLeft() & 1) != 0 || !CTLineHasBidiLevels())
  {
LABEL_25:

    return;
  }
  outlined copy of Text.Layout.Line.Line(v1, v2, v3);
  CFIndex v5 = 0;
  while (1)
  {
    if (v3)
    {
      uint64_t v6 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
      if (!v6)
      {
        if (!v5)
        {
          LOBYTE(v3) = 1;
LABEL_24:
          outlined consume of Text.Layout.Line.Line(v1, v2, v3);
          goto LABEL_25;
        }
        goto LABEL_15;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      uint64_t v6 = (const __CTLine *)v1;
    }
    CFArrayRef RunCount = _CTLineGetRunCount(v6);

    if ((const __CFArray *)v5 == RunCount) {
      goto LABEL_24;
    }
    if (!v3)
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);

      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      uint64_t v13 = (const __CTLine *)v1;
      uint64_t v9 = v1;
      goto LABEL_19;
    }
LABEL_15:
    id v8 = (id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8) {
      goto LABEL_27;
    }
    uint64_t v9 = v8;
    char v10 = 1;
    outlined copy of Text.Layout.Line.Line(v1, v2, 1);
    double v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    CFArrayRef v12 = 0;
    if (v11)
    {
      uint64_t v13 = v11;
LABEL_19:
      CFArrayRef v12 = _CTLineGetRunCount(v13);

      char v10 = v3;
    }
    outlined consume of Text.Layout.Line.Line(v1, v2, v10);
    if (v5 >= (uint64_t)v12) {
      break;
    }
    CFIndex v14 = v5 + 1;
    swift_retain();
    uint64_t v15 = v9;
    uint64_t v16 = (id)_CTLineGetRunAtIndex(v15, v5);
    char Status = CTRunGetStatus((CTRunRef)v16);
    swift_release_n();

    CFIndex v5 = v14;
    if (Status) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(unint64_t a1, uint64_t i, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (unint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  CFArrayRef v12 = (char *)&v50 - v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!(a3 >> 62))
    {
LABEL_3:
      uint64_t v14 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13 == v14)
      {
LABEL_4:
        swift_bridgeObjectRetain();
        return i;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!(a3 >> 62)) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 == v14) {
    goto LABEL_4;
  }
LABEL_7:
  unint64_t v53 = a3;
  specialized Collection<>.commonPrefix<A>(with:)(v54, a3, a1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v19 = v54[0];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v16 == v18 >> 1)
  {
    uint64_t v16 = 0;
    unint64_t v20 = v53;
    goto LABEL_14;
  }
  if (v16 >= (uint64_t)(v18 >> 1)) {
    goto LABEL_55;
  }
  uint64_t v21 = 0;
  unint64_t v20 = v53;
  do
  {
    if ((v18 >> 1) + ~v16 > 0x7FFFFFFFFFFFFFFELL)
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    --v21;
  }
  while (v16 - (v18 >> 1) != v21);
  uint64_t v16 = -v21;
LABEL_14:
  specialized BidirectionalCollection<>.commonSuffix<A>(with:)(v54, v20, a1);
  uint64_t v19 = v22;
  a1 = v23;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v19 == a1 >> 1)
  {
    uint64_t v19 = 0;
    goto LABEL_21;
  }
  if (v19 >= (uint64_t)(a1 >> 1)) {
    goto LABEL_56;
  }
  uint64_t v24 = 0;
  do
  {
    if ((a1 >> 1) + ~v19 > 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_53;
    }
    --v24;
  }
  while (v19 - (a1 >> 1) != v24);
  uint64_t v19 = -v24;
LABEL_21:
  if (__OFADD__(v16, v19)) {
    goto LABEL_54;
  }
  if (v16 + v19 < v14)
  {
    a1 = specialized Collection.prefix(_:)(v16, i);
    uint64_t v26 = v25;
    unint64_t v53 = v27;
    unint64_t v9 = v28;
    if (v28)
    {
      uint64_t v51 = v25;
      uint64_t v32 = type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v52 = v32;
      uint64_t v33 = swift_dynamicCastClass();
      if (!v33)
      {
        swift_unknownObjectRelease();
        uint64_t v33 = MEMORY[0x263F8EE78];
      }
      uint64_t v34 = *(void *)(v33 + 16);
      swift_release();
      if (__OFSUB__(v9 >> 1, v53)) {
        goto LABEL_61;
      }
      if (v34 != (v9 >> 1) - v53) {
        goto LABEL_62;
      }
      unint64_t v9 = swift_dynamicCastClass();
      if (!v9)
      {
        swift_unknownObjectRelease();
        unint64_t v9 = MEMORY[0x263F8EE78];
      }
      goto LABEL_38;
    }
    swift_bridgeObjectRetain();
    while (2)
    {
      unint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v26, v53, v9);
LABEL_38:
      swift_unknownObjectRelease();
      v54[0] = v9;
      uint64_t v35 = v14 - v16;
      if (__OFSUB__(v14, v16))
      {
LABEL_58:
        __break(1u);
      }
      else
      {
        BOOL v36 = __OFSUB__(v35, v19);
        uint64_t v37 = v35 - v19;
        if (!v36)
        {
          if ((v37 & 0x8000000000000000) == 0)
          {
            if (v37)
            {
              uint64_t v38 = v16 + v19 - v14;
              do
              {
                UUID.init()();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, v9);
                }
                unint64_t v40 = *(void *)(v9 + 16);
                unint64_t v39 = *(void *)(v9 + 24);
                if (v40 >= v39 >> 1) {
                  unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v9);
                }
                *(void *)(v9 + 16) = v40 + 1;
                (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v9+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v40, v12, v6);
              }
              while (!__CFADD__(v38++, 1));
              v54[0] = v9;
            }
            int64_t v42 = specialized BidirectionalCollection.suffix(_:)(v19, i);
            uint64_t v44 = v43;
            uint64_t v46 = v45;
            unint64_t v48 = v47;
            swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v42, v44, v46, v48);
            return v54[0];
          }
          goto LABEL_60;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      swift_unknownObjectRelease();
      uint64_t v26 = v51;
      continue;
    }
  }
  uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x263F8EE78]);
  if (v14 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  for (CFIndex i = v29; v14; --v14)
  {
    UUID.init()();
    unint64_t v31 = *(void *)(i + 16);
    unint64_t v30 = *(void *)(i + 24);
    if (v31 >= v30 >> 1) {
      CFIndex i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, i);
    }
    *(void *)(i + 16) = v31 + 1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(i+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v31, v9, v6);
  }
  return i;
}

void specialized Collection<>.commonPrefix<A>(with:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v7 = (void *)(a3 >> 62);
  if (a3 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v9 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    BOOL v36 = a1;
    if (!v8)
    {
LABEL_41:
      uint64_t v3 = 0;
      if (!v7) {
        goto LABEL_42;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v36 = a1;
    if (!v8) {
      goto LABEL_41;
    }
  }
  if (!v10) {
    goto LABEL_41;
  }
  unint64_t v38 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0) {
    goto LABEL_72;
  }
  if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_74;
  }
  for (id i = *(id *)(v4 + 32); ; id i = (id)MEMORY[0x24C523D60](0, v4))
  {
    uint64_t v3 = (uint64_t)i;
    unint64_t v37 = a2 & 0xC000000000000001;
    uint64_t v35 = v7;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
LABEL_74:
    id v12 = (id)MEMORY[0x24C523D60](0, a2);
LABEL_12:
    uint64_t v7 = v12;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
      unint64_t v34 = v9;
      a1 = 0;
      do
      {
        uint64_t v3 = (uint64_t)a1 + 1;
        if (__OFADD__(a1, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        if (v3 == v8 || v3 == v10) {
          break;
        }
        if (v38)
        {
          id v17 = (id)MEMORY[0x24C523D60]((char *)a1 + 1, v4);
        }
        else
        {
          if (v3 < 0) {
            goto LABEL_35;
          }
          if ((unint64_t)v3 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_36;
          }
          id v17 = *(id *)(v4 + 32 + 8 * v3);
        }
        uint64_t v7 = v17;
        if (v37)
        {
          id v14 = (id)MEMORY[0x24C523D60]((char *)a1 + 1, a2);
        }
        else
        {
          if (v3 < 0) {
            goto LABEL_37;
          }
          if ((unint64_t)v3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_38;
          }
          id v14 = *(id *)(a2 + 32 + 8 * v3);
        }
        uint64_t v15 = v14;
        char v16 = static NSObject.== infix(_:_:)();

        a1 = (uint64_t *)((char *)a1 + 1);
      }
      while ((v16 & 1) != 0);
      if (v3 < 0) {
        goto LABEL_76;
      }
      unint64_t v9 = v34;
      uint64_t v7 = v35;
      if (!v35)
      {
LABEL_42:
        uint64_t v18 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v7 = v35;
      if (!v35) {
        goto LABEL_42;
      }
    }
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < 0)
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_43:
    if (v18 < v3) {
      goto LABEL_68;
    }
    if ((v4 & 0xC000000000000001) != 0 && v3)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      Swift::Int v19 = 0;
      do
      {
        Swift::Int v20 = v19 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v19);
        Swift::Int v19 = v20;
      }
      while (v3 != v20);
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v8 = v23;
      uint64_t v7 = v24;
      uint64_t v10 = v25;
      swift_bridgeObjectRelease();
      uint64_t v21 = a2 & 0xFFFFFFFFFFFFFF8;
      if (!v9)
      {
LABEL_56:
        uint64_t v4 = *(void *)(v21 + 16);
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v10 = (2 * v3) | 1;
      swift_bridgeObjectRetain();
      uint64_t v21 = a2 & 0xFFFFFFFFFFFFFF8;
      if (!v9) {
        goto LABEL_56;
      }
    }
    if (a2 < 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = v21;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22 < 0) {
      goto LABEL_70;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_57:
    if (v4 < v3) {
      goto LABEL_69;
    }
    if ((a2 & 0xC000000000000001) == 0 || !v3) {
      goto LABEL_63;
    }
    if (v3 >= 1)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      Swift::Int v26 = 0;
      do
      {
        Swift::Int v27 = v26 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v26);
        Swift::Int v26 = v27;
      }
      while (v3 != v27);
LABEL_63:
      if (v9)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v29 = v31;
        unint64_t v9 = v32;
        uint64_t v30 = v33;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = a2 & 0xFFFFFFFFFFFFFF8;
        uint64_t v29 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
        uint64_t v30 = (2 * v3) | 1;
        swift_bridgeObjectRetain();
      }
      *BOOL v36 = v28;
      v36[1] = v29;
      v36[2] = v9;
      v36[3] = v30;
      return;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    ;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_12;
  }
  __break(1u);
LABEL_76:
  __break(1u);
}

void specialized BidirectionalCollection<>.commonSuffix<A>(with:)(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = a3;
  Swift::Int v7 = a3 >> 62;
  if (!(a3 >> 62))
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_78:
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  unint64_t v41 = a2;
  unint64_t v36 = a2 >> 62;
  Swift::Int v37 = v7;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v38 = v9;
  Swift::Int v10 = v8;
  if (v8)
  {
    Swift::Int v10 = v8;
    if (v9)
    {
      unint64_t v3 = v8 - 1;
      if (__OFSUB__(v8, 1)) {
        goto LABEL_88;
      }
      unint64_t v4 = v9 - 1;
      if (__OFSUB__(v9, 1)) {
        goto LABEL_89;
      }
      unint64_t v40 = v5 & 0xC000000000000001;
      if ((v5 & 0xC000000000000001) != 0) {
        goto LABEL_90;
      }
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v3 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v11 = *(id *)(v5 + 8 * v3 + 32);
        goto LABEL_13;
      }
      __break(1u);
LABEL_93:
      id v12 = (id)MEMORY[0x24C523D60](v4, v41);
      goto LABEL_17;
    }
  }
  while (1)
  {
LABEL_35:
    if (v8 < v10)
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v4 = v41;
    unint64_t v3 = v38;
    if (v21 < v10) {
      goto LABEL_81;
    }
    if (v10 < 0) {
      goto LABEL_82;
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v22 < v8) {
      goto LABEL_83;
    }
    if ((v5 & 0xC000000000000001) != 0 && v10 != v8)
    {
      if (v10 >= (unint64_t)v8) {
        goto LABEL_96;
      }
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
      Swift::Int v23 = v10;
      do
      {
        Swift::Int v7 = v23 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v23);
        Swift::Int v23 = v7;
      }
      while (v8 != v7);
    }
    if (v37)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      uint64_t v8 = v24;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = (2 * v8) | 1;
      swift_bridgeObjectRetain();
    }
    unint64_t v5 = v36;
    if (v38 < v9) {
      goto LABEL_84;
    }
    if (v36)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v25 < v9) {
      goto LABEL_85;
    }
    if (v9 < 0) {
      goto LABEL_86;
    }
    if (v36)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v26 >= v38) {
      break;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    id v11 = (id)MEMORY[0x24C523D60](v3, v5);
LABEL_13:
    Swift::Int v10 = (Swift::Int)v11;
    unint64_t v39 = v41 & 0xC000000000000001;
    if ((v41 & 0xC000000000000001) != 0) {
      goto LABEL_93;
    }
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    if (v4 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_95;
    }
    id v12 = *(id *)(v41 + 8 * v4 + 32);
LABEL_17:
    char v13 = v12;
    a2 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    char v14 = static NSObject.== infix(_:_:)();

    uint64_t v9 = v38;
    Swift::Int v10 = v8;
    if (v14)
    {
      while (1)
      {
        if (!v3 || !v4)
        {
          uint64_t v9 = v4;
          Swift::Int v10 = v3;
          goto LABEL_35;
        }
        unint64_t v17 = v3 - 1;
        if (__OFSUB__(v3, 1)) {
          break;
        }
        unint64_t v18 = v4 - 1;
        if (__OFSUB__(v4, 1)) {
          goto LABEL_73;
        }
        if (v40)
        {
          id v19 = (id)MEMORY[0x24C523D60](v3 - 1, v5);
        }
        else
        {
          if ((v17 & 0x8000000000000000) != 0) {
            goto LABEL_74;
          }
          if (v17 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_75;
          }
          id v19 = *(id *)(v5 + 32 + 8 * v17);
        }
        Swift::Int v20 = v19;
        if (v39)
        {
          id v15 = (id)MEMORY[0x24C523D60](v4 - 1, v41);
        }
        else
        {
          if ((v18 & 0x8000000000000000) != 0) {
            goto LABEL_76;
          }
          if (v18 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          id v15 = *(id *)(v41 + 32 + 8 * v18);
        }
        char v16 = v15;
        Swift::Int v7 = static NSObject.== infix(_:_:)();

        uint64_t v9 = v4;
        Swift::Int v10 = v3;
        --v4;
        --v3;
        if ((v7 & 1) == 0) {
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
  }
  if ((v41 & 0xC000000000000001) != 0 && v9 != v38)
  {
    if (v9 >= (unint64_t)v38)
    {
LABEL_97:
      __break(1u);
      return;
    }
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLayoutFragment);
    Swift::Int v27 = v9;
    do
    {
      Swift::Int v28 = v27 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v27);
      Swift::Int v27 = v28;
    }
    while (v38 != v28);
  }
  if (v36)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v30 = v32;
    uint64_t v9 = v33;
    uint64_t v31 = v34;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = v41 & 0xFFFFFFFFFFFFFF8;
    uint64_t v30 = (v41 & 0xFFFFFFFFFFFFFF8) + 32;
    uint64_t v31 = (2 * v38) | 1;
    swift_bridgeObjectRetain();
  }
  *a1 = v29;
  a1[1] = v30;
  a1[2] = v9;
  a1[3] = v31;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for UUID();
    return a2;
  }
  return result;
}

uint64_t TextEffectsRenderer.updateDisplacementAndBounds(changed:)(int a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v76 - v8;
  double v10 = *MEMORY[0x263F001A0];
  double v11 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v12 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v13 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v77 = v1;
    uint64_t v97 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v16 = v4 + 16;
    uint64_t v18 = v14 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v20 = v16;
    unint64_t v21 = v16 + 40;
    uint64_t v22 = v14;
    Swift::Int v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    Swift::UInt64 v95 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v96 = v19;
    uint64_t v98 = v17;
    uint64_t v99 = v20;
    Swift::UInt64 v94 = (void (**)(char *, uint64_t))(v20 - 8);
    v76[2] = v22;
    swift_bridgeObjectRetain();
    v76[1] = v21 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    double v93 = 0.0;
    double v24 = v10;
    double v25 = v11;
    double v26 = v12;
    double v27 = v13;
    double v81 = v10;
    double v80 = v11;
    double v79 = v12;
    double v78 = v13;
    char v82 = v23;
    while (1)
    {
      v98(v9, v18, v3);
      Swift::Int v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v21;
      (*(void (**)(char *, void, uint64_t, uint64_t))v21)(v9, 0, 1, v3);
      if ((*v23)(v9, 1, v3) == 1) {
        break;
      }
      (*v95)(v6, v9, v3);
      uint64_t v29 = v97;
      swift_beginAccess();
      uint64_t v30 = *v29;
      if (*(void *)(v30 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v32 & 1) != 0))
      {
        CGFloat v87 = v27;
        CGFloat v88 = v26;
        CGFloat v89 = v25;
        CGFloat v90 = v24;
        int v91 = a1;
        uint64_t v33 = *(void **)(*(void *)(v30 + 56) + 8 * v31);
        swift_endAccess();
        uint64_t v34 = *v94;
        uint64_t v35 = v33;
        v34(v6, v3);
        uint64_t v36 = *(void *)&v35[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        CGFloat v37 = *(double *)(v36 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds);
        CGFloat v38 = *(double *)(v36 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 8);
        CGFloat v39 = *(double *)(v36 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 16);
        CGFloat v40 = *(double *)(v36 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds + 24);
        unint64_t v41 = (double *)(v36 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement);
        double v92 = *v41;
        double v42 = v41[2];
        double v84 = v41[1];
        double v83 = v41[3];
        uint64_t v43 = (double *)&v35[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement];
        swift_beginAccess();
        double v85 = *v43;
        CGFloat v44 = v93;
        *uint64_t v43 = v93;
        v100.origin.CGFloat x = v37;
        v100.origin.CGFloat y = v38;
        v100.size.CGFloat width = v39;
        v100.size.CGFloat height = v40;
        CGRect v101 = CGRectOffset(v100, 0.0, v44);
        CGFloat x = v101.origin.x;
        CGFloat y = v101.origin.y;
        CGFloat width = v101.size.width;
        CGFloat height = v101.size.height;
        BOOL IsNull = CGRectIsNull(v101);
        double v86 = v42;
        if (IsNull)
        {
          Swift::Int v23 = v82;
        }
        else
        {
          double v50 = v83;
          double v51 = -v83;
          double v52 = -v42;
          v102.origin.CGFloat x = x;
          v102.origin.CGFloat y = y;
          v102.size.CGFloat width = width;
          v102.size.CGFloat height = height;
          CGRect v103 = CGRectStandardize(v102);
          if (v84 == v50) {
            double v53 = v50;
          }
          else {
            double v53 = v84;
          }
          double v54 = v103.origin.x - v53;
          double v55 = v103.origin.y - v92;
          double v56 = v103.size.width - (v51 - v84);
          double v57 = v103.size.height - (v52 - v92);
          v104.origin.CGFloat x = v103.origin.x - v53;
          v104.origin.CGFloat y = v103.origin.y - v92;
          v104.size.CGFloat width = v56;
          v104.size.CGFloat height = v57;
          CGFloat v58 = CGRectGetWidth(v104);
          CGFloat x = v81;
          CGFloat y = v80;
          CGFloat width = v79;
          CGFloat height = v78;
          Swift::Int v23 = v82;
          if (v58 >= 0.0)
          {
            v105.origin.CGFloat x = v54;
            v105.origin.CGFloat y = v55;
            v105.size.CGFloat width = v56;
            v105.size.CGFloat height = v57;
            CGFloat x = v54;
            CGFloat y = v55;
            CGFloat width = v56;
            CGFloat height = v57;
            if (CGRectGetHeight(v105) < 0.0)
            {
              CGFloat x = v81;
              CGFloat y = v80;
              CGFloat width = v79;
              CGFloat height = v78;
            }
          }
        }
        double v59 = v93;
        BOOL v60 = v85 != v93;
        v106.origin.CGFloat x = v90;
        v106.origin.CGFloat y = v89;
        v106.size.CGFloat width = v88;
        v106.size.CGFloat height = v87;
        v110.origin.CGFloat x = x;
        v110.origin.CGFloat y = y;
        v110.size.CGFloat width = width;
        v110.size.CGFloat height = height;
        CGRect v107 = CGRectUnion(v106, v110);
        double v24 = v107.origin.x;
        double v25 = v107.origin.y;
        double v26 = v107.size.width;
        double v27 = v107.size.height;
        double v93 = v59 + v92 + v86;
        swift_endAccess();

        a1 = v60 | v91;
      }
      else
      {
        swift_endAccess();
        (*v94)(v6, v3);
      }
      v18 += v96;
      if (!--v15)
      {
        uint64_t v1 = v77;
        goto LABEL_19;
      }
    }
    uint64_t v1 = v77;
  }
  else
  {
    Swift::Int v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
    double v24 = v10;
    double v25 = v11;
    double v26 = v12;
    double v27 = v13;
LABEL_19:
    v28(v9, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  v108.origin.CGFloat x = v24;
  v108.origin.CGFloat y = v25;
  v108.size.CGFloat width = v26;
  v108.size.CGFloat height = v27;
  BOOL v61 = CGRectIsNull(v108);
  if (v61) {
    double v62 = 0.0;
  }
  else {
    double v62 = v24;
  }
  if (v61) {
    double v63 = 0.0;
  }
  else {
    double v63 = v25;
  }
  if (v61) {
    double v64 = 0.0;
  }
  else {
    double v64 = v26;
  }
  if (v61) {
    double v65 = 0.0;
  }
  else {
    double v65 = v27;
  }
  v109.origin.CGFloat x = CGRect.outset(by:)(0.0, *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding), 0.0, *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding), v62, v63, v64, v65);
  CGFloat v66 = v109.origin.x;
  CGFloat v67 = v109.origin.y;
  CGFloat v68 = v109.size.width;
  CGFloat v69 = v109.size.height;
  uint64_t v70 = (CGFloat *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds);
  uint64_t result = CGRectEqualToRect(v109, *(CGRect *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds));
  if (result)
  {
    if ((a1 & 1) == 0) {
      return result;
    }
  }
  else
  {
    *uint64_t v70 = v66;
    v70[1] = v67;
    v70[2] = v68;
    v70[3] = v69;
  }
  uint64_t v72 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
  char v73 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags) = v73 | 4;
  if ((v73 & 1) == 0)
  {
    if ((v73 & 2) == 0
      || (int v74 = (void *)MEMORY[0x24C527E00](v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate),
          _NSTextCustomRenderingDelegateInvalidateInteractionGeometry(v74),
          uint64_t result = swift_unknownObjectRelease(),
          (*(unsigned char *)(v1 + v72) & 4) != 0))
    {
      uint64_t v75 = (void *)MEMORY[0x24C527E00](v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
      _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v75);
      uint64_t result = swift_unknownObjectRelease();
    }
    *(unsigned char *)(v1 + v72) = 0;
  }
  return result;
}

uint64_t type metadata accessor for TextRenderSurface()
{
  return self;
}

id @objc TextRenderLayer.action(for:forKey:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = objc_allocWithZone(MEMORY[0x263EFF9D0]);
  id v6 = a3;
  id v7 = a1;
  id v8 = objc_msgSend(v5, sel_init);

  return v8;
}

void TextEffectsRenderer.contentsScale.didset(double a1)
{
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v34 - v7;
  if (*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale) == a1) {
    return;
  }
  uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(*v9 + 64);
  uint64_t v36 = *v9 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  int64_t v35 = v15 - 1;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v21 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v22 = v21 | (v16 << 6);
  while (2)
  {
    uint64_t v23 = *(void *)(v10 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v5, v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v24);
    uint64_t v25 = *(void *)(v10 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    uint64_t v27 = v26;
    Swift::Int v28 = *(void **)(v25 + 8 * v22);
    *(void *)&v5[*(int *)(v26 + 48)] = v28;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v5, 0, 1, v26);
    id v29 = v28;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v5, (uint64_t)v8, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v8, 1, v27) == 1)
      {
        swift_release();
        return;
      }
      unint64_t v17 = *(char **)&v8[*(int *)(v27 + 48)];
      uint64_t v18 = *(unsigned char **)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      v18[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] |= 1u;
      uint64_t v19 = v18;
      objc_msgSend(v19, sel_setNeedsLayout);

      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v8, v20);
      if (v14) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v30 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v30 < v15)
      {
        unint64_t v31 = *(void *)(v36 + 8 * v30);
        if (v31) {
          goto LABEL_12;
        }
        int64_t v32 = v16 + 2;
        ++v16;
        if (v30 + 1 < v15)
        {
          unint64_t v31 = *(void *)(v36 + 8 * v32);
          if (v31) {
            goto LABEL_15;
          }
          int64_t v16 = v30 + 1;
          if (v30 + 2 < v15)
          {
            unint64_t v31 = *(void *)(v36 + 8 * (v30 + 2));
            if (v31)
            {
              v30 += 2;
              goto LABEL_12;
            }
            int64_t v32 = v30 + 3;
            int64_t v16 = v30 + 2;
            if (v30 + 3 < v15) {
              break;
            }
          }
        }
      }
LABEL_26:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      uint64_t v27 = v33;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v5, 1, 1, v33);
      unint64_t v14 = 0;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v32);
    if (v31)
    {
LABEL_15:
      int64_t v30 = v32;
LABEL_12:
      unint64_t v14 = (v31 - 1) & v31;
      unint64_t v22 = __clz(__rbit64(v31)) + (v30 << 6);
      int64_t v16 = v30;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v15)
    {
      int64_t v16 = v35;
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }
LABEL_31:
  __break(1u);
}

id TextEffectsRenderer.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap] = MEMORY[0x263F8EE80];
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs] = v2;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments] = v2;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds];
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  uint64_t v4 = &v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentBounds];
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] = 0;
  type metadata accessor for TextEffectsAnimationController();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v0;
  TextEffectsAnimationController.init()();
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController] = v5;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LayerGeometryObserver()), sel_init);
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale] = 0x3FF0000000000000;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  return v7;
}

uint64_t TextEffectsRenderer.notifyStateObservers(with:time:)(uint64_t a1)
{
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v35 - v7;
  objc_super v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(*v9 + 64);
  uint64_t v36 = *v9 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  int64_t v35 = v37 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  if (!v14) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v22 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v23 = v22 | (v16 << 6);
  while (2)
  {
    uint64_t v24 = *(void *)(v10 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v5, v24 + *(void *)(*(void *)(v25 - 8) + 72) * v23, v25);
    uint64_t v26 = *(void *)(v10 + 56);
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    uint64_t v28 = v27;
    id v29 = *(void **)(v26 + 8 * v23);
    *(void *)&v5[*(int *)(v27 + 48)] = v29;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v5, 0, 1, v27);
    id v30 = v29;
    while (1)
    {
      outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v5, (uint64_t)v8, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v8, 1, v28) == 1) {
        return swift_release();
      }
      unint64_t v17 = *(char **)&v8[*(int *)(v28 + 48)];
      id v18 = *(id *)&v17[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      swift_bridgeObjectRetain();
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = specialized _NativeSet.intersection(_:)(v19, a1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.intersection(_:));
      swift_bridgeObjectRelease();
      TextRenderLayer.updateActive(animations:)(v20);

      swift_release();
      uint64_t v21 = type metadata accessor for UUID();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v8, v21);
      if (v14) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v31 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v31 < v37)
      {
        unint64_t v32 = *(void *)(v36 + 8 * v31);
        if (v32) {
          goto LABEL_11;
        }
        int64_t v33 = v16 + 2;
        ++v16;
        if (v31 + 1 < v37)
        {
          unint64_t v32 = *(void *)(v36 + 8 * v33);
          if (v32) {
            goto LABEL_14;
          }
          int64_t v16 = v31 + 1;
          if (v31 + 2 < v37)
          {
            unint64_t v32 = *(void *)(v36 + 8 * (v31 + 2));
            if (v32)
            {
              v31 += 2;
              goto LABEL_11;
            }
            int64_t v33 = v31 + 3;
            int64_t v16 = v31 + 2;
            if (v31 + 3 < v37) {
              break;
            }
          }
        }
      }
LABEL_25:
      type metadata accessor for (key: UUID, value: TextRenderSurface)();
      uint64_t v28 = v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v5, 1, 1, v34);
      unint64_t v14 = 0;
    }
    unint64_t v32 = *(void *)(v36 + 8 * v33);
    if (v32)
    {
LABEL_14:
      int64_t v31 = v33;
LABEL_11:
      unint64_t v14 = (v32 - 1) & v32;
      unint64_t v23 = __clz(__rbit64(v32)) + (v31 << 6);
      int64_t v16 = v31;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v37)
    {
      int64_t v16 = v35;
      goto LABEL_25;
    }
    unint64_t v32 = *(void *)(v36 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

Swift::Void __swiftcall TextEffectsRenderer.notifyDisplayLinkObservers(with:)(SwiftUI::Time with)
{
  uint64_t v3 = v1;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  objc_super v9 = (char *)&v38 - v8;
  uint64_t v10 = *v3;
  uint64_t v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
  swift_beginAccess();
  uint64_t v12 = *v11;
  uint64_t v13 = *(void *)(*v11 + 64);
  uint64_t v42 = *v11 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  int64_t v39 = v17 - 1;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v40 = v12 + 104;
  int64_t v41 = v17 - 5;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_7;
    }
    int64_t v29 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v29 >= v17)
    {
      int64_t v31 = v18;
    }
    else
    {
      unint64_t v30 = *(void *)(v42 + 8 * v29);
      if (v30) {
        goto LABEL_11;
      }
      int64_t v31 = v18 + 1;
      if (v18 + 2 < v17)
      {
        unint64_t v30 = *(void *)(v42 + 8 * (v18 + 2));
        if (v30)
        {
          int64_t v29 = v18 + 2;
          goto LABEL_11;
        }
        int64_t v31 = v18 + 2;
        if (v18 + 3 < v17)
        {
          unint64_t v30 = *(void *)(v42 + 8 * (v18 + 3));
          if (v30)
          {
            int64_t v29 = v18 + 3;
LABEL_11:
            unint64_t v16 = (v30 - 1) & v30;
            unint64_t v21 = __clz(__rbit64(v30)) + (v29 << 6);
            int64_t v18 = v29;
LABEL_7:
            uint64_t v22 = *(void *)(v12 + 48);
            uint64_t v23 = type metadata accessor for UUID();
            (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v6, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v21, v23);
            uint64_t v24 = *(void *)(v12 + 56);
            type metadata accessor for (key: UUID, value: TextRenderSurface)();
            uint64_t v26 = v25;
            uint64_t v27 = *(void **)(v24 + 8 * v21);
            *(void *)&v6[*(int *)(v25 + 48)] = v27;
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 0, 1, v25);
            id v28 = v27;
            goto LABEL_14;
          }
          int64_t v29 = v18 + 4;
          int64_t v31 = v18 + 3;
          if (v18 + 4 < v17)
          {
            unint64_t v30 = *(void *)(v42 + 8 * v29);
            if (v30) {
              goto LABEL_11;
            }
            while (v41 != v18)
            {
              unint64_t v30 = *(void *)(v40 + 8 * v18++);
              if (v30)
              {
                int64_t v29 = v18 + 4;
                goto LABEL_11;
              }
            }
            int64_t v31 = v39;
          }
        }
      }
    }
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    uint64_t v26 = v32;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v6, 1, 1, v32);
    unint64_t v16 = 0;
    int64_t v18 = v31;
LABEL_14:
    outlined init with take of (key: UUID, value: TextRenderSurface)?((uint64_t)v6, (uint64_t)v9, &lazy cache variable for type metadata for (key: UUID, value: TextRenderSurface)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface));
    type metadata accessor for (key: UUID, value: TextRenderSurface)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v9, 1, v26) == 1)
    {
      swift_release();
      return;
    }
    int64_t v33 = *(char **)&v9[*(int *)(v26 + 48)];
    uint64_t v34 = *(char **)&v33[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
    *(void *)&v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time] = v10;
    int64_t v35 = &v34[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers];
    swift_beginAccess();
    if (*(void *)(*(void *)v35 + 16))
    {
      uint64_t v43 = v10;
      uint64_t v36 = v34;
      uint64_t v37 = swift_bridgeObjectRetain();
      TextRenderLayer.updateLayers(for:at:chunk:)(v37, &v43, 1);
      swift_bridgeObjectRelease();
      v36[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] |= 2u;
      objc_msgSend(v36, sel_setNeedsLayout);

      int64_t v33 = v36;
    }

    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v9, v19);
  }
  __break(1u);
}

void specialized TextEffectsRenderer.updateForStaticRendering(with:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v86 = (char *)v76 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v76 - v9;
  type metadata accessor for (UUID, NSTextLayoutFragment)();
  uint64_t v85 = v11;
  MEMORY[0x270FA5388](v11);
  double v84 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  CGFloat v87 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  int64_t v17 = (char *)v76 - v16;
  v93[0] = CACurrentMediaTime();
  TextEffectsAnimationController.displayLinkUpdate(at:removeFinished:)((uint64_t *)v93, 0);
  uint64_t v18 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v77 = v10;
  if (v20)
  {
    uint64_t v79 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
    unint64_t v80 = a1;
    unint64_t v21 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
    double v81 = v3;
    uint64_t v22 = (void (**)(void, void))(v3 + 16);
    uint64_t v23 = *((void *)v3 + 2);
    uint64_t v24 = v19 + ((v3[80] + 32) & ~(unint64_t)v3[80]);
    uint64_t v25 = (void (*)(void, void))*((void *)v3 + 9);
    uint64_t v26 = (void (**)(char *, void, uint64_t, uint64_t))(v3 + 56);
    uint64_t v27 = (void (*)(char *, void, uint64_t, uint64_t))v19;
    id v28 = v22;
    uint64_t v91 = (uint64_t)(v22 + 4);
    uint64_t v92 = v23;
    CGFloat v88 = (void (**)(char *, char *, uint64_t))(v22 + 2);
    CGFloat v89 = (void (**)(void, void))v25;
    CGFloat v90 = (void (**)(char *, uint64_t))(v22 - 1);
    double v78 = v27;
    swift_bridgeObjectRetain();
    unint64_t v82 = v21;
    double v83 = v28;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v92)(v17, v24, v2);
      int64_t v29 = *v26;
      (*v26)(v17, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v91)(v17, 1, v2) == 1)
      {
        a1 = v80;
        uint64_t v3 = v81;
        uint64_t v10 = v77;
        uint64_t v40 = (uint64_t)v87;
        uint64_t v18 = v79;
        goto LABEL_13;
      }
      (*v88)(v5, v17, v2);
      swift_beginAccess();
      uint64_t v30 = *(void *)v21;
      if (*(void *)(*(void *)v21 + 16)
        && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v32 & 1) != 0))
      {
        int64_t v33 = *(void **)(*(void *)(v30 + 56) + 8 * v31);
        swift_endAccess();
        uint64_t v34 = v26;
        int64_t v35 = v29;
        uint64_t v36 = *v90;
        uint64_t v37 = v33;
        v36(v5, v2);
        uint64_t v38 = OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer;
        objc_msgSend(*(id *)&v37[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer], sel_setNeedsLayout);
        int64_t v39 = *(void **)&v37[v38];
        int64_t v29 = v35;
        uint64_t v26 = v34;
        unint64_t v21 = v82;
        objc_msgSend(v39, sel_layoutIfNeeded);
      }
      else
      {
        swift_endAccess();
        (*v90)(v5, v2);
      }
      v24 += (uint64_t)v89;
      --v20;
    }
    while (v20);
    a1 = v80;
    uint64_t v3 = v81;
    uint64_t v10 = v77;
    uint64_t v18 = v79;
  }
  else
  {
    int64_t v29 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v3 + 7);
    swift_bridgeObjectRetain();
  }
  v29(v17, 1, 1, v2);
  uint64_t v40 = (uint64_t)v87;
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void *)(a1 + v18);
  unint64_t v42 = a1;
  uint64_t v43 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  CGFloat v44 = *(void (***)(void, void))(v41 + 16);
  uint64_t v45 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  swift_bridgeObjectRetain();
  uint64_t v91 = v43;
  swift_bridgeObjectRetain();
  double v83 = v44;
  if (v44)
  {
    unint64_t v46 = 0;
    uint64_t v79 = v42 + v45;
    CGFloat v89 = (void (**)(void, void))(v3 + 56);
    CGFloat v90 = (void (**)(char *, uint64_t))(v3 + 16);
    CGFloat v88 = (void (**)(char *, char *, uint64_t))(v3 + 48);
    unint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v48 = v91 & 0xFFFFFFFFFFFFFF8;
    uint64_t v92 = v91 & 0xFFFFFFFFFFFFFF8;
    if (v91 < 0) {
      uint64_t v48 = v91;
    }
    v76[1] = v48;
    unint64_t v80 = v91 & 0xC000000000000001;
    double v81 = v3 + 8;
    unint64_t v82 = (unint64_t)v91 >> 62;
    double v78 = v29;
    while (v46 < *(void *)(v41 + 16))
    {
      (*((void (**)(uint64_t, unint64_t, uint64_t))v3 + 2))(v40, v41 + ((v3[80] + 32) & ~(unint64_t)v3[80]) + *((void *)v3 + 9) * v46, v2);
      v29((char *)v40, 0, 1, v2);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v3 + 6))(v40, 1, v2) == 1) {
        goto LABEL_33;
      }
      uint64_t v49 = v41;
      double v50 = (void (*)(void))*v47;
      (*v47)(v10, v40, v2);
      if (v82)
      {
        swift_bridgeObjectRetain();
        uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v46 == v75)
        {
LABEL_34:
          (*(void (**)(char *, uint64_t))v81)(v10, v2);
          goto LABEL_35;
        }
      }
      else if (v46 == *(void *)(v92 + 16))
      {
        goto LABEL_34;
      }
      if (v80)
      {
        id v51 = (id)MEMORY[0x24C523D60](v46, v91);
      }
      else
      {
        if (v46 >= *(void *)(v92 + 16)) {
          goto LABEL_37;
        }
        id v51 = *(id *)(v91 + 8 * v46 + 32);
      }
      double v52 = v51;
      double v53 = v84;
      uint64_t v54 = *(int *)(v85 + 48);
      ((void (*)(char *, char *, uint64_t))v50)(v84, v10, v2);
      *(void *)&v53[v54] = v52;
      uint64_t v55 = (uint64_t)v86;
      v50();
      double v56 = (uint64_t *)v79;
      swift_beginAccess();
      uint64_t v57 = *v56;
      if (*(void *)(v57 + 16) && (unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v55), (v59 & 1) != 0))
      {
        BOOL v60 = *(void **)(*(void *)(v57 + 56) + 8 * v58);
        swift_endAccess();
        BOOL v61 = *(void (**)(uint64_t, uint64_t))v81;
        id v62 = v60;
        v61(v55, v2);
        id v63 = v62;
        objc_msgSend(v52, sel_layoutFragmentFrame);
        objc_msgSend(v63, sel_adjustedLayoutFragmentFrame_);
        double v65 = v64;
        double v67 = v66;
        double v69 = v68;
        double v71 = v70;
        id v72 = objc_msgSend(v63, sel_layer);
        objc_msgSend(v72, sel_setFrame_, v65, v67, v69, v71);

        id v73 = objc_msgSend(v63, sel_layer);
        objc_msgSend(v73, sel_setBounds_, v65, v67, v69, v71);

        id v74 = objc_msgSend(v63, sel_layer);
        objc_msgSend(v74, sel_layoutIfNeeded);

        uint64_t v10 = v77;
      }
      else
      {
        swift_endAccess();

        (*(void (**)(uint64_t, uint64_t))v81)(v55, v2);
      }
      uint64_t v40 = (uint64_t)v87;
      int64_t v29 = v78;
      uint64_t v41 = v49;
      if (v83 == (void (**)(void, void))++v46) {
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
LABEL_32:
    v29((char *)v40, 1, 1, v2);
LABEL_33:
    _sypSgWOhTm_1(v40, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t TextEffectsRenderer.drawStatic(in:)(uint64_t *a1)
{
  uint64_t v132 = a1;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v110 - v7;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    uint64_t v127 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v126 = v3 + 16;
    unint64_t v123 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v124 = v3 + 48;
    double v122 = (void (**)(char *, uint64_t))(v3 + 8);
    v110[3] = &v138;
    swift_bridgeObjectRetain();
    unint64_t v12 = 0;
    uint64_t v125 = v3 + 56;
    v110[2] = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v114 = v3;
    uint64_t v115 = v2;
    uint64_t v116 = v10;
    uint64_t v117 = v9;
    unint64_t v112 = v8;
    unint64_t v113 = v5;
    Swift::UInt64 v111 = v11;
    while (1)
    {
      if (v12 >= *(void *)(v9 + 16))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        JUMPOUT(0x245B5FDDCLL);
      }
      uint64_t v13 = *(void *)(v3 + 72);
      unint64_t v129 = v12;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v127 + v13 * v12, v2);
      unint64_t v121 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v121(v8, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1) {
        break;
      }
      (*v123)(v5, v8, v2);
      swift_beginAccess();
      uint64_t v14 = *v11;
      if (*(void *)(*v11 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v16 & 1) != 0))
      {
        int64_t v17 = *(void **)(*(void *)(v14 + 56) + 8 * v15);
        swift_endAccess();
        uint64_t v18 = *v122;
        uint64_t v19 = v17;
        v18(v5, v2);
        uint64_t v20 = *(void *)&v19[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer]
            + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers;
        swift_beginAccess();
        uint64_t v21 = *(void *)v20;
        uint64_t v133 = *(void *)(*(void *)v20 + 16);
        if (v133)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = 0;
          uint64_t v23 = v19;
          id v130 = v19;
          uint64_t v131 = v21;
          while (2)
          {
            unint64_t v24 = *(void *)(v21 + 8 * v22++ + 32);
            switch(v24 >> 62)
            {
              case 1uLL:
                uint64_t v43 = *v132;
                id v44 = (id)(v24 & 0x3FFFFFFFFFFFFFFFLL);
                uint64_t v45 = (CGContext *)(id)RBDrawingStateBeginCGContext();
                unint64_t v46 = v45;
                CGBlendMode v47 = *(_DWORD *)(v43 + 52);
                if (v47) {
                  CGContextSetBlendMode(v45, v47);
                }
                id v48 = objc_msgSend(v44, sel_superlayer);
                if (!v48) {
                  goto LABEL_67;
                }
                uint64_t v49 = v48;
                type metadata accessor for TextRenderLayer(0);
                uint64_t v50 = swift_dynamicCastClass();
                if (!v50)
                {

                  goto LABEL_67;
                }
                id v51 = (char *)v50;
                CGFloat v128 = v110;
                MEMORY[0x270FA5388](v50);
                v110[-4] = v46;
                v110[-3] = v44;
                v110[-2] = v52;
                uint64_t v53 = *(void *)(v52 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
                swift_beginAccess();
                if (*(void *)(*(void *)(v53 + 112) + 56) != *(void *)&v51[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
                {

                  goto LABEL_67;
                }
                if (!objc_msgSend(v51, sel_delegate)) {
                  goto LABEL_64;
                }
                type metadata accessor for TextRenderSurface();
                uint64_t v120 = (char *)swift_dynamicCastClass();
                if (v120
                  && (uint64_t v54 = MEMORY[0x24C527E00](&v120[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer])) != 0
                  && (uint64_t v55 = (void *)v54,
                      uint64_t v119 = (char *)MEMORY[0x24C527E00](v54 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate),
                      v55,
                      v119))
                {
                  uint64_t v56 = swift_allocObject();
                  *(void *)(v56 + 16) = closure #1 in TextRunsLayer.draw(in:)partial apply;
                  *(void *)(v56 + 24) = &v110[-6];
                  *((void *)&v139 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
                  uint64_t v140 = v56;
                  uint64_t aBlock = (void *)MEMORY[0x263EF8330];
                  uint64_t v137 = 1107296256;
                  unint64_t v138 = thunk for @escaping @callee_guaranteed () -> ();
                  *(void *)&long long v139 = &block_descriptor_178;
                  uint64_t v57 = _Block_copy(&aBlock);
                  uint64_t v118 = v140;
                  unint64_t v58 = v119;
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_retain();
                  swift_release();
                  _NSTextCustomRenderingDelegateWillDraw(v58, v120, v57);
                  swift_unknownObjectRelease_n();
                  swift_unknownObjectRelease_n();
                  _Block_release(v57);
                  LOBYTE(v58) = swift_isEscapingClosureAtFileLocation();

                  swift_release();
                  uint64_t v23 = v130;
                  if (v58) {
                    goto LABEL_82;
                  }
                }
                else
                {
                  swift_unknownObjectRelease();
LABEL_64:
                  objc_msgSend(v44, sel_contentsScale);
                  Swift::UInt64 v94 = v93;
                  uint64_t aBlock = 0;
                  uint64_t v137 = 0;
                  uint64_t v95 = one-time initialization token for shared;
                  uint64_t v120 = (char *)v44;
                  id v96 = v49;
                  if (v95 != -1) {
                    swift_once();
                  }
                  uint64_t v119 = v94;
                  swift_beginAccess();
                  uint64_t v97 = *(void (**)(void **))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                       + 0x68);
                  uint64_t v98 = static CoreGlue2.shared;
                  v97(&aBlock);

                  char v134 = aBlock;
                  uint64_t v135 = v137;
                  uint64_t v99 = v120;
                  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v46, (uint64_t)&v134, (uint64_t)v119, 0, (uint64_t)v51, v120);

                  swift_release();
                  swift_release();
                  uint64_t v23 = v130;
                }
LABEL_67:
                RBDrawingStateEndCGContext();

LABEL_13:
                uint64_t v21 = v131;
                goto LABEL_14;
              case 2uLL:
                char v59 = (char *)(id)(v24 & 0x3FFFFFFFFFFFFFFFLL);
                id v60 = objc_msgSend(v59, sel_superlayer);
                if (!v60)
                {

                  goto LABEL_14;
                }
                BOOL v61 = v60;
                type metadata accessor for TextRenderLayer(0);
                uint64_t v62 = swift_dynamicCastClass();
                if (!v62)
                {

                  goto LABEL_14;
                }
                id v63 = (char *)v62;
                CGFloat v128 = v110;
                MEMORY[0x270FA5388](v62);
                double v64 = v132;
                v110[-2] = v59;
                v110[-1] = v64;
                uint64_t v66 = *(void *)(v65 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
                swift_beginAccess();
                if (*(void *)(*(void *)(v66 + 112) + 56) != *(void *)&v63[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version]) {
                  goto LABEL_72;
                }
                if (!objc_msgSend(v63, sel_delegate)) {
                  goto LABEL_69;
                }
                type metadata accessor for TextRenderSurface();
                uint64_t v67 = swift_dynamicCastClass();
                if (v67
                  && (double v68 = (void *)v67,
                      (uint64_t v69 = MEMORY[0x24C527E00](v67+ OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer)) != 0)&& (v70 = (void *)v69, v71 = (void *)MEMORY[0x24C527E00](v69 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate), v70, v71))
                {
                  uint64_t v72 = swift_allocObject();
                  *(void *)(v72 + 16) = closure #1 in DynamicEffectLayer.draw(in:)partial apply;
                  *(void *)(v72 + 24) = &v110[-4];
                  *((void *)&v139 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
                  uint64_t v140 = v72;
                  uint64_t aBlock = (void *)MEMORY[0x263EF8330];
                  uint64_t v137 = 1107296256;
                  unint64_t v138 = thunk for @escaping @callee_guaranteed () -> ();
                  *(void *)&long long v139 = &block_descriptor_170;
                  id v73 = _Block_copy(&aBlock);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_retain();
                  swift_release();
                  _NSTextCustomRenderingDelegateWillDraw(v71, v68, v73);
                  swift_unknownObjectRelease_n();
                  swift_unknownObjectRelease_n();
                  _Block_release(v73);
                  isEscapingClosureAtFileLocatiouint64_t n = swift_isEscapingClosureAtFileLocation();

                  swift_release();
                  uint64_t v23 = v130;
                  uint64_t v21 = v131;
                  if (isEscapingClosureAtFileLocation) {
                    goto LABEL_83;
                  }
                }
                else
                {
                  swift_unknownObjectRelease();
                  uint64_t v23 = v130;
                  uint64_t v21 = v131;
LABEL_69:
                  id v100 = objc_msgSend(v59, sel_superlayer);
                  if (v100)
                  {
                    CGRect v101 = v100;
                    if (swift_dynamicCastClass())
                    {
                      uint64_t v103 = *(void *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                           + 32];
                      char v104 = v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                               + 40];
                      int v105 = *(_DWORD *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                           + 64];
                      uint64_t v106 = *(void *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                           + 88];
                      uint64_t aBlock = *(void **)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                            + 24];
                      CGRect v102 = aBlock;
                      uint64_t v137 = v103;
                      LOBYTE(v138) = v104;
                      long long v139 = *(_OWORD *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                           + 48];
                      LODWORD(v140) = v105;
                      long long v141 = *(_OWORD *)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_content
                                           + 72];
                      uint64_t v142 = v106;
                      uint64_t v120 = *(char **)&v59[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D418DynamicEffectLayer_segmentIndex];
                      outlined copy of Text.Layout.Line.Line(aBlock, v103, v104);
                      swift_bridgeObjectRetain();
                      TextRenderLayer.draw(composition:segmentIndex:in:)((uint64_t)&aBlock, (uint64_t)v120, v132);

                      char v107 = v104;
                      uint64_t v23 = v130;
                      outlined consume of Text.Layout.Line.Line(v102, v103, v107);

                      uint64_t v21 = v131;
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                    }
                  }
                  else
                  {
LABEL_72:
                  }
                }
LABEL_14:
                if (v133 != v22) {
                  continue;
                }

                swift_bridgeObjectRelease();
                uint64_t v3 = v114;
                uint64_t v2 = v115;
                uint64_t v10 = v116;
                uint64_t v9 = v117;
                uint64_t v8 = v112;
                uint64_t v5 = v113;
                uint64_t v11 = v111;
                break;
              case 3uLL:
                uint64_t v75 = (void *)(v24 & 0x3FFFFFFFFFFFFFFFLL);
                uint64_t v76 = *v132;
                id v77 = v75;
                double v78 = (CGContext *)(id)RBDrawingStateBeginCGContext();
                uint64_t v79 = v78;
                CGBlendMode v80 = *(_DWORD *)(v76 + 52);
                if (v80) {
                  CGContextSetBlendMode(v78, v80);
                }
                objc_msgSend(v77, sel_contentsScale);
                uint64_t v82 = v81;
                uint64_t aBlock = 0;
                uint64_t v137 = 0;
                uint64_t v83 = one-time initialization token for shared;
                id v84 = v77;
                if (v83 != -1) {
                  swift_once();
                }
                swift_beginAccess();
                uint64_t v85 = *(void (**)(void **))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                     + 0x68);
                double v86 = static CoreGlue2.shared;
                v85(&aBlock);

                char v134 = aBlock;
                uint64_t v135 = v137;
                specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v79, (uint64_t *)&v134, v82, 0, v84);

                swift_release();
                swift_release();
                RBDrawingStateEndCGContext();

                uint64_t v23 = v130;
                goto LABEL_14;
              default:
                uint64_t v25 = *v132;
                id v26 = (id)v24;
                uint64_t v27 = (CGContext *)(id)RBDrawingStateBeginCGContext();
                id v28 = v27;
                CGBlendMode v29 = *(_DWORD *)(v25 + 52);
                if (v29) {
                  CGContextSetBlendMode(v27, v29);
                }
                id v30 = objc_msgSend(v26, sel_superlayer);
                if (!v30) {
                  goto LABEL_12;
                }
                unint64_t v31 = v30;
                type metadata accessor for TextRenderLayer(0);
                uint64_t v32 = swift_dynamicCastClass();
                if (!v32)
                {

                  goto LABEL_12;
                }
                int64_t v33 = (char *)v32;
                CGFloat v128 = v110;
                MEMORY[0x270FA5388](v32);
                v110[-4] = v28;
                v110[-3] = v26;
                v110[-2] = v34;
                uint64_t v35 = *(void *)(v34 + OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController);
                swift_beginAccess();
                if (*(void *)(*(void *)(v35 + 112) + 56) != *(void *)&v33[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version])
                {

                  uint64_t v23 = v130;
                  goto LABEL_12;
                }
                uint64_t v36 = (char *)objc_msgSend(v33, sel_delegate);
                if (!v36) {
                  goto LABEL_60;
                }
                uint64_t v37 = v36;
                type metadata accessor for TextRenderSurface();
                uint64_t v120 = v37;
                uint64_t v119 = (char *)swift_dynamicCastClass();
                if (v119
                  && (uint64_t v38 = MEMORY[0x24C527E00](&v119[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer])) != 0
                  && (int64_t v39 = (void *)v38,
                      uint64_t v118 = MEMORY[0x24C527E00](v38 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate),
                      v39,
                      v118))
                {
                  uint64_t v40 = v118;
                  uint64_t v41 = swift_allocObject();
                  *(void *)(v41 + 16) = closure #1 in TextLinesLayer.draw(in:)partial apply;
                  *(void *)(v41 + 24) = &v110[-6];
                  *((void *)&v139 + 1) = thunk for @escaping @callee_guaranteed () -> ()partial apply;
                  uint64_t v140 = v41;
                  uint64_t aBlock = (void *)MEMORY[0x263EF8330];
                  uint64_t v137 = 1107296256;
                  unint64_t v138 = thunk for @escaping @callee_guaranteed () -> ();
                  *(void *)&long long v139 = &block_descriptor_186;
                  unint64_t v42 = _Block_copy(&aBlock);
                  v110[1] = v140;
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_retain();
                  swift_release();
                  _NSTextCustomRenderingDelegateWillDraw((void *)v40, v119, v42);
                  swift_unknownObjectRelease_n();
                  swift_unknownObjectRelease_n();
                  _Block_release(v42);
                  LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();

                  swift_release();
                  uint64_t v23 = v130;
                  if (v40) {
                    goto LABEL_81;
                  }
                }
                else
                {
                  swift_unknownObjectRelease();
LABEL_60:
                  objc_msgSend(v26, sel_contentsScale);
                  uint64_t v88 = v87;
                  uint64_t aBlock = 0;
                  uint64_t v137 = 0;
                  uint64_t v89 = one-time initialization token for shared;
                  uint64_t v119 = (char *)(id)(v24 & 0x3FFFFFFFFFFFFFFFLL);
                  uint64_t v120 = v31;
                  if (v89 != -1) {
                    swift_once();
                  }
                  uint64_t v118 = v88;
                  swift_beginAccess();
                  CGFloat v90 = *(void (**)(void **))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                       + 0x68);
                  uint64_t v91 = static CoreGlue2.shared;
                  v90(&aBlock);

                  char v134 = aBlock;
                  uint64_t v135 = v137;
                  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(v28, (uint64_t *)&v134, v118, 0, (uint64_t)v26, (uint64_t)v33);

                  uint64_t v92 = v120;
                  swift_release();
                  swift_release();
                  uint64_t v23 = v130;
                }
LABEL_12:
                RBDrawingStateEndCGContext();

                goto LABEL_13;
            }
            break;
          }
        }
        else
        {

          uint64_t v10 = v116;
          uint64_t v9 = v117;
        }
      }
      else
      {
        swift_endAccess();
        (*v122)(v5, v2);
      }
      unint64_t v12 = v129 + 1;
      if (v129 + 1 == v10)
      {
        v121(v8, 1, 1, v2);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    CGRect v108 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
    v108(v8, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

void *TextEffectsRenderer.baselineOffsets.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v26 - v6;
  uint64_t v34 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v9 = *(void *)(v8 + 16);
  v26[1] = v8;
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v11 = v2 + 16;
    unint64_t v12 = v13;
    uint64_t v14 = v8 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v31 = *(void *)(v11 + 56);
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    CGBlendMode v29 = (void (**)(char *, uint64_t))(v11 - 8);
    id v30 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    int64_t v33 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v26[0] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v27 = v13;
    id v28 = v10;
    v26[2] = v11;
    while (1)
    {
      v12(v7, v14, v1);
      unint64_t v15 = *v33;
      (*v33)(v7, 0, 1, v1);
      if ((*v32)(v7, 1, v1) == 1) {
        break;
      }
      (*v30)(v4, v7, v1);
      swift_beginAccess();
      uint64_t v16 = *v10;
      if (*(void *)(*v10 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v18 & 1) != 0))
      {
        uint64_t v19 = *(void **)(*(void *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        uint64_t v20 = *v29;
        uint64_t v21 = v4;
        uint64_t v22 = v19;
        v20(v21, v1);
        unint64_t v12 = v27;
        id v23 = *(id *)&v22[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        TextRenderLayer.appendBaselineOffsets(to:)(&v34);

        uint64_t v4 = v21;
        uint64_t v10 = v28;
      }
      else
      {
        swift_endAccess();
        (*v29)(v4, v1);
      }
      v14 += v31;
      if (!--v9)
      {
        v15(v7, 1, 1, v1);
        break;
      }
    }
  }
  else
  {
    unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
    v24(v7, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
  return v34;
}

double TextEffectsRenderer.drawingBounds.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v40 - v6;
  double x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v45 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap);
    unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v14 = v2 + 16;
    uint64_t v16 = v12;
    unint64_t v17 = v15;
    uint64_t v18 = v16 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v19 = *(void *)(v14 + 56);
    unint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v43 = v19;
    id v44 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    unint64_t v42 = (void (**)(char *, uint64_t))(v14 - 8);
    v40[2] = v16;
    swift_bridgeObjectRetain();
    CGBlendMode v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
    v40[1] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v41 = v15;
    while (1)
    {
      v17(v7, v18, v1);
      uint64_t v20 = *v47;
      (*v47)(v7, 0, 1, v1);
      if ((*v46)(v7, 1, v1) == 1) {
        break;
      }
      (*v44)(v4, v7, v1);
      uint64_t v21 = v45;
      swift_beginAccess();
      uint64_t v22 = *v21;
      if (*(void *)(v22 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v24 & 1) != 0))
      {
        uint64_t v25 = *(void **)(*(void *)(v22 + 56) + 8 * v23);
        swift_endAccess();
        id v26 = *v42;
        uint64_t v27 = v25;
        v26(v4, v1);
        unint64_t v17 = v41;
        id v28 = v27;
        id v29 = *(id *)&v27[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        TextRenderLayer.drawingBounds.getter();
        CGFloat v31 = v30;
        CGFloat v33 = v32;
        CGFloat v35 = v34;
        CGFloat v37 = v36;

        v48.origin.double x = x;
        v48.origin.CGFloat y = y;
        v48.size.CGFloat width = width;
        v48.size.CGFloat height = height;
        v50.origin.double x = v31;
        v50.origin.CGFloat y = v33;
        v50.size.CGFloat width = v35;
        v50.size.CGFloat height = v37;
        CGRect v49 = CGRectUnion(v48, v50);
        double x = v49.origin.x;
        CGFloat y = v49.origin.y;
        CGFloat width = v49.size.width;
        CGFloat height = v49.size.height;
      }
      else
      {
        swift_endAccess();
        (*v42)(v4, v1);
      }
      v18 += v43;
      if (!--v13)
      {
        v20(v7, 1, 1, v1);
        break;
      }
    }
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain();
    v38(v7, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
  return x;
}

uint64_t type metadata accessor for TextEffectsRenderer()
{
  return self;
}

Swift::Void __swiftcall TextEffectsRenderer.postLayoutNotify()()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_notifyFlags);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = (void *)MEMORY[0x24C527E00](v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
    _NSTextCustomRenderingDelegateInvalidateInteractionGeometry(v3);
    swift_unknownObjectRelease();
    char v2 = *(unsigned char *)(v0 + v1);
  }
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = (void *)MEMORY[0x24C527E00](v0 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_delegate);
    _NSTextCustomRenderingDelegateSetNeedsFrameUpdate(v4);
    swift_unknownObjectRelease();
  }
  *(unsigned char *)(v0 + v1) = 0;
}

void specialized TextEffectsRenderer.endLayout(with:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  double v3 = *(double *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v145 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v135 - v6;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  double v144 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v135 - v11;
  uint64_t v139 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  unint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments);
  uint64_t v14 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs);
  uint64_t v16 = (unint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_updatedFragments);
  swift_beginAccess();
  uint64_t v137 = v16;
  unint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = specialized updatedIdentifiers<A, B>(a:b:makeIdentifier:)(v13, v15, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v2;
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = specialized _NativeSet.subtracting<A>(_:)(v18, v21);
  uint64_t v23 = swift_bridgeObjectRetain();
  unint64_t v24 = specialized Set.init<A>(_:)(v23);
  uint64_t v136 = v18;
  swift_bridgeObjectRelease();
  uint64_t v138 = v14;
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v146 = specialized _NativeSet.subtracting<A>(_:)(v25, v24);
  swift_bridgeObjectRelease();
  int64_t v26 = 0;
  uint64_t v27 = *(void *)(v22 + 56);
  unint64_t v153 = (void *)(v22 + 56);
  double v155 = *(double *)&v22;
  uint64_t v28 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  unint64_t v147 = a1;
  *(void *)&CGFloat v161 = a1 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap;
  int64_t v154 = (unint64_t)(v28 + 63) >> 6;
  *(void *)&CGFloat v162 = *(void *)&v3 + 16;
  *(void *)&CGFloat v159 = *(void *)&v3 + 56;
  *(void *)&double v157 = *(void *)&v3 + 48;
  *(void *)&double v156 = *(void *)&v3 + 32;
  double v158 = v3;
  *(void *)&CGFloat v160 = *(void *)&v3 + 8;
  uint64_t v150 = v19;
  while (1)
  {
    if (v30)
    {
      unint64_t v34 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      unint64_t v35 = v34 | (v26 << 6);
      goto LABEL_22;
    }
    int64_t v36 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    unint64_t v30 = v147;
    if (v36 >= v154) {
      goto LABEL_27;
    }
    unint64_t v37 = v153[v36];
    ++v26;
    if (!v37)
    {
      int64_t v26 = v36 + 1;
      if (v36 + 1 >= v154) {
        goto LABEL_27;
      }
      unint64_t v37 = v153[v26];
      if (!v37)
      {
        int64_t v26 = v36 + 2;
        if (v36 + 2 >= v154) {
          goto LABEL_27;
        }
        unint64_t v37 = v153[v26];
        if (!v37) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v30 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v26 << 6);
LABEL_22:
    unint64_t v24 = *(void *)&v158;
    uint64_t v39 = *(void *)(*(void *)&v158 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)&v158 + 16))(v12, *(void *)(*(void *)&v155 + 48) + v39 * v35, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v19) == 1)
    {
      swift_release();
      unint64_t v30 = v147;
      goto LABEL_28;
    }
    (**(void (***)(char *, char *, uint64_t))&v156)(v7, v12, v19);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    uint64_t v31 = v19;
    char v41 = v40;
    swift_bridgeObjectRelease();
    CGFloat v33 = 0;
    if (v41)
    {
      CGFloat v42 = v161;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = **(void **)&v42;
      uint64_t v164 = **(void **)&v42;
      **(void **)&CGFloat v42 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v44 = v164;
      }
      uint64_t v31 = v150;
      (**(void (***)(unint64_t, uint64_t))&v160)(*(void *)(v44 + 48) + v24 * v39, v150);
      uint64_t v32 = v164;
      CGFloat v33 = *(void **)(*(void *)(v164 + 56) + 8 * v24);
      specialized _NativeDictionary._delete(at:)(v24, v164);
      **(void **)&CGFloat v42 = v32;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();

    (**(void (***)(char *, uint64_t))&v160)(v7, v31);
    uint64_t v19 = v31;
  }
  int64_t v38 = v36 + 3;
  if (v38 < v154)
  {
    unint64_t v37 = v153[v38];
    if (!v37)
    {
      while (1)
      {
        int64_t v26 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          break;
        }
        if (v26 >= v154) {
          goto LABEL_27;
        }
        unint64_t v37 = v153[v26];
        ++v38;
        if (v37) {
          goto LABEL_21;
        }
      }
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_76;
      }
LABEL_63:
      if ((v24 & 0xC000000000000001) != 0)
      {
        id v104 = (id)MEMORY[0x24C523D60](0, v24);
      }
      else
      {
        if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_99:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        id v104 = *(id *)(v24 + 32);
      }
      int v105 = v104;
      swift_bridgeObjectRelease();
      id v106 = objc_msgSend(v105, sel_textLayoutManager);

      uint64_t v107 = 0;
      if (v106)
      {
        id v108 = objc_msgSend(v106, sel_textContainer);

        if (v108)
        {
          objc_msgSend(v108, sel_lineFragmentPadding);
          uint64_t v107 = v109;
        }
      }
      goto LABEL_77;
    }
    int64_t v26 = v38;
    goto LABEL_21;
  }
LABEL_27:
  (**(void (***)(char *, uint64_t, uint64_t, uint64_t))&v159)(v12, 1, 1, v19);
  swift_release();
LABEL_28:
  int64_t v45 = 0;
  uint64_t v46 = *(void *)(v146 + 56);
  uint64_t v140 = v146 + 56;
  uint64_t v47 = 1 << *(unsigned char *)(v146 + 32);
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  else {
    uint64_t v48 = -1;
  }
  unint64_t v49 = v48 & v46;
  uint64_t v143 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_animationController;
  uint64_t v142 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver;
  int64_t v141 = (unint64_t)(v47 + 63) >> 6;
  uint64_t v50 = (uint64_t)v145;
  id v51 = v144;
  uint64_t v52 = MEMORY[0x263F8EE78];
  uint64_t v53 = MEMORY[0x263F8EE88];
  while (2)
  {
    if (v49)
    {
      unint64_t v55 = __clz(__rbit64(v49));
      uint64_t v56 = (v49 - 1) & v49;
      unint64_t v57 = v55 | (v45 << 6);
LABEL_50:
      uint64_t v61 = *(void *)(v146 + 48);
      double v62 = v158;
      uint64_t v149 = *(void *)(*(void *)&v158 + 72);
      id v63 = *(void (**)(char *, unint64_t, uint64_t))(*(void *)&v158 + 16);
      v63(v51, v61 + v149 * v57, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)&v62 + 56))(v51, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)&v62 + 48))(v51, 1, v19) == 1) {
        goto LABEL_61;
      }
      char v148 = (void (*)(unint64_t, uint64_t, uint64_t))v63;
      unint64_t v151 = v56;
      int64_t v152 = v45;
      (**(void (***)(uint64_t, char *, uint64_t))&v156)(v50, v51, v19);
      double v155 = COERCE_DOUBLE(type metadata accessor for TextRenderSurface());
      double v64 = (char *)objc_allocWithZone(*(Class *)&v155);
      int64_t v154 = (int64_t)&v64[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_renderer];
      swift_unknownObjectWeakInit();
      *(void *)&v64[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface_yDisplacement] = 0;
      uint64_t v65 = *(void *)(v30 + v143);
      uint64_t v66 = *(void **)(v30 + v142);
      uint64_t v67 = (objc_class *)type metadata accessor for TextRenderLayer(0);
      double v68 = objc_allocWithZone(v67);
      swift_unknownObjectWeakInit();
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_fragment] = 0;
      uint64_t v69 = (uint64_t)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layout];
      _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(&v167);
      _sypSgWObTm_1((uint64_t)&v167, v69, (unint64_t *)&lazy cache variable for type metadata for TextRenderLayer.Layout?, (uint64_t)&unk_26FA897A8);
      double v70 = &v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_rawLayout];
      *(_OWORD *)double v70 = 0u;
      *((_OWORD *)v70 + 1) = 0u;
      *((void *)v70 + 4) = 0;
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_markers] = 0;
      v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_updateFlags] = 0;
      uint64_t v71 = MEMORY[0x263F8EE80];
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_interactionMetrics] = MEMORY[0x263F8EE80];
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_segmentLayers] = v52;
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectToSegmentsIndices] = v71;
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_effectIdentifiers] = v53;
      *(void *)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_version] = -1;
      uint64_t v72 = (void *)v30;
      unint64_t v30 = (unint64_t)&v68[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingSegments];
      unint64_t v153 = v72;
      id v73 = v64;
      swift_retain();
      id v74 = v66;
      uint64_t v75 = v68;
      RangeSet.init()();
      *(void *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_sharedDrawingLayer] = 0;
      *(void *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_displacements] = v52;
      uint64_t v76 = &v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBounds];
      *(_OWORD *)uint64_t v76 = 0u;
      *((_OWORD *)v76 + 1) = 0u;
      id v77 = &v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutBoundsNaturalOutsets];
      *(_OWORD *)id v77 = 0u;
      *((_OWORD *)v77 + 1) = 0u;
      *(void *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_layoutLineFragmentPadding] = 0;
      double v78 = &v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_currentDisplacement];
      *(_OWORD *)double v78 = 0u;
      *((_OWORD *)v78 + 1) = 0u;
      *(void *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_activeIdentifiers] = v53;
      uint64_t v79 = OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_time;
      *(CFTimeInterval *)&v75[v79] = CACurrentMediaTime();
      *(void *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_animationController] = v65;
      swift_unknownObjectWeakAssign();
      unint64_t v80 = specialized Dictionary.init(dictionaryLiteral:)(v52);
      uint64_t v81 = (unint64_t *)&v75[OBJC_IVAR____TtC7SwiftUI15TextRenderLayer_baseFragmentIdentifierMap];
      *uint64_t v81 = v80;
      v81[1] = 0;
      swift_retain();

      v166.receiver = v75;
      v166.super_class = v67;
      id v82 = objc_msgSendSuper2(&v166, sel_init);
      swift_release();

      *(void *)&v73[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer] = v82;
      uint64_t v83 = v153;
      swift_unknownObjectWeakAssign();

      v165.receiver = v73;
      CGFloat v84 = v161;
      uint64_t v50 = (uint64_t)v145;
      *(double *)&v165.super_class = v155;
      uint64_t v85 = (char *)objc_msgSendSuper2(&v165, sel_init);
      double v86 = *(void **)&v85[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      uint64_t v87 = v85;
      id v88 = v86;
      objc_msgSend(v88, sel_setDelegate_, v87);

      swift_beginAccess();
      int v89 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v163 = **(void ***)&v84;
      CGFloat v90 = v163;
      **(void **)&CGFloat v84 = 0x8000000000000000;
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
      uint64_t v92 = v90[2];
      BOOL v93 = (v91 & 1) == 0;
      uint64_t v94 = v92 + v93;
      if (__OFADD__(v92, v93))
      {
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      char v95 = v91;
      if (v90[3] >= v94)
      {
        unint64_t v30 = v147;
        if ((v89 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v94, v89);
        unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
        unint64_t v30 = v147;
        if ((v95 & 1) != (v97 & 1)) {
          goto LABEL_99;
        }
        unint64_t v24 = v96;
      }
      uint64_t v98 = v163;
      if (v95)
      {
        uint64_t v54 = v163[7];
        v24 *= 8;

        *(void *)(v54 + v24) = v87;
        uint64_t v19 = v150;
      }
      else
      {
        v163[(v24 >> 6) + 8] |= 1 << v24;
        uint64_t v19 = v150;
        v148(v98[6] + v24 * v149, v50, v150);
        *(void *)(v98[7] + 8 * v24) = v87;
        uint64_t v99 = v98[2];
        BOOL v100 = __OFADD__(v99, 1);
        uint64_t v101 = v99 + 1;
        if (v100) {
          goto LABEL_70;
        }
        v98[2] = v101;
      }
      **(void **)&CGFloat v84 = v98;
      swift_bridgeObjectRelease();
      (**(void (***)(uint64_t, uint64_t))&v160)(v50, v19);
      swift_endAccess();
      id v51 = v144;
      int64_t v45 = v152;
      unint64_t v49 = v151;
      continue;
    }
    break;
  }
  int64_t v58 = v45 + 1;
  if (__OFADD__(v45, 1)) {
    goto LABEL_72;
  }
  if (v58 < v141)
  {
    unint64_t v59 = *(void *)(v140 + 8 * v58);
    ++v45;
    if (!v59)
    {
      int64_t v45 = v58 + 1;
      if (v58 + 1 >= v141) {
        goto LABEL_60;
      }
      unint64_t v59 = *(void *)(v140 + 8 * v45);
      if (!v59)
      {
        int64_t v45 = v58 + 2;
        if (v58 + 2 >= v141) {
          goto LABEL_60;
        }
        unint64_t v59 = *(void *)(v140 + 8 * v45);
        if (!v59)
        {
          int64_t v60 = v58 + 3;
          if (v60 >= v141) {
            goto LABEL_60;
          }
          unint64_t v59 = *(void *)(v140 + 8 * v60);
          if (!v59)
          {
            while (1)
            {
              int64_t v45 = v60 + 1;
              if (__OFADD__(v60, 1)) {
                goto LABEL_74;
              }
              if (v45 >= v141) {
                goto LABEL_60;
              }
              unint64_t v59 = *(void *)(v140 + 8 * v45);
              ++v60;
              if (v59) {
                goto LABEL_49;
              }
            }
          }
          int64_t v45 = v60;
        }
      }
    }
LABEL_49:
    uint64_t v56 = (v59 - 1) & v59;
    unint64_t v57 = __clz(__rbit64(v59)) + (v45 << 6);
    goto LABEL_50;
  }
LABEL_60:
  (**(void (***)(char *, uint64_t, uint64_t, uint64_t))&v159)(v51, 1, 1, v19);
LABEL_61:
  swift_release();
  uint64_t v102 = v139;
  *(void *)(v30 + v139) = *v137;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v30 + v138) = v136;
  swift_bridgeObjectRelease();
  specialized TextEffectsRenderer.updateKeyframes(with:)((char *)v30);
  unint64_t v24 = *(void *)(v30 + v102);
  if (v24 >> 62) {
    goto LABEL_75;
  }
  uint64_t v103 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v103) {
    goto LABEL_63;
  }
LABEL_76:
  swift_bridgeObjectRelease();
  uint64_t v107 = 0;
LABEL_77:
  uint64_t v110 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding;
  *(void *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_lineFragmentPadding) = v107;
  unint64_t v111 = *(void *)(v30 + v139);
  unint64_t v112 = (double *)MEMORY[0x263F001A0];
  if (v111 >> 62) {
    goto LABEL_96;
  }
  uint64_t v113 = *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  id v114 = (id)v30;
  while (1)
  {
    double v115 = *v112;
    double v116 = v112[1];
    double v117 = v112[2];
    double v118 = v112[3];
    if (!v113) {
      break;
    }
    uint64_t v119 = 4;
    double v158 = *v112;
    double v157 = v116;
    double v156 = v117;
    double v155 = v118;
    while (1)
    {
      id v120 = (v111 & 0xC000000000000001) != 0
           ? (id)MEMORY[0x24C523D60](v119 - 4, v111)
           : *(id *)(v111 + 8 * v119);
      unint64_t v121 = v120;
      unint64_t v112 = (double *)(v119 - 3);
      if (__OFADD__(v119 - 4, 1)) {
        break;
      }
      CGFloat v159 = v118;
      CGFloat v160 = v117;
      CGFloat v161 = v116;
      CGFloat v162 = v115;
      objc_msgSend(v120, sel_layoutFragmentFrame);
      CGFloat x = v170.origin.x;
      CGFloat y = v170.origin.y;
      CGFloat width = v170.size.width;
      CGFloat height = v170.size.height;
      double v126 = *(double *)(v30 + v110);
      if (!CGRectIsNull(v170))
      {
        v171.origin.CGFloat x = x;
        v171.origin.CGFloat y = y;
        v171.size.CGFloat width = width;
        v171.size.CGFloat height = height;
        CGRect v172 = CGRectStandardize(v171);
        CGFloat v127 = v172.origin.y;
        double v128 = v172.origin.x - v126;
        double v129 = v172.size.width - (-v126 - v126);
        double v130 = v172.size.height + 0.0;
        v172.origin.CGFloat x = v128;
        v172.size.CGFloat width = v129;
        v172.size.CGFloat height = v172.size.height + 0.0;
        CGFloat v131 = CGRectGetWidth(v172);
        CGFloat x = v158;
        CGFloat y = v157;
        CGFloat width = v156;
        CGFloat height = v155;
        if (v131 >= 0.0)
        {
          v173.origin.CGFloat x = v128;
          v173.origin.CGFloat y = v127;
          v173.size.CGFloat width = v129;
          v173.size.CGFloat height = v130;
          CGFloat x = v128;
          CGFloat y = v127;
          CGFloat width = v129;
          CGFloat height = v130;
          if (CGRectGetHeight(v173) < 0.0)
          {
            CGFloat x = v158;
            CGFloat y = v157;
            CGFloat width = v156;
            CGFloat height = v155;
          }
        }
      }
      v168.origin.CGFloat x = v162;
      v168.origin.CGFloat y = v161;
      v168.size.CGFloat width = v160;
      v168.size.CGFloat height = v159;
      v175.origin.CGFloat x = x;
      v175.origin.CGFloat y = y;
      v175.size.CGFloat width = width;
      v175.size.CGFloat height = height;
      CGRect v169 = CGRectUnion(v168, v175);
      double v115 = v169.origin.x;
      double v116 = v169.origin.y;
      double v117 = v169.size.width;
      double v118 = v169.size.height;

      ++v119;
      if (v112 == (double *)v113) {
        goto LABEL_90;
      }
    }
    __break(1u);
LABEL_96:
    swift_bridgeObjectRetain_n();
    id v134 = (id)v30;
    uint64_t v113 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_90:

  swift_bridgeObjectRelease_n();
  v174.origin.CGFloat x = v115;
  v174.origin.CGFloat y = v116;
  v174.size.CGFloat width = v117;
  v174.size.CGFloat height = v118;
  if (CGRectIsNull(v174))
  {
    double v117 = 0.0;
    double v118 = 0.0;
    double v115 = 0.0;
    double v116 = 0.0;
  }
  uint64_t v132 = (double *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds);
  v176.origin.CGFloat x = v115;
  v176.origin.CGFloat y = v116;
  v176.size.CGFloat width = v117;
  v176.size.CGFloat height = v118;
  BOOL v133 = CGRectEqualToRect(*(CGRect *)(v30 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_layoutBounds), v176);
  if (!v133)
  {
    *uint64_t v132 = v115;
    v132[1] = v116;
    _OWORD v132[2] = v117;
    v132[3] = v118;
  }
  TextEffectsRenderer.updateDisplacementAndBounds(changed:)(!v133);
  TextEffectsAnimationController.restorePendingSnapshots()();
}

uint64_t specialized TextEffectsRenderer.updateKeyframes(with:)(char *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  double v3 = *(void (***)(uint64_t, unint64_t, uint64_t))(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (unint64_t)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v98 - v7;
  MEMORY[0x270FA5388](v9);
  unint64_t v121 = (char *)&v98 - v10;
  MEMORY[0x270FA5388](v11);
  id v120 = (char *)&v98 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v99 = (char *)&v98 - v14;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v15 - 8);
  double v128 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  CGFloat v127 = (char *)&v98 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v100 = (uint64_t)&v98 - v20;
  MEMORY[0x270FA5388](v21);
  id v104 = (__objc2_prot **)((char *)&v98 - v22);
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  uint64_t v131 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v119 = (void (***)(uint64_t, unint64_t, uint64_t))((char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v25);
  double v122 = (uint64_t *)((char *)&v98 - v26);
  uint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] + 1;
  uint64_t v106 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] = v27;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = MEMORY[0x263F8EE88];
  v28[5] = MEMORY[0x263F8EE88];
  uint64_t v30 = MEMORY[0x263F8EE80];
  v28[6] = MEMORY[0x263F8EE80];
  void v28[2] = v30;
  v28[3] = v30;
  v28[4] = v30;
  swift_beginAccess();
  v28[5] = v29;
  swift_bridgeObjectRelease();
  v28[7] = v27;
  uint64_t v136 = v28;
  unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v101 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  unint64_t v32 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  unint64_t v134 = v31;
  uint64_t v135 = 0;
  uint64_t v105 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  unint64_t v112 = a1;
  CGFloat v33 = *(__objc2_prot ***)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs];
  if (v32 >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  double v129 = v3;
  uint64_t v130 = v2;
  uint64_t v35 = (uint64_t)v128;
  if (v34)
  {
    int v111 = 0;
    unint64_t v36 = 0;
    double v126 = v33;
    unint64_t v125 = (unint64_t)v33[2];
    id v114 = &v112[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    unint64_t v124 = v32 & 0xC000000000000001;
    double v118 = (__objc2_prot **)(v3 + 2);
    unint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 7);
    double v117 = (__objc2_prot ***)(v3 + 6);
    CGFloat v33 = (__objc2_prot **)(v3 + 4);
    uint64_t v113 = (void (**)(unint64_t, uint64_t))(v3 + 1);
    unint64_t v103 = v5;
    uint64_t v102 = v8;
    unint64_t v116 = v32;
    uint64_t v115 = v34;
    while (1)
    {
      id v37 = v124 ? (id)MEMORY[0x24C523D60](v36, v32) : *(id *)(v32 + 8 * v36 + 32);
      int64_t v38 = v37;
      if (v125 == v36) {
        break;
      }
      if (v36 >= (unint64_t)v126[2])
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v3[2](v35, (unint64_t)v126+ ((*((unsigned __int8 *)v3 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v3 + 80))+ (void)v3[9] * v36, v2);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v3[7])(v35, 0, 1, v2);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v3[6])(v35, 1, v2) == 1) {
        goto LABEL_18;
      }
      uint64_t v39 = *v33;
      ((void (*)(char *, uint64_t, uint64_t))*v33)(v8, v35, v2);
      uint64_t v40 = *(int *)(v131 + 48);
      char v41 = v122;
      CGFloat v42 = (char *)v122 + v40;
      *double v122 = v38;
      ((void (*)(char *, char *, uint64_t))v39)((char *)v41 + v40, v8, v2);
      ((void (*)(unint64_t, char *, uint64_t))v39)(v5, v42, v2);
      uint64_t v43 = v114;
      swift_beginAccess();
      uint64_t v44 = *(void *)v43;
      if (*(void *)(v44 + 16) && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v46 & 1) != 0))
      {
        uint64_t v47 = *(void **)(*(void *)(v44 + 56) + 8 * v45);
        swift_endAccess();
        uint64_t v48 = *v113;
        unint64_t v49 = v47;
        id v110 = v49;
        v48(v5, v2);
        uint64_t v50 = v134;
        uint64_t v51 = v135;
        uint64_t v52 = *(void *)&v112[v106];
        uint64_t v53 = *(void **)&v49[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        swift_bridgeObjectRetain();
        id v54 = v53;
        TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v38, v50, v51, v52, (uint64_t)v132);
        uint64_t v55 = v132[1];
        uint64_t v108 = v132[0];
        uint64_t v57 = v132[2];
        uint64_t v56 = v132[3];
        uint64_t v58 = v132[4];
        uint64_t v59 = v132[5];
        uint64_t v107 = v132[6];
        int v109 = v133;
        swift_bridgeObjectRelease();

        Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v108, v55, v57, v56, v58, v59, v107, (uint64_t)&v134);
        unint64_t v5 = v103;
        swift_bridgeObjectRelease();
        uint64_t v2 = v130;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = v102;
        double v3 = v129;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v111 |= v109;
      }
      else
      {
        swift_endAccess();

        (*v113)(v5, v2);
      }
      ++v36;
      uint64_t v35 = (uint64_t)v128;
      unint64_t v32 = v116;
      if (v115 == v36) {
        goto LABEL_19;
      }
    }
    (*v123)(v35, 1, 1, v2);
LABEL_18:

    _sypSgWOhTm_1(v35, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v111 & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v60 = swift_retain();
    TextEffectsAnimationController.updateKeyframes(_:)(v60);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    TextEffectsAnimationController.updateKeyframes(version:)(*(void *)&v112[v106]);
  }
  uint64_t v61 = v112;
  uint64_t v62 = swift_bridgeObjectRetain();
  CGFloat v33 = v104;
  specialized Sequence.first(where:)(v62, v61, (char *)v104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v63 = v100;
  outlined init with copy of Any?((uint64_t)v33, v100, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  double v64 = (__objc2_prot **)v3[6];
  double v128 = (char *)(v3 + 6);
  double v126 = v64;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v64)(v63, 1, v2) == 1)
  {
    _sypSgWOhTm_1(v63, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  }
  else
  {
    uint64_t v65 = (uint64_t)v99;
    v3[4]((uint64_t)v99, v63, v2);
    uint64_t v66 = &v61[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    swift_beginAccess();
    uint64_t v67 = *(void *)v66;
    if (*(void *)(v67 + 16) && (unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v65), (v69 & 1) != 0))
    {
      double v70 = *(char **)(*(void *)(v67 + 56) + 8 * v68);
      swift_endAccess();
      uint64_t v71 = *(void *)&v61[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver];
      uint64_t v72 = *(void **)&v70[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      id v73 = v70;
      CGFloat v33 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
      id v74 = objc_msgSend(v72, sel_superlayer);
      id v75 = objc_msgSend(v74, sel_superlayer);

      ((void (*)(uint64_t, uint64_t))v3[1])(v65, v130);
      uint64_t v76 = *(void **)(v71 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(void *)(v71 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v75;
      uint64_t v2 = v130;
    }
    else
    {
      swift_endAccess();
      ((void (*)(uint64_t, uint64_t))v3[1])(v65, v2);
    }
  }
  unint64_t v32 = *(void *)&v112[v101];
  uint64_t v77 = *(void *)&v112[v105];
  uint64_t v78 = (uint64_t)v127;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v78 = (uint64_t)v127;
    uint64_t v8 = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v79 = (void *)&unk_268EF7000;
    if (!v8) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v8 = *(char **)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v79 = &unk_268EF7000;
    if (!v8) {
      goto LABEL_44;
    }
  }
  unint64_t v5 = 0;
  double v118 = (__objc2_prot **)&v61[v79[298]];
  unint64_t v125 = v32 & 0xC000000000000001;
  unint64_t v124 = *(void *)(v77 + 16);
  double v122 = v3 + 2;
  unint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 7);
  unint64_t v80 = (void (**)(char *, uint64_t, uint64_t))(v3 + 4);
  double v117 = (__objc2_prot ***)(v3 + 1);
  while (1)
  {
    id v82 = v125
        ? (void (**)(uint64_t, unint64_t, uint64_t))MEMORY[0x24C523D60](v5, v32)
        : (void (**)(uint64_t, unint64_t, uint64_t))*(id *)(v32 + 8 * v5 + 32);
    double v3 = v82;
    if (v124 == v5) {
      break;
    }
    if (v5 >= *(void *)(v77 + 16)) {
      goto LABEL_46;
    }
    uint64_t v83 = v129;
    v129[2](v78, v77+ ((*((unsigned __int8 *)v83 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v83 + 80))+ (void)v83[9] * v5, v2);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v83[7])(v78, 0, 1, v2);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v126)(v78, 1, v2) == 1) {
      goto LABEL_43;
    }
    uint64_t v84 = v77;
    unint64_t v85 = v32;
    double v86 = (void (*)(void))*v80;
    uint64_t v87 = v120;
    (*v80)(v120, v78, v2);
    uint64_t v88 = *(int *)(v131 + 48);
    int v89 = v119;
    *uint64_t v119 = v3;
    ((void (*)(char *, char *, uint64_t))v86)((char *)v89 + v88, v87, v2);
    uint64_t v90 = (uint64_t)v121;
    v86();
    CGFloat v33 = v118;
    swift_beginAccess();
    char v91 = *v33;
    if (*v33)->prots && (unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v90), (v93))
    {
      uint64_t v94 = (void *)v91->inst_props[v92];
      swift_endAccess();
      CGFloat v33 = *v117;
      id v95 = v94;
      uint64_t v96 = v90;
      uint64_t v2 = v130;
      ((void (*)(uint64_t, uint64_t))v33)(v96, v130);
    }
    else
    {
      swift_endAccess();

      uint64_t v81 = v90;
      uint64_t v2 = v130;
      ((void (*)(uint64_t, uint64_t))*v117)(v81, v130);
    }
    unint64_t v32 = v85;
    ++v5;
    uint64_t v78 = (uint64_t)v127;
    uint64_t v77 = v84;
    if (v8 == (char *)v5) {
      goto LABEL_44;
    }
  }
  (*v123)(v78, 1, 1, v2);
LABEL_43:

  _sypSgWOhTm_1(v78, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_44:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _sypSgWOhTm_1((uint64_t)v104, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (**v31)(void);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(void);
  void (*v37)(void);
  void (*v38)(char *, uint64_t, uint64_t);
  void (**v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  id v76;
  id v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  void *v98;
  void (*v99)(uint64_t, uint64_t);
  id v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  id v112;
  id v113;
  id v114;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  int v126;
  id v127;
  int v128;
  char *v129;
  void (**v130)(char *, uint64_t);
  void (**v131)(char *, uint64_t, uint64_t);
  char *v132;
  uint64_t v133;
  void (**v134)(void);
  void (**v135)(uint64_t, uint64_t);
  char *v136;
  void *v137;
  char *v138;
  char *v139;
  char *v140;
  void (**v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v142;
  void (**v143)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void v150[7];
  unsigned __int8 v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;

  uint64_t v2 = type metadata accessor for UUID();
  double v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int64_t v141 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v116 - v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v139 = (char *)&v116 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v138 = (char *)&v116 - v11;
  MEMORY[0x270FA5388](v12);
  double v117 = (char *)&v116 - v13;
  type metadata accessor for (key: UUID, value: TextRenderSurface)?(0, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v124 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v146 = (char *)&v116 - v17;
  MEMORY[0x270FA5388](v18);
  double v118 = (uint64_t)&v116 - v19;
  MEMORY[0x270FA5388](v20);
  unint64_t v121 = (char *)&v116 - v21;
  type metadata accessor for (NSTextLayoutFragment, UUID)();
  uint64_t v149 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v137 = (uint64_t *)((char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  uint64_t v140 = (char *)&v116 - v25;
  uint64_t v26 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] + 1;
  unint64_t v123 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion;
  *(void *)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_keyframesVersion] = v26;
  type metadata accessor for Text.Effect.Keyframes.Storage();
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = MEMORY[0x263F8EE88];
  v27[5] = MEMORY[0x263F8EE88];
  uint64_t v29 = MEMORY[0x263F8EE80];
  v27[6] = MEMORY[0x263F8EE80];
  v27[2] = v29;
  v27[3] = v29;
  v27[4] = v29;
  swift_beginAccess();
  v27[5] = v28;
  swift_bridgeObjectRelease();
  v27[7] = v26;
  int64_t v154 = v27;
  uint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v119 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments;
  unint64_t v31 = *(void (***)(void))&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentFragments];
  int64_t v152 = v30;
  unint64_t v153 = 0;
  double v122 = OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs;
  double v129 = a1;
  unint64_t v32 = *(char **)&a1[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_currentIDs];
  uint64_t v142 = v32;
  if ((unint64_t)v31 >> 62)
  {
LABEL_47:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v32 = v142;
    CGFloat v33 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    CGFloat v33 = *(void *)(((unint64_t)v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  char v148 = v2;
  unint64_t v147 = v3;
  uint64_t v34 = (uint64_t)v124;
  if (v33)
  {
    double v128 = 0;
    uint64_t v35 = 0;
    uint64_t v145 = *((void *)v32 + 2);
    uint64_t v132 = &v129[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    double v144 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((unint64_t)v31 & 0xC000000000000001);
    uint64_t v136 = (char *)(v3 + 16);
    uint64_t v143 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v135 = (void (**)(uint64_t, uint64_t))(v3 + 48);
    uint64_t v131 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v130 = (void (**)(char *, uint64_t))(v3 + 8);
    id v120 = v5;
    unint64_t v134 = v31;
    unsigned __int8 v133 = v33;
    while (1)
    {
      unint64_t v36 = v144 ? (void (*)(void))MEMORY[0x24C523D60](v35, v31) : v31[v35 + 4];
      id v37 = v36;
      if (v145 == v35) {
        break;
      }
      if (v35 >= *((void *)v32 + 2))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v34, &v32[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v35], v2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v34, 0, 1, v2);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v34, 1, v2) == 1) {
        goto LABEL_18;
      }
      int64_t v38 = *v131;
      uint64_t v39 = v141;
      (*v131)((char *)v141, v34, v2);
      uint64_t v40 = *(int *)(v149 + 48);
      char v41 = v140;
      CGFloat v42 = &v140[v40];
      *(void *)uint64_t v140 = v37;
      v38(&v41[v40], (uint64_t)v39, v2);
      v38(v5, (uint64_t)v42, v2);
      uint64_t v43 = v132;
      swift_beginAccess();
      uint64_t v44 = *(void *)v43;
      if (*(void *)(*(void *)v43 + 16)
        && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v46 & 1) != 0))
      {
        uint64_t v47 = *(void **)(*(void *)(v44 + 56) + 8 * v45);
        swift_endAccess();
        uint64_t v48 = *v130;
        unint64_t v49 = v47;
        CGFloat v127 = v49;
        v48(v5, v2);
        uint64_t v50 = v152;
        uint64_t v51 = v153;
        uint64_t v52 = *(void *)&v129[v123];
        uint64_t v53 = *(void **)&v49[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
        swift_bridgeObjectRetain();
        id v54 = v53;
        TextRenderLayer.update(with:baseFragmentIdentifierMap:version:)(v37, v50, v51, v52, (uint64_t)v150);
        uint64_t v55 = v150[0];
        uint64_t v56 = v150[1];
        uint64_t v58 = v150[2];
        uint64_t v57 = v150[3];
        uint64_t v60 = v150[4];
        uint64_t v59 = v150[5];
        unint64_t v125 = v150[6];
        double v126 = v151;
        uint64_t v34 = (uint64_t)v124;
        swift_bridgeObjectRelease();

        Text.Effect.Keyframes.appendPartial(map:keyframes:baseFragmentIdentifierMap:)(v55, v56, v58, v57, v60, v59, v125, (uint64_t)&v152);
        swift_bridgeObjectRelease();
        double v3 = v147;
        swift_bridgeObjectRelease();
        unint64_t v5 = v120;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v148;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v128 |= v126;
      }
      else
      {
        swift_endAccess();

        (*v130)(v5, v2);
      }
      ++v35;
      unint64_t v31 = v134;
      unint64_t v32 = v142;
      if (v133 == v35) {
        goto LABEL_19;
      }
    }
    (*v143)(v34, 1, 1, v2);
LABEL_18:

    _sypSgWOhTm_1(v34, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v128 & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v61 = swift_retain();
    TextEffectsAnimationController.updateKeyframes(_:)(v61);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    TextEffectsAnimationController.updateKeyframes(version:)(*(void *)&v129[v123]);
  }
  uint64_t v62 = v129;
  uint64_t v63 = swift_bridgeObjectRetain();
  double v64 = v121;
  specialized Sequence.first(where:)(v63, v62, v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v65 = v118;
  outlined init with copy of Any?((uint64_t)v64, v118, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  uint64_t v145 = v3 + 48;
  double v144 = v66;
  if (v66(v65, 1, v2) == 1)
  {
    _sypSgWOhTm_1(v65, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  }
  else
  {
    uint64_t v67 = (uint64_t)v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v117, v65, v2);
    unint64_t v68 = &v62[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_surfaceMap];
    swift_beginAccess();
    char v69 = *(void *)v68;
    if (*(void *)(v69 + 16) && (double v70 = specialized __RawDictionaryStorage.find<A>(_:)(v67), (v71 & 1) != 0))
    {
      uint64_t v72 = *(char **)(*(void *)(v69 + 56) + 8 * v70);
      swift_endAccess();
      id v73 = *(void *)&v62[OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_geometryObserver];
      id v74 = *(void **)&v72[OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D417TextRenderSurface__layer];
      id v75 = v72;
      uint64_t v76 = objc_msgSend(v74, sel_superlayer);
      uint64_t v77 = objc_msgSend(v76, sel_superlayer);

      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v67, v2);
      uint64_t v78 = *(void **)(v73 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor);
      *(void *)(v73 + OBJC_IVAR____TtC7SwiftUIP33_FB86B422571764190CF2C7C4C92612D421LayerGeometryObserver_ancestor) = v77;
    }
    else
    {
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v67, v2);
    }
  }
  uint64_t v79 = *(void *)&v129[v119];
  unint64_t v80 = *(void *)&v129[v122];
  uint64_t v81 = (uint64_t)v146;
  if (v79 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v81 = (uint64_t)v146;
    unint64_t v5 = (char *)_CocoaArrayWrapper.endIndex.getter();
    id v82 = (void *)&unk_268EF7000;
    if (!v5) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v5 = *(char **)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v82 = &unk_268EF7000;
    if (!v5) {
      goto LABEL_44;
    }
  }
  uint64_t v83 = 0;
  uint64_t v136 = &v62[v82[298]];
  uint64_t v143 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 & 0xC000000000000001);
  uint64_t v140 = (char *)(v3 + 16);
  uint64_t v142 = *(char **)(v80 + 16);
  int64_t v141 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  unint64_t v31 = (void (**)(void))(v3 + 32);
  uint64_t v135 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  while (1)
  {
    uint64_t v84 = v143 ? (id)MEMORY[0x24C523D60](v83, v79) : *(id *)(v79 + 8 * (void)v83 + 32);
    unint64_t v85 = v84;
    if (v142 == v83) {
      break;
    }
    if ((unint64_t)v83 >= *(void *)(v80 + 16)) {
      goto LABEL_46;
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16))(v81, v80+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * (void)v83, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v81, 0, 1, v2);
    if (v144(v81, 1, v2) == 1) {
      goto LABEL_43;
    }
    double v86 = v80;
    uint64_t v87 = v79;
    uint64_t v88 = v2;
    int v89 = *v31;
    uint64_t v90 = v138;
    ((void (*)(char *, uint64_t, uint64_t))*v31)(v138, v81, v88);
    char v91 = *(int *)(v149 + 48);
    unint64_t v92 = v137;
    *uint64_t v137 = v85;
    ((void (*)(char *, char *, uint64_t))v89)((char *)v92 + v91, v90, v88);
    char v93 = (uint64_t)v139;
    v89();
    uint64_t v94 = v136;
    swift_beginAccess();
    id v95 = *(void *)v94;
    if (*(void *)(v95 + 16) && (uint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v93), (v97 & 1) != 0))
    {
      uint64_t v98 = *(void **)(*(void *)(v95 + 56) + 8 * v96);
      swift_endAccess();
      uint64_t v99 = *v135;
      uint64_t v100 = v98;
      uint64_t v101 = v93;
      uint64_t v102 = v148;
      v99(v101, v148);
      unint64_t v103 = v100;
      objc_msgSend(v85, sel_layoutFragmentFrame);
      objc_msgSend(v103, sel_adjustedLayoutFragmentFrame_);
      uint64_t v105 = v104;
      uint64_t v107 = v106;
      int v109 = v108;
      int v111 = v110;
      unint64_t v112 = objc_msgSend(v103, sel_layer);
      objc_msgSend(v112, sel_setFrame_, v105, v107, v109, v111);

      uint64_t v113 = objc_msgSend(v103, sel_layer);
      objc_msgSend(v113, sel_setBounds_, v105, v107, v109, v111);

      id v114 = objc_msgSend(v103, sel_layer);
      objc_msgSend(v114, sel_layoutIfNeeded);

      uint64_t v2 = v102;
    }
    else
    {
      swift_endAccess();

      uint64_t v2 = v148;
      (*v135)(v93, v148);
    }
    uint64_t v79 = v87;
    ++v83;
    double v3 = v147;
    uint64_t v81 = (uint64_t)v146;
    unint64_t v80 = v86;
    if (v5 == v83) {
      goto LABEL_44;
    }
  }
  (*v141)(v81, 1, 1, v2);
LABEL_43:

  _sypSgWOhTm_1(v81, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
LABEL_44:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _sypSgWOhTm_1((uint64_t)v121, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for (key: UUID, value: TextRenderSurface)?);
  return swift_release();
}

Swift::Void __swiftcall TextEffectsAnimationController.restorePendingSnapshots()()
{
  uint64_t v1 = (void *)(v0 + 104);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v42 = v0;
  uint64_t v43 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & v3;
  uint64_t v46 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  unint64_t v45 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  int64_t v7 = 0;
  int64_t v44 = (unint64_t)(v4 + 63) >> 6;
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v11 >= v44) {
      goto LABEL_39;
    }
    unint64_t v12 = *(void *)(v43 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v44) {
        goto LABEL_39;
      }
      unint64_t v12 = *(void *)(v43 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v44) {
          goto LABEL_39;
        }
        unint64_t v12 = *(void *)(v43 + 8 * v7);
        if (!v12)
        {
          int64_t v13 = v11 + 3;
          if (v13 < v44)
          {
            unint64_t v12 = *(void *)(v43 + 8 * v13);
            if (v12)
            {
              int64_t v7 = v13;
              goto LABEL_21;
            }
            while (1)
            {
              int64_t v7 = v13 + 1;
              if (__OFADD__(v13, 1)) {
                goto LABEL_43;
              }
              if (v7 >= v44) {
                break;
              }
              unint64_t v12 = *(void *)(v43 + 8 * v7);
              ++v13;
              if (v12) {
                goto LABEL_21;
              }
            }
          }
LABEL_39:
          swift_release();
          *uint64_t v1 = MEMORY[0x263F8EE80];
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
    for (unint64_t i = __clz(__rbit64(v12)) + (v7 << 6); ; unint64_t i = v9 | (v7 << 6))
    {
      uint64_t v14 = 8 * i;
      Swift::UInt64 v15 = *(void *)(*(void *)(v46 + 48) + v14);
      uint64_t v16 = *(void **)(*(void *)(v46 + 56) + v14);
      uint64_t v17 = *v45;
      swift_beginAccess();
      if (specialized Set.contains(_:)(v15, *(void *)(v17 + 40))) {
        break;
      }
      swift_beginAccess();
      uint64_t v18 = *(void *)(v17 + 16);
      if (!*(void *)(v18 + 16) || (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15), (v20 & 1) == 0))
      {
        swift_endAccess();
        break;
      }
      uint64_t v21 = *(void **)(*(void *)(v18 + 56) + 8 * v19);
      swift_endAccess();
      uint64_t v22 = *(void *)(v42 + 112);
      uint64_t v23 = *(void (**)(id, void, void, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v21) + 0xC8);
      id v24 = v16;
      uint64_t v25 = v21;
      swift_retain();
      swift_retain();
      v23(v24, MEMORY[0x263F8EE80], 0, v22, v42);

      swift_release();
      swift_release();
      if (!v6) {
        goto LABEL_8;
      }
LABEL_7:
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
    }
    swift_beginAccess();
    id v26 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = (void *)*v1;
    uint64_t v47 = (void *)*v1;
    *uint64_t v1 = 0x8000000000000000;
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    uint64_t v31 = v28[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (!__OFADD__(v31, v32))
    {
      char v34 = v29;
      if (v28[3] < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
        uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        if ((v34 & 1) != (v36 & 1)) {
          goto LABEL_44;
        }
        unint64_t v30 = v35;
        id v37 = v47;
        if ((v34 & 1) == 0) {
          goto LABEL_35;
        }
LABEL_5:
        uint64_t v8 = v37[7];

        *(void *)(v8 + 8 * v30) = v26;
LABEL_6:
        *uint64_t v1 = v37;
        swift_bridgeObjectRelease();
        swift_endAccess();

        if (!v6) {
          continue;
        }
        goto LABEL_7;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        id v37 = v47;
        if (v29) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        id v37 = v47;
        if (v34) {
          goto LABEL_5;
        }
      }
LABEL_35:
      v37[(v30 >> 6) + 8] |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v37[6] + v38) = v15;
      *(void *)(v37[7] + v38) = v26;
      uint64_t v39 = v37[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_41;
      }
      v37[2] = v41;
      goto LABEL_6;
    }
    break;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}