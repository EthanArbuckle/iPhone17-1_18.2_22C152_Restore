uint64_t type metadata accessor for Cache3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CollectionOfTwo()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CollectionOfTwo(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for CollectionOfTwo(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245BF50A8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CollectionOfTwo()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for EquatableOptionalObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for EquatableOptionalObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for EquatableOptionalObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for EquatableOptionalObject()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for Pair.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BF526CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Pair<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Pair<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Pair<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24 = (unint64_t *)result;
  uint64_t v25 = 0;
  int64_t v6 = 0;
  uint64_t v26 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v31) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    }
    unint64_t v20 = *(void *)(v26 + 8 * v19);
    ++v6;
    if (!v20)
    {
      int64_t v6 = v19 + 1;
      if (v19 + 1 >= v31) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
      unint64_t v20 = *(void *)(v26 + 8 * v6);
      if (!v20)
      {
        int64_t v6 = v19 + 2;
        if (v19 + 2 >= v31) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
        }
        unint64_t v20 = *(void *)(v26 + 8 * v6);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v11 = __clz(__rbit64(v20)) + (v6 << 6);
LABEL_5:
    unsigned int v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    outlined init with copy of AnyTrackedValue(*(void *)(a3 + 56) + 40 * v11, (uint64_t)v30);
    v28[0] = v13;
    v28[1] = v14;
    outlined init with copy of AnyTrackedValue((uint64_t)v30, (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    uint64_t DynamicType = swift_getDynamicType();
    outlined init with copy of AnyTrackedValue(a4, (uint64_t)v27);
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    uint64_t v16 = swift_getDynamicType();
    uint64_t v17 = v27[4];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    outlined destroy of (key: EventID, value: EventType)((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (DynamicType == v18)
    {
      *(unint64_t *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v31) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
  }
  unint64_t v20 = *(void *)(v26 + 8 * v21);
  if (v20)
  {
    int64_t v6 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v6 >= v31) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    }
    unint64_t v20 = *(void *)(v26 + 8 * v6);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DynamicType;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t *v25;
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  void v30[2];
  void v31[5];
  unsigned char v32[48];
  int64_t v33;

  uint64_t v25 = (unint64_t *)result;
  uint64_t v26 = 0;
  uint64_t v5 = 0;
  int64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  unint64_t v10 = (uint64_t *)(a4 + 48);
  v33 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unsigned int v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v13 = v12 | (v5 << 6);
      goto LABEL_19;
    }
    uint64_t v14 = __OFADD__(v5++, 1);
    if (v14)
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v5 >= v33) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
    }
    int v15 = *(void *)(v6 + 8 * v5);
    if (!v15) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
LABEL_19:
    uint64_t v17 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    int64_t v19 = v17[1];
    outlined init with copy of AnyTrackedValue(*(void *)(a3 + 56) + 40 * v13, (uint64_t)v32);
    v30[0] = v18;
    v30[1] = v19;
    outlined init with copy of AnyTrackedValue((uint64_t)v32, (uint64_t)v31);
    __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    uint64_t DynamicType = swift_getDynamicType();
    swift_beginAccess();
    int64_t v21 = *v10;
    if (*(void *)(*v10 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(DynamicType), (v23 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(void *)(v21 + 56) + 40 * v22, (uint64_t)&v27);
    }
    else
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
    }
    swift_endAccess();
    outlined destroy of (key: EventID, value: EventType)((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
    unint64_t v11 = *((void *)&v28 + 1);
    outlined destroy of (key: EventID, value: EventType)((uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for ForwardedEventDispatcher?);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    if (!v11)
    {
      *(unint64_t *)((char *)v25 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = __OFADD__(v26++, 1);
      if (v14)
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
      }
    }
  }
  uint64_t v16 = v5 + 1;
  if (v5 + 1 >= v33) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  }
  int v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  uint64_t v16 = v5 + 2;
  if (v5 + 2 >= v33) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  }
  int v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  uint64_t v16 = v5 + 3;
  if (v5 + 3 >= v33) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
  }
  int v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_17:
    uint64_t v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v33) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v25, a2, v26, a3);
    }
    int v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  unsigned char v21[40];
  uint64_t v22;
  unsigned char v23[40];
  uint64_t v24;
  unsigned char v25[48];
  uint64_t v26;

  unint64_t v20 = (unint64_t *)result;
  uint64_t v26 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unsigned int v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v15 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    }
    uint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      }
      uint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v16 - 1) & v16;
    uint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    outlined init with copy of Subview.ID(*(void *)(a3 + 48) + 40 * v13, (uint64_t)v25);
    uint64_t v14 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
    outlined init with copy of Subview.ID((uint64_t)v25, (uint64_t)v23);
    v24 = v14;
    outlined init with copy of Subview.ID((uint64_t)v23, (uint64_t)v21);
    v22 = v14;
    swift_retain_n();
    outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item));
    outlined destroy of Subview.ID((uint64_t)v21);
    swift_release();
    uint64_t result = outlined destroy of Subview.ID((uint64_t)v25);
    if (v14 != a4)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      }
    }
  }
  uint64_t v17 = v15 + 2;
  if (v17 >= v11) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
  }
  uint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    }
    uint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  unsigned char v21[40];
  uint64_t v22;
  unsigned char v23[40];
  uint64_t v24;
  unsigned char v25[48];
  uint64_t v26;

  unint64_t v20 = (unint64_t *)result;
  uint64_t v26 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unsigned int v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v15 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    }
    uint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      }
      uint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v16 - 1) & v16;
    uint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    outlined init with copy of AnyHashable(*(void *)(a3 + 48) + 40 * v13, (uint64_t)v25);
    uint64_t v14 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
    outlined init with copy of AnyHashable((uint64_t)v25, (uint64_t)v23);
    v24 = v14;
    outlined init with copy of AnyHashable((uint64_t)v23, (uint64_t)v21);
    v22 = v14;
    swift_retain_n();
    outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
    outlined destroy of AnyHashable((uint64_t)v21);
    swift_release();
    uint64_t result = outlined destroy of AnyHashable((uint64_t)v25);
    if (v14 != a4)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
      }
    }
  }
  uint64_t v17 = v15 + 2;
  if (v17 >= v11) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
  }
  uint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v26, a3);
    }
    uint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  type metadata accessor for Slice();
  swift_getWitnessTable();

  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unsigned int v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x24C527CC0](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t specialized Dictionary.optimisticFilter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (*(void *)(a1 + 16) >= 0x41uLL)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = (void *)specialized _NativeDictionary.filter(_:)(v4, a2);
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  unint64_t v67 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  uint64_t v9 = a2 + 48;
  int64_t v65 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v10 = 0;
  int64_t v11 = 0;
  unint64_t v68 = 0;
  unint64_t v69 = v3;
  char v61 = 1;
  char v63 = 1;
  while (v8)
  {
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_25:
    uint64_t v17 = *(void *)(v3 + 56);
    uint64_t v18 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * v13);
    Swift::UInt v20 = v18[1];
    Swift::UInt v80 = *v18;
    Swift::UInt v19 = v80;
    Swift::UInt v81 = v20;
    outlined init with copy of AnyTrackedValue(v17 + 40 * v13, (uint64_t)v82);
    *(void *)&long long v77 = v19;
    *((void *)&v77 + 1) = v20;
    outlined init with take of ScrollStateRequest(v82, (uint64_t)v78);
    *(void *)&long long v75 = v19;
    *((void *)&v75 + 1) = v20;
    outlined init with copy of AnyTrackedValue((uint64_t)v78, (uint64_t)v76);
    v73[0] = v19;
    v73[1] = v20;
    outlined init with copy of AnyTrackedValue((uint64_t)v76, (uint64_t)v74);
    __swift_project_boxed_opaque_existential_1(v74, v74[3]);
    uint64_t DynamicType = swift_getDynamicType();
    swift_beginAccess();
    uint64_t v22 = *(void *)v9;
    if (*(void *)(*(void *)v9 + 16)
      && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(DynamicType), (v24 & 1) != 0))
    {
      outlined init with copy of AnyTrackedValue(*(void *)(v22 + 56) + 40 * v23, (uint64_t)&v70);
    }
    else
    {
      uint64_t v72 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
    }
    swift_endAccess();
    outlined destroy of (key: EventID, value: EventType)((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
    uint64_t v25 = *((void *)&v71 + 1);
    outlined destroy of (key: EventID, value: EventType)((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for ForwardedEventDispatcher?);
    outlined destroy of (key: EventID, value: EventType)((uint64_t)&v77, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    if (v25)
    {
      char v63 = 0;
    }
    else
    {
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_87;
      }
      char v61 = 0;
      uint64_t v26 = 1 << v10;
      if (v10 >= 0x40) {
        uint64_t v26 = 0;
      }
      v68 |= v26;
    }
    unint64_t v3 = v69;
    ++v10;
  }
  int64_t v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    swift_release_n();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_88:
    swift_release_n();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if (v14 >= v65) {
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v67 + 8 * v14);
  ++v11;
  if (v15) {
    goto LABEL_24;
  }
  int64_t v11 = v14 + 1;
  if (v14 + 1 >= v65) {
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v67 + 8 * v11);
  if (v15) {
    goto LABEL_24;
  }
  int64_t v11 = v14 + 2;
  if (v14 + 2 >= v65) {
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v67 + 8 * v11);
  if (v15)
  {
LABEL_24:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_25;
  }
  int64_t v16 = v14 + 3;
  if (v16 < v65)
  {
    unint64_t v15 = *(void *)(v67 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v11 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_82;
        }
        if (v11 >= v65) {
          goto LABEL_34;
        }
        unint64_t v15 = *(void *)(v67 + 8 * v11);
        ++v16;
        if (v15) {
          goto LABEL_24;
        }
      }
    }
    int64_t v11 = v16;
    goto LABEL_24;
  }
LABEL_34:
  swift_release();
  if (v61)
  {
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    goto LABEL_38;
  }
  if ((v63 & 1) == 0)
  {
    uint64_t v28 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v29 = -1;
    if (v28 < 64) {
      uint64_t v29 = ~(-1 << v28);
    }
    unint64_t v30 = v29 & *(void *)(v3 + 64);
    int64_t v31 = v78;
    v32 = v82;
    unint64_t v62 = ((unint64_t)(v28 + 63) >> 6) - 1;
    int64_t v64 = (unint64_t)(v28 + 63) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v33 = 0;
    unint64_t v66 = 0;
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    while (!v30)
    {
      int64_t v41 = v66 + 1;
      if (__OFADD__(v66, 1)) {
        goto LABEL_83;
      }
      if (v41 < v64)
      {
        unint64_t v42 = *(void *)(v67 + 8 * v41);
        if (v42) {
          goto LABEL_52;
        }
        int64_t v43 = v66 + 2;
        ++v66;
        if (v41 + 1 < v64)
        {
          unint64_t v42 = *(void *)(v67 + 8 * v43);
          if (v42) {
            goto LABEL_55;
          }
          unint64_t v66 = v41 + 1;
          if (v41 + 2 < v64)
          {
            unint64_t v42 = *(void *)(v67 + 8 * (v41 + 2));
            if (v42)
            {
              v41 += 2;
              goto LABEL_52;
            }
            int64_t v43 = v41 + 3;
            unint64_t v66 = v41 + 2;
            if (v41 + 3 < v64)
            {
              unint64_t v42 = *(void *)(v67 + 8 * v43);
              if (!v42)
              {
                while (1)
                {
                  int64_t v41 = v43 + 1;
                  if (__OFADD__(v43, 1)) {
                    goto LABEL_86;
                  }
                  if (v41 >= v64)
                  {
                    unint64_t v66 = v62;
                    goto LABEL_66;
                  }
                  unint64_t v42 = *(void *)(v67 + 8 * v41);
                  ++v43;
                  if (v42) {
                    goto LABEL_52;
                  }
                }
              }
LABEL_55:
              int64_t v41 = v43;
LABEL_52:
              unint64_t v30 = (v42 - 1) & v42;
              unint64_t v36 = __clz(__rbit64(v42)) + (v41 << 6);
              unint64_t v66 = v41;
LABEL_48:
              uint64_t v37 = *(void *)(v3 + 56);
              v38 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v36);
              uint64_t v40 = *v38;
              uint64_t v39 = v38[1];
              *(void *)&long long v77 = v40;
              *((void *)&v77 + 1) = v39;
              outlined init with copy of AnyTrackedValue(v37 + 40 * v36, (uint64_t)v31);
              goto LABEL_67;
            }
          }
        }
      }
LABEL_66:
      unint64_t v30 = 0;
      uint64_t v79 = 0;
      memset(v78, 0, sizeof(v78));
      long long v77 = 0u;
LABEL_67:
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v77, (uint64_t)&v80);
      Swift::UInt v44 = v80;
      if (!v80)
      {
        swift_release();
        swift_release();
        return (uint64_t)v5;
      }
      Swift::UInt v45 = v81;
      outlined init with take of ScrollStateRequest(v32, (uint64_t)&v77);
      if (v33 == 0x8000000000000000) {
        goto LABEL_87;
      }
      if (v33 < 0x40 && ((v68 >> v33) & 1) != 0)
      {
        v46 = v32;
        v47 = v31;
        outlined init with copy of AnyTrackedValue((uint64_t)&v77, (uint64_t)&v75);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v73[0] = v5;
        unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
        uint64_t v51 = v5[2];
        BOOL v52 = (v49 & 1) == 0;
        uint64_t v53 = v51 + v52;
        if (__OFADD__(v51, v52)) {
          goto LABEL_84;
        }
        char v54 = v49;
        if (v5[3] >= v53)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
          unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45);
          if ((v54 & 1) != (v56 & 1)) {
            goto LABEL_88;
          }
          unint64_t v50 = v55;
        }
        uint64_t v5 = (void *)v73[0];
        if (v54)
        {
          uint64_t v34 = *(void *)(v73[0] + 56) + 40 * v50;
          __swift_destroy_boxed_opaque_existential_1(v34);
          outlined init with take of ScrollStateRequest(&v75, v34);
        }
        else
        {
          *(void *)(v73[0] + 8 * (v50 >> 6) + 64) |= 1 << v50;
          v57 = (Swift::UInt *)(v5[6] + 16 * v50);
          Swift::UInt *v57 = v44;
          v57[1] = v45;
          outlined init with take of ScrollStateRequest(&v75, v5[7] + 40 * v50);
          uint64_t v58 = v5[2];
          BOOL v59 = __OFADD__(v58, 1);
          uint64_t v60 = v58 + 1;
          if (v59) {
            goto LABEL_85;
          }
          v5[2] = v60;
        }
        swift_bridgeObjectRelease();
        unint64_t v3 = v69;
        int64_t v31 = v47;
        v32 = v46;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);
      ++v33;
    }
    unint64_t v35 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v36 = v35 | (v66 << 6);
    goto LABEL_48;
  }
  swift_bridgeObjectRetain();
LABEL_38:
  swift_release();
  return v3;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  Swift::UInt v20 = (unint64_t *)result;
  uint64_t v21 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v25) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v25) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      }
      unint64_t v16 = *(void *)(v5 + 8 * v4);
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v25) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
        }
        unint64_t v16 = *(void *)(v5 + 8 * v4);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v10 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    int64_t v11 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    outlined init with copy of AnyTrackedValue(*(void *)(a3 + 56) + 40 * v10, (uint64_t)v24);
    v22[0] = v12;
    v22[1] = v13;
    outlined init with copy of AnyTrackedValue((uint64_t)v24, (uint64_t)v23);
    type metadata accessor for EventFilter<TappableEvent>();
    int64_t v14 = *(uint64_t (**)(unsigned char *))AGGraphGetValue();
    swift_retain();
    LOBYTE(v13) = v14(v23);
    swift_release();
    outlined destroy of (key: EventID, value: EventType)((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v13)
    {
      *(unint64_t *)((char *)v20 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v25) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
  }
  unint64_t v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    int64_t v4 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v4 >= v25) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v5 + 8 * v4);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v32 = 0;
  int64_t v31 = (unint64_t *)result;
  int64_t v4 = 0;
  uint64_t v7 = a3[8];
  uint64_t v5 = a3 + 8;
  uint64_t v6 = v7;
  uint64_t v8 = 1 << *((unsigned char *)v5 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v6;
  uint64_t v34 = v5;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_22:
    unint64_t v16 = (uint64_t *)(a3[6] + 16 * v12);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    outlined init with copy of AnyTrackedValue(a3[7] + 40 * v12, (uint64_t)v41);
    v37[0] = v17;
    v37[1] = v18;
    outlined init with copy of AnyTrackedValue((uint64_t)v41, (uint64_t)v38);
    uint64_t v19 = v39;
    uint64_t v20 = v40;
    __swift_project_boxed_opaque_existential_1(v38, v39);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 24))(&v42, v19, v20);
    uint64_t v21 = v42;
    if (v42)
    {
      uint64_t v22 = *a4;
      swift_retain_n();
      if (v22 != v21)
      {
        unint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 88);
        uint64_t v24 = swift_retain();
        uint64_t v25 = v23(v24);
        swift_retain();
        swift_release_n();
        if (!v25) {
          goto LABEL_4;
        }
        swift_release();
        if (v22 != v25)
        {
          while (1)
          {
            uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 88);
            uint64_t v27 = swift_retain();
            uint64_t v28 = v26(v27);
            swift_retain();
            swift_release_n();
            if (!v28) {
              break;
            }
            swift_release();
            uint64_t v25 = v28;
            if (v22 == v28) {
              goto LABEL_28;
            }
          }
LABEL_4:
          swift_release_n();
          goto LABEL_5;
        }
      }
LABEL_28:
      swift_release_n();
      swift_release();
      outlined destroy of (key: EventID, value: EventType)((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      *(unint64_t *)((char *)v31 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v32++, 1)) {
        goto LABEL_34;
      }
    }
    else
    {
LABEL_5:
      outlined destroy of (key: EventID, value: EventType)((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v13 >= v35) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v31, a2, v32, (uint64_t)a3);
  }
  unint64_t v14 = v34[v13];
  ++v4;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v35) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v31, a2, v32, (uint64_t)a3);
  }
  unint64_t v14 = v34[v4];
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v35) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v31, a2, v32, (uint64_t)a3);
  }
  unint64_t v14 = v34[v4];
  if (v14)
  {
LABEL_21:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v35) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v31, a2, v32, (uint64_t)a3);
  }
  unint64_t v14 = v34[v15];
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v35) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v31, a2, v32, (uint64_t)a3);
    }
    unint64_t v14 = v34[v4];
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t *a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  uint64_t isStackAllocationSafe = outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    outlined retain of LayoutGestureBox.Child((uint64_t)a2);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, (void *)a1, a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    if (v2) {
      swift_willThrow();
    }
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    outlined retain of LayoutGestureBox.Child((uint64_t)a2);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v7, (void *)a1, a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    MEMORY[0x24C527CC0](v11, -1, -1);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
  }
  return v10;
}

uint64_t specialized Dictionary.optimisticFilter(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a1;
  if (*(void *)(a1 + 16) >= 0x41uLL)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized _NativeDictionary.filter(_:)(v4, a2);
    swift_bridgeObjectRelease();
    return v5;
  }
  unint64_t v70 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  outlined retain of LayoutGestureBox.Child((uint64_t)a2);
  unint64_t v9 = 0;
  int64_t v10 = 0;
  int64_t v69 = (unint64_t)(v6 + 63) >> 6;
  unint64_t v71 = 0;
  char v66 = 1;
  char v68 = 1;
  unint64_t v67 = v3;
  if (v8) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_83;
  }
  if (v13 < v69)
  {
    unint64_t v14 = *(void *)(v70 + 8 * v13);
    ++v10;
    if (v14) {
      goto LABEL_22;
    }
    int64_t v10 = v13 + 1;
    if (v13 + 1 < v69)
    {
      unint64_t v14 = *(void *)(v70 + 8 * v10);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v10 = v13 + 2;
      if (v13 + 2 < v69)
      {
        unint64_t v14 = *(void *)(v70 + 8 * v10);
        if (!v14)
        {
          int64_t v15 = v13 + 3;
          if (v15 < v69)
          {
            unint64_t v14 = *(void *)(v70 + 8 * v15);
            int64_t v10 = v15;
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  break;
                }
                if (v10 >= v69) {
                  goto LABEL_35;
                }
                unint64_t v14 = *(void *)(v70 + 8 * v10);
                ++v15;
                if (v14) {
                  goto LABEL_22;
                }
              }
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
            goto LABEL_22;
          }
          goto LABEL_35;
        }
LABEL_22:
        unint64_t v8 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; unint64_t i = v11 | (v10 << 6))
        {
          uint64_t v16 = *(void *)(v3 + 56);
          uint64_t v17 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * i);
          Swift::UInt v19 = v17[1];
          Swift::UInt v84 = *v17;
          Swift::UInt v18 = v84;
          Swift::UInt v85 = v19;
          outlined init with copy of AnyTrackedValue(v16 + 40 * i, (uint64_t)v86);
          *(void *)&long long v81 = v18;
          *((void *)&v81 + 1) = v19;
          outlined init with take of ScrollStateRequest(v86, (uint64_t)v82);
          *(void *)&long long v79 = v18;
          *((void *)&v79 + 1) = v19;
          outlined init with copy of AnyTrackedValue((uint64_t)v82, (uint64_t)v80);
          v75[0] = v18;
          v75[1] = v19;
          outlined init with copy of AnyTrackedValue((uint64_t)v80, (uint64_t)v76);
          uint64_t v20 = v77;
          uint64_t v21 = v78;
          __swift_project_boxed_opaque_existential_1(v76, v77);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 24))(&v74, v20, v21);
          uint64_t v22 = v74;
          if (!v74) {
            goto LABEL_8;
          }
          uint64_t v23 = *a2;
          swift_retain_n();
          if (v23 != v22)
          {
            uint64_t v24 = a2;
            uint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 88);
            uint64_t v26 = swift_retain();
            uint64_t v27 = v25(v26);
            swift_retain();
            swift_release_n();
            if (!v27) {
              goto LABEL_7;
            }
            swift_release();
            if (v23 != v27)
            {
              while (1)
              {
                uint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 88);
                uint64_t v29 = swift_retain();
                uint64_t v30 = v28(v29);
                swift_retain();
                swift_release_n();
                if (!v30) {
                  break;
                }
                swift_release();
                uint64_t v27 = v30;
                if (v23 == v30) {
                  goto LABEL_29;
                }
              }
LABEL_7:
              swift_release_n();
              a2 = v24;
              unint64_t v3 = v67;
LABEL_8:
              outlined destroy of (key: EventID, value: EventType)((uint64_t)v75, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
              outlined destroy of (key: EventID, value: EventType)((uint64_t)&v81, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
              char v68 = 0;
              ++v9;
              if (!v8) {
                goto LABEL_10;
              }
              goto LABEL_9;
            }
LABEL_29:
            a2 = v24;
            unint64_t v3 = v67;
          }
          swift_release_n();
          swift_release();
          outlined destroy of (key: EventID, value: EventType)((uint64_t)v75, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
          outlined destroy of (key: EventID, value: EventType)((uint64_t)&v81, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
          if ((v9 & 0x8000000000000000) != 0) {
            goto LABEL_88;
          }
          char v66 = 0;
          uint64_t v31 = 1 << v9;
          if (v9 >= 0x40) {
            uint64_t v31 = 0;
          }
          v71 |= v31;
          ++v9;
          if (!v8) {
            goto LABEL_10;
          }
LABEL_9:
          unint64_t v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
    }
  }
LABEL_35:
  swift_release();
  if (v66)
  {
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
LABEL_39:
    outlined release of LayoutGestureBox.Child((uint64_t)a2);
    return v3;
  }
  if (v68)
  {
    swift_bridgeObjectRetain();
    goto LABEL_39;
  }
  int64_t v69 = (int64_t)a2;
  uint64_t v32 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v3 + 64);
  int64_t v35 = (uint64_t *)v82;
  a2 = (uint64_t *)v86;
  int64_t v72 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v36 = 0;
  int64_t v73 = 0;
  uint64_t v37 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v34)
    {
      unint64_t v39 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v40 = v39 | (v73 << 6);
LABEL_48:
      uint64_t v41 = *(void *)(v3 + 56);
      uint64_t v42 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v40);
      uint64_t v44 = *v42;
      uint64_t v43 = v42[1];
      *(void *)&long long v81 = v44;
      *((void *)&v81 + 1) = v43;
      outlined init with copy of AnyTrackedValue(v41 + 40 * v40, (uint64_t)v35);
      goto LABEL_67;
    }
    int64_t v45 = v73 + 1;
    if (__OFADD__(v73, 1)) {
      goto LABEL_84;
    }
    if (v45 < v72)
    {
      unint64_t v46 = *(void *)(v70 + 8 * v45);
      if (v46) {
        goto LABEL_52;
      }
      int64_t v47 = v73 + 2;
      ++v73;
      if (v45 + 1 < v72)
      {
        unint64_t v46 = *(void *)(v70 + 8 * v47);
        if (v46) {
          goto LABEL_55;
        }
        int64_t v73 = v45 + 1;
        if (v45 + 2 < v72)
        {
          unint64_t v46 = *(void *)(v70 + 8 * (v45 + 2));
          if (v46)
          {
            v45 += 2;
            goto LABEL_52;
          }
          int64_t v47 = v45 + 3;
          int64_t v73 = v45 + 2;
          if (v45 + 3 < v72) {
            break;
          }
        }
      }
    }
LABEL_66:
    unint64_t v34 = 0;
    uint64_t v83 = 0;
    memset(v82, 0, sizeof(v82));
    long long v81 = 0u;
LABEL_67:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v81, (uint64_t)&v84);
    Swift::UInt v48 = v84;
    if (!v84)
    {
      swift_release();
      outlined release of LayoutGestureBox.Child(v69);
      return (uint64_t)v37;
    }
    Swift::UInt v49 = v85;
    outlined init with take of ScrollStateRequest((long long *)a2, (uint64_t)&v81);
    if (v36 == 0x8000000000000000)
    {
      outlined release of LayoutGestureBox.Child(v69);
      uint64_t v65 = v69;
      goto LABEL_90;
    }
    if (v36 < 0x40 && ((v71 >> v36) & 1) != 0)
    {
      unint64_t v50 = a2;
      a2 = v35;
      outlined init with copy of AnyTrackedValue((uint64_t)&v81, (uint64_t)&v79);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v75[0] = v37;
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
      uint64_t v54 = v37[2];
      BOOL v55 = (v52 & 1) == 0;
      uint64_t v56 = v54 + v55;
      if (__OFADD__(v54, v55)) {
        goto LABEL_85;
      }
      char v57 = v52;
      if (v37[3] >= v56)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, isUniquelyReferenced_nonNull_native);
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
        if ((v57 & 1) != (v59 & 1)) {
          goto LABEL_91;
        }
        unint64_t v53 = v58;
      }
      unint64_t v3 = v67;
      uint64_t v37 = (void *)v75[0];
      if (v57)
      {
        uint64_t v38 = *(void *)(v75[0] + 56) + 40 * v53;
        __swift_destroy_boxed_opaque_existential_1(v38);
        outlined init with take of ScrollStateRequest(&v79, v38);
      }
      else
      {
        *(void *)(v75[0] + 8 * (v53 >> 6) + 64) |= 1 << v53;
        uint64_t v60 = (Swift::UInt *)(v37[6] + 16 * v53);
        *uint64_t v60 = v48;
        v60[1] = v49;
        outlined init with take of ScrollStateRequest(&v79, v37[7] + 40 * v53);
        uint64_t v61 = v37[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_86;
        }
        void v37[2] = v63;
      }
      swift_bridgeObjectRelease();
      int64_t v35 = a2;
      a2 = v50;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
    ++v36;
  }
  unint64_t v46 = *(void *)(v70 + 8 * v47);
  if (v46)
  {
LABEL_55:
    int64_t v45 = v47;
LABEL_52:
    unint64_t v34 = (v46 - 1) & v46;
    unint64_t v40 = __clz(__rbit64(v46)) + (v45 << 6);
    int64_t v73 = v45;
    goto LABEL_48;
  }
  while (1)
  {
    int64_t v45 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v45 >= v72)
    {
      int64_t v73 = v72 - 1;
      goto LABEL_66;
    }
    unint64_t v46 = *(void *)(v70 + 8 * v45);
    ++v47;
    if (v46) {
      goto LABEL_52;
    }
  }
LABEL_87:
  __break(1u);
LABEL_88:
  outlined release of LayoutGestureBox.Child((uint64_t)a2);
  uint64_t v65 = (uint64_t)a2;
LABEL_90:
  outlined release of LayoutGestureBox.Child(v65);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_91:
  outlined release of LayoutGestureBox.Child(v69);
  outlined release of LayoutGestureBox.Child(v69);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined release of LayoutGestureBox.Child(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 56);
  unint64_t v17 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 80);
  unint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 104);
  long long v11 = *(_OWORD *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 112);
  long long v9 = *(_OWORD *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  outlined copy of LayoutGestureBox.Child.DebugData?(v17, v16, v15, v14, v3, v4, v5, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v6, v7, (uint64_t (*)(void))outlined consume of LayoutGestureBox.Child.DebugData);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t outlined copy of LayoutGestureBox.Child.DebugData?(unint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t (*a19)(void))
{
  if (HIDWORD(a4)
    || result < 0xFFFFFFFF00000000
    || a3 & 0xFFFFFC00 | a2 & 0xF000000000000007
    || a17 > 3
    || (a18 & 0xF000000000000007) != 0)
  {
    return a19();
  }
  return result;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if ((a18 & 0x8000000000000000) == 0)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

void type metadata accessor for (key: EventID, value: EventType)?()
{
  if (!lazy cache variable for type metadata for (key: EventID, value: EventType)?)
  {
    type metadata accessor for (key: EventID, value: EventType)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?);
    }
  }
}

void type metadata accessor for EventFilter<TappableEvent>()
{
  if (!lazy cache variable for type metadata for EventFilter<TappableEvent>)
  {
    unint64_t v0 = type metadata accessor for EventFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>);
    }
  }
}

uint64_t outlined destroy of (key: EventID, value: EventType)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ForwardedEventDispatcher?()
{
  if (!lazy cache variable for type metadata for ForwardedEventDispatcher?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for ForwardedEventDispatcher);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForwardedEventDispatcher?);
    }
  }
}

uint64_t Group.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Group.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Group.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Group.init(_content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static Group<A>._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  return (*(uint64_t (**)(long long *))(a3 + 40))(&v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <A> Group<A>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t DepthTrait.init(traits:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static _ViewListOutputs.nonEmptyParentViewList(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v35[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 28);
  int v6 = *(_DWORD *)(a1 + 36);
  int v19 = *(_DWORD *)(a1 + 32);
  int v20 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  LODWORD(v22) = *(_DWORD *)(a1 + 64);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type EmptyViewTrait and conformance EmptyViewTrait();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v16 = Attribute.init<A>(body:value:flags:update:)();
  if (v8)
  {
    uint64_t v22 = v8;
    specialized Set._Variant.insert(_:)(v35, (uint64_t)&type metadata for IsEmptyViewTraitKey);
    v9 &= 1u;
  }
  specialized _GraphInputs.intern<A>(_:id:)(0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v10 = AGCreateWeakAttribute();
  int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  type metadata accessor for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>();
  v35[3] = v13;
  v35[4] = (uint64_t)&protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  v35[0] = v14;
  *(_DWORD *)(v14 + 16) = v11;
  *(_DWORD *)(v14 + 20) = v12;
  *(void *)(v14 + 24) = v2;
  *(_DWORD *)(v14 + 32) = v20;
  *(void *)(v14 + 40) = v3;
  *(_DWORD *)(v14 + 48) = v4;
  *(_DWORD *)(v14 + 52) = v5;
  *(_DWORD *)(v14 + 56) = v19;
  *(_DWORD *)(v14 + 60) = v6;
  *(void *)(v14 + 64) = v7;
  uint64_t v22 = v2;
  int v23 = v20;
  uint64_t v24 = v3;
  int v25 = v4;
  int v26 = v5;
  int v27 = v19;
  int v28 = v6;
  uint64_t v29 = v7;
  uint64_t v30 = v18;
  uint64_t v31 = v17;
  int v32 = v16;
  uint64_t v33 = v8;
  char v34 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v35, &v22, 1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance SectionedTrait@<X0>(void *a1@<X8>)
{
  return SectionedTrait.value.getter(*v1, a1);
}

uint64_t EmptyViewTrait.value.getter@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == a1)
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
      }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v3);
      }
      type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsEmptyViewTraitKey>, (uint64_t)&type metadata for IsEmptyViewTraitKey, (uint64_t)&protocol witness table for IsEmptyViewTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      uint64_t v17 = v12;
      uint64_t v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    char v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsEmptyViewTraitKey) {
      break;
    }
    ++v6;
    v5 += 5;
    if (v4 == v6) {
      goto LABEL_9;
    }
  }
  LOBYTE(v16) = 1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if (v6 < v3[2])
  {
    uint64_t v14 = v3[v5 + 7];
    uint64_t v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x263F8D4F8], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance EmptyViewTrait@<X0>(void *a1@<X8>)
{
  return EmptyViewTrait.value.getter(*v1, a1);
}

uint64_t SectionHeaderTrait.value.getter@<X0>(void *a1@<X8>)
{
  if (*v1 == *MEMORY[0x263F288F8])
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
      }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v3);
      }
      type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionHeaderTraitKey>, (uint64_t)&type metadata for IsSectionHeaderTraitKey, (uint64_t)&protocol witness table for IsSectionHeaderTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      uint64_t v17 = v12;
      uint64_t v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a1 = v3;
      return result;
    }
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    char v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionHeaderTraitKey) {
      break;
    }
    ++v6;
    v5 += 5;
    if (v4 == v6) {
      goto LABEL_9;
    }
  }
  LOBYTE(v16) = 1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if (v6 < v3[2])
  {
    uint64_t v14 = v3[v5 + 7];
    uint64_t v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x263F8D4F8], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t SectionFooterTrait.value.getter@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == a1)
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v4 = v3[2];
    if (!v4)
    {
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
      }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v3);
      }
      type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<IsSectionFooterTraitKey>, (uint64_t)&type metadata for IsSectionFooterTraitKey, (uint64_t)&protocol witness table for IsSectionFooterTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
      uint64_t v17 = v12;
      uint64_t v18 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
      LOBYTE(v16) = 1;
      v3[2] = v11 + 1;
      uint64_t result = outlined init with take of ScrollStateRequest(&v16, (uint64_t)&v3[5 * v11 + 4]);
LABEL_17:
      *a2 = v3;
      return result;
    }
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    if (v6 >= v3[2])
    {
      __break(1u);
      goto LABEL_19;
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v3[v5 + 4], (uint64_t)&v16);
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, v17);
    char v9 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v8[1])(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
    if (v9 == &type metadata for IsSectionFooterTraitKey) {
      break;
    }
    ++v6;
    v5 += 5;
    if (v4 == v6) {
      goto LABEL_9;
    }
  }
  LOBYTE(v16) = 1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if (v6 < v3[2])
  {
    uint64_t v14 = v3[v5 + 7];
    uint64_t v15 = v3[v5 + 8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v5 + 4], v14);
    uint64_t result = (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v15 + 24))(&v16, MEMORY[0x263F8D4F8], v14, v15);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionFooterTrait@<X0>(void *a1@<X8>)
{
  return SectionFooterTrait.value.getter(*v1, a1);
}

uint64_t static DepthTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*ViewTraitCollection.groupDepth.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = (uint64_t)v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return ViewTraitCollection.groupDepth.modify;
}

uint64_t ViewTraitCollection.groupDepth.modify(uint64_t *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t static IsSectionedTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*ViewTraitCollection.isSectioned.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectioned.modify;
}

uint64_t ViewTraitCollection.isSectioned.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t View.definesSection()(uint64_t a1)
{
  char v2 = 1;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for IsSectionedTraitKey, (uint64_t)&v2, a1);
}

uint64_t static IsEmptyViewTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*ViewTraitCollection.isEmptyView.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isEmptyView.modify;
}

uint64_t ViewTraitCollection.isEmptyView.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t static IsSectionHeaderTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*ViewTraitCollection.isSectionHeader.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectionHeader.modify;
}

uint64_t ViewTraitCollection.isSectionHeader.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t static IsSectionFooterTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void, uint64_t)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  LOBYTE(a2) = a2(0, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = a2 & 1;
  return result;
}

uint64_t (*ViewTraitCollection.isSectionFooter.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.isSectionFooter.modify;
}

uint64_t ViewTraitCollection.isSectionFooter.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

double protocol witness for static Rule.initialValue.getter in conformance MakeSection@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MakeSection@<X0>(uint64_t *a1@<X8>)
{
  return MakeSection.value.getter(*(void *)v1, *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 12) << 32), a1);
}

uint64_t specialized GraphHost.intern<A>(_:for:id:)(Swift::UInt a1, char a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v17 = &type metadata for EmptyViewList;
  uint64_t v18 = &protocol witness table for EmptyViewList;
  swift_beginAccess();
  uint64_t v6 = *(void *)(a3 + 120);
  if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
  }
  else
  {
    swift_beginAccess();
    id v10 = *(id *)(a3 + 24);
    AGGraphClearUpdate();
    id v11 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    outlined init with copy of AnyTrackedValue((uint64_t)v16, (uint64_t)v15);
    type metadata accessor for ViewList();
    type metadata accessor for External<ViewList>();
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(a3 + 120);
    *(void *)(a3 + 120) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)(a3 + 120) = v14;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t specialized _GraphInputs.intern<A>(_:id:)(char a1)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    type metadata accessor for _UnaryViewAdaptor<EmptyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
    uint64_t v6 = specialized GraphHost.intern<A>(_:for:id:)(v5, a1);
    swift_release();
    return v6;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    Swift::UInt v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for _GeometryGroupEffect, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t Context;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v6 = Context;
    swift_retain();

    unint64_t v7 = type metadata accessor for ViewList();
    char v8 = specialized GraphHost.intern<A>(_:for:id:)(v7, a1, v6);
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _GraphInputs.intern<A>(_:id:)(char a1, char a2)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v4 = (id)AGSubgraphGetCurrent();
    if (!v4) {
      goto LABEL_8;
    }
    Swift::UInt v5 = v4;
    id v6 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v7 = specialized GraphHost.intern<A>(_:for:id:)(a1 & 1, MEMORY[0x263F8D4F8], a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_245BF9374()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type SectionFooterTrait and conformance SectionFooterTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait;
  if (!lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionFooterTrait and conformance SectionFooterTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait;
  if (!lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionHeaderTrait and conformance SectionHeaderTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyViewTrait and conformance EmptyViewTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait;
  if (!lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyViewTrait and conformance EmptyViewTrait);
  }
  return result;
}

void type metadata accessor for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>()
{
  if (!lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>)
  {
    type metadata accessor for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>();
    unint64_t v0 = type metadata accessor for UnaryElements();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>>);
    }
  }
}

void type metadata accessor for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>()
{
  if (!lazy cache variable for type metadata for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for _UnaryViewAdaptor<EmptyView>(255, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, (uint64_t)&type metadata for EmptyView, (uint64_t)&protocol witness table for EmptyView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UnaryViewAdaptor);
    unint64_t v0 = type metadata accessor for TypedUnaryViewGenerator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedUnaryViewGenerator<_UnaryViewAdaptor<EmptyView>>);
    }
  }
}

uint64_t sub_245BF95A4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245BF95F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_245BF9644(uint64_t *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245BF966C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_245BF9698(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245BF96C0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_245BF96EC(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245BF9714@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_245BF9740(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245BF9768@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for ViewTraitCollection.isSectioned : ViewTraitCollection(a1, (uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:), a2);
}

uint64_t sub_245BF9794(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for DepthTrait()
{
  return &type metadata for DepthTrait;
}

ValueMetadata *type metadata accessor for SectionHeaderTrait()
{
  return &type metadata for SectionHeaderTrait;
}

ValueMetadata *type metadata accessor for DepthTraitKey()
{
  return &type metadata for DepthTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionedTraitKey()
{
  return &type metadata for IsSectionedTraitKey;
}

ValueMetadata *type metadata accessor for IsEmptyViewTraitKey()
{
  return &type metadata for IsEmptyViewTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionHeaderTraitKey()
{
  return &type metadata for IsSectionHeaderTraitKey;
}

ValueMetadata *type metadata accessor for IsSectionFooterTraitKey()
{
  return &type metadata for IsSectionFooterTraitKey;
}

uint64_t sub_245BF9864()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for EmptyViewTrait()
{
  return &unk_26FA4C2A0;
}

void *type metadata accessor for SectionedTrait()
{
  return &unk_26FA4DDD8;
}

void *type metadata accessor for SectionFooterTrait()
{
  return &unk_26FA5C278;
}

uint64_t assignWithCopy for MakeSection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for MakeSection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

void *type metadata accessor for MakeSection()
{
  return &unk_26FA433B0;
}

ValueMetadata *type metadata accessor for GroupContainer()
{
  return &type metadata for GroupContainer;
}

uint64_t sub_245BF99FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t specialized static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    swift_retain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
  }
  int v4 = *(_DWORD *)(a1 + 80);
  uint64_t v5 = *(void *)a1;
  int v18 = *(_DWORD *)(a1 + 8);
  int v20 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v19 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v26 = *(_OWORD *)(a1 + 32);
  int v21 = v26;
  long long v27 = v10;
  long long v28 = *(_OWORD *)(a1 + 64);
  int v29 = v4;
  long long v11 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v11;
  swift_beginAccess();
  int v32 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  uint64_t v12 = MEMORY[0x263F8D4F8];
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, &lazy cache variable for type metadata for ChildEnvironment<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(&lazy protocol witness table cache variable for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>, &lazy cache variable for type metadata for ChildEnvironment<Bool>, v12);
  int v13 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v14 = MEMORY[0x263F8EE78];
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v14;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_WORD *)(v16 + 80) = 256;
  *(void *)(v16 + 88) = v15;
  swift_release();
  uint64_t v30 = v5;
  int v31 = v18;
  uint64_t v33 = v16;
  uint64_t v34 = v8;
  int v35 = 32;
  int v36 = v20;
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  long long v39 = v19;
  uint64_t v40 = v9;
  int v41 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)&v30, a2, a3);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  LODWORD(v26) = v21;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v25);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(a1);
  }
  return swift_release();
}

uint64_t View.privacySensitive(_:)(char a1, uint64_t a2)
{
  char v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for PrivacyRedactionViewModifier);
}

double static PrivacyRedactionViewModifier._makeView(modifier:inputs:body:)@<D0>(long long *a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  v27[1] = *MEMORY[0x263EF8340];
  long long v8 = a1[3];
  long long v22 = a1[2];
  long long v23 = v8;
  long long v24 = a1[4];
  int v25 = *((_DWORD *)a1 + 20);
  long long v9 = a1[1];
  long long v20 = *a1;
  long long v21 = v9;
  uint64_t KeyPath = swift_getKeyPath();
  long long v11 = a1[1];
  v26[0] = *a1;
  v26[1] = v11;
  v26[2] = a1[2];
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v26);
  unsigned int v12 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v26);
  swift_release();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v14 = *(void *)&v26[0];
  v27[0] = *(void *)&v26[0];
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of _ViewInputs((uint64_t)&v20);
  outlined retain of ViewTransform((uint64_t)v27);
  uint64_t v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    int v16 = *(unsigned __int8 *)(v15 + 72);
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    outlined release of _ViewInputs((uint64_t)&v20);
    if (v16 == 1)
    {
      *(void *)&v18[0] = __PAIR64__(v12, OffsetAttribute2);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>();
      lazy protocol witness table accessor for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild();
      Attribute.init<A>(body:value:flags:update:)();
      specialized static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)&v20, a2, (uint64_t)a4);
      return result;
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    outlined release of _ViewInputs((uint64_t)&v20);
  }
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of _ViewInputs((uint64_t)&v20);
  outlined retain of ViewTransform((uint64_t)v27);
  if (!specialized find<A>(_:key:)(v14) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  outlined release of ViewTransform((uint64_t)v27);
  outlined release of _GraphInputs((uint64_t)v26);
  outlined release of _ViewInputs((uint64_t)&v20);
  v18[2] = v22;
  v18[3] = v23;
  v18[4] = v24;
  int v19 = v25;
  v18[0] = v20;
  v18[1] = v21;
  return static PrivacyRedactionViewModifier.makeChild<A>(modifier:type:body:sensitive:inputs:reasons:)((uint64_t)a2, a3, OffsetAttribute2, (uint64_t)v18, v12, a4);
}

uint64_t _ViewInputs.privacyReductionAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    char v3 = (long long *)(v2 + 72);
  }
  else
  {
    char v3 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

double static PrivacyRedactionViewModifier.makeChild<A>(modifier:type:body:sensitive:inputs:reasons:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unsigned int a3@<W4>, uint64_t a4@<X5>, unsigned int a5@<W6>, double *a6@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)a4;
  int v9 = *(_DWORD *)(a4 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  int v27 = *(_DWORD *)(a4 + 28);
  int v28 = *(_DWORD *)(a4 + 24);
  int v31 = *(_DWORD *)(a4 + 32);
  uint64_t v11 = *(void *)(a4 + 40);
  uint64_t v12 = *(void *)(a4 + 48);
  int v25 = *(_DWORD *)(a4 + 56);
  int v26 = *(_DWORD *)(a4 + 36);
  int v23 = *(_DWORD *)(a4 + 64);
  int v24 = *(_DWORD *)(a4 + 60);
  int v21 = *(_DWORD *)(a4 + 72);
  int v22 = *(_DWORD *)(a4 + 68);
  int v19 = *(_DWORD *)(a4 + 80);
  int v20 = *(_DWORD *)(a4 + 76);
  uint64_t v13 = type metadata accessor for PrivacyRedactionViewModifier.Transform();
  unint64_t v53 = __PAIR64__(a5, a3);
  uint64_t v14 = type metadata accessor for PrivacyRedactionViewModifier.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v53, v13, v14, WitnessTable, &v36);
  int v16 = v36;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v53 = v8;
  uint64_t v55 = v10;
  int v54 = v9;
  int v56 = v28;
  int v57 = v27;
  uint64_t v60 = v11;
  uint64_t v61 = v12;
  int v58 = 0;
  int v59 = v26;
  int v62 = v25;
  int v63 = v24;
  int v64 = v23;
  int v65 = v22;
  int v66 = v21;
  int v67 = v20;
  int v68 = v19;
  int v33 = v16;
  unint64_t v37 = v8;
  int v38 = v9;
  uint64_t v39 = v10;
  int v40 = v28;
  int v41 = v27;
  int v42 = 0;
  int v43 = v26;
  uint64_t v44 = v11;
  uint64_t v45 = v12;
  int v46 = v25;
  int v47 = v24;
  int v48 = v23;
  int v49 = v22;
  int v50 = v21;
  int v51 = v20;
  int v52 = v19;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_getWitnessTable();
  static ViewModifier._makeView(modifier:inputs:body:)(&v33, (uint64_t)&v37, a1, a2, v13, &v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v58 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v34, (uint64_t)&v53);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a6 = v34;
  double result = v35;
  a6[1] = v35;
  return result;
}

uint64_t *PrivacyRedactionViewModifier.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)AGGraphGetValue();
  double result = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *result;
  *(unsigned char *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance PrivacyRedactionViewModifier.Child<A>@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 2;
  *a1 = xmmword_2461BAA80;
  return result;
}

uint64_t *protocol witness for Rule.value.getter in conformance PrivacyRedactionViewModifier.Child<A>@<X0>(uint64_t a1@<X8>)
{
  return PrivacyRedactionViewModifier.Child.value.getter(a1);
}

uint64_t PrivacyRedactionViewModifier.Transform.PrivacyEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = (result >> 9) & 0x80 | (4 * (result & 1));
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 2;
  return result;
}

uint64_t PrivacyRedactionViewModifier.Transform.PrivacyEffect.scrapeableContent.getter@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = 0x9000000000000000;
  if ((result & 0x10100) == 0) {
    unint64_t v2 = 0xF000000000000007;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(uint64_t a1@<X8>)
{
  if (v1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return PrivacyRedactionViewModifier.Transform.PrivacyEffect.effectValue(size:)(v3 | *v1 | v2, a1);
}

uint64_t protocol witness for static _RendererEffect.isScrapeable.getter in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
}

uint64_t protocol witness for _RendererEffect.scrapeableContent.getter in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(unint64_t *a1@<X8>)
{
  if (v1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return PrivacyRedactionViewModifier.Transform.PrivacyEffect.scrapeableContent.getter(v3 | *v1 | v2, a1);
}

uint64_t PrivacyRedactionViewModifier.Transform.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v46 = *(void *)(a1 + 24);
  uint64_t v48 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v53 = *(uint64_t **)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v51 = (char *)&v39 - v3;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v39 = type metadata accessor for PrivacyRedactionViewModifier.Transform.PrivacyEffect();
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v56 = (char *)&v39 - v7;
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for Optional();
  v92 = &protocol witness table for _ViewModifier_Content<A>;
  v93 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v90 = WitnessTable;
  v91 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  uint64_t v88 = swift_getWitnessTable();
  v89 = &protocol witness table for _TraitWritingModifier<A>;
  uint64_t v87 = swift_getWitnessTable();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v50 = v8;
  uint64_t v41 = v10;
  type metadata accessor for _OverlayModifier();
  uint64_t v54 = v6;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v42 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v43 = (char *)&v39 - v14;
  int v15 = *v44;
  uint64_t v16 = *((void *)v44 + 1);
  View.unredacted()(v4, (uint64_t)&protocol witness table for _ViewModifier_Content<A>);
  uint64_t v75 = v81;
  uint64_t v76 = v82;
  v80[0] = v15;
  v80[1] = v15 & (v16 >> 1);
  v80[2] = (v16 & 8) != 0;
  if ((v15 & (v16 >> 1)) != 0) {
    double v17 = 0.0;
  }
  else {
    double v17 = 1.0;
  }
  View.modifier<A>(_:)(v80, v5, v39);
  swift_release();
  uint64_t v75 = v67;
  uint64_t v76 = v68;
  char v77 = v69;
  char v78 = v70;
  char v79 = v71;
  uint64_t v73 = WitnessTable;
  uint64_t v74 = &protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect;
  uint64_t v18 = v40;
  uint64_t v19 = swift_getWitnessTable();
  View.opacity(_:)(v18, v17);
  swift_release();
  uint64_t v67 = v81;
  uint64_t v68 = v82;
  char v69 = v83;
  char v70 = v84;
  char v71 = v85;
  uint64_t v72 = v86;
  int v20 = v51;
  uint64_t v21 = v48;
  uint64_t v22 = v46;
  (*(void (**)(void))(v46 + 24))(v15 & (v16 >> 1));
  uint64_t v65 = v19;
  int v66 = &protocol witness table for _OpacityEffect;
  uint64_t v23 = v22;
  uint64_t v24 = v21;
  uint64_t v25 = v45;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v25;
  uint64_t v28 = AssociatedTypeWitness;
  View.modifier<A>(_:)(v20, v27, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t))v53[1])(v20, v28);
  swift_release();
  unint64_t v53 = &v39;
  uint64_t v57 = v24;
  uint64_t v58 = v23;
  char v59 = v15;
  uint64_t v60 = v16;
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  long long v29 = static Alignment.center;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v63 = v26;
  uint64_t v64 = AssociatedConformanceWitness;
  uint64_t v31 = v54;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v42;
  uint64_t v34 = v56;
  View.overlay<A>(alignment:content:)(v29, *((uint64_t *)&v29 + 1), (void (*)(double))partial apply for closure #1 in PrivacyRedactionViewModifier.Transform.body(content:), v31, v50, v32, v42);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v31);
  uint64_t v61 = v32;
  int v62 = &protocol witness table for _OverlayModifier<A>;
  uint64_t v35 = swift_getWitnessTable();
  int v36 = v43;
  static ViewBuilder.buildExpression<A>(_:)(v33, v11, v35);
  unint64_t v37 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v37(v33, v11);
  static ViewBuilder.buildExpression<A>(_:)(v36, v11, v35);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v11);
}

uint64_t closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)(char a1, char a2)
{
  type metadata accessor for PrivacyRedactionViewModifier.Transform();
  if (a2 & 2) != 0 && (a1)
  {
    char v4 = a1 & 1;
    uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
    *(void *)&long long v54 = 2;
    swift_getWitnessTable();
    uint64_t v6 = type metadata accessor for _ViewModifier_Content();
    View.environment<A>(_:_:)(KeyPath, (uint64_t)&v54, v6, (uint64_t)&protocol witness table for _ViewModifier_Content<A>);
    swift_release();
    long long v30 = v51;
    uint64_t v7 = (uint64_t *)swift_getKeyPath();
    LOBYTE(v24) = v4;
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    uint64_t v8 = type metadata accessor for ModifiedContent();
    int v36 = &protocol witness table for _ViewModifier_Content<A>;
    unint64_t v37 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    uint64_t WitnessTable = swift_getWitnessTable();
    View.environment<A>(_:_:)(v7, (uint64_t)&v24, v8, WitnessTable);
    swift_release();
    swift_release();
    long long v30 = v54;
    uint64_t v31 = v55;
    unsigned __int8 v32 = v56;
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    uint64_t v10 = type metadata accessor for ModifiedContent();
    uint64_t v34 = WitnessTable;
    uint64_t v35 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    uint64_t v11 = swift_getWitnessTable();
    unint64_t v12 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
    View.transition<A>(_:)(v12, v10);
    swift_release();
    swift_release();
    long long v30 = v51;
    uint64_t v31 = v52;
    unsigned __int8 v32 = BYTE8(v52);
    uint64_t v33 = v53;
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
    uint64_t v13 = type metadata accessor for ModifiedContent();
    uint64_t v28 = v11;
    long long v29 = &protocol witness table for _TraitWritingModifier<A>;
    uint64_t v14 = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(&v30, v13, v14);
    swift_release();
    swift_release();
    swift_release();
    long long v51 = v54;
    *(void *)&long long v52 = v55;
    BYTE8(v52) = v56;
    uint64_t v53 = v57;
    static ViewBuilder.buildExpression<A>(_:)(&v51, v13, v14);
    swift_release();
    swift_release();
    swift_release();
    long long v24 = v30;
    uint64_t v25 = v31;
    uint64_t v26 = v32;
    uint64_t v27 = v33;
    static ViewBuilder.buildIf<A>(_:)((uint64_t)&v24, (uint64_t)&v51);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v16 = *((void *)&v51 + 1);
    uint64_t v15 = v51;
    uint64_t v18 = *((void *)&v52 + 1);
    uint64_t v17 = v52;
    uint64_t v19 = v53;
  }
  else
  {
    uint64_t v53 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    swift_getWitnessTable();
    type metadata accessor for _ViewModifier_Content();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    type metadata accessor for ModifiedContent();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    type metadata accessor for ModifiedContent();
    type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
    type metadata accessor for ModifiedContent();
    int v49 = &protocol witness table for _ViewModifier_Content<A>;
    uint64_t v50 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    uint64_t v47 = swift_getWitnessTable();
    uint64_t v48 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
    uint64_t v45 = swift_getWitnessTable();
    uint64_t v46 = &protocol witness table for _TraitWritingModifier<A>;
    swift_getWitnessTable();
    static ViewBuilder.buildIf<A>(_:)((uint64_t)&v51, (uint64_t)&v54);
    uint64_t v16 = *((void *)&v54 + 1);
    uint64_t v15 = v54;
    uint64_t v17 = v55;
    uint64_t v18 = v56;
    uint64_t v19 = v57;
  }
  uint64_t v23 = v15;
  *(void *)&long long v54 = v15;
  *((void *)&v54 + 1) = v16;
  uint64_t v55 = v17;
  uint64_t v56 = v18;
  uint64_t v57 = v19;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<TransitionTraitKey>();
  type metadata accessor for ModifiedContent();
  uint64_t v20 = type metadata accessor for Optional();
  int v43 = &protocol witness table for _ViewModifier_Content<A>;
  uint64_t v44 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = &protocol witness table for _TraitWritingModifier<A>;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v21 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v54, v20, v21);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PrivacyRedactionViewModifier.Transform<A>>, _EnvironmentKeyWritingModifier<RedactionReasons>>, _EnvironmentKeyWritingModifier<Bool>>, _TraitWritingModifier<TransitionTraitKey>>?<A>(v23);
}

uint64_t EnvironmentValues.sensitiveContent.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.sensitiveContent : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.sensitiveContent : EnvironmentValues(char *a1)
{
  return EnvironmentValues.sensitiveContent.setter(*a1);
}

uint64_t EnvironmentValues.sensitiveContent.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

char *PrivacyRedactionViewModifier.WidgetAuxiliaryChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = *(void *)AGGraphGetValue();
  if ((v3 & 2) != 0 && *(unsigned char *)AGGraphGetValue() == 1) {
    uint64_t v3 = 2;
  }
  uint64_t v4 = swift_getKeyPath();
  uint64_t result = (char *)AGGraphGetValue();
  char v6 = *result;
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

char *protocol witness for Rule.value.getter in conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild@<X0>(uint64_t a1@<X8>)
{
  return PrivacyRedactionViewModifier.WidgetAuxiliaryChild.value.getter(a1);
}

uint64_t _GraphInputs.privacyReductionAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (long long *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.privacyReductionAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.privacyReductionAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.privacyReductionAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.privacyReductionAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.privacyReductionAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    char v6 = (long long *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    char v6 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    uint64_t v7 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.privacyReductionAccessibilityProvider.modify;
}

void _GraphInputs.privacyReductionAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.privacyReductionAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.privacyReductionAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_ViewInputs.privacyReductionAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    char v6 = (long long *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    char v6 = &static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue;
    uint64_t v7 = (uint64_t *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.privacyReductionAccessibilityProvider.modify;
}

void (*EnvironmentValues.sensitiveContent.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.sensitiveContent.modify;
}

void EnvironmentValues.sensitiveContent.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t sub_245BFBD90(char *a1)
{
  return EnvironmentValues.sensitiveContent.setter(*a1);
}

uint64_t dispatch thunk of static PrivacyReductionAccessibilityProvider.makeModifier(shouldRedact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_245BFBDCC()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for PrivacyRedactionViewModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BFBEFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivacyRedactionViewModifier()
{
  return &type metadata for PrivacyRedactionViewModifier;
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    AGSubgraphBeginTreeElement();
  }
  int v4 = *(_DWORD *)(a1 + 80);
  uint64_t v5 = *(void *)a1;
  int v18 = *(_DWORD *)(a1 + 8);
  int v20 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v19 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v38 = *(_OWORD *)(a1 + 32);
  int v21 = v38;
  long long v39 = v10;
  long long v40 = *(_OWORD *)(a1 + 64);
  int v41 = v4;
  long long v11 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v11;
  LODWORD(v38) = 0;
  swift_beginAccess();
  int v27 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, &lazy cache variable for type metadata for ChildEnvironment<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(&lazy protocol witness table cache variable for type ChildEnvironment<RedactionReasons> and conformance ChildEnvironment<A>, &lazy cache variable for type metadata for ChildEnvironment<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons);
  int v12 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(void *)(v15 + 88) = v14;
  swift_release();
  uint64_t v25 = v5;
  int v26 = v18;
  uint64_t v28 = v15;
  uint64_t v29 = v8;
  int v30 = 32;
  int v31 = v20;
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  long long v34 = v19;
  uint64_t v35 = v9;
  int v36 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a2(v16, &v25);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  LODWORD(v38) = v21;
  if ((ShouldRecordTree & 1) == 0) {
    return outlined release of _ViewInputs(a1);
  }
  specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v37);
  AGSubgraphEndTreeElement();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_EnvironmentKeyWritingModifier<RedactionReasons>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild()
{
  unint64_t result = lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild;
  if (!lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrivacyRedactionViewModifier.WidgetAuxiliaryChild and conformance PrivacyRedactionViewModifier.WidgetAuxiliaryChild);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ChildEnvironment<Bool> and conformance ChildEnvironment<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(255, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for ChildEnvironment);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for EmptyPrivacyReductionAccessibilityProvider()
{
  return &type metadata for EmptyPrivacyReductionAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SensitiveContentKey()
{
  return &type metadata for SensitiveContentKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.PrivacyReductionAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.PrivacyReductionAccessibilityProviderKey;
}

uint64_t getEnumTagSinglePayload for PrivacyRedactionViewModifier.Transform(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PrivacyRedactionViewModifier.Transform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for PrivacyRedactionViewModifier.WidgetAuxiliaryChild()
{
  return &unk_26FA70B50;
}

_UNKNOWN **associated type witness table accessor for PrivacyReductionAccessibilityProvider.Modifier : ViewModifier in EmptyPrivacyReductionAccessibilityProvider()
{
  return &protocol witness table for EmptyModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PrivacyRedactionViewModifier.Transform<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in PrivacyRedactionViewModifier.Child<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PrivacyRedactionViewModifier.Transform.PrivacyEffect()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _TraitWritingModifier<TransitionTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>);
    }
  }
}

uint64_t partial apply for closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)()
{
  return closure #1 in PrivacyRedactionViewModifier.Transform.body(content:)(*(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PrivacyRedactionViewModifier.Transform<A>>, _EnvironmentKeyWritingModifier<RedactionReasons>>, _EnvironmentKeyWritingModifier<Bool>>, _TraitWritingModifier<TransitionTraitKey>>?<A>(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_245BFC680()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void _ContrastEffect.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_ContrastEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ContrastEffect.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*_ContrastEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _ContrastEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 9;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245BFCA84()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

BOOL static _ContrastEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ContrastEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 9;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance _ContrastEffect(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ContrastEffect(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

uint64_t View.contrast(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _ContrastEffect);
}

_UNKNOWN **associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ContrastEffect()
{
  return &protocol witness table for Double;
}

double sub_245BFCBE8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245BFCBF4(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _ContrastEffect()
{
  return &type metadata for _ContrastEffect;
}

uint64_t sub_245BFCC10()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of EventGraphHost.eventBindingManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventGraphHost.responderNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventGraphHost.focusedResponder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EventGraphHost.nextGestureUpdateTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EventGraphHost.setInheritedPhase(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of EventGraphHost.sendEvents(_:rootNode:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of EventGraphHost.resetEvents()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of EventGraphHost.gestureCategory()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t URL.encode(to:)(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x270FA5388](v3 - 8);
  int v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.relativeString.getter() || v10 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
    if (v1) {
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  URL.baseURL.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return outlined destroy of URL?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    uint64_t v13 = (void *)result;
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
    uint64_t v13 = (void *)result;
  }
  void v13[2] = v15 + 1;
  v13[v15 + 4] = v12;
  *(void *)(a1 + 24) = v13;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v12 + 1;
    URL.encode(to:)(a1);
    uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    if (!v1) {
      ProtobufEncoder.endLengthDelimited()();
    }
    return (*v16)(v9, v6);
  }
  return result;
}

uint64_t URL.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v55 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v57 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v49 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v52 = *(void *)(v13 - 8);
  unint64_t v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
  uint64_t v56 = v13;
  long long v54 = v14;
  ((void (*)(char *, uint64_t, uint64_t))v14)(v12, 1, 1);
  unint64_t v15 = *(void *)(a1 + 8);
  unint64_t v16 = *(void *)(a1 + 16);
  if (v15 < v16)
  {
    long long v51 = v12;
    do
    {
      unint64_t v23 = *(void *)(a1 + 24);
      if (v23)
      {
        unint64_t v24 = *(void *)(a1 + 32);
        if (v15 < v24) {
          goto LABEL_15;
        }
        if (v24 < v15) {
          goto LABEL_51;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t v25 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_52;
      }
      unint64_t v23 = v25;
      if (v25 < 8) {
        goto LABEL_51;
      }
LABEL_15:
      if (v23 >> 3 == 2)
      {
        if ((v23 & 7) != 2) {
          goto LABEL_51;
        }
        unint64_t v23 = *(void *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v23 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, (void *)v23);
        }
        unint64_t v36 = *(void *)(v23 + 16);
        unint64_t v35 = *(void *)(v23 + 24);
        if (v36 >= v35 >> 1) {
          unint64_t v23 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, (void *)v23);
        }
        *(void *)(v23 + 16) = v36 + 1;
        *(void *)(v23 + 8 * v36 + 32) = v16;
        *(void *)(a1 + 40) = v23;
        uint64_t v37 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
          uint64_t v12 = v51;
          goto LABEL_52;
        }
        uint64_t v12 = v51;
        if (v37 < 0) {
          goto LABEL_60;
        }
        unint64_t v38 = *(void *)(a1 + 8) + v37;
        if (v16 < v38) {
          goto LABEL_51;
        }
        *(void *)(a1 + 16) = v38;
        URL.init(from:)(a1);
        unint64_t v23 = *(void *)(a1 + 40);
        if (!*(void *)(v23 + 16)) {
          goto LABEL_61;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v39 = *(void *)(v23 + 16);
          if (!v39) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v23 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v23);
          uint64_t v39 = *(void *)(v23 + 16);
          if (!v39)
          {
LABEL_50:
            __break(1u);
LABEL_51:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_52:
            outlined destroy of URL?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for URL?);
            return swift_bridgeObjectRelease();
          }
        }
        uint64_t v40 = v39 - 1;
        uint64_t v41 = *(void *)(v23 + 8 * v40 + 32);
        *(void *)(v23 + 16) = v40;
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 16) = v41;
        outlined destroy of URL?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for URL?);
        uint64_t v42 = (uint64_t)v57;
        v54(v57, 0, 1, v56);
        outlined init with take of URL?(v42, (uint64_t)v12);
      }
      else if (v23 >> 3 == 1)
      {
        swift_bridgeObjectRelease();
        if ((v23 & 7) != 2) {
          goto LABEL_53;
        }
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_57;
        }
        unint64_t v23 = v26;
        if (v26 < 0)
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          __break(1u);
          uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v23);
          uint64_t v48 = v47[2];
          if (!v48)
          {
            __break(1u);
            JUMPOUT(0x245BFD6D4);
          }
          uint64_t v45 = v48 - 1;
          uint64_t v46 = v47[v45 + 4];
          v47[2] = v45;
          *(void *)(a1 + 40) = v47;
          *(void *)(a1 + 16) = v46;
          goto LABEL_52;
        }
        uint64_t v27 = *(void *)(a1 + 8);
        if (v16 < v27 + v26)
        {
LABEL_53:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_57;
        }
        *(void *)(a1 + 8) = v27 + v26;
        if (v26)
        {
          int64_t v28 = v27 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;
          if (__OFADD__(v28, v23)) {
            goto LABEL_62;
          }
          if ((uint64_t)(v28 + v23) < v28) {
            goto LABEL_63;
          }
          uint64_t v32 = v29;
          unint64_t v23 = Data._Representation.subscript.getter();
          unint64_t v34 = v33;
          outlined consume of Data._Representation(v32, v31);
        }
        else
        {
          unint64_t v34 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v43)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v23, v34);
LABEL_57:
          uint64_t v20 = (uint64_t)v12;
          return outlined destroy of URL?(v20, (uint64_t (*)(void))type metadata accessor for URL?);
        }
        outlined consume of Data._Representation(v23, v34);
      }
      else
      {
        switch(v23 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_52;
            }
            break;
          case 1uLL:
            unint64_t v22 = *(void *)(a1 + 8) + 8;
            if (v16 < v22) {
              goto LABEL_51;
            }
            goto LABEL_7;
          case 2uLL:
            uint64_t v44 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_52;
            }
            if (v44 < 0) {
              goto LABEL_64;
            }
            unint64_t v22 = *(void *)(a1 + 8) + v44;
            if (v16 < v22) {
              goto LABEL_51;
            }
LABEL_7:
            *(void *)(a1 + 8) = v22;
            break;
          case 5uLL:
            unint64_t v22 = *(void *)(a1 + 8) + 4;
            if (v16 < v22) {
              goto LABEL_51;
            }
            goto LABEL_7;
          default:
            goto LABEL_51;
        }
      }
      unint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = *(void *)(a1 + 16);
    }
    while (v15 < v16);
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v17 = (uint64_t)v53;
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v52;
  uint64_t v19 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v17, 1, v56) == 1)
  {
    outlined destroy of URL?(v17, (uint64_t (*)(void))type metadata accessor for URL?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    uint64_t v20 = (uint64_t)v12;
    return outlined destroy of URL?(v20, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  outlined destroy of URL?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for URL?);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v50, v17, v19);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance URL(uint64_t a1)
{
  return URL.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance URL@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return URL.init(from:)(a1, a2);
}

void UUID.encode(to:)()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v8 = UUID.uuid.getter();
  char v9 = v0;
  char v10 = v1;
  char v11 = v2;
  char v12 = v3;
  char v13 = v4;
  char v14 = v5;
  char v15 = v6;
  char v16 = v7;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  ProtobufEncoder.encodeData(_:)(&v8, &v17);
}

unint64_t UUID.init(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  if (v3 >= v4)
  {
LABEL_2:
    a1[3] = 0;
    return UUID.init(uuid:)();
  }
  while (1)
  {
    unint64_t result = a1[3];
    if (result)
    {
      unint64_t v6 = a1[4];
      if (v3 < v6) {
        goto LABEL_12;
      }
      if (v6 < v3) {
        break;
      }
      a1[3] = 0;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return result;
    }
    if (result <= 7) {
      break;
    }
LABEL_12:
    if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(result & 7)
      {
        case 0uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return result;
          }
          unint64_t v3 = a1[1];
          goto LABEL_5;
        case 1uLL:
          unint64_t v3 = a1[1] + 8;
          if (v4 >= v3) {
            goto LABEL_4;
          }
          goto LABEL_27;
        case 2uLL:
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_30;
          }
          unint64_t v3 = a1[1] + result;
          if (v4 < v3) {
            goto LABEL_27;
          }
LABEL_4:
          a1[1] = v3;
          break;
        case 5uLL:
          unint64_t v3 = a1[1] + 4;
          if (v4 < v3) {
            goto LABEL_27;
          }
          goto LABEL_4;
        default:
          goto LABEL_27;
      }
      goto LABEL_5;
    }
    if ((result & 7) != 2) {
      break;
    }
    unint64_t result = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_30:
      __break(1u);
    }
    unint64_t v3 = a1[1] + result;
    if (v4 < v3) {
      break;
    }
    a1[1] = v3;
    if (result != 16) {
      break;
    }
LABEL_5:
    unint64_t v4 = a1[2];
    if (v3 >= v4) {
      goto LABEL_2;
    }
  }
LABEL_27:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UUID()
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance UUID(void *a1)
{
  return UUID.init(from:)(a1);
}

void Data.encode(to:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)a1;
  *(void *)&into.state.CC_LONG h4 = v6;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(a1 + 24);
  uint64_t v7 = ProtobufEncoder.archiveWriter.getter();
  if (!v7)
  {
    ProtobufEncoder.dataField(_:_:)(2, a2, a3);
    return;
  }
  uint64_t v8 = v7;
  memset(&c, 0, sizeof(c));
  outlined copy of Data._Representation(a2, a3);
  CC_SHA1_Init(&c);
  into.state = c;
  Data.hash(into:)(&into);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
  outlined consume of Data._Representation(a2, a3);
  CC_LONG h4 = c.h4;
  uint64_t v11 = *(void *)&c.h0;
  uint64_t v10 = *(void *)&c.h2;
  swift_beginAccess();
  uint64_t v12 = specialized Collection<>.firstIndex(of:)(v11, v10, h4, *(void *)(v8 + 32));
  if (v13)
  {
    *(void *)&c.h0 = v11;
    *(void *)&c.h2 = v10;
    c.CC_LONG h4 = h4;
    LOBYTE(c.Nl) = 0;
    outlined copy of Data._Representation(a2, a3);
    Swift::UInt v14 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&c.h0, (const char *)v8, a2, a3);
    outlined consume of Data._Representation(a2, a3);
    if (v3)
    {
LABEL_8:
      swift_release();
      return;
    }
  }
  else
  {
    Swift::UInt v14 = v12;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v14);
    goto LABEL_8;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Data.init(from:)(uint64_t a1)
{
  uint64_t v45 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v45);
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v5 < v6)
  {
    uint64_t v47 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v7 = 0;
    uint64_t v43 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v44 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    unint64_t v8 = 0xF000000000000000;
    uint64_t v42 = MEMORY[0x263F8EE58] + 8;
    uint64_t v9 = (uint64_t)v47;
    while (1)
    {
      unint64_t v11 = *(void *)(a1 + 24);
      if (!v11) {
        goto LABEL_12;
      }
      unint64_t v12 = *(void *)(a1 + 32);
      if (v5 >= v12) {
        break;
      }
LABEL_14:
      if (v11 >> 3 == 2)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_57;
        }
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_62;
        }
        uint64_t v25 = v24;
        if (v24 < 0)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          JUMPOUT(0x245BFE2D0);
        }
        uint64_t v26 = *(void *)(a1 + 8);
        if (v6 < v26 + v24) {
          goto LABEL_57;
        }
        *(void *)(a1 + 8) = v26 + v24;
        if (v24)
        {
          id v27 = *(id *)a1;
          uint64_t v28 = v26 - (void)objc_msgSend(v27, sel_bytes, v42);
          uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;
          if (__OFADD__(v28, v25)) {
            goto LABEL_65;
          }
          if (v28 + v25 < v28) {
            goto LABEL_66;
          }
          uint64_t v32 = v29;
          uint64_t v33 = Data._Representation.subscript.getter();
          unint64_t v35 = v34;
          outlined consume of Data._Representation(v32, v31);
          outlined consume of Data?(v7, v8);
          uint64_t v7 = v33;
          unint64_t v8 = v35;
          goto LABEL_7;
        }
        outlined consume of Data?(v7, v8);
        uint64_t v7 = 0;
        unint64_t v5 = *(void *)(a1 + 8);
        unint64_t v6 = *(void *)(a1 + 16);
        unint64_t v8 = 0xC000000000000000;
        if (v5 >= v6)
        {
          uint64_t v7 = 0;
          *(void *)(a1 + 24) = 0;
          return v7;
        }
      }
      else
      {
        if (v11 >> 3 != 1)
        {
          switch(v11 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_62;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 8;
              if (v6 >= v10) {
                goto LABEL_6;
              }
              goto LABEL_57;
            case 2uLL:
              uint64_t v40 = ProtobufDecoder.decodeVarint()();
              if (v1) {
                goto LABEL_62;
              }
              if (v40 < 0) {
                goto LABEL_68;
              }
              unint64_t v10 = *(void *)(a1 + 8) + v40;
              if (v6 < v10) {
                goto LABEL_57;
              }
LABEL_6:
              *(void *)(a1 + 8) = v10;
              break;
            case 5uLL:
              unint64_t v10 = *(void *)(a1 + 8) + 4;
              if (v6 < v10) {
                goto LABEL_57;
              }
              goto LABEL_6;
            default:
              goto LABEL_57;
          }
          goto LABEL_7;
        }
        uint64_t v46 = v7;
        if ((v11 & 7) != 0)
        {
          if ((v11 & 7) != 2) {
            goto LABEL_57;
          }
          uint64_t v13 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            goto LABEL_62;
          }
          if (v13 < 0) {
            goto LABEL_67;
          }
          unint64_t v14 = *(void *)(a1 + 8) + v13;
          if (v6 < v14)
          {
LABEL_57:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_62:
            outlined consume of Data?(v7, v8);
            return v7;
          }
          *(void *)(a1 + 24) = 8;
          *(void *)(a1 + 32) = v14;
        }
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          goto LABEL_61;
        }
        uint64_t v16 = v15;
        if (v15 < 0)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_61:
          uint64_t v7 = v46;
          goto LABEL_62;
        }
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = one-time initialization token for readerKey;
        id v19 = *(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != -1) {
          swift_once();
        }
        uint64_t v20 = v45;
        uint64_t v21 = __swift_project_value_buffer(v45, (uint64_t)static ArchiveReader.readerKey);
        (*v44)(v9, v21, v20);
        if (*(void *)(v17 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v9), (v23 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v22, (uint64_t)&v48);
        }
        else
        {
          long long v48 = 0u;
          long long v49 = 0u;
        }
        (*v43)(v47, v20);
        if (!*((void *)&v49 + 1))
        {
          outlined destroy of URL?((uint64_t)&v48, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_48:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          outlined consume of Data?(v46, v8);
LABEL_49:
          uint64_t v7 = 0;
          unint64_t v8 = 0xF000000000000000;
          goto LABEL_7;
        }
        type metadata accessor for ArchiveReader();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v36 = v50;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (v16 >= *(void *)(v36 + 40))
        {
          outlined consume of Data?(v46, v8);
          swift_release();
          goto LABEL_49;
        }
        ArchiveReader.subscript.getter(v16);
        uint64_t v7 = v37;
        unint64_t v39 = v38;
        outlined consume of Data?(v46, v8);
        swift_release();
        unint64_t v8 = v39;
LABEL_7:
        unint64_t v5 = *(void *)(a1 + 8);
        unint64_t v6 = *(void *)(a1 + 16);
        if (v5 >= v6)
        {
          *(void *)(a1 + 24) = 0;
          if (v8 >> 60 == 15) {
            return 0;
          }
          return v7;
        }
      }
    }
    if (v12 < v5) {
      goto LABEL_57;
    }
    *(void *)(a1 + 24) = 0;
LABEL_12:
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      goto LABEL_62;
    }
    if (v11 <= 7) {
      goto LABEL_57;
    }
    goto LABEL_14;
  }
  *(void *)(a1 + 24) = 0;
  return 0;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Data(uint64_t a1)
{
  Data.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Data@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Data.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t Locale.encode(to:)()
{
  if ((Locale.identifier.getter() || v0 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t Locale.init(from:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v4 < v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 24);
      if (!v9) {
        goto LABEL_12;
      }
      unint64_t v10 = *(void *)(a1 + 32);
      if (v4 >= v10) {
        break;
      }
LABEL_14:
      if ((v9 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        swift_bridgeObjectRelease();
        if ((v9 & 7) != 2) {
          goto LABEL_36;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return result;
        }
        uint64_t v12 = result;
        if (result < 0)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          JUMPOUT(0x245BFE700);
        }
        uint64_t v13 = *(void *)(a1 + 8);
        if (v5 < v13 + result)
        {
LABEL_36:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        *(void *)(a1 + 8) = v13 + result;
        if (result)
        {
          uint64_t v14 = v13 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v17 = v16;
          if (__OFADD__(v14, v12)) {
            goto LABEL_42;
          }
          if (v14 + v12 < v14) {
            goto LABEL_43;
          }
          uint64_t v18 = v15;
          uint64_t v19 = Data._Representation.subscript.getter();
          unint64_t v21 = v20;
          outlined consume of Data._Representation(v18, v17);
        }
        else
        {
          uint64_t v19 = 0;
          unint64_t v21 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v22)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined consume of Data._Representation(v19, v21);
        }
        uint64_t v6 = v22;
        outlined consume of Data._Representation(v19, v21);
      }
      else
      {
        switch(v9 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              return swift_bridgeObjectRelease();
            }
            break;
          case 1uLL:
            unint64_t v8 = *(void *)(a1 + 8) + 8;
            if (v5 >= v8) {
              goto LABEL_6;
            }
            goto LABEL_34;
          case 2uLL:
            uint64_t v23 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return swift_bridgeObjectRelease();
            }
            if (v23 < 0) {
              goto LABEL_44;
            }
            unint64_t v8 = *(void *)(a1 + 8) + v23;
            if (v5 < v8) {
              goto LABEL_34;
            }
LABEL_6:
            *(void *)(a1 + 8) = v8;
            break;
          case 5uLL:
            unint64_t v8 = *(void *)(a1 + 8) + 4;
            if (v5 < v8) {
              goto LABEL_34;
            }
            goto LABEL_6;
          default:
            goto LABEL_34;
        }
      }
      unint64_t v4 = *(void *)(a1 + 8);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v4 >= v5)
      {
        *(void *)(a1 + 24) = 0;
        if (!v6) {
          return static Locale.current.getter();
        }
        return Locale.init(identifier:)();
      }
    }
    if (v10 < v4) {
      goto LABEL_34;
    }
    *(void *)(a1 + 24) = 0;
LABEL_12:
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v9 = v11;
    if (v11 < 8)
    {
LABEL_34:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_14;
  }
  *(void *)(a1 + 24) = 0;
  return static Locale.current.getter();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Locale()
{
  if ((Locale.identifier.getter() || v0 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Locale(uint64_t a1)
{
  return Locale.init(from:)(a1);
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0;
  }
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        unint64_t v11 = Substring.index(after:)();
        if (v11 >> 14 == v14) {
          return 0;
        }
        unint64_t v4 = v11;
        if (Substring.subscript.getter() == a1 && v12 == a2) {
          goto LABEL_6;
        }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v10) {
          return v4;
        }
      }
    }
  }
  return v4;
}

unint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    uint64_t v6 = *(void *)(a2 + 40 + 8 * result++);
    if (v6 == a1) {
      return result;
    }
  }
  return 0;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t result = 0;
  for (unint64_t i = (_DWORD *)(a4 + 48); ; i += 5)
  {
    BOOL v8 = *(i - 4) == a1 && *(i - 3) == HIDWORD(a1);
    BOOL v9 = v8 && *(i - 2) == a2;
    BOOL v10 = v9 && *(i - 1) == HIDWORD(a2);
    if (v10 && *i == a3) {
      break;
    }
    if (v4 == ++result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = a4;
  char v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  uint64_t v11 = a5 + 32;
  uint64_t v56 = a5 + 32;
  uint64_t v57 = *(void *)(a5 + 16);
  while (1)
  {
    uint64_t v12 = v11 + 32 * v10;
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    char v15 = *(unsigned char *)(v12 + 16);
    uint64_t v16 = *(void *)(v12 + 24);
    if (v15)
    {
      if ((v7 & 1) == 0) {
        goto LABEL_4;
      }
      unint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 96);
      outlined copy of Text.Storage(*(void *)v12, *(void *)(v12 + 8), 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v14, v13, 1);
      outlined copy of Text.Storage(a1, v8, 1);
      uint64_t v18 = v16;
      uint64_t v19 = v13;
      char v20 = v17(a1);
      uint64_t v9 = a1;
      char v21 = v20;
      outlined consume of Text.Storage(a1, v8, 1);
      uint64_t v60 = v19;
      uint64_t v22 = v19;
      uint64_t v16 = v18;
      outlined consume of Text.Storage(v14, v22, 1);
      if ((v21 & 1) == 0)
      {
LABEL_3:
        outlined consume of Text.Storage(v14, v60, v15);
        swift_bridgeObjectRelease();
        uint64_t v11 = v56;
        uint64_t v5 = v57;
        char v7 = a3;
        goto LABEL_4;
      }
    }
    else
    {
      if (v7) {
        goto LABEL_4;
      }
      BOOL v23 = v14 == v9 && v13 == v8;
      uint64_t v60 = *(void *)(v12 + 8);
      if (v23)
      {
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v9, v8, 0);
      }
      else
      {
        uint64_t v24 = *(void *)(v12 + 24);
        uint64_t v25 = *(void *)(v12 + 8);
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        uint64_t v27 = v25;
        uint64_t v16 = v24;
        outlined copy of Text.Storage(v14, v27, 0);
        if ((v26 & 1) == 0) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v28 = *(void *)(v16 + 16);
    if (v28 != *(void *)(v6 + 16)) {
      goto LABEL_3;
    }
    if (!v28 || v16 == v6) {
      goto LABEL_106;
    }
    char v54 = v15;
    uint64_t v29 = *(uint64_t *)(v16 + 32);
    uint64_t v30 = *(unsigned __int8 *)(v16 + 40);
    uint64_t v31 = *(uint64_t *)(v6 + 32);
    unsigned int v32 = *(unsigned __int8 *)(v6 + 40);
    char v7 = a3;
    switch(v30 >> 5)
    {
      case 1u:
        if ((v32 & 0xE0) != 0x20) {
          goto LABEL_56;
        }
        if (*(double *)&v29 == 0.0) {
          goto LABEL_53;
        }
        if (*(double *)&v31 == 0.0) {
          goto LABEL_56;
        }
LABEL_42:
        long long v48 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 96);
        char v33 = a3;
        uint64_t v34 = *(void *)(v16 + 16);
        outlined copy of Text.Modifier(v29, v30);
        outlined copy of Text.Modifier(v31, v32);
        char v35 = v48(v31);
        goto LABEL_43;
      case 2u:
        if ((v32 & 0xE0) != 0x40) {
          goto LABEL_56;
        }
        if (v30)
        {
          if ((v32 & 1) == 0) {
            goto LABEL_56;
          }
        }
        else
        {
          if (v32) {
            goto LABEL_56;
          }
LABEL_39:
          if (*(double *)&v29 != *(double *)&v31) {
            goto LABEL_56;
          }
        }
        break;
      case 3u:
        if ((v32 & 0xE0) != 0x60) {
          goto LABEL_56;
        }
        goto LABEL_39;
      case 4u:
        if ((v32 & 0xE0) != 0x80) {
          goto LABEL_56;
        }
        goto LABEL_39;
      case 5u:
        if ((v32 & 0xE0) == 0xA0) {
          goto LABEL_39;
        }
        goto LABEL_56;
      case 6u:
        if ((v32 & 0xE0) == 0xC0) {
          goto LABEL_42;
        }
        goto LABEL_56;
      case 7u:
        if (v29 | v30 ^ 0xE0)
        {
          if (v32 < 0xE0 || v31 != 1) {
            goto LABEL_56;
          }
        }
        else if (v32 < 0xE0 || *(double *)&v31 != 0.0)
        {
          goto LABEL_56;
        }
        if (v32 != 224) {
          goto LABEL_56;
        }
        break;
      default:
        if (v32 >= 0x20) {
          goto LABEL_56;
        }
        if (*(double *)&v29 == 0.0)
        {
LABEL_53:
          if (*(double *)&v31 != 0.0)
          {
            outlined consume of Text.Modifier(0, *(unsigned char *)(v16 + 40));
LABEL_56:
            outlined consume of Text.Storage(v14, v60, v54);
            swift_bridgeObjectRelease();
            goto LABEL_57;
          }
        }
        else
        {
          if (*(double *)&v31 == 0.0) {
            goto LABEL_56;
          }
          if (v29 != v31)
          {
            uint64_t v47 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 88);
            char v33 = a3;
            uint64_t v34 = *(void *)(v16 + 16);
            outlined copy of Text.Modifier(v29, v30);
            outlined copy of Text.Modifier(v31, v32);
            char v35 = v47(v31);
LABEL_43:
            char v7 = v33;
            uint64_t v6 = a4;
            char v49 = v35;
            outlined consume of Text.Modifier(v31, v32);
            outlined consume of Text.Modifier(v29, v30);
            uint64_t v28 = v34;
            if ((v49 & 1) == 0) {
              goto LABEL_56;
            }
          }
        }
        break;
    }
    if (v28 == 1) {
      break;
    }
    uint64_t v36 = 0;
    unint64_t v37 = 1;
    while (2)
    {
      if (v28 == v37)
      {
        __break(1u);
LABEL_109:
        __break(1u);
        JUMPOUT(0x245BFF228);
      }
      if (v37 >= *(void *)(v16 + 16)) {
        goto LABEL_109;
      }
      ++v37;
      uint64_t v38 = *(uint64_t *)(v16 + v36 + 48);
      uint64_t v39 = *(unsigned __int8 *)(v16 + v36 + 56);
      uint64_t v40 = *(uint64_t *)(a4 + v36 + 48);
      unsigned int v41 = *(unsigned __int8 *)(a4 + v36 + 56);
      switch(v39 >> 5)
      {
        case 1u:
          if ((v41 & 0xE0) != 0x20) {
            goto LABEL_103;
          }
          if (*(double *)&v38 == 0.0) {
            goto LABEL_93;
          }
          if (*(double *)&v40 == 0.0) {
            goto LABEL_103;
          }
LABEL_84:
          long long v51 = *(uint64_t (**)(uint64_t))(*(void *)v38 + 96);
          uint64_t v42 = v28;
          outlined copy of Text.Modifier(v38, v39);
          outlined copy of Text.Modifier(v40, v41);
          char v43 = v51(v40);
          goto LABEL_85;
        case 2u:
          if ((v41 & 0xE0) != 0x40) {
            goto LABEL_103;
          }
          if (v39)
          {
            if ((v41 & 1) == 0) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v41) {
              goto LABEL_103;
            }
LABEL_61:
            if (*(double *)&v38 != *(double *)&v40) {
              goto LABEL_103;
            }
          }
          goto LABEL_62;
        case 3u:
          if ((v41 & 0xE0) == 0x60) {
            goto LABEL_61;
          }
          goto LABEL_103;
        case 4u:
          if ((v41 & 0xE0) != 0x80) {
            goto LABEL_103;
          }
          goto LABEL_61;
        case 5u:
          if ((v41 & 0xE0) != 0xA0) {
            goto LABEL_103;
          }
          goto LABEL_61;
        case 6u:
          if ((v41 & 0xE0) == 0xC0) {
            goto LABEL_84;
          }
          goto LABEL_103;
        case 7u:
          if (v38 | v39 ^ 0xE0)
          {
            if (v41 < 0xE0 || v40 != 1) {
              goto LABEL_103;
            }
          }
          else if (v41 < 0xE0 || v40 != 0)
          {
            goto LABEL_103;
          }
          if (v41 != 224) {
            goto LABEL_103;
          }
          goto LABEL_62;
        default:
          if (v41 >= 0x20) {
            goto LABEL_103;
          }
          if (*(double *)&v38 != 0.0)
          {
            if (*(double *)&v40 == 0.0) {
              goto LABEL_103;
            }
            if (v38 != v40)
            {
              uint64_t v50 = *(uint64_t (**)(uint64_t))(*(void *)v38 + 88);
              uint64_t v42 = v28;
              outlined copy of Text.Modifier(v38, v39);
              outlined copy of Text.Modifier(v40, v41);
              char v43 = v50(v40);
LABEL_85:
              char v52 = v43;
              outlined consume of Text.Modifier(v40, v41);
              outlined consume of Text.Modifier(v38, v39);
              uint64_t v28 = v42;
              if ((v52 & 1) == 0) {
                goto LABEL_103;
              }
            }
LABEL_62:
            v36 += 16;
            if (v28 == v37) {
              goto LABEL_105;
            }
            continue;
          }
LABEL_93:
          if (*(double *)&v40 == 0.0) {
            goto LABEL_62;
          }
          outlined consume of Text.Modifier(0, *(unsigned char *)(v16 + v36 + 56));
LABEL_103:
          outlined consume of Text.Storage(v14, v60, v54);
          swift_bridgeObjectRelease();
          uint64_t v6 = a4;
          char v7 = a3;
LABEL_57:
          uint64_t v8 = a2;
          uint64_t v9 = a1;
          uint64_t v11 = v56;
          uint64_t v5 = v57;
LABEL_4:
          if (++v10 == v5) {
            return 0;
          }
          break;
      }
      break;
    }
  }
LABEL_105:
  char v15 = v54;
LABEL_106:
  outlined consume of Text.Storage(v14, v60, v15);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return 0;
  }
  if ((uint64_t)(a4 >> 1) > a3)
  {
    if (*(void *)(a2 + 8 * a3) == result) {
      return a3;
    }
    int64_t v5 = a3 + 1;
    while (1)
    {
      if (v4 == v5) {
        return 0;
      }
      if (v5 >= v4) {
        break;
      }
      uint64_t v6 = *(void *)(a2 + 8 * v5++);
      if (v6 == result) {
        return v5 - 1;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Image.Orientation.rawValue.getter(char a1)
{
  return 0x507030104060200uLL >> (8 * a1);
}

void *static Image.Orientation.allCases.getter()
{
  return &outlined read-only object #0 of static Image.Orientation.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Image.Orientation(unsigned char *a1, unsigned char *a2)
{
  return ((0x507030104060200uLL >> (8 * *a1)) & 7) == ((0x507030104060200uLL >> (8 * *a2)) & 7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Image.Orientation@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Image.Orientation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Image.Orientation(unsigned char *a1@<X8>)
{
  *a1 = 0x507030104060200uLL >> (8 * *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Image.Orientation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Image.Orientation.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Image.Orientation()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x507030104060200uLL >> (8 * v1));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Image.Orientation()
{
  Hasher._combine(_:)(0x507030104060200uLL >> (8 * *v0));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Image.Orientation()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x507030104060200uLL >> (8 * v1));
  return Hasher._finalize()();
}

double CGSize.apply(_:)(char a1, double a2, double a3)
{
  switch(a1)
  {
    case 4:
    case 5:
    case 6:
    case 7:
      double result = a3;
      break;
    default:
      return result;
  }
  return result;
}

double CGRect.apply(_:in:)(char a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  char v7 = 1;
  CGFloat v8 = a7;
  CGFloat v9 = a6;
  CGFloat v10 = a5;
  double v11 = a4;
  CGFloat v12 = a6;
  double v13 = a2;
  double v14 = a4;
  CGFloat v15 = a7;
  switch(a1)
  {
    case 1:
      goto LABEL_6;
    case 2:
      char v7 = 0;
      double v11 = a4;
      CGFloat v12 = a6;
      double v13 = a2;
      goto LABEL_6;
    case 3:
      goto LABEL_9;
    case 4:
      return a3 - a5;
    case 5:
      goto LABEL_5;
    case 6:
      char v7 = 0;
LABEL_5:
      double v11 = a3 - a5;
      CGFloat v10 = a4;
      CGFloat v12 = a7;
      CGFloat v8 = a6;
      double v13 = a3;
LABEL_6:
      v17.origin.x = v11;
      v17.origin.y = v10;
      v17.size.width = v12;
      v17.size.height = v8;
      double v14 = v13 - (v11 + CGRectGetWidth(v17));
      CGFloat v15 = v8;
      CGFloat v9 = v12;
      if (v7) {
        return v14;
      }
      goto LABEL_9;
    case 7:
      double v14 = a3 - a5;
      CGFloat v15 = a6;
      CGFloat v9 = a7;
      CGFloat v10 = a4;
LABEL_9:
      v18.origin.x = v14;
      v18.origin.y = v10;
      v18.size.width = v9;
      v18.size.height = v15;
      CGRectGetHeight(v18);
      break;
    default:
      return v14;
  }
  return v14;
}

double CGRect.unapply(_:in:)(char a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  char v7 = 6;
  char v8 = 2;
  double v11 = a5;
  double v12 = a4;
  switch(a1)
  {
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_12;
    case 3:
      char v7 = 4;
      goto LABEL_12;
    case 4:
      char v8 = 1;
      goto LABEL_5;
    case 5:
      char v8 = 3;
LABEL_5:
      BOOL v13 = (v8 & 1) == 0;
      if (v8) {
        double v14 = a3;
      }
      else {
        double v14 = a2;
      }
      if ((v8 & 2) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    case 6:
      char v7 = 7;
      goto LABEL_12;
    case 7:
      char v7 = 5;
LABEL_12:
      BOOL v13 = (v7 & 1) == 0;
      if (v7) {
        double v14 = a3;
      }
      else {
        double v14 = a2;
      }
      if (v7) {
        double v15 = a2;
      }
      else {
        double v15 = a3;
      }
      v17.origin.x = a4;
      v17.origin.y = a5;
      v17.size.width = a6;
      v17.size.height = a7;
      double v11 = v15 - (CGRectGetHeight(v17) + v11);
      if ((v7 & 2) != 0)
      {
LABEL_19:
        v18.origin.x = v12;
        v18.origin.y = v11;
        v18.size.width = a6;
        v18.size.height = a7;
        double v12 = v14 - (CGRectGetWidth(v18) + v12);
      }
LABEL_20:
      if (!v13) {
        double v12 = v11;
      }
      break;
    default:
      return v12;
  }
  return v12;
}

double CGAffineTransform.init(orientation:in:)@<D0>(CGAffineTransform *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  specialized CGAffineTransform.init(orientation:in:)(a1, v7, a3, a4);
  long long v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  double result = *(double *)&v8;
  a2[2] = v8;
  return result;
}

CGFloat CGAffineTransform.init(orientation:in:)@<D0>(CGAffineTransform *a1@<X0>, _OWORD *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  specialized CGAffineTransform.init(orientation:in:)(a1, v25, a5, a6);
  long long v18 = v25[1];
  long long v19 = v25[0];
  CGFloat v9 = v26;
  CGFloat v10 = v27;
  CGAffineTransformMakeTranslation(&t1, a3, a4);
  long long v20 = *(_OWORD *)&t1.c;
  long long v21 = *(_OWORD *)&t1.a;
  CGFloat v11 = -a3;
  CGFloat v12 = -a4;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, v11, v12);
  *(_OWORD *)&t2.a = v19;
  *(_OWORD *)&t2.CC_SHA1_CTX c = v18;
  t2.CGFloat tx = v9;
  t2.CGFloat ty = v10;
  CGAffineTransformConcat(&v22, &t1, &t2);
  CGAffineTransform t1 = v22;
  *(_OWORD *)&t2.a = v21;
  *(_OWORD *)&t2.CC_SHA1_CTX c = v20;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v22, &t1, &t2);
  CGFloat result = v22.a;
  long long v16 = *(_OWORD *)&v22.c;
  long long v17 = *(_OWORD *)&v22.tx;
  *a2 = *(_OWORD *)&v22.a;
  a2[1] = v16;
  a2[2] = v17;
  return result;
}

double CGAffineTransform.apply(_:in:)(CGAffineTransform *a1, double result, double a3)
{
  if ((_BYTE)a1)
  {
    specialized CGAffineTransform.init(orientation:in:)(a1, (long long *)&v10, result, a3);
    CGAffineTransform t1 = v10;
    long long v4 = v3[1];
    *(_OWORD *)&t2.a = *v3;
    *(_OWORD *)&t2.CC_SHA1_CTX c = v4;
    *(_OWORD *)&t2.CGFloat tx = v3[2];
    CGAffineTransformConcat(&v7, &t1, &t2);
    CGFloat result = v7.a;
    long long v5 = *(_OWORD *)&v7.c;
    long long v6 = *(_OWORD *)&v7.tx;
    _OWORD *v3 = *(_OWORD *)&v7.a;
    v3[1] = v5;
    v3[2] = v6;
  }
  return result;
}

CGFloat CGAffineTransform.apply(_:)(CGAffineTransform *a1)
{
  if ((_BYTE)a1)
  {
    specialized CGAffineTransform.init(orientation:in:)(a1, (long long *)&v9, 1.0, 1.0);
    CGAffineTransform t1 = v9;
    long long v2 = v1[1];
    *(_OWORD *)&t2.a = *v1;
    *(_OWORD *)&t2.CC_SHA1_CTX c = v2;
    *(_OWORD *)&t2.CGFloat tx = v1[2];
    CGAffineTransformConcat(&v6, &t1, &t2);
    CGFloat result = v6.a;
    long long v4 = *(_OWORD *)&v6.c;
    long long v5 = *(_OWORD *)&v6.tx;
    *char v1 = *(_OWORD *)&v6.a;
    v1[1] = v4;
    v1[2] = v5;
  }
  return result;
}

uint64_t specialized Image.Orientation.init(exifValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 8) {
    return 8;
  }
  else {
    return (0x407060503020100uLL >> (8 * (a1 - 1)));
  }
}

CGAffineTransform *specialized CGAffineTransform.init(orientation:in:)@<X0>(CGAffineTransform *result@<X0>, long long *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  long long v5 = xmmword_2461C55F0;
  long long v6 = xmmword_2461BCA80;
  char v7 = 2;
  int v8 = 1;
  long long v9 = 0uLL;
  switch((char)result)
  {
    case 1:
      goto LABEL_8;
    case 2:
      int v8 = 0;
      char v7 = 6;
      goto LABEL_8;
    case 3:
      int v8 = 0;
      char v7 = 4;
      goto LABEL_8;
    case 4:
      char v7 = 1;
      goto LABEL_8;
    case 5:
      char v7 = 3;
      goto LABEL_8;
    case 6:
      int v8 = 0;
      char v7 = 7;
      goto LABEL_8;
    case 7:
      int v8 = 0;
      char v7 = 5;
LABEL_8:
      double v10 = a3 * 0.5;
      double v11 = a4 * 0.5;
      BOOL v12 = (v7 & 1) == 0;
      int v13 = ((v7 & 2) == 0) ^ v12;
      double v14 = 0.0;
      if (v12) {
        double v15 = 1.0;
      }
      else {
        double v15 = 0.0;
      }
      if (v12)
      {
        double v16 = a4 * 0.5;
      }
      else
      {
        double v14 = 1.0;
        double v16 = v10;
      }
      if (v12) {
        double v17 = v10;
      }
      else {
        double v17 = v11;
      }
      if (v13) {
        double v18 = -v14;
      }
      else {
        double v18 = v14;
      }
      if (v13) {
        double v19 = -v15;
      }
      else {
        double v19 = v15;
      }
      if (!v8) {
        double v15 = -v15;
      }
      v22.a = v19;
      v22.b = v18;
      if (v8) {
        double v20 = v14;
      }
      else {
        double v20 = -v14;
      }
      v22.CC_SHA1_CTX c = v20;
      v22.d = v15;
      v22.CGFloat tx = v10;
      v22.CGFloat ty = v11;
      CGFloat result = CGAffineTransformTranslate(&v21, &v22, -v17, -v16);
      long long v6 = *(_OWORD *)&v21.a;
      long long v5 = *(_OWORD *)&v21.c;
      long long v9 = *(_OWORD *)&v21.tx;
      break;
    default:
      break;
  }
  *a2 = v6;
  a2[1] = v5;
  a2[2] = v9;
  return result;
}

uint64_t specialized Image.Orientation.init(rawValue:)(char a1)
{
  if ((a1 & 0xF8) != 0) {
    return 8;
  }
  else {
    return (0x602070305010400uLL >> (8 * a1));
  }
}

unint64_t lazy protocol witness table accessor for type [Image.Orientation] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A])
  {
    type metadata accessor for [Image.Orientation]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Image.Orientation] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Image.Orientation]()
{
  if (!lazy cache variable for type metadata for [Image.Orientation])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Image.Orientation]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.Orientation and conformance Image.Orientation()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation;
  if (!lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Orientation and conformance Image.Orientation);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Image.Orientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245BFFDCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.Orientation()
{
  return &type metadata for Image.Orientation;
}

Swift::Double __swiftcall UnitCurve.velocity(at:)(Swift::Double at)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  BOOL v5 = at > 0.0;
  double v6 = 0.0;
  if (v5) {
    double v6 = at;
  }
  double v7 = 1.0;
  if (v6 > 1.0) {
    double v6 = 1.0;
  }
  if (*((unsigned char *)v1 + 32) != 1) {
    return UnitCurve.CubicSolver.velocity(at:)(v6);
  }
  uint64_t v8 = v1[2] | v1[1];
  if (!(v8 | v3 | v4)) {
    return v7;
  }
  uint64_t v9 = v8 | v4;
  if (v3 == 1 && v9 == 0)
  {
    double v15 = at / sqrt(1.0 - at * at);
  }
  else
  {
    if (v3 == 2 && v9 == 0)
    {
      double v12 = at + -1.0;
      double v17 = -((at + -2.0) * at);
    }
    else
    {
      double v12 = at + at;
      if (at >= 0.5)
      {
        double v12 = v12 + -2.0;
        double v13 = (at * -4.0 + 8.0) * at;
        double v14 = -3.0;
      }
      else
      {
        double v13 = at * -4.0 * at;
        double v14 = 1.0;
      }
      double v17 = v13 + v14;
    }
    double v15 = v12 / sqrt(v17);
  }
  return fabs(v15);
}

__n128 UnitCurve.function.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 UnitCurve.function.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*UnitCurve.function.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static UnitCurve.bezier(startControlPoint:endControlPoint:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = 0;
}

Swift::Double __swiftcall UnitCurve.value(at:)(Swift::Double at)
{
  double v2 = *v1;
  double v3 = v1[1];
  double v4 = v1[3];
  if (at > 0.0) {
    double v5 = at;
  }
  else {
    double v5 = 0.0;
  }
  if (v5 > 1.0) {
    double v5 = 1.0;
  }
  if (*((unsigned char *)v1 + 32) == 1)
  {
    uint64_t v6 = *((void *)v1 + 2) | *(void *)&v3;
    if (v6 | *(void *)&v2 | *(void *)&v4)
    {
      uint64_t v7 = v6 | *(void *)&v4;
      if (*(void *)&v2 == 1 && v7 == 0)
      {
        return 1.0 - sqrt(1.0 - at * at);
      }
      else if (*(void *)&v2 == 2 && v7 == 0)
      {
        return sqrt(1.0 - (at + -1.0) * (at + -1.0));
      }
      else
      {
        double v10 = at * 4.0;
        if (at >= 0.5) {
          double v11 = sqrt((8.0 - v10) * at + -3.0) + 1.0;
        }
        else {
          double v11 = 1.0 - sqrt(1.0 - v10 * at);
        }
        return v11 * 0.5;
      }
    }
  }
  else
  {
    double v12 = v3 * 3.0;
    double v13 = (v4 - v3) * 3.0 - v3 * 3.0;
    double v14 = 1.0 - v3 * 3.0 - v13;
    double v15 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v5, 0.000000953674316);
    return round(v15 * (v12 + v15 * (v13 + v14 * v15)) * 1048576.0) * 0.000000953674316;
  }
  return at;
}

Swift::Double __swiftcall UnitCurve.CubicSolver.value(at:)(Swift::Double at)
{
  double v2 = v1[3];
  double v3 = v1[4];
  double v4 = v1[5];
  double v5 = UnitCurve.CubicSolver.solveX(_:epsilon:)(at, 0.000000953674316);
  return round(v5 * (v4 + v5 * (v3 + v2 * v5)) * 1048576.0) * 0.000000953674316;
}

Swift::Double __swiftcall UnitCurve.CubicSolver.velocity(at:)(Swift::Double at)
{
  double v2 = *v1;
  double v3 = v1[1];
  double v4 = v1[2];
  double v5 = v1[3];
  double v6 = v1[4];
  double v7 = v1[5];
  double v8 = UnitCurve.CubicSolver.solveX(_:epsilon:)(at, 0.000000953674316);
  double v9 = v4 + v8 * (v3 + v3 + v2 * 3.0 * v8);
  double v10 = v7 + v8 * (v6 + v6 + v5 * 3.0 * v8);
  Swift::Double result = 1.0;
  if (v9 != v10)
  {
    if (v9 == 0.0)
    {
      Swift::Double result = INFINITY;
      if (v10 < 0.0) {
        return -INFINITY;
      }
    }
    else
    {
      return round(v10 / v9 * 1048576.0) * 0.000000953674316;
    }
  }
  return result;
}

void UnitCurve.inverse.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  if (*((unsigned char *)v1 + 32) != 1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v2;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = 0;
    return;
  }
  uint64_t v6 = v5 | v3;
  if (!(v6 | v2 | v4))
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
LABEL_16:
    *(unsigned char *)(a1 + 32) = 1;
    return;
  }
  uint64_t v7 = v6 | v4;
  if (v2 == 1 && v7 == 0)
  {
    uint64_t v10 = 2;
    goto LABEL_15;
  }
  if (v2 != 2 || v7 != 0)
  {
    uint64_t v10 = 3;
LABEL_15:
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    goto LABEL_16;
  }
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

void UnitCurve.Function.hash(into:)()
{
  double v1 = *(double *)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 16) | *(void *)(v0 + 8);
    if (v3 | *(void *)&v1 | v2)
    {
      uint64_t v4 = v3 | v2;
      if (*(void *)&v1 == 1 && v4 == 0)
      {
        Swift::UInt v7 = 1;
      }
      else if (*(void *)&v1 == 2 && v4 == 0)
      {
        Swift::UInt v7 = 2;
      }
      else
      {
        Swift::UInt v7 = 3;
      }
    }
    else
    {
      Swift::UInt v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    double v8 = *(double *)v0;
    double v9 = *(double *)(v0 + 8);
    double v10 = *(double *)(v0 + 16);
    double v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

Swift::Int UnitCurve.Function.hashValue.getter()
{
  double v1 = *(double *)v0;
  double v2 = *(double *)(v0 + 8);
  double v4 = *(double *)(v0 + 16);
  double v3 = *(double *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    if (*(void *)&v4 | *(void *)&v2 | *(void *)&v1 | *(void *)&v3)
    {
      uint64_t v6 = *(void *)&v4 | *(void *)&v2 | *(void *)&v3;
      if (*(void *)&v1 == 1 && v6 == 0)
      {
        Swift::UInt v8 = 1;
      }
      else if (*(void *)&v1 != 2 || v6)
      {
        Swift::UInt v8 = 3;
      }
      else
      {
        Swift::UInt v8 = 2;
      }
    }
    else
    {
      Swift::UInt v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v4, v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnitCurve.Function()
{
  double v1 = *(double *)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 16) | *(void *)(v0 + 8);
    if (v3 | *(void *)&v1 | v2)
    {
      uint64_t v4 = v3 | v2;
      if (*(void *)&v1 == 1 && v4 == 0)
      {
        Swift::UInt v7 = 1;
      }
      else if (*(void *)&v1 == 2 && v4 == 0)
      {
        Swift::UInt v7 = 2;
      }
      else
      {
        Swift::UInt v7 = 3;
      }
    }
    else
    {
      Swift::UInt v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    double v8 = *(double *)v0;
    double v9 = *(double *)(v0 + 8);
    double v10 = *(double *)(v0 + 16);
    double v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurve.Function()
{
  Hasher.init(_seed:)();
  double v1 = *(double *)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 16) | *(void *)(v0 + 8);
    if (v3 | *(void *)&v1 | v2)
    {
      uint64_t v4 = v3 | v2;
      if (*(void *)&v1 == 1 && v4 == 0)
      {
        Swift::UInt v6 = 1;
      }
      else if (*(void *)&v1 != 2 || v4)
      {
        Swift::UInt v6 = 3;
      }
      else
      {
        Swift::UInt v6 = 2;
      }
    }
    else
    {
      Swift::UInt v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  else
  {
    double v7 = *(double *)v0;
    double v8 = *(double *)(v0 + 8);
    double v9 = *(double *)(v0 + 16);
    double v10 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v7, v8);
    UnitPoint.hash(into:)(v9, v10);
  }
  return Hasher._finalize()();
}

void UnitCurve.hash(into:)()
{
  double v1 = *(double *)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 16) | *(void *)(v0 + 8);
    if (v3 | *(void *)&v1 | v2)
    {
      uint64_t v4 = v3 | v2;
      if (*(void *)&v1 == 1 && v4 == 0)
      {
        Swift::UInt v7 = 1;
      }
      else if (*(void *)&v1 == 2 && v4 == 0)
      {
        Swift::UInt v7 = 2;
      }
      else
      {
        Swift::UInt v7 = 3;
      }
    }
    else
    {
      Swift::UInt v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  else
  {
    double v8 = *(double *)v0;
    double v9 = *(double *)(v0 + 8);
    double v10 = *(double *)(v0 + 16);
    double v11 = *(double *)(v0 + 24);
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v8, v9);
    UnitPoint.hash(into:)(v10, v11);
  }
}

uint64_t static UnitCurve.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v3 = *(float64x2_t *)a1;
  float64x2_t v2 = *(float64x2_t *)(a1 + 16);
  float64x2_t v5 = *(float64x2_t *)a2;
  float64x2_t v4 = *(float64x2_t *)(a2 + 16);
  if (*(unsigned char *)(a1 + 32) != 1) {
    return (*(unsigned char *)(a2 + 32) & 1) == 0
  }
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v3, v5), (int32x4_t)vceqq_f64(v2, v4))), 0xFuLL))) & 1) != 0;
  int8x16_t v6 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0), (int8x16_t)v3);
  if (!(v6.i64[1] | *(void *)&v3.f64[0] | *(void *)&v2.f64[1])) {
    return *(unsigned char *)(a2 + 32)
  }
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4, 0), *(int8x16_t *)&v5).i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1]);
  uint64_t v7 = v6.i64[1] | *(void *)&v2.f64[1];
  if (*(void *)&v3.f64[0] == 1 && !v7)
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
    int8x16_t v8 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    BOOL v9 = v8.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1] && *(void *)&v5.f64[0] == 1;
    return v9 && (v8.i64[1] | *(void *)&v4.f64[1]) == 0;
  }
  if (*(void *)&v3.f64[0] == 2 && !v7)
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
    int8x16_t v12 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    if (!(v12.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1])) {
      return 0;
    }
    uint64_t v13 = v12.i64[1] | *(void *)&v4.f64[1];
    if (*(void *)&v5.f64[0] == 1 && !v13) {
      return 0;
    }
    return *(void *)&v5.f64[0] == 2 && !v13;
  }
  if ((*(unsigned char *)(a2 + 32) & 1) == 0) {
    return 0;
  }
  int8x16_t v14 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
  if (!(v14.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1])) {
    return 0;
  }
  uint64_t result = 1;
  if ((unint64_t)(*(void *)&v5.f64[0] - 1) <= 1 && !(v14.i64[1] | *(void *)&v4.f64[1])) {
    return 0;
  }
  return result;
}

Swift::Int UnitCurve.hashValue.getter()
{
  double v1 = *(double *)v0;
  double v2 = *(double *)(v0 + 8);
  double v4 = *(double *)(v0 + 16);
  double v3 = *(double *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if (v5 == 1)
  {
    if (*(void *)&v4 | *(void *)&v2 | *(void *)&v1 | *(void *)&v3)
    {
      uint64_t v6 = *(void *)&v4 | *(void *)&v2 | *(void *)&v3;
      if (*(void *)&v1 == 1 && v6 == 0)
      {
        Swift::UInt v8 = 1;
      }
      else if (*(void *)&v1 != 2 || v6)
      {
        Swift::UInt v8 = 3;
      }
      else
      {
        Swift::UInt v8 = 2;
      }
    }
    else
    {
      Swift::UInt v8 = 0;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v4, v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnitCurve(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  if (*(unsigned char *)(a1 + 32) != 1)
  {
    if (*(unsigned char *)(a2 + 32)) {
      return 0;
    }
    if (v2 == v6 && v3 == v7 && v5 == v9) {
      return v4 == v8;
    }
    return 0;
  }
  uint64_t v10 = *(void *)&v5 | *(void *)&v3;
  if (!(v10 | *(void *)&v2 | *(void *)&v4))
  {
    if (*(unsigned char *)(a2 + 32)) {
      return (*(void *)&v9 | *(void *)&v7 | *(void *)&v6 | *(void *)&v8) == 0;
    }
    return 0;
  }
  uint64_t v11 = v10 | *(void *)&v4;
  if (*(void *)&v2 == 1 && v11 == 0)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v20 = *(void *)&v9 | *(void *)&v7;
      if (v20 | *(void *)&v6 | *(void *)&v8)
      {
        if (*(void *)&v6 == 1 && !(v20 | *(void *)&v8)) {
          return 1;
        }
      }
    }
    return 0;
  }
  if (*(void *)&v2 != 2 || v11 != 0)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v14 = *(void *)&v9 | *(void *)&v7;
      if (v14 | *(void *)&v6 | *(void *)&v8)
      {
        uint64_t v15 = v14 | *(void *)&v8;
        if (*(void *)&v6 != 1 || v15) {
          return *(void *)&v6 != 2 || v15 != 0;
        }
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  uint64_t v21 = *(void *)&v9 | *(void *)&v7;
  if (!(v21 | *(void *)&v6 | *(void *)&v8)) {
    return 0;
  }
  uint64_t v22 = v21 | *(void *)&v8;
  if (*(void *)&v6 == 1 && !v22) {
    return 0;
  }
  return *(void *)&v6 == 2 && v22 == 0;
}

double one-time initialization function for easeInEaseOut()
{
  if (one-time initialization token for easeInOut != -1) {
    swift_once();
  }
  double result = *(double *)&static UnitCurve.easeInOut;
  static UnitCurve.easeInEaseOut = static UnitCurve.easeInOut;
  unk_268EF9200 = unk_268EF9228;
  byte_268EF9210 = byte_268EF9238;
  return result;
}

double static UnitCurve.easeInEaseOut.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for easeInEaseOut != -1) {
    swift_once();
  }
  char v2 = byte_268EF9210;
  double result = *(double *)&static UnitCurve.easeInEaseOut;
  long long v4 = unk_268EF9200;
  *(_OWORD *)a1 = static UnitCurve.easeInEaseOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeInOut()
{
  double result = 0.42;
  static UnitCurve.easeInOut = xmmword_2461CA5E0;
  unk_268EF9228 = xmmword_2461CA5F0;
  byte_268EF9238 = 0;
  return result;
}

double static UnitCurve.easeInOut.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for easeInOut != -1) {
    swift_once();
  }
  char v2 = byte_268EF9238;
  double result = *(double *)&static UnitCurve.easeInOut;
  long long v4 = unk_268EF9228;
  *(_OWORD *)a1 = static UnitCurve.easeInOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeIn()
{
  double result = 0.42;
  __asm { FMOV            V1.2D, #1.0 }
  static UnitCurve.easeIn = xmmword_2461CA5E0;
  *(_OWORD *)algn_268EF9250 = _Q1;
  byte_268EF9260 = 0;
  return result;
}

double static UnitCurve.easeIn.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for easeIn != -1) {
    swift_once();
  }
  char v2 = byte_268EF9260;
  double result = *(double *)&static UnitCurve.easeIn;
  long long v4 = *(_OWORD *)algn_268EF9250;
  *(_OWORD *)a1 = static UnitCurve.easeIn;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

double one-time initialization function for easeOut()
{
  static UnitCurve.easeOut = 0uLL;
  double result = 0.58;
  xmmword_268EF9278 = xmmword_2461CA5F0;
  byte_268EF9288 = 0;
  return result;
}

double static UnitCurve.easeOut.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for easeOut != -1) {
    swift_once();
  }
  char v2 = byte_268EF9288;
  double result = *(double *)&static UnitCurve.easeOut;
  long long v4 = xmmword_268EF9278;
  *(_OWORD *)a1 = static UnitCurve.easeOut;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

void static UnitCurve.circularEaseIn.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

void static UnitCurve.circularEaseOut.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

void static UnitCurve.circularEaseInOut.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
}

double static UnitCurve.linear.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

double UnitCurve.CubicSolver.init(startControlPoint:endControlPoint:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v5 = a2 * 3.0;
  double v6 = (a4 - a2) * 3.0 - a2 * 3.0;
  double v7 = a3 * 3.0;
  double v8 = (a5 - a3) * 3.0 - a3 * 3.0;
  *a1 = 1.0 - v5 - v6;
  a1[1] = v6;
  double result = 1.0 - v7 - v8;
  a1[2] = v5;
  a1[3] = result;
  a1[4] = v8;
  a1[5] = v7;
  return result;
}

double UnitCurve.CubicSolver.startControlPoint.getter()
{
  return *(double *)(v0 + 16) / 3.0;
}

double UnitCurve.CubicSolver.endControlPoint.getter()
{
  return *(double *)(v0 + 16) / 3.0 + (*(double *)(v0 + 8) + *(double *)(v0 + 16)) / 3.0;
}

void UnitCurve.CubicSolver.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *v0;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
}

Swift::Int UnitCurve.CubicSolver.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitCurve.CubicSolver()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurve.CubicSolver()
{
  return Hasher._finalize()();
}

double *UnitCurve.CubicSolver.encode(to:)(double *result)
{
  Swift::UInt64 v2 = v1;
  Swift::UInt64 v3 = result;
  double v4 = v2[1];
  double v5 = v2[2];
  double v6 = v2[4];
  double v7 = v2[5];
  double v8 = v5 / 3.0;
  if (v5 / 3.0 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v9 = *((void *)v3 + 1);
    double result = (double *)(v9 + 8);
    if (__OFADD__(v9, 8))
    {
      __break(1u);
    }
    else if (*((void *)v3 + 2) >= (uint64_t)result)
    {
      *((void *)v3 + 1) = result;
      *(double *)(*(void *)v3 + v9) = v8;
      goto LABEL_5;
    }
    double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *double result = v8;
  }
LABEL_5:
  double v10 = v7 / 3.0;
  if (v7 / 3.0 == 0.0) {
    goto LABEL_9;
  }
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  uint64_t v11 = *((void *)v3 + 1);
  double result = (double *)(v11 + 8);
  if (__OFADD__(v11, 8))
  {
    __break(1u);
  }
  else if (*((void *)v3 + 2) >= (uint64_t)result)
  {
    *((void *)v3 + 1) = result;
    *(double *)(*(void *)v3 + v11) = v10;
    goto LABEL_9;
  }
  double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *double result = v10;
LABEL_9:
  double v12 = v8 + (v4 + v5) / 3.0;
  if (v12 == 0.0) {
    goto LABEL_13;
  }
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  uint64_t v13 = *((void *)v3 + 1);
  double result = (double *)(v13 + 8);
  if (__OFADD__(v13, 8))
  {
    __break(1u);
  }
  else if (*((void *)v3 + 2) >= (uint64_t)result)
  {
    *((void *)v3 + 1) = result;
    *(double *)(*(void *)v3 + v13) = v12;
    goto LABEL_13;
  }
  double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *double result = v12;
LABEL_13:
  double v14 = v10 + (v6 + v7) / 3.0;
  if (v14 == 0.0) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x21uLL);
  uint64_t v15 = *((void *)v3 + 1);
  double result = (double *)(v15 + 8);
  if (__OFADD__(v15, 8))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (*((void *)v3 + 2) < (uint64_t)result)
  {
LABEL_25:
    double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *double result = v14;
    return result;
  }
  *((void *)v3 + 1) = result;
  *(double *)(*(void *)v3 + v15) = v14;
  return result;
}

unint64_t UnitCurve.CubicSolver.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  Swift::UInt64 v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  double v7 = 0.0;
  if (v5 < v6)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    while (1)
    {
      double result = v3[3];
      if (result)
      {
        unint64_t v13 = v3[4];
        if (v5 < v13) {
          goto LABEL_15;
        }
        if (v13 < v5) {
          goto LABEL_71;
        }
        v3[3] = 0;
      }
      double result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          unint64_t v14 = result & 7;
          switch(v14)
          {
            case 5uLL:
              uint64_t v22 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v22 + 1);
              if (v6 < (unint64_t)(v22 + 1)) {
                goto LABEL_71;
              }
              float v23 = *v22;
              v3[1] = v5;
              double v10 = v23;
              goto LABEL_8;
            case 2uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                JUMPOUT(0x245C01740);
              }
              uint64_t v15 = (double *)v3[1];
              if (v6 < (unint64_t)v15 + result) {
                goto LABEL_71;
              }
              v3[3] = 9;
              v3[4] = (char *)v15 + result;
              break;
            case 1uLL:
              uint64_t v15 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1)) {
            goto LABEL_71;
          }
          double v10 = *v15;
          goto LABEL_7;
        case 2uLL:
          unint64_t v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              uint64_t v24 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v24 + 1);
              if (v6 < (unint64_t)(v24 + 1)) {
                goto LABEL_71;
              }
              float v25 = *v24;
              v3[1] = v5;
              double v9 = v25;
              goto LABEL_8;
            case 2uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_74;
              }
              double v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result) {
                goto LABEL_71;
              }
              v3[3] = 17;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              double v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1)) {
            goto LABEL_71;
          }
          double v9 = *v17;
          goto LABEL_7;
        case 3uLL:
          unint64_t v18 = result & 7;
          switch(v18)
          {
            case 5uLL:
              double v26 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v26 + 1);
              if (v6 < (unint64_t)(v26 + 1)) {
                goto LABEL_71;
              }
              float v27 = *v26;
              v3[1] = v5;
              double v8 = v27;
              goto LABEL_8;
            case 2uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_75;
              }
              double v19 = (double *)v3[1];
              if (v6 < (unint64_t)v19 + result) {
                goto LABEL_71;
              }
              v3[3] = 25;
              v3[4] = (char *)v19 + result;
              break;
            case 1uLL:
              double v19 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v19 + 1);
          if (v6 < (unint64_t)(v19 + 1)) {
            goto LABEL_71;
          }
          double v8 = *v19;
          goto LABEL_7;
        case 4uLL:
          unint64_t v20 = result & 7;
          if (v20 == 5)
          {
            uint64_t v28 = (float *)v3[1];
            unint64_t v5 = (unint64_t)(v28 + 1);
            if (v6 < (unint64_t)(v28 + 1)) {
              goto LABEL_71;
            }
            float v29 = *v28;
            v3[1] = v5;
            double v7 = v29;
          }
          else
          {
            if (v20 == 2)
            {
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
              uint64_t v21 = (double *)v3[1];
              if (v6 < (unint64_t)v21 + result) {
                goto LABEL_71;
              }
              v3[3] = 33;
              v3[4] = (char *)v21 + result;
            }
            else
            {
              if (v20 != 1) {
                goto LABEL_71;
              }
              uint64_t v21 = (double *)v3[1];
            }
            unint64_t v5 = (unint64_t)(v21 + 1);
            if (v6 < (unint64_t)(v21 + 1)) {
              goto LABEL_71;
            }
            double v7 = *v21;
LABEL_7:
            v3[1] = v5;
          }
LABEL_8:
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_77;
              }
              unint64_t v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5) {
                goto LABEL_7;
              }
              goto LABEL_71;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
      }
    }
  }
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
LABEL_4:
  v3[3] = 0;
  double v11 = (v8 - v10) * 3.0 - v10 * 3.0;
  double v12 = (v7 - v9) * 3.0 - v9 * 3.0;
  *a2 = 1.0 - v10 * 3.0 - v11;
  a2[1] = v11;
  a2[2] = v10 * 3.0;
  a2[3] = 1.0 - v9 * 3.0 - v12;
  a2[4] = v12;
  a2[5] = v9 * 3.0;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UnitCurve.CubicSolver(double *a1)
{
  return UnitCurve.CubicSolver.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance UnitCurve.CubicSolver@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return UnitCurve.CubicSolver.init(from:)(a1, a2);
}

uint64_t UnitCurve.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  double v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v10(v9, a1, a2, v7);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  BinaryFloatingPoint.init<A>(_:)();
  uint64_t v18 = v20;
  double v11 = (int *)type metadata accessor for BezierTimingFunction();
  ((void (*)(char *, uint64_t, uint64_t))v10)(v9, a1 + v11[9], a2);
  BinaryFloatingPoint.init<A>(_:)();
  uint64_t v17 = v19;
  ((void (*)(char *, uint64_t, uint64_t))v10)(v9, a1 + v11[10], a2);
  BinaryFloatingPoint.init<A>(_:)();
  uint64_t v16 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v10)(v9, a1 + v11[11], a2);
  BinaryFloatingPoint.init<A>(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*((void *)v11 - 1) + 8))(a1, v11);
  uint64_t v13 = v19;
  uint64_t v14 = v17;
  *(void *)a3 = v18;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v13;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

double UnitCurveAnimation.duration.getter()
{
  return *(double *)v0;
}

void UnitCurveAnimation.duration.setter(double a1)
{
  *Swift::UInt64 v1 = a1;
}

uint64_t (*UnitCurveAnimation.duration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 UnitCurveAnimation.curve.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 8);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 UnitCurveAnimation.curve.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v4;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*UnitCurveAnimation.curve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 UnitCurveAnimation.init(curve:duration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3 = *(unsigned char *)(a1 + 32);
  *(double *)a2 = a3;
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 40) = v3;
  return result;
}

void UnitCurveAnimation.animate<A>(value:time:context:)(float64x2_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (a2 == MEMORY[0x263F8D538])
  {
    BOOL v18 = *v5 <= 0.0 || *v5 < a5;
    double v19 = 0.0;
    if (!v18)
    {
      double v21 = a5 / *v5;
      if (v21 > 1.0) {
        double v21 = 1.0;
      }
      if (v21 <= 0.0) {
        double v21 = 0.0;
      }
      double v20 = a1->f64[0];
      double v19 = v20 * UnitCurve.value(at:)(v21);
    }
    *(double *)a4 = v19;
    *(unsigned char *)(a4 + 8) = v18;
  }
  else
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    double v11 = *v5;
    if (v12 == a2)
    {
      BOOL v22 = v11 <= 0.0 || v11 < a5;
      float64x2_t v23 = 0uLL;
      float64x2_t v24 = 0uLL;
      if (!v22)
      {
        double v25 = a5 / v11;
        if (v25 > 1.0) {
          double v25 = 1.0;
        }
        if (v25 <= 0.0) {
          double v25 = 0.0;
        }
        float64x2_t v27 = a1[1];
        float64x2_t v28 = *a1;
        double v26 = UnitCurve.value(at:)(v25);
        float64x2_t v23 = vmulq_n_f64(v28, v26);
        float64x2_t v24 = vmulq_n_f64(v27, v26);
      }
      *(float64x2_t *)a4 = v23;
      *(float64x2_t *)(a4 + 16) = v24;
      *(unsigned char *)(a4 + 32) = v22;
    }
    else
    {
      if (v11 < a5 || v11 <= 0.0)
      {
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
        uint64_t v16 = a4;
        uint64_t v17 = 1;
      }
      else
      {
        double v13 = a5 / v11;
        if (v13 > 1.0) {
          double v13 = 1.0;
        }
        if (v13 <= 0.0) {
          double v13 = 0.0;
        }
        double v14 = UnitCurve.value(at:)(v13);
        VectorArithmetic.scaled(by:)(a2, a3, a4, v14);
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
        uint64_t v16 = a4;
        uint64_t v17 = 0;
      }
      v15(v16, v17, 1, a2);
    }
  }
}

uint64_t UnitCurveAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v9 = MEMORY[0x270FA5388](a1);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = *(double *)v4;
  if (*(double *)v4 < v9 || v12 <= 0.0)
  {
    BOOL v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    return v18(a4, 1, 1, a2);
  }
  else
  {
    char v13 = *(unsigned char *)(v4 + 40);
    double v14 = v9 / v12;
    if (v14 > 1.0) {
      double v14 = 1.0;
    }
    long long v15 = *(_OWORD *)(v4 + 24);
    if (v14 <= 0.0) {
      double v14 = 0.0;
    }
    long long v21 = *(_OWORD *)(v4 + 8);
    long long v22 = v15;
    char v23 = v13;
    uint64_t v20 = v8;
    double v16 = UnitCurve.velocity(at:)(v14);
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v11, 1.0 / v12);
    VectorArithmetic.scaled(by:)(a2, a3, a4, v16);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a4, 0, 1, a2);
  }
}

void UnitCurveAnimation.function.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v6 = v4 | v3;
    uint64_t v7 = v6 | v2 | v5;
    uint64_t v8 = v6 | v5;
    if (v8) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v2 == 2;
    }
    if (v9) {
      char v10 = 2;
    }
    else {
      char v10 = 3;
    }
    BOOL v11 = v2 == 1 && v8 == 0;
    uint64_t v5 = 0;
    if (v11) {
      char v10 = 1;
    }
    BOOL v9 = v7 == 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    if (v9)
    {
      uint64_t v5 = 0;
      char v10 = 0;
    }
  }
  else
  {
    char v10 = 4;
  }
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v10;
}

void UnitCurveAnimation.hash(into:)()
{
  double v1 = *(double *)(v0 + 8);
  double v2 = *(double *)(v0 + 16);
  double v3 = *(double *)(v0 + 24);
  double v4 = *(double *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)v0;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if (v5 == 1)
  {
    if (*(void *)&v3 | *(void *)&v2 | *(void *)&v1 | *(void *)&v4)
    {
      uint64_t v7 = *(void *)&v3 | *(void *)&v2 | *(void *)&v4;
      if (*(void *)&v1 == 1 && v7 == 0)
      {
        Swift::UInt v9 = 1;
      }
      else if (*(void *)&v1 != 2 || v7)
      {
        Swift::UInt v9 = 3;
      }
      else
      {
        Swift::UInt v9 = 2;
      }
    }
    else
    {
      Swift::UInt v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  else
  {
    Hasher._combine(_:)(4uLL);
    UnitPoint.hash(into:)(v1, v2);
    UnitPoint.hash(into:)(v3, v4);
  }
}

Swift::Int UnitCurveAnimation.hashValue.getter()
{
  return Hasher._finalize()();
}

void protocol witness for InternalCustomAnimation.function.getter in conformance UnitCurveAnimation(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v6 = v4 | v3;
    uint64_t v7 = v6 | v2 | v5;
    uint64_t v8 = v6 | v5;
    if (v8) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v2 == 2;
    }
    if (v9) {
      char v10 = 2;
    }
    else {
      char v10 = 3;
    }
    BOOL v11 = v2 == 1 && v8 == 0;
    uint64_t v5 = 0;
    if (v11) {
      char v10 = 1;
    }
    BOOL v9 = v7 == 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    if (v9)
    {
      uint64_t v5 = 0;
      char v10 = 0;
    }
  }
  else
  {
    char v10 = 4;
  }
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v10;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitCurveAnimation()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitCurveAnimation()
{
  return Hasher._finalize()();
}

uint64_t specialized static UnitCurveAnimation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  float64x2_t v2 = *(float64x2_t *)(a1 + 24);
  float64x2_t v3 = *(float64x2_t *)(a1 + 8);
  float64x2_t v4 = *(float64x2_t *)(a2 + 24);
  float64x2_t v5 = *(float64x2_t *)(a2 + 8);
  if (*(unsigned char *)(a1 + 40) != 1) {
    return (*(unsigned char *)(a2 + 40) & 1) == 0
  }
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v3, v5), (int32x4_t)vceqq_f64(v2, v4))), 0xFuLL))) & 1) != 0;
  int8x16_t v6 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0), (int8x16_t)v3);
  if (!(v6.i64[1] | *(void *)&v3.f64[0] | *(void *)&v2.f64[1])) {
    return *(unsigned char *)(a2 + 40)
  }
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4, 0), *(int8x16_t *)&v5).i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1]);
  uint64_t v7 = v6.i64[1] | *(void *)&v2.f64[1];
  if (*(void *)&v3.f64[0] == 1 && !v7)
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
    int8x16_t v8 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    BOOL v9 = v8.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1] && *(void *)&v5.f64[0] == 1;
    return v9 && (v8.i64[1] | *(void *)&v4.f64[1]) == 0;
  }
  if (*(void *)&v3.f64[0] == 2 && !v7)
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
    int8x16_t v12 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
    if (!(v12.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1])) {
      return 0;
    }
    uint64_t v13 = v12.i64[1] | *(void *)&v4.f64[1];
    if (*(void *)&v5.f64[0] == 1 && !v13) {
      return 0;
    }
    return *(void *)&v5.f64[0] == 2 && !v13;
  }
  if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
    return 0;
  }
  int8x16_t v14 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0), (int8x16_t)v5);
  if (!(v14.i64[1] | *(void *)&v5.f64[0] | *(void *)&v4.f64[1])) {
    return 0;
  }
  uint64_t result = 1;
  if ((unint64_t)(*(void *)&v5.f64[0] - 1) <= 1 && !(v14.i64[1] | *(void *)&v4.f64[1])) {
    return 0;
  }
  return result;
}

BOOL specialized static UnitCurve.Function.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  if (*(unsigned char *)(a1 + 32) != 1)
  {
    if (*(unsigned char *)(a2 + 32)) {
      return 0;
    }
    if (v2 == v6 && v3 == v7) {
      return v4 == v8 && v5 == v9;
    }
    return 0;
  }
  uint64_t v10 = *(void *)&v5 | *(void *)&v3;
  if (!(v10 | *(void *)&v2 | *(void *)&v4))
  {
    if (*(unsigned char *)(a2 + 32)) {
      return (*(void *)&v9 | *(void *)&v7 | *(void *)&v6 | *(void *)&v8) == 0;
    }
    return 0;
  }
  uint64_t v11 = v10 | *(void *)&v4;
  if (*(void *)&v2 == 1 && v11 == 0)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v19 = *(void *)&v9 | *(void *)&v7;
      if (v19 | *(void *)&v6 | *(void *)&v8)
      {
        if (*(void *)&v6 == 1 && !(v19 | *(void *)&v8)) {
          return 1;
        }
      }
    }
    return 0;
  }
  if (*(void *)&v2 != 2 || v11 != 0)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v14 = *(void *)&v9 | *(void *)&v7;
      if (v14 | *(void *)&v6 | *(void *)&v8)
      {
        uint64_t v15 = v14 | *(void *)&v8;
        if (*(void *)&v6 != 1 || v15) {
          return *(void *)&v6 != 2 || v15 != 0;
        }
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  uint64_t v20 = *(void *)&v9 | *(void *)&v7;
  if (!(v20 | *(void *)&v6 | *(void *)&v8)) {
    return 0;
  }
  uint64_t v21 = v20 | *(void *)&v8;
  if (*(void *)&v6 == 1 && !v21) {
    return 0;
  }
  return *(void *)&v6 == 2 && v21 == 0;
}

unint64_t lazy protocol witness table accessor for type UnitCurve.Function and conformance UnitCurve.Function()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function;
  if (!lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve.Function and conformance UnitCurve.Function);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurve and conformance UnitCurve()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve;
  if (!lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve and conformance UnitCurve);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver;
  if (!lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurve.CubicSolver and conformance UnitCurve.CubicSolver);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for UnitCurveAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitCurve()
{
  return &type metadata for UnitCurve;
}

uint64_t storeEnumTagSinglePayload for UnitCurve.Function(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for UnitCurve.Function(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for UnitCurve.Function(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 32) = 1;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnitCurve.Function()
{
  return &type metadata for UnitCurve.Function;
}

ValueMetadata *type metadata accessor for UnitCurve.CubicSolver()
{
  return &type metadata for UnitCurve.CubicSolver;
}

ValueMetadata *type metadata accessor for UnitCurveAnimation()
{
  return &type metadata for UnitCurveAnimation;
}

uint64_t static MatchedGeometryProperties.size.getter()
{
  return 2;
}

uint64_t static MatchedGeometryProperties.clipRect.getter()
{
  return 4;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MatchedGeometryProperties@<X0>(_DWORD *a1@<X8>)
{
  int v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t _MatchedGeometryEffect.init(id:namespace:properties:anchor:isSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for _MatchedGeometryEffect();
  *(void *)(a6 + *(int *)(result + 36)) = a2;
  uint64_t v15 = a6 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v15 = a3;
  *(double *)(v15 + 8) = a7;
  *(double *)(v15 + 16) = a8;
  *(unsigned char *)(v15 + 24) = a4;
  return result;
}

uint64_t View.matchedGeometryEffect<A, B>(id:in:clipShape:properties:anchor:isSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v47 = a6;
  int v42 = a4;
  int v43 = a5;
  uint64_t v44 = a3;
  uint64_t v46 = a9;
  v38[1] = a14;
  uint64_t v39 = a1;
  uint64_t v40 = *(void *)(a8 - 8);
  uint64_t v41 = a2;
  uint64_t v45 = a12;
  MEMORY[0x270FA5388](a1);
  uint64_t v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v22);
  float64x2_t v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v25;
  v38[0] = v25;
  uint64_t v27 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t v28 = v27 - 8;
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)v38 - v29;
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v50 = v26;
  uint64_t v51 = a14;
  uint64_t v31 = type metadata accessor for MatchedGeometryEffect2();
  uint64_t v32 = *(void *)(v31 - 8);
  double v33 = MEMORY[0x270FA5388](v31);
  char v35 = (char *)v38 - v34;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v24, v39, a7, v33);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v30, v24, a7);
  *(void *)&v30[*(int *)(v28 + 44)] = v41;
  uint64_t v36 = &v30[*(int *)(v28 + 48)];
  *(_DWORD *)uint64_t v36 = v42;
  *((double *)v36 + 1) = a10;
  *((double *)v36 + 2) = a11;
  v36[24] = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v19, v44, a8);
  MatchedGeometryEffect2.init(base:clipShape:)((uint64_t)v30, (uint64_t)v19, a8, (uint64_t)v35);
  View.modifier<A>(_:)(v35, v47, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, v31);
}

uint64_t MatchedGeometryEffect2.init(base:clipShape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for _MatchedGeometryEffect();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for MatchedGeometryEffect2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v9 + 52), a2, a3);
}

uint64_t _MatchedGeometryEffect.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _MatchedGeometryEffect.id.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_MatchedGeometryEffect.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _MatchedGeometryEffect.namespace.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t _MatchedGeometryEffect.namespace.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_MatchedGeometryEffect.namespace.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _MatchedGeometryEffect.args.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40) + 8);
}

uint64_t _MatchedGeometryEffect.args.setter(uint64_t result, char a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = v5 + *(int *)(a3 + 40);
  *(_DWORD *)uint64_t v6 = result;
  *(double *)(v6 + 8) = a4;
  *(double *)(v6 + 16) = a5;
  *(unsigned char *)(v6 + 24) = a2;
  return result;
}

uint64_t (*_MatchedGeometryEffect.args.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t lazy protocol witness table accessor for type MatchedGeometryProperties and conformance MatchedGeometryProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties;
  if (!lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryProperties and conformance MatchedGeometryProperties);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _MatchedGeometryEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    int8x16_t v12 = (long long *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v13 = *v12;
    uint64_t v14 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(_OWORD *)((char *)v14 + 9) = *(long long *)((char *)v12 + 9);
    *uint64_t v14 = v13;
  }
  else
  {
    uint64_t v9 = *a2;
    *double v4 = *a2;
    double v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithTake for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *(_OWORD *)((char *)v10 + 9);
  *uint64_t v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = v11;
  return a1;
}

uint64_t assignWithTake for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  return a1;
}

uint64_t static MatchedGeometryEffect2._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v12 = *a2;
  uint64_t v21 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  unsigned int v15 = *((_DWORD *)a2 + 6);
  unsigned int v16 = *((_DWORD *)a2 + 7);
  int v17 = *((_DWORD *)a2 + 8);
  int v22 = *((_DWORD *)a2 + 9);
  int v25 = *((_DWORD *)a2 + 20);
  unsigned int v39 = *a1;
  unsigned int v23 = v39;
  *(void *)&long long v30 = a5;
  *((void *)&v30 + 1) = a6;
  uint64_t v31 = a7;
  unint64_t v32 = a8;
  type metadata accessor for MatchedGeometryEffect2();
  type metadata accessor for _GraphValue();
  long long v29 = *(_OWORD *)(a2 + 5);
  long long v24 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:), a6, v40);
  *(void *)&long long v30 = v12;
  DWORD2(v30) = v13;
  uint64_t v31 = v14;
  unint64_t v32 = __PAIR64__(v16, v15);
  int v33 = v17;
  int v34 = v22;
  *(void *)&long long v35 = v29;
  (*(void (**)(int *, long long *, uint64_t))(*(void *)(a8 + 8) + 48))(v40, &v30, a6);
  LODWORD(v30) = v23;
  uint64_t v19 = type metadata accessor for _MatchedGeometryEffect();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:), v19, &v39);
  *(void *)&long long v30 = v21;
  DWORD2(v30) = v13;
  uint64_t v31 = v14;
  unint64_t v32 = __PAIR64__(v16, v15);
  int v33 = v17;
  int v34 = v22;
  long long v35 = v29;
  long long v36 = v24;
  uint64_t v37 = v18;
  int v38 = v25;
  return static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(&v39, &v30, v40[0], a3, a4, a6, a9, a8);
}

uint64_t closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for MatchedGeometryEffect2();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v9[2] = type metadata accessor for MatchedGeometryEffect2();
  uint64_t v10 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v10, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v11;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MatchedGeometryEffect2<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t MatchedGeometryScope.releaseFrame(index:owner:)(int64_t a1, void *a2)
{
  uint64_t v5 = v2;
  uint64_t v8 = v2 + 14;
  uint64_t result = swift_beginAccess();
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = v2[14];
  if (*(void *)(v10 + 16) <= (unint64_t)a1)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
    *uint64_t v8 = (uint64_t)a2;
    goto LABEL_9;
  }
  uint64_t v4 = a1 << 6;
  uint64_t v11 = *(void *)(v10 + (a1 << 6) + 80);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return result;
  }
  unint64_t v3 = 0;
  uint64_t v13 = (int *)(v11 + 32);
  while (1)
  {
    int v14 = *v13;
    v13 += 7;
    if (v14 == a2) {
      break;
    }
    if (v12 == ++v3) {
      return result;
    }
  }
  swift_beginAccess();
  a2 = (void *)*v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v8 = (uint64_t)a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  if (a2[2] <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  specialized Array.remove(at:)(v3, (uint64_t)v17);
  uint64_t v2 = (void *)*v8;
  swift_endAccess();
  if (v2[2] <= a1)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *uint64_t v8 = (uint64_t)v2;
    goto LABEL_13;
  }
  if (!*(void *)(*(void *)((char *)v2 + v4 + 80) + 16))
  {
    outlined init with copy of AnyHashable((uint64_t)v2 + v4 + 40, (uint64_t)v17);
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v17);
    swift_endAccess();
    outlined destroy of AnyHashable((uint64_t)v17);
    lazy protocol witness table accessor for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey();
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    uint64_t v2 = (void *)v5[14];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v5[14] = v2;
    if (result)
    {
LABEL_16:
      if (v2[2] <= a1)
      {
        __break(1u);
        return result;
      }
      outlined assign with take of AnyHashable((uint64_t)v17, (uint64_t)v2 + v4 + 40);
      return swift_endAccess();
    }
LABEL_27:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    *uint64_t v8 = result;
    goto LABEL_16;
  }
  swift_beginAccess();
  uint64_t v2 = (void *)*v8;
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v8 = (uint64_t)v2;
  if ((v16 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_13:
  if (v2[2] <= a1)
  {
    __break(1u);
    goto LABEL_27;
  }
  ++*(_DWORD *)((char *)v2 + v4 + 88);
  return swift_endAccess();
}

uint64_t sub_245C03768()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C037D8()
{
  return swift_getWitnessTable();
}

uint64_t destroy for MatchedGeometryScope.Frame(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

ValueMetadata *type metadata accessor for MatchedGeometryScope.Frame()
{
  return &type metadata for MatchedGeometryScope.Frame;
}

uint64_t *initializeBufferWithCopyOfBuffer for MatchedGeometryEffect2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 25;
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 & ~v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    char v16 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v17 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *char v16 = *v17;
    uint64_t v18 = (_OWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (long long *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = *v19;
    *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)v19 + 9);
    *uint64_t v18 = v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v15, ((unint64_t)a2 + v10) & v15, v7);
  }
  return v4;
}

uint64_t destroy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (a1
      + *(unsigned __int8 *)(v5 + 80)
      + ((((*(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 25) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = *(_OWORD *)((char *)v11 + 9);
  *unint64_t v10 = *v11;
  *(_OWORD *)((char *)v10 + 9) = v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 25;
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((v15 + a1) & ~v14, (v15 + a2) & ~v14);
  return a1;
}

uint64_t assignWithCopy for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  uint64_t v8 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v8;
  unint64_t v10 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v10 = *(_DWORD *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 25;
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((v14 + a1) & ~v13, (v14 + a2) & ~v13);
  return a1;
}

uint64_t initializeWithTake for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = *(_OWORD *)((char *)v11 + 9);
  *unint64_t v10 = *v11;
  *(_OWORD *)((char *)v10 + 9) = v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 25;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((v15 + a1) & ~v14, (v15 + a2) & ~v14);
  return a1;
}

uint64_t assignWithTake for MatchedGeometryEffect2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  uint64_t v8 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v8;
  unint64_t v10 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v10 = *(_DWORD *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = (((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 25;
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((v14 + a1) & ~v13, (v14 + a2) & ~v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedGeometryEffect2(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  if (v5 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v9 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v14 = ((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 25;
  int v15 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_27;
  }
  uint64_t v16 = (v14 & ~v11) + v12;
  char v17 = 8 * v16;
  if (v16 > 3) {
    goto LABEL_10;
  }
  unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
  if (HIWORD(v19))
  {
    int v18 = *(_DWORD *)((char *)a1 + v16);
    if (v18) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v19 <= 0xFF)
    {
      if (v19 < 2) {
        goto LABEL_27;
      }
LABEL_10:
      int v18 = *((unsigned __int8 *)a1 + v16);
      if (!*((unsigned char *)a1 + v16)) {
        goto LABEL_27;
      }
LABEL_17:
      int v20 = (v18 - 1) << v17;
      if (v16 > 3) {
        int v20 = 0;
      }
      if (v16)
      {
        if (v16 <= 3) {
          int v21 = (v14 & ~v11) + v12;
        }
        else {
          int v21 = 4;
        }
        switch(v21)
        {
          case 2:
            int v22 = *a1;
            break;
          case 3:
            int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v22 = *(_DWORD *)a1;
            break;
          default:
            int v22 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v22 = 0;
      }
      return v13 + (v22 | v20) + 1;
    }
    int v18 = *(unsigned __int16 *)((char *)a1 + v16);
    if (*(unsigned __int16 *)((char *)a1 + v16)) {
      goto LABEL_17;
    }
  }
LABEL_27:
  if (v8 < v9) {
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(((unint64_t)a1 + v14) & ~v11, v9, v6);
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v24 = *(unsigned __int8 *)((((((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 24);
  if (v24 < 2) {
    return 0;
  }
  return ((v24 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for MatchedGeometryEffect2(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  unint64_t v15 = ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25;
  size_t v16 = ((v15 + v13) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v17 = a3 >= v14;
  unsigned int v18 = a3 - v14;
  if (v18 != 0 && v17)
  {
    if (v16 <= 3)
    {
      unsigned int v22 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
      if (HIWORD(v22))
      {
        int v19 = 4;
      }
      else if (v22 >= 0x100)
      {
        int v19 = 2;
      }
      else
      {
        int v19 = v22 > 1;
      }
    }
    else
    {
      int v19 = 1;
    }
  }
  else
  {
    int v19 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v20 = ~v14 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      if (v16)
      {
        int v23 = v20 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v16] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v21;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v16] = v21;
        return;
      default:
        return;
    }
  }
  switch(v19)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x245C04590);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= v11)
        {
          if (v8 >= a2)
          {
            if (v7 < 0xFE)
            {
              unint64_t v27 = (((unint64_t)&a1[v12 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(void *)(v27 + 8) = 0;
                *(void *)(v27 + 16) = 0;
                *(unsigned char *)(v27 + 24) = 0;
                *(void *)unint64_t v27 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v27 + 24) = a2 + 1;
              }
            }
            else
            {
              uint64_t v26 = *(void (**)(char *))(v6 + 56);
              v26(a1);
            }
          }
          else
          {
            if (v15 >= 4) {
              unsigned int v25 = ~v8 + a2;
            }
            else {
              unsigned int v25 = (~(_BYTE)v8 + a2);
            }
            bzero(a1, ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25);
            if (v15 == 1) {
              *a1 = v25;
            }
            else {
              *(_DWORD *)a1 = v25;
            }
          }
        }
        else
        {
          unsigned int v24 = *(void (**)(unint64_t))(v10 + 56);
          v24((unint64_t)&a1[v15 + v13] & ~v13);
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static MatchedGeometryEffect2._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance SharedFrame@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance SharedFrame(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 24);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    double result = swift_bridgeObjectRelease();
    if (!v7) {
      return result;
    }
  }
  else if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  unint64_t v3 = *(void *)(v1 + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    double result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    double result = swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_5:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      for (uint64_t i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x24C523D60](i, v3);
        }
        else
        {
          uint64_t v6 = *(void *)(v3 + 8 * i + 32);
          swift_retain();
        }
        (*(void (**)(void))(*(void *)v6 + 96))();
        swift_release();
      }
    }
  }
  double result = swift_bridgeObjectRelease_n();
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t MatchedSharedFrame.destroy()()
{
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    uint64_t result = MatchedGeometryScope.releaseFrame(index:owner:)(*(void *)(v0 + 40), (void *)*(unsigned int *)(v0 + 52));
    *(void *)(v0 + 40) = 0;
    *(unsigned char *)(v0 + 48) = 1;
  }
  return result;
}

uint64_t static MatchedSharedFrame.willRemove(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MatchedSharedFrame();
  if ((*(unsigned char *)(v1 + 48) & 1) == 0)
  {
    uint64_t v2 = MatchedGeometryScope.releaseFrame(index:owner:)(*(void *)(v1 + 40), (void *)*(unsigned int *)(v1 + 52));
    *(void *)(v1 + 40) = 0;
    *(unsigned char *)(v1 + 48) = 1;
  }
  MEMORY[0x270FA5388](v2);
  MEMORY[0x270FA5388](v3);
  return AGGraphMutateAttribute();
}

uint64_t static MatchedSharedFrame.didReinsert(attribute:)()
{
  return AGGraphMutateAttribute();
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance MatchedSharedFrame<A>()
{
  return static MatchedSharedFrame.willRemove(attribute:)();
}

uint64_t protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance MatchedSharedFrame<A>()
{
  return static MatchedSharedFrame.didReinsert(attribute:)();
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance MatchedSharedFrame<A>()
{
  return MatchedSharedFrame.destroy()();
}

uint64_t MatchedDisplayList.sharedFrame.getter(uint64_t a1)
{
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  uint64_t Value = AGGraphGetValue();
  char v3 = *(unsigned char *)(Value + 48);
  uint64_t v4 = *(unsigned int *)(Value + 52);
  long long v5 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(unsigned char *)(a1 + 48) = v3;
  return v4;
}

uint64_t MatchedDisplayList.clipShape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = *(_DWORD *)(v2 + 32);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5 == *MEMORY[0x263F288F8])
  {
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

double protocol witness for static Rule.initialValue.getter in conformance MatchedFrame@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

float64x2_t *protocol witness for Rule.value.getter in conformance MatchedFrame@<X0>(uint64_t a1@<X8>)
{
  return MatchedFrame.value.getter(*v1, v1[2], a1);
}

uint64_t specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  SharedFrame.removeListeners()();
  uint64_t result = swift_release();
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t assignWithCopy for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t assignWithTake for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedGeometryScope.Frame(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 61)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedGeometryScope.Frame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 61) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 61) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MatchedDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 37)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MatchedDisplayList(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 37) = v3;
  return result;
}

void *type metadata accessor for MatchedFrame()
{
  return &unk_26FA45E20;
}

uint64_t storeEnumTagSinglePayload for MatchedGeometryScope.Frame.View(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MatchedGeometryScope.Frame.View()
{
  return &type metadata for MatchedGeometryScope.Frame.View;
}

unint64_t instantiation function for generic protocol witness table for MatchedFrame(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245C04DF4()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t sub_245C04E34()
{
  return swift_deallocObject();
}

uint64_t outlined assign with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey;
  if (!lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey;
  if (!lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedGeometryScope.EmptyKey and conformance MatchedGeometryScope.EmptyKey);
  }
  return result;
}

uint64_t outlined assign with take of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>()
{
  if (!lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    }
  }
}

uint64_t partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter(uint64_t *a1, unsigned char *a2)
{
  return closure #1 in Transaction.animationIgnoringTransitionPhase.getter(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t partial apply for closure #1 in static MatchedSharedFrame.didReinsert(attribute:)(uint64_t result)
{
  *(unsigned char *)(result + 60) = 0;
  return result;
}

uint64_t partial apply for closure #1 in static MatchedSharedFrame.willRemove(attribute:)(uint64_t result)
{
  *(unsigned char *)(result + 60) = 1;
  return result;
}

void *type metadata accessor for MatchedGeometryScope.EmptyKey()
{
  return &unk_26FA61C50;
}

uint64_t destroy for SharedFrame()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t assignWithCopy for SharedFrame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy52_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SharedFrame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedFrame(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 52)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharedFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 52) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SharedFrame()
{
  return &unk_26FA43AA0;
}

unint64_t instantiation function for generic protocol witness table for SharedFrame(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame();
  *(void *)(a1 + 8) = result;
  return result;
}

objc_class *static CoreColor.platformColor(red:green:blue:alpha:)(double a1, double a2, double a3, double a4)
{
  return CorePlatformColorForRGBA(0, a1, a2, a3, a4);
}

uint64_t EnvironmentValues.cuiNamedColorProvider.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.cuiNamedColorProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    uint64_t v6 = v8;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void (*EnvironmentValues.cuiNamedColorProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.cuiNamedColorProvider.modify;
}

void EnvironmentValues.cuiNamedColorProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t sub_245C055EC(uint64_t *a1)
{
  return EnvironmentValues.cuiNamedColorProvider.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static CoreUINamedColorProvider.effectiveCGColor(cuiColor:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for EnvironmentValues.CoreUINamedColorProviderKey()
{
  return &type metadata for EnvironmentValues.CoreUINamedColorProviderKey;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GradientLayer.Function(long long *a1, long long *a2)
{
  outlined init with take of GradientLayer.Function(a1, (uint64_t)v4);
  outlined init with take of GradientLayer.Function(a2, (uint64_t)v5);
  return specialized static GradientLayer.Function.== infix(_:_:)(v4, v5);
}

BOOL specialized static GradientLayer.Function.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of GradientLayer.Function(a1, (uint64_t)&v24);
  switch(v28)
  {
    case 1:
      double v9 = v24;
      double v10 = v25;
      double v12 = v26;
      double v11 = v27;
      outlined init with take of GradientLayer.Function(a2, (uint64_t)&v19);
      if (v23 != 1) {
        return 0;
      }
      goto LABEL_14;
    case 2:
      double v9 = v24;
      double v10 = v25;
      double v12 = v26;
      double v11 = v27;
      outlined init with take of GradientLayer.Function(a2, (uint64_t)&v19);
      if (v23 != 2) {
        return 0;
      }
LABEL_14:
      if (v9 != v19 || v10 != v20 || v12 != v21) {
        return 0;
      }
      double v15 = v22;
      return v11 == v15;
    case 3:
      double v16 = v24;
      double v17 = v25;
      double v11 = v26;
      outlined init with take of GradientLayer.Function(a2, (uint64_t)&v19);
      if (v23 != 3) {
        return 0;
      }
      if (v16 != v19 || v17 != v20) {
        return 0;
      }
      double v15 = v21;
      return v11 == v15;
    default:
      double v3 = v24;
      double v4 = v25;
      double v6 = v26;
      double v5 = v27;
      outlined init with take of GradientLayer.Function(a2, (uint64_t)&v19);
      if (v23) {
        return 0;
      }
      if (v3 != v19 || v4 != v20) {
        return 0;
      }
      return v5 == v22 && v6 == v21;
  }
}

uint64_t specialized static GradientLayer.updateAsync(layer:oldSize:newSize:oldFunction:newFunction:oldGradient:newGradient:oldBounds:newBounds:)(Class *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, CGFloat a17)
{
  int v20 = *(unsigned __int8 *)(a4 + 8);
  if (v20 != *(unsigned __int8 *)(a5 + 8)) {
    return 0;
  }
  uint64_t v26 = *(void *)a4;
  uint64_t v27 = *(void *)a5;
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a2, (uint64_t)v65, a6, a7, a10, a11, a12, a13);
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a3, (uint64_t)v70, a8, a9, a14, a15, a16, a17);
  if (v71 != v66 || v72 != v67)
  {
    id v29 = objc_msgSend(self, sel_valueWithPoint_, v71, v72);
    v75.super.Class isa = *a1;
    v30._countAndFlagsBits = 0x696F507472617473;
    v30._object = (void *)0xEA0000000000746ELL;
    *(void *)&v75._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v29, v30, v75, v31);
  }
  if (v73 != v68 || v74 != v69)
  {
    id v33 = objc_msgSend(self, sel_valueWithPoint_, v73, v74);
    v76.super.Class isa = *a1;
    v34._countAndFlagsBits = 0x746E696F50646E65;
    v34._object = (void *)0xE800000000000000;
    *(void *)&v76._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v33, v34, v76, v35);
  }
  if ((specialized static Array<A>.== infix(_:_:)(v26, v27) & 1) != 0
    && specialized static GradientLayer.Function.== infix(_:_:)(a3, a2))
  {
    goto LABEL_28;
  }
  uint64_t v63 = v26;
  char v64 = v20;
  unint64_t v36 = specialized static GradientLayer.clippedValues(gradient:function:)(&v63, a2);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v63 = v27;
  char v64 = v20;
  unint64_t v41 = specialized static GradientLayer.clippedValues(gradient:function:)(&v63, a3);
  unint64_t v42 = v41;
  unint64_t v44 = v43;
  unint64_t v46 = v45;
  if (!(v41 >> 62))
  {
    uint64_t v47 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!(v36 >> 62)) {
      goto LABEL_16;
    }
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v47 == v62)
    {
LABEL_17:
      unsigned __int8 v48 = specialized static Array<A>.== infix(_:_:)(v44, v38);
      swift_bridgeObjectRelease();
      if (v48)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for CGColorRef(0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        v77.super.Class isa = *a1;
        v50._countAndFlagsBits = 0x73726F6C6F63;
        v50._object = (void *)0xE600000000000000;
        *(void *)&v77._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)isa, v50, v77, v51);
        swift_bridgeObjectRelease();
      }
      unsigned __int8 v52 = specialized static Array<A>.== infix(_:_:)(v42, v36);
      swift_bridgeObjectRelease();
      if (v52)
      {
        swift_bridgeObjectRelease();
        if (v46) {
          goto LABEL_22;
        }
      }
      else
      {
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
        Class v54 = Array._bridgeToObjectiveC()().super.isa;
        v78.super.Class isa = *a1;
        v55._countAndFlagsBits = 0x6E6F697461636F6CLL;
        v55._object = (void *)0xE900000000000073;
        *(void *)&v78._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v54, v55, v78, v56);
        swift_bridgeObjectRelease();

        if (v46)
        {
LABEL_22:
          if (v40)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unsigned __int8 v53 = specialized static Array<A>.== infix(_:_:)(v46, v40);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            if (v53)
            {
              swift_bridgeObjectRelease();
LABEL_28:
              outlined release of GradientLayer.GradientGeometry((uint64_t)v70);
              outlined release of GradientLayer.GradientGeometry((uint64_t)v65);
              return 1;
            }
          }
          type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
          Class v59 = Array._bridgeToObjectiveC()().super.isa;
          goto LABEL_30;
        }
      }
      if (!v40) {
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      Class v59 = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
LABEL_30:
      v57.super.Class isa = *a1;
      v61._countAndFlagsBits = 0x6C6F707265746E69;
      v61._object = (void *)0xEE00736E6F697461;
      *(void *)&v57._attr.refcount = 0;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v59, v61, v57, v58);

      outlined release of GradientLayer.GradientGeometry((uint64_t)v70);
      outlined release of GradientLayer.GradientGeometry((uint64_t)v65);
      swift_bridgeObjectRelease();
      return 1;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v36 >> 62) {
    goto LABEL_32;
  }
LABEL_16:
  if (v47 == *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_17;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of GradientLayer.GradientGeometry((uint64_t)v70);
  outlined release of GradientLayer.GradientGeometry((uint64_t)v65);
  return 0;
}

uint64_t sub_245C05D18()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for GradientLayer.Function(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientLayer.Function(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GradientLayer.Function(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for GradientLayer.Function(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GradientLayer.Function()
{
  return &type metadata for GradientLayer.Function;
}

uint64_t *initializeBufferWithCopyOfBuffer for AlignedTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    double v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

char *initializeWithCopy for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *assignWithCopy for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for AlignedTimelineSchedule.Entries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C067C4);
}

uint64_t sub_245C067C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DateComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C068EC);
}

uint64_t sub_245C068EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DateComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for AlignedTimelineSchedule.Entries()
{
  uint64_t result = type metadata singleton initialization cache for AlignedTimelineSchedule.Entries;
  if (!type metadata singleton initialization cache for AlignedTimelineSchedule.Entries) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AlignedTimelineSchedule.Entries()
{
  _s10Foundation4DateVSgMaTm_2(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t AlignedTimelineSchedule.Entries.init(startDate:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  Swift::Bool v58 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  MEMORY[0x270FA5388](v9);
  Class v54 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v53 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unsigned __int8 v52 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v51 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v64 = (uint64_t)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  CALayer v57 = (char *)&v44 - v16;
  uint64_t v17 = type metadata accessor for Calendar();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  double v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v6;
  uint64_t v62 = v7;
  double v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  uint64_t v23 = v7 + 56;
  double v22 = v24;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v24)(a3, 1, 1, v6, v19);
  *(void *)(a3 + *(int *)(type metadata accessor for AlignedTimelineSchedule.Entries() + 20)) = a2;
  unint64_t v25 = NSCalendarUnit.smallerUnits.getter(a2);
  DateComponents.init(zeroingUnits:)(v25);
  static Calendar.current.getter();
  uint64_t v63 = a1;
  char v26 = Calendar.date(_:matchesComponents:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v50 = v17;
  v27(v21, v17);
  if (v26)
  {
    outlined destroy of Date?(a3, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
    uint64_t v28 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(a3, v63, v61);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v22)(a3, 0, 1, v28);
  }
  else
  {
    uint64_t v46 = v23;
    uint64_t v47 = a3;
    unsigned __int8 v48 = v22;
    static Calendar.current.getter();
    uint64_t v30 = *MEMORY[0x263F07780];
    unint64_t v45 = v27;
    uint64_t v31 = v51;
    unint64_t v32 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 104))(v49, v30, v59);
    Swift::String v34 = v52;
    uint64_t v33 = v53;
    (*(void (**)(char *, void, uint64_t))(v53 + 104))(v52, *MEMORY[0x263F077F0], v60);
    unint64_t v36 = v54;
    uint64_t v35 = v55;
    uint64_t v37 = v56;
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, *MEMORY[0x263F07800], v56);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v60);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v59);
    v45(v21, v50);
    uint64_t v38 = v62;
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
    uint64_t v40 = v58;
    uint64_t v41 = v61;
    v39(v58, v63, v61);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v64, 1, v41) == 1)
    {
      uint64_t v42 = (uint64_t)v57;
      v39(v57, (uint64_t)v40, v41);
      outlined destroy of Date?(v64, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
      uint64_t v42 = (uint64_t)v57;
      v39(v57, v64, v41);
    }
    uint64_t v43 = v47;
    v48(v42, 0, 1, v41);
    return outlined assign with take of Date?(v42, v43);
  }
}

unint64_t NSCalendarUnit.smallerUnits.getter(uint64_t a1)
{
  if (one-time initialization token for order != -1) {
    goto LABEL_26;
  }
  while (1)
  {
    unsigned int v3 = static NSCalendarUnit.order;
    uint64_t v4 = *((void *)static NSCalendarUnit.order + 2);
    if (!v4) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v5 = *((void *)static NSCalendarUnit.order + 4);
    if ((v5 & ~a1) == 0) {
      break;
    }
    if (v4 == 1) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v12 = 5;
    unint64_t v1 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v13 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      uint64_t v5 = *((void *)static NSCalendarUnit.order + v12);
      if ((v5 & ~a1) == 0) {
        goto LABEL_4;
      }
      ++v12;
      if (v13 == v4) {
        return v1;
      }
    }
    __break(1u);
LABEL_26:
    swift_once();
  }
LABEL_4:
  uint64_t v6 = specialized Collection<>.firstIndex(of:)(v5, (uint64_t)static NSCalendarUnit.order);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v3[2];
    if (v8 < v6)
    {
      __break(1u);
    }
    else if ((v6 & 0x8000000000000000) == 0)
    {
      if (v8 == v6) {
        unint64_t v1 = v3[2];
      }
      else {
        unint64_t v1 = v6 + 1;
      }
      if (v8 >= v1)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        uint64_t v9 = swift_dynamicCastClass();
        if (!v9)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = MEMORY[0x263F8EE78];
        }
        uint64_t v10 = *(void *)(v9 + 16);
        swift_release();
        if (v10 == v8 - v1)
        {
          unint64_t v1 = swift_dynamicCastClass();
          swift_bridgeObjectRelease();
          if (v1) {
            return v1;
          }
          unint64_t v1 = MEMORY[0x263F8EE78];
          goto LABEL_16;
        }
LABEL_30:
        swift_bridgeObjectRelease();
        unint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v3, (uint64_t)(v3 + 4), v1, (2 * v8) | 1);
LABEL_16:
        swift_bridgeObjectRelease();
        return v1;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_29;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t DateComponents.init(zeroingUnits:)(uint64_t a1)
{
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - v3;
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Calendar?, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v12 - v6;
  uint64_t v8 = type metadata accessor for Calendar();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  if (specialized Sequence<>.contains(_:)(4, a1)) {
    DateComponents.year.setter();
  }
  if (specialized Sequence<>.contains(_:)(8, a1)) {
    DateComponents.month.setter();
  }
  if (specialized Sequence<>.contains(_:)(16, a1)) {
    DateComponents.day.setter();
  }
  if (specialized Sequence<>.contains(_:)(32, a1)) {
    DateComponents.hour.setter();
  }
  if (specialized Sequence<>.contains(_:)(64, a1)) {
    DateComponents.minute.setter();
  }
  if (specialized Sequence<>.contains(_:)(128, a1)) {
    DateComponents.second.setter();
  }
  char v10 = specialized Sequence<>.contains(_:)(0x8000, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10) {
    return DateComponents.nanosecond.setter();
  }
  return result;
}

uint64_t AlignedTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v62 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v61 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v55 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Calendar();
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v57 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v64 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v53 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v24 = (char *)&v45 - v23;
  uint64_t v63 = v2;
  outlined init with copy of Date?(v2, (uint64_t)v18);
  uint64_t v65 = v20;
  Class v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v54((uint64_t)v18, 1, v19) == 1)
  {
    outlined destroy of Date?((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(a1, 1, 1, v19);
  }
  else
  {
    uint64_t v52 = a1;
    char v26 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 32);
    uint64_t v48 = v19;
    uint64_t v49 = v26;
    uint64_t v50 = v65 + 32;
    v26((uint64_t)v24, v18, v19);
    uint64_t v46 = v13;
    static Calendar.current.getter();
    uint64_t v45 = v63 + *(int *)(type metadata accessor for AlignedTimelineSchedule.Entries() + 24);
    uint64_t v27 = *MEMORY[0x263F07780];
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    uint64_t v47 = v7;
    v28(v10, v27, v7);
    uint64_t v30 = v58;
    uint64_t v29 = v59;
    uint64_t v31 = v55;
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v55, *MEMORY[0x263F07800], v59);
    uint64_t v33 = v60;
    unint64_t v32 = v61;
    uint64_t v34 = v62;
    (*(void (**)(char *, void, uint64_t))(v60 + 104))(v61, *MEMORY[0x263F077E0], v62);
    uint64_t v51 = v24;
    uint64_t v35 = v46;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v47);
    uint64_t v36 = v48;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v57);
    if (v54((uint64_t)v64, 1, v36) == 1)
    {
      uint64_t v37 = MEMORY[0x263F07490];
      outlined destroy of Date?((uint64_t)v64, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      uint64_t v38 = v63;
      outlined destroy of Date?(v63, (uint64_t)&lazy cache variable for type metadata for Date?, v37, (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
      v39(v38, 1, 1, v36);
      uint64_t v40 = v49;
    }
    else
    {
      uint64_t v41 = v53;
      uint64_t v42 = v49;
      v49((uint64_t)v53, v64, v36);
      uint64_t v43 = v63;
      outlined destroy of Date?(v63, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      v42(v43, v41, v36);
      uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
      v39(v43, 0, 1, v36);
      uint64_t v40 = v42;
    }
    uint64_t v44 = v52;
    v40(v52, v51, v36);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v39)(v44, 0, 1, v36);
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AlignedTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of AlignedTimelineSchedule.Entries(v1, a1, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AlignedTimelineSchedule.Entries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of FragmentRangeSequence(v0, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
  return v1;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AlignedTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance AlignedTimelineSchedule@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  double v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))(v8, a1, v6);
  return AlignedTimelineSchedule.Entries.init(startDate:alignment:)((uint64_t)v8, v9, a2);
}

void one-time initialization function for order()
{
  static NSCalendarUnit.order = &outlined read-only object #0 of one-time initialization function for order;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_17:
    uint64_t v8 = a3;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v3[3];
    if (v7)
    {
      unint64_t v9 = 0;
      while (1)
      {
        if (v4)
        {
          if (v9 >> 6 >= *(void *)(v6 + 16)) {
            goto LABEL_20;
          }
          uint64_t v10 = *(void *)(v6 + 32 + 8 * (v9 >> 6)) & (1 << v9);
        }
        else
        {
          uint64_t v11 = 1 << v9;
          if (v9 >= 0x40) {
            uint64_t v11 = 0;
          }
          uint64_t v10 = v11 & v5;
        }
        if ((v7 & ~(v7 >> 63)) == v9) {
          break;
        }
        *(unsigned char *)(a2 + v9) = v10 != 0;
        if (a3 - 1 == v9) {
          goto LABEL_17;
        }
        if (v7 == ++v9)
        {
          uint64_t v8 = v7;
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_18:
    *(unsigned char *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v6;
    *(void *)(result + 24) = v7;
    *(void *)(result + 32) = v8;
    return v8;
  }
LABEL_21:
  __break(1u);
  return result;
}

{
  long long *v3;
  uint64_t v4;
  long long v5;
  uint64_t v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  int v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *((void *)v3 + 2);
  uint64_t v7 = *(long long *)((char *)v3 + 24);
  uint64_t v8 = *(long long *)((char *)v3 + 40);
  if (!a2)
  {
    uint64_t v11 = 0;
    unint64_t v9 = 0;
LABEL_16:
    *(_OWORD *)int v4 = v5;
    *(void *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 24) = v7;
    *(_OWORD *)(v4 + 40) = v8;
    *(void *)(v4 + 56) = v11;
    return v9;
  }
  unint64_t v9 = a3;
  if (!a3)
  {
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = *(void *)v3;
    uint64_t v11 = *(void *)(v5 + 16);
    if (v11)
    {
      uint64_t v23 = v8;
      double v24 = v7;
      unint64_t v25 = v5;
      uint64_t v13 = *(void **)(v5 + 32);
      uint64_t v14 = *(void *)(v5 + 40);
      uint64_t v15 = *(unsigned char *)(v5 + 48);
      uint64_t v16 = *(_DWORD *)(v5 + 72);
      uint64_t v17 = *(_OWORD *)(v5 + 56);
      *(void *)a2 = v13;
      *(void *)(a2 + 8) = v14;
      *(unsigned char *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 24) = v17;
      *(_DWORD *)(a2 + 40) = v16;
      if (v9 == 1)
      {
        uint64_t v18 = 1;
LABEL_13:
        outlined copy of Text.Layout.Line.Line(v13, v14, v15);
        uint64_t v11 = v18;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v18 = 1;
        while (v11 != v18)
        {
          uint64_t v20 = a2 + v19;
          outlined copy of Text.Layout.Line.Line(v13, v14, v15 & 1);
          uint64_t v13 = *(void **)(v10 + v19 + 80);
          uint64_t v14 = *(void *)(v10 + v19 + 88);
          uint64_t v15 = *(unsigned char *)(v10 + v19 + 96);
          ++v18;
          uint64_t v21 = *(_DWORD *)(v10 + v19 + 120);
          uint64_t v22 = *(_OWORD *)(v10 + v19 + 104);
          *(void *)(v20 + 48) = v13;
          *(void *)(v20 + 56) = v14;
          *(unsigned char *)(v20 + 64) = v15;
          *(_OWORD *)(v20 + 72) = v22;
          *(_DWORD *)(v20 + 88) = v21;
          v19 += 48;
          if (v9 == v18) {
            goto LABEL_13;
          }
        }
        outlined copy of Text.Layout.Line.Line(v13, v14, v15 & 1);
        unint64_t v9 = v18;
      }
      uint64_t v7 = v24;
      uint64_t v5 = v25;
      uint64_t v8 = v23;
    }
    else
    {
      unint64_t v9 = 0;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  int v18;
  long long v19;

  int v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned char *)v3 + 8);
  uint64_t v7 = v3[2];
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_11:
    *(void *)int v4 = v5;
    *(unsigned char *)(v4 + 8) = v6;
    *(void *)(v4 + 16) = v7;
    *(void *)(v4 + 24) = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = *(void *)(v5 + 16);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = a3 - 1;
      while (1)
      {
        uint64_t v14 = a2 + v12;
        uint64_t v15 = *(void **)(v5 + v12 + 32);
        uint64_t v16 = *(void *)(v5 + v12 + 40);
        uint64_t v17 = *(unsigned char *)(v5 + v12 + 48);
        uint64_t v18 = *(_DWORD *)(v5 + v12 + 72);
        uint64_t v19 = *(_OWORD *)(v5 + v12 + 56);
        *(void *)uint64_t v14 = v15;
        *(void *)(v14 + 8) = v16;
        *(unsigned char *)(v14 + 16) = v17;
        *(_OWORD *)(v14 + 24) = v19;
        *(_DWORD *)(v14 + 40) = v18;
        if (v13 == v11) {
          break;
        }
        outlined copy of Text.Layout.Line.Line(v15, v16, v17);
        ++v11;
        v12 += 48;
        if (v9 == v11) {
          goto LABEL_8;
        }
      }
      outlined copy of Text.Layout.Line.Line(v15, v16, v17);
    }
    else
    {
LABEL_8:
      uint64_t v8 = v9;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;

  int v4 = (void *)result;
  uint64_t v5 = *v3;
  if (!a2)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_12:
    *int v4 = v5;
    v4[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 1;
      while (v10 - 1 < v7)
      {
        uint64_t v11 = a2 + v9;
        uint64_t v12 = *(void *)(v5 + v9 + 48);
        uint64_t v13 = *(void *)(v5 + v9 + 72);
        uint64_t v14 = *(void *)(v5 + v9 + 80);
        uint64_t v15 = *(_OWORD *)(v5 + v9 + 56);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)(v5 + v9 + 32);
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = v15;
        *(void *)(v11 + 40) = v13;
        *(void *)(v11 + 48) = v14;
        if (v6 == v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v16 = v10 + 1;
        uint64_t v7 = *(void *)(v5 + 16);
        v9 += 56;
        if (v10++ == v7)
        {
          uint64_t v6 = v16 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  int v4 = *v3;
  uint64_t v6 = *((_DWORD *)v3 + 2);
  uint64_t v5 = *((_DWORD *)v3 + 3);
  if (!a2)
  {
    LODWORD(v10) = 0;
    uint64_t v7 = 0;
    a3 = 0;
LABEL_16:
    *(void *)uint64_t result = v4;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v5;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = v7;
    return a3;
  }
  if (!a3)
  {
    LODWORD(v10) = 0;
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = a3 - 1;
    do
    {
      if (v5 == v8 && !v7)
      {
        LODWORD(v10) = v5;
        a3 = v8;
        goto LABEL_16;
      }
      if (!v4) {
        goto LABEL_19;
      }
      uint64_t v10 = v8 + 1;
      uint64_t v11 = v4 + v7;
      if (v5 - 1 == v8)
      {
        uint64_t v7 = 0;
        *(void *)(a2 + 8 * v8) = v11;
        if (v9 == v8)
        {
          LODWORD(v10) = v5;
          goto LABEL_16;
        }
      }
      else
      {
        v7 += *(_DWORD *)(v11 + 8);
        *(void *)(a2 + 8 * v8) = v11;
        if (v9 == v8) {
          goto LABEL_16;
        }
      }
      ++v8;
    }
    while (a3 != v10);
    __break(1u);
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  long long *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  long long *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned char v37[96];
  long long v38;
  uint64_t v39;

  int v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = (long long *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v7 = v3[3];
  unint64_t v9 = *((unsigned __int8 *)v3 + 32);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    uint64_t v12 = v9;
    goto LABEL_13;
  }
  if (a3 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = v7 >> 1;
  uint64_t v11 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v12 = v9 + v11;
  if (!__OFADD__(v9, v11))
  {
    if (v12 <= v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v9 + v11;
    }
    if (v12 == v9)
    {
      a3 = (v7 >> 1) - v8;
LABEL_13:
      *(void *)int v4 = v5;
      *(void *)(v4 + 8) = v6;
      *(void *)(v4 + 16) = v8;
      *(void *)(v4 + 24) = v7;
      *(unsigned char *)(v4 + 32) = v9;
      *(void *)(v4 + 40) = v12;
      return a3;
    }
    uint64_t v14 = a2;
    uint64_t v33 = a3;
    uint64_t v35 = v5;
    uint64_t v36 = v7;
    uint64_t v15 = 0;
    uint64_t v16 = v13 - v9;
    uint64_t v17 = a3 - 1;
    uint64_t v34 = v6;
    while (v8 <= 0 && v15 < v10)
    {
      uint64_t v18 = *v6;
      uint64_t v19 = v6[1];
      uint64_t v20 = v6[3];
      *(_OWORD *)&v37[32] = v6[2];
      *(_OWORD *)&v37[48] = v20;
      *(_OWORD *)uint64_t v37 = v18;
      *(_OWORD *)&v37[16] = v19;
      uint64_t v21 = v6[4];
      uint64_t v22 = v6[5];
      uint64_t v23 = v6[6];
      uint64_t v39 = *((void *)v6 + 14);
      *(_OWORD *)&v37[80] = v22;
      uint64_t v38 = v23;
      *(_OWORD *)&v37[64] = v21;
      if (v16 == v15) {
        goto LABEL_23;
      }
      double v24 = v39;
      unint64_t v25 = BYTE8(v38);
      char v26 = v38;
      uint64_t v27 = *(_DWORD *)&v37[92];
      uint64_t v28 = v37[88];
      uint64_t v29 = *(_OWORD *)&v37[24];
      uint64_t v30 = *(_OWORD *)&v37[40];
      uint64_t v31 = *(_OWORD *)&v37[56];
      unint64_t v32 = *(_OWORD *)&v37[72];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)&v37[8];
      *(_OWORD *)(v14 + 16) = v29;
      *(_OWORD *)(v14 + 32) = v30;
      *(_OWORD *)(v14 + 48) = v31;
      *(_OWORD *)(v14 + 64) = v32;
      *(unsigned char *)(v14 + 80) = v28;
      *(_DWORD *)(v14 + 84) = v27;
      *(void *)(v14 + 88) = v26;
      *(unsigned char *)(v14 + 96) = v25;
      *(void *)(v14 + 104) = v24;
      if (v17 == v15)
      {
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v37);
        uint64_t v12 = v9 + v15 + 1;
        a3 = v33;
        uint64_t v6 = v34;
        uint64_t v5 = v35;
        uint64_t v7 = v36;
        goto LABEL_13;
      }
      uint64_t result = outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v37);
      ++v15;
      uint64_t v6 = (long long *)((char *)v6 + 120);
      v14 += 112;
      if (v11 == v15)
      {
        a3 = v11;
        uint64_t v5 = v35;
        uint64_t v7 = v36;
        uint64_t v6 = v34;
        uint64_t v12 = v9 + v11;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7 = result;
  if (!a2)
  {
LABEL_11:
    uint64_t v9 = 0;
LABEL_15:
    *(void *)uint64_t v7 = a4;
    *(double *)(v7 + 8) = a5;
    *(void *)(v7 + 16) = v9;
    return v9;
  }
  if (!a3)
  {
LABEL_13:
    uint64_t v9 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      uint64_t v10 = a2;
      uint64_t v11 = (_OWORD *)(a4 + 32);
      unint64_t v12 = 1;
      while (1)
      {
        long long v13 = v11[7];
        *(_OWORD *)&v26[96] = v11[6];
        long long v27 = v13;
        long long v14 = v11[1];
        *(_OWORD *)char v26 = *v11;
        *(_OWORD *)&v26[16] = v14;
        long long v15 = v11[3];
        *(_OWORD *)&v26[32] = v11[2];
        *(_OWORD *)&v26[48] = v15;
        long long v16 = v11[5];
        *(_OWORD *)&v26[64] = v11[4];
        *(_OWORD *)&v26[80] = v16;
        *(void *)&long long v16 = v27;
        double v17 = *(double *)&v26[104] + a5;
        uint64_t v18 = *((void *)&v27 + 1);
        long long v19 = *(_OWORD *)&v26[8];
        long long v20 = *(_OWORD *)&v26[24];
        long long v21 = *(_OWORD *)&v26[40];
        long long v22 = *(_OWORD *)&v26[56];
        long long v23 = *(_OWORD *)&v26[72];
        long long v24 = *(_OWORD *)&v26[88];
        *(void *)uint64_t v10 = *(void *)v26;
        *(_OWORD *)(v10 + 8) = v19;
        *(_OWORD *)(v10 + 24) = v20;
        *(_OWORD *)(v10 + 40) = v21;
        *(_OWORD *)(v10 + 56) = v22;
        *(_OWORD *)(v10 + 72) = v23;
        *(_OWORD *)(v10 + 88) = v24;
        *(double *)(v10 + 104) = v17;
        *(void *)(v10 + 112) = v16;
        *(void *)(v10 + 120) = v18;
        if (a3 == v12)
        {
          outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
          goto LABEL_13;
        }
        if (v9 == v12) {
          break;
        }
        outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
        v11 += 8;
        v10 += 128;
        if (v12++ >= *(void *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of Text.Effect.DisplayInfo((uint64_t)v26);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_11:
    *uint64_t v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      unint64_t v9 = 0;
      uint64_t v10 = a3 - 1;
      while (v9 < *(void *)(a4 + 16))
      {
        uint64_t v11 = *(void *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
        uint64_t v12 = *(void *)(v11 + 72);
        uint64_t result = outlined init with copy of FragmentRangeSequence.Iterator(a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ v12 * v9, v8, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (v10 == v9) {
          goto LABEL_11;
        }
        v8 += v12;
        if (v7 == ++v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_11:
    *uint64_t v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      unint64_t v9 = 0;
      uint64_t v10 = a4 + 32;
      uint64_t v11 = a3 - 1;
      while (v9 < *(void *)(a4 + 16))
      {
        uint64_t result = outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v10, v8);
        if (v11 == v9) {
          goto LABEL_11;
        }
        v8 += 96;
        ++v9;
        v10 += 96;
        if (v7 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v6 = a3;
  if (!a3) {
    goto LABEL_8;
  }
  if (a3 < 0) {
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = a4 + v7;
  if (__OFADD__(a4, v7))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(v8, a4))
  {
LABEL_32:
    __break(1u);
    return result;
  }
  if (v8 != a4)
  {
    uint64_t v9 = a2;
    long long v22 = result;
    unint64_t v10 = 0;
    if (a4 <= v8) {
      uint64_t v11 = a4 + v7;
    }
    else {
      uint64_t v11 = a4;
    }
    uint64_t v12 = a5 + 48;
    uint64_t v13 = a4 - v11;
    uint64_t v14 = a3 - 1;
    uint64_t v20 = *(void *)(a5 + 16);
    while (v10 < *(void *)(a5 + 16))
    {
      if (!(v13 + v10)) {
        goto LABEL_28;
      }
      uint64_t result = *(void **)v12;
      uint64_t v15 = *(void *)(v12 + 8);
      uint64_t v16 = *(void *)(v12 + 16);
      uint64_t v17 = a4 + v10 + 1;
      long long v18 = *(_OWORD *)(v12 + 24);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(v12 - 16);
      *(void *)(v9 + 16) = result;
      *(void *)(v9 + 24) = v15;
      *(void *)(v9 + 32) = v16;
      *(_OWORD *)(v9 + 40) = v18;
      if (v14 == v10) {
        goto LABEL_24;
      }
      if (__OFSUB__(v8, v17)) {
        goto LABEL_29;
      }
      if (v20 - 1 == v10)
      {
        uint64_t v6 = v20;
        goto LABEL_26;
      }
      BOOL v19 = __OFSUB__(v17, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_bridgeObjectRetain();
      v12 += 56;
      ++v10;
      v9 += 56;
      if (v19)
      {
        __break(1u);
LABEL_24:
        uint64_t v8 = v17;
        uint64_t v6 = a3;
LABEL_26:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = v22;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_7:
  uint64_t v6 = 0;
LABEL_8:
  uint64_t v8 = a4;
LABEL_9:
  *uint64_t result = a4;
  result[1] = a5;
  result[2] = v8;
  return (void *)v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a1;
  uint64_t v42 = a3;
  uint64_t v5 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v40 - v13);
  outlined init with copy of FragmentRangeSequence.Iterator((uint64_t)v3, (uint64_t)v11, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v15 = *v3;
  Swift::UInt64 v16 = v3[1];
  uint64_t v17 = v3[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v15 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if (v18)
    {
      swift_endAccess();
      outlined destroy of FragmentRangeSequence((uint64_t)v3, type metadata accessor for Text.Effect.BaseContent);
      *(void *)&v11[*(int *)(v9 + 36)] = 0;
      outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
      if (!a2)
      {
LABEL_19:
        uint64_t v19 = 0;
        goto LABEL_21;
      }
      uint64_t v19 = v42;
      if (!v42)
      {
LABEL_21:
        outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v14, v41, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
        return v19;
      }
      if ((v42 & 0x8000000000000000) == 0)
      {
        uint64_t v20 = *(int *)(v9 + 36);
        unint64_t v21 = *(uint64_t *)((char *)v14 + v20);
        uint64_t v22 = *v14;
        Swift::UInt64 v23 = v14[1];
        uint64_t v24 = v14[2];
        swift_beginAccess();
        uint64_t v25 = *(void *)(v22 + 48);
        if (*(void *)(v25 + 16))
        {
          uint64_t v19 = 0;
          uint64_t v43 = v42 - 1;
          do
          {
            unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
            if ((v27 & 1) == 0) {
              break;
            }
            uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
            swift_endAccess();
            uint64_t v29 = *(void *)(v28 + 16);
            if (__OFSUB__(v29, v21))
            {
              __break(1u);
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
            if (v29 == v21) {
              goto LABEL_21;
            }
            swift_retain();
            swift_retain();
            Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v22, v23, v24, v21, (uint64_t)v44);
            outlined init with copy of FragmentRangeSequence.Iterator((uint64_t)v14, (uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
            uint64_t v30 = *v7;
            Swift::UInt64 v31 = v7[1];
            uint64_t v32 = v7[2];
            uint64_t v33 = *v7 + 48;
            swift_beginAccess();
            if (!*(void *)(*(void *)(v30 + 48) + 16)) {
              goto LABEL_25;
            }
            specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
            if ((v34 & 1) == 0) {
              goto LABEL_25;
            }
            swift_endAccess();
            swift_beginAccess();
            uint64_t v35 = *(void *)v33;
            if (!*(void *)(*(void *)v33 + 16)) {
              goto LABEL_26;
            }
            unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
            if ((v37 & 1) == 0) {
              goto LABEL_26;
            }
            uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 16 * v36);
            swift_endAccess();
            if (v21 >= *(void *)(v38 + 16)) {
              goto LABEL_23;
            }
            *(uint64_t *)((char *)v14 + v20) = v21 + 1;
            outlined destroy of FragmentRangeSequence((uint64_t)v7, type metadata accessor for Text.Effect.BaseContent);
            *(_OWORD *)a2 = v44[0];
            *(_OWORD *)(a2 + 16) = v44[1];
            *(_OWORD *)(a2 + 32) = v44[2];
            *(void *)(a2 + 48) = v45;
            if (v43 == v19)
            {
              uint64_t v19 = v42;
              goto LABEL_21;
            }
            a2 += 56;
            unint64_t v21 = *(uint64_t *)((char *)v14 + v20);
            uint64_t v22 = *v14;
            Swift::UInt64 v23 = v14[1];
            uint64_t v24 = v14[2];
            swift_beginAccess();
            uint64_t v25 = *(void *)(v22 + 48);
            ++v19;
          }
          while (*(void *)(v25 + 16));
        }
        swift_endAccess();
        __break(1u);
        goto LABEL_19;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      swift_endAccess();
      __break(1u);
LABEL_26:
      swift_endAccess();
      __break(1u);
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t result;
  id v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  uint64_t v5 = *(void **)v3;
  char v27 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  unint64_t v26 = *(_DWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
LABEL_18:
    uint64_t v19 = v9;
    goto LABEL_19;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = v10 - v9;
    if (v10 <= v9) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v11)
    {
      uint64_t v13 = a2;
      uint64_t v14 = 0;
      uint64_t v24 = a3;
      uint64_t v25 = v12 - v9;
      uint64_t v15 = v9 ^ 0x7FFFFFFFFFFFFFFFLL;
      Swift::UInt64 v16 = a3 - 1;
      while (v15 != v14)
      {
        uint64_t v17 = v9 + v14;
        if (v9 + v14 < v9 || v10 < v17 + 1) {
          goto LABEL_25;
        }
        if (v25 == v14) {
          goto LABEL_22;
        }
        if (v15 == v14) {
          goto LABEL_23;
        }
        *(void *)uint64_t v13 = v5;
        *(void *)(v13 + 8) = v27;
        *(void *)(v13 + 16) = v6;
        *(void *)(v13 + 24) = v7;
        *(_DWORD *)(v13 + 32) = v26;
        *(void *)(v13 + 40) = v8;
        *(void *)(v13 + 48) = v17;
        *(void *)(v13 + 56) = v17 + 1;
        if (v16 == v14)
        {
          unint64_t v21 = v5;
          swift_retain();
          uint64_t v19 = v9 + v14 + 1;
          a3 = v24;
          goto LABEL_19;
        }
        char v18 = v5;
        swift_retain();
        ++v14;
        v13 += 64;
        if (v11 == v14) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_16:
    uint64_t v19 = v10;
    a3 = v10 - v9;
LABEL_19:
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v27;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = v26;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v19;
    return a3;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v22._countAndFlagsBits = 3943982;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  _print_unlocked<A, B>(_:_:)();
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;

  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  uint64_t v50 = v7;
  uint64_t v47 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v49 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  Class v54 = (uint64_t *)((char *)&v43 - v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (uint64_t)&v43 - v12;
  uint64_t v13 = *v3;
  uint64_t result = specialized Dictionary.startIndex.getter(*v3);
  uint64_t v17 = result;
  char v18 = v16 & 1;
  if (!a2)
  {
    uint64_t result = 0;
LABEL_34:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    *(unsigned char *)(a1 + 24) = v18;
    return result;
  }
  if (!a3)
  {
    uint64_t result = 0;
    goto LABEL_34;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v44 = a1;
  if ((v16 & 1) == 0)
  {
    uint64_t result = 0;
    uint64_t v19 = v13 + 64;
    uint64_t v43 = v13 + 88;
    uint64_t v20 = 1;
    uint64_t v45 = a3;
    uint64_t v46 = v13;
    while (1)
    {
      if (*(_DWORD *)(v13 + 36) != v15)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      unint64_t v21 = v20;
      uint64_t v22 = 1 << *(unsigned char *)(v13 + 32);
      if (v17 == v22)
      {
        char v18 = 0;
LABEL_33:
        a1 = v44;
        goto LABEL_34;
      }
      if ((v17 & 0x8000000000000000) != 0 || (uint64_t)v17 >= v22) {
        goto LABEL_36;
      }
      uint64_t v53 = *(unsigned int *)(v13 + 36);
      Swift::UInt64 v23 = v17 >> 6;
      if ((*(void *)(v19 + 8 * (v17 >> 6)) & (1 << v17)) == 0) {
        goto LABEL_37;
      }
      uint64_t v51 = v21;
      uint64_t v52 = a2;
      uint64_t v24 = v49;
      uint64_t v25 = v50;
      unint64_t v26 = (uint64_t)&v49[*(int *)(v50 + 48)];
      char v27 = *(void *)(v13 + 56);
      uint64_t v28 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v17);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      Swift::UInt64 v31 = type metadata accessor for AccessibilityCustomAttributes.Value();
      outlined init with copy of FragmentRangeSequence.Iterator(v27 + *(void *)(*(void *)(v31 - 8) + 72) * v17, v26, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      char *v24 = v30;
      v24[1] = v29;
      uint64_t v32 = v54;
      *Class v54 = v30;
      v32[1] = v29;
      uint64_t v13 = v46;
      outlined init with copy of FragmentRangeSequence.Iterator(v26, (uint64_t)v32 + *(int *)(v25 + 48), (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain_n();
      uint64_t result = outlined destroy of FragmentRangeSequence((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      uint64_t v33 = 1 << *(unsigned char *)(v13 + 32);
      if ((uint64_t)v17 >= v33) {
        goto LABEL_38;
      }
      char v34 = *(void *)(v19 + 8 * v23);
      if ((v34 & (1 << v17)) == 0) {
        goto LABEL_39;
      }
      uint64_t v35 = v53;
      if (*(_DWORD *)(v13 + 36) != v53) {
        goto LABEL_40;
      }
      unint64_t v36 = v34 & (-2 << (v17 & 0x3F));
      if (v36) {
        break;
      }
      uint64_t v38 = v23 + 1;
      uint64_t v39 = (unint64_t)(v33 + 63) >> 6;
      char v37 = v45;
      if (v23 + 1 >= v39)
      {
        uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
        goto LABEL_20;
      }
      uint64_t v40 = *(void *)(v19 + 8 * v38);
      uint64_t v41 = v52;
      if (v40) {
        goto LABEL_18;
      }
      uint64_t v38 = v23 + 2;
      if (v23 + 2 < v39)
      {
        uint64_t v40 = *(void *)(v19 + 8 * v38);
        if (v40)
        {
LABEL_18:
          uint64_t v17 = __clz(__rbit64(v40)) + (v38 << 6);
          goto LABEL_21;
        }
        while (v39 - 3 != v23)
        {
          uint64_t v40 = *(void *)(v43 + 8 * v23++);
          if (v40)
          {
            uint64_t v38 = v23 + 2;
            goto LABEL_18;
          }
        }
      }
      uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
LABEL_21:
      uint64_t v42 = v48;
      outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v54, v48, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      outlined init with take of AlignedTimelineSchedule.Entries(v42, v41, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
      uint64_t result = v51;
      if (v51 == v37)
      {
        char v18 = 0;
        uint64_t v15 = v35;
        uint64_t result = v37;
        goto LABEL_33;
      }
      a2 = v41 + *(void *)(v47 + 72);
      uint64_t v20 = v51 + 1;
      uint64_t v15 = v35;
    }
    uint64_t v17 = __clz(__rbit64(v36)) | v17 & 0xFFFFFFFFFFFFFFC0;
    char v37 = v45;
LABEL_20:
    uint64_t v41 = v52;
    goto LABEL_21;
  }
LABEL_42:
  __break(1u);
  return result;
}

{
  int *v3;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t result = *((void *)v3 + 1);
  uint64_t v8 = *((void *)v3 + 2);
  if (!a2)
  {
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_13:
    uint64_t v10 = a3;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = v8;
    if (v8)
    {
      uint64_t v11 = a2;
      uint64_t v12 = 0;
      uint64_t v13 = a3 - 1;
      while (v12 != 0x80000000)
      {
        if ((v8 & ~(v8 >> 63)) == v12) {
          goto LABEL_16;
        }
        *(_DWORD *)uint64_t v11 = v12;
        *(_DWORD *)(v11 + 4) = v6;
        *(void *)(v11 + 8) = result;
        if (v13 == v12)
        {
          uint64_t result = swift_bridgeObjectRetain();
          goto LABEL_13;
        }
        uint64_t result = swift_bridgeObjectRetain();
        ++v12;
        v11 += 16;
        if (v8 == v12)
        {
          uint64_t v10 = v8;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    *(_DWORD *)a1 = v5;
    *(_DWORD *)(a1 + 4) = v6;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v10;
    return v10;
  }
LABEL_17:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, char *, uint64_t);
  void (**v50)(char *, uint64_t);
  void (**v51)(char *, uint64_t);
  void (**v52)(char *, uint64_t);
  void (**v53)(char *, uint64_t);
  void (**v54)(char *, void, uint64_t);
  unsigned int v55;
  void (**v56)(char *, void, uint64_t);
  unsigned int v57;
  void (**v58)(char *, void, uint64_t);
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (**v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;

  double v73 = type metadata accessor for Calendar.SearchDirection();
  CALayer v78 = *(char **)(v73 - 8);
  MEMORY[0x270FA5388](v73);
  double v72 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v71 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v8 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  char v70 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v79 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v10 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  double v69 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v68 = type metadata accessor for Calendar();
  CALayer v77 = *(char **)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v65 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v13 - 8);
  double v67 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v44 - v16;
  MEMORY[0x270FA5388](v18);
  Swift::UInt v80 = (char *)&v44 - v19;
  uint64_t v20 = type metadata accessor for Date();
  double v74 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v64 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v66 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v66);
  Swift::UInt64 v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AlignedTimelineSchedule.Entries(v3, (uint64_t)v23, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v23, a1, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v46 = a1;
    outlined init with copy of Date?((uint64_t)v23, (uint64_t)v17);
    unint64_t v26 = v74 + 48;
    uint64_t v25 = *(char **)(v74 + 48);
    uint64_t v63 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v25)(v17, 1, v20) == 1)
    {
      char v27 = 0;
LABEL_11:
      outlined destroy of Date?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      (*v63)((uint64_t)v80, 1, 1, v20);
      a1 = v46;
LABEL_13:
      outlined destroy of Date?((uint64_t)v80, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      a3 = v27;
    }
    else
    {
      uint64_t v28 = v8;
      char v27 = 0;
      uint64_t v59 = *MEMORY[0x263F07780];
      uint64_t v58 = (void (**)(char *, void, uint64_t))(v10 + 104);
      uint64_t v57 = *MEMORY[0x263F07800];
      uint64_t v56 = (void (**)(char *, void, uint64_t))(v28 + 104);
      uint64_t v55 = *MEMORY[0x263F077E0];
      Class v54 = (void (**)(char *, void, uint64_t))(v78 + 104);
      uint64_t v53 = (void (**)(char *, uint64_t))(v78 + 8);
      uint64_t v52 = (void (**)(char *, uint64_t))(v28 + 8);
      uint64_t v51 = (void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v50 = (void (**)(char *, uint64_t))(v77 + 8);
      uint64_t v49 = *(void (**)(uint64_t, char *, uint64_t))(v26 - 16);
      uint64_t v45 = a3;
      uint64_t v48 = a3 - 1;
      uint64_t v62 = v23;
      uint64_t v47 = v17;
      uint64_t v60 = v26;
      uint64_t v61 = v20;
      uint64_t v29 = v49;
      while (1)
      {
        CALayer v78 = v25;
        CALayer v75 = a2;
        CALayer v76 = v27;
        uint64_t v30 = (uint64_t)v80;
        v29((uint64_t)v80, v17, v20);
        Swift::UInt64 v31 = v65;
        static Calendar.current.getter();
        CALayer v77 = &v23[*(int *)(v66 + 20)];
        uint64_t v32 = v69;
        (*v58)(v69, v59, v79);
        uint64_t v33 = v30;
        char v34 = v70;
        uint64_t v35 = v71;
        (*v56)(v70, v57, v71);
        unint64_t v36 = v72;
        char v37 = v73;
        (*v54)(v72, v55, v73);
        uint64_t v38 = (uint64_t)v67;
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        (*v53)(v36, v37);
        (*v52)(v34, v35);
        uint64_t v39 = v32;
        uint64_t v20 = v61;
        Swift::UInt64 v23 = v62;
        (*v51)(v39, v79);
        (*v50)(v31, v68);
        outlined assign with take of Date?(v38, (uint64_t)v23);
        (*v63)(v33, 0, 1, v20);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v33, 1, v20) == 1)
        {
          a1 = v46;
          char v27 = v76;
          goto LABEL_13;
        }
        uint64_t v40 = v64;
        v29((uint64_t)v64, v80, v20);
        uint64_t v41 = v75;
        v29(v75, v40, v20);
        uint64_t v42 = v76;
        if (v48 == v76) {
          break;
        }
        uint64_t v43 = v74;
        a2 = v41 + *(void *)(v74 + 72);
        uint64_t v17 = v47;
        outlined init with copy of Date?((uint64_t)v23, (uint64_t)v47);
        uint64_t v25 = *(char **)(v43 + 48);
        char v27 = v42 + 1;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v25)(v17, 1, v20) == 1) {
          goto LABEL_11;
        }
      }
      a1 = v46;
      a3 = v45;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _OWORD *a2, uint64_t a3)
{
  long long v4 = *v3;
  uint64_t v5 = *((void *)v3 + 2);
  long long v6 = *(long long *)((char *)v3 + 24);
  uint64_t v7 = *((void *)v3 + 5);
  uint64_t v8 = *((void *)v3 + 6);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_43;
  }
  if (!a3)
  {
LABEL_43:
    *(_OWORD *)uint64_t result = v4;
    *(void *)(result + 16) = v5;
    *(_OWORD *)(result + 24) = v6;
    *(void *)(result + 40) = v7;
    *(void *)(result + 48) = v8;
    *(void *)(result + 56) = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      unint64_t v10 = v8 + 32;
      unint64_t v11 = v9 - 1;
      unint64_t v12 = a3 - 1;
      if (v9 - 1 >= (unint64_t)(a3 - 1)) {
        uint64_t v13 = a3 - 1;
      }
      else {
        uint64_t v13 = v9 - 1;
      }
      unint64_t v14 = v13 + 1;
      if (v14 < 0x17) {
        goto LABEL_39;
      }
      unint64_t v15 = v11 >= v12 ? a3 - 1 : v9 - 1;
      BOOL v16 = &a2[2 * v15] >= a2 && (char *)&a2[2 * v15] + 8 >= (char *)a2 + 8;
      BOOL v17 = v16 && &a2[2 * v15 + 1] >= a2 + 1;
      BOOL v18 = v17 && (char *)&a2[2 * v15 + 1] + 8 >= (char *)a2 + 24;
      unint64_t v19 = v15 >> 59;
      if (!v18 || v19 != 0) {
        goto LABEL_39;
      }
      if (v11 >= v12) {
        unint64_t v11 = a3 - 1;
      }
      uint64_t v21 = 2 * v11;
      if (v21 * 16 + v8 + 64 <= (unint64_t)a2 || v10 >= (unint64_t)&a2[v21 + 2])
      {
        Swift::UInt64 v23 = a2;
        uint64_t v24 = v14 & 1;
        if ((v14 & 1) == 0) {
          uint64_t v24 = 2;
        }
        unint64_t v25 = v14 - v24;
        uint64_t v26 = v25 + 1;
        a2 += 2 * v25;
        unint64_t v27 = v25;
        uint64_t v28 = (long long *)(v8 + 32);
        do
        {
          long long v30 = *v28;
          long long v29 = v28[1];
          long long v31 = v28[3];
          v23[2] = v28[2];
          v23[3] = v31;
          *Swift::UInt64 v23 = v30;
          v23[1] = v29;
          v23 += 4;
          v28 += 4;
          v27 -= 2;
        }
        while (v27);
      }
      else
      {
LABEL_39:
        unint64_t v25 = 0;
        uint64_t v26 = 1;
      }
      while (1)
      {
        uint64_t v32 = (_OWORD *)(v10 + 32 * v25);
        long long v33 = v32[1];
        *a2 = *v32;
        a2[1] = v33;
        if (a3 == v26) {
          break;
        }
        unint64_t v25 = v26++;
        a2 += 2;
        if (v9 + 1 == v26) {
          goto LABEL_42;
        }
      }
    }
    else
    {
LABEL_42:
      a3 = v9;
    }
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v5 = *(void **)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  char v6 = *(unsigned char *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  int v21 = *(_DWORD *)(v3 + 40);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_23:
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(_DWORD *)(a1 + 40) = v21;
    *(void *)(a1 + 48) = a3;
    return;
  }
  if (((unint64_t)a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a2;
    uint64_t v19 = a1;
    CFArrayRef v20 = a3;
    CFArrayRef v10 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
        if (!v11)
        {
          if (!v10) {
            goto LABEL_21;
          }
          goto LABEL_12;
        }
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        unint64_t v11 = (const __CTLine *)v5;
      }
      CFArrayRef RunCount = _CTLineGetRunCount(v11);

      if (v10 == RunCount)
      {
LABEL_21:
        a3 = v10;
LABEL_22:
        a1 = v19;
        goto LABEL_23;
      }
      if ((v6 & 1) == 0)
      {
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);

        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        outlined copy of Text.Layout.Line.Line(v5, v4, 0);
        swift_release();
        unint64_t v15 = (const __CTLine *)v5;
        id v14 = v5;
        uint64_t v16 = v4;
LABEL_16:
        CFArrayRef v17 = _CTLineGetRunCount(v15);

        uint64_t v18 = v16;
        goto LABEL_17;
      }
LABEL_12:
      id v13 = (id)_NSTextLineFragmentGetCTLine(v5);
      if (!v13) {
        goto LABEL_26;
      }
      id v14 = v13;
      outlined copy of Text.Layout.Line.Line(v5, v4, v6);
      unint64_t v15 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
      uint64_t v16 = 0;
      CFArrayRef v17 = 0;
      uint64_t v18 = 0;
      if (v15) {
        goto LABEL_16;
      }
LABEL_17:
      outlined consume of Text.Layout.Line.Line(v5, v4, v6);
      if ((uint64_t)v10 >= (uint64_t)v17)
      {
        __break(1u);
        break;
      }
      *(void *)uint64_t v9 = v14;
      *(void *)(v9 + 8) = v10;
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = v8;
      *(_DWORD *)(v9 + 32) = v21;
      *(void *)(v9 + 40) = v18;
      v9 += 48;
      CFArrayRef v10 = (const __CFArray *)((char *)v10 + 1);
      a3 = v20;
      if (v20 == v10) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = *(void *)(v3 + 8);
  Swift::UInt64 v23 = *(const __CTLine **)v3;
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  int v22 = *(_DWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 40);
  if (!a2)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
LABEL_12:
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = v22;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = a2;
    unint64_t v11 = (id)_CTLineGetRunAtIndex(v23, v5);
    CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v11);

    if (GlyphCount)
    {
      uint64_t v13 = 1;
      while (1)
      {
        id v14 = v23;
        swift_retain_n();
        unint64_t v15 = v14;
        uint64_t v16 = (id)_CTLineGetRunAtIndex(v15, v5);
        CFIndex v17 = CTRunGetGlyphCount((CTRunRef)v16);
        swift_release();

        if (v13 - 1 >= v17) {
          break;
        }
        *(void *)uint64_t v10 = v15;
        *(void *)(v10 + 8) = v5;
        *(void *)(v10 + 16) = v6;
        *(void *)(v10 + 24) = v7;
        *(_DWORD *)(v10 + 32) = v22;
        *(void *)(v10 + 40) = v8;
        *(void *)(v10 + 48) = v13 - 1;
        *(void *)(v10 + 56) = v13;
        if (v9 == v13) {
          goto LABEL_12;
        }
        uint64_t v18 = v13 + 1;
        uint64_t v19 = (id)_CTLineGetRunAtIndex(v15, v5);
        CFIndex v20 = CTRunGetGlyphCount((CTRunRef)v19);

        v10 += 64;
        if (v13++ == v20)
        {
          uint64_t v9 = v18 - 1;
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
}

unsigned char *specialized Sequence._copySequenceContents(initializing:)(unsigned char *result, unsigned char *a2, uint64_t a3)
{
  if (!a2)
  {
    LOBYTE(v5) = 0;
    a3 = 0;
LABEL_19:
    *uint64_t result = v5;
    return (unsigned char *)a3;
  }
  if (!a3)
  {
    LOBYTE(v5) = 0;
    goto LABEL_19;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v3 = qword_26FA4FA08;
  if (qword_26FA4FA08)
  {
    char v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6;
      while (v5 != *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter
                    + v7
                    + 32))
      {
        if (v3 == ++v7)
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      uint64_t v9 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_20;
      }
      if (v9 >= v3) {
        uint64_t v9 = v3 - 1;
      }
      if (v9 >= (unint64_t)v3) {
        break;
      }
      uint64_t v5 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v9 + 32);
      *a2 = v4;
      if (v6 == a3) {
        goto LABEL_19;
      }
      ++v6;
      ++a2;
      char v4 = v5;
      if (v5 == 11)
      {
        LOBYTE(v5) = 11;
        a3 = v8;
        goto LABEL_19;
      }
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  outlined init with copy of SubviewsCollectionSlice((uint64_t)v3, (uint64_t)&v17);
  uint64_t v7 = *v3;
  uint64_t result = outlined destroy of SubviewsCollectionSlice((uint64_t)v3);
  *((void *)&v21 + 1) = v7;
  long long v25 = v19;
  long long v26 = v20;
  long long v23 = v17;
  long long v24 = v18;
  long long v27 = v21;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
LABEL_13:
    long long v15 = v26;
    a1[2] = v25;
    a1[3] = v15;
    a1[4] = v27;
    long long v16 = v24;
    *a1 = v23;
    a1[1] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *((void *)&v23 + 1);
    uint64_t v10 = *((void *)&v27 + 1);
    uint64_t v11 = 0;
    uint64_t v12 = *((void *)&v23 + 1) - *((void *)&v27 + 1);
    if (*((void *)&v23 + 1) != *((void *)&v27 + 1))
    {
      while (1)
      {
        uint64_t v13 = v10 + v11;
        if (v10 + v11 >= v9 || v13 < (uint64_t)v23) {
          break;
        }
        uint64_t result = _VariadicView_Children.subscript.getter(v10 + v11, (uint64_t)&v17);
        *((void *)&v27 + 1) = v13 + 1;
        a2[2] = v19;
        a2[3] = v20;
        a2[4] = v21;
        a2[5] = v22;
        *a2 = v17;
        a2[1] = v18;
        if (a3 - 1 == v11) {
          goto LABEL_13;
        }
        a2 += 6;
        if (v12 == ++v11) {
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
LABEL_11:
    a3 = v11;
    goto LABEL_13;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  long long *v3;
  _OWORD *v4;
  long long v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  _OWORD v24[2];
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;

  uint64_t v6 = v3[1];
  uint64_t v35 = *v3;
  unint64_t v36 = v6;
  char v37 = v3[2];
  uint64_t v38 = *((unint64_t *)v3 + 6);
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_9:
    uint64_t v8 = a3;
    goto LABEL_11;
  }
  if (a3 < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    char v4 = a2;
    if (one-time initialization token for _lock == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    uint64_t v10 = *((void *)&v36 + 1);
    uint64_t v11 = v37;
    __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
    uint64_t v12 = ViewList.count.getter(v10, v11);
    static Update.end()();
    _MovableLockUnlock(v9);
    if (v8 == v12) {
      break;
    }
    _VariadicView_Children.subscript.getter(v8, (uint64_t)v24);
    _MovableLockLock(v9);
    specialized static Update.begin()();
    uint64_t v13 = *((void *)&v36 + 1);
    id v14 = v37;
    __swift_project_boxed_opaque_existential_1(&v35, *((uint64_t *)&v36 + 1));
    long long v15 = ViewList.count.getter(v13, v14);
    static Update.end()();
    _MovableLockUnlock(v9);
    if (v8 >= v15)
    {
      __break(1u);
      goto LABEL_13;
    }
    *((void *)&v38 + 1) = ++v8;
    long long v16 = v26;
    long long v31 = v25;
    uint64_t v32 = v26;
    long long v17 = v27;
    long long v18 = v28;
    long long v33 = v27;
    char v34 = v28;
    long long v19 = v24[0];
    long long v20 = v24[1];
    long long v4[2] = v25;
    v4[3] = v16;
    v4[4] = v17;
    v4[5] = v18;
    *char v4 = v19;
    v4[1] = v20;
    v4 += 6;
    long long v29 = v19;
    long long v30 = v20;
    if (a3 == v8) {
      goto LABEL_9;
    }
  }
LABEL_11:
  long long v21 = v36;
  *a1 = v35;
  a1[1] = v21;
  long long v22 = v38;
  a1[2] = v37;
  a1[3] = v22;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, char *a2, unint64_t a3)
{
  char v4 = (void *)result;
  uint64_t v5 = *v3;
  if (!a2)
  {
LABEL_10:
    unint64_t v10 = 0;
LABEL_13:
    *char v4 = v5;
    v4[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_12:
    unint64_t v10 = a3;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = a2;
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(v5 + 160);
    unint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = (_OWORD *)(v8 + 32);
      while (v10 < v9)
      {
        v21[0] = *v11;
        long long v12 = v11[1];
        long long v13 = v11[2];
        long long v14 = v11[4];
        v21[3] = v11[3];
        v21[4] = v14;
        v21[1] = v12;
        v21[2] = v13;
        long long v15 = v11[5];
        long long v16 = v11[6];
        long long v17 = v11[8];
        v21[7] = v11[7];
        v21[8] = v17;
        v21[5] = v15;
        v21[6] = v16;
        long long v18 = v11[9];
        long long v19 = v11[10];
        long long v20 = v11[11];
        *(_OWORD *)&v22[12] = *(_OWORD *)((char *)v11 + 188);
        v21[10] = v19;
        *(_OWORD *)long long v22 = v20;
        v21[9] = v18;
        memmove(v7, v11, 0xCCuLL);
        if (a3 - 1 == v10)
        {
          outlined retain of LayoutGestureBox.Child((uint64_t)v21);
          goto LABEL_12;
        }
        v7 += 208;
        uint64_t result = outlined retain of LayoutGestureBox.Child((uint64_t)v21);
        unint64_t v9 = *(void *)(v8 + 16);
        ++v10;
        v11 += 13;
        if (v10 == v9) {
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a2)
  {
    LODWORD(v10) = 0;
    int v6 = 0;
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3)
  {
    LODWORD(v10) = 0;
    int v6 = 0;
    goto LABEL_18;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a5))
    {
      uint64_t v5 = 0;
      int v6 = 0;
      int v7 = HIDWORD(a5) - 1;
      while (a4)
      {
        uint64_t v8 = a4 + v6;
        if (v7 == v5) {
          int v6 = 0;
        }
        else {
          v6 += *(_DWORD *)(v8 + 8);
        }
        *(void *)(a2 + 8 * v5) = v8;
        if (a3 - 1 == v5)
        {
          LODWORD(v10) = a3;
          goto LABEL_18;
        }
        int v9 = v5++;
        if (v7 == v9 && !v6)
        {
          unint64_t v10 = HIDWORD(a5);
          a3 = v5;
          goto LABEL_18;
        }
      }
      goto LABEL_20;
    }
    int v6 = 0;
    a3 = 0;
    LODWORD(v10) = 0;
LABEL_18:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = v6;
    return a3;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *(_DWORD *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      unint64_t v7 = v5 + 32;
      unint64_t v8 = v6 - 1;
      unint64_t v9 = a3 - 1;
      if (v6 - 1 >= (unint64_t)(a3 - 1)) {
        uint64_t v10 = a3 - 1;
      }
      else {
        uint64_t v10 = v6 - 1;
      }
      uint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) < 0x1D) {
        goto LABEL_9;
      }
      uint64_t v12 = 0;
      if (v8 >= v9) {
        unint64_t v15 = a3 - 1;
      }
      else {
        unint64_t v15 = v6 - 1;
      }
      BOOL v16 = !is_mul_ok(v15, 0xCuLL);
      uint64_t v17 = 12 * v15;
      unint64_t v18 = a2 + 4 + 12 * v15;
      uint64_t v13 = 1;
      if (v18 < a2 + 4 || v16 || a2 + 8 + v17 < a2 + 8 || v16 || a2 + v17 < a2 || v16) {
        goto LABEL_10;
      }
      uint64_t v19 = v8 >= v9 ? a3 - 1 : v6 - 1;
      if (v5 + 8 * v19 + 40 > a2 && v7 < a2 + 12 * v19 + 12)
      {
LABEL_9:
        uint64_t v12 = 0;
        uint64_t v13 = 1;
        goto LABEL_10;
      }
      long long v20 = (float *)a2;
      uint64_t v21 = v11 & 7;
      if ((v11 & 7) == 0) {
        uint64_t v21 = 8;
      }
      uint64_t v12 = v11 - v21;
      uint64_t v13 = v12 + 1;
      a2 += 12 * v12;
      int32x4_t v22 = vdupq_n_s32(v4);
      long long v23 = (const float *)(v5 + 64);
      uint64_t v24 = v12;
      do
      {
        long long v25 = v23 - 8;
        float32x4x2_t v28 = vld2q_f32(v25);
        *(float32x4x2_t *)v29.val[1].f32 = vld2q_f32(v23);
        long long v26 = v20 + 24;
        vst3q_f32(v20, *(float32x4x3_t *)v22.i8);
        long long v27 = v20 + 12;
        v29.val[0] = (float32x4_t)v22;
        vst3q_f32(v27, v29);
        v23 += 16;
        long long v20 = v26;
        v24 -= 8;
      }
      while (v24);
LABEL_10:
      while (1)
      {
        uint64_t v14 = *(void *)(v7 + 8 * v12);
        *(_DWORD *)a2 = v4;
        *(void *)(a2 + 4) = v14;
        if (a3 == v13) {
          break;
        }
        uint64_t v12 = v13++;
        a2 += 12;
        if (v6 + 1 == v13) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      a3 = v6;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3)
{
  unsigned int v4 = (void *)result;
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
LABEL_10:
    *unsigned int v4 = v3;
    v4[1] = v5;
    return v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a2;
    unint64_t v7 = *(uint64_t (**)(void))(*(void *)v3 + 88);
    uint64_t v8 = 0;
    if (v7())
    {
      while (1)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 96))(v12, v8);
        uint64_t v9 = swift_retain();
        uint64_t v10 = ((uint64_t (*)(uint64_t))v7)(v9);
        uint64_t result = swift_release();
        if (v8 >= v10) {
          break;
        }
        uint64_t v11 = v12[1];
        *uint64_t v6 = v12[0];
        v6[1] = v11;
        if (v5 - 1 == v8) {
          goto LABEL_10;
        }
        ++v8;
        v6 += 2;
        if (v8 == ((uint64_t (*)(uint64_t))v7)(result)) {
          goto LABEL_8;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_8:
    uint64_t v5 = v8;
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void v24[2];

  uint64_t v5 = a2;
  uint64_t v6 = (void *)result;
  unint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 72);
    if (a2) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v10 = 0;
LABEL_23:
    *uint64_t v6 = v7;
    v6[1] = v9;
    return v10;
  }
  uint64_t v9 = 0;
  if (!a2) {
    goto LABEL_20;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  if (a3 < 0) {
    goto LABEL_27;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v7 + 32;
  while (1)
  {
    uint64_t v12 = v9 + v10;
    if (v8)
    {
      uint64_t v13 = v11 + 48 * v8;
      unint64_t v15 = *(void *)(v13 - 16);
      uint64_t v14 = *(void *)(v13 - 8);
      BOOL v16 = __OFADD__(v14, v15);
      uint64_t v17 = v14 + v15;
      if (v16) {
        goto LABEL_25;
      }
      if (v12 == v17)
      {
        v9 += v10;
        goto LABEL_23;
      }
    }
    else if (!v12)
    {
      uint64_t v9 = 0;
      goto LABEL_23;
    }
    uint64_t result = SectionAccumulator.RowIDs.subscript.getter(v9 + v10, (uint64_t)v24);
    unint64_t v18 = v24[1];
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8) {
      break;
    }
    long long v23 = 0;
    if (v12 >= 0) {
      goto LABEL_24;
    }
LABEL_16:
    if (v12 < v23) {
      goto LABEL_24;
    }
    ++v10;
    *uint64_t v5 = v24[0];
    v5[1] = v18;
    v5 += 2;
    if (a3 == v10)
    {
      v9 += v10;
      uint64_t v10 = a3;
      goto LABEL_23;
    }
  }
  uint64_t v19 = v11 + 48 * v8;
  uint64_t v21 = *(void *)(v19 - 16);
  long long v20 = *(void *)(v19 - 8);
  BOOL v16 = __OFADD__(v20, v21);
  int32x4_t v22 = v20 + v21;
  if (v16) {
    goto LABEL_26;
  }
  long long v23 = *(void *)(v7 + 72);
  if (v12 < v22) {
    goto LABEL_16;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v12)(long long *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  _UNKNOWN **v25;
  uint64_t v26;
  int v27;
  char v28;

  unint64_t v7 = (void *)result;
  if (!a2)
  {
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a2;
    uint64_t v10 = 0;
    if ((*(uint64_t (**)(void))(*(void *)a4 + 88))())
    {
      long long v20 = a3;
      uint64_t v11 = a3 - 1;
      while (1)
      {
        uint64_t v12 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)a4 + 96);
        swift_retain();
        swift_bridgeObjectRetain();
        v12(&v21, v10);
        uint64_t v13 = *((void *)&v21 + 1);
        uint64_t v14 = v21;
        uint64_t v21 = xmmword_24619B550;
        int32x4_t v22 = v14;
        uint64_t v24 = &type metadata for EmptyViewListElements;
        long long v23 = v13;
        long long v25 = &protocol witness table for EmptyViewListElements;
        long long v26 = MEMORY[0x263F8EE78];
        long long v27 = 0;
        float32x4x2_t v28 = 1;
        _ViewList_SublistTransform.apply(sublist:)((uint64_t)&v21);
        unint64_t v15 = v22;
        BOOL v16 = v23;
        swift_bridgeObjectRetain();
        outlined destroy of _ViewList_Sublist((uint64_t)&v21);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)a4 + 88);
        swift_retain();
        unint64_t v18 = swift_bridgeObjectRetain();
        uint64_t v19 = v17(v18);
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        if (v10 >= v19) {
          break;
        }
        *uint64_t v9 = v15;
        v9[1] = v16;
        if (v11 == v10)
        {
          uint64_t v10 = v20;
          goto LABEL_13;
        }
        ++v10;
        v9 += 2;
        if (v10 == v17(result)) {
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
LABEL_13:
    *unint64_t v7 = a4;
    v7[1] = a5;
    long long v7[2] = v10;
    return v10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = (void *)result;
  uint64_t v5 = *v3;
  if (!a2)
  {
LABEL_10:
    unint64_t v9 = 0;
LABEL_12:
    *unsigned int v4 = v5;
    v4[1] = v9;
    return v9;
  }
  if (!a3)
  {
LABEL_11:
    unint64_t v9 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      unint64_t v9 = 0;
      uint64_t v10 = v5 + 32;
      unint64_t v11 = a3 - 1;
      while (v9 < v7)
      {
        uint64_t result = outlined init with copy of SectionConfiguration(v10, v8);
        if (v11 == v9) {
          goto LABEL_11;
        }
        v8 += 136;
        unint64_t v7 = *(void *)(v5 + 16);
        ++v9;
        v10 += 136;
        if (v9 == v7) {
          goto LABEL_12;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *uint64_t result = v4;
    result[1] = a3;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(v4 + 16))
    {
      uint64_t v5 = 0;
      while (1)
      {
        *(_OWORD *)(a2 + 16 * v5) = *(_OWORD *)(v4 + 32 + 16 * v5);
        if (a3 - 1 == v5) {
          goto LABEL_12;
        }
        unint64_t v6 = *(void *)(v4 + 16);
        BOOL v7 = v5 + 1 >= v6;
        if (v5 + 1 == v6)
        {
          a3 = v5 + 1;
          goto LABEL_12;
        }
        ++v5;
        if (v7)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  int v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  char v6 = *((unsigned char *)v3 + 16);
  char v7 = *((unsigned char *)v3 + 17);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    *(_DWORD *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(unsigned char *)(result + 16) = v6;
    goto LABEL_19;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = *(void *)(v5 + 16);
    if (v8)
    {
      unint64_t v9 = 0;
      uint64_t v10 = v5 + 32;
      unint64_t v11 = (int *)(v5 + 36);
      uint64_t v12 = (int *)(v5 + 32);
      while (1)
      {
        if (v6)
        {
          if (v9 >= v8) {
            goto LABEL_21;
          }
          uint64_t v13 = (int *)(v10 + 12 * v9 + 4);
          int v14 = v12[2];
          unint64_t v15 = v12;
        }
        else
        {
          if (v9 >= v8) {
            goto LABEL_22;
          }
          unint64_t v15 = (int *)(v10 + 8 * v9);
          int v14 = v9;
          uint64_t v13 = v11;
        }
        if (v9 >= v8) {
          break;
        }
        int v16 = *v13;
        int v17 = *v15;
        *(_DWORD *)a2 = v4;
        *(_DWORD *)(a2 + 4) = v17;
        *(_DWORD *)(a2 + 8) = v16;
        *(_DWORD *)(a2 + 12) = v14;
        *(unsigned char *)(a2 + 16) = v7;
        if (a3 - 1 == v9) {
          goto LABEL_16;
        }
        ++v9;
        unint64_t v8 = *(void *)(v5 + 16);
        v12 += 3;
        v11 += 2;
        a2 += 20;
        if (v9 == v8) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t v9 = 0;
LABEL_18:
    *(_DWORD *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(unsigned char *)(result + 16) = v6;
    a3 = v9;
LABEL_19:
    *(unsigned char *)(result + 17) = v7;
    *(void *)(result + 24) = a3;
    return a3;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(char *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = v3;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for Data.Deallocator();
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (uint64_t (**)())((char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a2) {
    goto LABEL_35;
  }
  if (!a3)
  {
    uint64_t v15 = 0;
    goto LABEL_40;
  }
  if (a3 < 0) {
LABEL_47:
  }
    __break(1u);
  if (!v4[5])
  {
LABEL_35:
    a3 = 0;
    uint64_t v15 = 0;
    goto LABEL_40;
  }
  v36[0] = a1;
  a1 = (char *)v4[2];
  if (!a1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (void *)v4[4];
  int v14 = v13 + 1;
  unsigned int v41 = *MEMORY[0x263F06F10];
  uint64_t v39 = v8;
  uint64_t v40 = (void (**)(uint64_t (**)(), void, uint64_t))(v9 + 104);
  uint64_t v37 = a3;
  uint64_t v38 = (void (**)(uint64_t (**)(), uint64_t))(v9 + 8);
  uint64_t v15 = 1;
  while (1)
  {
    uint64_t v16 = *v13;
    if ((*v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    unint64_t v17 = *v14;
    swift_retain();
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_42;
    }
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v4;
    *unint64_t v11 = partial apply for closure #1 in ArchiveReader.subscript.getter;
    v11[1] = (uint64_t (*)())v18;
    (*v40)(v11, v41, v8);
    Data.Deallocator._deallocator.getter();
    if (v17)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      if (v17 < 0xF)
      {
        long long v23 = (char *)__DataStorage._bytes.getter();
        if (v23)
        {
          uint64_t v24 = __DataStorage._offset.getter();
          if (__OFSUB__(0, v24)) {
            goto LABEL_46;
          }
          v23 -= v24;
        }
        uint64_t v25 = __DataStorage._length.getter();
        if (v25 >= (uint64_t)v17) {
          unint64_t v26 = v17;
        }
        else {
          unint64_t v26 = v25;
        }
        long long v27 = &v23[v26];
        if (v23)
        {
          unint64_t v28 = v27 - v23;
        }
        else
        {
          long long v27 = 0;
          unint64_t v28 = 0;
        }
        if ((v28 & 0x8000000000000000) != 0) {
          goto LABEL_44;
        }
        if (v28 > 0xFF) {
          goto LABEL_45;
        }
        v36[1] = v19;
        uint64_t v29 = 0;
        uint64_t v30 = v28;
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v43 = v28;
        uint64_t v31 = 0;
        if (v23 && v27 != v23)
        {
          memcpy(__dst, v23, v27 - v23);
          uint64_t v31 = __dst[12];
          uint64_t v29 = __dst[13];
          uint64_t v30 = v43;
        }
        uint64_t v20 = *(void *)__dst;
        uint64_t v32 = *(unsigned int *)&__dst[8];
        uint64_t v33 = v30;
        swift_release();
        swift_release();
        unint64_t v21 = v32 | (v31 << 32) | (v29 << 40) | (v33 << 48);
      }
      else if (v17 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = v17;
        swift_release();
        unint64_t v21 = v19 | 0x8000000000000000;
      }
      else
      {
        swift_release();
        uint64_t v20 = v17 << 32;
        unint64_t v21 = v19 | 0x4000000000000000;
      }
    }
    else
    {
      int32x4_t v22 = (void (*)(char *, void))Data.Deallocator._deallocator.getter();
      v22(&a1[v16], 0);
      swift_release();
      swift_release();
      uint64_t v20 = 0;
      unint64_t v21 = 0xC000000000000000;
    }
    uint64_t v8 = v39;
    (*v38)(v11, v39);
    uint64_t v34 = v4[5];
    if (v15 - 1 >= v34) {
      goto LABEL_43;
    }
    *a2 = v20;
    a2[1] = v21;
    a3 = v37;
    if (v37 == v15)
    {
      uint64_t v15 = v37;
      goto LABEL_39;
    }
    if (v15 == v34) {
      break;
    }
    ++v12;
    ++v15;
    uint64_t v13 = (void *)(v4[4] + 16 * v12);
    int v14 = v13 + 1;
    a1 = (char *)v4[2];
    a2 += 2;
    if (!a1) {
      goto LABEL_34;
    }
  }
  a3 = v34;
LABEL_39:
  a1 = (char *)v36[0];
LABEL_40:
  *(void *)a1 = v4;
  *((void *)a1 + 1) = a3;
  return v15;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 16 * v12;
    uint64_t v14 = *(void *)v13;
    LOBYTE(v13) = *(unsigned char *)(v13 + 8);
    *(void *)a2 = v14;
    *(unsigned char *)(a2 + 8) = v13;
    a2 += 16;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }
  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  if (!a2)
  {
LABEL_24:
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = a4;
    return 0;
  }
  if (!a3)
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
LABEL_28:
    *uint64_t result = a4;
    result[1] = v6;
    result[2] = v7;
    return (void *)a3;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  uint64_t v4 = *(void *)(a4 + 16);
  if (!v4)
  {
    unint64_t v7 = 0;
    uint64_t v6 = 0;
    a3 = 0;
    goto LABEL_28;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (1)
  {
    int64_t v8 = a4 + 32 + 24 * v6;
    uint64_t v9 = *(void *)v8;
    int64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(unsigned __int8 *)(v8 + 16);
    if (v11) {
      break;
    }
    uint64_t v14 = v9 + v7;
    if (__OFADD__(v9, v7)) {
      goto LABEL_33;
    }
    uint64_t v13 = __OFADD__(v7++, 1);
    if (v13) {
      goto LABEL_34;
    }
    uint64_t v13 = __OFSUB__(v10, v9);
    int64_t v15 = v10 - v9;
    if (v13) {
      goto LABEL_35;
    }
LABEL_17:
    if (v7 >= v15)
    {
      unint64_t v7 = 0;
      ++v6;
    }
LABEL_20:
    *(void *)(a2 + 8 * v5) = v14;
    if (a3 - 1 == v5) {
      goto LABEL_28;
    }
    if ((uint64_t)v6 >= v4)
    {
      a3 = v5 + 1;
      goto LABEL_28;
    }
    ++v5;
    if (v6 >= *(void *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_24;
    }
  }
  if (v11 != 1)
  {
    ++v6;
    uint64_t v14 = v9;
    goto LABEL_20;
  }
  unint64_t v12 = v10 - 1;
  if (!__OFSUB__(v10, 1))
  {
    uint64_t v13 = __OFSUB__(v12, v7);
    uint64_t v14 = v12 - v7;
    if (v13) {
      goto LABEL_30;
    }
    uint64_t v13 = __OFADD__(v7++, 1);
    if (v13) {
      goto LABEL_31;
    }
    uint64_t v13 = __OFSUB__(v10, v9);
    int64_t v15 = v10 - v9;
    if (v13) {
      goto LABEL_32;
    }
    goto LABEL_17;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
LABEL_27:
    a3 = 0;
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = a4;
LABEL_32:
    result[3] = a6;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
LABEL_31:
    *uint64_t result = a4;
    result[1] = v8;
    result[2] = v9;
    goto LABEL_32;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v6 = *(void *)(a4 + 16);
  if (!v6)
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = a4 + 32 + 24 * v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    int v13 = *(unsigned __int8 *)(v10 + 16);
    if (!v13)
    {
      uint64_t v16 = v11 + v9;
      if (__OFADD__(v11, v9)) {
        goto LABEL_38;
      }
      BOOL v15 = __OFADD__(v9++, 1);
      if (v15) {
        goto LABEL_39;
      }
      BOOL v15 = __OFSUB__(v12, v11);
      uint64_t v17 = v12 - v11;
      if (v15) {
        goto LABEL_40;
      }
      goto LABEL_17;
    }
    if (v13 == 1) {
      break;
    }
    BOOL v18 = 1;
    BOOL v15 = __OFADD__(a6, v11);
    uint64_t v19 = a6 + v11;
    if (v15) {
      goto LABEL_33;
    }
LABEL_23:
    *(void *)(a2 + 8 * v7) = v19;
    v8 += v18;
    if (a3 - 1 == v7) {
      goto LABEL_31;
    }
    if (v8 >= v6)
    {
      a3 = v7 + 1;
      goto LABEL_31;
    }
    ++v7;
    if (v8 >= *(void *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_27;
    }
  }
  uint64_t v14 = v12 - 1;
  if (__OFSUB__(v12, 1)) {
    goto LABEL_34;
  }
  BOOL v15 = __OFSUB__(v14, v9);
  uint64_t v16 = v14 - v9;
  if (v15) {
    goto LABEL_35;
  }
  BOOL v15 = __OFADD__(v9++, 1);
  if (v15) {
    goto LABEL_36;
  }
  BOOL v15 = __OFSUB__(v12, v11);
  uint64_t v17 = v12 - v11;
  if (v15) {
    goto LABEL_37;
  }
LABEL_17:
  BOOL v18 = v9 >= v17;
  if (v9 >= v17) {
    uint64_t v9 = 0;
  }
  uint64_t v19 = a6 + v16;
  if (!__OFADD__(a6, v16)) {
    goto LABEL_23;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a3;
  uint64_t v54 = a1;
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v68 = v5;
  uint64_t v63 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v62 = (char *)&v52 - v6;
  double v66 = type metadata accessor for RangeSet<>.IndexSequence;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v61 = (char *)&v52 - v8;
  uint64_t v64 = type metadata accessor for RangeSet<>.IndexSequence.Iterator;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v59 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v60 = (char *)&v52 - v10;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v12 = v11;
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v13 = v56;
  MEMORY[0x270FA5388](v11);
  BOOL v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  double v67 = (char *)&v52 - v17;
  uint64_t v58 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0) - 8;
  MEMORY[0x270FA5388](v58);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v19;
  unint64_t v21 = *(void **)v3;
  uint64_t v20 = *(void *)(v3 + 8);
  char v22 = *(unsigned char *)(v3 + 16);
  uint64_t v23 = *(void *)(v3 + 24);
  uint64_t v24 = *(void *)(v3 + 32);
  int v55 = *(_DWORD *)(v3 + 40);
  uint64_t v57 = v3;
  uint64_t v25 = v3 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  long long v27 = v67;
  v26(v67, v25, v12);
  *(void *)uint64_t v19 = v21;
  *((void *)v19 + 1) = v20;
  v19[16] = v22;
  *((void *)v19 + 3) = v23;
  *((void *)v19 + 4) = v24;
  *((_DWORD *)v19 + 10) = v55;
  v26(v15, (uint64_t)v27, v12);
  unint64_t v28 = v21;
  uint64_t v29 = v68;
  outlined copy of Text.Layout.Line.Line(v28, v20, v22);
  uint64_t v30 = v62;
  RangeSet.ranges.getter();
  uint64_t v31 = v59;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v56 + 8);
  v32(v15, v12);
  uint64_t v33 = v63;
  uint64_t v34 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v61, v30, v29);
  uint64_t v35 = *(int *)(v31 + 48);
  uint64_t v36 = (uint64_t)v65;
  uint64_t v37 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(&v60[v35], v34, v29);
  *uint64_t v37 = 0;
  v37[1] = 0;
  v32(v67, v12);
  outlined destroy of Date?(v34, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for RangeSet<Int><>.IndexSequence);
  uint64_t v38 = (uint64_t (*)())(v36 + *(int *)(v58 + 28));
  outlined init with take of Date?((uint64_t)v37, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t)v64, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RangeSet<Int><>.IndexSequence);
  id result = (id)outlined destroy of FragmentRangeSequence(v57, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns);
  if (!a2)
  {
LABEL_20:
    uint64_t v40 = 0;
    goto LABEL_23;
  }
  uint64_t v40 = v53;
  if (!v53)
  {
LABEL_23:
    outlined init with take of AlignedTimelineSchedule.Entries(v36, v54, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
    return (id)v40;
  }
  if ((v53 & 0x8000000000000000) == 0)
  {
    uint64_t v41 = *(void *)v38;
    if (v41 < RangeSet.Ranges.count.getter())
    {
      uint64_t v64 = v38;
      uint64_t v42 = *((void *)v38 + 1);
      unsigned __int8 v43 = *(void **)v36;
      uint64_t v44 = *(void *)(v36 + 8);
      LODWORD(v67) = *(unsigned __int8 *)(v36 + 16);
      uint64_t v45 = *(void *)(v36 + 24);
      uint64_t v46 = *(void *)(v36 + 32);
      LODWORD(v66) = *(_DWORD *)(v36 + 40);
      id result = (id)RangeSet.Ranges.subscript.getter();
      uint64_t v47 = v69 + v42;
      if (!__OFADD__(v69, v42))
      {
        uint64_t v36 = 1;
        while (!__OFADD__(v42++, 1))
        {
          id result = (id)RangeSet.Ranges.subscript.getter();
          if (__OFSUB__(v70, v69)) {
            goto LABEL_25;
          }
          if (v42 >= v70 - v69)
          {
            uint64_t v42 = 0;
            *(void *)uint64_t v64 = ++v41;
          }
          uint64_t v49 = v40;
          if (v67)
          {
            outlined copy of Text.Layout.Line.Line(v43, v44, 1);
            id result = (id)_NSTextLineFragmentGetCTLine(v43);
            if (!result) {
              goto LABEL_27;
            }
            id v50 = result;
            outlined consume of Text.Layout.Line.Line(v43, v44, 1);
            uint64_t v51 = 0;
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(v43, v44, 0);
            outlined copy of Text.Layout.Line.Line(v43, v44, 0);

            swift_release();
            uint64_t v51 = v44;
            id v50 = v43;
          }
          *(void *)a2 = v50;
          *(void *)(a2 + 8) = v47;
          *(void *)(a2 + 16) = v45;
          *(void *)(a2 + 24) = v46;
          *(_DWORD *)(a2 + 32) = v66;
          *(void *)(a2 + 40) = v51;
          uint64_t v40 = v49;
          if (v49 == v36) {
            goto LABEL_22;
          }
          if (v41 >= RangeSet.Ranges.count.getter())
          {
            uint64_t v40 = v36;
LABEL_22:
            uint64_t v36 = (uint64_t)v65;
            *((void *)v64 + 1) = v42;
            goto LABEL_23;
          }
          ++v36;
          id result = (id)RangeSet.Ranges.subscript.getter();
          a2 += 48;
          uint64_t v47 = v69 + v42;
          if (__OFADD__(v69, v42)) {
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_19:
      __break(1u);
    }
    goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v49 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v50 = (uint64_t)&v40 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v51 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v48 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v47 = (char *)&v40 - v18;
  uint64_t v19 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AlignedTimelineSchedule.Entries(v4, (uint64_t)v21, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v21, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v53 = a2;
    uint64_t v46 = v14;
    uint64_t v42 = a1;
    uint64_t v23 = (uint64_t)&v21[*(int *)(v19 + 24)];
    uint64_t v24 = v50;
    outlined init with copy of Date?(v23, v50);
    uint64_t v26 = v51 + 48;
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    if (v25(v24, 1, v15) == 1)
    {
      uint64_t v27 = 0;
LABEL_11:
      outlined destroy of Date?(v24, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      uint64_t v35 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v46, 1, 1, v15);
      a1 = v42;
LABEL_13:
      outlined destroy of Date?(v35, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      a3 = v27;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v26 - 16);
      uint64_t v45 = (void (**)(uint64_t, uint64_t))(v26 - 40);
      uint64_t v41 = a3;
      uint64_t v43 = a3 - 1;
      uint64_t v28 = v26;
      while (1)
      {
        uint64_t v52 = v27;
        uint64_t v29 = v28;
        uint64_t v30 = (uint64_t)v48;
        uint64_t v31 = v44;
        v44(v48, v24, v15);
        uint64_t v32 = v49;
        outlined init with copy of Date?(v23, v49);
        TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v30);
        uint64_t v33 = v30;
        uint64_t v28 = v29;
        (*v45)(v33, v15);
        uint64_t v34 = v32;
        uint64_t v35 = (uint64_t)v46;
        outlined init with take of Date?(v34, (uint64_t)v46, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void, uint64_t, uint64_t))_s10Foundation4DateVSgMaTm_2);
        if (v25(v35, 1, v15) == 1)
        {
          a1 = v42;
          uint64_t v27 = v52;
          goto LABEL_13;
        }
        uint64_t v36 = v47;
        v31(v47, v35, v15);
        uint64_t v37 = v53;
        v31(v53, (uint64_t)v36, v15);
        uint64_t v38 = v52;
        if (v43 == v52) {
          break;
        }
        uint64_t v24 = v50;
        uint64_t v39 = v51;
        uint64_t v53 = &v37[*(void *)(v51 + 72)];
        outlined init with copy of Date?(v23, v50);
        uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
        uint64_t v27 = v38 + 1;
        if (v25(v24, 1, v15) == 1) {
          goto LABEL_11;
        }
      }
      a3 = v41;
      a1 = v42;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  unsigned int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  void (**v61)(char *, uint64_t);
  void (**v62)(char *, uint64_t);
  void (**v63)(char *, uint64_t);
  void (**v64)(char *, uint64_t);
  void (**v65)(char *, void, uint64_t);
  unsigned int v66;
  void (**v67)(char *, void, uint64_t);
  unsigned int v68;
  void (**v69)(char *, void, uint64_t);
  unsigned int v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void (**v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;

  char v84 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v6 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  char v83 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v8 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v81 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v80 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v10 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  char v79 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CALayer v78 = type metadata accessor for Calendar();
  v89 = *(char **)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  CALayer v77 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v13 - 8);
  v91 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v54 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v54 - v19;
  unint64_t v21 = type metadata accessor for Date();
  char v85 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v56 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v92 = (char *)&v54 - v24;
  MEMORY[0x270FA5388](v25);
  CALayer v75 = (char *)&v54 - v26;
  CALayer v76 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x270FA5388](v76);
  uint64_t v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AlignedTimelineSchedule.Entries(v90, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v28, a1, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v90 = v8;
    uint64_t v30 = v10;
    int v55 = a1;
    outlined init with copy of Date?((uint64_t)v28, (uint64_t)v17);
    uint64_t v31 = v85 + 48;
    uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
    double v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
    if (v32((uint64_t)v17, 1, v21) == 1)
    {
      uint64_t v33 = 0;
LABEL_14:
      outlined destroy of Date?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      (*v74)(v20, 1, 1, v21);
    }
    else
    {
      uint64_t v34 = v6;
      uint64_t v33 = 0;
      uint64_t v70 = *MEMORY[0x263F07780];
      uint64_t v69 = (void (**)(char *, void, uint64_t))(v30 + 104);
      uint64_t v68 = *MEMORY[0x263F07800];
      double v67 = (void (**)(char *, void, uint64_t))(v90 + 104);
      double v66 = *MEMORY[0x263F077E0];
      uint64_t v65 = (void (**)(char *, void, uint64_t))(v34 + 104);
      uint64_t v64 = (void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v63 = (void (**)(char *, uint64_t))(v90 + 8);
      uint64_t v62 = (void (**)(char *, uint64_t))(v30 + 8);
      uint64_t v61 = (void (**)(char *, uint64_t))(v89 + 8);
      v89 = *(char **)(v31 - 16);
      uint64_t v90 = v31 - 16;
      uint64_t v54 = a3;
      uint64_t v57 = a3 - 1;
      uint64_t v60 = (unint64_t)v74 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      double v72 = v17;
      double v73 = v20;
      double v71 = v21;
      uint64_t v59 = v28;
      uint64_t v58 = v31;
      while (1)
      {
        uint64_t v86 = v32;
        uint64_t v87 = v33;
        uint64_t v88 = a2;
        ((void (*)(char *, char *, uint64_t))v89)(v92, v17, v21);
        uint64_t v35 = v77;
        static Calendar.current.getter();
        uint64_t v36 = v91;
        uint64_t v38 = v79;
        uint64_t v37 = v80;
        (*v69)(v79, v70, v80);
        uint64_t v39 = v81;
        uint64_t v40 = v82;
        (*v67)(v81, v68, v82);
        uint64_t v42 = v83;
        uint64_t v41 = v84;
        (*v65)(v83, v66, v84);
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        (*v64)(v42, v41);
        uint64_t v43 = v40;
        unint64_t v21 = v71;
        (*v63)(v39, v43);
        uint64_t v44 = v86;
        (*v62)(v38, v37);
        (*v61)(v35, v78);
        if (v44(v36, 1, v21) == 1)
        {
          uint64_t v45 = MEMORY[0x263F07490];
          outlined destroy of Date?(v91, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
          uint64_t v28 = v59;
          outlined destroy of Date?((uint64_t)v59, (uint64_t)&lazy cache variable for type metadata for Date?, v45, (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
          uint64_t v46 = *v74;
          (*v74)(v28, 1, 1, v21);
          uint64_t v20 = v73;
          uint64_t v47 = (void (*)(char *, char *, uint64_t))v89;
          ((void (*)(char *, char *, uint64_t))v89)(v73, v92, v21);
        }
        else
        {
          uint64_t v48 = v56;
          uint64_t v49 = (void (*)(char *, char *, uint64_t))v89;
          ((void (*)(char *, uint64_t, uint64_t))v89)(v56, v91, v21);
          uint64_t v28 = v59;
          outlined destroy of Date?((uint64_t)v59, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
          v49(v28, v48, v21);
          uint64_t v46 = *v74;
          (*v74)(v28, 0, 1, v21);
          uint64_t v20 = v73;
          uint64_t v47 = v49;
          v49(v73, v92, v21);
        }
        v46(v20, 0, 1, v21);
        uint64_t v50 = v44((uint64_t)v20, 1, v21);
        uint64_t v33 = v87;
        uint64_t v51 = v88;
        uint64_t v17 = v72;
        if (v50 == 1) {
          break;
        }
        uint64_t v52 = v75;
        v47(v75, v20, v21);
        v47(v51, v52, v21);
        if (v57 == v33)
        {
          a1 = v55;
          a3 = v54;
          goto LABEL_16;
        }
        uint64_t v53 = v85;
        a2 = &v51[*(void *)(v85 + 72)];
        outlined init with copy of Date?((uint64_t)v28, (uint64_t)v17);
        uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
        ++v33;
        if (v32((uint64_t)v17, 1, v21) == 1) {
          goto LABEL_14;
        }
      }
    }
    a1 = v55;
    outlined destroy of Date?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
    a3 = v33;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (**v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  void (**v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v49 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v53 = (uint64_t)&v42 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v59 = (uint64_t)&v42 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v58 = (char *)&v42 - v14;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v54 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v45 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v57 = (char *)&v42 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v51 = (char *)&v42 - v20;
  uint64_t v52 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x270FA5388](v52);
  uint64_t v56 = (uint64_t)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AlignedTimelineSchedule.Entries(v3, v56, type metadata accessor for EverySecondEntries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_18;
  }
  if (!a3) {
    goto LABEL_18;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v43 = a1;
  uint64_t v23 = v56;
  uint64_t v24 = v59;
  outlined init with copy of Date?(v56, v59);
  uint64_t v26 = v54 + 48;
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
  uint64_t v28 = v25(v24, 1, v15);
  uint64_t v50 = v27;
  if (v28 != 1)
  {
    uint64_t v29 = a3;
    a3 = 0;
    uint64_t v44 = (void (**)(char *, uint64_t))(v26 - 40);
    int v55 = v26 - 16;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v26 - 16);
    uint64_t v42 = v29;
    uint64_t v46 = v29 - 1;
    uint64_t v47 = (unint64_t)v27 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v48 = v26;
    while (1)
    {
      v30(v57, v59, v15);
      uint64_t v31 = v23 + *(int *)(v52 + 20);
      uint64_t v32 = v53;
      outlined init with copy of Date?(v31, v53);
      if (v25(v32, 1, v15) == 1) {
        break;
      }
      uint64_t v33 = v45;
      v30(v45, v32, v15);
      lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      uint64_t v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v44)(v33, v15);
      if (v34) {
        goto LABEL_11;
      }
      uint64_t v23 = v56;
      outlined destroy of Date?(v56, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
      uint64_t v37 = *v50;
      (*v50)(v23, 1, 1, v15);
      uint64_t v36 = v57;
LABEL_13:
      uint64_t v38 = (uint64_t)v58;
      v30(v58, (uint64_t)v36, v15);
      v37(v38, 0, 1, v15);
      if (v25(v38, 1, v15) == 1) {
        goto LABEL_17;
      }
      uint64_t v39 = v51;
      v30(v51, (uint64_t)v58, v15);
      v30(a2, (uint64_t)v39, v15);
      if (v46 == a3)
      {
        a3 = v42;
        a1 = v43;
        goto LABEL_18;
      }
      uint64_t v40 = v54;
      a2 += *(void *)(v54 + 72);
      uint64_t v41 = v59;
      outlined init with copy of Date?(v23, v59);
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      ++a3;
      if (v25(v41, 1, v15) == 1) {
        goto LABEL_16;
      }
    }
    outlined destroy of Date?(v32, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
LABEL_11:
    uint64_t v35 = (uint64_t)v49;
    uint64_t v36 = v57;
    Date.addingTimeInterval(_:)();
    uint64_t v37 = *v50;
    (*v50)(v35, 0, 1, v15);
    uint64_t v23 = v56;
    outlined assign with take of Date?(v35, v56);
    goto LABEL_13;
  }
  a3 = 0;
LABEL_16:
  outlined destroy of Date?(v59, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
  (*v50)((uint64_t)v58, 1, 1, v15);
LABEL_17:
  a1 = v43;
  outlined destroy of Date?((uint64_t)v58, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
LABEL_18:
  outlined init with take of AlignedTimelineSchedule.Entries(v56, a1, type metadata accessor for EverySecondEntries);
  return a3;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v52 - v12;
  outlined init with copy of FragmentRangeSequence.Iterator(v3, (uint64_t)&v52 - v12, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v14 = type metadata accessor for FragmentRangeSequence(0);
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = (uint64_t *)(v3 + *(int *)(v14 + 20));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = &v13[v8[7]];
  *(void *)uint64_t v19 = v18;
  *((void *)v19 + 1) = v17;
  uint64_t v20 = &v13[v8[8]];
  *(_OWORD *)uint64_t v20 = *(_OWORD *)(v3 + v15);
  unint64_t v21 = &v13[v8[9]];
  *(void *)unint64_t v21 = v18;
  *((void *)v21 + 1) = v17;
  uint64_t v56 = v21;
  uint64_t v57 = v13;
  outlined destroy of FragmentRangeSequence(v3, type metadata accessor for FragmentRangeSequence);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_40;
  }
  if (!a3)
  {
LABEL_40:
    outlined init with take of AlignedTimelineSchedule.Entries((uint64_t)v57, a1, type metadata accessor for FragmentRangeSequence.Iterator);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v53 = a1;
    uint64_t v54 = a3;
    uint64_t v22 = 0;
    uint64_t v23 = v56;
    int v55 = v20;
    while (1)
    {
      unint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)v20;
      if (*(void *)v23 >= *(void *)v20)
      {
        if (__OFSUB__(v25, v24)) {
          goto LABEL_48;
        }
        if (v25 != v24 || *((void *)v23 + 1) >= *((void *)v20 + 1))
        {
          a3 = v22;
LABEL_39:
          a1 = v53;
          goto LABEL_40;
        }
      }
      outlined init with copy of FragmentRangeSequence.Iterator((uint64_t)v57, (uint64_t)v10, type metadata accessor for FragmentRangeSequence.Iterator);
      uint64_t v27 = *v10;
      Swift::UInt64 v26 = v10[1];
      uint64_t v28 = v10[2];
      swift_beginAccess();
      uint64_t v29 = *(void *)(v27 + 48);
      if (!*(void *)(v29 + 16)) {
        goto LABEL_53;
      }
      uint64_t v30 = (uint64_t)v10;
      swift_retain_n();
      swift_retain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28);
      if ((v32 & 1) == 0)
      {
        swift_release();
        goto LABEL_55;
      }
      uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 16 * v31);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_42;
      }
      Swift::UInt64 v58 = v26;
      unint64_t v34 = *(void *)(v33 + 16);
      if (v24 >= v34) {
        goto LABEL_43;
      }
      uint64_t v35 = v33 + 32;
      uint64_t v36 = *(void *)(v33 + 32 + 8 * v24);
      uint64_t v37 = 0;
      if (v24) {
        break;
      }
LABEL_17:
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t *)v30;
      outlined destroy of FragmentRangeSequence(v30, type metadata accessor for Text.Effect.BaseContent);
      uint64_t v20 = v55;
      uint64_t v23 = v56;
      uint64_t v41 = *(void *)v56;
      if (__OFSUB__(*(void *)v55, *(void *)v56)) {
        goto LABEL_44;
      }
      if (*(void *)v55 == *(void *)v56)
      {
        uint64_t v42 = *((void *)v56 + 1);
        uint64_t v43 = *((void *)v55 + 1);
        if (v43 < v42) {
          goto LABEL_49;
        }
        uint64_t v44 = *(void *)(*(void *)(v36 + 96) + 16);
        BOOL v40 = __OFADD__(v37, v44);
        uint64_t v45 = v37 + v44;
        BOOL v46 = v40;
      }
      else
      {
        uint64_t v47 = *(void *)(*(void *)(v36 + 96) + 16);
        uint64_t v45 = v37 + v47;
        BOOL v46 = __OFADD__(v37, v47);
        if (__OFADD__(v37, v47)) {
          goto LABEL_50;
        }
        uint64_t v42 = *((void *)v56 + 1);
        if (v45 < v37 || v45 < v42) {
          goto LABEL_51;
        }
        uint64_t v43 = v45;
      }
      if (v46) {
        goto LABEL_45;
      }
      if (v45 < v37) {
        goto LABEL_46;
      }
      *((void *)v56 + 1) = v45;
      BOOL v40 = __OFADD__(v41, 1);
      uint64_t v49 = v41 + 1;
      if (v40) {
        goto LABEL_47;
      }
      ++v22;
      *(void *)uint64_t v23 = v49;
      Swift::UInt64 v50 = v58;
      *a2 = v27;
      a2[1] = v50;
      a2[2] = v28;
      a2[3] = v36;
      a2[4] = v24;
      a2[5] = v34;
      a2[6] = v37;
      a2[7] = v42;
      a2[8] = v43;
      a2 += 9;
      a3 = v54;
      if (v22 == v54) {
        goto LABEL_39;
      }
    }
    unint64_t v38 = v24;
    while (1)
    {
      uint64_t v39 = *(void *)(*(void *)(*(void *)v35 + 96) + 16);
      BOOL v40 = __OFADD__(v37, v39);
      v37 += v39;
      if (v40) {
        break;
      }
      v35 += 8;
      if (!--v38) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  __break(1u);
LABEL_53:
  swift_retain();
  swift_retain();
LABEL_55:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _s10Foundation4DateVSgMaTm_2(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v42 = *(void *)(v11 - 8);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v41 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
  if (-v33 < 64) {
    uint64_t v16 = ~(-1 << -(char)v33);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
LABEL_39:
    uint64_t v29 = ~v33;
    *a1 = v43;
    a1[1] = v15;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v37 = a3;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v41;
  uint64_t v39 = v42 + 16;
  BOOL v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56);
  uint64_t v38 = v42 + 48;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v34 = v15;
  int64_t v35 = (unint64_t)(63 - v33) >> 6;
  int64_t v31 = v35 - 1;
  char v32 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    uint64_t v26 = v42;
    uint64_t v27 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v42 + 16))(v10, *(void *)(v43 + 48) + v27 * v22, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v34;
      goto LABEL_38;
    }
    ++v19;
    uint64_t v28 = *v36;
    (*v36)(v20, v10, v11);
    v28(a2, v20, v11);
    if (v19 == v37)
    {
      a1 = v32;
      uint64_t v15 = v34;
      goto LABEL_39;
    }
    a2 += v27;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v34;
    if (v23 >= v35) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v18 + 2;
      ++v18;
      if (v23 + 1 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v25);
      if (v24) {
        goto LABEL_14;
      }
      int64_t v18 = v23 + 1;
      if (v23 + 2 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * (v23 + 2));
      if (v24)
      {
        v23 += 2;
      }
      else
      {
        int64_t v18 = v23 + 2;
        if (v23 + 3 >= v35) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v34 + 8 * (v23 + 3));
        if (!v24)
        {
          int64_t v25 = v23 + 4;
          int64_t v18 = v23 + 3;
          if (v23 + 4 < v35)
          {
            unint64_t v24 = *(void *)(v34 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v35)
                {
                  int64_t v18 = v31;
                  goto LABEL_37;
                }
                unint64_t v24 = *(void *)(v34 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v23 = v25;
            goto LABEL_21;
          }
LABEL_37:
          (*v40)(v10, 1, 1, v11, v12);
          unint64_t v17 = 0;
LABEL_38:
          outlined destroy of Date?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0], (uint64_t (*)(void))_s10Foundation4DateVSgMaTm_2);
          a1 = v32;
          goto LABEL_39;
        }
        v23 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v18 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    int64_t v13 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v12);
    int64_t v15 = *v13;
    unint64_t v14 = v13[1];
    *a2 = v15;
    a2[1] = v14;
    a2 += 2;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  unint64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    unint64_t v16 = v8;
LABEL_19:
    uint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    unint64_t v16 = v18;
    goto LABEL_19;
  }
  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    long long v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *specialized Sequence._copySequenceContents(initializing:)(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_24619B550);
      unint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *unint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    int64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  if (!a3) {
    goto LABEL_12;
  }
  if (a3 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = a5;
  if (!a5)
  {
LABEL_14:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)v5;
  }
  if (a5 >= 1)
  {
    *a2 = *a4;
    uint64_t v6 = a3 - 1;
    if (a3 != 1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a4 + 15;
      while (v6 != v7)
      {
        if (a5 - 1 == v7)
        {
          uint64_t v5 = a5;
          goto LABEL_14;
        }
        if (v7 == 0x111111111111111) {
          goto LABEL_17;
        }
        uint64_t v9 = *v8;
        v8 += 15;
        a2[++v7] = v9;
        if (v6 == v7) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_12:
    uint64_t v5 = a3;
    goto LABEL_14;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t outlined destroy of FragmentRangeSequence(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with take of AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of FragmentRangeSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of SectionConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SubviewsCollectionSlice(uint64_t a1)
{
  return a1;
}

uint64_t sub_245C0E500()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchiveReader.subscript.getter()
{
  return closure #1 in ArchiveReader.subscript.getter();
}

ValueMetadata *type metadata accessor for AlignedTimelineSchedule()
{
  return &type metadata for AlignedTimelineSchedule;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in AlignedTimelineSchedule()
{
  return lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries);
}

uint64_t lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of Text.Effect.DisplayInfo(uint64_t a1)
{
  return a1;
}

uint64_t _EnvironmentKeyWritingModifier.keyPath.getter()
{
  return swift_retain();
}

uint64_t _EnvironmentKeyWritingModifier.keyPath.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_EnvironmentKeyWritingModifier.keyPath.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _EnvironmentKeyWritingModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t _EnvironmentKeyWritingModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 28), a1);
}

uint64_t (*_EnvironmentKeyWritingModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChildEnvironment<A>()
{
  return specialized ChildEnvironment.description.getter();
}

{
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  return 0xD000000000000027;
}

uint64_t *initializeBufferWithCopyOfBuffer for _EnvironmentKeyWritingModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    int64x2_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_245C0E814()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v8 = *(_DWORD *)(v6 + 80);
  int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = v8;
  unint64_t v10 = v8 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v8 + 8;
  size_t v12 = ((v9 + 8) & ~v9) + *(void *)(v6 + 64);
  int v13 = v8 & 0x100000;
  if (v9 <= 7 && v13 == 0 && (v10 & (v9 + 8)) + v12 <= 0x18)
  {
    uint64_t v17 = ~v9;
    *a1 = *a2;
    int64_t v18 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int64_t v19 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int64_t v18 = *v19;
    uint64_t v20 = (void *)(v10 & ((unint64_t)v18 + 11));
    uint64_t v21 = (uint64_t *)(v10 & ((unint64_t)v19 + 11));
    if (v7 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v21 + v11) & v17))
      {
LABEL_14:
        memcpy(v20, v21, v12);
        return v4;
      }
    }
    else
    {
      uint64_t v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      if (v22 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v20 = *v21;
    int64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v23(((unint64_t)v20 + v11) & v17, ((unint64_t)v21 + v11) & v17, v5);
    return v4;
  }
  uint64_t v16 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v16 + (v10 & (v9 + 16)));
  swift_retain();
  return v4;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  size_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v23 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
    int64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    size_t v16 = v23;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return a1;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v21(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return a1;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return a1;
}

_DWORD *initializeWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  uint64_t v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  void (*v15)(void *, void, uint64_t, uint64_t);
  size_t v16;

  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  uint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    uint64_t v11 = *(_DWORD *)(v7 + 84);
    uint64_t v12 = *(void *)(v7 + 64);
    if (v11) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    uint64_t v11 = *(_DWORD *)(v14 + 28);
    uint64_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    int64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    uint64_t v3 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

uint64_t getEnumTagSinglePayload for ChildEnvironment(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 8;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v10 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
  char v11 = 8 * v10;
  if (v10 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = (((1 << v11) + a2 - v7) >> v11) + 1;
  if (HIWORD(v14))
  {
    int v12 = *(_DWORD *)((char *)a1 + v10);
    if (v12) {
      goto LABEL_15;
    }
LABEL_25:
    int v18 = (unint64_t *)(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v9) & ~v6);
    }
    else
    {
      unint64_t v19 = *v18;
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      unsigned int v20 = v19 + 1;
    }
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  if (v14 > 0xFF)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v10);
    if (*(unsigned __int16 *)((char *)a1 + v10)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v14 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_25;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      int v16 = (v9 & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *a1;
        break;
      case 3:
        int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)a1;
        break;
      default:
        int v17 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v17 = 0;
  }
  return (v17 | v15) + v7;
}

void storeEnumTagSinglePayload for ChildEnvironment(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v10 | 7;
  uint64_t v12 = v10 + 8;
  size_t v13 = ((v10 + 8) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v14 = v13 + ((v10 + 8) & ~(v10 | 7));
  if (v8 - 1 >= a3)
  {
    int v15 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 1;
  if (v14 > 3) {
    goto LABEL_13;
  }
  unsigned int v16 = (((1 << (8 * v14)) + a3 - v8) >> (8 * v14)) + 1;
  if (HIWORD(v16))
  {
    int v15 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v16 >= 0x100) {
      int v15 = 2;
    }
    else {
      int v15 = v16 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      uint64_t v20 = ~v10;
      switch(v15)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v21 = (unsigned char *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11);
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v27 = a2 + 1;
                  v26((unint64_t)&v21[v12] & v20, v27);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v25 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v25 = a2;
                  }
                  *(void *)uint64_t v21 = v25;
                }
              }
            }
            else
            {
              if (v13 <= 3) {
                int v22 = ~(-1 << (8 * v13));
              }
              else {
                int v22 = -1;
              }
              if (v13)
              {
                int v23 = v22 & (a2 - v8);
                if (v13 <= 3) {
                  int v24 = v13;
                }
                else {
                  int v24 = 4;
                }
                bzero(v21, v13);
                switch(v24)
                {
                  case 2:
                    *(_WORD *)uint64_t v21 = v23;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v21 = v23;
                    v21[2] = BYTE2(v23);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v21 = v23;
                    break;
                  default:
                    *uint64_t v21 = v23;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v17 = a2 - v8;
  if (v14 < 4)
  {
    int v18 = (v17 >> (8 * v14)) + 1;
    if (v14)
    {
      int v19 = v17 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if (v14 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if (v14 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v13 + ((v10 + 8) & ~(v10 | 7)));
    *(_DWORD *)a1 = v17;
    int v18 = 1;
  }
  switch(v15)
  {
    case 1:
      a1[v14] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v18;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x245C0F488);
    case 4:
      *(_DWORD *)&a1[v14] = v18;
      break;
    default:
      return;
  }
}

unint64_t specialized ChildEnvironment.description.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

Swift::Void __swiftcall _ViewOutputs.detachIndirectOutputs()()
{
  int v1 = v0[3];
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  int v3 = *MEMORY[0x263F288F8];
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 48;
    do
    {
      AGGraphSetIndirectAttribute();
      v4 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  if (v1 != v3)
  {
    AGGraphSetIndirectAttribute();
  }
}

uint64_t one-time initialization function for handled(uint64_t a1)
{
  return one-time initialization function for handled(a1, static OpenURLAction.Result.handled, 1);
}

uint64_t static OpenURLAction.Result.handled.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for handled, (uint64_t)static OpenURLAction.Result.handled, a1);
}

uint64_t one-time initialization function for discarded(uint64_t a1)
{
  return one-time initialization function for handled(a1, static OpenURLAction.Result.discarded, 2);
}

uint64_t one-time initialization function for handled(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OpenURLAction.Result(0);
  __swift_allocate_value_buffer(v5, a2);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  type metadata accessor for (url: URL?)();
  unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, a3, 2, v7);
}

uint64_t static OpenURLAction.Result.discarded.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for discarded, (uint64_t)static OpenURLAction.Result.discarded, a1);
}

uint64_t one-time initialization function for systemAction()
{
  uint64_t v0 = type metadata accessor for OpenURLAction.Result(0);
  __swift_allocate_value_buffer(v0, static OpenURLAction.Result.systemAction);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static OpenURLAction.Result.systemAction);
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  type metadata accessor for (url: URL?)();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v1, 0, 2, v3);
}

uint64_t static OpenURLAction.Result.systemAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static OpenURLAction.Result.handled.getter(&one-time initialization token for systemAction, (uint64_t)static OpenURLAction.Result.systemAction, a1);
}

uint64_t static OpenURLAction.Result.handled.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OpenURLAction.Result(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of OpenURLAction.Result(v6, a3, type metadata accessor for OpenURLAction.Result);
}

uint64_t static OpenURLAction.Result.systemAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  type metadata accessor for (url: URL?)();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a2, 0, 2, v6);
}

void type metadata accessor for (url: URL?)()
{
  if (!lazy cache variable for type metadata for (url: URL?))
  {
    type metadata accessor for URL?(0);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (url: URL?));
    }
  }
}

__n128 OpenURLAction.init(handler:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_WORD *)(a2 + 32) = v2;
  return result;
}

uint64_t OpenURLAction.init(_handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  return result;
}

uint64_t specialized OpenURLAction._open(_:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  uint64_t v45 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v43 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unsigned int v8 = (char *)&v39 - v7;
  type metadata accessor for URL?(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  size_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  MEMORY[0x270FA5388](v15 - 8);
  unsigned int v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OpenURLAction.Result(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(uint64_t))a2;
  uint64_t v22 = *(void *)(a2 + 8);
  int v24 = *(void (**)(char *, uint64_t (*)(void, void), void))(a2 + 16);
  uint64_t v23 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a2 + 32))
  {
    BOOL v40 = v11;
    uint64_t v41 = v8;
    uint64_t v42 = v14;
    uint64_t v25 = v45;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v24);
    uint64_t v26 = v46;
    v21(v46);
    outlined init with copy of OpenURLAction.Result((uint64_t)v20, (uint64_t)v17, type metadata accessor for OpenURLAction.Result.ActionResult);
    type metadata accessor for (url: URL?)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v17, 2, v27))
    {
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v24);
    }
    else
    {
      uint64_t v30 = v26;
      uint64_t v31 = (uint64_t)v42;
      outlined init with take of URL?((uint64_t)v17, (uint64_t)v42);
      if (v24)
      {
        uint64_t v39 = v22;
        uint64_t v32 = (uint64_t)v40;
        outlined init with copy of OpenURLAction.Result(v31, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for URL?);
        uint64_t v34 = v43;
        uint64_t v33 = v44;
        uint64_t v35 = v25;
        (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v43, v30, v44);
        int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v32, 1, v33);
        uint64_t v37 = v41;
        if (v36 == 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v41, v34, v33);
          swift_retain();
          outlined destroy of (url: URL?)(v32, (uint64_t (*)(void))type metadata accessor for URL?);
        }
        else
        {
          uint64_t v38 = *(void (**)(char *, uint64_t))(v35 + 8);
          swift_retain();
          v38(v34, v33);
          uint64_t v31 = (uint64_t)v42;
          (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v37, v32, v33);
        }
        v24(v37, _ViewInputs.base.modify, 0);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v24);
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v24);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v33);
      }
      else
      {
        specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
        swift_release();
      }
      outlined destroy of (url: URL?)(v31, (uint64_t (*)(void))type metadata accessor for URL?);
    }
    return outlined destroy of (url: URL?)((uint64_t)v20, type metadata accessor for OpenURLAction.Result);
  }
  else
  {
    swift_retain();
    uint64_t v28 = v46;
    if ((URL.isFileURL.getter() & 1) == 0) {
      ((void (*)(uint64_t, uint64_t (*)(void, void), void))v21)(v28, _ViewInputs.base.modify, 0);
    }
    return outlined consume of OpenURLAction.Handler((uint64_t)v21, v22, (uint64_t)v24, v23, 0);
  }
}

uint64_t OpenURLAction._open(_:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v55 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v46 - v8;
  type metadata accessor for URL?(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v46 - v14;
  uint64_t v16 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OpenURLAction.Result(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void (**)(uint64_t))v3;
  uint64_t v22 = *(void *)(v3 + 8);
  uint64_t v25 = *(void *)(v3 + 16);
  uint64_t v24 = *(void *)(v3 + 24);
  if (*(unsigned char *)(v3 + 32))
  {
    uint64_t v47 = v12;
    uint64_t v48 = v9;
    uint64_t v49 = v15;
    uint64_t v27 = v51;
    uint64_t v26 = v52;
    uint64_t v28 = v22;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v25);
    uint64_t v50 = v28;
    v23(v55);
    outlined init with copy of OpenURLAction.Result((uint64_t)v21, (uint64_t)v18, type metadata accessor for OpenURLAction.Result.ActionResult);
    type metadata accessor for (url: URL?)();
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v18, 2, v29);
    uint64_t v31 = (void (*)(char *, uint64_t (*)(), uint64_t))v25;
    if (v30)
    {
      if (v30 != 1) {
        uint64_t v30 = 0;
      }
      v53(v30);
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v25);
    }
    else
    {
      uint64_t v35 = v55;
      uint64_t v36 = (uint64_t)v49;
      outlined init with take of URL?((uint64_t)v18, (uint64_t)v49);
      if (v31)
      {
        uint64_t v37 = v36;
        uint64_t v38 = (uint64_t)v47;
        outlined init with copy of OpenURLAction.Result(v37, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for URL?);
        uint64_t v39 = v26;
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v35, v26);
        int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v38, 1, v26);
        uint64_t v41 = v48;
        if (v40 == 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v48, v6, v39);
          swift_retain();
          outlined destroy of (url: URL?)(v38, (uint64_t (*)(void))type metadata accessor for URL?);
        }
        else
        {
          uint64_t v43 = v21;
          uint64_t v44 = *(void (**)(char *, uint64_t))(v27 + 8);
          swift_retain();
          v44(v6, v39);
          uint64_t v21 = v43;
          (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v41, v38, v39);
        }
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = v53;
        *(void *)(v45 + 24) = v54;
        swift_retain();
        v31(v41, partial apply for closure #1 in OpenURLAction._open(_:completion:), v45);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v31);
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v31);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v41, v39);
        uint64_t v42 = (uint64_t)v49;
      }
      else
      {
        specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
        swift_release();
        uint64_t v42 = v36;
      }
      outlined destroy of (url: URL?)(v42, (uint64_t (*)(void))type metadata accessor for URL?);
    }
    return outlined destroy of (url: URL?)((uint64_t)v21, type metadata accessor for OpenURLAction.Result);
  }
  else
  {
    uint64_t v32 = *(void *)(v3 + 8);
    swift_retain();
    uint64_t v33 = v55;
    if (URL.isFileURL.getter()) {
      v53(0);
    }
    else {
      ((void (*)(uint64_t, void (*)(uint64_t), uint64_t))v23)(v33, v53, v54);
    }
    return outlined consume of OpenURLAction.Handler((uint64_t)v23, v32, v25, v24, 0);
  }
}

uint64_t OpenURLAction.callAsFunction(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 33);
  long long v4 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v4;
  char v7 = v2;
  char v8 = v3;
  return specialized OpenURLAction._open(_:completion:)(a1, (uint64_t)v6);
}

uint64_t OpenURLAction.callAsFunction(_:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return OpenURLAction._open(_:completion:)(a1, a2, a3);
}

void static OpenURLAction.invalidAction.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = closure #1 in static OpenURLAction.invalidAction.getter;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
}

uint64_t closure #1 in static OpenURLAction.invalidAction.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for discarded != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OpenURLAction.Result(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static OpenURLAction.Result.discarded);
  return outlined init with copy of OpenURLAction.Result(v3, a1, type metadata accessor for OpenURLAction.Result);
}

double static OpenURLActionKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 255;
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance OpenURLActionKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 255;
  return result;
}

uint64_t EnvironmentValues.hasSystemOpenURLAction.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.hasSystemOpenURLAction : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

void (*EnvironmentValues.hasSystemOpenURLAction.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.hasSystemOpenURLAction.modify;
}

void EnvironmentValues.hasSystemOpenURLAction.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  char v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void EnvironmentValues.openURL.getter(uint64_t a1@<X8>)
{
}

uint64_t EnvironmentValues.openURL.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  __int16 v6 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 33)) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  v11[0] = *(void *)a1;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  __int16 v12 = v7 | v6;
  uint64_t v8 = *v1;
  swift_retain_n();
  outlined copy of OpenURLAction.Handler(v2, v3, v4, v5, v6);
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)v11);
  swift_release();
  outlined consume of OpenURLAction.Handler(v2, v3, v4, v5, v6);
  if (v1[1])
  {
    uint64_t v9 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v9);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of OpenURLAction.Handler(v2, v3, v4, v5, v6);
}

uint64_t EnvironmentValues._openURL.setter(uint64_t a1)
{
  return EnvironmentValues._openURL.setter(a1, (void (*)(uint64_t *, void *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.openURL.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues.openURL.modify;
}

void EnvironmentValues.openURL.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 80);
  uint64_t v5 = *(void *)(*a1 + 88);
  uint64_t v4 = *(void *)(*a1 + 96);
  uint64_t v6 = *(void *)(*a1 + 104);
  __int16 v7 = *(unsigned __int8 *)(*a1 + 112);
  if (*(unsigned char *)(*a1 + 113)) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }
  __int16 v9 = v8 | v7;
  uint64_t v10 = *(uint64_t **)(v2 + 136);
  if (a2)
  {
    *(void *)uint64_t v2 = v3;
    *(void *)(v2 + 8) = v5;
    *(void *)(v2 + 16) = v4;
    *(void *)(v2 + 24) = v6;
    *(_WORD *)(v2 + 32) = v9;
    uint64_t v11 = *v10;
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    specialized closure #1 in PropertyList.subscript.setter(v10, v2);
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    if (v10[1])
    {
      uint64_t v12 = **(void **)(v2 + 136);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    uint64_t v13 = *(void *)(v2 + 80);
    uint64_t v14 = *(void *)(v2 + 88);
    uint64_t v15 = *(void *)(v2 + 96);
    uint64_t v16 = *(void *)(v2 + 104);
    char v17 = *(unsigned char *)(v2 + 112);
  }
  else
  {
    *(void *)(v2 + 40) = v3;
    *(void *)(v2 + 48) = v5;
    *(void *)(v2 + 56) = v4;
    *(void *)(v2 + 64) = v6;
    *(_WORD *)(v2 + 72) = v9;
    uint64_t v18 = *v10;
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    specialized closure #1 in PropertyList.subscript.setter(v10, v2 + 40);
    swift_release();
    outlined consume of OpenURLAction.Handler(v3, v5, v4, v6, v7);
    if (v10[1])
    {
      uint64_t v19 = **(void **)(v2 + 136);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v18, v19);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v13 = v3;
    uint64_t v14 = v5;
    uint64_t v15 = v4;
    uint64_t v16 = v6;
    char v17 = v7;
  }
  outlined consume of OpenURLAction.Handler(v13, v14, v15, v16, v17);

  free((void *)v2);
}

void (*EnvironmentValues._openURL.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues._openURL.modify;
}

void EnvironmentValues._openURL.modify(char **a1, char a2)
{
}

uint64_t EnvironmentValues._openSensitiveURL.setter(uint64_t a1)
{
  return EnvironmentValues._openURL.setter(a1, (void (*)(uint64_t *, void *, unsigned char *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues._openURL.setter(uint64_t a1, void (*a2)(uint64_t *, void *, unsigned char *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  __int16 v10 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 33)) {
    __int16 v11 = 256;
  }
  else {
    __int16 v11 = 0;
  }
  v16[0] = *(void *)a1;
  v16[1] = v7;
  v16[2] = v8;
  v16[3] = v9;
  __int16 v17 = v11 | v10;
  uint64_t v12 = *v3;
  swift_retain_n();
  outlined copy of OpenURLAction.Handler(v6, v7, v8, v9, v10);
  a2(v3, v16, v15);
  swift_release();
  outlined consume of OpenURLAction.Handler(v6, v7, v8, v9, v10);
  if (v3[1])
  {
    uint64_t v13 = *v3;
    swift_retain();
    swift_retain();
    a3(v12, v13);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of OpenURLAction.Handler(v6, v7, v8, v9, v10);
}

void (*EnvironmentValues._openSensitiveURL.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  EnvironmentValues._openSensitiveURL.getter((uint64_t)(v3 + 10));
  return EnvironmentValues._openSensitiveURL.modify;
}

void EnvironmentValues._openSensitiveURL.modify(char **a1, char a2)
{
}

void EnvironmentValues._openURL.modify(char **a1, char a2, void (*a3)(uint64_t *, char *, char *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 10);
  uint64_t v7 = *((void *)*a1 + 11);
  uint64_t v6 = *((void *)*a1 + 12);
  uint64_t v8 = *((void *)*a1 + 13);
  __int16 v9 = (*a1)[112];
  if ((*a1)[113]) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  __int16 v11 = v10 | v9;
  uint64_t v12 = (uint64_t *)*((void *)v4 + 17);
  if (a2)
  {
    *(void *)uint64_t v4 = v5;
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v6;
    *((void *)v4 + 3) = v8;
    *((_WORD *)v4 + 16) = v11;
    uint64_t v13 = *v12;
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    a3(v12, v4, v4 + 120);
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    if (v12[1])
    {
      uint64_t v15 = **((void **)v4 + 17);
      swift_retain();
      swift_retain();
      a4(v13, v15);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    uint64_t v16 = *((void *)v4 + 10);
    uint64_t v17 = *((void *)v4 + 11);
    uint64_t v18 = *((void *)v4 + 12);
    uint64_t v19 = *((void *)v4 + 13);
    char v20 = v4[112];
  }
  else
  {
    *((void *)v4 + 5) = v5;
    *((void *)v4 + 6) = v7;
    *((void *)v4 + 7) = v6;
    *((void *)v4 + 8) = v8;
    *((_WORD *)v4 + 36) = v11;
    uint64_t v21 = *v12;
    swift_retain_n();
    outlined copy of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    a3(v12, v4 + 40, v4 + 128);
    swift_release();
    outlined consume of OpenURLAction.Handler(v5, v7, v6, v8, v9);
    if (v12[1])
    {
      uint64_t v23 = **((void **)v4 + 17);
      swift_retain();
      swift_retain();
      a4(v21, v23);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v16 = v5;
    uint64_t v17 = v7;
    uint64_t v18 = v6;
    uint64_t v19 = v8;
    char v20 = v9;
  }
  outlined consume of OpenURLAction.Handler(v16, v17, v18, v19, v20);

  free(v4);
}

uint64_t sub_245C111D0(char *a1)
{
  return EnvironmentValues.hasSystemOpenURLAction.setter(*a1);
}

uint64_t initializeWithCopy for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of OpenURLAction.Handler(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of OpenURLAction.Handler(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for OpenURLAction.Handler(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of OpenURLAction.Handler(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Handler(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Handler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for OpenURLAction.Handler(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLAction.Result(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for OpenURLAction.Result.ActionResult(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for (url: URL?)();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        type metadata accessor for URL?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

void *initializeWithCopy for OpenURLAction.Result(void *a1, const void *a2)
{
  type metadata accessor for (url: URL?)();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    uint64_t v7 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for OpenURLAction.Result(void *a1, void *a2)
{
  type metadata accessor for (url: URL?)();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v4);
  int v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 24))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      type metadata accessor for URL?(0);
      goto LABEL_8;
    }
    outlined destroy of (url: URL?)((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (url: URL?));
LABEL_7:
    uint64_t v13 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
LABEL_8:
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  if (v9) {
    goto LABEL_7;
  }
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 16))(a1, a2, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

void *initializeWithTake for OpenURLAction.Result(void *a1, const void *a2)
{
  type metadata accessor for (url: URL?)();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    uint64_t v7 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithTake for OpenURLAction.Result(void *a1, void *a2)
{
  type metadata accessor for (url: URL?)();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v4);
  int v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 40))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      type metadata accessor for URL?(0);
      goto LABEL_8;
    }
    outlined destroy of (url: URL?)((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (url: URL?));
LABEL_7:
    uint64_t v13 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
LABEL_8:
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    return a1;
  }
  if (v9) {
    goto LABEL_7;
  }
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v11 + 32))(a1, a2, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C11FE0);
}

uint64_t sub_245C11FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C12060);
}

uint64_t sub_245C12060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenURLAction.Result.ActionResult(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

ValueMetadata *type metadata accessor for OpenURLActionKey()
{
  return &type metadata for OpenURLActionKey;
}

ValueMetadata *type metadata accessor for OpenSensitiveURLActionKey()
{
  return &type metadata for OpenSensitiveURLActionKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for OpenURLAction.Result.ActionResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    type metadata accessor for (url: URL?)();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        type metadata accessor for URL?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

uint64_t destroy for OpenURLAction.Result(uint64_t a1)
{
  type metadata accessor for (url: URL?)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v4);
    if (!result)
    {
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      return v5(a1, v4);
    }
  }
  return result;
}

void *initializeWithCopy for OpenURLAction.Result.ActionResult(void *a1, const void *a2, uint64_t a3)
{
  type metadata accessor for (url: URL?)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

void *assignWithCopy for OpenURLAction.Result.ActionResult(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for (url: URL?)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v16 = type metadata accessor for URL();
      uint64_t v17 = *(void *)(v16 - 8);
      int v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
      int v19 = v18(a1, 1, v16);
      int v20 = v18(a2, 1, v16);
      if (v19)
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 16))(a1, a2, v16);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
          return a1;
        }
      }
      else
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 24))(a1, a2, v16);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v17 + 8))(a1, v16);
      }
      type metadata accessor for URL?(0);
      size_t v15 = *(void *)(*(void *)(v22 - 8) + 64);
      goto LABEL_8;
    }
    outlined destroy of (url: URL?)((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (url: URL?));
LABEL_7:
    size_t v15 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v15);
    return a1;
  }
  if (v11) {
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(a1, a2, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

void *initializeWithTake for OpenURLAction.Result.ActionResult(void *a1, const void *a2, uint64_t a3)
{
  type metadata accessor for (url: URL?)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(a1, a2, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

void *assignWithTake for OpenURLAction.Result.ActionResult(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for (url: URL?)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v16 = type metadata accessor for URL();
      uint64_t v17 = *(void *)(v16 - 8);
      int v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
      int v19 = v18(a1, 1, v16);
      int v20 = v18(a2, 1, v16);
      if (v19)
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 32))(a1, a2, v16);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
          return a1;
        }
      }
      else
      {
        if (!v20)
        {
          (*(void (**)(void *, void *, uint64_t))(v17 + 40))(a1, a2, v16);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v17 + 8))(a1, v16);
      }
      type metadata accessor for URL?(0);
      size_t v15 = *(void *)(*(void *)(v22 - 8) + 64);
      goto LABEL_8;
    }
    outlined destroy of (url: URL?)((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for (url: URL?));
LABEL_7:
    size_t v15 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v15);
    return a1;
  }
  if (v11) {
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
  {
    type metadata accessor for URL?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v13 + 32))(a1, a2, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenURLAction.Result.ActionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C12E3C);
}

uint64_t sub_245C12E3C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (url: URL?)();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OpenURLAction.Result.ActionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C12EBC);
}

uint64_t sub_245C12EBC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  type metadata accessor for (url: URL?)();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for OpenURLAction.Result.ActionResult(uint64_t a1)
{
  type metadata accessor for (url: URL?)();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for OpenURLAction.Result.ActionResult(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (url: URL?)();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t outlined init with copy of OpenURLAction.Result(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of (url: URL?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245C130E0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OpenURLAction._open(_:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

ValueMetadata *type metadata accessor for HasSystemOpenURLActionKey()
{
  return &type metadata for HasSystemOpenURLActionKey;
}

uint64_t (*default argument 1 of Gesture.delayed(by:filter:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys;
}

uint64_t Gesture.delayed(by:filter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  swift_getAssociatedTypeWitness();
  *(double *)uint64_t v12 = a5;
  v12[1] = a1;
  void v12[2] = a2;
  uint64_t v10 = type metadata accessor for DelayedGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v12, a3, v10, a4);
}

uint64_t sub_245C1326C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for DelayedGesture()
{
  return __swift_instantiateGenericMetadata();
}

double DelayedGesture.duration.getter()
{
  return *(double *)v0;
}

void DelayedGesture.duration.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*DelayedGesture.duration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for DelayedGesture.filter : <A>DelayedGesture<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool);
  a4[1] = v8;

  return swift_retain();
}

uint64_t key path setter for DelayedGesture.filter : <A>DelayedGesture<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  v8[4] = v6;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool);
  *(void *)(a2 + 16) = v8;
  return result;
}

uint64_t DelayedGesture.filter.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t DelayedGesture.filter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*DelayedGesture.filter.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static DelayedGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  unint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 96);
  int v9 = *(_DWORD *)(a2 + 120);
  unint64_t v23 = v6;
  int32x2_t v24 = *(int32x2_t *)(a2 + 8);
  int32x2_t v10 = v24;
  uint64_t v25 = v7;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v26 = *(_OWORD *)(a2 + 24);
  long long v27 = v11;
  long long v28 = *(_OWORD *)(a2 + 56);
  uint64_t v29 = *(void *)(a2 + 72);
  int v30 = v8;
  int32x2_t v32 = *(int32x2_t *)(a2 + 112);
  int32x2_t v12 = v32;
  int v33 = v9;
  a3(&v18, &v23);
  unsigned int v13 = v18;
  swift_bridgeObjectRelease();
  unint64_t v23 = __PAIR64__(v13, v5);
  int32x2_t v24 = vzip1_s32(v10, v12);
  LOBYTE(v25) = (v9 & 0x10) != 0;
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 1;
  HIDWORD(v26) = 0;
  uint64_t v20 = type metadata accessor for GesturePhase();
  uint64_t v14 = type metadata accessor for DelayedPhase();
  uint64_t v21 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v19, v14, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  return _GestureOutputs.init(phase:)(v18, a4);
}

uint64_t DelayedPhase.modifier.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for DelayedGesture();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v4 = Value[2];
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v4;

  return swift_retain();
}

uint64_t DelayedPhase.childPhase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t DelayedPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DelayedGesture<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  return static DelayedGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

void DelayedPhase.resetPhase()()
{
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
}

uint64_t DelayedPhase.updateValue()(uint64_t a1)
{
  uint64_t v2 = (long long *)v1;
  v110[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GesturePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v99 = (char *)&v88 - v13;
  MEMORY[0x270FA5388](v14);
  v103 = (uint64_t *)((char *)&v88 - v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v88 - v17;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    v94 = v7;
    uint64_t v96 = v5;
    uint64_t v97 = v4;
    v95 = v18;
    v100 = v11;
    uint64_t v101 = v9;
    uint64_t v102 = v8;
    unsigned int v21 = *v1;
    unsigned int v20 = v1[1];
    unsigned int v22 = v1[2];
    unsigned int v23 = v1[3];
    uint64_t v24 = a1;
    char v25 = *((unsigned char *)v1 + 16);
    double v26 = *((double *)v1 + 3);
    char v27 = *((unsigned char *)v1 + 32);
    unsigned int v28 = v1[9];
    LODWORD(v105) = *v1;
    *(void *)((char *)&v105 + 4) = __PAIR64__(v22, v20);
    HIDWORD(v105) = v23;
    char v106 = v25;
    double v107 = v26;
    char v108 = v27;
    unsigned int v109 = v28;
    uint64_t v98 = v24;
    DelayedPhase.modifier.getter(v110);
    double v29 = *(double *)v110;
    swift_release();
    if (v29 <= 0.0 || (swift_beginAccess(), (static CoreTesting.isRunning & 1) != 0))
    {
      *(void *)&long long v105 = __PAIR64__(v20, v21);
      *((void *)&v105 + 1) = __PAIR64__(v23, v22);
      char v106 = v25;
      double v107 = v26;
      char v108 = v27;
      unsigned int v109 = v28;
      uint64_t v30 = (uint64_t)v100;
      uint64_t v31 = v98;
      uint64_t v32 = DelayedPhase.childPhase.getter((uint64_t)v100);
      MEMORY[0x270FA5388](v32);
      *(&v88 - 2) = v31;
      *(&v88 - 1) = swift_getWitnessTable();
      uint64_t v33 = v102;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v88 - 4), v102, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v30, v33);
    }
    *(void *)&long long v105 = __PAIR64__(v20, v21);
    *((void *)&v105 + 1) = __PAIR64__(v23, v22);
    char v106 = v25;
    double v107 = v26;
    char v108 = v27;
    unsigned int v109 = v28;
    uint64_t v35 = (uint64_t)v103;
    uint64_t v36 = v98;
    DelayedPhase.childPhase.getter((uint64_t)v103);
    uint64_t v37 = v102;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v43 = (uint64_t)v100;
      uint64_t v39 = v101;
      v93 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
      v93(v100, v35, v37);
      uint64_t v41 = v97;
      uint64_t v42 = v96;
    }
    else
    {
      uint64_t v39 = v101;
      uint64_t v40 = (uint64_t)v95;
      uint64_t v41 = v97;
      uint64_t v42 = v96;
      if (EnumCaseMultiPayload)
      {
LABEL_9:
        char v45 = *((unsigned char *)v2 + 16);
        double v46 = *((double *)v2 + 3);
        char v47 = *((unsigned char *)v2 + 32);
        unsigned int v48 = *((_DWORD *)v2 + 9);
        long long v105 = *v2;
        char v106 = v45;
        double v107 = v46;
        char v108 = v47;
        unsigned int v109 = v48;
        DelayedPhase.childPhase.getter(v40);
        uint64_t v49 = v35;
        uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v50(v49, v37);
        uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16);
LABEL_25:
        uint64_t v85 = (uint64_t)v100;
        uint64_t v86 = v51(v100, v40, v37);
        MEMORY[0x270FA5388](v86);
        *(&v88 - 2) = v36;
        *(&v88 - 1) = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v85, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v88 - 4), v37, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v87);
        v50(v85, v37);
        return ((uint64_t (*)(uint64_t, uint64_t))v50)(v40, v37);
      }
      uint64_t v43 = (uint64_t)v99;
      v93 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
      v93(v99, v35, v37);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
      {
        uint64_t v44 = type metadata accessor for Optional();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
        goto LABEL_9;
      }
    }
    uint64_t v52 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v94, v43, v41);
    uint64_t v53 = *(uint64_t **)(v39 + 8);
    v99 = (char *)((v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
    v103 = v53;
    ((void (*)(uint64_t, uint64_t))v53)(v35, v37);
    unsigned int v54 = *((_DWORD *)v2 + 1);
    unsigned int v56 = *((_DWORD *)v2 + 2);
    unsigned int v55 = *((_DWORD *)v2 + 3);
    char v57 = *((unsigned char *)v2 + 16);
    double v58 = *((double *)v2 + 3);
    char v59 = *((unsigned char *)v2 + 32);
    unsigned int v60 = *((_DWORD *)v2 + 9);
    unsigned int v91 = *(_DWORD *)v2;
    *(void *)&long long v105 = __PAIR64__(v54, v91);
    unsigned int v90 = v54;
    *((void *)&v105 + 1) = __PAIR64__(v55, v56);
    unsigned int v89 = v55;
    char v106 = v57;
    double v107 = v58;
    char v108 = v59;
    unsigned int v92 = v60;
    unsigned int v109 = v60;
    DelayedPhase.modifier.getter(v104);
    uint64_t v61 = v36;
    char v62 = ((uint64_t (*)(char *))v104[1])(v52);
    swift_release();
    if (v62)
    {
      double v63 = *(double *)AGGraphGetValue();
      if (v59)
      {
        uint64_t v36 = v98;
        uint64_t v50 = (void (*)(uint64_t, uint64_t))v103;
        goto LABEL_17;
      }
      *(void *)&long long v105 = __PAIR64__(v90, v91);
      *((void *)&v105 + 1) = __PAIR64__(v89, v56);
      char v106 = v57;
      double v107 = v58;
      char v108 = 0;
      unsigned int v109 = v92;
      uint64_t v36 = v98;
      DelayedPhase.modifier.getter(v104);
      double v68 = *(double *)v104;
      swift_release();
      BOOL v69 = v68 > v63 - v58;
      double v63 = v58;
      uint64_t v50 = (void (*)(uint64_t, uint64_t))v103;
      if (v69)
      {
LABEL_17:
        *((double *)v2 + 3) = v63;
        *((unsigned char *)v2 + 32) = 0;
        uint64_t v70 = v96;
        uint64_t v40 = (uint64_t)v95;
        uint64_t v71 = v97;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v95, 1, 1, v97);
        uint64_t v37 = v102;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v94, v71);
        LODWORD(v71) = *((unsigned __int8 *)v2 + 16);
        double v72 = *((double *)v2 + 3);
        char v73 = *((unsigned char *)v2 + 32);
        unsigned int v74 = *((_DWORD *)v2 + 9);
        long long v105 = *v2;
        char v106 = v71;
        double v107 = v72;
        char v108 = v73;
        unsigned int v109 = v74;
        DelayedPhase.modifier.getter(v104);
        double v75 = *(double *)v104;
        swift_release();
        double v76 = v63 + v75;
        if (v71 == 1)
        {
          uint64_t v77 = specialized static GestureGraph.current.getter();
          double v78 = *(double *)(v77 + 264);
          if (v76 < v78) {
            double v78 = v76;
          }
          *(double *)(v77 + 264) = v78;
          swift_release();
        }
        else
        {
          uint64_t v79 = specialized static ViewGraph.current.getter();
          swift_beginAccess();
          double v80 = *(double *)(v79 + 400);
          if (v76 < v80) {
            double v80 = v76;
          }
          *(double *)(v79 + 400) = v80;
          swift_release();
        }
        goto LABEL_24;
      }
      (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v97);
      char v81 = *((unsigned char *)v2 + 16);
      double v82 = *((double *)v2 + 3);
      char v83 = *((unsigned char *)v2 + 32);
      unsigned int v84 = *((_DWORD *)v2 + 9);
      long long v105 = *v2;
      char v106 = v81;
      double v107 = v82;
      char v108 = v83;
      unsigned int v109 = v84;
      uint64_t v40 = (uint64_t)v95;
      DelayedPhase.childPhase.getter((uint64_t)v95);
      uint64_t v37 = v102;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v52, v97);
      char v64 = *((unsigned char *)v2 + 16);
      double v65 = *((double *)v2 + 3);
      char v66 = *((unsigned char *)v2 + 32);
      unsigned int v67 = *((_DWORD *)v2 + 9);
      long long v105 = *v2;
      char v106 = v64;
      double v107 = v65;
      char v108 = v66;
      unsigned int v109 = v67;
      uint64_t v40 = (uint64_t)v95;
      DelayedPhase.childPhase.getter((uint64_t)v95);
      uint64_t v36 = v61;
      uint64_t v37 = v102;
      uint64_t v50 = (void (*)(uint64_t, uint64_t))v103;
    }
LABEL_24:
    uint64_t v51 = (uint64_t (*)(char *, uint64_t, uint64_t))v93;
    goto LABEL_25;
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance DelayedPhase<A>()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance DelayedPhase<A>(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance DelayedPhase<A>())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance DelayedPhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t type metadata accessor for DelayedPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245C14194()
{
  return 8;
}

void *sub_245C141A0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for DelayedGesture(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for DelayedGesture(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DelayedGesture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayedGesture(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayedGesture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DelayedPhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DelayedPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for DelayedPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DelayedPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C143E8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 24))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result & 1;
  return result;
}

uint64_t closure #1 in StatefulRule.value.setterpartial apply()
{
  return partial apply for closure #1 in StatefulRule.value.setter();
}

SwiftUI::Spring __swiftcall Spring.init(mass:stiffness:damping:allowOverDamping:)(Swift::Double mass, Swift::Double stiffness, Swift::Double damping, Swift::Bool allowOverDamping)
{
  double v5 = stiffness / mass;
  double v6 = sqrt(stiffness / mass);
  double v7 = damping / (mass + mass);
  if (allowOverDamping || (double v8 = 0.0, v6 >= v7))
  {
    double v8 = sqrt(vabdd_f64(v5, v7 * v7));
    if (v6 < v7) {
      double v8 = -v8;
    }
  }
  else
  {
    double v7 = v6;
  }
  *BOOL v4 = v8;
  v4[1] = v7;
  long long v4[2] = mass;
  result._mass = v8;
  result.decayConstant = v7;
  result.angularFrequency = mass;
  return result;
}

void specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  if (a5 != 0.0)
  {
    double v8 = a1 * a5;
    if (a4 <= 0.0)
    {
      double v22 = v8 - a2;
      double v20 = -a4 - a5;
      double v21 = -a5;
      double v18 = a5 - a4;
      double v19 = a4 - a5;
      double v17 = a4 + a4;
      double v9 = -1.0;
      double v10 = 0.0;
      double v11 = INFINITY;
      for (uint64_t i = 1024; i; --i)
      {
        if (a4 >= 0.0)
        {
          double v15 = a1 - (v22 * v10 + a1) * exp(v10 * v21);
        }
        else
        {
          double v13 = exp(v20 * v10);
          long double v14 = exp(v19 * v10);
          double v15 = ((v18 * v13 + v20 * v14) / v17 + 1.0) * a1 - (v13 - v14) / v17 * a2;
        }
        double v16 = sqrt((a1 - v15) * (a1 - v15));
        if ((~*(void *)&v16 & 0x7FF0000000000000) == 0) {
          break;
        }
        if (v11 >= a3)
        {
          if (v16 < v11)
          {
            double v11 = v16;
            double v9 = v10;
          }
        }
        else if (v16 >= a3)
        {
          double v11 = INFINITY;
        }
        else if (v10 - v9 > 1.0)
        {
          return;
        }
        double v10 = v10 + 0.1;
      }
    }
    else
    {
      fmax(-log(a3 / (sqrt(a1 * a1) + sqrt((v8 - a2) * (v8 - a2)))) / a5, 0.0);
    }
  }
}

void specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(double *a1, float64x2_t *a2, double a3, double a4, double a5)
{
  if (a5 != 0.0)
  {
    double v5 = a5;
    double v8 = a1[7];
    double v9 = a1[8];
    double v11 = a1[5];
    double v10 = a1[6];
    double v12 = a1[3];
    double v13 = a1[4];
    double v15 = a1[1];
    double v14 = a1[2];
    if (a4 <= 0.0)
    {
      double v34 = -1.0;
      double v21 = INFINITY;
      uint64_t v22 = 1024;
      double v23 = 0.0;
      double v32 = v5;
      double v33 = *a1;
      double v31 = a4;
      do
      {
        double v35 = v23;
        double v36 = v21;
        double v27 = v5;
        double v28 = v11;
        specialized Spring.value<A>(target:initialVelocity:time:)((uint64_t)a1, a2, (uint64_t)&v37, v23, a4, v27);
        double v29 = sqrt((v33 - v37) * (v33 - v37)+ (v15 - v38) * (v15 - v38)+ (v14 - v39) * (v14 - v39)+ (v12 - v40) * (v12 - v40)+ (v13 - v41) * (v13 - v41)+ (v28 - v42) * (v28 - v42)+ (v10 - v43) * (v10 - v43)+ (v8 - v44) * (v8 - v44)+ (v9 - v45) * (v9 - v45));
        if ((~*(void *)&v29 & 0x7FF0000000000000) == 0) {
          break;
        }
        double v11 = v28;
        double v21 = v36;
        if (v36 >= a3)
        {
          BOOL v24 = v29 < v36;
          if (v29 < v36) {
            double v21 = v29;
          }
          double v25 = v34;
          double v26 = v35;
          if (v24) {
            double v25 = v35;
          }
          double v34 = v25;
          double v5 = v32;
          a4 = v31;
        }
        else
        {
          double v5 = v32;
          a4 = v31;
          double v26 = v35;
          if (v29 >= a3)
          {
            double v21 = INFINITY;
          }
          else if (v35 - v34 > 1.0)
          {
            return;
          }
        }
        double v23 = v26 + 0.1;
        --v22;
      }
      while (v22);
    }
    else
    {
      double v17 = v14 * a5 - a2[1].f64[0];
      double v18 = v12 * v5 - a2[1].f64[1];
      double v19 = v13 * v5 - a2[2].f64[0];
      double v20 = v11 * v5 - a2[2].f64[1];
      double v16 = *a1;
      fmax(-log(a3/ (sqrt(v9 * v9 + v8 * v8 + v10 * v10 + v11 * v11 + v13 * v13 + v12 * v12 + v14 * v14 + v15 * v15 + v16 * v16)+ sqrt((v16 * v5 - a2->f64[0]) * (v16 * v5 - a2->f64[0])+ (v15 * v5 - a2->f64[1]) * (v15 * v5 - a2->f64[1])+ v17 * v17+ v18 * v18+ v19 * v19+ v20 * v20+ (v10 * v5 - a2[3].f64[0]) * (v10 * v5 - a2[3].f64[0])+ (v8 * v5 - a2[3].f64[1]) * (v8 * v5 - a2[3].f64[1])+ (v9 * v5 - a2[4].f64[0]) * (v9 * v5 - a2[4].f64[0]))))/ v5, 0.0);
    }
  }
}

double Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  double v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)v37 - v15;
  MEMORY[0x270FA5388](v17);
  double v19 = (char *)v37 - v18;
  long long v20 = *(_OWORD *)(v5 + 8);
  if (*(double *)&v20 == 0.0) {
    return INFINITY;
  }
  double v22 = *(double *)v5;
  BOOL v23 = *(double *)v5 <= 0.0;
  long long v38 = *(_OWORD *)(v5 + 8);
  if (v23)
  {
    v37[0] = *(void *)(a4 + 24);
    v37[1] = a4 + 24;
    double v29 = (void (**)(char *, uint64_t))(v11 + 8);
    double v21 = -1.0;
    double v30 = 0.0;
    double v31 = INFINITY;
    uint64_t v32 = 1024;
    while (1)
    {
      double v39 = v22;
      long long v40 = v20;
      uint64_t v33 = a2;
      Spring.value<A>(target:initialVelocity:time:)(a1, v30, a2, a3, a4);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      double v34 = *v29;
      (*v29)(v19, a3);
      double v35 = sqrt(((double (*)(uint64_t, uint64_t))v37[0])(a3, a4));
      if ((~*(void *)&v35 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v31 >= a5)
      {
        v34(v13, a3);
        if (v35 < v31)
        {
          double v31 = v35;
          double v21 = v30;
        }
      }
      else
      {
        v34(v13, a3);
        if (v35 >= a5)
        {
          double v31 = INFINITY;
        }
        else if (v30 - v21 > 1.0)
        {
          return v21;
        }
      }
      double v30 = v30 + 0.1;
      --v32;
      long long v20 = v38;
      a2 = v33;
      if (!v32) {
        return 0.0;
      }
    }
    v34(v13, a3);
    return 0.0;
  }
  else
  {
    VectorArithmetic.scaled(by:)(a3, a4, (uint64_t)v16, *(double *)&v20);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    BOOL v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v16, a3);
    double v25 = *(double (**)(uint64_t, uint64_t))(a4 + 24);
    double v26 = sqrt(v25(a3, a4));
    double v27 = v25(a3, a4);
    long double v28 = log(a5 / (v26 + sqrt(v27)));
    double v21 = fmax(-v28 / *(double *)&v38, 0.0);
    v24(v19, a3);
  }
  return v21;
}

void specialized Spring.value<A>(target:initialVelocity:time:)(double a1, double a2, double a3, double a4, double a5)
{
  if (a4 >= 0.0)
  {
    if (a4 > 0.0) {
      __sincos_stret(a3 * a4);
    }
    exp(-(a5 * a3));
  }
  else
  {
    exp((-a4 - a5) * a3);
    exp((a4 - a5) * a3);
  }
}

void specialized Spring.value<A>(target:initialVelocity:time:)(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  if (a5 >= 0.0)
  {
    if (a5 <= 0.0)
    {
      double v38 = *(double *)(a1 + 64);
      double v39 = v38 + (v38 * a6 - a2[4].f64[0]) * a4;
      double v40 = exp(-(a6 * a4));
      float64x2_t v41 = *(float64x2_t *)(a1 + 16);
      float64x2_t v42 = *(float64x2_t *)(a1 + 32);
      float64x2_t v43 = *(float64x2_t *)(a1 + 48);
      float64x2_t v44 = vmulq_n_f64(vaddq_f64(v41, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v41, a6), a2[1]), a4)), v40);
      float64x2_t v45 = vmulq_n_f64(vaddq_f64(v42, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v42, a6), a2[2]), a4)), v40);
      float64x2_t v46 = vmulq_n_f64(vaddq_f64(v43, vmulq_n_f64(vsubq_f64(vmulq_n_f64(v43, a6), a2[3]), a4)), v40);
      double v47 = v40 * v39;
      float64x2_t v22 = vsubq_f64(*(float64x2_t *)a1, vmulq_n_f64(vaddq_f64(*(float64x2_t *)a1, vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), a4)), v40));
      float64x2_t v23 = vsubq_f64(v41, v44);
      float64x2_t v24 = vsubq_f64(v42, v45);
      float64x2_t v25 = vsubq_f64(v43, v46);
      double v26 = v38 - v47;
    }
    else
    {
      double v27 = *(double *)(a1 + 64);
      double v28 = v27 * a6 - a2[4].f64[0];
      __double2 v29 = __sincos_stret(a4 * a5);
      double v30 = exp(-(a6 * a4));
      float64x2_t v31 = *(float64x2_t *)(a1 + 16);
      float64x2_t v32 = *(float64x2_t *)(a1 + 32);
      float64x2_t v33 = *(float64x2_t *)(a1 + 48);
      float64x2_t v34 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v31, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v31, a6), a2[1]), v29.__sinval / a5)), v30);
      float64x2_t v35 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v32, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v32, a6), a2[2]), v29.__sinval / a5)), v30);
      float64x2_t v36 = vmulq_n_f64(vaddq_f64(vmulq_n_f64(v33, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(v33, a6), a2[3]), v29.__sinval / a5)), v30);
      double v37 = v30 * (v29.__cosval * v27 + v29.__sinval / a5 * v28);
      float64x2_t v22 = vsubq_f64(*(float64x2_t *)a1, vmulq_n_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v29.__cosval), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v29.__sinval / a5)), v30));
      float64x2_t v23 = vsubq_f64(v31, v34);
      float64x2_t v24 = vsubq_f64(v32, v35);
      float64x2_t v25 = vsubq_f64(v33, v36);
      double v26 = v27 - v37;
    }
  }
  else
  {
    double v10 = -a5 - a6;
    double v11 = exp(v10 * a4);
    long double v12 = exp((a5 - a6) * a4);
    double v13 = ((a6 - a5) * v11 + v10 * v12) / (a5 + a5) + 1.0;
    double v14 = v13 * *(double *)(a1 + 64);
    double v15 = (v11 - v12) / (a5 + a5);
    float64x2_t v16 = vmulq_n_f64(a2[1], v15);
    float64x2_t v17 = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v13);
    float64x2_t v18 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v13);
    float64x2_t v19 = vmulq_n_f64(a2[2], v15);
    float64x2_t v20 = vmulq_n_f64(a2[3], v15);
    double v21 = v15 * a2[4].f64[0];
    float64x2_t v22 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, v13), vmulq_n_f64(*a2, v15));
    float64x2_t v23 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), v13), v16);
    float64x2_t v24 = vsubq_f64(v17, v19);
    float64x2_t v25 = vsubq_f64(v18, v20);
    double v26 = v14 - v21;
  }
  char v48 = *(unsigned char *)(a1 + 72);
  *(float64x2_t *)a3 = v22;
  *(float64x2_t *)(a3 + 16) = v23;
  *(float64x2_t *)(a3 + 32) = v24;
  *(float64x2_t *)(a3 + 48) = v25;
  *(double *)(a3 + 64) = v26;
  *(unsigned char *)(a3 + 72) = v48;
}

uint64_t Spring.value<A>(target:initialVelocity:time:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  double v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v14 = (char *)v38 - v13;
  MEMORY[0x270FA5388](v15);
  float64x2_t v17 = (char *)v38 - v16;
  MEMORY[0x270FA5388](v18);
  float64x2_t v20 = (char *)v38 - v19;
  MEMORY[0x270FA5388](v21);
  float64x2_t v25 = (char *)v38 - v24;
  double v27 = *v5;
  double v26 = v5[1];
  BOOL v28 = *v5 <= 0.0;
  if (*v5 >= 0.0)
  {
    void v38[3] = v22;
    if (v28)
    {
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v26);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      float64x2_t v34 = *(void (**)(char *, uint64_t))(v9 + 8);
      v34(v20, a4);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v17, a2);
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      v34(v17, a4);
      double v37 = exp(-(v26 * a2));
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v17, v37);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      v34(v17, a4);
    }
    else
    {
      void v38[2] = v23;
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v26);
      v38[1] = *(void *)(a5 + 8);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      float64x2_t v34 = *(void (**)(char *, uint64_t))(v9 + 8);
      v34(v20, a4);
      __double2 v35 = __sincos_stret(v27 * a2);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v14, v35.__cosval);
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v11, v35.__sinval / v27);
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      v34(v11, a4);
      v34(v14, a4);
      double v36 = exp(-(v26 * a2));
      VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, v36);
      v34(v17, a4);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    }
    v34(v20, a4);
    return ((uint64_t (*)(char *, uint64_t))v34)(v25, a4);
  }
  else
  {
    double v29 = -v27 - v26;
    double v30 = exp(v29 * a2);
    double v31 = exp((v27 - v26) * a2);
    VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v25, ((v26 - v27) * v30 + v29 * v31) / (v27 + v27) + 1.0);
    VectorArithmetic.scaled(by:)(a4, a5, (uint64_t)v20, (v30 - v31) / (v27 + v27));
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    float64x2_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32(v20, a4);
    return ((uint64_t (*)(char *, uint64_t))v32)(v25, a4);
  }
}

double Spring.angularFrequency.getter()
{
  return *(double *)v0;
}

void Spring.angularFrequency.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Spring.angularFrequency.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Spring.decayConstant.getter()
{
  return *(double *)(v0 + 8);
}

void Spring.decayConstant.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Spring.decayConstant.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Spring._mass.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*Spring._mass.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Spring.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

BOOL static Spring.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

Swift::Int Spring.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Spring()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Spring()
{
  return Hasher._finalize()();
}

SwiftUI::Spring __swiftcall Spring.init(duration:bounce:)(Swift::Double duration, Swift::Double bounce)
{
  double v3 = -6.28318531;
  if (bounce > -1.0)
  {
    double v4 = 1.0;
    if (bounce >= 0.0)
    {
      if (bounce == 0.0 || (double v4 = 0.0, bounce > 1.0))
      {
LABEL_9:
        double v3 = 6.28318531;
        goto LABEL_10;
      }
      double v4 = 1.0 - bounce;
    }
    else
    {
      double v4 = 1.0 / (bounce + 1.0);
    }
    if (v4 > 1.0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  double v4 = INFINITY;
LABEL_10:
  double v5 = v3 * sqrt(vabdd_f64(1.0, v4 * v4)) / duration;
  double v6 = v4 * 6.28318531;
  double v7 = v4 * 6.28318531 / duration;
  *(double *)uint64_t v2 = v5;
  *(double *)(v2 + 8) = v7;
  *(void *)(v2 + 16) = 0x3FF0000000000000;
  result._mass = v6;
  result.decayConstant = v5;
  result.angularFrequency = v7;
  return result;
}

SwiftUI::Spring __swiftcall Spring.init(response:dampingRatio:)(Swift::Double response, Swift::Double dampingRatio)
{
  *(void *)&v3.f64[0] = qword_2461CB510[dampingRatio > 1.0];
  v3.f64[1] = dampingRatio;
  double v4 = (const double *)&qword_2461BBE00;
  float64x2_t v5 = vld1q_dup_f64(v4);
  v5.f64[0] = sqrt(vabdd_f64(1.0, dampingRatio * dampingRatio));
  float64x2_t v6 = vmulq_f64(v3, v5);
  float64x2_t v7 = vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&response, 0));
  *(float64x2_t *)uint64_t v2 = v7;
  *(void *)(v2 + 16) = 0x3FF0000000000000;
  result._mass = v5.f64[0];
  result.decayConstant = v6.f64[0];
  result.angularFrequency = v7.f64[0];
  return result;
}

double Spring.bounce.getter()
{
  double v1 = v0[1];
  double v2 = v1 * 0.5;
  double v3 = v1 * v1;
  double v4 = *v0 * *v0;
  if (*v0 >= 0.0) {
    return v2 * (-6.28318531 / sqrt(v4 + v3)) / 3.14159265 + 1.0;
  }
  else {
    return 1.0 / (v2 * (6.28318531 / sqrt(v3 - v4)) / 3.14159265) + -1.0;
  }
}

double Spring.dampingRatio.getter()
{
  double v1 = v0[1];
  double v2 = v1 * 0.5;
  double v3 = v1 * v1;
  double v4 = -*v0;
  if (*v0 >= 0.0) {
    double v4 = *v0;
  }
  return v2 * (6.28318531 / sqrt(v3 + *v0 * v4)) / 3.14159265;
}

double Spring.duration.getter()
{
  double v1 = -*v0;
  if (*v0 >= 0.0) {
    double v1 = *v0;
  }
  return 6.28318531 / sqrt(v0[1] * v0[1] + *v0 * v1);
}

double Spring.mass.getter()
{
  return *(double *)(v0 + 16);
}

double Spring.stiffness.getter()
{
  return v0[2] * (*v0 * *v0 + v0[1] * v0[1]);
}

double Spring.damping.getter()
{
  return (*(double *)(v0 + 8) + *(double *)(v0 + 8)) * *(double *)(v0 + 16);
}

SwiftUI::Spring __swiftcall Spring.init(settlingDuration:dampingRatio:epsilon:)(Swift::Double settlingDuration, Swift::Double dampingRatio, Swift::Double epsilon)
{
  uint64_t v5 = v3;
  double v6 = fmax(dampingRatio, 2.22044605e-16);
  if (v6 <= 1.0) {
    double v7 = v6;
  }
  else {
    double v7 = 1.0;
  }
  double v8 = fmax(settlingDuration, 0.01);
  if (v8 <= 10.0) {
    double v9 = v8;
  }
  else {
    double v9 = 10.0;
  }
  if (v7 >= 1.0)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #5 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(void *)(v13 + 24) = v17;
    *(Swift::Double *)(v13 + 32) = epsilon;
    *(double *)(v13 + 40) = v9;
    uint64_t v14 = swift_allocObject();
    *(double *)(v14 + 16) = v9 * v9;
    *(void *)(v14 + 24) = 0;
    *(double *)(v14 + 32) = v9;
    uint64_t v15 = (double (*)(double))partial apply for closure #6 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    uint64_t v16 = (double (*)(double))partial apply for closure #7 in Spring.init(settlingDuration:dampingRatio:epsilon:);
  }
  else
  {
    double v10 = sqrt(1.0 - v7 * v7);
    uint64_t v11 = swift_allocObject();
    *(double *)(v11 + 16) = v10;
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = partial apply for closure #1 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(void *)(v12 + 40) = v11;
    uint64_t v13 = swift_allocObject();
    *(Swift::Double *)(v13 + 16) = epsilon;
    *(double *)(v13 + 24) = v9 * v7;
    *(void *)(v13 + 32) = partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(void *)(v13 + 40) = v12;
    uint64_t v14 = swift_allocObject();
    *(double *)(v14 + 16) = v9 * v7;
    *(void *)(v14 + 24) = partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    *(void *)(v14 + 32) = v12;
    *(void *)(v14 + 40) = 0;
    *(double *)(v14 + 48) = v9 * v7 * 0.0;
    *(double *)(v14 + 56) = v9 * (v7 * v7);
    *(double *)(v14 + 64) = v10;
    swift_retain();
    uint64_t v15 = partial apply for closure #3 in Spring.init(settlingDuration:dampingRatio:epsilon:);
    uint64_t v16 = (double (*)(double))partial apply for closure #4 in Spring.init(settlingDuration:dampingRatio:epsilon:);
  }
  uint64_t v18 = v16;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  double v25 = 0.0;
  if ((specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(12, &v25, v15, 5.0, v9, epsilon, v13, v16, v14, &v26, &v27) & 1) == 0)specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(20, &v25, v15, 1.0, v9, epsilon, v13, {
      v18,
  }
      v14,
      &v26,
      &v27);
  swift_beginAccess();
  double v19 = v25 * v25;
  double v20 = sqrt(v25 * v25);
  double v21 = v7 * (v20 + v20) * 0.5;
  swift_release();
  swift_release();
  double v22 = sqrt(vabdd_f64(v19, v21 * v21));
  if (v20 >= v21) {
    double v23 = v21;
  }
  else {
    double v23 = v20;
  }
  double v24 = 0.0;
  if (v20 < v21) {
    double v22 = 0.0;
  }
  *(double *)uint64_t v5 = v22;
  *(double *)(v5 + 8) = v23;
  *(void *)(v5 + 16) = 0x3FF0000000000000;
  result._mass = v24;
  result.decayConstant = v23;
  result.angularFrequency = v22;
  return result;
}

uint64_t sub_245C15C6C()
{
  return swift_deallocObject();
}

double partial apply for closure #5 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  return a1 - *(double *)(v1 + 16);
}

uint64_t sub_245C15C88()
{
  swift_release();

  return swift_deallocObject();
}

long double partial apply for closure #6 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double v3 = *(double *)(v1 + 32);
  double v4 = *(double *)(v1 + 40);
  double v5 = (*(double (**)(void))(v1 + 16))();
  if (v5 < 0.0) {
    double v3 = -v3;
  }
  return exp(-(v4 * a1)) * (v4 * v5 + 1.0) - v3;
}

uint64_t sub_245C15D2C()
{
  return swift_deallocObject();
}

long double partial apply for closure #7 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double v2 = v1[2] * (v1[3] - a1);
  return v2 / exp(v1[4] * a1);
}

uint64_t specialized closure #8 in Spring.init(settlingDuration:dampingRatio:epsilon:)(uint64_t a1, double *a2, double (*a3)(double), double a4, double a5, double a6, uint64_t a7, double (*a8)(double), uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  double v18 = 1.0 / a5 * a4;
  uint64_t result = swift_beginAccess();
  *a2 = v18;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (!a1) {
    return 1;
  }
  swift_beginAccess();
  uint64_t v20 = swift_beginAccess();
  double v21 = ((double (*)(uint64_t, double))a3)(v20, v18);
  double v22 = v21 / a8(*a2);
  double v23 = v18 - v22;
  *a2 = v18 - v22;
  if ((~COERCE__INT64(v18 - v22) & 0x7FF0000000000000) == 0
    && (COERCE_UNSIGNED_INT64(v18 - v22) & 0xFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_25;
  }
  if (a1 == 1) {
    return 1;
  }
  double v25 = a3(v18 - v22);
  double v26 = v23 - v25 / a8(*a2);
  *a2 = v26;
  if ((~*(void *)&v26 & 0x7FF0000000000000) == 0 && (*(void *)&v26 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_25;
  }
  uint64_t v28 = a1 - 2;
  if (!v28) {
    return 1;
  }
  double v29 = v23 - v26;
  while (1)
  {
    double v30 = a3(v26);
    double v31 = v26 - v30 / a8(*a2);
    *a2 = v31;
    if ((~*(void *)&v31 & 0x7FF0000000000000) == 0 && (*(void *)&v31 & 0xFFFFFFFFFFFFFLL) != 0) {
      break;
    }
    if (vabdd_f64(v31, v26) <= a6)
    {
      if (a6 * 100000.0 >= v29) {
        return 1;
      }
      uint64_t result = swift_beginAccess();
      uint64_t v33 = *a11 + 1;
      if (!__OFADD__(*a11, 1))
      {
        a10 = a11;
        goto LABEL_26;
      }
      goto LABEL_32;
    }
    double v29 = v26 - v31;
    uint64_t result = 1;
    double v26 = v31;
    if (!--v28) {
      return result;
    }
  }
LABEL_25:
  uint64_t result = swift_beginAccess();
  uint64_t v33 = *a10 + 1;
  if (!__OFADD__(*a10, 1))
  {
LABEL_26:
    uint64_t result = 0;
    *a10 = v33;
    return result;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_245C15FE0()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  return *(double *)(v1 + 16) * a1;
}

uint64_t sub_245C15FFC()
{
  swift_release();

  return swift_deallocObject();
}

double partial apply for closure #2 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double v2 = *(double *)(v1 + 16) * a1 - *(double *)(v1 + 24);
  return v2 / (*(double (**)(void))(v1 + 32))();
}

double partial apply for closure #3 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double v3 = *(double *)(v1 + 16);
  double v4 = *(double (**)(double))(v1 + 32);
  double v5 = exp(-(*(double *)(v1 + 24) * a1));
  return v3 - fabs(v5 * v4(a1));
}

uint64_t sub_245C160D0()
{
  swift_release();

  return swift_deallocObject();
}

long double partial apply for closure #4 in Spring.init(settlingDuration:dampingRatio:epsilon:)(double a1)
{
  double v3 = *(double *)(v1 + 16);
  double v4 = *(double (**)(double))(v1 + 24);
  double v5 = *(double *)(v1 + 40);
  double v6 = *(double *)(v1 + 48);
  double v7 = *(double *)(v1 + 56);
  double v8 = *(double *)(v1 + 64);
  double v9 = a1 * a1;
  double v10 = exp(-(v3 * a1));
  if (v10 * v4(a1) <= 0.0) {
    double v11 = v5 + v6 * a1 - v9 * v7;
  }
  else {
    double v11 = -(v5 + v6 * a1 - v9 * v7);
  }
  return v11 / (exp(v3 * a1) * (v9 * v8));
}

void Spring.settlingDuration.getter()
{
  specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, *v0, v0[1]);
}

uint64_t Spring.velocity<A>(target:initialVelocity:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v32 - v14;
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)v32 - v17;
  double v20 = *v5;
  double v19 = v5[1];
  BOOL v21 = *v5 <= 0.0;
  if (*v5 >= 0.0)
  {
    v32[1] = a4;
    if (v21)
    {
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v15, a2);
      double v31 = exp(-(v19 * a5));
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19 * v31);
      double v30 = (v19 * a5 + -1.0) * v31;
    }
    else
    {
      double v27 = exp(-(v19 * a5));
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v19);
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v15, a2);
      __double2 v29 = __sincos_stret(v20 * a5);
      VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, v27 * (v20 * v29.__sinval + v19 * v29.__cosval));
      double v30 = v27 * (v19 * v29.__sinval - v20 * v29.__cosval) / v20;
    }
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v12, v30);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v28(v12, a2);
    v28(v15, a2);
    return ((uint64_t (*)(char *, uint64_t))v28)(v18, a2);
  }
  else
  {
    double v22 = -v20 - v19;
    long double v23 = v22 * exp(v22 * a5);
    long double v24 = (v20 - v19) * exp((v20 - v19) * a5);
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v18, ((v19 - v20) * v23 + v22 * v24) / (v20 + v20) + 1.0);
    VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v15, (v23 - v24) / (v20 + v20));
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    double v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v15, a2);
    return ((uint64_t (*)(char *, uint64_t))v25)(v18, a2);
  }
}

uint64_t Spring.update<A>(value:velocity:target:deltaTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a3;
  uint64_t v28 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v25 - v14;
  MEMORY[0x270FA5388](v16);
  double v18 = (char *)&v25 - v17;
  __double2 v29 = (char *)&v25 - v17;
  uint64_t v20 = v6[1];
  uint64_t v21 = v6[2];
  uint64_t v30 = *v6;
  uint64_t v19 = v30;
  uint64_t v31 = v20;
  uint64_t v32 = v21;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  Spring.velocity<A>(target:initialVelocity:time:)((uint64_t)v15, a4, a5, (uint64_t)v18, a6);
  uint64_t v22 = v28;
  long double v23 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23(v15, a4);
  uint64_t v30 = v19;
  uint64_t v31 = v20;
  uint64_t v32 = v21;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  Spring.value<A>(target:initialVelocity:time:)((uint64_t)v12, a6, a2, a4, v26);
  v23((char *)a2, a4);
  v23(v12, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v23(v15, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(a2, v29, a4);
}

uint64_t Spring.force<A>(target:position:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v23[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  double v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v23 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v23 - v14;
  double v16 = *v4;
  double v17 = v4[1];
  double v18 = v4[2];
  VectorArithmetic.scaled(by:)(v19, v20, (uint64_t)v23 - v14, v17 * -2.0 * v18);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(a2, a3, (uint64_t)v12, v18 * (v16 * v16 + v17 * v17));
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v9, a2);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v21(v12, a2);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, a2);
}

double Spring.settlingDuration<A>(fromValue:toValue:initialVelocity:epsilon:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v27 = a3;
  v25[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)v25 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v25 - v18;
  uint64_t v20 = *((void *)v6 + 2);
  long long v28 = *v6;
  uint64_t v29 = v20;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v25[0] = a4;
  v21(a4, a5);
  v21(a4, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v13, AssociatedTypeWitness);
  v22(v16, AssociatedTypeWitness);
  v21(v25[0], a5);
  double v23 = Spring.settlingDuration<A>(target:initialVelocity:epsilon:)((uint64_t)v19, (uint64_t)v16, AssociatedTypeWitness, AssociatedConformanceWitness, a6);
  v22(v16, AssociatedTypeWitness);
  v22(v19, AssociatedTypeWitness);
  return v23;
}

uint64_t Spring.value<A>(fromValue:toValue:initialVelocity:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v45 = a6;
  uint64_t v46 = a3;
  uint64_t v40 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v39 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v36 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v37 = (uint64_t)&v36 - v19;
  MEMORY[0x270FA5388](v20);
  float64x2_t v44 = (char *)&v36 - v21;
  MEMORY[0x270FA5388](v22);
  float64x2_t v41 = (char *)&v36 - v23;
  MEMORY[0x270FA5388](v24);
  float64x2_t v43 = (char *)&v36 - v25;
  long long v38 = *v7;
  uint64_t v26 = *((void *)v7 + 2);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);
  uint64_t v47 = a4;
  v27(a6, a2, a4);
  long long v28 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v28(a4, a5);
  long long v48 = v38;
  uint64_t v49 = v26;
  v28(a4, a5);
  uint64_t v29 = v39;
  v28(a4, a5);
  *(void *)&long long v38 = swift_getAssociatedConformanceWitness();
  uint64_t v40 = *(void *)(v38 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  v30(v29, AssociatedTypeWitness);
  v30(v17, AssociatedTypeWitness);
  v28(v47, a5);
  uint64_t v31 = v44;
  uint64_t v32 = v37;
  Spring.value<A>(target:initialVelocity:time:)(v37, a7, (uint64_t)v17, AssociatedTypeWitness, v38);
  v30(v17, AssociatedTypeWitness);
  v30((char *)v32, AssociatedTypeWitness);
  uint64_t v33 = v43;
  float64x2_t v34 = v41;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v30(v31, AssociatedTypeWitness);
  v30(v34, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v33, v47, a5);
}

uint64_t Spring.velocity<A>(fromValue:toValue:initialVelocity:time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v34 = a6;
  uint64_t v35 = a3;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v31 = (uint64_t)&v30 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v33 = (uint64_t)&v30 - v23;
  long long v30 = *v7;
  uint64_t v24 = *((void *)v7 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a6, a2, a4);
  long long v36 = v30;
  uint64_t v37 = v24;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v25(a4, a5);
  v25(a4, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v16, AssociatedTypeWitness);
  v26(v19, AssociatedTypeWitness);
  v25(a4, a5);
  uint64_t v27 = v33;
  uint64_t v28 = v31;
  Spring.velocity<A>(target:initialVelocity:time:)(v31, AssociatedTypeWitness, AssociatedConformanceWitness, v33, a7);
  v26(v19, AssociatedTypeWitness);
  v26((char *)v28, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(v27, a4, a5);
}

uint64_t Spring.force<A>(fromValue:toValue:position:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v33 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v29 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v30 = (uint64_t)&v29 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v32 = (uint64_t)&v29 - v22;
  long long v29 = *v7;
  uint64_t v23 = *((void *)v7 + 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a7, a2, a5);
  long long v36 = v29;
  uint64_t v37 = v23;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(a6 + 24);
  v24(a5, a6);
  v24(a5, a6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v15, AssociatedTypeWitness);
  v25(v18, AssociatedTypeWitness);
  v24(a5, a6);
  v24(a5, a6);
  uint64_t v26 = v32;
  uint64_t v27 = v30;
  Spring.force<A>(target:position:velocity:)(v30, AssociatedTypeWitness, AssociatedConformanceWitness, v32);
  v25(v15, AssociatedTypeWitness);
  v25(v18, AssociatedTypeWitness);
  v25((char *)v27, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 32))(v26, a5, a6);
}

double *static Animation.spring(_:blendDuration:)(uint64_t a1, double a2)
{
  double v3 = *(double *)a1;
  float64x2_t v12 = *(float64x2_t *)(a1 + 8);
  double v4 = Spring.bounce.getter();
  if (v4 <= -1.0)
  {
    double v6 = INFINITY;
    float64x2_t v5 = v12;
  }
  else
  {
    float64x2_t v5 = v12;
    if (v4 >= 0.0)
    {
      double v7 = 1.0 - v4;
      if (v4 > 1.0) {
        double v7 = 0.0;
      }
      if (v4 == 0.0) {
        double v6 = 1.0;
      }
      else {
        double v6 = v7;
      }
    }
    else
    {
      double v6 = 1.0 / (v4 + 1.0);
    }
  }
  *(void *)&double v8 = *(_OWORD *)&vmulq_f64(v5, v5);
  double v9 = -v3;
  if (v3 >= 0.0) {
    double v9 = v3;
  }
  double v10 = 6.28318531 / sqrt(v8 + v3 * v9);
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>();
  uint64_t result = (double *)swift_allocObject();
  result[2] = v10;
  result[3] = v6;
  result[4] = a2;
  return result;
}

uint64_t static Animation.interpolatingSpring(_:initialVelocity:)(double *a1, double a2)
{
  double v3 = -*a1;
  if (*a1 >= 0.0) {
    double v3 = *a1;
  }
  double v4 = 6.28318531 / sqrt(a1[1] * a1[1] + *a1 * v3);
  double v5 = Spring.bounce.getter();

  return specialized static Animation.interpolatingSpring(duration:bounce:initialVelocity:)(v4, v5, a2);
}

void type metadata accessor for InternalAnimationBox<FluidSpringAnimation>()
{
  if (!lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>)
  {
    lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation();
    unint64_t v0 = type metadata accessor for InternalAnimationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Spring and conformance Spring()
{
  unint64_t result = lazy protocol witness table cache variable for type Spring and conformance Spring;
  if (!lazy protocol witness table cache variable for type Spring and conformance Spring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spring and conformance Spring);
  }
  return result;
}

ValueMetadata *type metadata accessor for Spring()
{
  return &type metadata for Spring;
}

uint64_t ProtobufFormat.Field.tag.getter()
{
  return *v0 >> 3;
}

uint64_t ProtobufFormat.Field.tag<A>(as:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))(*v3 >> 3);
}

uint64_t CodableByProtobuf.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  double v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v19 = a4;
    uint64_t v20 = v10;
    uint64_t v18 = v8;
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    float64x2_t v12 = v22;
    unint64_t v13 = v23;
    outlined copy of Data._Representation((uint64_t)v22, v23);
    ProtobufDecoder.init(_:)((uint64_t)v12, v13, &v22);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v14 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v24 = v14;
    uint64_t v15 = v20;
    (*(void (**)(objc_class **, uint64_t))(*(void *)(v21 + 24) + 8))(&v22, a2);
    outlined consume of Data._Representation((uint64_t)v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v19, v15, a2);
    uint64_t v16 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CodableByProtobuf.encode(to:)(void *a1)
{
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in CodableByProtobuf.encode(to:));
  if (!v1)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t ProtobufEnum<>.protobufValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v32 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = swift_checkMetadataState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v33 = (char *)&v29 - v10;
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v29 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v29 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v17 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    if ((v17 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
LABEL_14:
    uint64_t v27 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    return v27;
  }
  uint64_t v31 = v7;
  long long v29 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v29(v33, v16, v6);
  uint64_t v34 = -1;
  char v18 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v19 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v18 & 1) == 0)
  {
    if (v19 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v7 = v31;
      uint64_t v21 = *(void (**)(char *, uint64_t))(v31 + 8);
      goto LABEL_13;
    }
LABEL_10:
    lazy protocol witness table accessor for type UInt and conformance UInt();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v7 = v31;
    uint64_t v21 = *(void (**)(char *, uint64_t))(v31 + 8);
    v21(v13, v6);
    if (v26) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (v19 > 64) {
    goto LABEL_10;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v20 = v33;
  LODWORD(v32) = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v31 + 8);
  v21(v13, v6);
  unint64_t v22 = v34;
  unint64_t v23 = v30;
  v29(v30, v20, v6);
  if ((v32 & 1) == 0)
  {
    v21(v23, v6);
    uint64_t v7 = v31;
    goto LABEL_13;
  }
  unint64_t v24 = dispatch thunk of BinaryInteger._lowWord.getter();
  v21(v23, v6);
  BOOL v25 = v22 >= v24;
  uint64_t v7 = v31;
  if (v25)
  {
LABEL_13:
    v21(v33, v6);
    goto LABEL_14;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized ProtobufEnum<>.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  if (result >= 3u || result >= 0x100) {
    char v3 = 3;
  }
  else {
    char v3 = result;
  }
  *a2 = v3;
  return result;
}

uint64_t ProtobufEnum<>.init(protobufValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v31 = (char *)&v27 - v8;
  uint64_t v30 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v33 = a1;
  lazy protocol witness table accessor for type UInt and conformance UInt();
  dispatch thunk of Numeric.init<A>(exactly:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v21 = *(void *)(a2 - 8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v13, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v20, AssociatedTypeWitness);
    unint64_t v22 = v31;
    dispatch thunk of RawRepresentable.init(rawValue:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
    uint64_t v21 = *(void *)(a2 - 8);
    uint64_t v23 = v21;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v22, 1, a2))
    {
      uint64_t v25 = v32;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v32, v22, a2);
      uint64_t v24 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, v24, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
  }
  uint64_t v23 = v21;
  uint64_t v24 = 1;
  uint64_t v25 = v32;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, v24, 1, a2);
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Image.Orientation()
{
  return qword_2461CB740[*v0];
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.Orientation@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (a1 <= 0xFF) {
    uint64_t result = specialized Image.Orientation.init(rawValue:)(a1);
  }
  else {
    uint64_t result = 8;
  }
  *a2 = result;
  return result;
}

uint64_t ProtobufFormat.WireType.rawValue.getter()
{
  return *(void *)v0;
}

void static ProtobufFormat.WireType.varint.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static ProtobufFormat.WireType.fixed64.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ProtobufFormat.WireType.lengthDelimited.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ProtobufFormat.WireType.fixed32.getter(void *a1@<X8>)
{
  *a1 = 5;
}

uint64_t ProtobufFormat.Field.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ProtobufFormat.Field.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ProtobufFormat.Field.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ProtobufFormat::Field __swiftcall ProtobufFormat.Field.init(rawValue:)(SwiftUI::ProtobufFormat::Field rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

SwiftUI::ProtobufFormat::Field __swiftcall ProtobufFormat.Field.init(_:wireType:)(SwiftUI::ProtobufFormat::Field _, SwiftUI::ProtobufFormat::WireType wireType)
{
  *double v2 = *(void *)wireType.rawValue | (8 * _.rawValue);
  return _;
}

void ProtobufFormat.Field.wireType.getter(uint64_t *a1@<X8>)
{
  *a1 = *v1 & 7;
}

BOOL ProtobufFormat.Field._isEmpty.getter()
{
  return *v0 == 0;
}

BOOL static ProtobufFormat.Field.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v8 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 + 32) + 8))(a1, a4);
}

uint64_t partial apply for closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  return closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t ProtobufCodable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ProtobufCodable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ProtobufCodable.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufCodable.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t ProtobufCodable.encode(to:)(void *a1)
{
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for closure #1 in ProtobufCodable.encode(to:));
  if (!v1)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t closure #1 in ProtobufCodable.encode(to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v9 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a4, a6);
}

uint64_t ProtobufCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ProtobufCodable();
  uint64_t v25 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v12 = v31;
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v12)
  {
    uint64_t v22 = v9;
    uint64_t v23 = a3;
    uint64_t v31 = v8;
    uint64_t v21 = v11;
    __swift_project_boxed_opaque_existential_1(v30, v30[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    unint64_t v13 = v27;
    unint64_t v14 = v28;
    outlined copy of Data._Representation((uint64_t)v27, v28);
    ProtobufDecoder.init(_:)((uint64_t)v13, v14, &v27);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v15 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v29 = v15;
    uint64_t v16 = v31;
    uint64_t v17 = a2;
    (*(void (**)(objc_class **, uint64_t))(v23 + 8))(&v27, a2);
    outlined consume of Data._Representation((uint64_t)v13, v14);
    uint64_t v19 = v21;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v16, v17);
    uint64_t v20 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v26, v19, v22);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProtobufCodable<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProtobufCodable.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProtobufCodable<A>(void *a1)
{
  return ProtobufCodable.encode(to:)(a1);
}

uint64_t static ProtobufCodable<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ProtobufCodable<A>()
{
  return static ProtobufCodable<>.== infix(_:_:)();
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance RBSymbolScaleLevel()
{
  uint64_t result = *v0;
  if ((result & 0x80000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance GraphicsContext.BlendMode@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result >> 31) {
    int v2 = 0;
  }
  else {
    int v2 = result;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = result >> 31 != 0;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance RBTransitionMethod()
{
  return *v0;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance RBTransitionEvents@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (HIDWORD(result)) {
    int v2 = 0;
  }
  else {
    int v2 = result;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = HIDWORD(result) != 0;
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance DisplayGamut@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result < 0)
  {
LABEL_5:
    *a2 = 2;
    return result;
  }
  if (result)
  {
    if (result == 1)
    {
      *a2 = 1;
      return result;
    }
    goto LABEL_5;
  }
  *a2 = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
  }
  return result;
}

uint64_t partial apply for closure #1 in ProtobufCodable.encode(to:)(uint64_t a1)
{
  return closure #1 in ProtobufCodable.encode(to:)(a1, *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for ProtobufCodable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of ProtobufEncodableMessage.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ProtobufDecodableMessage.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ProtobufEnum.protobufValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProtobufEnum.init(protobufValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ProtobufTag.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ProtobufTag.init(rawValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for ProtobufFormat()
{
  return &type metadata for ProtobufFormat;
}

ValueMetadata *type metadata accessor for ProtobufFormat.WireType()
{
  return &type metadata for ProtobufFormat.WireType;
}

ValueMetadata *type metadata accessor for ProtobufFormat.Field()
{
  return &type metadata for ProtobufFormat.Field;
}

uint64_t type metadata completion function for ProtobufCodable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ProtobufCodable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ProtobufCodable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C19210);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t SecondaryLayerGeometryQuery.init(alignment:layoutDirection:primaryPosition:primarySize:primaryLayoutComputer:secondaryLayoutComputer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.$secondaryLayoutComputer.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 20) = v2;
  return result;
}

uint64_t (*_OverlayModifier.overlay.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayModifier.alignment.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OverlayModifier.alignment.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(v3 + *(int *)(a3 + 36));
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*_OverlayModifier.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayModifier.init(overlay:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for _OverlayModifier();
  BOOL v9 = (void *)(a5 + *(int *)(result + 36));
  *BOOL v9 = a2;
  v9[1] = a3;
  return result;
}

BOOL static _OverlayModifier<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for _OverlayModifier() + 36);
  uint64_t v6 = *(void *)(a1 + v4);
  uint64_t v5 = *(void *)(a1 + v4 + 8);
  unsigned int v7 = (uint64_t *)(a2 + v4);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  return v6 == v9 && v5 == v8;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> _OverlayModifier<A>(uint64_t a1, uint64_t a2)
{
  return static _OverlayModifier<>.== infix(_:_:)(a1, a2);
}

uint64_t (*_OverlayStyleModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayStyleModifier.ignoresSafeAreaEdges.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OverlayStyleModifier.ignoresSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_OverlayStyleModifier.ignoresSafeAreaEdges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayStyleModifier.init(style:ignoresSafeAreaEdges:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _OverlayStyleModifier();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t static _OverlayStyleModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 20);
  LODWORD(v23) = *a1;
  type metadata accessor for _BackgroundStyleModifier();
  type metadata accessor for _OverlayStyleModifier();
  type metadata accessor for _GraphValue();
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  long long v20 = *(_OWORD *)(a2 + 7);
  long long v21 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[9];
  _GraphValue.unsafeBitCast<A>(to:)(v32);
  uint64_t v23 = v12;
  int v24 = v13;
  uint64_t v25 = v14;
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  long long v28 = v21;
  long long v29 = v20;
  uint64_t v30 = v18;
  int v31 = v15;
  return static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(v32, (uint64_t)&v23, 0, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayStyleModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static _OverlayStyleModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t (*_OverlayShapeModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _OverlayShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_OverlayShapeModifier.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayShapeModifier.fillStyle.getter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 56));
  unsigned int v3 = *v2;
  if (v2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return v4 | v3;
}

uint64_t _OverlayShapeModifier.fillStyle.setter(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (unsigned char *)(v2 + *(int *)(a2 + 56));
  unsigned char *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_OverlayShapeModifier.fillStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayShapeModifier.init(style:shape:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6, a1, a4);
  uint64_t v10 = type metadata accessor for _OverlayShapeModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v10 + 52), a2, a5);
  uint64_t v12 = (unsigned char *)(a6 + *(int *)(v10 + 56));
  *uint64_t v12 = a3 & 1;
  v12[1] = HIBYTE(a3) & 1;
  return result;
}

uint64_t static _OverlayShapeModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  int v17 = *(_DWORD *)(a2 + 80);
  v37[1] = *a1;
  type metadata accessor for _BackgroundShapeModifier();
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  type metadata accessor for _OverlayShapeModifier();
  type metadata accessor for _GraphValue();
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  long long v23 = *(_OWORD *)(a2 + 56);
  long long v24 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 72);
  _GraphValue.unsafeBitCast<A>(to:)(v37);
  uint64_t v28 = v14;
  LODWORD(v29) = v15;
  uint64_t v30 = v16;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  long long v33 = v24;
  long long v34 = v23;
  uint64_t v35 = v20;
  int v36 = v17;
  long long v21 = (void *)swift_allocObject();
  v21[2] = a5;
  v21[3] = a6;
  v21[4] = a7;
  v21[5] = a8;
  static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(v37, (uint64_t)&v28, 0, a3, a4, (void (*)(long long *, uint64_t))partial apply for closure #1 in default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:), (uint64_t)v21, a5, a9, a6, a7, a8);
  return swift_release();
}

uint64_t (*default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  return partial apply for closure #1 in default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _OverlayShapeModifier<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static _OverlayShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

uint64_t View.border<A>(_:width:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  type metadata accessor for _StrokedShape<Rectangle._Inset>();
  v19[0] = v12;
  v19[1] = a3;
  v19[2] = lazy protocol witness table accessor for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>();
  v19[3] = a5;
  uint64_t v13 = type metadata accessor for _ShapeView();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v19 - v15;
  unint64_t v17 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)(a1, 1, (uint64_t)&type metadata for Rectangle, a3, v17, a5, (uint64_t)v16, a6);
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  View.overlay<A>(_:alignment:)((uint64_t)v16, static Alignment.center, *((uint64_t *)&static Alignment.center + 1), a2, v13, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t View.overlay<A>(_:ignoresSafeAreaEdges:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _OverlayStyleModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a4);
  v16[*(int *)(v12 + 36)] = a2;
  View.modifier<A>(_:)(v16, a3, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t View.overlay<A, B>(_:in:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v35 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a1;
  uint64_t v33 = a9;
  uint64_t v34 = a4;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  double v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v20;
  uint64_t v37 = v21;
  uint64_t v38 = v22;
  uint64_t v39 = a10;
  uint64_t v23 = type metadata accessor for _OverlayShapeModifier();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v29 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, v30, a5, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v31, a6);
  _OverlayShapeModifier.init(style:shape:fillStyle:)((uint64_t)v19, (uint64_t)v14, v32 & 0x101, a5, a6, (uint64_t)v27);
  View.modifier<A>(_:)(v27, v34, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
}

uint64_t SecondaryLayerGeometryQuery.alignment.getter()
{
  if (*v0 == *MEMORY[0x263F288F8]) {
    return 0;
  }
  else {
    return *(void *)AGGraphGetValue();
  }
}

unint64_t SecondaryLayerGeometryQuery.$alignment.getter()
{
  LODWORD(v1) = *v0;
  if (*v0 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)(*v0 == *MEMORY[0x263F288F8]) << 32);
}

uint64_t SecondaryLayerGeometryQuery.$alignment.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*SecondaryLayerGeometryQuery.$alignment.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  int v2 = *v1;
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return SecondaryLayerGeometryQuery.$alignment.modify;
}

uint64_t SecondaryLayerGeometryQuery.$alignment.modify(uint64_t result)
{
  uint64_t v1 = (_DWORD *)(result + 8);
  if (*(unsigned char *)(result + 12)) {
    uint64_t v1 = (_DWORD *)(result + 16);
  }
  **(_DWORD **)uint64_t result = *v1;
  return result;
}

unsigned char *SecondaryLayerGeometryQuery.layoutDirection.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.layoutDirection.setter()
{
  return AGGraphSetValue();
}

uint64_t (*SecondaryLayerGeometryQuery.layoutDirection.modify(uint64_t a1))(uint64_t a1)
{
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 4);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)AGGraphGetValue();
  return SecondaryLayerGeometryQuery.layoutDirection.modify;
}

uint64_t SecondaryLayerGeometryQuery.layoutDirection.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a1 + 4);
  return AGGraphSetValue();
}

uint64_t SecondaryLayerGeometryQuery.$layoutDirection.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t SecondaryLayerGeometryQuery.$layoutDirection.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$layoutDirection.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return SecondaryLayerGeometryQuery.$layoutDirection.modify;
}

_DWORD *SecondaryLayerGeometryQuery.$layoutDirection.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 4) = result[2];
  return result;
}

__n128 SecondaryLayerGeometryQuery.primaryPosition.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Value = (__n128 *)AGGraphGetValue();
  __n128 result = *Value;
  *a1 = *Value;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primaryPosition.setter()
{
  return AGGraphSetValue();
}

void (*SecondaryLayerGeometryQuery.primaryPosition.modify(void *a1))(_OWORD **a1)
{
  int v3 = malloc(0x24uLL);
  *a1 = v3;
  v3[8] = *(_DWORD *)(v1 + 8);
  *(_OWORD *)int v3 = *(_OWORD *)AGGraphGetValue();
  return SecondaryLayerGeometryQuery.primaryPosition.modify;
}

void SecondaryLayerGeometryQuery.primaryPosition.modify(_OWORD **a1)
{
  uint64_t v1 = *a1;
  (*a1)[1] = **a1;
  AGGraphSetValue();

  free(v1);
}

uint64_t SecondaryLayerGeometryQuery.$primaryPosition.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t SecondaryLayerGeometryQuery.$primaryPosition.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$primaryPosition.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return _ViewInputs.time.modify;
}

__n128 SecondaryLayerGeometryQuery.primarySize.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primarySize.setter()
{
  return AGGraphSetValue();
}

void (*SecondaryLayerGeometryQuery.primarySize.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x44uLL);
  *a1 = v3;
  v3[16] = *(_DWORD *)(v1 + 12);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v5 = Value[1];
  *(_OWORD *)int v3 = *Value;
  *((_OWORD *)v3 + 1) = v5;
  return SecondaryLayerGeometryQuery.primarySize.modify;
}

void SecondaryLayerGeometryQuery.primarySize.modify(uint64_t a1)
{
  uint64_t v1 = *(_OWORD **)a1;
  long long v2 = *(_OWORD *)(*(void *)a1 + 16);
  v1[2] = *v1;
  v1[3] = v2;
  AGGraphSetValue();

  free(v1);
}

uint64_t SecondaryLayerGeometryQuery.$primarySize.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t SecondaryLayerGeometryQuery.$primarySize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

_DWORD *(*SecondaryLayerGeometryQuery.$primarySize.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 12);
  return SecondaryLayerGeometryQuery.$primarySize.modify;
}

_DWORD *SecondaryLayerGeometryQuery.$primarySize.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 12) = result[2];
  return result;
}

uint64_t SecondaryLayerGeometryQuery.primaryLayoutComputer.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 16);
  if (result == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_retain();
  }
  return result;
}

unint64_t SecondaryLayerGeometryQuery.$primaryLayoutComputer.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 16);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t SecondaryLayerGeometryQuery.$primaryLayoutComputer.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 16) = v2;
  return result;
}

unsigned char *(*SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 16);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify;
}

unsigned char *SecondaryLayerGeometryQuery.$primaryLayoutComputer.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 16) = *v1;
  return result;
}

uint64_t SecondaryLayerGeometryQuery.secondaryLayoutComputer.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 20);
  if (result == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_retain();
  }
  return result;
}

unint64_t SecondaryLayerGeometryQuery.$secondaryLayoutComputer.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 20);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

unsigned char *(*SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 20);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify;
}

unsigned char *SecondaryLayerGeometryQuery.$secondaryLayoutComputer.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 20) = *v1;
  return result;
}

uint64_t type metadata accessor for _OverlayStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _OverlayShapeModifier()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _StrokedShape<Rectangle._Inset>()
{
  if (!lazy cache variable for type metadata for _StrokedShape<Rectangle._Inset>)
  {
    lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
    unint64_t v0 = type metadata accessor for _StrokedShape();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _StrokedShape<Rectangle._Inset>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>;
  if (!lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>)
  {
    type metadata accessor for _StrokedShape<Rectangle._Inset>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _StrokedShape<Rectangle._Inset> and conformance _StrokedShape<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SecondaryLayerGeometryQuery(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  *(void *)(a1 + 8) = result;
  return result;
}

int *sub_245C1A9F0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *result;
  BOOL v3 = *result == *MEMORY[0x263F288F8];
  if (*result == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_245C1AA18(uint64_t result, _DWORD *a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *a2 = *v2;
  return result;
}

unsigned char *sub_245C1AA38@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (unsigned char *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_245C1AA74()
{
  return AGGraphSetValue();
}

uint64_t sub_245C1AAD8@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 4);
  return result;
}

_DWORD *sub_245C1AAE4(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *result;
  return result;
}

__n128 sub_245C1AAF0@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Value = (__n128 *)AGGraphGetValue();
  __n128 result = *Value;
  *a1 = *Value;
  return result;
}

uint64_t sub_245C1AB2C()
{
  return AGGraphSetValue();
}

uint64_t sub_245C1AB94@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *sub_245C1ABA0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *result;
  return result;
}

__n128 sub_245C1ABAC@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t sub_245C1ABE8()
{
  return AGGraphSetValue();
}

uint64_t sub_245C1AC50@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 12);
  return result;
}

_DWORD *sub_245C1AC5C(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *result;
  return result;
}

uint64_t sub_245C1AC68@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 16);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_245C1AC90(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 16) = *v2;
  return result;
}

uint64_t sub_245C1ACB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 20);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_245C1ACD8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 20) = *v2;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OverlayModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithTake for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C1AF88);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _OverlayModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C1B148);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for _OverlayStyleModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithTake for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = v6 + 1;
  char v9 = 8 * (v6 + 1);
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for _OverlayStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64) + 1;
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C1B690);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata completion function for _OverlayShapeModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _OverlayShapeModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = v11 + ((v6 + v9) & ~v9) + 2;
  uint64_t v13 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(_WORD *)((((unint64_t)v4 + v10) & v17) + v11) = *(_WORD *)(v18 + v11);
  }
  return v4;
}

uint64_t initializeWithTake for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(_WORD *)(*(void *)(v9 + 32) + v12) = *(_WORD *)(*(void *)(v9 + 32) + v13);
  return a1;
}

uint64_t assignWithTake for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24);
  int v15 = (unsigned char *)(v14 + v12);
  uint64_t v16 = (unsigned char *)(v14 + v13);
  *int v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _OverlayShapeModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 2;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_9;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v17 <= 0xFF)
    {
      if (v17 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v16 = *((unsigned __int8 *)a1 + v14);
      if (!*((unsigned char *)a1 + v14)) {
        goto LABEL_26;
      }
LABEL_16:
      int v18 = (v16 - 1) << v15;
      if (v14 > 3) {
        int v18 = 0;
      }
      if (v10 + (v12 & ~v9) == -2)
      {
        int v20 = 0;
      }
      else
      {
        if (v14 <= 3) {
          int v19 = v10 + (v12 & ~v9) + 2;
        }
        else {
          int v19 = 4;
        }
        switch(v19)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v20 | v18) + 1;
    }
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v6 == v11) {
    return (*(uint64_t (**)(void))(v5 + 48))();
  }
  unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
  }
  unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
  if (v23 < 2) {
    return 0;
  }
  return ((v23 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _OverlayShapeModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 2;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -2)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x245C1BFB8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v12)
        {
          unint64_t v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
          if (v9 == v12)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else if (a2 > 0xFE)
          {
            *(_WORD *)(v23 + v11) = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v23 + v11) = a2 + 1;
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for SecondaryLayerGeometryQuery()
{
  return &type metadata for SecondaryLayerGeometryQuery;
}

uint64_t sub_245C1BFF0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _OverlayModifier);
}

uint64_t sub_245C1C010()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C1C0C0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _OverlayStyleModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA16_OverlayModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_245C1C15C()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C1C1DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a1, a2);
}

double Font.ResolvedTraits.pointSize.getter()
{
  return *(double *)v0;
}

void Font.ResolvedTraits.pointSize.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*Font.ResolvedTraits.pointSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.ResolvedTraits.init(pointSize:weight:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

void Font.ResolvedTraits.init(_:)(const __CTFontDescriptor *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  if (CTFontDescriptorCopyAttribute(a1, (CFStringRef)*MEMORY[0x263F03B28]) && swift_dynamicCast()) {
    uint64_t v4 = v7;
  }
  CTFontDescriptorGetWeight();
  uint64_t v6 = v5;

  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
}

uint64_t Font.ResolvedTraits.init(textStyle:weight:sizeCategory:)@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  specialized Font.TextStyle.ctTextStyle.getter();
  specialized DynamicTypeSize.ctTextSize.getter();
  uint64_t result = CTFontDescriptorGetTextStyleSize();
  double v8 = 0.0;
  if ((a2 & 1) == 0) {
    double v8 = a1;
  }
  *(void *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

void Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)(void **a1@<X0>, double a2@<X1>, char a3@<W2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  double v8 = *a1;
  BYTE8(v12) = 0;
  *(void *)&long long v12 = *a4;
  specialized DynamicTypeSize.ctTextSize.getter();
  CTFontDescriptorGetTextStyleSize();
  uint64_t v10 = v9;

  double v11 = *(double *)((char *)&v12 + 1);
  if ((a3 & 1) == 0) {
    double v11 = a2;
  }
  *(void *)a5 = v10;
  *(double *)(a5 + 8) = v11;
  *(void *)(a5 + 16) = 0;
  *(unsigned char *)(a5 + 24) = 1;
}

uint64_t Font.init<A>(_:)(uint64_t a1)
{
  return FontBox.__allocating_init(_:)(a1);
}

uint64_t Font.resolveTraits(in:)(__int16 *a1, uint64_t a2)
{
  char v2 = *((unsigned char *)a1 + 24);
  char v3 = *((unsigned char *)a1 + 25);
  __int16 v5 = *a1;
  long long v6 = *(_OWORD *)(a1 + 4);
  char v7 = v2;
  char v8 = v3;
  return (*(uint64_t (**)(__int16 *))(*(void *)a2 + 88))(&v5);
}

uint64_t Font.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 104))();
}

uint64_t static Font.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
}

Swift::Int Font.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Font()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 104))(v3);
  return Hasher._finalize()();
}

void specialized FontProvider.resolveTraits(in:)(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  LOBYTE(v14) = a7;
  LOWORD(v15[0]) = a1;
  v15[1] = a2;
  v15[2] = a3;
  __int16 v16 = a4 & 0x1FF;
  uint64_t v9 = (const __CTFontDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *, uint64_t, uint64_t))(a3 + 32))(a5, a6, &v14, v15, a2, a3);
  CFTypeRef v10 = CTFontDescriptorCopyAttribute(v9, (CFStringRef)*MEMORY[0x263F03B28]);
  uint64_t v11 = 0;
  if (v10)
  {
    v15[0] = v10;
    if (swift_dynamicCast()) {
      uint64_t v11 = v14;
    }
  }
  CTFontDescriptorGetWeight();
  uint64_t v13 = v12;

  *(void *)a8 = v11;
  *(void *)(a8 + 8) = v13;
  *(void *)(a8 + 16) = 0;
  *(unsigned char *)(a8 + 24) = 1;
}

void AnyFontBox.resolve(in:)()
{
}

void AnyFontBox.resolveTraits(in:)()
{
}

void AnyFontBox.isEqual(to:)()
{
}

void AnyFontBox.hash(into:)()
{
}

uint64_t AnyFontBox.deinit()
{
  return v0;
}

uint64_t AnyFontBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FontBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));
}

void Font.Resolved.hash(into:)(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt v4 = *(unsigned __int8 *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 17);
  long long v14 = *(_OWORD *)(v1 + 24);
  Swift::UInt v6 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 41);
  char v8 = *(void (**)(uint64_t))(**(void **)v1 + 104);
  swift_retain();
  v8(a1);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    Swift::UInt v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v13);
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::UInt v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v9);
    uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      goto LABEL_10;
    }
  }
  if (v10 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v10; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x24C523D60](i, v3);
    }
    else
    {
      uint64_t v12 = *(void *)(v3 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 104))(a1);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  long long v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.Resolved()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 16);
  int v4 = *((unsigned __int8 *)v0 + 17);
  long long v14 = *(_OWORD *)(v0 + 3);
  Swift::UInt v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt8 v6 = *((unsigned char *)v0 + 41);
  Hasher.init(_seed:)();
  Swift::UInt8 v7 = *(void (**)(unsigned char *))(*(void *)v2 + 104);
  swift_retain();
  v7(v16);
  swift_release();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    Swift::UInt v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    Swift::UInt v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    Hasher._combine(_:)(v8);
    uint64_t v9 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (v9 < 1) {
    __break(1u);
  }
  for (uint64_t i = 0; i != v9; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = MEMORY[0x24C523D60](i, v1);
    }
    else
    {
      uint64_t v11 = *(void *)(v1 + 8 * i + 32);
      swift_retain();
    }
    (*(void (**)(unsigned char *))(*(void *)v11 + 104))(v16);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
  long long v15 = v14;
  Hasher._combine(_:)((Swift::UInt)&v15);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void Font.Context.sizeCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Font.Context.sizeCategory.setter(unsigned char *result)
{
  *unint64_t v1 = *result;
  return result;
}

uint64_t (*Font.Context.sizeCategory.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.Context.legibilityWeight.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *Font.Context.legibilityWeight.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Font.Context.legibilityWeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.Context.watchDisplayVariant.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *Font.Context.watchDisplayVariant.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*Font.Context.watchDisplayVariant.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Font.Context.hash(into:)()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v1 = v0[1];
  long long v4 = *(_OWORD *)(v0 + 8);
  Swift::UInt v2 = v0[24];
  Swift::UInt8 v3 = v0[25];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  long long v5 = v4;
  Hasher._combine(_:)((Swift::UInt)&v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int Font.Context.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.Context()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.Context()
{
  return Hasher._finalize()();
}

uint64_t Font.platformFont(in:modifiers:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  __int16 v3 = *a1;
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 25);
  v9[0] = a3;
  v9[1] = a2;
  __int16 v10 = v3;
  long long v11 = *(_OWORD *)(a1 + 4);
  char v12 = v4;
  char v13 = v5;
  uint64_t v6 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized ObjectCache.subscript.getter((uint64_t)v9);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v7;
}

Swift::Int Font.RatioKey.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
      Swift::UInt v1 = 1;
      break;
    case 2uLL:
      Swift::UInt v1 = 2;
      break;
    case 3uLL:
      Swift::UInt v1 = 3;
      break;
    case 4uLL:
      Swift::UInt v1 = 4;
      break;
    case 5uLL:
      Swift::UInt v1 = 5;
      break;
    case 6uLL:
      Swift::UInt v1 = 6;
      break;
    case 7uLL:
      Swift::UInt v1 = 7;
      break;
    case 8uLL:
      Swift::UInt v1 = 8;
      break;
    case 9uLL:
      Swift::UInt v1 = 9;
      break;
    case 0xAuLL:
      Swift::UInt v1 = 10;
      break;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245C1D1F0);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.RatioKey()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  switch(*v0)
  {
    case 1u:
      Swift::UInt v1 = 1;
      break;
    case 2u:
      Swift::UInt v1 = 2;
      break;
    case 3u:
      Swift::UInt v1 = 3;
      break;
    case 4u:
      Swift::UInt v1 = 4;
      break;
    case 5u:
      Swift::UInt v1 = 5;
      break;
    case 6u:
      Swift::UInt v1 = 6;
      break;
    case 7u:
      Swift::UInt v1 = 7;
      break;
    case 8u:
      Swift::UInt v1 = 8;
      break;
    case 9u:
      Swift::UInt v1 = 9;
      break;
    case 0xAu:
      Swift::UInt v1 = 10;
      break;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245C1D2DCLL);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.RatioKey()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
      Swift::UInt v1 = 1;
      break;
    case 2uLL:
      Swift::UInt v1 = 2;
      break;
    case 3uLL:
      Swift::UInt v1 = 3;
      break;
    case 4uLL:
      Swift::UInt v1 = 4;
      break;
    case 5uLL:
      Swift::UInt v1 = 5;
      break;
    case 6uLL:
      Swift::UInt v1 = 6;
      break;
    case 7uLL:
      Swift::UInt v1 = 7;
      break;
    case 8uLL:
      Swift::UInt v1 = 8;
      break;
    case 9uLL:
      Swift::UInt v1 = 9;
      break;
    case 0xAuLL:
      Swift::UInt v1 = 10;
      break;
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245C1D3E8);
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Font.Context.debugDescription.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 25);
  _StringGuts.grow(_:)(140);
  v2._countAndFlagsBits = 0xD000000000000020;
  v2._object = (void *)0x800000024621E420;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000017;
  v3._object = (void *)0x800000024621E450;
  String.append(_:)(v3);
  type metadata accessor for LegibilityWeight?();
  v4._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x800000024621E470;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x800000024621E490;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._object = (void *)0x800000024621E4B0;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v8);
  if (v1) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 10506;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return 0;
}

double CTFontRef.pointSize.getter()
{
  return CTFontGetSize(v0);
}

double CTFontRef.capHeight.getter()
{
  return CTFontGetCapHeight(v0);
}

double CTFontRef.ascender.getter()
{
  return CTFontGetAscent(v0);
}

CGFloat CTFontRef.descender.getter()
{
  return -CTFontGetDescent(v0);
}

double CTFontRef.leading.getter()
{
  return CTFontGetLeading(v0);
}

double CTFontRef.bodyLeading.getter()
{
  double Ascent = CTFontGetAscent(v0);
  double v2 = Ascent + CTFontGetDescent(v0);
  return v2 + CTFontGetLeading(v0);
}

uint64_t CTFontRef.isSystemUIFont.getter()
{
  return CTFontIsSystemUIFont();
}

uint64_t CTFontRef.weight.getter()
{
  return CTFontGetWeight();
}

uint64_t CTFontRef.symbolicTraits.getter()
{
  return CTFontGetSymbolicTraits(v0);
}

uint64_t CTFontRef.stylisticClass.getter()
{
  return CTFontGetSymbolicTraits(v0) & 0xF0000000;
}

CTFontRef CTFontRef.scaled(by:toMultipleOf:maintainVisualWeight:)(uint64_t a1, char a2, char a3, double a4)
{
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 == 1.0)
  {
    Swift::String v12 = (void *)v37;
    return (CTFontRef)v12;
  }
  else
  {
    if (a2)
    {
      double v15 = CTFontGetSize((CTFontRef)v37) * a4;
    }
    else
    {
      CGFloat v14 = CTFontGetSize((CTFontRef)v37) * a4;
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8E210], v8);
      CGFloat v38 = v14;
      specialized FloatingPoint.round(_:toMultipleOf:)(v11, *(double *)&a1);
      double v15 = v38;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    CTFontDescriptorRef v16 = CTFontCopyFontDescriptor((CTFontRef)v37);
    CopyWithAttributes = v16;
    if ((a3 & 1) != 0 && v15 > 0.0)
    {
      unsigned int v18 = v16;
      CTFontGetWeight();
      double v20 = (a4 + 1.0) * 0.5 * ((v19 + 1.0) * CTFontGetSize((CTFontRef)v37) / v15) + -1.0;
      uint64_t v21 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSDictionary);
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (void (*)(uint64_t))type metadata accessor for (Any, Any));
      uint64_t v22 = swift_allocObject();
      long long v37 = xmmword_2461B9DC0;
      *(_OWORD *)(v22 + 16) = xmmword_2461B9DC0;
      unint64_t v23 = (void *)*MEMORY[0x263F03B60];
      type metadata accessor for CFStringRef(0);
      uint64_t v25 = v24;
      *(void *)(v22 + 56) = v24;
      *(void *)(v22 + 32) = v23;
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v37;
      uint64_t v27 = (void *)*MEMORY[0x263F03C00];
      *(void *)(v26 + 56) = v25;
      *(void *)(v26 + 32) = v27;
      id v28 = objc_allocWithZone(NSNumber);
      id v29 = v23;
      id v30 = v27;
      id v31 = objc_msgSend(v28, sel_initWithDouble_, v20);
      *(void *)(v26 + 88) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
      *(void *)(v26 + 64) = v31;
      int v32 = NSDictionary.init(dictionaryLiteral:)();
      uint64_t v33 = NSDictionary.init(dictionary:)();

      *(void *)(v22 + 88) = v21;
      *(void *)(v22 + 64) = v33;
      uint64_t v34 = NSDictionary.init(dictionaryLiteral:)();
      CFDictionaryRef v35 = (const __CFDictionary *)NSDictionary.init(dictionary:)();

      CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v18, v35);
    }
    CTFontRef v36 = CTFontCreateWithFontDescriptor(CopyWithAttributes, v15, 0);

    return v36;
  }
}

BOOL CTFontRef.mayRequireLanguageAwareOutsets.getter()
{
  CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(v0);
  if (SymbolicTraits) {
    return 1;
  }
  CTFontSymbolicTraits v2 = SymbolicTraits;
  CTFontGetWeight();
  if (*MEMORY[0x263F03BE8] < v3) {
    return 1;
  }
  return (v2 & 0xF0000000) == 0xA0000000 || (v2 & 0xF0000000) == -1879048192;
}

uint64_t CTFontLegibilityWeight.init(_:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2) {
    return -1;
  }
  else {
    return v1 & 1;
  }
}

void static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5, unsigned __int8 *a6)
{
}

uint64_t static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(void *a1, uint64_t a2, char a3, unsigned __int8 *a4, double a5)
{
  return specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(a1, a2, a3 & 1, a4, a5);
}

CTFontDescriptorRef __swiftcall Font.resolve(in:)(SwiftUI::DynamicTypeSize in)
{
  v3[0] = *(unsigned char *)in;
  v3[1] = 2;
  Swift::String v4 = &type metadata for DefaultFontDefinition;
  Swift::String v5 = &protocol witness table for DefaultFontDefinition;
  __int16 v6 = 2;
  return (CTFontDescriptorRef)(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 80))(v3);
}

void protocol witness for FontProvider.resolveTraits(in:) in conformance Font.NamedProvider(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 25)) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  specialized FontProvider.resolveTraits(in:)(*(_WORD *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), v3 | *(unsigned __int8 *)(a1 + 24), *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 24), a2);
}

BOOL specialized static Font.RatioKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  uint64_t v4 = *a2;
  int v5 = a2[1];
  int v6 = 1;
  char v7 = 0;
  char v8 = 0;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  char v12 = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  switch(v2)
  {
    case 1:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      int v6 = 0;
      char v16 = 1;
      break;
    case 2:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v16 = 0;
      int v6 = 0;
      char v15 = 1;
      break;
    case 3:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v14 = 1;
      break;
    case 4:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v13 = 1;
      break;
    case 5:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v12 = 1;
      break;
    case 6:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v11 = 1;
      break;
    case 7:
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v10 = 1;
      break;
    case 8:
      char v7 = 0;
      char v8 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v9 = 1;
      break;
    case 9:
      char v7 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v8 = 1;
      break;
    case 10:
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v6 = 0;
      char v7 = 1;
      break;
    case 11:
    case 12:
    case 13:
LABEL_35:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x245C1E0BCLL);
    default:
      break;
  }
  switch(v4)
  {
    case 1:
      if ((v16 & 1) == 0) {
        return 0;
      }
      return v3 == v5;
    case 2:
      if (v15) {
        return v3 == v5;
      }
      return 0;
    case 3:
      if (v14) {
        return v3 == v5;
      }
      return 0;
    case 4:
      if (v13) {
        return v3 == v5;
      }
      return 0;
    case 5:
      if (v12) {
        return v3 == v5;
      }
      return 0;
    case 6:
      if (v11) {
        return v3 == v5;
      }
      return 0;
    case 7:
      if (v10) {
        return v3 == v5;
      }
      return 0;
    case 8:
      if (v9) {
        return v3 == v5;
      }
      return 0;
    case 9:
      if (v8) {
        return v3 == v5;
      }
      return 0;
    case 10:
      if (v7) {
        return v3 == v5;
      }
      return 0;
    case 11:
    case 12:
    case 13:
      goto LABEL_35;
    default:
      return v6 && v3 == v5;
  }
}

uint64_t specialized static Font.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v15 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 17);
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 41);
  uint64_t v6 = *(void *)(a2 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 17);
  long long v13 = *(_OWORD *)(a2 + 24);
  long long v14 = *(_OWORD *)(a1 + 24);
  char v9 = *(unsigned char *)(a2 + 40);
  char v10 = *(unsigned char *)(a2 + 41);
  if (((*(uint64_t (**)(void))(**(void **)a1 + 96))(*(void *)a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(v15, v6) & 1) != 0)
  {
    v20[0] = v2;
    v20[1] = v3;
    long long v21 = v14;
    char v22 = v4;
    char v23 = v5;
    v16[0] = v7;
    v16[1] = v8;
    long long v17 = v13;
    char v18 = v9;
    char v19 = v10;
    char v11 = specialized static Font.Context.== infix(_:_:)(v20, v16);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

void type metadata accessor for LegibilityWeight?()
{
  if (!lazy cache variable for type metadata for LegibilityWeight?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LegibilityWeight?);
    }
  }
}

void type metadata accessor for (Any, Any)()
{
  if (!lazy cache variable for type metadata for (Any, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, Any));
    }
  }
}

ValueMetadata *type metadata accessor for Font.ResolvedTraits()
{
  return &type metadata for Font.ResolvedTraits;
}

uint64_t method lookup function for AnyFontBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyFontBox);
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey);
  }
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.FallbackFontKey and conformance EnvironmentValues.FallbackFontKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.FallbackFontKey>>);
    }
  }
}

uint64_t sub_245C1E424()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245C1E45C()
{
  return swift_deallocObject();
}

void *type metadata accessor for EnvironmentValues.FontContextKey()
{
  return &unk_26FA56E88;
}

uint64_t destroy for Font.Resolved()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Font.Resolved(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Font.Resolved(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t assignWithTake for Font.Resolved(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for Font.Resolved(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.Resolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.Resolved()
{
  return &type metadata for Font.Resolved;
}

uint64_t getEnumTagSinglePayload for Font.RatioKey(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 65291 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65291 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65291;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65291;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65291;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.RatioKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65291 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65291 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 245;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C1E7ECLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.RatioKey()
{
  return &type metadata for Font.RatioKey;
}

uint64_t AnyHashable2.anyHashable.getter()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 96))(v7);
  uint64_t v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  double v2 = MEMORY[0x270FA5388](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  AnyHashable.init<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t AnyHashable2.description.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t static AnyHashable2.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 104))() & 1;
  }
}

uint64_t AnyHashable2.hash(into:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int AnyHashable2.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyHashable2()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyHashable2()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyHashable2()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 112))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHashable2()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyHashable2(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 104))() & 1;
  }
}

uint64_t AnyHashable2._toCustomAnyHashable()()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 96))(v7);
  uint64_t v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  double v2 = MEMORY[0x270FA5388](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  AnyHashable.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return swift_release();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AnyHashable2()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 96))(v7);
  uint64_t v1 = __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  double v2 = MEMORY[0x270FA5388](v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  swift_retain();
  AnyHashable.init<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for AnyHashable2()
{
  return &type metadata for AnyHashable2;
}

uint64_t AnyHashableBox.as<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t AnyHashableBox.description.getter()
{
  return 0;
}

void AnyHashableBox.anyValue.getter()
{
}

uint64_t _AnyHashableBox.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  double v3 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v8 - v6, v1 + *(void *)(v4 + 144), v2, v3);
  return String.init<A>(describing:)();
}

uint64_t _GraphInputs.layoutAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.layoutAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for _GraphInputs.layoutAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.layoutAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.layoutAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.layoutAccessibilityProvider.modify;
}

void _GraphInputs.layoutAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.LayoutAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.layoutAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _ViewInputs.layoutAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void (*_ViewInputs.layoutAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  void *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.layoutAccessibilityProvider.modify;
}

uint64_t dispatch thunk of static LayoutAccessibilityProvider.makeAccessibility(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for EmptyLayoutAccessibilityProvider()
{
  return &type metadata for EmptyLayoutAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.LayoutAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.LayoutAccessibilityProviderKey;
}

void _ProposedSize.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions()()
{
  double v1 = *(double *)v0;
  double v2 = *(double *)(v0 + 16);
  if (*(unsigned char *)(v0 + 8)) {
    double v1 = 10.0;
  }
  if (*(unsigned char *)(v0 + 24)) {
    double v2 = 10.0;
  }
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t (*_ProposedSize.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ProposedSize.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ProposedSize.scaled(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3 = *(double *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  double v5 = *(double *)(v2 + 16);
  int v6 = *(unsigned __int8 *)(v2 + 24);
  if (!v4) {
    double v3 = *(double *)v2 * a2;
  }
  double v7 = v5 * a2;
  *(double *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  if (v6) {
    double v8 = v5;
  }
  else {
    double v8 = v7;
  }
  *(double *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v6;
}

void one-time initialization function for zero()
{
  static _ProposedSize.zero = 0;
  byte_268EF9428 = 0;
  qword_268EF9430 = 0;
  byte_268EF9438 = 0;
}

{
  static ProposedViewSize.zero = 0;
  byte_268EEF3D8 = 0;
  qword_268EEF3E0 = 0;
  byte_268EEF3E8 = 0;
}

{
  static UnitPoint.zero = 0;
  *(void *)algn_268EF2558 = 0;
}

uint64_t static _ProposedSize.zero.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    uint64_t result = swift_once();
  }
  char v2 = byte_268EF9428;
  uint64_t v3 = qword_268EF9430;
  char v4 = byte_268EF9438;
  *(void *)a1 = static _ProposedSize.zero;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  return result;
}

uint64_t static _ProposedSize.infinity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for infinity != -1) {
    uint64_t result = swift_once();
  }
  char v2 = byte_268EF9448;
  uint64_t v3 = qword_268EF9450;
  char v4 = byte_268EF9458;
  *(void *)a1 = static _ProposedSize.infinity;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  return result;
}

Swift::Int _ProposedSize.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ProposedSize()
{
  return Hasher._finalize()();
}

uint64_t CGSize.init(_:)(unsigned char *a1)
{
  if (a1[8]) {
    return 0;
  }
  if (a1[24]) {
    return 0;
  }
  return *(void *)a1;
}

uint64_t _ProposedSize.subscript.getter(char a1)
{
  uint64_t v2 = v1 + 16;
  if ((a1 & 1) == 0) {
    uint64_t v2 = v1;
  }
  return *(void *)v2;
}

uint64_t (*_ProposedSize.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 9) = a2;
  uint64_t v3 = (char *)(v2 + 8);
  char v4 = (uint64_t *)(v2 + 16);
  if ((a2 & 1) == 0) {
    char v4 = (uint64_t *)v2;
  }
  uint64_t v5 = *v4;
  if (a2) {
    uint64_t v3 = (char *)(v2 + 24);
  }
  char v6 = *v3;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return _ProposedSize.subscript.modify;
}

uint64_t _ProposedSize.subscript.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *(unsigned char *)(result + 9) & 1;
  uint64_t v4 = 16 * v3;
  BOOL v5 = v3 == 0;
  uint64_t v6 = 24;
  if (v5) {
    uint64_t v6 = 8;
  }
  *(void *)(v1 + v4) = *(void *)result;
  *(unsigned char *)(v1 + v6) = v2;
  return result;
}

uint64_t sub_245C1FA88@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)(result + 8);
  uint64_t v4 = (uint64_t *)(result + 16);
  if (!*a2) {
    uint64_t v4 = (uint64_t *)result;
  }
  uint64_t v5 = *v4;
  if (*a2) {
    uint64_t v3 = (char *)(result + 24);
  }
  char v6 = *v3;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

uint64_t *sub_245C1FAB8(uint64_t *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  char v4 = *((unsigned char *)result + 8);
  if (*a3)
  {
    *(void *)(a2 + 16) = v3;
    *(unsigned char *)(a2 + 24) = v4;
  }
  else
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = v4;
  }
  return result;
}

uint64_t sub_245C1FAE0()
{
  return 0;
}

uint64_t assignWithCopy for Text.Effect.StopCollector(uint64_t a1, long long *a2, uint64_t a3)
{
  return assignWithCopy for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
}

void type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)()
{
  if (!lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>))
  {
    type metadata accessor for Set<Text.Effect.ClusterIndex>(255, &lazy cache variable for type metadata for Set<Text.Effect.ClusterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex, MEMORY[0x263F8D680]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
    }
  }
}

uint64_t assignWithTake for Text.Effect.StopCollector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>));
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector()
{
  return &type metadata for Text.Effect.StopCollector;
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector.Segment()
{
  return &type metadata for Text.Effect.StopCollector.Segment;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.StopKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C1FCC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.StopKey()
{
  return &type metadata for Text.Effect.StopKey;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopKey and conformance Text.Effect.StopKey()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopKey and conformance Text.Effect.StopKey);
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.StopCollector.Segment>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment(a1, a2, a3, specialized RandomAccessCollection.index(_:offsetBy:limitedBy:), a4);
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  unint64_t result = (void (*)(void **))malloc(0x60uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v7 = *(void *)v2 + 96 * v6;
    uint64_t v8 = *(void *)(v7 + 96);
    char v9 = *(unsigned char *)(v7 + 104);
    long long v10 = *(_OWORD *)(v7 + 48);
    long long v11 = *(_OWORD *)(v7 + 64);
    long long v12 = *(_OWORD *)(v7 + 80);
    long long v13 = *(_OWORD *)(v7 + 112);
    *(_OWORD *)unint64_t result = *(_OWORD *)(v7 + 32);
    *((_OWORD *)result + 1) = v10;
    *((_OWORD *)result + 2) = v11;
    *((_OWORD *)result + 3) = v12;
    *((void *)result + 8) = v8;
    *((unsigned char *)result + 72) = v9;
    *((_OWORD *)result + 5) = v13;
    return protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment(void **a1)
{
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.StopCollector.Segment()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.StopCollector.Segment(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.StopCollector.Segment>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopCollector.Segment> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Set<Text.Effect.ClusterIndex>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.StopCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.StopCollector.Segment> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Set<Text.Effect.ClusterIndex>(255, &lazy cache variable for type metadata for Slice<Text.Effect.StopCollector.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopCollector.Segment and conformance Text.Effect.StopCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopCollector.Segment, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall Text.Effect.StopCollector.flushSegment()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[1];
  if (!v2)
  {
LABEL_41:
    *uint64_t v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    return;
  }
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v3, v2);
  uint64_t v5 = specialized Text.Effect.StopSegment.init(segment:)(v2);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v3;
    uint64_t v37 = v2;
LABEL_40:
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v36, v37);
    goto LABEL_41;
  }
  unint64_t v7 = v5;
  uint64_t v8 = v6;
  char v9 = (void *)v1[3];
  uint64_t v10 = v9[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_46:
  }
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 1, 1, v9);
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1) {
    char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
  }
  void v9[2] = v12 + 1;
  long long v13 = &v9[2 * v12];
  v13[4] = v7;
  v13[5] = v8;
  swift_bridgeObjectRelease();
  int64_t v14 = 0;
  v1[3] = (uint64_t)v9;
  uint64_t v38 = v4 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v4 + 56);
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
    }
    else
    {
      int64_t v20 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_44;
      }
      if (v20 >= v39)
      {
LABEL_38:
        swift_release();
        uint64_t v36 = *v1;
        uint64_t v37 = v1[1];
        goto LABEL_40;
      }
      unint64_t v21 = *(void *)(v38 + 8 * v20);
      ++v14;
      if (!v21)
      {
        int64_t v14 = v20 + 1;
        if (v20 + 1 >= v39) {
          goto LABEL_38;
        }
        unint64_t v21 = *(void *)(v38 + 8 * v14);
        if (!v21)
        {
          int64_t v14 = v20 + 2;
          if (v20 + 2 >= v39) {
            goto LABEL_38;
          }
          unint64_t v21 = *(void *)(v38 + 8 * v14);
          if (!v21)
          {
            int64_t v22 = v20 + 3;
            if (v22 >= v39) {
              goto LABEL_38;
            }
            unint64_t v21 = *(void *)(v38 + 8 * v22);
            if (!v21)
            {
              while (1)
              {
                int64_t v14 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_45;
                }
                if (v14 >= v39) {
                  goto LABEL_38;
                }
                unint64_t v21 = *(void *)(v38 + 8 * v14);
                ++v22;
                if (v21) {
                  goto LABEL_26;
                }
              }
            }
            int64_t v14 = v22;
          }
        }
      }
LABEL_26:
      unint64_t v17 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v14 << 6);
    }
    uint64_t v8 = *(void *)(*(void *)(v4 + 48) + 8 * v19);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = (void *)v1[4];
    v1[4] = 0x8000000000000000;
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    uint64_t v26 = v24[2];
    BOOL v27 = (v25 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    char v9 = v25;
    if (v24[3] < v28) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      id v31 = v24;
      if (v25) {
        goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      id v31 = v24;
      if (v9)
      {
LABEL_9:
        *(void *)(v31[7] + 8 * v7) = v10;
        goto LABEL_10;
      }
    }
LABEL_34:
    v31[(v7 >> 6) + 8] |= 1 << v7;
    uint64_t v32 = 8 * v7;
    *(void *)(v31[6] + v32) = v8;
    *(void *)(v31[7] + v32) = v10;
    uint64_t v33 = v31[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_43;
    }
    v31[2] = v35;
LABEL_10:
    v1[4] = (uint64_t)v31;
    swift_bridgeObjectRelease();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
  uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v9 & 1) == (v30 & 1))
  {
    unint64_t v7 = v29;
    id v31 = v24;
    if (v9) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.StopMarkerCollector.Segment(_OWORD *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *uint64_t result = *(_OWORD *)(*(void *)v2 + 16 * v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.StopCollector.Segment@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3, *v5);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v8 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.StopMarkerCollector.Segment()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.StopMarkerCollector.Segment(void *a1, _OWORD *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

Swift::Void __swiftcall Text.Effect.StopMarkerCollector.flushSegment()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[1];
  if (!v2) {
    goto LABEL_30;
  }
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = v1[2];
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v3, v2);
  uint64_t v5 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(v2);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v3;
    uint64_t v28 = v2;
    goto LABEL_29;
  }
  uint64_t v6 = (uint64_t)v5;
  unint64_t v7 = (void *)v1[3];
  uint64_t v8 = v7[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1) {
      unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    }
    long long v7[2] = v10 + 1;
    v7[v10 + 4] = v6;
    swift_bridgeObjectRelease();
    v1[3] = (uint64_t)v7;
    uint64_t v31 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    if (!v31)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      uint64_t v27 = *v1;
      uint64_t v28 = v1[1];
LABEL_29:
      outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v27, v28);
LABEL_30:
      *uint64_t v1 = 0;
      v1[1] = 0;
      v1[2] = 0;
      return;
    }
    unint64_t v11 = 0;
    uint64_t v29 = isUniquelyReferenced_nonNull_native;
    uint64_t v30 = isUniquelyReferenced_nonNull_native + 32;
    while (1)
    {
      if (v11 >= *(void *)(isUniquelyReferenced_nonNull_native + 16))
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v12 = (uint64_t *)(v30 + 16 * v11);
      uint64_t v6 = *v12;
      uint64_t v13 = v12[1];
      if (*v12 != v13) {
        break;
      }
LABEL_8:
      ++v11;
      uint64_t isUniquelyReferenced_nonNull_native = v29;
      if (v11 == v31) {
        goto LABEL_27;
      }
    }
    if (v13 >= v6) {
      break;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, v7);
  }
  while (1)
  {
    if (v6 >= v13)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v14 = (void *)v1[4];
    v1[4] = 0x8000000000000000;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    uint64_t v17 = v14[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_32;
    }
    unint64_t v7 = v15;
    if (v14[3] < v19) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      int64_t v22 = v14;
      if (v15) {
        goto LABEL_13;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      int64_t v22 = v14;
      if (v7)
      {
LABEL_13:
        *(void *)(v22[7] + 8 * v16) = v8;
        goto LABEL_14;
      }
    }
LABEL_23:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    uint64_t v23 = 8 * v16;
    *(void *)(v22[6] + v23) = v6;
    *(void *)(v22[7] + v23) = v8;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_33;
    }
    void v22[2] = v26;
LABEL_14:
    ++v6;
    v1[4] = (uint64_t)v22;
    swift_bridgeObjectRelease();
    if (v13 == v6) {
      goto LABEL_8;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v7 & 1) == (v21 & 1))
  {
    unint64_t v16 = v20;
    int64_t v22 = v14;
    if (v7) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = -1;
      uint64_t v84 = 1;
      uint64_t v85 = *a1;
      do
      {
        double v86 = *(double *)(v82 + 16 * v84);
        uint64_t v87 = v83;
        uint64_t v88 = v85;
        do
        {
          if (v86 >= *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)uint64_t v88 = v86;
          *(void *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  v99 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      unsigned int v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v99;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          uint64_t v97 = &v94[16 * v93 + 32];
          *(void *)uint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          unsigned int v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v100 = *a1 - 16;
  uint64_t v101 = *a1 + 32;
  unint64_t v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10);
      double v16 = *(double *)(v11 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = (long long *)(v100 + 16 * v10);
          Swift::Int v21 = v10;
          Swift::Int v22 = v14;
          uint64_t v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              *uint64_t v23 = *v20;
              *uint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      uint64_t v26 = v100 + 16 * v10;
      do
      {
        double v27 = *(double *)(v11 + 16 * v10);
        Swift::Int v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 >= *(double *)v29) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v30 = *(void *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *(_OWORD *)v29;
          *(double *)uint64_t v29 = v27;
          *(void *)(v29 + 8) = v30;
          v29 -= 16;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 16;
      }
      while (v10 != v25);
      Swift::Int v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      char v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      unint64_t v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v33 = v12 + 32;
    BOOL v34 = &v12[16 * v32 + 32];
    *(void *)BOOL v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          long long v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            uint64_t v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        uint64_t v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        char v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        char v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        double v75 = v12;
        double v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        double v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)double v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        unint64_t v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  uint64_t v29;
  Swift::Int v30;
  long long *v31;
  uint64_t v32;
  Swift::Int v33;
  long long *v34;
  long long v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  long long v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v87 = 0;
      uint64_t v88 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v90 = *(void *)(v88 + 24 * i + 16);
        unsigned int v91 = v87;
        do
        {
          uint64_t v92 = v88 + v91;
          if (v90 >= *(void *)(v88 + v91 + 16)) {
            break;
          }
          if (!v88) {
            goto LABEL_140;
          }
          unint64_t v93 = *(_OWORD *)(v92 + 24);
          *(_OWORD *)(v92 + 24) = *(_OWORD *)v92;
          *(void *)(v92 + 40) = *(void *)(v92 + 16);
          *(_OWORD *)uint64_t v92 = v93;
          *(void *)(v92 + 16) = v90;
          v91 -= 24;
        }
        while (v91 != -24);
        v87 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      v94 = v12;
      Swift::Int v104 = v9;
      if (v13 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          uint64_t v96 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v95) {
            goto LABEL_144;
          }
          uint64_t v97 = v94;
          unint64_t v98 = *(void *)&v94[16 * v96 + 32];
          v99 = *(void *)&v94[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(void *)&v94[16 * v13 + 16]), v95 + 24 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_133;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          uint64_t v101 = *((void *)v97 + 2);
          if (v13 > v101) {
            goto LABEL_134;
          }
          memmove(&v97[16 * v13 + 16], &v97[16 * v13 + 32], 16 * (v101 - v13));
          v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v13 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::Int v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for (ScrapeableContent, Int)();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    Swift::Int v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  Swift::Int v103 = *a1 + 64;
  unint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v105 = v6;
  char v106 = v3;
  double v107 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(void *)(v11 + 24 * v10 + 16);
      double v16 = *(void *)(v11 + 24 * v14 + 16);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v17 = (uint64_t *)(v103 + 24 * v14);
        double v18 = v15;
        while (1)
        {
          uint64_t v20 = *v17;
          v17 += 3;
          double v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          double v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          Swift::Int v21 = 24 * v10;
          Swift::Int v22 = 24 * v14;
          uint64_t v23 = v10;
          long long v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              Swift::Int v25 = v11 + v22;
              uint64_t v26 = v11 + v21;
              double v27 = *(void *)(v11 + v22 + 16);
              Swift::Int v28 = *(_OWORD *)(v11 + v22);
              uint64_t v29 = *(void *)(v11 + v21 - 8);
              *(_OWORD *)Swift::Int v25 = *(_OWORD *)(v11 + v21 - 24);
              *(void *)(v25 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v28;
              *(void *)(v26 - 8) = v27;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v30 >= v3) {
      uint64_t v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      unint64_t v31 = (long long *)(v11 + 24 * v10);
      do
      {
        unint64_t v32 = *(void *)(v11 + 24 * v10 + 16);
        uint64_t v33 = v14;
        BOOL v34 = v31;
        do
        {
          if (v32 >= *((void *)v34 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          unint64_t v35 = *v34;
          *BOOL v34 = *(long long *)((char *)v34 - 24);
          *((void *)v34 + 2) = *((void *)v34 - 1);
          *((void *)v34 - 1) = v32;
          *(long long *)((char *)v34 - 24) = v35;
          BOOL v34 = (long long *)((char *)v34 - 24);
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        unint64_t v31 = (long long *)((char *)v31 + 24);
      }
      while (v10 != v30);
      Swift::Int v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    uint64_t v37 = *((void *)v12 + 2);
    uint64_t v36 = *((void *)v12 + 3);
    unint64_t v13 = v37 + 1;
    uint64_t v11 = v107;
    if (v37 >= v36 >> 1)
    {
      double v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v12);
      uint64_t v11 = v107;
      unint64_t v12 = v86;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v38 = v12 + 32;
    char v39 = &v12[16 * v37 + 32];
    *(void *)char v39 = v14;
    *((void *)v39 + 1) = v10;
    if (v37)
    {
      while (1)
      {
        uint64_t v40 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v45 = &v38[16 * v13];
          BOOL v46 = *((void *)v45 - 8);
          unint64_t v47 = *((void *)v45 - 7);
          uint64_t v51 = __OFSUB__(v47, v46);
          long long v48 = v47 - v46;
          if (v51) {
            goto LABEL_119;
          }
          uint64_t v50 = *((void *)v45 - 6);
          uint64_t v49 = *((void *)v45 - 5);
          uint64_t v51 = __OFSUB__(v49, v50);
          uint64_t v43 = v49 - v50;
          uint64_t v44 = v51;
          if (v51) {
            goto LABEL_120;
          }
          uint64_t v52 = v13 - 2;
          uint64_t v53 = &v38[16 * v13 - 32];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          uint64_t v51 = __OFSUB__(v54, v55);
          BOOL v56 = v54 - v55;
          if (v51) {
            goto LABEL_122;
          }
          uint64_t v51 = __OFADD__(v43, v56);
          uint64_t v57 = v43 + v56;
          if (v51) {
            goto LABEL_125;
          }
          if (v57 >= v48)
          {
            double v75 = &v38[16 * v40];
            uint64_t v77 = *(void *)v75;
            double v76 = *((void *)v75 + 1);
            uint64_t v51 = __OFSUB__(v76, v77);
            double v78 = v76 - v77;
            if (v51) {
              goto LABEL_129;
            }
            uint64_t v68 = v43 < v78;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v69 = *((void *)v12 + 4);
            uint64_t v70 = *((void *)v12 + 5);
            uint64_t v51 = __OFSUB__(v70, v69);
            uint64_t v62 = v70 - v69;
            BOOL v63 = v51;
            goto LABEL_77;
          }
          uint64_t v42 = *((void *)v12 + 4);
          uint64_t v41 = *((void *)v12 + 5);
          uint64_t v51 = __OFSUB__(v41, v42);
          uint64_t v43 = v41 - v42;
          uint64_t v44 = v51;
        }
        if (v44) {
          goto LABEL_121;
        }
        uint64_t v52 = v13 - 2;
        char v58 = &v38[16 * v13 - 32];
        uint64_t v60 = *(void *)v58;
        char v59 = *((void *)v58 + 1);
        uint64_t v61 = __OFSUB__(v59, v60);
        uint64_t v62 = v59 - v60;
        BOOL v63 = v61;
        if (v61) {
          goto LABEL_124;
        }
        uint64_t v64 = &v38[16 * v40];
        char v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        uint64_t v51 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v51) {
          goto LABEL_127;
        }
        if (__OFADD__(v62, v67)) {
          goto LABEL_128;
        }
        if (v62 + v67 >= v43)
        {
          uint64_t v68 = v43 < v67;
LABEL_83:
          if (v68) {
            uint64_t v40 = v52;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v63) {
          goto LABEL_123;
        }
        uint64_t v71 = &v38[16 * v40];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        uint64_t v51 = __OFSUB__(v72, v73);
        unint64_t v74 = v72 - v73;
        if (v51) {
          goto LABEL_126;
        }
        if (v74 < v62) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        unint64_t v80 = v12;
        char v81 = &v38[16 * v79];
        uint64_t v82 = *(void *)v81;
        uint64_t v83 = &v38[16 * v40];
        uint64_t v84 = *((void *)v83 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 24 * *(void *)v81), (char *)(v11 + 24 * *(void *)v83), v11 + 24 * v84, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v84 < v82) {
          goto LABEL_116;
        }
        if (v40 > *((void *)v80 + 2)) {
          goto LABEL_117;
        }
        *(void *)char v81 = v82;
        *(void *)&v38[16 * v79 + 8] = v84;
        uint64_t v85 = *((void *)v80 + 2);
        if (v40 >= v85) {
          goto LABEL_118;
        }
        unint64_t v12 = v80;
        unint64_t v13 = v85 - 1;
        memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
        *((void *)v80 + 2) = v85 - 1;
        uint64_t v11 = v107;
        if (v85 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v105;
    Swift::Int v3 = v106;
    if (v10 >= v106)
    {
      uint64_t v9 = v104;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  long long v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      double v16 = &v4[2 * v13];
      Swift::Int v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v17 = (double *)(a3 - 16);
        double v18 = v6;
        while (1)
        {
          double v19 = v17 + 2;
          double v20 = *(v18 - 2);
          v18 -= 2;
          if (*(v16 - 2) >= v20)
          {
            Swift::Int v22 = v16 - 2;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)uint64_t v17 = *((_OWORD *)v16 - 1);
            }
            double v18 = v6;
            v16 -= 2;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            }
            long long v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 2;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    Swift::Int v14 = &v4[2 * v10];
    Swift::Int v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 2;
          uint64_t v23 = v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 2;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  long long v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      double v16 = &v4[v13];
      Swift::Int v22 = v16;
      long long v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (double *)(a3 - 8);
        while (1)
        {
          double v18 = v17 + 1;
          double v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            Swift::Int v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *uint64_t v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *uint64_t v17 = v20;
            }
            long long v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    Swift::Int v14 = &v4[v10];
    Swift::Int v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          uint64_t v23 = ++v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  Swift::Int v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 96;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 96;
  uint64_t v23 = __dst;
  Swift::Int v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      if (a4 != __src || &__src[12 * v11] <= a4) {
        memmove(a4, __src, 96 * v11);
      }
      double v16 = &v4[12 * v11];
      Swift::Int v21 = (char *)v16;
      uint64_t v23 = v6;
      if (v7 < v6 && v10 >= 96)
      {
        uint64_t v17 = (double *)(a3 - 96);
        do
        {
          double v18 = v17 + 12;
          if (*(v16 - 2) >= *(v6 - 2))
          {
            Swift::Int v21 = (char *)(v16 - 12);
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              memmove(v17, v16 - 12, 0x60uLL);
            }
            double v19 = v6;
            v16 -= 12;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            double v19 = v6 - 12;
            if (v18 != v6 || v17 >= v6) {
              memmove(v17, v6 - 12, 0x60uLL);
            }
            uint64_t v23 = v6 - 12;
            if (v19 <= v7) {
              break;
            }
          }
          v17 -= 12;
          Swift::Int v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    if (a4 != __dst || &__dst[12 * v9] <= a4) {
      memmove(a4, __dst, 96 * v9);
    }
    uint64_t v12 = &v4[12 * v9];
    Swift::Int v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      uint64_t v13 = v4;
      while (1)
      {
        if (v6[10] >= v13[10])
        {
          uint64_t v4 = v13 + 12;
          double v15 = v13;
          Swift::Int v14 = v6;
          if (v7 == v13)
          {
            v13 += 12;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 12;
          }
        }
        else
        {
          Swift::Int v14 = v6 + 12;
          double v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        memmove(v7, v15, 0x60uLL);
LABEL_18:
        v7 += 12;
        if (v13 < v12)
        {
          Swift::Int v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        Swift::Int v22 = v4;
        uint64_t v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double specialized init(base:glyphRanges:) in Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
LABEL_15:
  }
    __break(1u);
  swift_bridgeObjectRetain();
  uint64_t v6 = a3 + 48;
  double v7 = INFINITY;
  double v8 = -INFINITY;
  do
  {
    double v19 = *(void **)(v6 - 16);
    CFIndex v20 = *(void *)(v6 + 32);
    uint64_t v21 = *(void *)(v6 + 40);
    if (v20 == v21)
    {
      swift_retain();
      id v9 = v19;
      double v10 = 0.0;
      double v11 = 0.0;
      double TypographicBounds = 0.0;
      double v13 = 0.0;
      double v14 = 0.0;
      goto LABEL_4;
    }
    double v22 = *(double *)v6;
    double v23 = *(double *)(v6 + 8);
    CFIndex v24 = *(void *)(v6 - 8);
    swift_retain_n();
    Swift::Int v25 = v19;
    uint64_t v26 = (id)_CTLineGetRunAtIndex(v25, v24);
    BOOL v27 = __OFSUB__(v21, v20);
    CFIndex v28 = v21 - v20;
    if (v27)
    {
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v29 = v26;
    buffer.x = 0.0;
    buffer.y = 0.0;
    CGFloat descent = 0.0;
    CGFloat ascent = 0.0;
    originsBuffer.y = 0.0;
    CGFloat leading = 0.0;
    originsBuffer.x = 0.0;
    v40.location = v20;
    v40.length = 1;
    CTRunGetPositions(v26, v40, &buffer);
    v41.location = v20;
    v41.length = 1;
    CTRunGetBaseAdvancesAndOrigins(v29, v41, 0, &originsBuffer);
    CGFloat v30 = buffer.x - originsBuffer.x;
    CGFloat v31 = buffer.y - originsBuffer.y;
    v42.location = v20;
    v42.length = v28;
    double TypographicBounds = CTRunGetTypographicBounds(v29, v42, &ascent, &descent, &leading);
    swift_release();

    double v14 = fabs(descent);
    double v13 = ascent;
    double v10 = v22 + v30;
    double v11 = v23 - v31;
LABEL_4:
    v6 += 64;
    double v15 = v11 - v13;
    double v16 = v13 + v14;
    v43.origin.x = v10;
    v43.origin.y = v15;
    v43.size.width = TypographicBounds;
    v43.size.height = v16;
    double MinX = CGRectGetMinX(v43);
    if (MinX < v7) {
      double v7 = MinX;
    }
    v44.origin.x = v10;
    v44.origin.y = v15;
    v44.size.width = TypographicBounds;
    v44.size.height = v16;
    double MaxX = CGRectGetMaxX(v44);
    swift_release();

    if (v8 <= MaxX) {
      double v8 = MaxX;
    }
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  if (v7 > v8) {
    goto LABEL_15;
  }
  Text.Layout.Cluster.stopKey.getter(a1, a2, a3);
  return v7;
}

void *specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 < 2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    uint64_t v21 = v3;
    specialized MutableCollection<>.sort(by:)(&v21, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    uint64_t v4 = v21;
    uint64_t v5 = *(void *)(v21 + 16);
    if (v5)
    {
      swift_retain();
      uint64_t v6 = 0;
      double v7 = (double *)(v4 + 56);
      double v8 = (void *)MEMORY[0x263F8EE78];
      do
      {
        double v10 = *(v7 - 3);
        double v9 = *(v7 - 2);
        if (!v6)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          }
          unint64_t v12 = v8[2];
          unint64_t v11 = v8[3];
          if (v12 >= v11 >> 1) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v8);
          }
          v8[2] = v12 + 1;
          *(double *)&v8[v12 + 4] = v10;
        }
        uint64_t v13 = v6 + 1;
        if (v6 + 1 < v1)
        {
          double v14 = *(v7 - 1);
          double v15 = *v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          }
          unint64_t v17 = v8[2];
          unint64_t v16 = v8[3];
          if (v17 >= v16 >> 1) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v8);
          }
          v8[2] = v17 + 1;
          *(double *)&v8[v17 + 4] = ((v10 + v9) * 0.5 + (v14 + v15) * 0.5) * 0.5;
        }
        if (v1 - 1 == v6)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          }
          unint64_t v19 = v8[2];
          unint64_t v18 = v8[3];
          if (v19 >= v18 >> 1) {
            double v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v8);
          }
          v8[2] = v19 + 1;
          *(double *)&v8[v19 + 4] = v9;
        }
        v7 += 2;
        uint64_t v6 = v13;
      }
      while (v5 != v13);
      swift_release();
    }
    else
    {
      double v8 = (void *)MEMORY[0x263F8EE78];
    }
    swift_release();
  }
  return v8;
}

uint64_t specialized static Text.Effect.stopMarkers(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 96);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (uint64_t *)(v1 + 48);
    do
    {
      uint64_t v6 = *(v5 - 2);
      uint64_t v7 = *(v5 - 1);
      uint64_t v8 = *v5;
      outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
      uint64_t v9 = swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextV6LayoutVAFE7ClusterV_SnySiGs5NeverOTg503_s7d3UI4f57VAAE6EffectO12BaseFragmentV11glyphRanges3forSaySnySiGGAC6g5VAAE7H22V_tFAjM8RunSliceVXEfU_AhFE0M0O0oP0VTf1cn_nTf4xg_n(v9, a1);
      outlined release of Text.Effect.BaseFragment(a1);
      double v10 = specialized init(base:glyphRanges:) in Cluster #1 in static Text.Effect.stopMarkers(_:)(v6, v7, v8);
      uint64_t v12 = v11;
      double v13 = v10;
      uint64_t v15 = v14;
      char v17 = v16;
      swift_bridgeObjectRelease();
      unint64_t v19 = *(void *)(v3 + 16);
      unint64_t v18 = *(void *)(v3 + 24);
      if (v19 >= v18 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      }
      *(void *)(v3 + 16) = v19 + 1;
      uint64_t v20 = v3 + 32 * v19;
      *(void *)(v20 + 32) = v12;
      *(double *)(v20 + 40) = v13;
      *(void *)(v20 + 48) = v15;
      *(unsigned char *)(v20 + 56) = v17;
      v5 += 3;
      --v2;
    }
    while (v2);
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  v99 = v21;
  uint64_t v100 = (void *)MEMORY[0x263F8EE80];
  uint64_t v91 = *(void *)(v3 + 16);
  if (!v91)
  {
LABEL_87:
    swift_bridgeObjectRelease();
    Text.Effect.StopMarkerCollector.flushSegment()();
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v97, v98);
    return (uint64_t)v99;
  }
  double v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  BOOL v25 = 0;
  unint64_t v26 = 0;
  while (1)
  {
    if (v26 >= *(void *)(v3 + 16)) {
      goto LABEL_97;
    }
    uint64_t v29 = v3 + 32 + 32 * v26;
    int v30 = *(unsigned __int8 *)(v29 + 24);
    uint64_t v96 = v23;
    if (v30 != 2) {
      break;
    }
    if (v22)
    {
      outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
      uint64_t v31 = swift_bridgeObjectRetain();
      unint64_t v32 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)(v31);
      if (v32)
      {
        uint64_t v33 = v32;
        BOOL v34 = v99;
        uint64_t v35 = v99[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 + 1, 1, v99);
        }
        unint64_t v37 = v34[2];
        unint64_t v36 = v34[3];
        if (v37 >= v36 >> 1) {
          BOOL v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v34);
        }
        v34[2] = v37 + 1;
        v34[v37 + 4] = v33;
        swift_bridgeObjectRelease();
        v99 = v34;
        uint64_t v94 = *(void *)(v23 + 16);
        if (v94)
        {
          unint64_t v88 = v26;
          unint64_t v38 = 0;
          uint64_t v92 = v23 + 32;
          uint64_t v39 = v100;
          while (1)
          {
            if (v38 >= *(void *)(v23 + 16)) {
              goto LABEL_94;
            }
            CFRange v41 = (uint64_t *)(v92 + 16 * v38);
            uint64_t v42 = *v41;
            uint64_t v43 = v41[1];
            if (*v41 != v43) {
              break;
            }
            CFRange v40 = v39;
LABEL_25:
            ++v38;
            uint64_t v39 = v40;
            uint64_t v23 = v96;
            if (v38 == v94)
            {
              uint64_t v100 = v40;
              swift_bridgeObjectRelease();
              unint64_t v26 = v88;
              goto LABEL_76;
            }
          }
          CFRange v40 = v39;
          if (v43 < v42) {
            goto LABEL_96;
          }
          while (1)
          {
            if (v42 >= v43)
            {
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
            uint64_t v47 = v39[2];
            BOOL v48 = (v45 & 1) == 0;
            uint64_t v49 = v47 + v48;
            if (__OFADD__(v47, v48)) {
              goto LABEL_89;
            }
            char v50 = v45;
            if (v39[3] >= v49)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                if (v45) {
                  goto LABEL_30;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                if (v50) {
                  goto LABEL_30;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
              uint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
              if ((v50 & 1) != (v52 & 1)) {
                goto LABEL_99;
              }
              unint64_t v46 = v51;
              if (v50)
              {
LABEL_30:
                *(void *)(v39[7] + 8 * v46) = v35;
                goto LABEL_31;
              }
            }
            v39[(v46 >> 6) + 8] |= 1 << v46;
            uint64_t v53 = 8 * v46;
            *(void *)(v39[6] + v53) = v42;
            *(void *)(v39[7] + v53) = v35;
            uint64_t v54 = v39[2];
            BOOL v55 = __OFADD__(v54, 1);
            uint64_t v56 = v54 + 1;
            if (v55) {
              goto LABEL_92;
            }
            v39[2] = v56;
LABEL_31:
            ++v42;
            swift_bridgeObjectRelease();
            if (v43 == v42) {
              goto LABEL_25;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_76:
        uint64_t v27 = v97;
        uint64_t v28 = v98;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v27 = v24;
        uint64_t v28 = (uint64_t)v22;
      }
      outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v27, v28);
    }
    double v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    BOOL v25 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
LABEL_13:
    if (++v26 == v91) {
      goto LABEL_87;
    }
  }
  long long v90 = *(_OWORD *)(v29 + 8);
  uint64_t v57 = v30 & 1;
  if (!v22)
  {
    swift_bridgeObjectRetain_n();
LABEL_81:
    uint64_t v23 = MEMORY[0x263F8EE78];
    uint64_t v24 = v57;
    double v22 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_82;
  }
  swift_bridgeObjectRetain_n();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((v57 == 0) ^ v25))
  {
LABEL_82:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v82 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    }
    unint64_t v84 = v82[2];
    unint64_t v83 = v82[3];
    if (v84 >= v83 >> 1) {
      uint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v83 > 1), v84 + 1, 1, v82);
    }
    _OWORD v82[2] = v84 + 1;
    *(_OWORD *)&v82[2 * v84 + 4] = v90;
    uint64_t v85 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v85);
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
    swift_bridgeObjectRelease_n();
    uint64_t v97 = v24 & 1;
    uint64_t v98 = (uint64_t)v82;
    BOOL v25 = v24 != 0;
    double v22 = v82;
    uint64_t v24 = v97;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
  char v58 = specialized Text.Effect.StopMarkerCollection.Segment.init(_:)((uint64_t)v22);
  if (!v58)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v24, (uint64_t)v22);
    goto LABEL_81;
  }
  char v59 = v58;
  uint64_t v87 = v57;
  uint64_t v60 = v99;
  uint64_t v61 = v99[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61 + 1, 1, v99);
  }
  unint64_t v63 = v60[2];
  unint64_t v62 = v60[3];
  if (v63 >= v62 >> 1) {
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v60);
  }
  v60[2] = v63 + 1;
  v60[v63 + 4] = v59;
  swift_bridgeObjectRelease();
  v99 = v60;
  uint64_t v95 = *(void *)(v23 + 16);
  if (!v95)
  {
    swift_bridgeObjectRelease();
LABEL_80:
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v97, v98);
    uint64_t v57 = v87;
    goto LABEL_81;
  }
  unint64_t v89 = v26;
  unint64_t v64 = 0;
  uint64_t v93 = v23 + 32;
  uint64_t v65 = v100;
  while (1)
  {
    if (v64 >= *(void *)(v23 + 16)) {
      goto LABEL_95;
    }
    uint64_t v67 = (uint64_t *)(v93 + 16 * v64);
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    if (*v67 != v69) {
      break;
    }
    char v66 = v65;
LABEL_54:
    ++v64;
    uint64_t v65 = v66;
    uint64_t v23 = v96;
    if (v64 == v95)
    {
      uint64_t v100 = v66;
      swift_bridgeObjectRelease();
      unint64_t v26 = v89;
      goto LABEL_80;
    }
  }
  char v66 = v65;
  if (v69 < v68) {
    goto LABEL_98;
  }
  while (2)
  {
    if (v68 >= v69) {
      goto LABEL_90;
    }
    char v70 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v68);
    uint64_t v73 = v65[2];
    BOOL v74 = (v71 & 1) == 0;
    uint64_t v75 = v73 + v74;
    if (!__OFADD__(v73, v74))
    {
      char v76 = v71;
      if (v65[3] >= v75)
      {
        if (v70)
        {
          if ((v71 & 1) == 0) {
            goto LABEL_69;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v76 & 1) == 0) {
            goto LABEL_69;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v75, v70);
        uint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v68);
        if ((v76 & 1) != (v78 & 1)) {
          goto LABEL_99;
        }
        unint64_t v72 = v77;
        if ((v76 & 1) == 0)
        {
LABEL_69:
          v65[(v72 >> 6) + 8] |= 1 << v72;
          uint64_t v79 = 8 * v72;
          *(void *)(v65[6] + v79) = v68;
          *(void *)(v65[7] + v79) = v61;
          uint64_t v80 = v65[2];
          BOOL v55 = __OFADD__(v80, 1);
          uint64_t v81 = v80 + 1;
          if (v55) {
            goto LABEL_93;
          }
          v65[2] = v81;
          goto LABEL_60;
        }
      }
      *(void *)(v65[7] + 8 * v72) = v61;
LABEL_60:
      ++v68;
      swift_bridgeObjectRelease();
      if (v69 == v68) {
        goto LABEL_54;
      }
      continue;
    }
    break;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.StopSegment.init(segment:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 < 2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v135 = v3;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v135, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t)v135;
  uint64_t v5 = v135[2];
  if (v5)
  {
    swift_retain();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    do
    {
      float64x2_t v133 = *(float64x2_t *)(v4 + v6 + 32);
      float64x2_t v129 = *(float64x2_t *)(v4 + v6 + 64);
      float64x2_t v131 = *(float64x2_t *)(v4 + v6 + 48);
      float64x2_t v127 = *(float64x2_t *)(v4 + v6 + 80);
      double v10 = *(double *)(v4 + v6 + 96);
      char v11 = *(unsigned char *)(v4 + v6 + 104);
      double v13 = *(double *)(v4 + v6 + 112);
      double v12 = *(double *)(v4 + v6 + 120);
      if (!v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v15 = v8[2];
        unint64_t v14 = v8[3];
        if (v15 >= v14 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
        }
        v8[2] = v15 + 1;
        char v16 = (float64x2_t *)&v8[11 * v15];
        v16[2] = v133;
        v16[3] = v131;
        void v16[4] = v129;
        v16[5] = v127;
        v16[6].f64[0] = v10;
        LOBYTE(v16[6].f64[1]) = v11;
        v16[7].f64[0] = v13;
      }
      uint64_t v17 = v7 + 1;
      if (v7 + 1 < v1)
      {
        unint64_t v18 = (float64x2_t *)(v4 + v6);
        double v19 = (v13 + v12) * 0.5;
        double v20 = (*(double *)(v4 + v6 + 208) + *(double *)(v4 + v6 + 216)) * 0.5;
        if (v20 - v19 <= 0.0) {
          goto LABEL_66;
        }
        double v21 = v18[12].f64[0];
        float64x2_t v102 = v18[8];
        float64x2_t v104 = v18[9];
        float64x2_t v110 = v18[10];
        float64x2_t v116 = v18[11];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v23 = v8[2];
        unint64_t v22 = v8[3];
        if (v23 >= v22 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v8);
        }
        double v24 = (v19 + v20) * 0.5;
        double v25 = (v24 - v19) / (v20 - v19);
        v8[2] = v23 + 1;
        unint64_t v26 = (float64x2_t *)&v8[11 * v23];
        v26[2] = vaddq_f64(v133, vmulq_n_f64(vsubq_f64(v102, v133), v25));
        _OWORD v26[3] = vaddq_f64(v131, vmulq_n_f64(vsubq_f64(v104, v131), v25));
        v26[4] = vaddq_f64(v129, vmulq_n_f64(vsubq_f64(v110, v129), v25));
        v26[5] = vaddq_f64(v127, vmulq_n_f64(vsubq_f64(v116, v127), v25));
        v26[6].f64[0] = v10 + v25 * (v21 - v10);
        LOBYTE(v26[6].f64[1]) = v11;
        v26[7].f64[0] = v24;
      }
      if (v1 - 1 == v7)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v28 = v8[2];
        unint64_t v27 = v8[3];
        if (v28 >= v27 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v8);
        }
        v8[2] = v28 + 1;
        uint64_t v9 = (float64x2_t *)&v8[11 * v28];
        void v9[2] = v133;
        void v9[3] = v131;
        v9[4] = v129;
        v9[5] = v127;
        v9[6].f64[0] = v10;
        LOBYTE(v9[6].f64[1]) = v11;
        v9[7].f64[0] = v12;
      }
      v6 += 96;
      ++v7;
    }
    while (v5 != v17);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  swift_release();
  uint64_t v29 = v8[2];
  if (!v29) {
    return (uint64_t)v8;
  }
  swift_bridgeObjectRetain();
  int v30 = v8 + 10;
  uint64_t v31 = -v29;
  unint64_t v32 = (void *)MEMORY[0x263F8EE78];
  unint64_t v33 = -1;
  float64x2_t v98 = (float64x2_t)vdupq_n_s64(0x3FD554C985F06F69uLL);
  float64x2_t v97 = (float64x2_t)vdupq_n_s64(0x3FE5559B3D07C84BuLL);
  while (1)
  {
    float64x2_t v128 = *((float64x2_t *)v30 - 3);
    float64x2_t v130 = *((float64x2_t *)v30 - 2);
    float64x2_t v132 = *((float64x2_t *)v30 - 1);
    float64x2_t v134 = *(float64x2_t *)v30;
    double v37 = *((double *)v30 + 2);
    char v38 = *((unsigned char *)v30 + 24);
    unint64_t v39 = v33 + 2;
    double v40 = *((double *)v30 + 4);
    if (v33 == -1)
    {
      if (v39 >= v8[2]) {
        goto LABEL_64;
      }
      double v66 = *((double *)v30 + 13);
      double v67 = *((double *)v30 + 15);
      float64x2_t v107 = *(float64x2_t *)(v30 + 5);
      float64x2_t v113 = *(float64x2_t *)(v30 + 7);
      float64x2_t v119 = *(float64x2_t *)(v30 + 9);
      float64x2_t v124 = *(float64x2_t *)(v30 + 11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      }
      unint64_t v69 = v32[2];
      unint64_t v68 = v32[3];
      int64_t v70 = v68 >> 1;
      unint64_t v71 = v69 + 1;
      float64x2_t v72 = v134;
      float64x2_t v74 = v130;
      float64x2_t v73 = v132;
      float64x2_t v75 = v128;
      if (v68 >> 1 <= v69)
      {
        uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v32);
        float64x2_t v75 = v128;
        float64x2_t v74 = v130;
        float64x2_t v73 = v132;
        float64x2_t v72 = v134;
        unint64_t v32 = v92;
        unint64_t v68 = v92[3];
        int64_t v70 = v68 >> 1;
      }
      void v32[2] = v71;
      char v76 = (float64x2_t *)&v32[11 * v69];
      v76[2] = v75;
      void v76[3] = v74;
      v76[4] = v73;
      v76[5] = v72;
      v76[6].f64[0] = v37;
      LOBYTE(v76[6].f64[1]) = v38;
      v76[7].f64[0] = v40;
      int64_t v77 = v69 + 2;
      if (v70 < v77)
      {
        uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v77, 1, v32);
        float64x2_t v75 = v128;
        float64x2_t v74 = v130;
        float64x2_t v73 = v132;
        float64x2_t v72 = v134;
        unint64_t v32 = v93;
      }
      void v32[2] = v77;
      uint64_t v35 = (float64x2_t *)&v32[11 * v71];
      v35[2] = vaddq_f64(v75, vmulq_f64(vsubq_f64(v107, v75), v98));
      v35[3] = vaddq_f64(v74, vmulq_f64(vsubq_f64(v113, v74), v98));
      v35[4] = vaddq_f64(v73, vmulq_f64(vsubq_f64(v119, v73), v98));
      v35[5] = vaddq_f64(v72, vmulq_f64(vsubq_f64(v124, v72), v98));
      v35[6].f64[0] = v37 + (v66 - v37) * 0.3333;
      double v36 = v40 + (v67 - v40) * 0.3333;
LABEL_30:
      LOBYTE(v35[6].f64[1]) = v38;
      v35[7].f64[0] = v36;
      goto LABEL_31;
    }
    unint64_t v41 = v8[2];
    if (v31 + v33 != -2) {
      break;
    }
    if (v33 >= v41) {
      goto LABEL_65;
    }
    double v78 = *((double *)v30 - 9);
    char v79 = *((unsigned char *)v30 - 64);
    double v80 = *((double *)v30 - 7);
    float64x2_t v120 = *(float64x2_t *)(v30 - 15);
    float64x2_t v125 = *(float64x2_t *)(v30 - 17);
    float64x2_t v108 = *(float64x2_t *)(v30 - 11);
    float64x2_t v114 = *(float64x2_t *)(v30 - 13);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    }
    float64x2_t v81 = v134;
    float64x2_t v83 = v130;
    float64x2_t v82 = v132;
    float64x2_t v84 = v128;
    unint64_t v86 = v32[2];
    unint64_t v85 = v32[3];
    int64_t v87 = v85 >> 1;
    unint64_t v88 = v86 + 1;
    if (v85 >> 1 <= v86)
    {
      uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v85 > 1), v86 + 1, 1, v32);
      float64x2_t v84 = v128;
      float64x2_t v83 = v130;
      float64x2_t v82 = v132;
      float64x2_t v81 = v134;
      unint64_t v32 = v94;
      unint64_t v85 = v94[3];
      int64_t v87 = v85 >> 1;
    }
    void v32[2] = v88;
    unint64_t v89 = (float64x2_t *)&v32[11 * v86];
    v89[2] = vaddq_f64(v125, vmulq_f64(vsubq_f64(v84, v125), v97));
    v89[3] = vaddq_f64(v120, vmulq_f64(vsubq_f64(v83, v120), v97));
    v89[4] = vaddq_f64(v114, vmulq_f64(vsubq_f64(v82, v114), v97));
    v89[5] = vaddq_f64(v108, vmulq_f64(vsubq_f64(v81, v108), v97));
    v89[6].f64[0] = v78 + (v37 - v78) * 0.6667;
    LOBYTE(v89[6].f64[1]) = v79;
    v89[7].f64[0] = v80 + (v40 - v80) * 0.6667;
    if (v87 < (uint64_t)(v86 + 2))
    {
      uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v85 > 1), v86 + 2, 1, v32);
      float64x2_t v84 = v128;
      float64x2_t v83 = v130;
      float64x2_t v82 = v132;
      float64x2_t v81 = v134;
      unint64_t v32 = v95;
    }
    void v32[2] = v86 + 2;
    long long v90 = (float64x2_t *)&v32[11 * v88];
    v90[2] = v84;
    v90[3] = v83;
    v90[4] = v82;
    v90[5] = v81;
    v90[6].f64[0] = v37;
    LOBYTE(v90[6].f64[1]) = v38;
    v90[7].f64[0] = v40;
LABEL_31:
    v30 += 11;
    ++v33;
    if (v31 + v33 == -1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  if (v33 < v41)
  {
    if (v39 >= v41) {
      goto LABEL_63;
    }
    double v42 = *((double *)v30 - 7);
    double v43 = *((double *)v30 - 9);
    double v44 = *((double *)v30 + 13);
    double v45 = *((double *)v30 + 15);
    float64x2_t v99 = *(float64x2_t *)(v30 + 5);
    float64x2_t v100 = *(float64x2_t *)(v30 - 17);
    float64x2_t v101 = *(float64x2_t *)(v30 + 7);
    float64x2_t v103 = *(float64x2_t *)(v30 - 15);
    float64x2_t v105 = *(float64x2_t *)(v30 + 9);
    float64x2_t v111 = *(float64x2_t *)(v30 - 13);
    float64x2_t v117 = *(float64x2_t *)(v30 + 11);
    float64x2_t v122 = *(float64x2_t *)(v30 - 11);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    }
    unint64_t v47 = v32[2];
    unint64_t v46 = v32[3];
    int64_t v48 = v46 >> 1;
    unint64_t v49 = v47 + 1;
    if (v46 >> 1 <= v47)
    {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v32);
      unint64_t v46 = v32[3];
      int64_t v48 = v46 >> 1;
    }
    double v50 = 1.0 / (v45 - v42);
    double v51 = (v44 - v43) * v50;
    double v52 = (v40 - v42) * 0.3333;
    float64x2_t v53 = vmulq_n_f64(vsubq_f64(v99, v100), v50);
    float64x2_t v55 = v128;
    float64x2_t v54 = v130;
    float64x2_t v56 = vmulq_n_f64(vsubq_f64(v101, v103), v50);
    float64x2_t v57 = vmulq_n_f64(vsubq_f64(v105, v111), v50);
    float64x2_t v58 = v132;
    float64x2_t v59 = vmulq_n_f64(vsubq_f64(v117, v122), v50);
    void v32[2] = v49;
    uint64_t v60 = (float64x2_t *)&v32[11 * v47];
    v60[2] = vsubq_f64(v128, vmulq_n_f64(v53, v52));
    v60[3] = vsubq_f64(v130, vmulq_n_f64(v56, v52));
    float64x2_t v61 = v134;
    v60[4] = vsubq_f64(v132, vmulq_n_f64(v57, v52));
    v60[5] = vsubq_f64(v134, vmulq_n_f64(v59, v52));
    v60[6].f64[0] = v37 - v52 * v51;
    LOBYTE(v60[6].f64[1]) = v38;
    v60[7].f64[0] = v40 - v52;
    unint64_t v62 = v47 + 2;
    if (v48 < (uint64_t)(v47 + 2))
    {
      float64x2_t v121 = v56;
      float64x2_t v126 = v53;
      float64x2_t v109 = v59;
      float64x2_t v115 = v57;
      uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 2, 1, v32);
      float64x2_t v59 = v109;
      float64x2_t v57 = v115;
      float64x2_t v56 = v121;
      float64x2_t v53 = v126;
      float64x2_t v55 = v128;
      float64x2_t v54 = v130;
      float64x2_t v58 = v132;
      float64x2_t v61 = v134;
      unint64_t v32 = v91;
    }
    void v32[2] = v62;
    unint64_t v63 = (float64x2_t *)&v32[11 * v49];
    v63[2] = v55;
    v63[3] = v54;
    v63[4] = v58;
    v63[5] = v61;
    v63[6].f64[0] = v37;
    LOBYTE(v63[6].f64[1]) = v38;
    v63[7].f64[0] = v40;
    unint64_t v64 = v32[3];
    if ((uint64_t)(v47 + 3) > (uint64_t)(v64 >> 1))
    {
      float64x2_t v118 = v56;
      float64x2_t v123 = v53;
      float64x2_t v106 = v59;
      float64x2_t v112 = v57;
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v47 + 3, 1, v32);
      float64x2_t v59 = v106;
      float64x2_t v57 = v112;
      float64x2_t v56 = v118;
      float64x2_t v53 = v123;
      float64x2_t v55 = v128;
      float64x2_t v54 = v130;
      float64x2_t v58 = v132;
      float64x2_t v61 = v134;
      unint64_t v32 = v65;
    }
    double v34 = (v45 - v40) * 0.3333;
    void v32[2] = v47 + 3;
    uint64_t v35 = (float64x2_t *)&v32[11 * v62];
    v35[2] = vaddq_f64(v55, vmulq_n_f64(v53, v34));
    v35[3] = vaddq_f64(v54, vmulq_n_f64(v56, v34));
    v35[4] = vaddq_f64(v58, vmulq_n_f64(v57, v34));
    v35[5] = vaddq_f64(v61, vmulq_n_f64(v59, v34));
    v35[6].f64[0] = v37 + v34 * v51;
    double v36 = v40 + v34;
    goto LABEL_30;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void specialized Text.Effect.StopSegment.cubicWeightsAndStates(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, long double a4@<D0>)
{
  unint64_t v5 = 3 * a1;
  if ((unsigned __int128)(a1 * (__int128)3) >> 64 != (3 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v6 = *(void *)(a2 + 16);
  if (v5 >= v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v7 = v5 + 1;
  if (v5 + 1 >= v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v8 = v5 + 2;
  if (v5 + 2 >= v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v9 = v5 + 3;
  if (v5 + 3 < v6)
  {
    uint64_t v11 = a2 + 32 + 264 * a1;
    uint64_t v48 = *(void *)(v11 + 8);
    uint64_t v49 = *(void *)v11;
    uint64_t v46 = *(void *)(v11 + 24);
    uint64_t v47 = *(void *)(v11 + 16);
    uint64_t v44 = *(void *)(v11 + 40);
    uint64_t v45 = *(void *)(v11 + 32);
    uint64_t v42 = *(void *)(v11 + 56);
    uint64_t v43 = *(void *)(v11 + 48);
    uint64_t v41 = *(void *)(v11 + 64);
    char v12 = *(unsigned char *)(v11 + 72);
    uint64_t v13 = a2 + 32 + 88 * v7;
    uint64_t v39 = *(void *)(v13 + 8);
    uint64_t v40 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 24);
    uint64_t v15 = *(void *)(v13 + 32);
    uint64_t v37 = *(void *)(v13 + 40);
    uint64_t v38 = *(void *)(v13 + 16);
    uint64_t v35 = *(void *)(v13 + 56);
    uint64_t v36 = *(void *)(v13 + 48);
    char v16 = *(unsigned char *)(v13 + 72);
    uint64_t v17 = a2 + 32 + 88 * v8;
    char v18 = *(unsigned char *)(v17 + 72);
    uint64_t v33 = *(void *)(v17 + 64);
    uint64_t v34 = *(void *)(v13 + 64);
    long long v31 = *(_OWORD *)(v17 + 32);
    long long v32 = *(_OWORD *)(v17 + 48);
    long long v25 = *(_OWORD *)v17;
    long long v26 = *(_OWORD *)(v17 + 16);
    uint64_t v19 = a2 + 32 + 88 * v9;
    long long v29 = *(_OWORD *)(v19 + 16);
    long long v30 = *(_OWORD *)v19;
    long long v27 = *(_OWORD *)(v19 + 48);
    long long v28 = *(_OWORD *)(v19 + 32);
    uint64_t v20 = *(void *)(v19 + 64);
    long double v21 = 1.0 - a4;
    char v22 = *(unsigned char *)(v19 + 72);
    long double v23 = pow(1.0 - a4, 3.0);
    long double v24 = pow(a4, 3.0);
    *(long double *)a3 = v23;
    *(long double *)(a3 + 8) = v21 * v21 * 3.0 * a4;
    *(long double *)(a3 + 16) = a4 * a4 * (v21 * 3.0);
    *(long double *)(a3 + 24) = v24;
    *(void *)(a3 + 32) = v49;
    *(void *)(a3 + 40) = v48;
    *(void *)(a3 + 48) = v47;
    *(void *)(a3 + 56) = v46;
    *(void *)(a3 + 64) = v45;
    *(void *)(a3 + 72) = v44;
    *(void *)(a3 + 80) = v43;
    *(void *)(a3 + 88) = v42;
    *(void *)(a3 + 96) = v41;
    *(unsigned char *)(a3 + 104) = v12;
    *(void *)(a3 + 112) = v40;
    *(void *)(a3 + 120) = v39;
    *(void *)(a3 + 128) = v38;
    *(void *)(a3 + 136) = v14;
    *(void *)(a3 + 144) = v15;
    *(void *)(a3 + 152) = v37;
    *(void *)(a3 + 160) = v36;
    *(void *)(a3 + 168) = v35;
    *(void *)(a3 + 176) = v34;
    *(unsigned char *)(a3 + 184) = v16;
    *(_OWORD *)(a3 + 192) = v25;
    *(_OWORD *)(a3 + 208) = v26;
    *(_OWORD *)(a3 + 224) = v31;
    *(_OWORD *)(a3 + 240) = v32;
    *(void *)(a3 + 256) = v33;
    *(unsigned char *)(a3 + 264) = v18;
    *(_OWORD *)(a3 + 272) = v30;
    *(_OWORD *)(a3 + 288) = v29;
    *(_OWORD *)(a3 + 304) = v28;
    *(_OWORD *)(a3 + 320) = v27;
    *(void *)(a3 + 336) = v20;
    *(unsigned char *)(a3 + 344) = v22;
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t getEnumTagSinglePayload for Text.Effect.Stop(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Stop(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Stop()
{
  return &type metadata for Text.Effect.Stop;
}

ValueMetadata *type metadata accessor for Text.Effect.StopSegment()
{
  return &type metadata for Text.Effect.StopSegment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopCollector.Segment.Element()
{
  return &type metadata for Text.Effect.StopCollector.Segment.Element;
}

uint64_t outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t assignWithCopy for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Cluster #1 in static Text.Effect.stopMarkers(_:)()
{
  return &type metadata for Cluster #1 in static Text.Effect.stopMarkers(_:);
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollection.Segment()
{
  return &type metadata for Text.Effect.StopMarkerCollection.Segment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector.Segment.Element()
{
  return &type metadata for Text.Effect.StopMarkerCollector.Segment.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.StopIndex()
{
  return &type metadata for Text.Effect.StopIndex;
}

uint64_t destroy for Text.Effect.StopCollector(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.StopCollector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.StopMarkerCollector(uint64_t a1, long long *a2, uint64_t a3)
{
  return assignWithCopy for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
}

uint64_t assignWithCopy for Text.Effect.StopCollector(uint64_t a1, long long *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)(a1, a4);
      uint64_t v7 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(void *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v8;
  }
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>])()
{
  if (!lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]))
  {
    type metadata accessor for [Range<Int>]();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
    }
  }
}

void type metadata accessor for [Range<Int>]()
{
  if (!lazy cache variable for type metadata for [Range<Int>])
  {
    type metadata accessor for Range<Int>();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Range<Int>]);
    }
  }
}

uint64_t assignWithTake for Text.Effect.StopMarkerCollector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Text.Effect.StopCollector(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for (key: Text.Effect.StopKey, segment: Text.Effect.StopMarkerCollector.Segment, glyphRanges: [Range<Int>]));
}

uint64_t assignWithTake for Text.Effect.StopCollector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6)
  {
    outlined destroy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)(a1, a4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector()
{
  return &type metadata for Text.Effect.StopMarkerCollector;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollector.Segment()
{
  return &type metadata for Text.Effect.StopMarkerCollector.Segment;
}

ValueMetadata *type metadata accessor for Text.Effect.StopMarkerCollection()
{
  return &type metadata for Text.Effect.StopMarkerCollection;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.StopMarkerCollector.Segment>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment;
  if (!lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.StopMarkerCollector.Segment>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.StopMarkerCollector.Segment> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Set<Text.Effect.ClusterIndex>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Set<Text.Effect.ClusterIndex>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.StopMarkerCollector.Segment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.StopMarkerCollector.Segment> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Set<Text.Effect.ClusterIndex>(255, &lazy cache variable for type metadata for Slice<Text.Effect.StopMarkerCollector.Segment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.StopMarkerCollector.Segment and conformance Text.Effect.StopMarkerCollector.Segment, (uint64_t)&type metadata for Text.Effect.StopMarkerCollector.Segment, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t (*Spacer.minLength.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _TextBaselineRelativeSpacer.minLength.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_TextBaselineRelativeSpacer.minLength.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _TextBaselineRelativeSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t (*_HSpacer.minWidth.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _HSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t (*_VSpacer.minHeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _VSpacer@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static PrimitiveSpacer._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t _ViewInputs.requestedSpacerRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t SpacerLayoutComputer.dynamicOrientation.getter(uint64_t a1, int a2)
{
  if (*MEMORY[0x263F288F8] == a2) {
    return 3;
  }
  type metadata accessor for Axis?();
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t SpacerLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SpacerLayoutComputer.Engine();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v16 - v9;
  int v11 = *((unsigned __int8 *)v1 + 4);
  if (v11 == 2)
  {
    char v12 = SpacerLayoutComputer.dynamicOrientation.getter(*v1 | 0x200000000, v1[2]);
    if (v12 == 3) {
      LOBYTE(v11) = 2;
    }
    else {
      LOBYTE(v11) = v12;
    }
  }
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
  v10[*(int *)(v7 + 36)] = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  StatefulRule<>.update<A>(to:)((uint64_t)v10, a1, v7, WitnessTable, (uint64_t)&protocol witness table for SpacerLayoutComputer<A>.Engine);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t key path getter for _ViewInputs.requestedSpacerRepresentation : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.requestedSpacerRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedSpacerRepresentation : _ViewInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.requestedSpacerRepresentation.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t _GraphInputs.requestedSpacerRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_ViewInputs.requestedSpacerRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedSpacerRepresentation.modify;
}

void _ViewInputs.requestedSpacerRepresentation.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t key path getter for _GraphInputs.requestedSpacerRepresentation : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.requestedSpacerRepresentation.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_GraphInputs.requestedSpacerRepresentation.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedSpacerRepresentation.modify;
}

ValueMetadata *type metadata accessor for _TextBaselineRelativeSpacer()
{
  return &type metadata for _TextBaselineRelativeSpacer;
}

ValueMetadata *type metadata accessor for _HSpacer()
{
  return &type metadata for _HSpacer;
}

ValueMetadata *type metadata accessor for _VSpacer()
{
  return &type metadata for _VSpacer;
}

uint64_t dispatch thunk of static PlatformSpacerRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t getEnumTagSinglePayload for SpacerLayoutComputer.Engine(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      BOOL v16 = v15 >= 2;
      unsigned int v17 = v15 - 2;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SpacerLayoutComputer.Engine(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245C2563CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFD)
        {
          a1[v9] = a2 + 2;
        }
        else
        {
          char v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for SpacerLayoutComputer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 4) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 4);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 4) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpacerLayoutComputer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _GraphInputs.SpacerRepresentationKey()
{
  return &type metadata for _GraphInputs.SpacerRepresentationKey;
}

uint64_t base witness table accessor for _AttributeBody in SpacerLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Axis?()
{
  if (!lazy cache variable for type metadata for Axis?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Axis?);
    }
  }
}

uint64_t type metadata accessor for SpacerLayoutComputer.Platform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static UnifiedHitTestingFeature.isEnabled.getter()
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v0) {
      goto LABEL_7;
    }
LABEL_9:
    char v1 = 1;
    return v1 & 1;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v1 = specialized static GestureContainerFeature.isEnabled.getter();
  return v1 & 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance UnifiedHitTestingFeature()
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v0) {
      goto LABEL_7;
    }
LABEL_9:
    char v1 = 1;
    return v1 & 1;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v1 = specialized static GestureContainerFeature.isEnabled.getter();
  return v1 & 1;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance ImprovedButtonGestureFeature()
{
  swift_beginAccess();
  if (static CoreTesting.isRunning) {
    char v0 = 1;
  }
  else {
    char v0 = specialized static GestureContainerFeature.isEnabled.getter();
  }
  return v0 & 1;
}

uint64_t static GestureContainerFeature._isFeatureEnabled()()
{
  int v4 = &type metadata for GestureContainerFeature;
  unint64_t v5 = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if ((v0 & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v1 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v1;
  }
}

uint64_t static GestureContainerFeature.isEnabledOverride.getter()
{
  return static GestureContainerFeature.isEnabledOverride;
}

uint64_t static GestureContainerFeature.isEnabledOverride.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static GestureContainerFeature.isEnabledOverride = a1;
  return result;
}

uint64_t (*static GestureContainerFeature.isEnabledOverride.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

const char *GestureContainerFeature.domain.getter()
{
  return "SwiftUI";
}

const char *GestureContainerFeature.feature.getter()
{
  return "gestureContainer";
}

uint64_t static GestureRecognizerBasedEvents.isEnabledForTesting.getter()
{
  return static GestureRecognizerBasedEvents.isEnabledForTesting;
}

uint64_t static GestureRecognizerBasedEvents.isEnabledForTesting.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static GestureRecognizerBasedEvents.isEnabledForTesting = a1;
  return result;
}

uint64_t (*static GestureRecognizerBasedEvents.isEnabledForTesting.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static GestureRecognizerBasedEvents.isEnabled.getter()
{
  return 1;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in UnifiedHitTestingFeature()
{
  return &protocol witness table for UnifiedHitTestingFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in ImprovedButtonGestureFeature()
{
  return &protocol witness table for ImprovedButtonGestureFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in EndedGestureWaitsForActiveFeature()
{
  return &protocol witness table for EndedGestureWaitsForActiveFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in GestureContainerFeature()
{
  return &protocol witness table for GestureContainerFeature;
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in GestureRecognizerBasedEvents()
{
  return &protocol witness table for GestureRecognizerBasedEvents;
}

ValueMetadata *type metadata accessor for UnifiedHitTestingFeature()
{
  return &type metadata for UnifiedHitTestingFeature;
}

ValueMetadata *type metadata accessor for ImprovedButtonGestureFeature()
{
  return &type metadata for ImprovedButtonGestureFeature;
}

ValueMetadata *type metadata accessor for EndedGestureWaitsForActiveFeature()
{
  return &type metadata for EndedGestureWaitsForActiveFeature;
}

ValueMetadata *type metadata accessor for GestureRecognizerBasedEvents()
{
  return &type metadata for GestureRecognizerBasedEvents;
}

uint64_t static KeyframesBuilder.buildArray<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = _ViewInputs.base.modify(a1, a2);

  return swift_bridgeObjectRetain();
}

uint64_t static KeyframesBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  return KeyframeTrackContentBuilder.Conditional.init(first:)((uint64_t)v7, a2, a3);
}

uint64_t static KeyframesBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  return KeyframeTrackContentBuilder.Conditional.init(second:)((uint64_t)v7, a2, a3);
}

uint64_t static KeyframesBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MergedKeyframeTrackContent.init(first:second:));
}

{
  return static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))CombinedKeyframes.init(first:second:));
}

uint64_t static KeyframesBuilder.buildFinalResult<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  return KeyframeTrack.init<>(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:), a1);
}

uint64_t closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static KeyframeTrackContentBuilder.buildExpression<A>(_:)(v8);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)(v10, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a3);
}

uint64_t partial apply for closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)()
{
  return closure #1 in static KeyframesBuilder.buildFinalResult<A>(_:)(v0[5], v0[2], v0[3], v0[4]);
}

uint64_t static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  long double v24 = a8;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v21 + 16))(v20, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, a5);
  return v24(v20, v16, a3, a4, a5, a6, a7);
}

uint64_t CombinedKeyframes.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  uint64_t v8 = type metadata accessor for CombinedKeyframes();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t type metadata accessor for KeyframesBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245C2643C()
{
  type metadata accessor for EmptyKeyframeTrackContent();

  return swift_getWitnessTable();
}

uint64_t sub_245C26484()
{
  type metadata accessor for ArrayKeyframeTrackContent();

  return swift_getWitnessTable();
}

uint64_t sub_245C264D0(uint64_t a1)
{
  return get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for MergedKeyframeTrackContent);
}

uint64_t sub_245C264FC()
{
  type metadata accessor for EmptyKeyframes();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for EmptyKeyframes()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245C2655C(uint64_t a1)
{
  return get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for CombinedKeyframes);
}

uint64_t *initializeBufferWithCopyOfBuffer for CombinedKeyframes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t assignWithTake for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CombinedKeyframes(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for CombinedKeyframes(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C26C50);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          long double v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for EmptyKeyframes<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CombinedKeyframes<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for Keyframes._resolve(into:initialValue:initialVelocity:) in conformance EmptyKeyframes<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewInputs.base.modify(a1, *(void *)(a4 + 16));
}

uint64_t CombinedKeyframes._resolve(into:initialValue:initialVelocity:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a4[6] + 40))(a1, a2, a3, a4[4]);
}

uint64_t static AnyTransition.move(edge:)(char a1)
{
  type metadata accessor for TransitionBox<MoveTransition>();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  return result;
}

SwiftUI::MoveTransition __swiftcall MoveTransition.init(edge:)(SwiftUI::MoveTransition edge)
{
  v1->edge = edge.edge;
  return edge;
}

void type metadata accessor for TransitionBox<MoveTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<MoveTransition>)
  {
    lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<MoveTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition;
  if (!lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition);
  }
  return result;
}

CGSize __swiftcall Edge.offsetForCanvasSize(_:)(CGSize result)
{
  double width = result.width;
  double v3 = 0.0;
  switch(v1)
  {
    case 1:
      double v3 = -width;
      result.height = 0.0;
      break;
    case 2:
      break;
    case 3:
      result.height = 0.0;
      double v3 = width;
      break;
    default:
      result.height = -result.height;
      break;
  }
  result.double width = v3;
  return result;
}

uint64_t MoveTransition.edge.getter()
{
  return *v0;
}

uint64_t MoveTransition.edge.setter(uint64_t result)
{
  *char v1 = result;
  return result;
}

uint64_t (*MoveTransition.edge.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MoveTransition.MoveLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, unsigned __int8 a2@<W2>, uint64_t a3@<X8>)
{
  int v4 = a2;
  double v5 = 0.0;
  if (a2 == 4)
  {
LABEL_9:
    double v8 = 0.0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 48))
    {
      Inputuint64_t Value = (double *)AGGraphGetInputValue();
      double v7 = *InputValue;
      double v8 = InputValue[1];
    }
    else
    {
      double v7 = *(double *)(a1 + 16);
      double v8 = *(double *)(a1 + 24);
    }
    switch(v4)
    {
      case 1:
        double v5 = -v7;
        goto LABEL_9;
      case 2:
        break;
      case 3:
        double v5 = v7;
        goto LABEL_9;
      default:
        double v8 = -v8;
        break;
    }
  }
  PlacementContext.proposedSize.getter((uint64_t)&v14);
  uint64_t v9 = v14;
  char v10 = v15;
  uint64_t v11 = v16;
  char v12 = v17;
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v11;
  *(unsigned char *)(a3 + 24) = v12;
  double result = *(double *)&static UnitPoint.topLeading;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(double *)(a3 + 48) = v5;
  *(double *)(a3 + 56) = v8;
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance MoveTransition.MoveLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return MoveTransition.MoveLayout.placement(of:in:)(a1, *v2, a2);
}

void MoveTransition.body(content:phase:)(char a1@<W1>, char *a2@<X8>)
{
  if (a1 == 1) {
    char v3 = 4;
  }
  else {
    char v3 = *v2;
  }
  *a2 = v3;
}

uint64_t MoveTransition._makeContentTransition(transition:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    double v5 = *(double *)(a1 + 8);
    double v4 = *(double *)(a1 + 16);
    uint64_t v6 = *v1;
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2461B9DC0;
    double v8 = 0.0;
    uint64_t v9 = v7;
    switch(v6)
    {
      case 1:
        double v8 = -v5;
        double v4 = 0.0;
        break;
      case 2:
        break;
      case 3:
        double v4 = 0.0;
        double v8 = v5;
        break;
      default:
        double v4 = -v4;
        break;
    }
    float v10 = v8;
    float v11 = v4;
    *(_DWORD *)(v7 + 32) = 3;
    *(float *)(v7 + 36) = v10;
    *(unsigned char *)(v7 + 40) = 0;
    *(float *)(v7 + 44) = v11;
    *(unsigned char *)(v7 + 48) = 0;
    *(void *)(v7 + 52) = 0x3F80000000000000;
    *(void *)(v7 + 60) = 3;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void protocol witness for Transition.body(content:phase:) in conformance MoveTransition(char a1@<W1>, char *a2@<X8>)
{
  if (a1 == 1) {
    char v3 = 4;
  }
  else {
    char v3 = *v2;
  }
  *a2 = v3;
}

uint64_t associated type witness table accessor for Transition.Body : View in MoveTransition()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for MoveTransition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C272ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(255, &lazy cache variable for type metadata for PlaceholderContentView<MoveTransition>, (uint64_t)&type metadata for MoveTransition, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<MoveTransition>, MoveTransition.MoveLayout>);
    }
  }
}

uint64_t getEnumTagSinglePayload for MoveTransition.MoveLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  if (*a1 <= 4u) {
    int v6 = 4;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 5;
  if (*a1 < 4u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MoveTransition.MoveLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C27578);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MoveTransition.MoveLayout()
{
  return &type metadata for MoveTransition.MoveLayout;
}

unint64_t instantiation function for generic protocol witness table for MoveTransition.MoveLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t HitTestableEventType<>.hitTestLocation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
}

uint64_t HitTestableEventType<>.hitTestRadius.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a1, a3);
}

uint64_t HitTestableEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v9);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for HitTestableEventType);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v13, (uint64_t)v15);
    outlined init with copy of AnyTrackedValue((uint64_t)v15, (uint64_t)v13);
    HitTestableEvent.init(_:)(v13, (uint64_t)v9);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    uint64_t v5 = v9[0];
    long long v6 = v10;
    long long v7 = v11;
    uint64_t v8 = v12;
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = outlined destroy of HitTestableEventType?((uint64_t)v13);
    long long v7 = 0uLL;
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    long long v6 = xmmword_24619B550;
  }
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t outlined destroy of HitTestableEventType?(uint64_t a1)
{
  type metadata accessor for HitTestableEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for HitTestableEventType?()
{
  if (!lazy cache variable for type metadata for HitTestableEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for HitTestableEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?);
    }
  }
}

void HitTestableEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *HitTestableEvent.phase.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*HitTestableEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double HitTestableEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*HitTestableEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t HitTestableEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t HitTestableEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HitTestableEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.hitTestLocation.getter()
{
  return *(double *)(v0 + 24);
}

void HitTestableEvent.hitTestLocation.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*HitTestableEvent.hitTestLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double HitTestableEvent.hitTestRadius.getter()
{
  return *(double *)(v0 + 40);
}

void HitTestableEvent.hitTestRadius.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*HitTestableEvent.hitTestRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t HitTestableEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (**v8)(void *__return_ptr, void, void);
  char v9;
  uint64_t v10;
  uint64_t v11;
  double (*v12)(uint64_t, uint64_t);
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  uint64_t vars8;

  uint64_t v8 = *(void (***)(void *__return_ptr, void, void))(a3 + 8);
  v8[1](&v18, a2, v8);
  uint64_t v9 = v18;
  v8[2](&v18, a2, v8);
  long long v10 = v18;
  v8[3](&v18, a2, v8);
  long long v11 = v18;
  uint64_t v12 = *(double (**)(uint64_t, uint64_t))(a3 + 16);
  swift_retain();
  uint64_t v13 = v12(a2, a3);
  char v15 = v14;
  uint64_t v16 = (*(double (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(unsigned char *)a4 = v9;
  *(void *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = v11;
  *(double *)(a4 + 24) = v13;
  *(void *)(a4 + 32) = v15;
  *(double *)(a4 + 40) = v16;

  return swift_release();
}

uint64_t HitTestableEvent.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(&v23, v5);
  char v6 = v23;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(&v23, v8);
  uint64_t v9 = v23;
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v10 + 8) + 24))(&v23, v11);
  uint64_t v12 = v23;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  char v15 = *(double (**)(uint64_t, uint64_t))(v14 + 16);
  swift_retain();
  double v16 = v15(v13, v14);
  uint64_t v18 = v17;
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  double v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  *(unsigned char *)a2 = v6;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v12;
  *(double *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v18;
  *(double *)(a2 + 40) = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

double protocol witness for HitTestableEventType.hitTestLocation.getter in conformance HitTestableEvent()
{
  return *(double *)(v0 + 24);
}

double protocol witness for HitTestableEventType.hitTestRadius.getter in conformance HitTestableEvent()
{
  return *(double *)(v0 + 40);
}

double protocol witness for HitTestableEventType.hitTestLocation.getter in conformance PanEvent()
{
  return *(double *)(v0 + 16);
}

BOOL specialized static HitTestableEvent.== infix(_:_:)(double *a1, double *a2)
{
  BOOL result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return result;
  }
  uint64_t v4 = *((void *)a1 + 2);
  double v6 = a1[3];
  double v5 = a1[4];
  double v7 = a1[5];
  uint64_t v8 = *((void *)a2 + 2);
  double v10 = a2[3];
  double v9 = a2[4];
  if (!v4)
  {
    if (!v8)
    {
      if (v6 == v10 && v5 == v9) {
        return v7 == a2[5];
      }
      return 0;
    }
LABEL_14:
    swift_release();
    return 0;
  }
  if (!v8)
  {
    swift_retain();
    goto LABEL_14;
  }
  BOOL result = 0;
  if (v4 == v8 && v6 == v10 && v5 == v9) {
    return v7 == a2[5];
  }
  return result;
}

uint64_t dispatch thunk of HitTestableEventType.hitTestLocation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HitTestableEventType.hitTestRadius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t initializeWithCopy for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for HitTestableEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HitTestableEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HitTestableEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HitTestableEvent()
{
  return &type metadata for HitTestableEvent;
}

uint64_t one-time initialization function for moduleLookupCache()
{
  type metadata accessor for ThreadSpecific<[UnsafeRawPointer : String]>();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = MEMORY[0x263F8EE80];
  swift_beginAccess();
  pthread_key_create((pthread_key_t *)(v0 + 16), (void (__cdecl *)(void *))@objc closure #1 in ThreadSpecific.init(_:));
  uint64_t result = swift_endAccess();
  static Tracing.moduleLookupCache = (_UNKNOWN *)v0;
  return result;
}

uint64_t traceBody<A>(_:body:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v42 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v39 - v10;
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    return a1();
  }
  v39[1] = a3;
  v39[2] = a2;
  uint64_t v40 = a1;
  static OSSignpostID.exclusive.getter();
  LODWORD(v44) = static os_signpost_type_t.begin.getter();
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v13 = AGTypeID.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = MEMORY[0x263F8D310];
  *(void *)(inited + 56) = MEMORY[0x263F8D310];
  uint64_t v17 = (uint64_t)v11;
  unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(inited + 32) = v13;
  uint64_t v41 = inited + 32;
  *(void *)(inited + 64) = v18;
  *(void *)(inited + 40) = v15;
  uint64_t v19 = specialized static Tracing.libraryName(defining:)();
  *(void *)(inited + 96) = v16;
  *(void *)(inited + 104) = v18;
  *(void *)(inited + 72) = v19;
  *(void *)(inited + 80) = v20;
  uint64_t v45 = inited;
  if (one-time initialization token for _signpostLog != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v21 = v44 | 0x14110014u;
  uint64_t v23 = v42 + 16;
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v39[0] = v17;
  v22(v8, v17, v6);
  type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
  uint64_t v44 = v24;
  unint64_t v25 = 0;
  long long v26 = (void (**)(char *, uint64_t, uint64_t))(v23 + 8);
  long long v43 = xmmword_2461BE2B0;
  uint64_t v27 = v41;
  while (1)
  {
    uint64_t v28 = swift_initStackObject();
    uint64_t v17 = v28;
    *(_OWORD *)(v28 + 16) = v43;
    long long v29 = (_OWORD *)(v28 + 32);
    unint64_t v30 = *(void *)(v45 + 16);
    if (v25 == v30)
    {
      *(void *)(v28 + 64) = 0;
      long long v31 = 0uLL;
      *long long v29 = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
    }
    else
    {
      if (v25 >= v30)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      outlined init with copy of AnyTrackedValue(v27 + 40 * v25++, (uint64_t)v29);
      long long v31 = 0uLL;
    }
    long long v32 = (_OWORD *)(v17 + 72);
    if (v25 == v30)
    {
      uint64_t v33 = v17 + 112;
      *(void *)(v17 + 104) = 0;
      _OWORD *v32 = v31;
      *(_OWORD *)(v17 + 88) = v31;
LABEL_13:
      *(void *)(v17 + 112) = 0;
      *(_OWORD *)(v17 + 120) = v31;
      unint64_t v25 = v30;
      *(_OWORD *)(v17 + 136) = v31;
      goto LABEL_16;
    }
    if (v25 >= v30) {
      goto LABEL_23;
    }
    outlined init with copy of AnyTrackedValue(v27 + 40 * v25, (uint64_t)v32);
    uint64_t v33 = v17 + 112;
    if (v25 + 1 == v30)
    {
      long long v31 = 0uLL;
      goto LABEL_13;
    }
    if (v25 + 1 >= v30) {
      goto LABEL_24;
    }
    outlined init with copy of AnyTrackedValue(v27 + 40 * (v25 + 1), v17 + 112);
    v25 += 2;
LABEL_16:
    specialized withKDebugValues(_:_:closure:)(v21, v17, v21, (uint64_t)v8);
    outlined init with copy of CVarArg?(v33, (uint64_t)v46);
    swift_bridgeObjectRelease();
    if (!v46[3]) {
      break;
    }
    _ss7CVarArg_pSgWOhTm_1((uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
    if (one-time initialization token for continuation != -1) {
      swift_once();
    }
    uint64_t v34 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
    (*v26)(v8, v34, v6);
  }
  swift_bridgeObjectRelease();
  _ss7CVarArg_pSgWOhTm_1((uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  uint64_t v37 = v36(v8, v6);
  ((void (*)(uint64_t))v40)(v37);
  static os_signpost_type_t.end.getter();
  uint64_t v38 = (char *)v39[0];
  OSSignpostID.rawValue.getter();
  kdebug_trace();
  return v36(v38, v6);
}

uint64_t traceRuleBody<A>(_:body:)@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v38 - v10;
  int v12 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    LODWORD(v43) = v12;
    v38[1] = a3;
    void v38[2] = a2;
    uint64_t v39 = a1;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v14 = AGTypeID.description.getter();
    uint64_t v16 = v15;
    uint64_t v17 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v18 = (uint64_t)v11;
    unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v14;
    uint64_t v40 = inited + 32;
    *(void *)(inited + 64) = v19;
    *(void *)(inited + 40) = v16;
    uint64_t v20 = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v17;
    *(void *)(inited + 104) = v19;
    *(void *)(inited + 72) = v20;
    *(void *)(inited + 80) = v21;
    uint64_t v44 = inited;
    if (one-time initialization token for _signpostLog != -1) {
LABEL_25:
    }
      swift_once();
    uint64_t v22 = v43 | 0x14110014u;
    uint64_t v24 = v41 + 16;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v38[0] = v18;
    v23(v8, v18, v6);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v43 = v25;
    unint64_t v26 = 0;
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v24 + 8);
    long long v42 = xmmword_2461BE2B0;
    uint64_t v28 = v40;
    while (1)
    {
      uint64_t v29 = swift_initStackObject();
      uint64_t v30 = v29;
      *(_OWORD *)(v29 + 16) = v42;
      long long v31 = (_OWORD *)(v29 + 32);
      unint64_t v32 = *(void *)(v44 + 16);
      if (v26 == v32)
      {
        *(void *)(v29 + 64) = 0;
        long long v33 = 0uLL;
        *long long v31 = 0u;
        *(_OWORD *)(v29 + 48) = 0u;
      }
      else
      {
        if (v26 >= v32)
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        outlined init with copy of AnyTrackedValue(v28 + 40 * v26++, (uint64_t)v31);
        long long v33 = 0uLL;
      }
      uint64_t v34 = (_OWORD *)(v30 + 72);
      if (v26 == v32) {
        break;
      }
      if (v26 >= v32) {
        goto LABEL_23;
      }
      outlined init with copy of AnyTrackedValue(v28 + 40 * v26, (uint64_t)v34);
      uint64_t v18 = v30 + 112;
      if (v26 + 1 == v32)
      {
        long long v33 = 0uLL;
        goto LABEL_13;
      }
      if (v26 + 1 >= v32) {
        goto LABEL_24;
      }
      outlined init with copy of AnyTrackedValue(v28 + 40 * (v26 + 1), v30 + 112);
      v26 += 2;
LABEL_16:
      specialized withKDebugValues(_:_:closure:)(v22, v30, v22, (uint64_t)v8);
      outlined init with copy of CVarArg?(v18, (uint64_t)v45);
      swift_bridgeObjectRelease();
      if (!v45[3])
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v41 + 8);
        v36((char *)v38[0], v6);
        _ss7CVarArg_pSgWOhTm_1((uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        v36(v8, v6);
        a1 = v39;
        goto LABEL_21;
      }
      _ss7CVarArg_pSgWOhTm_1((uint64_t)v45, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
      uint64_t v35 = __swift_project_value_buffer(v6, (uint64_t)static OSSignpostID.continuation);
      (*v27)(v8, v35, v6);
    }
    uint64_t v18 = v30 + 112;
    *(void *)(v30 + 104) = 0;
    *uint64_t v34 = v33;
    *(_OWORD *)(v30 + 88) = v33;
LABEL_13:
    *(void *)(v30 + 112) = 0;
    *(_OWORD *)(v30 + 120) = v33;
    unint64_t v26 = v32;
    *(_OWORD *)(v30 + 136) = v33;
    goto LABEL_16;
  }
LABEL_21:
  a1();
  return $defer #1 <A>() in traceRuleBody<A>(_:body:)();
}

Swift::UInt __swiftcall AGGraphRef.graphIdentity()()
{
  return AGGraphGetCounter();
}

uint64_t ViewGraph.graphIdentity.getter()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    return AGGraphGetCounter();
  }
  __break(1u);
  return result;
}

uint64_t DynamicProperty.linkValueDescription.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  double v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v8((char *)v14 - v9, v1, a1, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for DescriptiveDynamicProperty);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v14, (uint64_t)v16);
    uint64_t v10 = v17;
    uint64_t v11 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v12 = DescriptiveDynamicProperty.linkValueDescription.getter(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    _ss7CVarArg_pSgWOhTm_1((uint64_t)v14, &lazy cache variable for type metadata for DescriptiveDynamicProperty?, &lazy cache variable for type metadata for DescriptiveDynamicProperty, (uint64_t)&protocol descriptor for DescriptiveDynamicProperty);
    ((void (*)(char *, uint64_t, uint64_t))v8)(v5, v1, a1);
    return String.init<A>(describing:)();
  }
  return v12;
}

uint64_t DescriptiveDynamicProperty.linkValueDescription.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(void *__return_ptr);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v9[2];
  uint64_t v10;
  void v11[4];
  void v12[3];
  uint64_t v13;
  uint64_t v14;

  uint64_t v4 = *(void (**)(void *__return_ptr))(a2 + 8);
  v4(v11);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for DescriptiveDynamicProperty);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v12);
    double v5 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    double v7 = DescriptiveDynamicProperty.linkValueDescription.getter(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    _ss7CVarArg_pSgWOhTm_1((uint64_t)v9, &lazy cache variable for type metadata for DescriptiveDynamicProperty?, &lazy cache variable for type metadata for DescriptiveDynamicProperty, (uint64_t)&protocol descriptor for DescriptiveDynamicProperty);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v4)(v12, a1, a2);
    return String.init<A>(describing:)();
  }
  return v7;
}

uint64_t State._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  double v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_1, v2, v3);
}

uint64_t Environment._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = *(void *)(a1 + 16);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return Environment.wrappedValue.getter(a1, (uint64_t)boxed_opaque_existential_1);
}

uint64_t Binding._linkValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  a2[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, v4);
}

const char *specialized static Tracing.libraryName(defining:)()
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0x206E776F6E6B6E55;
  uint64_t v1 = MEMORY[0x24C525770]();
  if (!v1) {
    return (const char *)v0;
  }
  uint64_t v2 = (const void *)v1;
  if (one-time initialization token for moduleLookupCache != -1) {
    swift_once();
  }
  uint64_t v3 = static Tracing.moduleLookupCache;
  swift_beginAccess();
  uint64_t v4 = pthread_getspecific(*((void *)v3 + 2));
  if (!v4)
  {
    uint64_t v4 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((void *)v3 + 2), v4);
    type metadata accessor for [UnsafeRawPointer : String]();
    v25.dli_saddr = v5;
    v25.dli_fname = (const char *)*((void *)v3 + 3);
    outlined init with take of Any(&v25, v4);
    swift_bridgeObjectRetain();
  }
  outlined init with copy of Any((uint64_t)v4, (uint64_t)&v25);
  type metadata accessor for [UnsafeRawPointer : String]();
  uint64_t v7 = v6;
  swift_dynamicCast();
  if (*(void *)(v23 + 16))
  {
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
    if (v9)
    {
      uint64_t v0 = *(void *)(*(void *)(v23 + 56) + 16 * v8);
      swift_bridgeObjectRetain();
LABEL_16:
      swift_bridgeObjectRelease();
      return (const char *)v0;
    }
  }
  swift_bridgeObjectRelease();
  memset(&v25, 0, sizeof(v25));
  if (!dladdr(v2, &v25)) {
    return (const char *)v0;
  }
  uint64_t result = v25.dli_fname;
  if (v25.dli_fname)
  {
    uint64_t v11 = String.init(cString:)();
    uint64_t v12 = (void *)MEMORY[0x24C522820](v11);
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v12, sel_lastPathComponent);

    uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    uint64_t v16 = static Tracing.moduleLookupCache;
    swift_beginAccess();
    pthread_key_t v17 = v16[2];
    swift_bridgeObjectRetain();
    uint64_t v18 = pthread_getspecific(v17);
    if (!v18)
    {
      uint64_t v18 = (_OWORD *)swift_slowAlloc();
      pthread_setspecific(v16[2], v18);
      uint64_t v24 = v7;
      *(void *)&long long v23 = v16[3];
      outlined init with take of Any(&v23, v18);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of Any((uint64_t)v18, (uint64_t)&v23);
    swift_dynamicCast();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v23 = v22;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v15, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
    uint64_t v20 = v23;
    swift_bridgeObjectRelease();
    uint64_t v21 = pthread_getspecific(v16[2]);
    if (!v21)
    {
      uint64_t v21 = (void *)swift_slowAlloc();
      pthread_setspecific(v16[2], v21);
      uint64_t v24 = v7;
      *(void *)&long long v23 = v16[3];
      outlined init with take of Any(&v23, v21);
      swift_bridgeObjectRetain();
    }
    *uint64_t v21 = v20;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Tracing()
{
  return &type metadata for Tracing;
}

uint64_t dispatch thunk of DescriptiveDynamicProperty._linkValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double CGSize.subscript.getter(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

BOOL CGSize.isNegative.getter(double a1, double a2)
{
  return a2 < 0.0 || a1 < 0.0;
}

double CGSize.flushingNegatives.getter(double result)
{
  if (result <= 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t CGSize.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

Swift::Bool __swiftcall CGSize.contains(point:)(CGPoint point)
{
  Swift::Bool v3 = point.x >= 0.0;
  if (point.y < 0.0) {
    Swift::Bool v3 = 0;
  }
  if (point.x >= v1) {
    Swift::Bool v3 = 0;
  }
  return point.y < v2 && v3;
}

BOOL CGSize.isNonEmpty.getter(double a1, double a2)
{
  return a2 > 0.0 && a1 > 0.0;
}

double CGSize.scaledBy(x:y:)(double a1, double a2, double a3)
{
  double result = a1 * a3;
  if (a3 == 0.0) {
    return 0.0;
  }
  return result;
}

double CGSize.scaled(by:)(double a1, double a2)
{
  double v2 = a1 * a2;
  if (a2 == 0.0) {
    return 0.0;
  }
  return v2;
}

CGSize __swiftcall CGSize.scaled(by:)(CGSize by)
{
  double v3 = by.width * v1;
  if (v1 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = by.height * v2;
  if (v2 == 0.0) {
    double v4 = 0.0;
  }
  result.height = v4;
  result.double width = v3;
  return result;
}

double CGSize.increasedBy(dWidth:dHeight:)(double a1, double a2, double a3)
{
  return a1 + a3;
}

BOOL CGSize.isFinite.getter(double a1, double a2)
{
  return (~*(void *)&a2 & 0x7FF0000000000000) != 0 && (~*(void *)&a1 & 0x7FF0000000000000) != 0;
}

uint64_t CGSize.isNaN.getter(double a1, double a2)
{
  BOOL v2 = (~*(void *)&a2 & 0x7FF0000000000000) == 0 && (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(void *)&a1 & 0x7FF0000000000000) == 0 && (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

BOOL CGSize.hasZero.getter(double a1, double a2)
{
  return a2 == 0.0 || a1 == 0.0;
}

double CGSize.flushingNaNs.getter(double result)
{
  if ((*(void *)&result & 0xFFFFFFFFFFFFFLL) != 0) {
    double v1 = 0.0;
  }
  else {
    double v1 = result;
  }
  if ((~*(void *)&result & 0x7FF0000000000000) == 0) {
    return v1;
  }
  return result;
}

BOOL CGSize.approximates(_:epsilon:)(double a1, double a2, double a3, double a4, double a5)
{
  BOOL v5 = vabdd_f64(a4, a1) < a3;
  return vabdd_f64(a5, a2) < a3 && v5;
}

double (*CGSize.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  double v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    double v3 = v2;
  }
  *(void *)a1 = *v3;
  return CGPoint.subscript.modify;
}

double CGSize.init(_:in:by:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return a2;
}

double HashableSize.width.getter()
{
  return *(double *)v0;
}

void HashableSize.width.setter(double a1)
{
  *double v1 = a1;
}

uint64_t (*HashableSize.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double HashableSize.height.getter()
{
  return *(double *)(v0 + 8);
}

void HashableSize.height.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*HashableSize.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void HashableSize.init(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double HashableSize.value.getter()
{
  return *(double *)v0;
}

void HashableSize.value.setter(double a1, double a2)
{
  *BOOL v2 = a1;
  v2[1] = a2;
}

__n128 (*HashableSize.value.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

BOOL static HashableSize.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void HashableSize.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int HashableSize.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HashableSize(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HashableSize()
{
  return Hasher._finalize()();
}

uint64_t (*CGSize.animatableData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

double *CGSize.encode(to:)(double *result, double a2, double a3)
{
  Swift::UInt64 v4 = result;
  if (a2 != 0.0)
  {
    double v5 = a2;
    double v6 = fabs(a2);
    if (v6 >= 65536.0) {
      Swift::UInt v7 = 9;
    }
    else {
      Swift::UInt v7 = 13;
    }
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      uint64_t v9 = *((void *)v4 + 1);
      CGSize result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((void *)v4 + 2) >= (uint64_t)result)
      {
        *((void *)v4 + 1) = result;
        *(double *)(*(void *)v4 + v9) = v5;
        goto LABEL_12;
      }
      CGSize result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *CGSize result = v5;
    }
    else
    {
      uint64_t v8 = *((void *)v4 + 1);
      CGSize result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v5 = v5;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      CGSize result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)CGSize result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    double v10 = fabs(a3);
    if (v10 >= 65536.0) {
      Swift::UInt v11 = 17;
    }
    else {
      Swift::UInt v11 = 21;
    }
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      uint64_t v12 = *((void *)v4 + 1);
      CGSize result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      CGSize result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)CGSize result = LODWORD(a3);
      return result;
    }
    uint64_t v13 = *((void *)v4 + 1);
    CGSize result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8)) {
      goto LABEL_29;
    }
    if (*((void *)v4 + 2) < (uint64_t)result)
    {
      CGSize result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *CGSize result = a3;
    }
    else
    {
      *((void *)v4 + 1) = result;
      *(double *)(*(void *)v4 + v13) = a3;
    }
  }
  return result;
}

double CGSize.init(from:)(void *a1)
{
  return specialized CGPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGSize(double *a1)
{
  return CGSize.encode(to:)(a1, *v1, v1[1]);
}

unint64_t lazy protocol witness table accessor for type HashableSize and conformance HashableSize()
{
  unint64_t result = lazy protocol witness table cache variable for type HashableSize and conformance HashableSize;
  if (!lazy protocol witness table cache variable for type HashableSize and conformance HashableSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HashableSize and conformance HashableSize);
  }
  return result;
}

double sub_245C2975C@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  Swift::UInt64 v3 = a1 + 1;
  if (!*a2) {
    Swift::UInt64 v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_245C29778(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_245C29794()
{
  return 0;
}

__n128 sub_245C297A4@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_245C297B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for HashableSize()
{
  return &type metadata for HashableSize;
}

void ResolvedColorProvider.colorDescription.getter(float a1, float a2, float a3, float a4)
{
  if (a1 == 0.0 && a2 == 0.0 && a3 == 0.0)
  {
    if (a4 != 0.0 && a4 != 1.0) {
LABEL_19:
    }
      Color.Resolved.description.getter(a1, a2, a3, a4);
  }
  else if (a1 != 1.0 || a2 != 1.0 || a3 != 1.0 || a4 != 1.0)
  {
    goto LABEL_19;
  }
}

Swift::Int ResolvedColorProvider.hashValue.getter(float a1, float a2, float a3, float a4)
{
  Hasher.init(_seed:)();
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = LODWORD(a1);
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v9 = LODWORD(a2);
  }
  else {
    Swift::UInt32 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v10 = LODWORD(a3);
  }
  else {
    Swift::UInt32 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v11 = LODWORD(a4);
  }
  else {
    Swift::UInt32 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

void protocol witness for ColorProvider.colorDescription.getter in conformance ResolvedColorProvider()
{
  ResolvedColorProvider.colorDescription.getter(*v0, v0[1], v0[2], v0[3]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvedColorProvider()
{
  return ResolvedColorProvider.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

void protocol witness for Hashable.hash(into:) in conformance ResolvedColorProvider()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = *v0;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v1;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = v2;
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v3;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvedColorProvider()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = v1;
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = v2;
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v3;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = v4;
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL static Color.RGBColorSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Color.RGBColorSpace.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Color.RGBColorSpace.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGColorSpaceRef one-time initialization function for p3ColorSpace()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F001E8]);
  if (result) {
    static Color.DisplayP3.p3ColorSpace = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

CGColorRef Color.DisplayP3.staticColor.getter(CGFloat a1, CGFloat a2, CGFloat a3, float a4)
{
  if (one-time initialization token for p3ColorSpace != -1) {
    swift_once();
  }
  v9[0] = a1;
  v9[1] = a2;
  void v9[2] = a3;
  void v9[3] = a4;
  CGColorRef result = CGColorCreate((CGColorSpaceRef)static Color.DisplayP3.p3ColorSpace, v9);
  if (!result) {
    __break(1u);
  }
  return result;
}

Swift::Int Color.DisplayP3.hashValue.getter(double a1, double a2, double a3, float a4)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((LODWORD(a4) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v11 = LODWORD(a4);
  }
  else {
    Swift::UInt32 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

float protocol witness for ColorProvider.resolve(in:) in conformance Color.DisplayP3()
{
  float v1 = *v0;
  float v2 = v0[1];
  float v3 = v0[2];
  return specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v1, v2, v3);
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.DisplayP3()
{
  return Color.DisplayP3.staticColor.getter(*(CGFloat *)v0, *(CGFloat *)(v0 + 8), *(CGFloat *)(v0 + 16), *(float *)(v0 + 24));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.DisplayP3()
{
  return Color.DisplayP3.hashValue.getter(*(double *)v0, *(double *)(v0 + 8), *(double *)(v0 + 16), *(float *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance Color.DisplayP3()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt64 v2 = *(void *)(v0 + 16);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 24);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)v0;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v3;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.DisplayP3()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = v4;
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t Color.init(hue:saturation:brightness:opacity:)(Swift::Double a1, Swift::Double a2, Swift::Double a3, double a4)
{
  Swift::tuple_red_Double_green_Double_blue_Double v7 = HSBToRGB(_:_:_:)(a1, a2, a3);
  char v6 = 0;
  return specialized Color.init(_:red:green:blue:opacity:)(&v6, v7.red, v7.green, v7.blue, a4);
}

Swift::tuple_red_Double_green_Double_blue_Double __swiftcall HSBToRGB(_:_:_:)(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  double v3 = a1 * 6.0;
  BOOL v4 = a1 == 1.0;
  double v5 = 0.0;
  if (!v4) {
    double v5 = v3;
  }
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x245C29EACLL);
  }
  uint64_t v6 = (uint64_t)v5;
  double v7 = v5 - (double)(uint64_t)v5;
  double v8 = (1.0 - a2) * a3;
  double v9 = (1.0 - v7 * a2) * a3;
  double v10 = (1.0 - (1.0 - v7) * a2) * a3;
  double v11 = a3;
  double v12 = v10;
  switch(v6)
  {
    case 0:
      goto LABEL_9;
    case 1:
      double v11 = v9;
      double v12 = a3;
      a3 = v8;
      break;
    case 2:
      double v11 = v8;
      double v12 = a3;
      a3 = v10;
      break;
    case 3:
      double v11 = v8;
      double v12 = v9;
      break;
    case 4:
      double v11 = v10;
      double v12 = v8;
      break;
    default:
      double v11 = a3;
      double v12 = v8;
      double v8 = v9;
LABEL_9:
      a3 = v8;
      break;
  }
  result.blue = a3;
  result.green = v12;
  result.red = v11;
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.RGBColorSpace and conformance Color.RGBColorSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace;
  if (!lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.RGBColorSpace and conformance Color.RGBColorSpace);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Color.RGBColorSpace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C29FE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedColorProvider()
{
  return &type metadata for ResolvedColorProvider;
}

ValueMetadata *type metadata accessor for Color.DisplayP3()
{
  return &type metadata for Color.DisplayP3;
}

unint64_t AccessibilityAnnouncementPriority.platformRawValue.getter()
{
  unint64_t v1 = 0xD00000000000001ELL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000001BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

BOOL static AccessibilityAnnouncementPriority.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AccessibilityAnnouncementPriority.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AccessibilityAnnouncementPriority.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilitySpeechAttributes.alwaysIncludesPunctuation.getter()
{
  return *v0;
}

uint64_t AccessibilitySpeechAttributes.alwaysIncludesPunctuation.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.alwaysIncludesPunctuation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.spellsOutCharacters.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AccessibilitySpeechAttributes.spellsOutCharacters.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.spellsOutCharacters.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.adjustedPitch.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AccessibilitySpeechAttributes.adjustedPitch.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.adjustedPitch.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AccessibilitySpeechAttributes.announcementsPriority.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *AccessibilitySpeechAttributes.announcementsPriority.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.announcementsPriority.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.phoneticRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilitySpeechAttributes.phoneticRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*AccessibilitySpeechAttributes.phoneticRepresentation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilitySpeechAttributes.init(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    char v8 = v7;
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v19);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v10 = v19;
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v11, (uint64_t)v22);
    char v10 = 3;
    swift_release_n();
    uint64_t v12 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v21);
    swift_release_n();
    uint64_t v13 = swift_retain_n();
    uint64_t v6 = specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)v20);
    char v8 = v14;
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>();
    BloomFilter.init(hashValue:)(v15);
    uint64_t v16 = swift_retain_n();
    uint64_t v17 = specialized find1<A>(_:key:filter:)(v16, v18);
    if (v17) {
      char v10 = *(unsigned char *)(v17 + 72);
    }
    uint64_t result = swift_release_n();
  }
  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(unsigned char *)(a2 + 17) = v10;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return result;
}

void __swiftcall AccessibilitySpeechAttributes.init(alwaysIncludesPunctuation:spellsOutCharacters:adjustedPitch:announcementsPriority:phoneticRepresentation:)(SwiftUI::AccessibilitySpeechAttributes *__return_ptr retstr, Swift::Bool_optional alwaysIncludesPunctuation, Swift::Bool_optional spellsOutCharacters, Swift::Double_optional adjustedPitch, SwiftUI::AccessibilityAnnouncementPriority_optional announcementsPriority, Swift::String_optional phoneticRepresentation)
{
  SwiftUI::AccessibilityAnnouncementPriority v7 = *(unsigned char *)phoneticRepresentation.value._countAndFlagsBits;
  retstr->alwaysIncludesPunctuation = alwaysIncludesPunctuation;
  retstr->spellsOutCharacters = spellsOutCharacters;
  retstr->adjustedPitch.value = *(Swift::Double *)&adjustedPitch.is_nil;
  retstr->adjustedPitch.is_nil = announcementsPriority.value & 1;
  retstr->announcementsPriority.value = v7;
  retstr->phoneticRepresentation.value._countAndFlagsBits = (uint64_t)phoneticRepresentation.value._object;
  retstr->phoneticRepresentation.value._object = v6;
}

uint64_t AccessibilitySpeechAttributes.applyTo(environment:)(uint64_t *a1)
{
  unsigned __int8 v3 = *(unsigned char *)(v1 + 1);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 17);
  uint64_t v7 = *a1;
  unsigned __int8 v8 = *(unsigned char *)v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v8);
  swift_release();
  uint64_t v9 = a1[1];
  if (v9)
  {
    uint64_t v10 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v10);
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v11 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3);
  swift_release();
  if (v9)
  {
    uint64_t v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v13 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v4, v5);
  swift_release();
  if (v9)
  {
    uint64_t v14 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v13, v14);
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v15 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v6);
  swift_release();
  if (v9)
  {
    uint64_t v16 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v15, v16);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void __swiftcall AccessibilitySpeechAttributes.combined(with:)(SwiftUI::AccessibilitySpeechAttributes *__return_ptr retstr, SwiftUI::AccessibilitySpeechAttributes *with)
{
  Swift::Bool value = with->spellsOutCharacters.value;
  Swift::Double v5 = with->adjustedPitch.value;
  Swift::Bool v18 = with->alwaysIncludesPunctuation.value;
  Swift::Bool is_nil = with->adjustedPitch.is_nil;
  SwiftUI::AccessibilityAnnouncementPriority v6 = with->announcementsPriority.value;
  int v7 = *v2;
  int v8 = v2[1];
  double v9 = *((double *)v2 + 1);
  int v10 = v2[16];
  int v11 = v2[17];
  if (*((void *)v2 + 4)) {
    uint64_t countAndFlagsBits = *((void *)v2 + 3);
  }
  else {
    uint64_t countAndFlagsBits = with->phoneticRepresentation.value._countAndFlagsBits;
  }
  uint64_t v13 = (void *)swift_bridgeObjectRetain();
  if (v11 == 3) {
    SwiftUI::AccessibilityAnnouncementPriority v14 = v6;
  }
  else {
    SwiftUI::AccessibilityAnnouncementPriority v14 = (char)v11;
  }
  if (v10) {
    Swift::Double v15 = v5;
  }
  else {
    Swift::Double v15 = v9;
  }
  if (v8 == 2) {
    Swift::Bool v16 = value;
  }
  else {
    Swift::Bool v16 = v8;
  }
  Swift::Bool v17 = v18;
  if (v7 != 2) {
    Swift::Bool v17 = v7;
  }
  retstr->alwaysIncludesPunctuation.Swift::Bool value = v17;
  retstr->spellsOutCharacters.Swift::Bool value = v16;
  retstr->adjustedPitch.Swift::Bool value = v15;
  retstr->adjustedPitch.Swift::Bool is_nil = v10 & is_nil;
  retstr->announcementsPriority.Swift::Bool value = v14;
  retstr->phoneticRepresentation.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->phoneticRepresentation.value._object = v13;
}

uint64_t Text.Style.resolveAccessibilitySpeechAttributes(into:environment:includeDefaultAttributes:)(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v3[27];
  uint64_t v6 = v3[28];
  unint64_t v8 = v3[29];
  uint64_t v9 = v3[31];
  if (v9 == 1 || BYTE1(v8) == 3)
  {
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v4, (char *)v27);
      swift_release_n();
      swift_release_n();
      LOBYTE(v14) = v27[0];
      if (v9 == 1) {
        goto LABEL_14;
      }
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>();
      BloomFilter.init(hashValue:)(v11);
      uint64_t v12 = swift_retain_n();
      uint64_t v13 = specialized find1<A>(_:key:filter:)(v12, v28[0]);
      if (v13) {
        LOBYTE(v14) = *(unsigned char *)(v13 + 72);
      }
      else {
        LOBYTE(v14) = 3;
      }
      swift_release_n();
      if (v9 == 1) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v14 = v8 >> 8;
  }
  if (v7 != 2)
  {
    char v15 = v7;
    goto LABEL_19;
  }
LABEL_14:
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    char v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v16 = swift_retain_n();
    char v15 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v35);
  }
  swift_release_n();
  if (v9 == 1)
  {
LABEL_20:
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      LOBYTE(v17) = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    }
    else
    {
      uint64_t v18 = swift_retain_n();
      LOBYTE(v17) = specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v34);
    }
    swift_release_n();
    swift_release_n();
    if (v9 == 1) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
LABEL_19:
  if (BYTE1(v7) == 2) {
    goto LABEL_20;
  }
  unint64_t v17 = v7 >> 8;
LABEL_25:
  if ((v8 & 1) == 0)
  {
    char v19 = 0;
    goto LABEL_31;
  }
LABEL_27:
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    char v21 = v20;
    swift_release_n();
  }
  else
  {
    uint64_t v22 = swift_retain_n();
    uint64_t v6 = specialized closure #1 in PropertyList.subscript.getter(v22, (uint64_t)v33);
    char v21 = v23;
  }
  swift_release_n();
  char v19 = v21 & 1;
LABEL_31:
  LOBYTE(v28[0]) = v15;
  BYTE1(v28[0]) = v17;
  v28[1] = v6;
  char v29 = v19;
  char v30 = v14;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  v27[0] = v4;
  v27[1] = v5;
  return specialized static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(a1, (char *)v28, v27, a3 & 1);
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>);
    }
  }
}

uint64_t specialized static AccessibilitySpeechAttributes.== infix(_:_:)(double *a1, double *a2)
{
  int v4 = *(unsigned __int8 *)a1;
  int v5 = *((unsigned __int8 *)a1 + 1);
  double v6 = a1[1];
  unsigned __int8 v7 = *((unsigned char *)a1 + 16);
  int v8 = *((unsigned __int8 *)a1 + 17);
  uint64_t v9 = *((void *)a1 + 3);
  uint64_t v10 = *((void *)a1 + 4);
  int v11 = *(unsigned __int8 *)a2;
  int v12 = *((unsigned __int8 *)a2 + 1);
  double v13 = a2[1];
  int v14 = *((unsigned __int8 *)a2 + 16);
  int v15 = *((unsigned __int8 *)a2 + 17);
  uint64_t v16 = *((void *)a2 + 3);
  uint64_t v17 = *((void *)a2 + 4);
  if (v4 == 2)
  {
    if (v11 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = (v4 & 1) == 0;
    if (v11 == 2 || ((v19 ^ v11) & 1) == 0) {
      return v18;
    }
  }
  if (v5 == 2)
  {
    if (v12 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v20 = (v5 & 1) == 0;
    if (v12 == 2 || ((v20 ^ v12) & 1) == 0) {
      return v18;
    }
  }
  if (v7)
  {
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v6 == v13) {
      char v21 = v14;
    }
    else {
      char v21 = 1;
    }
    if (v21) {
      return 0;
    }
  }
  if (v8 == 3)
  {
    if (v15 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v15 == 3 || v8 != v15) {
      return v18;
    }
  }
  if (v10)
  {
    if (!v17 || (v9 != v16 || v10 != v17) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority;
  if (!lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAnnouncementPriority and conformance AccessibilityAnnouncementPriority);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityAnnouncementPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C2ACE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAnnouncementPriority()
{
  return &type metadata for AccessibilityAnnouncementPriority;
}

uint64_t destroy for AccessibilitySpeechAttributes()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilitySpeechAttributes(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilitySpeechAttributes()
{
  return &type metadata for AccessibilitySpeechAttributes;
}

uint64_t static HVStack.resizeChildrenWithTrailingOverflow.getter()
{
  return 0;
}

uint64_t static HVStack._makeView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 20);
  int v20 = *a1;
  uint64_t v12 = v6;
  int v13 = v7;
  uint64_t v14 = v8;
  long long v10 = *(_OWORD *)(a2 + 5);
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = v10;
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v9;
  return (*(uint64_t (**)(int *, uint64_t *))(*(void *)(a6 + 8) + 88))(&v20, &v12);
}

uint64_t static HVStack.layoutProperties.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 56))();
  *(unsigned char *)a2 = result & 1;
  *(_WORD *)(a2 + 1) = 256;
  return result;
}

uint64_t HVStack.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v11 = (char *)&v33 - v10;
  int v12 = *a1;
  uint64_t v35 = *((void *)a1 + 1);
  int v37 = *((unsigned __int8 *)a1 + 16);
  int v38 = v12;
  int v36 = *((unsigned __int8 *)a1 + 17);
  int v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56);
  swift_bridgeObjectRetain();
  LOBYTE(v34) = v13(a2, a3) & 1;
  int v34 = v34;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  LOBYTE(AssociatedTypeWitness) = v17;
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  *(void *)&long long v39 = v15;
  *((void *)&v39 + 1) = v16;
  char v40 = AssociatedTypeWitness & 1;
  char v41 = v34;
  uint64_t v42 = 0;
  unint64_t v43 = 0xFFF0000000000000;
  char v44 = 0;
  unint64_t v45 = 0xFFF0000000000000;
  char v46 = 0;
  long long v47 = 0uLL;
  int v48 = v38;
  uint64_t v49 = v35;
  char v50 = v37;
  char v51 = v36;
  unsigned __int8 v52 = v18 & 1;
  uint64_t v53 = MEMORY[0x263F8EE78];
  StackLayout.makeChildren()();
  char v19 = v40;
  char v20 = v41;
  uint64_t v21 = v42;
  unint64_t v22 = v43;
  char v23 = v44;
  unint64_t v24 = v45;
  char v25 = v46;
  int v26 = v48;
  uint64_t v27 = v49;
  char v28 = v50;
  char v29 = v51;
  uint64_t result = v52;
  uint64_t v31 = v53;
  long long v32 = v47;
  *(_OWORD *)a4 = v39;
  *(unsigned char *)(a4 + 16) = v19;
  *(unsigned char *)(a4 + 17) = v20;
  *(void *)(a4 + 24) = v21;
  *(void *)(a4 + 32) = v22;
  *(unsigned char *)(a4 + 40) = v23;
  *(void *)(a4 + 48) = v24;
  *(unsigned char *)(a4 + 56) = v25;
  *(_OWORD *)(a4 + 64) = v32;
  *(_DWORD *)(a4 + 80) = v26;
  *(void *)(a4 + 88) = v27;
  *(unsigned char *)(a4 + 96) = v28;
  *(unsigned char *)(a4 + 97) = v29;
  *(unsigned char *)(a4 + 98) = result;
  *(void *)(a4 + 104) = v31;
  return result;
}

void *HVStack.updateCache(_:subviews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a2 + 8);
  char v13 = *(unsigned char *)(a2 + 16);
  char v14 = *(unsigned char *)(a2 + 17);
  int v22 = *(_DWORD *)a2;
  uint64_t v23 = v12;
  char v24 = v13;
  char v25 = v14;
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a4 + 56))(a3, a4, v9) & 1;
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  return StackLayout.update(children:majorAxis:minorAxisAlignment:uniformSpacing:)(&v22, v15, v17, v18, v19 & 1);
}

unint64_t HVStack.spacing(subviews:cache:)@<X0>(double a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(void **)(*(void *)&a1 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  unint64_t result = StackLayout.UnmanagedImplementation.spacing()(a1, &v7);
  char v6 = *(unsigned char *)(*(void *)&a1 + 97);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(*(void *)&a1 + 104) = v4;
  return result;
}

double HVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, __n128 *a6)
{
  int v11 = (void *)a6[6].n128_u64[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  }
  uint64_t v12 = v11[2];
  v14.n128_u8[0] = a2 & 1;
  closure #1 in StackLayout.sizeThatFits(_:)(a6, (uint64_t)(v11 + 4), v12, *(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, &v14);
  double result = v14.n128_f64[0];
  a6[6].n128_u64[1] = (unint64_t)v11;
  return result;
}

void HVStack.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  char v19 = *(void **)(a10 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  }
  StackLayout.UnmanagedImplementation.commitPlacements(in:proposedSize:)(a1, a2 & 1, a3, a4 & 1, a10, (uint64_t)(v19 + 4), v19[2], a5, a6, a7, a8);
  *(void *)(a10 + 104) = v19;
}

uint64_t dispatch thunk of HVStack.spacing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HVStack.alignment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static HVStack.majorAxis.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))() & 1;
}

uint64_t dispatch thunk of static HVStack.resizeChildrenWithTrailingOverflow.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t assignWithCopy for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v6) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _StackLayoutCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v4) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _StackLayoutCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _StackLayoutCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void _BlurEffect.radius.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_BlurEffect.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlurEffect.isOpaque.getter(char a1)
{
  return a1 & 1;
}

uint64_t _BlurEffect.isOpaque.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*_BlurEffect.isOpaque.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BlurEffect.init(radius:opaque:)(char a1)
{
  return a1 & 1;
}

void _BlurEffect.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*_BlurEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

uint64_t _BlurEffect.descriptionAttributes.getter(char a1)
{
  type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461BDD50;
  *(void *)(v2 + 32) = 0x737569646172;
  *(void *)(v2 + 40) = 0xE600000000000000;
  *(void *)(v2 + 48) = Double.description.getter();
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = 0x65757161704F7369;
  *(void *)(v2 + 72) = 0xE800000000000000;
  if (a1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0xE000000000000000;
  return v2;
}

double _BlurEffect.effectValue(size:)@<D0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D2>)
{
  uint64_t v6 = swift_allocObject();
  *(double *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a1 & 1;
  double result = 0.0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(void *)(v6 + 125) = 0;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 9;
  return result;
}

uint64_t sub_245C2BA50()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t static _BlurEffect.== infix(_:_:)(int a1, int a2, double a3, double a4)
{
  return (a3 == a4) & (a1 ^ a2 ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _BlurEffect(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _BlurEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  double result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(void *)(v5 + 125) = 0;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.blur(radius:opaque:)(char a1, uint64_t a2, double a3)
{
  double v4 = a3;
  char v5 = a1;
  return View.modifier<A>(_:)(&v4, a2, &type metadata for _BlurEffect);
}

unint64_t instantiation function for generic protocol witness table for _BlurEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

double sub_245C2BBD0@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245C2BBDC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _BlurEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _BlurEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_245C2BC80()
{
  return swift_getWitnessTable();
}

SwiftUI::AccessibilityTextContentType::RawValue_optional __swiftcall AccessibilityTextContentType.RawValue.init(rawValue:)(Swift::UInt rawValue)
{
  char v2 = 8;
  if (rawValue < 8) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AccessibilityTextContentType::RawValue_optional)rawValue;
}

uint64_t AccessibilityTextContentType.RawValue.rawValue.getter()
{
  return *v0;
}

SwiftUI::AccessibilityTextContentType::RawValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTextContentType.RawValue(Swift::UInt *a1)
{
  return AccessibilityTextContentType.RawValue.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTextContentType.RawValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTextContentType.RawValue()
{
  return RawRepresentable<>.encode(to:)();
}

void AccessibilityTextContentType.rawValue.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AccessibilityTextContentType.rawValue.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*AccessibilityTextContentType.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityTextContentType __swiftcall AccessibilityTextContentType.init(_:)(SwiftUI::AccessibilityTextContentType result)
{
  *uint64_t v1 = *(unsigned char *)result.rawValue;
  return result;
}

void static AccessibilityTextContentType.plain.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AccessibilityTextContentType.console.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTextContentType.fileSystem.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityTextContentType.messaging.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static AccessibilityTextContentType.narrative.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTextContentType.sourceCode.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static AccessibilityTextContentType.spreadsheet.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static AccessibilityTextContentType.wordProcessing.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

unsigned char *static AccessibilityTextContentType.unwrap(codingProxy:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

SwiftUI::AccessibilityTextContentType_optional __swiftcall AccessibilityTextContentType.init(protobufValue:)(Swift::UInt protobufValue)
{
  char v2 = 8;
  if (protobufValue < 8) {
    char v2 = protobufValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AccessibilityTextContentType_optional)protobufValue;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTextContentType.RawValue and conformance AccessibilityTextContentType.RawValue);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTextContentType()
{
  return &type metadata for AccessibilityTextContentType;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityTextContentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C2C064);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTextContentType.RawValue()
{
  return &type metadata for AccessibilityTextContentType.RawValue;
}

uint64_t static GeometryEffect._affectsLayout.getter()
{
  return 1;
}

uint64_t static GeometryEffect._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *((_DWORD *)a2 + 16);
  uint64_t v8 = a2[9];
  char v9 = *((unsigned char *)a2 + 80);
  int v20 = *a1;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a2 + 3);
  uint64_t v15 = v6;
  long long v16 = *((_OWORD *)a2 + 3);
  int v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9;
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v20, (uint64_t)&v11, a3);
}

uint64_t static GeometryEffect._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:));
}

uint64_t static GeometryEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, long long *)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  unsigned int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)(&v19, (uint64_t)&v11, a3, a4, a5);
}

uint64_t static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)@<X0>(double *a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v9 = *a2;
  uint64_t v10 = v25;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v25, a3, a4);
  if (v9 == 1)
  {
    v28[0] = -1.0;
    memset(&v28[1], 0, 24);
    long long v29 = xmmword_2461BCA80;
    double v30 = a6;
    long long v31 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)(v25, v26);
    uint64_t v10 = v27;
    ProjectionTransform.concatenating(_:)(v28, v27);
    double v11 = v27[1];
    double v12 = v27[2];
    double v13 = v27[3];
    double v14 = v27[4];
    double v16 = v27[5];
    double v15 = v27[6];
    double v17 = v27[7];
    double v18 = v27[8];
  }
  else
  {
    double v11 = v25[1];
    double v12 = v25[2];
    double v13 = v25[3];
    double v14 = v25[4];
    double v16 = v25[5];
    double v15 = v25[6];
    double v17 = v25[7];
    double v18 = v25[8];
  }
  double v19 = *v10;
  v27[9] = *v10;
  v27[10] = v11;
  v27[11] = v12;
  v27[12] = v13;
  v27[13] = v14;
  v27[14] = v16;
  v27[15] = v15;
  v27[16] = v17;
  double v24 = v17;
  v27[17] = v18;
  if (ProjectionTransform.isInvertible.getter())
  {
    if (v12 != 0.0 || v16 != 0.0 || v18 != 1.0)
    {
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = v19;
      *(double *)(result + 24) = v11;
      *(double *)(result + 32) = v12;
      *(double *)(result + 40) = v13;
      *(double *)(result + 48) = v14;
      *(double *)(result + 56) = v16;
      *(double *)(result + 64) = v15;
      *(double *)(result + 72) = v24;
      *(double *)(result + 80) = v18;
      char v23 = 8;
      *(unsigned char *)(result + 88) = 1;
      goto LABEL_17;
    }
    if (v19 != 1.0 || v11 != 0.0 || v13 != 0.0 || v14 != 1.0)
    {
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = v19;
      *(double *)(result + 24) = v11;
      *(double *)(result + 32) = v13;
      *(double *)(result + 40) = v14;
      *(double *)(result + 48) = v15;
      *(double *)(result + 56) = v24;
      *(void *)(result + 72) = 0;
      *(void *)(result + 80) = 0;
      *(void *)(result + 64) = 0;
      char v23 = 8;
      *(unsigned char *)(result + 88) = 0;
      goto LABEL_17;
    }
    uint64_t result = 0;
    double v21 = v24 + a1[1];
    *a1 = v15 + *a1;
    a1[1] = v21;
  }
  else
  {
    _StringGuts.grow(_:)(28);
    v22._object = (void *)0x800000024621DC20;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    uint64_t result = 0;
  }
  char v23 = 19;
LABEL_17:
  *(void *)a5 = result;
  *(_DWORD *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 12) = v23;
  return result;
}

__n128 ProjectionTransform.flipRTL(width:)(double a1)
{
  long long v10 = xmmword_2461BCA80;
  double v11 = a1;
  long long v12 = xmmword_2461C55F0;
  long long v2 = *v1;
  v13[1] = v1[1];
  long long v3 = v1[3];
  long long v13[2] = v1[2];
  v9[0] = -1.0;
  memset(&v9[1], 0, 24);
  v13[3] = v3;
  uint64_t v14 = *((void *)v1 + 8);
  v13[0] = v2;
  ProjectionTransform.concatenating(_:)((double *)v13, v6);
  ProjectionTransform.concatenating(_:)(v9, (double *)v7);
  long long v4 = v7[3];
  v1[2] = v7[2];
  v1[3] = v4;
  *((void *)v1 + 8) = v8;
  __n128 result = (__n128)v7[1];
  *uint64_t v1 = v7[0];
  v1[1] = (__int128)result;
  return result;
}

uint64_t protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance DefaultGeometryEffectProvider<A>@<X0>(double *a1@<X1>, unsigned __int8 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4, a5);
}

uint64_t static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, long long *)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v8 = *a1;
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v19 = *(_OWORD *)(a2 + 32);
  long long v20 = v9;
  long long v21 = *(_OWORD *)(a2 + 64);
  int v22 = *(_DWORD *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v17 = *(_OWORD *)a2;
  long long v18 = v10;
  LODWORD(v14[0]) = v8;
  type metadata accessor for _GraphValue();
  type metadata accessor for _GraphValue<_RotationEffect>(0, &lazy cache variable for type metadata for _GraphValue<_RotationEffect>, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(void, uint64_t))type metadata accessor for _GraphValue);
  if (swift_dynamicCast()) {
    return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v16, (uint64_t)&v17, a3, a5);
  }
  LODWORD(v14[0]) = v8;
  type metadata accessor for _GraphValue<_RotationEffect>(0, &lazy cache variable for type metadata for _GraphValue<_Rotation3DEffect>, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(void, uint64_t))type metadata accessor for _GraphValue);
  if (swift_dynamicCast()) {
    return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v16, (uint64_t)&v17, a3, a5);
  }
  uint64_t v12 = type metadata accessor for DefaultGeometryEffectProvider();
  unsigned int v16 = v8;
  long long v14[2] = v19;
  v14[3] = v20;
  v14[4] = v21;
  int v15 = v22;
  v14[0] = v17;
  v14[1] = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  return static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)((int *)&v16, v14, (uint64_t (*)(void))a3, a4, v12, WitnessTable, a5);
}

uint64_t static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  long long v9 = a2[3];
  long long v157 = a2[2];
  long long v158 = v9;
  *(_OWORD *)v159 = a2[4];
  *(_DWORD *)&v159[16] = *((_DWORD *)a2 + 20);
  long long v10 = a2[1];
  long long v155 = *a2;
  long long v156 = v10;
  long long v161 = v10;
  long long v162 = v157;
  long long v160 = v155;
  if ((BYTE4(v157) & 0x20) == 0)
  {
    long long v11 = a2[3];
    long long v152 = a2[2];
    long long v153 = v11;
    *(_OWORD *)v154 = a2[4];
    *(_DWORD *)&v154[16] = *((_DWORD *)a2 + 20);
    long long v12 = a2[1];
    long long v150 = *a2;
    long long v151 = v12;
    return a3();
  }
  uint64_t v129 = a4;
  *(void *)&long long v130 = a3;
  int v117 = DWORD1(v157);
  float64x2_t v118 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v142) = v8;
  long long v17 = a2[1];
  long long v150 = *a2;
  long long v151 = v17;
  long long v152 = a2[2];
  uint64_t v115 = a5;
  uint64_t v116 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v124 = AssociatedTypeWitness;
  unsigned int v132 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v142, (uint64_t *)&v150, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = v161;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v160);
  unsigned int v131 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v160);
  swift_release();
  LODWORD(v128) = DWORD2(v155);
  uint64_t v135 = v156;
  uint64_t v136 = v155;
  uint64_t v20 = *((void *)&v156 + 1);
  LODWORD(v127) = DWORD1(v157);
  LODWORD(v125) = v157;
  uint64_t v133 = v158;
  uint64_t v134 = *((void *)&v157 + 1);
  LODWORD(v126) = DWORD2(v158);
  uint64_t v21 = *(void *)&v159[12];
  swift_beginAccess();
  int v22 = DWORD2(v155);
  uint64_t v137 = v156;
  uint64_t v138 = v155;
  unsigned int v23 = DWORD2(v156);
  uint64_t v24 = v157;
  uint64_t v121 = v158;
  uint64_t v122 = *((void *)&v157 + 1);
  uint64_t v26 = *((void *)&v158 + 1);
  *(void *)&long long v25 = *(void *)v159;
  *(void *)&long long v27 = *(void *)&v159[8];
  long long v119 = v27;
  long long v120 = v25;
  int v28 = *(_DWORD *)&v159[16];
  long long v152 = v157;
  long long v153 = v158;
  *(_OWORD *)v154 = *(_OWORD *)v159;
  *(_DWORD *)&v154[16] = *(_DWORD *)&v159[16];
  long long v150 = v155;
  long long v151 = v156;
  outlined retain of _ViewInputs((uint64_t)&v155);
  outlined retain of _ViewInputs((uint64_t)&v155);
  unsigned int v29 = _ViewInputs.geometryTransaction()();
  uint64_t v30 = swift_getKeyPath();
  uint64_t v139 = v19 + 16;
  int v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(v30);
  swift_release();
  if ((*(unsigned char *)(v19 + 81) & 1) != 0
    || v120 != *(_DWORD *)(v19 + 32)
    || __PAIR64__(v31, v119) != *(void *)(v19 + 36)
    || v22 != *(_DWORD *)(v19 + 44)
    || v29 != *(_DWORD *)(v19 + 48)
    || v23 != *(_DWORD *)(v19 + 52))
  {
    *(void *)&long long v150 = v138;
    DWORD2(v150) = v22;
    *(void *)&long long v151 = v137;
    *((void *)&v151 + 1) = __PAIR64__(v29, v23);
    *(void *)&long long v152 = v24;
    *((void *)&v152 + 1) = v122;
    *(void *)&long long v153 = v121;
    *((void *)&v153 + 1) = v26;
    *(void *)v154 = v120;
    *(void *)&v154[8] = v119;
    *(_DWORD *)&v154[16] = v28;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v31, (uint64_t)&v142);
    uint64_t OffsetAttribute2 = v147;
    int v33 = v148;
    unint64_t v34 = v144 | ((unint64_t)v145 << 32);
    unint64_t v35 = v146 | ((unint64_t)v147 << 32);
    long long v36 = v143;
    *(_OWORD *)(v19 + 32) = v142;
    *(_OWORD *)(v19 + 48) = v36;
    *(void *)(v19 + 64) = v34;
    *(void *)(v19 + 72) = v35;
    *(_WORD *)(v19 + 80) = v33;
    if (v33 != 1) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 76) = OffsetAttribute2;
    *(unsigned char *)(v19 + 80) = 0;
    goto LABEL_13;
  }
  if (*(unsigned char *)(v19 + 80)) {
    goto LABEL_12;
  }
  uint64_t OffsetAttribute2 = *(unsigned int *)(v19 + 76);
LABEL_13:
  uint64_t v122 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v37 = DWORD2(v155);
  uint64_t v137 = v156;
  uint64_t v138 = v155;
  unsigned int v38 = DWORD2(v156);
  uint64_t v39 = v157;
  uint64_t v40 = v158;
  uint64_t v121 = *((void *)&v157 + 1);
  uint64_t v42 = *((void *)&v158 + 1);
  *(void *)&long long v41 = *(void *)v159;
  *(void *)&long long v43 = *(void *)&v159[8];
  long long v119 = v43;
  long long v120 = v41;
  int v44 = *(_DWORD *)&v159[16];
  long long v152 = v157;
  long long v153 = v158;
  *(_OWORD *)v154 = *(_OWORD *)v159;
  *(_DWORD *)&v154[16] = *(_DWORD *)&v159[16];
  long long v150 = v155;
  long long v151 = v156;
  outlined retain of _ViewInputs((uint64_t)&v155);
  unsigned int v45 = _ViewInputs.geometryTransaction()();
  uint64_t v46 = swift_getKeyPath();
  int v47 = specialized CachedEnvironment.attribute<A>(keyPath:)(v46);
  swift_release();
  if ((*(unsigned char *)(v19 + 81) & 1) == 0
    && v120 == *(_DWORD *)(v19 + 32)
    && __PAIR64__(v47, v119) == *(void *)(v19 + 36)
    && v37 == *(_DWORD *)(v19 + 44)
    && v45 == *(_DWORD *)(v19 + 48)
    && v38 == *(_DWORD *)(v19 + 52))
  {
    uint64_t v48 = v133;
    if ((*(unsigned char *)(v19 + 64) & 1) == 0)
    {
      LODWORD(v49) = *(_DWORD *)(v19 + 60);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  *(void *)&long long v150 = v138;
  DWORD2(v150) = v37;
  *(void *)&long long v151 = v137;
  *((void *)&v151 + 1) = __PAIR64__(v45, v38);
  *(void *)&long long v152 = v39;
  *((void *)&v152 + 1) = v121;
  *(void *)&long long v153 = v40;
  *((void *)&v153 + 1) = v42;
  *(void *)v154 = v120;
  *(void *)&v154[8] = v119;
  *(_DWORD *)&v154[16] = v44;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v47, (uint64_t)&v142);
  long long v50 = v143;
  uint64_t v51 = v144;
  unsigned __int8 v52 = v148;
  unint64_t v53 = v144 | ((unint64_t)v145 << 32);
  unint64_t v54 = v146 | ((unint64_t)v147 << 32);
  *(_OWORD *)(v19 + 32) = v142;
  *(_OWORD *)(v19 + 48) = v50;
  *(void *)(v19 + 64) = v53;
  *(void *)(v19 + 72) = v54;
  *(_WORD *)(v19 + 80) = v52;
  uint64_t v48 = v133;
  if (v51 == 1)
  {
LABEL_22:
    LODWORD(v49) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v49;
    *(unsigned char *)(v19 + 64) = 0;
    goto LABEL_24;
  }
  uint64_t v49 = HIDWORD(*((void *)&v50 + 1));
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v55 = swift_endAccess();
  *(void *)&long long v150 = __PAIR64__(v122, v132);
  *((void *)&v150 + 1) = __PAIR64__(HIDWORD(v158), v49);
  LODWORD(v151) = v131;
  MEMORY[0x270FA5388](v55);
  uint64_t v113 = type metadata accessor for GeometryEffectTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _GraphValue<_RotationEffect>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>, (uint64_t)&type metadata for ViewTransform, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v150, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v112, v113, MEMORY[0x263F8E628], v56, MEMORY[0x263F8E658], v57);
  uint64_t v138 = 0;
  unsigned int v58 = v142;
  int v59 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  unsigned int v60 = *(_DWORD *)v159;
  unsigned int v61 = *(_DWORD *)&v159[8];
  uint64_t v62 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v160);
  int v63 = specialized CachedEnvironment.attribute<A>(keyPath:)(v62);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v160);
  swift_release();
  *(void *)&long long v150 = __PAIR64__(v61, v60);
  DWORD2(v150) = v63;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  int v64 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v150 = v136;
  DWORD2(v150) = v128;
  *(void *)&long long v151 = v135;
  *((void *)&v151 + 1) = v20;
  LODWORD(v152) = v125 | 0x1C;
  DWORD1(v152) = v127;
  *((void *)&v152 + 1) = v134;
  *(void *)&long long v153 = v48;
  *((void *)&v153 + 1) = __PAIR64__(v58, v126);
  *(_DWORD *)v154 = v59;
  *(_DWORD *)&v154[4] = v59;
  *(_DWORD *)&v154[8] = v64;
  *(void *)&v154[12] = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v65 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, long long *))v130)(&v140, v65, &v150);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v66 = *(void *)(v158 + 16);
  if (!v66)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    float64x2_t v110 = v118;
    *float64x2_t v118 = v140;
    v110[1] = v141;
    return result;
  }
  double v67 = (ValueMetadata **)(v158 + 32);
  while (*v67 != &type metadata for DisplayList.Key)
  {
    v67 += 2;
    if (!--v66) {
      goto LABEL_57;
    }
  }
  Swift::UInt32 v68 = ++lastIdentity;
  unint64_t v69 = (_DWORD *)MEMORY[0x263F288F8];
  if ((v117 & 0x100) == 0)
  {
LABEL_30:
    LODWORD(v137) = v68;
    swift_beginAccess();
    int v70 = DWORD2(v155);
    uint64_t v128 = v156;
    uint64_t v129 = v155;
    unsigned int v71 = DWORD2(v156);
    *(void *)&long long v127 = *((void *)&v157 + 1);
    uint64_t v72 = v157;
    uint64_t v74 = *((void *)&v158 + 1);
    *(void *)&long long v126 = v158;
    *(void *)&long long v73 = *(void *)v159;
    long long v130 = v73;
    *(void *)&long long v73 = *(void *)&v159[8];
    long long v125 = v73;
    int v75 = *(_DWORD *)&v159[16];
    long long v152 = v157;
    long long v153 = v158;
    *(_OWORD *)v154 = *(_OWORD *)v159;
    *(_DWORD *)&v154[16] = *(_DWORD *)&v159[16];
    long long v150 = v155;
    long long v151 = v156;
    outlined retain of _ViewInputs((uint64_t)&v155);
    unsigned int v76 = _ViewInputs.geometryTransaction()();
    uint64_t v77 = swift_getKeyPath();
    int v78 = specialized CachedEnvironment.attribute<A>(keyPath:)(v77);
    swift_release();
    if ((*(unsigned char *)(v19 + 81) & 1) == 0
      && v130 == *(_DWORD *)(v19 + 32)
      && __PAIR64__(v78, v125) == *(void *)(v19 + 36)
      && v70 == *(_DWORD *)(v19 + 44)
      && v76 == *(_DWORD *)(v19 + 48)
      && v71 == *(_DWORD *)(v19 + 52))
    {
      if ((*(unsigned char *)(v19 + 64) & 1) == 0)
      {
        *(void *)&long long v130 = *(unsigned int *)(v19 + 60);
        goto LABEL_40;
      }
    }
    else
    {
      *(void *)&long long v150 = v129;
      DWORD2(v150) = v70;
      *(void *)&long long v151 = v128;
      *((void *)&v151 + 1) = __PAIR64__(v76, v71);
      *(void *)&long long v152 = v72;
      *((void *)&v152 + 1) = v127;
      *(void *)&long long v153 = v126;
      *((void *)&v153 + 1) = v74;
      *(void *)v154 = v130;
      *(void *)&v154[8] = v125;
      *(_DWORD *)&v154[16] = v75;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v78, (uint64_t)&v142);
      long long v79 = v143;
      uint64_t v80 = v144;
      unsigned __int8 v81 = v148;
      unint64_t v82 = v144 | ((unint64_t)v145 << 32);
      unint64_t v83 = v146 | ((unint64_t)v147 << 32);
      *(_OWORD *)(v19 + 32) = v142;
      *(_OWORD *)(v19 + 48) = v79;
      *(void *)(v19 + 64) = v82;
      *(void *)(v19 + 72) = v83;
      *(_WORD *)(v19 + 80) = v81;
      if (v80 != 1)
      {
        *(void *)&long long v130 = HIDWORD(*((void *)&v79 + 1));
LABEL_40:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v84 = DWORD2(v155);
        uint64_t v128 = v156;
        uint64_t v129 = v155;
        unsigned int v85 = DWORD2(v156);
        long long v86 = v157;
        long long v88 = v158;
        *(void *)&long long v87 = *(void *)v159;
        *(void *)&long long v89 = *(void *)&v159[8];
        long long v126 = v89;
        long long v127 = v87;
        int v90 = *(_DWORD *)&v159[16];
        long long v152 = v157;
        long long v153 = v158;
        *(_OWORD *)v154 = *(_OWORD *)v159;
        *(_DWORD *)&v154[16] = *(_DWORD *)&v159[16];
        long long v150 = v155;
        long long v151 = v156;
        outlined retain of _ViewInputs((uint64_t)&v155);
        unsigned int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v19 + 81) & 1) == 0
          && v127 == *(_DWORD *)(v19 + 32)
          && __PAIR64__(v93, v126) == *(void *)(v19 + 36)
          && v84 == *(_DWORD *)(v19 + 44)
          && v91 == *(_DWORD *)(v19 + 48)
          && v85 == *(_DWORD *)(v19 + 52))
        {
          unsigned int v99 = v130;
          if ((*(unsigned char *)(v19 + 80) & 1) == 0)
          {
            unsigned int v94 = *(_DWORD *)(v19 + 76);
            goto LABEL_50;
          }
        }
        else
        {
          *(void *)&long long v150 = v129;
          DWORD2(v150) = v84;
          *(void *)&long long v151 = v128;
          *((void *)&v151 + 1) = __PAIR64__(v91, v85);
          long long v152 = v86;
          long long v153 = v88;
          *(void *)v154 = v127;
          *(void *)&v154[8] = v126;
          *(_DWORD *)&v154[16] = v90;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v150, v93, (uint64_t)&v142);
          unsigned int v94 = v147;
          int v95 = v148;
          unint64_t v96 = v144 | ((unint64_t)v145 << 32);
          unint64_t v97 = v146 | ((unint64_t)v147 << 32);
          long long v98 = v143;
          *(_OWORD *)(v19 + 32) = v142;
          *(_OWORD *)(v19 + 48) = v98;
          *(void *)(v19 + 64) = v96;
          *(void *)(v19 + 72) = v97;
          *(_WORD *)(v19 + 80) = v95;
          unsigned int v99 = v130;
          if (v95 != 1) {
            goto LABEL_50;
          }
        }
        unsigned int v94 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v19 + 76) = v94;
        *(unsigned char *)(v19 + 80) = 0;
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(void *)&long long v150 = v140;
        DWORD2(v150) = v141;
        unint64_t v100 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
        if ((v100 & 0x100000000) != 0) {
          int v101 = *MEMORY[0x263F288F8];
        }
        else {
          int v101 = v100;
        }
        uint64_t v102 = v160;
        *(void *)&long long v142 = v160;
        outlined retain of _GraphInputs((uint64_t)&v160);
        outlined retain of _ViewInputs((uint64_t)&v155);
        outlined retain of ViewTransform((uint64_t)&v142);
        uint64_t v103 = specialized find<A>(_:key:)(v102);
        if (v103) {
          char v104 = *(unsigned char *)(v103 + 72);
        }
        else {
          char v104 = 0;
        }
        unsigned int v105 = *(_DWORD *)&v159[4];
        outlined release of ViewTransform((uint64_t)&v142);
        outlined release of _GraphInputs((uint64_t)&v160);
        uint64_t v106 = outlined release of _ViewInputs((uint64_t)&v155);
        *(void *)&long long v150 = __PAIR64__(v132, v137);
        *((void *)&v150 + 1) = __PAIR64__(v94, v99);
        *(void *)&long long v151 = __PAIR64__(v105, v131);
        DWORD2(v151) = v101;
        BYTE12(v151) = v104;
        MEMORY[0x270FA5388](v106);
        uint64_t v107 = type metadata accessor for GeometryEffectDisplayList();
        uint64_t v113 = v107;
        uint64_t WitnessTable = swift_getWitnessTable();
        type metadata accessor for _GraphValue<_RotationEffect>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v150, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v112, v107, MEMORY[0x263F8E628], v108, MEMORY[0x263F8E658], v109);
        LOBYTE(v150) = 0;
        PreferencesOutputs.subscript.setter(v149, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
        goto LABEL_57;
      }
    }
    *(void *)&long long v130 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v19 + 60) = v130;
    *(unsigned char *)(v19 + 64) = 0;
    goto LABEL_40;
  }
  outlined retain of _ViewInputs((uint64_t)&v155);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v155);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v69)
  {
    LODWORD(v142) = v68;
    float64x2_t v111 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v142);
    v111(&v150, 0);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t RoundedSize.init(position:size:pixelLength:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t GeometryEffectDisplayList.effect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t GeometryEffectDisplayList.content.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x263F288F8])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a1 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  return result;
}

uint64_t GeometryEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (**v61)(void *__return_ptr, void, void, void, double, double);
  void (*v62)(void *__return_ptr, void, void);
  uint64_t v63;
  id v64;
  char v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  void (*v69)(long long *__return_ptr, uint64_t);
  int v70;
  char v71;
  int v72;
  __int16 v73;
  __int16 v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(void *__return_ptr, void, void);
  uint64_t AssociatedTypeWitness;
  uint64_t v83;
  void (**v84)(void *__return_ptr, void, void, void, double, double);
  unsigned int v85;
  unsigned int v86;
  long long v87;
  long long v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  unsigned int v95;
  __int16 v96;
  float64x2_t v97;
  long long v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int16 v103;
  unsigned __int8 v104;
  unsigned int v105;
  float64x2_t v106;

  uint64_t v4 = *(void *)(a1 + 16);
  int v84 = *(void (***)(void *__return_ptr, void, void, void, double, double))(a1 + 24);
  unint64_t v83 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v6 = (char *)&v76 - v5;
  unsigned int v7 = v2[1];
  unsigned int v9 = v2[2];
  unsigned int v8 = v2[3];
  unsigned int v11 = v2[4];
  unsigned int v10 = v2[5];
  unsigned int v12 = v2[6];
  unsigned int v13 = *((unsigned __int8 *)v2 + 28);
  long long v86 = *v2;
  *(void *)&v97.f64[0] = __PAIR64__(v7, v86);
  *(void *)&v97.f64[1] = __PAIR64__(v8, v9);
  LODWORD(v81) = v8;
  *(void *)&long long v98 = __PAIR64__(v10, v11);
  DWORD2(v98) = v12;
  unsigned int v85 = v13;
  BYTE12(v98) = v13;
  GeometryEffectDisplayList.content.getter((uint64_t)&v87);
  uint64_t v14 = v87;
  uint64_t v15 = MEMORY[0x263F8EE78];
  if ((void)v87) {
    uint64_t v16 = v87;
  }
  else {
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  if (!*(void *)(v16 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v15;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  long long v79 = (uint64_t *)a2;
  uint64_t v77 = WORD4(v87) | (BYTE10(v87) << 16);
  int v78 = v16;
  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  uint64_t v106 = vsubq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  *(void *)&v97.f64[0] = __PAIR64__(v7, v86);
  *(void *)&v97.f64[1] = __PAIR64__(v81, v9);
  *(void *)&long long v98 = __PAIR64__(v10, v11);
  DWORD2(v98) = v12;
  char v18 = v85;
  BYTE12(v98) = v85;
  GeometryEffectDisplayList.effect.getter((uint64_t)v6);
  type metadata accessor for CGSize(0);
  uint64_t v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  LOBYTE(v87) = *(unsigned char *)AGGraphGetValue();
  ((void (**)(float64x2_t *__return_ptr, char *, float64x2_t *, long long *, double, double))v84)[3](&v97, v6, &v106, &v87, v20, v21);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v6, AssociatedTypeWitness);
  uint64_t v22 = *(void *)&v97.f64[0];
  uint64_t v23 = LODWORD(v97.f64[1]);
  uint64_t v24 = BYTE4(v97.f64[1]);
  if (v14) {
    int v25 = v77;
  }
  else {
    int v25 = 0;
  }
  float64x2_t v26 = v106;
  long long v27 = (long long *)AGGraphGetValue();
  unint64_t v97 = v26;
  long long v28 = *v27;
  ++static DisplayList.Version.lastValue;
  long long v98 = v28;
  unsigned int v99 = static DisplayList.Version.lastValue;
  unint64_t v100 = v22;
  int v101 = v23 | (v24 << 32) | 0x4000000000000000;
  uint64_t v29 = v23;
  uint64_t v102 = v78;
  char v104 = BYTE2(v25);
  uint64_t v103 = v25;
  unsigned int v105 = v86;
  LOBYTE(v87) = v18;
  uint64_t v30 = v22;
  outlined copy of DisplayList.Effect(v22, v23, v24);
  DisplayList.Item.canonicalize(options:)((char *)&v87);
  float64_t v32 = v97.f64[1];
  float64_t v31 = v97.f64[0];
  long long v33 = v98;
  uint64_t v34 = v99;
  unint64_t v35 = v100;
  unint64_t v36 = v101;
  uint64_t v37 = v102;
  unsigned int v38 = v103 | (v104 << 16);
  long long v86 = v105;
  unint64_t v39 = v101 >> 62;
  if (v101 >> 62 != 3 || (v38 & 0xFFFFFF) != 0 || v101 != 0xC000000000000000 || v102 | v100)
  {
    type metadata accessor for _GraphValue<_RotationEffect>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461B9DC0;
    *(float64_t *)(v43 + 32) = v31;
    *(float64_t *)(v43 + 40) = v32;
    *(_OWORD *)(v43 + 48) = v33;
    *(void *)(v43 + 64) = v34;
    *(void *)(v43 + 72) = v35;
    *(void *)(v43 + 80) = v36;
    *(void *)(v43 + 88) = v37;
    *(unsigned char *)(v43 + 98) = BYTE2(v38);
    *(_WORD *)(v43 + 96) = v38;
    *(_DWORD *)(v43 + 100) = v86;
    uint64_t v42 = v43;
    switch((int)v39)
    {
      case 1:
        unsigned int v85 = HIWORD(v38);
        LODWORD(v84) = (unsigned __int16)v38;
        uint64_t v46 = outlined copy of DisplayList.Item.Value(v35, v36);
        switch(BYTE4(v36))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 2);
            LODWORD(v47) = (v35 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v35 + 16, (uint64_t)&v87);
            unsigned __int8 v81 = (void (*)(void *__return_ptr, void, void))*((void *)&v88 + 1);
            uint64_t v47 = v89;
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            unint64_t v83 = v34;
            uint64_t AssociatedTypeWitness = v29;
            uint64_t v80 = *(void *)(v47 + 56);
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            ((void (*)(__int16 *__return_ptr, void, uint64_t))v80)(&v96, v81, v47);
            uint64_t v34 = v83;
            LOBYTE(v29) = AssociatedTypeWitness;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 3);
            LOWORD(v47) = v96;
            break;
          case 7:
            LOWORD(v47) = *(_WORD *)(v35 + 24);
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 10);
            LOWORD(v47) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 12);
            LOWORD(v47) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            uint64_t v66 = v35;
            double v67 = v36;
            LOBYTE(v68) = 14;
            goto LABEL_49;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 15);
            LOWORD(v47) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 16);
            LOWORD(v47) = 32;
            break;
          case 0x11:
            unint64_t v69 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v35 + 112);
            unint64_t v83 = v34;
            v69(&v87, v46);
            LODWORD(AssociatedTypeWitness) = (unsigned __int16)v87;
            int v70 = (unsigned __int16)word_26FA429C8;
            unsigned int v71 = v29;
            uint64_t v72 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v35, v36, 17);
            if ((v72 & ~v70) != 0) {
              long long v73 = v72;
            }
            else {
              long long v73 = 0;
            }
            LOBYTE(v29) = v71;
            uint64_t v74 = AssociatedTypeWitness | v70;
            uint64_t v34 = v83;
            LOWORD(v47) = v74 | v73;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            swift_bridgeObjectRelease();
            uint64_t v66 = v35;
            double v67 = v36;
            Swift::UInt32 v68 = HIDWORD(v36);
LABEL_49:
            outlined consume of DisplayList.Effect(v66, v67, v68);
            LOWORD(v47) = 0;
            break;
        }
        __int16 v41 = v47 | (unsigned __int16)v84;
        goto LABEL_57;
      case 2:
        uint64_t v48 = *(void *)(v35 + 16);
        unsigned int v85 = HIWORD(v38);
        if (!v48)
        {
          __int16 v41 = 128;
          goto LABEL_40;
        }
        if (v48 == 1)
        {
          uint64_t v49 = 0;
          __int16 v41 = 128;
        }
        else
        {
          __int16 v51 = 0;
          uint64_t v49 = v48 & 0x7FFFFFFFFFFFFFFELL;
          unsigned __int8 v52 = (__int16 *)(v35 + 104);
          __int16 v53 = 128;
          uint64_t v54 = v48 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            __int16 v55 = *(v52 - 20);
            __int16 v56 = *v52;
            v52 += 40;
            v53 |= v55;
            v51 |= v56;
            v54 -= 2;
          }
          while (v54);
          __int16 v41 = v51 | v53;
          if (v48 == v49)
          {
LABEL_40:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
LABEL_57:
            char v50 = v85;
LABEL_58:
            *(float64_t *)&long long v87 = v31;
            *((float64_t *)&v87 + 1) = v32;
            long long v88 = v33;
            long long v89 = v34;
            int v90 = v35;
            unsigned int v91 = v36;
            uint64_t v92 = v37;
            unsigned int v94 = v50;
            int v93 = v38;
            int v95 = v86;
            DisplayList.Item.properties.getter(&v96);
            outlined consume of DisplayList.Item.Value(v35, v36);
            outlined consume of DisplayList.Effect(v30, v29, v24);
            char v40 = v96;
            goto LABEL_59;
          }
        }
        uint64_t v57 = v48 - v49;
        unsigned int v58 = (__int16 *)(v35 + 40 * v49 + 64);
        do
        {
          __int16 v59 = *v58;
          v58 += 20;
          v41 |= v59;
          --v57;
        }
        while (v57);
        goto LABEL_40;
      case 3:
        outlined copy of DisplayList.Item.Value(v35, v36);
        char v50 = BYTE2(v38);
        __int16 v41 = 0;
        goto LABEL_58;
      default:
        unsigned int v85 = HIWORD(v38);
        switch(v35 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v35 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v87);
            int v84 = (void (**)(void *__return_ptr, void, void, void, double, double))*((void *)&v88 + 1);
            uint64_t v44 = v89;
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            unint64_t v83 = v34;
            uint64_t AssociatedTypeWitness = v29;
            unsigned __int8 v81 = *(void (**)(void *__return_ptr, void, void))(v44 + 40);
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            v81(&v96, v84, v44);
            uint64_t v34 = v83;
            LOBYTE(v29) = AssociatedTypeWitness;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            __int16 v41 = v96;
            goto LABEL_57;
          case 8uLL:
            uint64_t v60 = *(void *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            unsigned int v61 = *(void (***)(void *__return_ptr, void, void, void, double, double))(v60 + 216);
            if (!v61) {
              goto LABEL_37;
            }
            unint64_t v83 = v34;
            uint64_t v62 = *(void (**)(void *__return_ptr, void, void))((v35 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            int v84 = v61;
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            unsigned __int8 v81 = v62;
            swift_retain();
            uint64_t AssociatedTypeWitness = v60;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_61;
            }
            if (one-time initialization token for updateSchedule != -1) {
              swift_once();
            }
            int v63 = static NSAttributedStringKey.updateSchedule;
            int v64 = v84;
            objc_msgSend(v84, sel_length);
            if (objc_msgSend(v64, sel_attribute_atIndex_effectiveRange_, v63, 0, 0))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              outlined destroy of Any?((uint64_t)&v87);
              uint64_t v65 = *(unsigned char *)(AssociatedTypeWitness + 256);
              outlined consume of DisplayList.Item.Value(v35, v36);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v35, v36);
              uint64_t v34 = v83;
              if (v65) {
                __int16 v41 = 8;
              }
              else {
LABEL_38:
              }
                __int16 v41 = 0;
            }
            else
            {
              long long v88 = 0u;
              long long v87 = 0u;
              outlined destroy of Any?((uint64_t)&v87);
LABEL_61:
              outlined consume of DisplayList.Item.Value(v35, v36);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v35, v36);
              uint64_t v34 = v83;
              __int16 v41 = 0;
            }
            break;
          case 9uLL:
            __int16 v41 = *(_WORD *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_40;
          case 0xBuLL:
            goto LABEL_42;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v35, v36);
LABEL_42:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            __int16 v41 = 2;
            goto LABEL_57;
          default:
LABEL_37:
            outlined copy of DisplayList.Item.Value(v35, v36);
            outlined copy of DisplayList.Item.Value(v35, v36);
            goto LABEL_38;
        }
        goto LABEL_57;
    }
  }
  outlined consume of DisplayList.Effect(v30, v29, v24);
  char v40 = 0;
  __int16 v41 = 0;
  uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_59:
  int v75 = v79;
  *long long v79 = v42;
  *((_WORD *)v75 + 4) = v41;
  *((unsigned char *)v75 + 10) = v40;
  return outlined consume of DisplayList.Item.Value(v35, v36);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance GeometryEffectDisplayList<A>()
{
  return 0xD000000000000019;
}

void GeometryEffectTransform.value.getter(unint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v12 = *(void *)Value;
  double v13 = *(double *)(Value + 8);
  double v14 = *(double *)(Value + 16);
  double v15 = *(double *)(Value + 24);
  double v16 = *(double *)(Value + 32);
  uint64_t v46 = *(void *)Value;
  swift_retain();
  long long v17 = (double *)AGGraphGetValue();
  double v18 = v15 - (*v17 - v13);
  double v19 = v16 - (v17[1] - v14);
  double v48 = v18;
  double v49 = v19;
  long long v47 = 0uLL;
  char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  long long v21 = 0uLL;
  if (v20)
  {
    double v37 = v19;
    double v38 = v18;
    uint64_t v22 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v22, a2);
    type metadata accessor for CGSize(0);
    unint64_t v36 = HIDWORD(a1);
    uint64_t v23 = (double *)AGGraphGetValue();
    (*(void (**)(double *__return_ptr, uint64_t, uint64_t, double, double))(a3 + 24))(v50, a2, a3, *v23, v23[1]);
    double v24 = v50[1];
    double v39 = v50[0];
    double v25 = v50[2];
    double v26 = v50[3];
    double v28 = v50[4];
    double v27 = v50[5];
    double v29 = v50[6];
    double v30 = v50[7];
    double v31 = v50[8];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    float64_t v32 = (unsigned char *)AGGraphGetValue();
    double v33 = v39;
    if (*v32 == 1)
    {
      uint64_t v34 = *(void *)AGGraphGetValue();
      v58[0] = -1.0;
      memset(&v58[1], 0, 24);
      long long v59 = xmmword_2461BCA80;
      uint64_t v60 = v34;
      long long v61 = xmmword_2461C55F0;
      ProjectionTransform.concatenating(_:)(v50, &v51);
      ProjectionTransform.concatenating(_:)(v58, v52);
      double v33 = v52[0];
      double v24 = v52[1];
      double v25 = v52[2];
      double v26 = v52[3];
      double v28 = v52[4];
      double v27 = v52[5];
      double v29 = v52[6];
      double v30 = v52[7];
      double v31 = v52[8];
    }
    *(double *)&long long v53 = v33;
    *((double *)&v53 + 1) = v24;
    *(double *)&long long v54 = v25;
    *((double *)&v54 + 1) = v26;
    *(double *)&long long v55 = v28;
    *((double *)&v55 + 1) = v27;
    *(double *)&long long v56 = v29;
    *((double *)&v56 + 1) = v30;
    double v57 = v31;
    if (ProjectionTransform.isInvertible.getter())
    {
      ViewTransform.appendProjectionTransform(_:inverse:)((CGFloat *)&v53, 1);
      uint64_t v12 = v46;
      long long v21 = v47;
      double v18 = v48;
      double v19 = v49;
    }
    else
    {
      *(void *)&long long v40 = 0;
      *((void *)&v40 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      long long v45 = v40;
      v35._object = (void *)0x800000024621DC20;
      v35._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v35);
      long long v42 = v55;
      long long v43 = v56;
      double v44 = v57;
      long long v40 = v53;
      long long v41 = v54;
      _print_unlocked<A, B>(_:_:)();
      specialized static Log.externalWarning(_:)(v45, *((unint64_t *)&v45 + 1));
      swift_bridgeObjectRelease();
      double v19 = v37;
      double v18 = v38;
      long long v21 = 0uLL;
    }
  }
  *(void *)a4 = v12;
  *(_OWORD *)(a4 + 8) = v21;
  *(double *)(a4 + 24) = v18;
  *(double *)(a4 + 32) = v19;
}

void protocol witness for Rule.value.getter in conformance GeometryEffectTransform<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  GeometryEffectTransform.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

double RoundedSize.value.getter@<D0>(uint64_t a1@<X8>)
{
  AGGraphGetValue();
  uint64_t Value = (double *)AGGraphGetValue();
  double v3 = *Value;
  uint64_t v4 = *((void *)Value + 1);
  uint64_t v5 = *((void *)Value + 2);
  uint64_t v6 = *((void *)Value + 3);
  unsigned int v7 = (double *)AGGraphGetValue();
  *(double *)&long long v9 = v3;
  *((void *)&v9 + 1) = v4;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(*v7);
  double result = v3;
  *(_OWORD *)a1 = v9;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance RoundedSize@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

float64x2_t CGAffineTransform.flipRTL(width:)(double a1)
{
  double v2 = *(double *)(v1 + 40);
  float64x2_t v3 = *(float64x2_t *)(v1 + 8);
  *(double *)(v1 + 32) = a1 - *(double *)(v1 + 32) - *(double *)v1 * a1;
  *(double *)(v1 + 40) = v2 + a1 * v3.f64[0];
  float64x2_t result = vnegq_f64(v3);
  *(float64x2_t *)(v1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for RoundedSize(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of GeometryEffect.effectValue(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static GeometryEffect._affectsLayout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for RoundedSize()
{
  return &type metadata for RoundedSize;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _Rotation3DEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _RotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v8;
  void v11[4] = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _Rotation3DEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OffsetEffect(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

uint64_t sub_245C30970()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for GeometryEffectDisplayList<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>;
  if (!lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>)
  {
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(255, &lazy cache variable for type metadata for GeometryEffectDisplayList<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryEffectDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 29)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeometryEffectDisplayList(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 29) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryEffectTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeometryEffectTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in GeometryEffectDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in GeometryEffectTransform<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _GraphValue<_RotationEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.Layout()
{
  return &type metadata for Text.Effect.Layout;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.Layout.DisplayList(void (**a1)(void **a1), unint64_t *a2))(void **a1)
{
  unint64_t result = (void (*)(void **))malloc(0x80uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v7 = *(void *)v2 + (v6 << 7);
    uint64_t v8 = *(void *)(v7 + 144);
    uint64_t v9 = *(void *)(v7 + 152);
    double v10 = v2[1] + *(double *)(v7 + 136);
    long long v11 = *(_OWORD *)(v7 + 40);
    long long v12 = *(_OWORD *)(v7 + 56);
    long long v13 = *(_OWORD *)(v7 + 72);
    long long v14 = *(_OWORD *)(v7 + 88);
    long long v15 = *(_OWORD *)(v7 + 104);
    long long v16 = *(_OWORD *)(v7 + 120);
    *(void *)unint64_t result = *(void *)(v7 + 32);
    *(_OWORD *)((char *)result + 8) = v11;
    *(_OWORD *)((char *)result + 24) = v12;
    *(_OWORD *)((char *)result + 40) = v13;
    *(_OWORD *)((char *)result + 56) = v14;
    *(_OWORD *)((char *)result + 72) = v15;
    *(_OWORD *)((char *)result + 88) = v16;
    *((double *)result + 13) = v10;
    *((void *)result + 14) = v8;
    *((void *)result + 15) = v9;
    return protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.Layout.DisplayList@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], unint64_t result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.Layout.DisplayList@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.Layout.Fragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    double v10 = (_OWORD *)((char *)a1 + v8);
    long long v11 = (_OWORD *)((char *)a2 + v8);
    long long v12 = v11[1];
    *double v10 = *v11;
    v10[1] = v12;
    long long v13 = (char *)a1 + v9;
    long long v14 = (char *)a2 + v9;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v9);
    uint64_t v16 = *((void *)v14 + 1);
    char v17 = v14[16];
    outlined copy of Text.Effect.Layout.Fragment.Storage(v15, v16, v17);
    *(void *)long long v13 = v15;
    *((void *)v13 + 1) = v16;
    v13[16] = v17;
  }
  return a1;
}

uint64_t outlined copy of Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 16);

  return outlined consume of Text.Effect.Layout.Fragment.Storage(v6, v7, v8);
}

uint64_t outlined consume of Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (_OWORD *)(a1 + v7);
  double v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = *(void *)(a2 + v8);
  uint64_t v15 = *(void *)(a2 + v8 + 8);
  char v16 = *(unsigned char *)(v13 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(v14, v15, v16);
  *(void *)uint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(unsigned char *)(v12 + 16) = v16;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v15 = *(unsigned char *)(v12 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(void *)v12, v14, v15);
  uint64_t v16 = *(void *)v11;
  uint64_t v17 = *(void *)(v11 + 8);
  char v18 = *(unsigned char *)(v11 + 16);
  *(void *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 16) = v15;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (_OWORD *)(a1 + v7);
  uint64_t v10 = (_OWORD *)(a2 + v7);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  LOBYTE(v9) = *(unsigned char *)(v13 + 16);
  uint64_t v14 = *(void *)v12;
  uint64_t v15 = *(void *)(v12 + 8);
  char v16 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = (_BYTE)v9;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C31680);
}

uint64_t sub_245C31680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C3178C);
}

void sub_245C3178C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
  }
}

uint64_t type metadata accessor for Text.Effect.Layout.Fragment()
{
  uint64_t result = type metadata singleton initialization cache for Text.Effect.Layout.Fragment;
  if (!type metadata singleton initialization cache for Text.Effect.Layout.Fragment) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for Text.Effect.Layout.Fragment()
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for Text.Effect.Layout.Fragment.Storage(uint64_t a1)
{
  return outlined consume of Text.Effect.Layout.Fragment.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Effect.Layout.Fragment.Storage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Layout.Fragment.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Text.Effect.Layout.Fragment.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Layout.Fragment.Storage()
{
  return &type metadata for Text.Effect.Layout.Fragment.Storage;
}

void *initializeBufferWithCopyOfBuffer for Text.Effect.Layout.DisplayList(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.Layout.DisplayList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Layout.DisplayList()
{
  return &type metadata for Text.Effect.Layout.DisplayList;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.Layout.DisplayList>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList;
  if (!lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance Text.Effect.Layout.DisplayList@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = 0;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.Layout.DisplayList()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, *(double *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.Layout.DisplayList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(double *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.Layout.DisplayList>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Layout.DisplayList> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, (uint64_t)&type metadata for Text.Effect.Layout.DisplayList, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.Layout.DisplayList()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.Layout.DisplayList> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_0(255, &lazy cache variable for type metadata for Slice<Text.Effect.Layout.DisplayList>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Layout.DisplayList and conformance Text.Effect.Layout.DisplayList, (uint64_t)&type metadata for Text.Effect.Layout.DisplayList, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static TimeDataFormatting.attribute.getter()
{
}

void protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance TimeDataFormatting()
{
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance TimeDataFormatting@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return static TimeDataFormatting.decode(from:)(a1, a2);
}

uint64_t static TimeDataFormatting.decode(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v21, v21[3]);
    type metadata accessor for AnyCodable<SafelyCodableRequirement>();
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>, (void (*)(uint64_t))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    outlined init with copy of Decodable & Encodable((uint64_t)v20, (uint64_t)v15);
    type metadata accessor for Decodable & Encodable();
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v13, (uint64_t)v16);
      outlined init with take of ScrollStateRequest(v16, (uint64_t)v17);
      uint64_t v5 = v18;
      uint64_t v6 = v19;
      uint64_t v7 = __swift_project_boxed_opaque_existential_1(v17, v18);
      a2[3] = v5;
      a2[4] = *(void *)(v6 + 24);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, v7, v5);
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      uint64_t v14 = 0;
      memset(v13, 0, sizeof(v13));
      outlined destroy of AnyTrackedValue?((uint64_t)v13, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
      uint64_t v9 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v11 = v10;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, MEMORY[0x263F8DCC8]);
      outlined init with copy of Decodable & Encodable((uint64_t)v20, (uint64_t)v15);
      __swift_project_boxed_opaque_existential_1(v15, v15[3]);
      uint64_t DynamicType = swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      *uint64_t v11 = DynamicType;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCB0], v9);
      swift_willThrow();
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return result;
}

void type metadata accessor for AnyCodable<SafelyCodableRequirement>()
{
  if (!lazy cache variable for type metadata for AnyCodable<SafelyCodableRequirement>)
  {
    unint64_t v0 = type metadata accessor for AnyCodable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyCodable<SafelyCodableRequirement>);
    }
  }
}

uint64_t outlined init with copy of Decodable & Encodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for Decodable & Encodable()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & Encodable;
  if (!lazy cache variable for type metadata for Decodable & Encodable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable);
  }
  return result;
}

uint64_t TimeDataFormatting.Resolvable.replacingFormat<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v26 = a6;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 16);
  double v19 = MEMORY[0x270FA5388](v18);
  long long v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v21, v7, v17, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  double v23 = *(double *)(v7 + *(int *)(a2 + 64));
  uint64_t v24 = *(void *)(a2 + 32);
  default argument 3 of TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(&v27);
  return TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)((uint64_t)v21, (uint64_t)v15, &v27, v17, a3, v24, a4, a5, v26, v23);
}

uint64_t TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v16 = *a3;
  static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(a9, a1, a2, &v16, a4, a5, a6, a7, a10, a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a2, a5);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);

  return v14(a1, a4);
}

uint64_t static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v35 = a8;
  uint64_t v39 = a3;
  uint64_t v41 = a1;
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v40 = a10;
  MEMORY[0x270FA5388](a1);
  double v38 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = v23;
  v42[1] = v24;
  v42[2] = v25;
  v42[3] = v26;
  uint64_t v37 = v25;
  uint64_t v27 = type metadata accessor for TimeDataFormatting.Configuration();
  MEMORY[0x270FA5388](v27 - 8);
  double v29 = (char *)&v34 - v28;
  v42[0] = *a4;
  uint64_t v30 = v42[0];
  uint64_t v31 = v39;
  int v36 = static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)&v34 - v28, a2, a9, v39, v42, a5, a6, a7, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a2, a5);
  uint64_t v32 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v38, v31, a6);
  v42[0] = v30;
  TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:configuration:sizeVariant:)((uint64_t)v22, v32, (uint64_t)v29, v42, a5, a6, v41, a9);
  return v36 & 1;
}

uint64_t TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:configuration:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v13 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7, a1, a5);
  uint64_t v14 = (int *)type metadata accessor for TimeDataFormatting.Resolvable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v14[15], a2, a6);
  *(double *)(a7 + v14[16]) = a8;
  uint64_t v15 = a7 + v14[17];
  uint64_t v16 = type metadata accessor for TimeDataFormatting.Configuration();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a3, v16);
  *(void *)(a7 + v14[18]) = v13;
  return result;
}

uint64_t TimeDataFormatting.Resolvable.resolve(in:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v63 = type metadata accessor for Locale();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v60 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v58 = (uint64_t)&v57 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v74 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v72 = (char *)&v57 - v11;
  uint64_t v69 = a2[5];
  unsigned __int8 v81 = a2;
  uint64_t v65 = a2[3];
  uint64_t v78 = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  int v70 = (char *)&v57 - v12;
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v76 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v57 - v20;
  uint64_t v22 = a1;
  uint64_t v23 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  long long v61 = v23;
  uint64_t v67 = v13;
  uint64_t v66 = v14;
  uint64_t v75 = v9;
  if (!v24)
  {
    uint64_t v26 = v8;
    uint64_t v28 = swift_retain_n();
    uint64_t v29 = specialized closure #1 in PropertyList.subscript.getter(v28);
    uint64_t v59 = 0;
    swift_release_n();
    if (v29) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v30 = ResolvableStringResolutionContext.date.getter((uint64_t)v18);
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v30, 0.0, 0.0333333333);
    static Date.+ infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v18, v80);
    int v64 = 0;
    goto LABEL_6;
  }
  uint64_t v59 = 0;
  uint64_t v26 = v8;
  swift_retain_n();
  swift_retain_n();
  char v27 = specialized PropertyList.Tracker.value<A>(_:for:)(v25);
  swift_release_n();
  swift_release_n();
  if ((v27 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  ResolvableStringResolutionContext.date.getter((uint64_t)v21);
  int v64 = 1;
LABEL_6:
  uint64_t v31 = (uint64_t)v81;
  uint64_t v32 = v77;
  uint64_t v33 = v75;
  v83[0] = v75;
  v83[1] = v65;
  v83[2] = v26;
  uint64_t v84 = v69;
  uint64_t v34 = type metadata accessor for TimeDataFormatting.Configuration();
  TimeDataFormatting.Configuration.formatAndFrequency(for:)((uint64_t)v83, (char *)&v82, v22, v34);
  LODWORD(v69) = v82;
  __swift_project_boxed_opaque_existential_1(v83, v84);
  uint64_t v35 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 40))(v21, v33, v26);
  int v36 = v70;
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v35, v74);
  uint64_t v37 = *(void (**)(uint64_t))(*(void *)(v31 + 48) + 8);
  uint64_t v38 = (uint64_t)v76;
  uint64_t v39 = v78;
  v37(v78);
  uint64_t v40 = v36;
  int v41 = v69;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v39);
  if (v41 == 3
    || (uint64_t v42 = v84,
        uint64_t v43 = v85,
        __swift_project_boxed_opaque_existential_1(v83, v84),
        LOBYTE(v82) = v41,
        !DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)((unsigned __int8 *)&v82, v32, (uint64_t)v21, v42, v33, v43, v26)))
  {
    uint64_t v45 = v68;
    uint64_t v46 = v67;
    if (v39 != v67)
    {
LABEL_18:
      uint64_t v82 = 0x3FF0000000000000;
      TimeDataFormatting.Resolvable.disableContentTransition(on:for:date:isLuminanceReduced:)(v38, (double *)&v82, (uint64_t)v21, v64, (uint64_t)v81);
      goto LABEL_19;
    }
  }
  else
  {
    LOBYTE(v82) = v41;
    uint64_t v44 = *v61;
    uint64_t v45 = v68;
    uint64_t v46 = v67;
    if (v61[1])
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v47 = v58;
      specialized PropertyList.Tracker.value<A>(_:for:)(v44, v58);
    }
    else
    {
      uint64_t v48 = swift_retain_n();
      uint64_t v47 = v58;
      uint64_t v49 = v38;
      uint64_t v50 = v59;
      specialized closure #1 in PropertyList.subscript.getter(v48, v58);
      uint64_t v59 = v50;
      uint64_t v38 = v49;
    }
    swift_release_n();
    swift_release_n();
    AttributedString.redact(for:locale:)(&v82, v47);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v47, v63);
    if (v78 != v46) {
      goto LABEL_18;
    }
  }
  uint64_t v82 = 0x3FF0000000000000;
  uint64_t v51 = *v61;
  if (v61[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v52 = v60;
    specialized PropertyList.Tracker.value<A>(_:for:)(v51, v60);
  }
  else
  {
    uint64_t v53 = swift_retain_n();
    uint64_t v52 = v60;
    specialized closure #1 in PropertyList.subscript.getter(v53, v60);
  }
  swift_release_n();
  swift_release_n();
  char v54 = AttributedString.disableContentTransition(for:locale:)((double *)&v82, v52);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v52, v63);
  if ((v54 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_19:
  (*(void (**)(char *, uint64_t))(v79 + 8))(v21, v80);
  uint64_t v55 = v66;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v45, v38, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v45, 0, 1, v46);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
}

BOOL DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v66 = a3;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v62 = &v55[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  uint64_t v65 = &v55[-v16];
  uint64_t v68 = a6;
  uint64_t v67 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = &v55[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = &v55[-v22];
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v25);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = &v55[-v27];
  double v33 = MEMORY[0x270FA5388](v29);
  uint64_t v35 = &v55[-v34];
  int v36 = *a1;
  if (!v36) {
    return 0;
  }
  uint64_t v59 = v32;
  uint64_t v60 = v31;
  uint64_t v61 = v30;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a7 + 40);
  uint64_t v38 = v66;
  uint64_t v57 = a2;
  uint64_t v58 = a5;
  uint64_t v66 = a7;
  v37(v38, a5, a7, v33);
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  uint64_t v39 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
  if (v39(v23, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v35, AssociatedTypeWitness);
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v23, v61);
    return 0;
  }
  int v56 = v36;
  int v41 = v23;
  uint64_t v42 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v24 + 32);
  v42(v28, v41, AssociatedTypeWitness);
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  if (v39(v20, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
    v43(v28, AssociatedTypeWitness);
    v43(v35, AssociatedTypeWitness);
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v20, v61);
    return 0;
  }
  v42(v59, v20, AssociatedTypeWitness);
  uint64_t v44 = v66;
  uint64_t v45 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v66 + 48);
  uint64_t v46 = v58;
  v45(v28, v58, v66);
  uint64_t v47 = v62;
  v45(v59, v46, v44);
  uint64_t v48 = v65;
  Date.timeIntervalSince(_:)();
  double v50 = v49;
  uint64_t v51 = v64;
  uint64_t v52 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
  v52(v47, v64);
  v52(v48, v51);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v53((uint64_t)v59, AssociatedTypeWitness);
  v53((uint64_t)v28, AssociatedTypeWitness);
  v53((uint64_t)v35, AssociatedTypeWitness);
  double v54 = 60.0;
  if (v56 != 2) {
    double v54 = 1.0;
  }
  return v50 < v54;
}

void AttributedString.redact(for:locale:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v213 = a2;
  v232 = a1;
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  v221 = v2;
  MEMORY[0x270FA5388](v2);
  v201 = (char *)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v187 = (char *)&v184 - v5;
  v218 = (void (**)(char *, char *, uint64_t))type metadata accessor for AttributedString.Index();
  v200 = (void (*)(char *, uint64_t, uint64_t))*(v218 - 1);
  MEMORY[0x270FA5388](v218);
  v217 = (void (**)(char *, uint64_t))((char *)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  v215 = (char *)&v184 - v8;
  type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, &lazy cache variable for type metadata for (Range<AttributedString.Index>, Calendar.Component.Magnitude?), type metadata accessor for Range<AttributedString.Index>, (void (*)(uint64_t))type metadata accessor for Calendar.Component.Magnitude?);
  uint64_t v194 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v193 = (uint64_t)&v184 - v10;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v185 = v11;
  MEMORY[0x270FA5388](v11);
  v186 = (char *)&v184 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v197 = (void (**)(void, uint64_t))((char *)&v184 - v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v184 - v16;
  type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (uint64_t *)((char *)&v184 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  uint64_t v207 = v21;
  MEMORY[0x270FA5388](v21);
  v206 = (uint64_t *)((char *)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(0);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v196 = (uint64_t)&v184 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v216 = (uint64_t)&v184 - v26;
  uint64_t v233 = type metadata accessor for AttributedString.Runs.Run();
  v219 = *(char **)(v233 - 8);
  MEMORY[0x270FA5388](v233);
  v212 = (char *)&v184 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  v199 = (char *)&v184 - v29;
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ReversedCollection<AttributedString.Runs>, MEMORY[0x263F067C8], lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F8DF80]);
  MEMORY[0x270FA5388](v30 - 8);
  v190 = (char *)&v184 - v31;
  type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator(0);
  uint64_t v33 = v32;
  MEMORY[0x270FA5388](v32);
  v189 = (char *)&v184 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v184 - v36;
  type metadata accessor for Range<AttributedString.Index>??(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, MEMORY[0x263F067B0]);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v40 = (char *)&v184 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  v202 = (char *)&v184 - v42;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  v225 = v43;
  MEMORY[0x270FA5388](v43);
  v220 = (char *)&v184 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?(0);
  MEMORY[0x270FA5388](v45 - 8);
  v222 = (void (**)(char *))((char *)&v184 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?(0);
  MEMORY[0x270FA5388](v47 - 8);
  v223 = (char *)&v184 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(0);
  MEMORY[0x270FA5388](v49 - 8);
  v198 = (char *)&v184 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  v224 = (char *)&v184 - v52;
  uint64_t v53 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v54 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  int v56 = (char *)&v184 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v57);
  uint64_t v59 = (char *)&v184 - v58;
  uint64_t v60 = type metadata accessor for AttributedString.Runs();
  uint64_t v61 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  v192 = (char *)&v184 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  if (!*v232) {
    return;
  }
  int v209 = *v232;
  uint64_t v188 = v33;
  v211 = v20;
  v214 = v40;
  v208 = v37;
  v210 = (void (**)(void, uint64_t))v17;
  uint64_t v66 = v64;
  uint64_t v67 = (char *)&v184 - v65;
  AttributedString.runs.getter();
  uint64_t v68 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v230 = v68;
  uint64_t v69 = dispatch thunk of Collection.distance(from:to:)();
  uint64_t v191 = v54;
  uint64_t v70 = v54 + 8;
  uint64_t v71 = *(void (**)(char *, uint64_t))(v54 + 8);
  v228 = v56;
  v71(v56, v53);
  v232 = v59;
  uint64_t v229 = v53;
  v226 = v71;
  uint64_t v227 = v70;
  v71(v59, v53);
  uint64_t v72 = *(void (**)(char *, uint64_t))(v61 + 8);
  v205 = v67;
  uint64_t v231 = v66;
  uint64_t v204 = v61 + 8;
  v203 = v72;
  v72(v67, v66);
  if (v69 != 1) {
    goto LABEL_8;
  }
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  *(&v184 - 2) = v74;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);
  uint64_t v75 = (uint64_t)v224;
  AttributedString.subscript.getter();
  swift_release();
  uint64_t v76 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  int v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48))(v75, 1, v76);
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v75, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  if (v77 != 1) {
    goto LABEL_8;
  }
  uint64_t v78 = swift_getKeyPath();
  MEMORY[0x270FA5388](v78);
  *(&v184 - 2) = v79;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  uint64_t v80 = (uint64_t)v223;
  AttributedString.subscript.getter();
  swift_release();
  uint64_t v81 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  int v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 48))(v80, 1, v81);
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v80, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?);
  if (v82 != 1) {
    goto LABEL_8;
  }
  uint64_t v83 = swift_getKeyPath();
  MEMORY[0x270FA5388](v83);
  *(&v184 - 2) = v84;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  uint64_t v85 = (uint64_t)v222;
  AttributedString.subscript.getter();
  swift_release();
  uint64_t v86 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
  int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 48))(v85, 1, v86);
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v85, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?);
  if (v87 != 1)
  {
LABEL_8:
    uint64_t v107 = v192;
    AttributedString.runs.getter();
    uint64_t v108 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    v201 = (char *)(v61 + 16);
    v200 = v108;
    v108(v205, (uint64_t)v107, v231);
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
    uint64_t v109 = (uint64_t)v220;
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v110 = v109 + *((int *)v225 + 9);
    v223 = *(char **)(v191 + 16);
    v224 = (char *)(v191 + 16);
    v225 = v219 + 56;
    v221 = (uint64_t (**)(char *, uint64_t, uint64_t))(v219 + 48);
    v222 = (void (**)(char *))(v219 + 16);
    v218 = (void (**)(char *, char *, uint64_t))(v219 + 32);
    v217 = (void (**)(char *, uint64_t))(v219 + 8);
    uint64_t v111 = v229;
    float64x2_t v112 = v232;
    uint64_t v113 = (uint64_t)v208;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v223)(v112, v110, v111);
      float64x2_t v114 = v228;
      uint64_t v115 = v231;
      dispatch thunk of Collection.endIndex.getter();
      v220 = (char *)lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x263F067B8]);
      char v116 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v117 = v114;
      uint64_t v118 = v109;
      long long v119 = v226;
      v226(v117, v111);
      v119(v112, v111);
      if (v116) {
        break;
      }
      long long v120 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v121 = v202;
      uint64_t v122 = v233;
      (*v222)(v202);
      v120(v235, 0);
      float64x2_t v123 = v205;
      v200(v205, v118, v115);
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v124 = v115;
      long long v125 = v121;
      v203(v123, v124);
      v219 = *(char **)v225;
      ((void (*)(char *, void, uint64_t, uint64_t))v219)(v121, 0, 1, v122);
      int v126 = (*v221)(v121, 1, v122);
      LODWORD(v215) = v126 != 1;
      uint64_t v109 = v118;
      if (v126 != 1)
      {
        long long v127 = v199;
        uint64_t v128 = v125;
        uint64_t v129 = v233;
        (*v218)(v199, v128, v233);
        uint64_t v130 = swift_getKeyPath();
        MEMORY[0x270FA5388](v130);
        *(&v184 - 2) = v131;
        swift_getKeyPath();
        lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);
        uint64_t v132 = (uint64_t)v198;
        AttributedString.Runs.Run.subscript.getter();
        uint64_t v111 = v229;
        swift_release();
        uint64_t v133 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
        int v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 48))(v132, 1, v133);
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v132, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
        (*v217)(v127, v129);
        if (v134 == 1) {
          continue;
        }
      }
      goto LABEL_14;
    }
    v219 = *(char **)v225;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v202, 1, 1, v233);
    LODWORD(v215) = 0;
    uint64_t v109 = v118;
LABEL_14:
    outlined destroy of AnyCodable<SafelyCodableRequirement>(v109, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
    uint64_t v135 = v231;
    uint64_t v136 = v203;
    v203(v192, v231);
    char v234 = 2;
    uint64_t v137 = v190;
    uint64_t v138 = v195;
    AttributedString.runs.getter();
    uint64_t v139 = (uint64_t)v189;
    v200(v189, (uint64_t)v137, v135);
    dispatch thunk of Collection.endIndex.getter();
    v136(v137, v135);
    uint64_t v140 = v188;
    (*(void (**)(uint64_t, char *, uint64_t))(v191 + 32))(v139 + *(int *)(v188 + 36), v112, v111);
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v139, v113, (uint64_t (*)(void))type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator);
    uint64_t v141 = v113 + *(int *)(v140 + 36);
    while (1)
    {
      unsigned __int8 v144 = v228;
      uint64_t v143 = v229;
      ((void (*)(char *, uint64_t, uint64_t))v223)(v112, v141, v229);
      unsigned int v145 = v144;
      dispatch thunk of Collection.startIndex.getter();
      LOBYTE(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
      unsigned __int8 v146 = v145;
      float64x2_t v112 = v232;
      uint64_t v147 = v141;
      unsigned __int8 v148 = v226;
      v226(v146, v143);
      v148(v112, v143);
      if (v144)
      {
        uint64_t v149 = v113;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v214, 1, 1, v233);
LABEL_44:
        unsigned int v105 = type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator;
        uint64_t v106 = v149;
LABEL_45:
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v106, (uint64_t (*)(void))v105);
        return;
      }
      lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      uint64_t v149 = v113;
      long long v150 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      long long v151 = v214;
      uint64_t v152 = v233;
      (*v222)(v214);
      v150(v235, 0);
      ((void (*)(char *, void, uint64_t, uint64_t))v219)(v151, 0, 1, v152);
      if ((*v221)(v151, 1, v152) == 1) {
        goto LABEL_44;
      }
      uint64_t v141 = v147;
      uint64_t v153 = (uint64_t)v212;
      (*v218)(v212, v151, v233);
      uint64_t v154 = v213;
      char v155 = specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(&v234);
      uint64_t v156 = v154;
      uint64_t v157 = v138;
      long long v158 = v211;
      AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)(v153, v156, v155 & 1, v211);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      uint64_t v160 = v159;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v159 - 8) + 48))(v158, 1, v159) == 1)
      {
        outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v158, (uint64_t (*)(void))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?);
        long long v142 = v210;
        AttributedString.Runs.Run.range.getter();
        redact #1 (_:) in AttributedString.redact(for:locale:)(v142, (char)v215, v157);
        outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v142, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        uint64_t v113 = v149;
        goto LABEL_16;
      }
      uint64_t v161 = (uint64_t)v158 + *(int *)(v160 + 48);
      uint64_t v162 = v207;
      uint64_t v163 = (double *)v206;
      uint64_t v164 = (uint64_t)v206 + *(int *)(v207 + 48);
      uint64_t *v206 = *v158;
      outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v161, v164, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      double v165 = *v163;
      outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator((uint64_t)v163 + *(int *)(v162 + 48), v216, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      if (v209)
      {
        if (v209 == 1)
        {
          uint64_t v166 = v153;
          if (v165 < 1.0) {
            goto LABEL_28;
          }
          goto LABEL_23;
        }
        double v172 = 60.0;
      }
      else
      {
        double v172 = 0.0333333333;
      }
      uint64_t v166 = v153;
      if (v165 < v172)
      {
LABEL_28:
        v173 = v210;
        AttributedString.Runs.Run.range.getter();
        redact #1 (_:) in AttributedString.redact(for:locale:)(v173, (char)v215, v157);
        outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v173, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v216, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        uint64_t v113 = (uint64_t)v208;
        uint64_t v153 = v166;
        goto LABEL_16;
      }
LABEL_23:
      uint64_t v167 = v166;
      uint64_t v168 = v216;
      uint64_t v169 = v196;
      outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v216, v196, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      uint64_t v171 = v170;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 48))(v169, 1, v170) == 1)
      {
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v169, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v168, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        uint64_t v113 = (uint64_t)v208;
        uint64_t v153 = v167;
        goto LABEL_16;
      }
      uint64_t v174 = v169 + *(int *)(v171 + 48);
      uint64_t v175 = *(void *)v174;
      char v176 = *(unsigned char *)(v174 + 8);
      uint64_t v177 = v194;
      uint64_t v178 = v193;
      uint64_t v179 = v193 + *(int *)(v194 + 48);
      outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v169, v193, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      *(void *)uint64_t v179 = v175;
      *(unsigned char *)(v179 + 8) = v176;
      uint64_t v180 = v178 + *(int *)(v177 + 48);
      double v181 = *(double *)v180;
      LOBYTE(v179) = *(unsigned char *)(v180 + 8);
      outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v178, (uint64_t)v197, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      int v182 = v209;
      if (v179)
      {
        if (one-time initialization token for zero != -1) {
          swift_once();
        }
        double v181 = *(double *)&static Calendar.Component.Magnitude.zero;
      }
      uint64_t v157 = v195;
      if (v182)
      {
        float64x2_t v112 = v232;
        if (v182 == 1) {
          BOOL v183 = v181 < 1.0;
        }
        else {
          BOOL v183 = v181 < 60.0;
        }
        uint64_t v113 = (uint64_t)v208;
        if (!v183) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v113 = (uint64_t)v208;
        float64x2_t v112 = v232;
        if (v181 >= 0.0333333333) {
          goto LABEL_42;
        }
      }
      redact #1 (_:) in AttributedString.redact(for:locale:)(v197, (char)v215, v195);
LABEL_42:
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v197, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v216, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
LABEL_16:
      uint64_t v138 = v157;
      (*v217)((char *)v153, v233);
    }
  }
  long long v88 = v215;
  AttributedString.startIndex.getter();
  long long v89 = v217;
  AttributedString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
  int v90 = v218;
  if (dispatch thunk of static Comparable.<= infix(_:_:)())
  {
    unsigned int v91 = v221;
    uint64_t v92 = v187;
    int v93 = &v187[*((int *)v221 + 12)];
    unsigned int v94 = v200;
    int v95 = (void (*)(char *, char *, void))*((void *)v200 + 4);
    v95(v187, v88, v90);
    v95(v93, (char *)v89, v90);
    uint64_t v96 = *((int *)v91 + 12);
    unint64_t v97 = v201;
    long long v98 = &v201[v96];
    unsigned int v99 = (void (*)(char *, char *, void))*((void *)v94 + 2);
    v99(v201, v92, v90);
    v99(v98, v93, v90);
    uint64_t v100 = (uint64_t)v186;
    v95(v186, v97, v90);
    int v101 = (void (*)(void, void))*((void *)v94 + 1);
    v101(v98, v90);
    uint64_t v102 = v101;
    uint64_t v103 = &v97[*((int *)v221 + 12)];
    v95(v97, v92, v90);
    v95(v103, v93, v90);
    v95((char *)(v100 + *(int *)(v185 + 36)), v103, v90);
    v102(v97, v90);
    char v104 = v210;
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v100, (uint64_t)v210, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    AttributedString.redactNumbers(in:)(v104);
    unsigned int v105 = type metadata accessor for Range<AttributedString.Index>;
    uint64_t v106 = (uint64_t)v104;
    goto LABEL_45;
  }
  __break(1u);
}

uint64_t AttributedString.disableContentTransition(for:locale:)(double *a1, uint64_t a2)
{
  uint64_t v123 = a2;
  type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, &lazy cache variable for type metadata for (Range<AttributedString.Index>, Calendar.Component.Magnitude?), type metadata accessor for Range<AttributedString.Index>, (void (*)(uint64_t))type metadata accessor for Calendar.Component.Magnitude?);
  uint64_t v105 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v104 = (uint64_t)&v103 - v4;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v109 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v107 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v108 = (uint64_t)&v103 - v8;
  type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v122 = (uint64_t *)((char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  uint64_t v111 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v110 = (double *)((char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v106 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v112 = (uint64_t)&v103 - v16;
  uint64_t v138 = type metadata accessor for AttributedString.Runs.Run();
  float64x2_t v114 = *(void (***)(void, void))(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v124 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>??(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, MEMORY[0x263F067B0]);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v133 = (char *)&v103 - v19;
  uint64_t v139 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v141 = *(void *)(v139 - 8);
  MEMORY[0x270FA5388](v139);
  uint64_t v136 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v140 = (char *)&v103 - v22;
  uint64_t v23 = type metadata accessor for AttributedString.Runs();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AttributedString();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v32 = v31 - 8;
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v103 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v103 - v37;
  double v39 = *a1;
  char v144 = 2;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v118 = v28 + 16;
  int v117 = v40;
  ((void (*)(char *, uint64_t, uint64_t, double))v40)(v30, v137, v27, v36);
  AttributedString.runs.getter();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v28 + 8);
  long long v119 = v30;
  uint64_t v121 = v27;
  uint64_t v120 = v28 + 8;
  char v116 = v41;
  v41(v30, v27);
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v129 = v24 + 16;
  uint64_t v128 = v42;
  v42(v34, (uint64_t)v26, v23);
  uint64_t v43 = lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs();
  uint64_t v44 = v140;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v130 = v26;
  uint64_t v131 = v24 + 8;
  long long v127 = v45;
  v45(v26, v23);
  uint64_t v46 = v141;
  (*(void (**)(char *, char *, uint64_t))(v141 + 32))(&v34[*(int *)(v32 + 44)], v44, v139);
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator((uint64_t)v34, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  int v113 = 0;
  uint64_t v47 = *(int *)(v32 + 44);
  uint64_t v48 = (uint64_t)v38;
  uint64_t v49 = &v38[v47];
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  uint64_t v141 = v46 + 16;
  int v134 = (void (**)(char *, uint64_t))(v46 + 8);
  uint64_t v135 = v50;
  int v126 = (void (**)(char *))(v114 + 2);
  uint64_t v132 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v114 + 7);
  long long v125 = (unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 6);
  uint64_t v115 = (void (**)(char *, char *, uint64_t))(v114 + 4);
  ++v114;
  while (1)
  {
    uint64_t v51 = v139;
    uint64_t v52 = v140;
    v135(v140, v49, v139);
    uint64_t v53 = v136;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x263F067B8]);
    char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v55 = *v134;
    (*v134)(v53, v51);
    v55(v52, v51);
    if (v54) {
      break;
    }
    int v56 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v57 = v133;
    uint64_t v58 = v138;
    (*v126)(v133);
    v56(v143, 0);
    uint64_t v59 = v130;
    v128(v130, v48, v23);
    dispatch thunk of Collection.formIndex(after:)();
    v127(v59, v23);
    (*v132)(v57, 0, 1, v58);
    if ((*v125)(v57, 1, v58) == 1) {
      goto LABEL_19;
    }
    uint64_t v60 = v49;
    uint64_t v61 = v43;
    uint64_t v62 = v48;
    uint64_t v63 = (uint64_t)v124;
    (*v115)(v124, v57, v58);
    uint64_t v64 = v119;
    uint64_t v65 = v121;
    v117(v119, v137, v121);
    uint64_t v66 = v123;
    char v67 = specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(&v144);
    uint64_t v68 = v122;
    AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)(v63, v66, v67 & 1, v122);
    v116(v64, v65);
    type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
    uint64_t v70 = v69;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v69 - 8) + 48))(v68, 1, v69) == 1)
    {
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?);
      (*v114)(v63, v58);
      uint64_t v48 = v62;
      goto LABEL_6;
    }
    uint64_t v71 = *v68;
    uint64_t v72 = (uint64_t)v68 + *(int *)(v70 + 48);
    uint64_t v73 = v111;
    uint64_t v74 = v110;
    uint64_t v75 = (uint64_t)v110 + *(int *)(v111 + 48);
    *(void *)uint64_t v110 = v71;
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v72, v75, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
    double v76 = *v74;
    uint64_t v77 = v112;
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator((uint64_t)v74 + *(int *)(v73 + 48), v112, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
    uint64_t v48 = v62;
    if (v39 >= v76)
    {
      uint64_t v84 = v108;
      uint64_t v85 = v124;
      AttributedString.Runs.Run.range.getter();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      *(&v103 - 2) = v87;
      swift_getKeyPath();
      int v113 = 1;
      char v142 = 1;
      lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      long long v88 = (void (*)(char *, void))AttributedString.subscript.modify();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
      AttributedSubstring.subscript.setter();
      v88(v143, 0);
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v84, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v77, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      (*v114)(v85, v138);
LABEL_6:
      uint64_t v43 = v61;
      uint64_t v49 = v60;
    }
    else
    {
      uint64_t v78 = v106;
      outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v77, v106, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      uint64_t v79 = v77;
      uint64_t v81 = v80;
      int v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48))(v78, 1, v80);
      uint64_t v43 = v61;
      uint64_t v83 = v138;
      if (v82 == 1)
      {
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v78, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v79, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
        (*v114)(v124, v83);
        int v113 = 1;
        uint64_t v49 = v60;
      }
      else
      {
        uint64_t v89 = v78 + *(int *)(v81 + 48);
        uint64_t v90 = *(void *)v89;
        int v113 = *(unsigned __int8 *)(v89 + 8);
        uint64_t v91 = v105;
        uint64_t v92 = v104;
        uint64_t v93 = v78;
        uint64_t v94 = v104 + *(int *)(v105 + 48);
        outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v93, v104, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        *(void *)uint64_t v94 = v90;
        *(unsigned char *)(v94 + 8) = v113;
        uint64_t v95 = v92 + *(int *)(v91 + 48);
        double v96 = *(double *)v95;
        LOBYTE(v94) = *(unsigned char *)(v95 + 8);
        outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v92, v107, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
        uint64_t v49 = v60;
        if (v94)
        {
          if (one-time initialization token for zero != -1) {
            swift_once();
          }
          double v96 = *(double *)&static Calendar.Component.Magnitude.zero;
        }
        if (v39 >= v96)
        {
          uint64_t v97 = v107;
          uint64_t v98 = v108;
          outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v107, v108, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          uint64_t v99 = swift_getKeyPath();
          MEMORY[0x270FA5388](v99);
          *(&v103 - 2) = v100;
          swift_getKeyPath();
          int v113 = 1;
          char v142 = 1;
          lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
          int v101 = (void (*)(char *, void))AttributedString.subscript.modify();
          lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
          AttributedSubstring.subscript.setter();
          v101(v143, 0);
          outlined destroy of AnyCodable<SafelyCodableRequirement>(v98, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of AnyCodable<SafelyCodableRequirement>(v97, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of AnyCodable<SafelyCodableRequirement>(v112, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
          (*v114)(v124, v83);
        }
        else
        {
          outlined destroy of AnyCodable<SafelyCodableRequirement>(v107, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          outlined destroy of AnyCodable<SafelyCodableRequirement>(v112, (uint64_t (*)(void))type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?);
          (*v114)(v124, v83);
          int v113 = 1;
        }
      }
    }
  }
  (*v132)(v133, 1, 1, v138);
LABEL_19:
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v48, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v113 & 1;
}

uint64_t TimeDataFormatting.Resolvable.disableContentTransition(on:for:date:isLuminanceReduced:)(uint64_t a1, double *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v29 = a4;
  v28[1] = a1;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v28 - v15;
  uint64_t v17 = *(void *)(a5 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v6, a5, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, a5);
  char v33 = v29 & 1;
  uint64_t WitnessTable = swift_getWitnessTable();
  TimelineSchedule.nextEntry(after:mode:limit:)(a3, &v33, 60, 0, a5, WitnessTable, (uint64_t)v12);
  Date.timeIntervalSince(_:)();
  if (v22 >= v25)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    v28[-2] = v27;
    swift_getKeyPath();
    char v32 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
    AttributedString.subscript.setter();
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, a5);
}

uint64_t TimeDataFormatting.Resolvable.schedule.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v8 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v3, a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, a1);
}

void TimeDataFormatting.Resolvable.requiredFeatures.getter(_WORD *a1@<X8>)
{
  *a1 = word_26FA5C718;
}

uint64_t TimeDataFormatting.Resolvable.sizeVariant(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3 + *(int *)(a3 + 60);
  double v5 = *(double *)(v3 + *(int *)(a3 + 64));
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  uint64_t v11 = *(void *)(a3 + 48);
  uint64_t v12 = *a2;
  return static TimeDataFormatting.Resolvable.makeResolvable(from:format:secondsUpdateFrequencyBudget:sizeVariant:)(a1, v3, v4, &v12, v6, v7, v8, v9, v5, v11) & 1;
}

uint64_t TimeDataFormatting.Resolvable.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v27 - v19, v3 + *(int *)(v17 + 60), v11, v16);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for StyledFormatStyle);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v29, (uint64_t)v31);
    uint64_t v27 = v14;
    uint64_t v20 = v6;
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v31, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a1, v21, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v20);
    outlined init with copy of AnyTrackedValue((uint64_t)v31, (uint64_t)v29);
    uint64_t v23 = (uint64_t)v27;
    swift_dynamicCast();
    double v24 = *(double *)(v3 + *(int *)(a2 + 64));
    uint64_t v25 = *(void *)(v3 + *(int *)(a2 + 72));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(v3, a2);
    uint64_t v28 = v25;
    TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)((uint64_t)v9, v23, &v28, v20, v11, *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), v3, v24);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    return outlined destroy of AnyTrackedValue?((uint64_t)v29, &lazy cache variable for type metadata for StyledFormatStyle?, &lazy cache variable for type metadata for StyledFormatStyle);
  }
}

void TimeDataFormatting.Resolvable.hash(into:)(uint64_t a1, uint64_t a2)
{
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if ((*(void *)(v2 + *(int *)(a2 + 64)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v2 + *(int *)(a2 + 64));
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = type metadata accessor for TimeDataFormatting.Configuration();
  TimeDataFormatting.Configuration.hash(into:)(a1, v6);
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 72)));
}

BOOL static TimeDataFormatting.Resolvable.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v12 = (int *)type metadata accessor for TimeDataFormatting.Resolvable(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && *(double *)(a1 + v12[16]) == *(double *)(a2 + v12[16])
    && (static TimeDataFormatting.Configuration.== infix(_:_:)(a1 + v12[17], a2 + v12[17], a3, a4, a5, a6) & 1) != 0)
  {
    return *(void *)(a1 + v12[18]) == *(void *)(a2 + v12[18]);
  }
  else
  {
    return 0;
  }
}

Swift::Int TimeDataFormatting.Resolvable.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  TimeDataFormatting.Resolvable.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

void protocol witness for ResolvableStringAttribute.requiredFeatures.getter in conformance TimeDataFormatting.Resolvable<A, B>(_WORD *a1@<X8>)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Resolvable<A, B>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  TimeDataFormatting.Resolvable.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static ResolvableStringAttributeRepresentation.encode(_:to:) in conformance TimeDataFormatting.Resolvable<A, B>(uint64_t a1, void *a2, uint64_t *a3)
{
  return static TimeDataFormatting.Resolvable.encode(_:to:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t static TimeDataFormatting.Resolvable.encode(_:to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[0] = a3;
  v17[1] = a4;
  void v17[2] = a5;
  void v17[3] = a6;
  v17[4] = a7;
  uint64_t v9 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17[-1] - v11;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = swift_getWitnessTable();
  AnyCodable.init<A>(_:)((uint64_t)v12, v9, WitnessTable, v14, v17);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
  type metadata accessor for AnyCodable<SafelyCodableRequirement>();
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>, (void (*)(uint64_t))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AnyCodable<SafelyCodableRequirement>);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t TimeDataFormatting.Resolvable.representation(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  char v11 = *v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v12((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v8);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v17, (uint64_t)v19);
    uint64_t v13 = v20;
    uint64_t v14 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    LOBYTE(v17[0]) = v11;
    (*(void (**)(long long *, uint64_t, uint64_t))(v14 + 48))(v17, v13, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    outlined destroy of AnyTrackedValue?((uint64_t)v17, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    a3[3] = a2;
    a3[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v12)(boxed_opaque_existential_1, v4, a2);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Resolvable<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static TimeDataFormatting.Resolvable.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v109 = a2;
  int v100 = a3;
  uint64_t v111 = a4;
  uint64_t v95 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  uint64_t v93 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for AttributedSubstring();
  uint64_t v91 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v90 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)();
  uint64_t v105 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v98 = (void (**)(char *, uint64_t, uint64_t))((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v97 = (char *)&v90 - v10;
  uint64_t v11 = type metadata accessor for AttributedString.Index();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v103 = v11;
  uint64_t v104 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v102 = (void (**)(char *, uint64_t, uint64_t))((char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  int v113 = (char *)&v90 - v15;
  type metadata accessor for Range<AttributedString.Index>?(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v108 = (uint64_t)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v115 = v19;
  uint64_t v107 = *((void *)v19 - 1);
  MEMORY[0x270FA5388](v19);
  double v96 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  int v101 = (char *)&v90 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v99 = (uint64_t)&v90 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v106 = (uint64_t)&v90 - v26;
  type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?(0);
  MEMORY[0x270FA5388](v27 - 8);
  int v29 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v30 = *(void (***)(char *, uint64_t, uint64_t))(v112 - 8);
  MEMORY[0x270FA5388](v112);
  uint64_t v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  uint64_t v34 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (uint64_t)&v90 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?(0);
  MEMORY[0x270FA5388](v37 - 8);
  double v39 = (char *)&v90 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>??(0);
  double v41 = MEMORY[0x270FA5388](v40 - 8);
  uint64_t v43 = (char *)&v90 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void (**)(double))(v17 + 56);
  float64x2_t v114 = v43;
  v44(v41);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  int v45 = v34[6](v39, 1, v33);
  if (v45 != 1)
  {
    v34[2]((char *)v36, (uint64_t)v39, v33);
    int v49 = ((uint64_t (*)(uint64_t, uint64_t))v34[11])(v36, v33);
    uint64_t v47 = (uint64_t)v29;
    if (v49 == *MEMORY[0x263F064F0])
    {
      uint64_t v46 = 0x4122750000000000;
      uint64_t v48 = v112;
      goto LABEL_20;
    }
    uint64_t v48 = v112;
    if (v49 == *MEMORY[0x263F064E0])
    {
      uint64_t v46 = 0x40F5180000000000;
      goto LABEL_20;
    }
    if (v49 == *MEMORY[0x263F064E8])
    {
      uint64_t v46 = 0x40AC200000000000;
      goto LABEL_20;
    }
    if (v49 == *MEMORY[0x263F064F8])
    {
      uint64_t v46 = 0x404E000000000000;
      goto LABEL_20;
    }
    uint64_t v46 = 1.0;
    if (v49 == *MEMORY[0x263F06500]) {
      goto LABEL_20;
    }
    if (v49 == *MEMORY[0x263F064D0])
    {
      uint64_t v46 = 0x3EB0C6F7A0B5ED8DLL;
      goto LABEL_20;
    }
    if (v49 == *MEMORY[0x263F064D8])
    {
      uint64_t v46 = 0x3F50624DD2F1A9FCLL;
      goto LABEL_20;
    }
    if (v49 == *MEMORY[0x263F064C8])
    {
      uint64_t v46 = 0x3E112E0BE826D695;
      goto LABEL_20;
    }
    if (one-time initialization token for max != -1) {
      goto LABEL_40;
    }
    goto LABEL_19;
  }
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?);
  uint64_t v46 = 0;
  uint64_t v47 = (uint64_t)v29;
  uint64_t v48 = v112;
  while (1)
  {
    v30[2](v32, a1, v48);
    double v39 = v115;
    if (v45 == 1)
    {
      uint64_t v50 = swift_getKeyPath();
      MEMORY[0x270FA5388](v50);
      *(&v90 - 2) = v51;
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
      AttributedString.Runs.Run.subscript.getter();
      swift_release();
      uint64_t v52 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v47, 1, v52) == 1)
      {
        ((void (*)(char *, uint64_t))v30[1])(v32, v48);
        outlined destroy of AnyCodable<SafelyCodableRequirement>(v47, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?);
        outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
        type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
        return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v111, 1, 1, v54);
      }
      AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.magnitude.getter(&v117);
      ((void (*)(char *, uint64_t))v30[1])(v32, v48);
      uint64_t v46 = v117;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v47, v52);
    }
    else
    {
      ((void (*)(char *, uint64_t))v30[1])(v32, v48);
    }
    uint64_t v56 = v108;
    uint64_t v57 = v107;
    uint64_t v58 = (uint64_t)v114;
    specialized getter of decimalSeparatorRange #1 in AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)((uint64_t)v114, v109, v110, a1, v108);
    int v59 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v57 + 48))(v56, 1, v39);
    uint64_t v60 = v113;
    if (v59 == 1)
    {
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v58, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v56, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      uint64_t v62 = v61;
      uint64_t v63 = v111;
      uint64_t v64 = (char *)v111 + *(int *)(v61 + 48);
      *uint64_t v111 = v46;
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 1, 1, v65);
      uint64_t v66 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
      char v67 = v63;
      return v66(v67, 0, 1, v62);
    }
    uint64_t v68 = v106;
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v56, v106, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    uint64_t v69 = v68 + *((int *)v39 + 9);
    uint64_t v47 = v104;
    uint64_t v34 = (uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 16);
    uint64_t v32 = *(char **)(v104 + 16);
    uint64_t v70 = v60;
    uint64_t v36 = (uint64_t)v60;
    uint64_t v33 = v103;
    ((void (*)(char *, uint64_t, uint64_t))v32)(v70, v69, v103);
    a1 = (uint64_t)v101;
    AttributedString.Runs.Run.range.getter();
    uint64_t v30 = v102;
    ((void (*)(void, uint64_t, uint64_t))v32)(v102, a1 + *((int *)v39 + 9), v33);
    outlined destroy of AnyCodable<SafelyCodableRequirement>(a1, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
    int v45 = v33;
    if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
    {
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v71 = v105;
    uint64_t v72 = v97;
    uint64_t v73 = &v97[*(int *)(v105 + 48)];
    uint64_t v74 = v32;
    uint64_t v32 = *(char **)(v47 + 32);
    ((void (*)(char *, char *, uint64_t))v32)(v97, v113, v33);
    uint64_t v112 = (uint64_t)v73;
    ((void (*)(char *, void, uint64_t))v32)(v73, v30, v33);
    uint64_t v30 = v98;
    uint64_t v75 = (char *)v98 + *(int *)(v71 + 48);
    ((void (*)(void, char *, uint64_t))v74)(v98, v72, v33);
    ((void (*)(char *, char *, uint64_t))v74)(v75, v73, v33);
    uint64_t v76 = (uint64_t)v96;
    ((void (*)(char *, void, uint64_t))v32)(v96, v30, v33);
    uint64_t v77 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v47 + 8);
    v47 += 8;
    uint64_t v34 = v77;
    ((void (*)(char *, uint64_t))v77)(v75, v33);
    double v39 = v115;
    uint64_t v78 = (char *)v30 + *(int *)(v105 + 48);
    ((void (*)(void, char *, uint64_t))v32)(v30, v72, v33);
    ((void (*)(char *, uint64_t, uint64_t))v32)(v78, v112, v33);
    ((void (*)(uint64_t, char *, uint64_t))v32)(v76 + *((int *)v39 + 9), v78, v33);
    ((void (*)(void (**)(char *, uint64_t, uint64_t), uint64_t))v77)(v30, v33);
    uint64_t v48 = v99;
    outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v76, v99, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    if ((v100 & 1) == 0)
    {
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v106, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
      type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
      uint64_t v62 = v87;
      int v82 = v111;
      uint64_t v83 = (uint64_t)v111 + *(int *)(v87 + 48);
      *uint64_t v111 = v46;
      type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
      uint64_t v85 = v88;
      uint64_t v89 = v83 + *(int *)(v88 + 48);
      outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v48, v83, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      *(void *)uint64_t v89 = 0;
      *(unsigned char *)(v89 + 8) = 1;
      goto LABEL_36;
    }
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    uint64_t v79 = v90;
    AttributedString.subscript.getter();
    a1 = (uint64_t)v93;
    AttributedSubstring.characters.getter();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v79, v92);
    int v45 = a1;
    uint64_t v36 = AttributedString.CharacterView._count.getter();
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(a1, v95);
    if ((v36 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    swift_once();
LABEL_19:
    uint64_t v46 = static Calendar.Component.Magnitude.max;
    ((void (*)(uint64_t, uint64_t))v34[1])(v36, v33);
LABEL_20:
    ((void (*)(char *, uint64_t))v34[1])(v39, v33);
  }
  double v80 = *(double *)&v46;
  if (v36)
  {
    double v80 = *(double *)&v46;
    do
    {
      double v80 = v80 / 10.0;
      --v36;
    }
    while (v36);
  }
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v106, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
  type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)();
  uint64_t v62 = v81;
  int v82 = v111;
  uint64_t v83 = (uint64_t)v111 + *(int *)(v81 + 48);
  *uint64_t v111 = v46;
  type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)();
  uint64_t v85 = v84;
  uint64_t v86 = v83 + *(int *)(v84 + 48);
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v48, v83, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  *(double *)uint64_t v86 = v80;
  *(unsigned char *)(v86 + 8) = 0;
LABEL_36:
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v83, 0, 1, v85);
  uint64_t v66 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
  char v67 = v82;
  return v66(v67, 0, 1, v62);
}

uint64_t AttributedString.redactNumbers(in:)(void (**a1)(void, uint64_t))
{
  uint64_t v60 = a1;
  type metadata accessor for Range<AttributedString.Index>??(0, &lazy cache variable for type metadata for AttributedString.Index?, MEMORY[0x263F067E8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v45 - v2;
  uint64_t v4 = type metadata accessor for AttributedString.Index();
  uint64_t v48 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v45 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v45 - v7;
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  uint64_t v58 = (char *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v11 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AttributedSubstring();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, MEMORY[0x263F8DF80]);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v56 = (uint64_t)&v45 - v19;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  uint64_t v57 = (void (**)(void, uint64_t))(v20 - 8);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v45 - v23;
  type metadata accessor for Range<AttributedString.Index>(0);
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
  AttributedString.subscript.getter();
  AttributedSubstring.characters.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v25 = v46;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v13, v46);
  uint64_t v26 = (uint64_t)v58;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v54 = v13;
  uint64_t v27 = v13;
  uint64_t v28 = v48;
  v53(v27, v25);
  uint64_t v29 = (uint64_t)v10;
  uint64_t v30 = v56;
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v29, v56, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v31 = v55;
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v30, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v32 = v30 + *(int *)(v26 + 48);
  uint64_t v33 = v47;
  int v59 = v28[2];
  uint64_t v60 = (void (**)(void, uint64_t))(v28 + 2);
  ((void (*)(char *, uint64_t, uint64_t))v59)(v47, v32, v4);
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v30, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v34 = v57;
  uint64_t v35 = (char *)v31 + *((int *)v57 + 11);
  uint64_t v51 = v28[4];
  uint64_t v52 = (void (**)(void, uint64_t))(v28 + 4);
  ((void (*)(char *, char *, uint64_t))v51)(v35, v33, v4);
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator((uint64_t)v31, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  uint64_t v36 = &v24[*((int *)v34 + 11)];
  uint64_t v37 = *((int *)v58 + 11);
  uint64_t v58 = v24;
  uint64_t v38 = &v24[v37];
  uint64_t v49 = lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  uint64_t v50 = v38;
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28[7])(v3, 1, 1, v4);
  }
  else
  {
    uint64_t v56 = lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    uint64_t v57 = (void (**)(void, uint64_t))(v28 + 7);
    uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 6);
    uint64_t v48 = v28 + 1;
    double v39 = v45;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      ((void (*)(char *, char *, uint64_t))v59)(v3, v36, v4);
      uint64_t v40 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v57;
      ((void (*)(char *, void, uint64_t, uint64_t))*v57)(v3, 0, 1, v4);
      if ((*v55)(v3, 1, v4) == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v51)(v39, v3, v4);
      double v41 = v54;
      AttributedString.characters.getter();
      AttributedString.CharacterView.subscript.getter();
      v53(v41, v25);
      char v42 = Character.isNumber.getter();
      swift_bridgeObjectRelease();
      if (v42)
      {
        ((void (*)(char *, char *, uint64_t))v59)(v47, v39, v4);
        uint64_t v43 = (void (*)(char *, void))AttributedString.characters.modify();
        AttributedString.CharacterView.subscript.setter();
        v43(v61, 0);
      }
      (*v48)(v39, v4);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v40(v3, 1, 1, v4);
        return outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
    }
  }
  return outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t redact #1 (_:) in AttributedString.redact(for:locale:)(void (**a1)(void, uint64_t), char a2, uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?)();
  uint64_t v44 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v43 = (char *)&v39 - v17;
  uint64_t v18 = type metadata accessor for AttributedSubstring();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  MEMORY[0x270FA5388](v22);
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = (char *)&v39 - v24;
  if ((a2 & 1) == 0) {
    return AttributedString.redactNumbers(in:)(a1);
  }
  double v41 = a1;
  char v42 = v12;
  uint64_t v40 = v7;
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?((uint64_t)a1, (uint64_t)&v39 - v24, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  *(&v39 - 2) = v27;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
  AttributedString.subscript.getter();
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);
  uint64_t v28 = (uint64_t)v43;
  AttributedSubstring.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v30 = v46;
  uint64_t v29 = v47;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v15, *MEMORY[0x263F06458], v47);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  uint64_t v31 = v45;
  uint64_t v32 = v45 + *(int *)(v44 + 48);
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v28, v45, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?((uint64_t)v15, v32, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v33(v31, 1, v29) != 1)
  {
    uint64_t v35 = (uint64_t)v42;
    outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v31, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    if (v33(v32, 1, v29) != 1)
    {
      uint64_t v36 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v40, v32, v29);
      lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component, MEMORY[0x263F06460]);
      char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v38 = *(void (**)(char *, uint64_t))(v30 + 8);
      v38(v36, v29);
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      outlined destroy of AnyCodable<SafelyCodableRequirement>(v28, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      v38((char *)v35, v29);
      uint64_t result = outlined destroy of AnyCodable<SafelyCodableRequirement>(v31, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
      if ((v37 & 1) == 0) {
        return result;
      }
      return AttributedString.redact(_:)((uint64_t)v41);
    }
    outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    outlined destroy of AnyCodable<SafelyCodableRequirement>(v28, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v35, v29);
    return outlined destroy of AnyCodable<SafelyCodableRequirement>(v31, (uint64_t (*)(void))type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
  }
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v28, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  if (v33(v32, 1, v29) != 1) {
    return outlined destroy of AnyCodable<SafelyCodableRequirement>(v31, (uint64_t (*)(void))type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
  }
  outlined destroy of AnyCodable<SafelyCodableRequirement>(v31, (uint64_t (*)(void))type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?);
  return AttributedString.redact(_:)((uint64_t)v41);
}

uint64_t AttributedString.redact(_:)(uint64_t a1)
{
  uint64_t v52 = a1;
  type metadata accessor for Range<AttributedString.Index>??(0, &lazy cache variable for type metadata for AttributedString.Index?, MEMORY[0x263F067E8]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v44 - v3;
  uint64_t v5 = type metadata accessor for AttributedString.Index();
  uint64_t v45 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  uint64_t v47 = v7 - 8;
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v51 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttributedSubstring();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for DefaultIndices<AttributedString.CharacterView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>, MEMORY[0x263F8DF80]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v44 - v17;
  type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(0);
  uint64_t v46 = v19 - 8;
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v44 = (uint64_t)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v55 = (uint64_t)&v44 - v22;
  type metadata accessor for Range<AttributedString.Index>(0);
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
  uint64_t v50 = v1;
  AttributedString.subscript.getter();
  AttributedSubstring.characters.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = v51;
  uint64_t v24 = (uint64_t)v9;
  uint64_t v25 = v9;
  uint64_t v26 = v54;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v25, v11, v54);
  uint64_t v27 = v47;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v29 = v45;
  v28(v11, v26);
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v24, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v30 = v44;
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?((uint64_t)v18, v44, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v31 = &v18[*(int *)(v27 + 48)];
  uint64_t v32 = v53;
  uint64_t v51 = *(void *)(v29 + 16);
  uint64_t v52 = v29 + 16;
  ((void (*)(char *, char *, uint64_t))v51)(v53, v31, v5);
  outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v33 = v46;
  uint64_t v34 = v30 + *(int *)(v46 + 44);
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  uint64_t v49 = v29 + 32;
  v48(v34, v32, v5);
  uint64_t v35 = v55;
  outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v30, v55, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
  uint64_t v36 = v35 + *(int *)(v33 + 44);
  uint64_t v37 = v35 + *(int *)(v27 + 44);
  uint64_t v46 = lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  uint64_t v47 = v37;
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v4, 1, 1, v5);
  }
  else
  {
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    uint64_t v40 = v53;
    while (1)
    {
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      ((void (*)(char *, uint64_t, uint64_t))v51)(v4, v36, v5);
      double v41 = *v38;
      (*v38)(v4, 0, 1, v5);
      if ((*v39)(v4, 1, v5) == 1) {
        break;
      }
      v48((uint64_t)v40, v4, v5);
      char v42 = (void (*)(char *, void))AttributedString.characters.modify();
      AttributedString.CharacterView.subscript.setter();
      v42(v56, 0);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v41(v4, 1, 1, v5);
        return outlined destroy of AnyCodable<SafelyCodableRequirement>(v55, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
      }
    }
  }
  return outlined destroy of AnyCodable<SafelyCodableRequirement>(v55, (uint64_t (*)(void))type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator);
}

uint64_t specialized getter of localeUsesDecimalSystem #1 in AttributedString.disableContentTransition(for:locale:)(unsigned char *a1)
{
  uint64_t v2 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - v7;
  int v9 = *a1;
  if (v9 == 2)
  {
    Locale.numberingSystem.getter();
    Locale.NumberingSystem.init(_:)();
    char v10 = MEMORY[0x24C521830](v8, v5);
    uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
    v11(v5, v2);
    v11(v8, v2);
    swift_beginAccess();
    *a1 = v10 & 1;
  }
  else
  {
    char v10 = v9 & 1;
  }
  return v10 & 1;
}

uint64_t specialized getter of decimalSeparatorRange #1 in AttributedString.magnitude(of:locale:localeUsesDecimalSystem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v55 = a3;
  uint64_t v60 = a2;
  uint64_t v62 = a5;
  uint64_t v6 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttributedSubstring();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v8);
  int v59 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v61 = v10;
  uint64_t v58 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>?(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>??(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v45 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v45 - v25;
  uint64_t v27 = a1;
  outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(a1, (uint64_t)&v45 - v25, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v28((uint64_t)v26, 1, v14) == 1)
  {
    uint64_t v46 = v28;
    uint64_t v47 = v23;
    uint64_t v29 = v59;
    uint64_t v48 = v17;
    uint64_t v49 = v20;
    uint64_t v50 = v27;
    outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
    uint64_t v30 = Locale.decimalSeparator.getter();
    if (v31)
    {
      uint64_t v32 = v30;
      uint64_t v33 = v31;
      AttributedString.Runs.Run.range.getter();
      lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
      AttributedString.subscript.getter();
      outlined destroy of AnyCodable<SafelyCodableRequirement>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      uint64_t v34 = v51;
      AttributedSubstring.characters.getter();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v54);
      uint64_t v63 = v32;
      uint64_t v64 = v33;
      lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v35 = (uint64_t)v47;
      uint64_t v36 = v57;
      BidirectionalCollection<>.firstRange<A>(of:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v36);
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v38 = v14;
      v37(v35, 0, 1, v14);
      swift_bridgeObjectRelease();
      int v39 = v46(v35, 1, v14);
      uint64_t v40 = v62;
      uint64_t v42 = (uint64_t)v49;
      uint64_t v41 = v50;
      uint64_t v43 = (uint64_t)v48;
      if (v39 != 1)
      {
        outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v35, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
LABEL_8:
        outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(v43, v42, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
        v37(v42, 0, 1, v38);
        swift_beginAccess();
        outlined assign with take of Range<AttributedString.Index>??(v42, v41);
        return outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v43, v40, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
      }
    }
    else
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t v35 = (uint64_t)v47;
      uint64_t v38 = v14;
      v37((uint64_t)v47, 1, 1, v14);
      uint64_t v40 = v62;
      uint64_t v42 = (uint64_t)v49;
      uint64_t v41 = v50;
      uint64_t v43 = (uint64_t)v48;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v43, 1, 1, v61);
    outlined destroy of AnyCodable<SafelyCodableRequirement>(v35, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>??);
    goto LABEL_8;
  }
  uint64_t v43 = (uint64_t)v26;
  uint64_t v40 = v62;
  return outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(v43, v40, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>?);
}

double TimeDataFormattingContainer.init(resolvable:)@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v3, (uint64_t)v5);
    outlined init with take of ScrollStateRequest(v5, a1);
  }
  else
  {
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of AnyTrackedValue?((uint64_t)v3, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t TimeDataFormattingContainer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  static TimeDataFormatting.decode(from:)(a1, v16);
  if (!v2)
  {
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v16, (uint64_t)v10);
    if (v11)
    {
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
      type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
      if (swift_dynamicCast())
      {
        if (*((void *)&v13 + 1))
        {
          outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
          outlined init with take of ScrollStateRequest(&v12, (uint64_t)v15);
          outlined init with take of ScrollStateRequest(v15, (uint64_t)v17);
          long long v5 = v17[1];
          *(_OWORD *)a2 = v17[0];
          *(_OWORD *)(a2 + 16) = v5;
          *(void *)(a2 + 32) = v18;
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        }
      }
      else
      {
        uint64_t v14 = 0;
        long long v12 = 0u;
        long long v13 = 0u;
      }
    }
    else
    {
      outlined destroy of AnyTrackedValue?((uint64_t)v10, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v14 = 0;
    }
    outlined destroy of AnyTrackedValue?((uint64_t)&v12, &lazy cache variable for type metadata for SafelyCodableResolvable?, &lazy cache variable for type metadata for SafelyCodableResolvable);
    uint64_t v6 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, MEMORY[0x263F8DCC8]);
    *uint64_t v8 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SafelyCodableResolvable);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v8, *MEMORY[0x263F8DCB0], v6);
    swift_willThrow();
    outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TimeDataFormattingContainer.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, v3, v4);
}

uint64_t TimeDataFormattingContainer.text.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t TimeDataFormattingContainer.representation(for:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(*(void *)(v4 + 24) + 8) + 32))(&v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormattingContainer@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormattingContainer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormattingContainer(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(a1, v3, v4);
}

uint64_t TimeDataFormatting.Resolvable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v39 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v34 - v9;
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v44 = v15;
  uint64_t v45 = (char *)&v34 - v16;
  v49[0] = v17;
  v49[1] = v18;
  v49[2] = v15;
  v49[3] = v19;
  uint64_t v43 = v19;
  uint64_t v38 = v20;
  v49[4] = v20;
  type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v47 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v40 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v22 = (char *)&v34 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v46 = v22;
  uint64_t v23 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v23)
  {
    uint64_t v24 = (uint64_t)v13;
    uint64_t v26 = v42;
    uint64_t v25 = v43;
    uint64_t v27 = v41;
    LOBYTE(v49[0]) = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LOBYTE(v49[0]) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LOBYTE(v49[0]) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    double v29 = v28;
    uint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 16);
    uint64_t v35 = v24;
    v30(v24, v45, a2);
    uint64_t v31 = v39;
    uint64_t v32 = (uint64_t)v36;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v26, a3);
    v49[0] = 0;
    TimeDataFormatting.Resolvable.init(source:format:secondsUpdateFrequencyBudget:sizeVariant:)(v35, v32, v49, a2, a3, v44, v25, v38, v37, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, a3);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v45, a2);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v47);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TimeDataFormatting.Resolvable.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = v14;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v18 = v11;
  type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  uint64_t v9 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x656372756F73;
  }
  if (a1 == 1) {
    return 0x74616D726F66;
  }
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = (void *)a1[1];
  v5._uint64_t countAndFlagsBits = *a1;
  v5._object = v3;
  unint64_t result = TimeDataFormatting.Resolvable.CodingKeys.init(rawValue:)(v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  return TimeDataFormatting.Resolvable.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = TimeDataFormatting.Resolvable.CodingKeys.init(stringValue:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
  *a4 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.Resolvable<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.Resolvable<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TimeDataFormatting.Resolvable.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.Resolvable<A, B>(void *a1, uint64_t a2)
{
  return TimeDataFormatting.Resolvable.encode(to:)(a1, a2);
}

uint64_t *TimeDataFormatting.Resolvable<>.makeText()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(v7 + 16);
  double v9 = MEMORY[0x270FA5388](v7);
  long long v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v12 + 16))(v11, v1, v8, v9);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(a1 + 60), v3);
  return Text.init<A, B>(source:format:reducedLuminanceBudget:)((uint64_t)v11, (uint64_t)v6, *(void *)(v1 + *(int *)(a1 + 64)), 0);
}

uint64_t TimeDataFormatting.Resolvable<>.serialize(to:)(void *a1, uint64_t *a2, uint64_t a3)
{
  return static TimeDataFormatting.Resolvable.encode(_:to:)(v3, a1, a2[2], a2[3], a2[4], *(void *)(a3 + 8), a2[6]);
}

uint64_t TimeDataFormatting.Resolvable<>._representation(for:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  return (*(uint64_t (**)(uint64_t, char *, void, void))(a3 + 24))(v3, &v5, *(void *)(a2 + 16), *(void *)(a2 + 32));
}

uint64_t *protocol witness for SafelyCodableResolvable.makeText() in conformance <> TimeDataFormatting.Resolvable<A, B>(uint64_t a1)
{
  return TimeDataFormatting.Resolvable<>.makeText()(a1);
}

uint64_t protocol witness for SafelyCodableResolvable.serialize(to:) in conformance <> TimeDataFormatting.Resolvable<A, B>(void *a1, uint64_t *a2, uint64_t a3)
{
  return TimeDataFormatting.Resolvable<>.serialize(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t protocol witness for SafelyCodableResolvable._representation(for:) in conformance <> TimeDataFormatting.Resolvable<A, B>(char *a1, uint64_t a2, uint64_t a3)
{
  return TimeDataFormatting.Resolvable<>._representation(for:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t static SafelyCodableRequirement.checkedCodableType<A>(_:)(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t result = MEMORY[0x24C527CE0](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  }
  return result;
}

void type metadata accessor for (lower: AttributedString.Index, upper: AttributedString.Index)()
{
  if (!lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index))
  {
    type metadata accessor for AttributedString.Index();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index));
    }
  }
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index()
{
  return lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
}

void type metadata accessor for Calendar.Component.Magnitude?()
{
  if (!lazy cache variable for type metadata for Calendar.Component.Magnitude?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Calendar.Component.Magnitude?);
    }
  }
}

void type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)?(uint64_t a1)
{
}

void type metadata accessor for Range<AttributedString.Index>??(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)()
{
  if (!lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?))
  {
    type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (general: Calendar.Component.Magnitude, fractionals: (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
    }
  }
}

void type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(uint64_t a1)
{
}

void type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)()
{
  if (!lazy cache variable for type metadata for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?))
  {
    type metadata accessor for Range<AttributedString.Index>(255);
    type metadata accessor for Calendar.Component.Magnitude?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?));
    }
  }
}

void type metadata accessor for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?)()
{
  if (!lazy cache variable for type metadata for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?))
  {
    type metadata accessor for (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Calendar.Component.Magnitude, (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?));
    }
  }
}

void type metadata accessor for Range<AttributedString.Index>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AttributedString.Runs and conformance AttributedString.Runs()
{
  return lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
}

{
  return lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
}

void type metadata accessor for ReversedCollection<AttributedString.Runs>.Iterator(uint64_t a1)
{
}

void type metadata accessor for IndexingIterator<AttributedString.Runs>(uint64_t a1)
{
}

void type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field?(uint64_t a1)
{
}

void type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field?(uint64_t a1)
{
}

void type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(uint64_t a1)
{
}

uint64_t outlined destroy of AnyCodable<SafelyCodableRequirement>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245C3B554()
{
  return AttributeScopes.FoundationAttributes.measurement.getter();
}

uint64_t sub_245C3B578()
{
  return lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);
}

uint64_t sub_245C3B5C0()
{
  lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute, MEMORY[0x263F06498]);

  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_245C3B634()
{
  return 8;
}

uint64_t sub_245C3B640()
{
  return swift_release();
}

uint64_t sub_245C3B648(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_245C3B658()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_245C3B69C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_245C3B6A8()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute);
  }
  return result;
}

void sub_245C3B71C()
{
}

uint64_t sub_245C3B744()
{
  return 8;
}

uint64_t sub_245C3B750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DurationFieldAttribute>, MEMORY[0x263F06670]) & 1;
}

uint64_t sub_245C3B790(uint64_t a1, uint64_t a2)
{
  return keypath_hash_44Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DurationFieldAttribute>, MEMORY[0x263F06670]);
}

uint64_t keypath_hash_44Tm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_245C3B808()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

void sub_245C3B87C()
{
}

uint64_t sub_245C3B8A4()
{
  return 8;
}

uint64_t sub_245C3B8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>, MEMORY[0x263F06670]) & 1;
}

uint64_t sub_245C3B8F0(uint64_t a1, uint64_t a2)
{
  return keypath_hash_44Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>, MEMORY[0x263F06670]);
}

uint64_t type metadata accessor for TimeDataFormatting.Resolvable()
{
  return swift_getGenericMetadata();
}

uint64_t outlined init with copy of ResolvableStringAttribute?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyTrackedValue?(0, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TimeDataFormatting.Resolvable.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in TimeDataFormatting.Resolvable<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for TimeDataFormatting.Resolvable<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataFormatting.Resolvable<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in TimeDataFormatting.Resolvable<A, B>()
{
  return &protocol witness table for TimeDataFormatting;
}

uint64_t instantiation function for generic protocol witness table for <> TimeDataFormatting.Resolvable<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

ValueMetadata *type metadata accessor for TimeDataFormatting()
{
  return &type metadata for TimeDataFormatting;
}

uint64_t type metadata completion function for TimeDataFormatting.Resolvable()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      uint64_t v0 = type metadata accessor for TimeDataFormatting.Configuration();
      if (v4 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.Resolvable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = *(void *)(v6 + 64) + 7;
  int v10 = *(_DWORD *)(v4 + 80);
  uint64_t v11 = v10 & 0xF8 | 7;
  unint64_t v12 = (v11 + ((v9 + ((v5 + v7) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11;
  uint64_t v13 = v5 + 7;
  unint64_t v14 = (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  if ((v11 | v7) != 7 || ((v10 | *(_DWORD *)(v6 + 80)) & 0x100000) != 0 || v14 + v12 + 48 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    long long v18 = (uint64_t *)(v17 + (((v11 | v7) + 16) & ~(v11 | v7)));
    swift_retain();
  }
  else
  {
    uint64_t v19 = ~v7;
    uint64_t v36 = *(void *)(a3 + 24);
    uint64_t v37 = *(void *)(a3 + 16);
    unint64_t v38 = v14 + 40;
    uint64_t v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
    v20(a1, a2, v37);
    uint64_t v39 = a1;
    unint64_t v22 = ((unint64_t)a1 + v8) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v22, ((unint64_t)a2 + v8) & v19, v36);
    uint64_t v23 = (void *)((v9 + v22) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)((v9 + (((unint64_t)a2 + v8) & v19)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    uint64_t v25 = ((unint64_t)v23 + v11 + 8) & ~v11;
    uint64_t v26 = ((unint64_t)v24 + v11 + 8) & ~v11;
    v20((uint64_t *)v25, (uint64_t *)v26, v37);
    unint64_t v27 = (v13 + v25) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v13 + v26) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)(v28 + 24);
    *(void *)(v27 + 24) = v29;
    *(void *)(v27 + 32) = *(void *)(v28 + 32);
    (**(void (***)(unint64_t, unint64_t))(v29 - 8))(v27, v28);
    unint64_t v30 = (v27 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = *(void *)(v31 + 24);
    if (v32 < 0xFFFFFFFF)
    {
      long long v33 = *(_OWORD *)v31;
      long long v34 = *(_OWORD *)(v31 + 16);
      *(void *)(v30 + 32) = *(void *)(v31 + 32);
      *(_OWORD *)unint64_t v30 = v33;
      *(_OWORD *)(v30 + 16) = v34;
    }
    else
    {
      *(void *)(v30 + 24) = v32;
      *(void *)(v30 + 32) = *(void *)(v31 + 32);
      (**(void (***)(void))(v32 - 8))();
    }
    long long v18 = v39;
    *(void *)(v25 + v38) = *(void *)(v26 + v38);
  }
  return v18;
}

unint64_t destroy for TimeDataFormatting.Resolvable(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + a1;
  uint64_t v9 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v11);
  uint64_t v12 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  unint64_t v13 = (((*(void *)(v10 + 56) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8) & ~v12;
  v6(v13, v4);
  unint64_t v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v14);
  unint64_t result = (v14 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v9 + v12 + a1) & ~v12;
  uint64_t v14 = (v9 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 48) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v19 = v18 + 15;
  unint64_t v20 = (unint64_t)v16 + v18 + 15;
  unint64_t v21 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v20 & v21;
  unint64_t v23 = ((unint64_t)v17 + v19) & v21;
  v8(v20 & v21, v23, v6);
  unint64_t v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v9 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(v25 + 24);
  *(void *)(v24 + 24) = v26;
  *(void *)(v24 + 32) = *(void *)(v25 + 32);
  (**(void (***)(unint64_t, unint64_t))(v26 - 8))(v24, v25);
  unint64_t v27 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = *(void *)(v28 + 24);
  if (v29 < 0xFFFFFFFF)
  {
    long long v30 = *(_OWORD *)v28;
    long long v31 = *(_OWORD *)(v28 + 16);
    *(void *)(v27 + 32) = *(void *)(v28 + 32);
    *(_OWORD *)unint64_t v27 = v30;
    *(_OWORD *)(v27 + 16) = v31;
  }
  else
  {
    *(void *)(v27 + 24) = v29;
    *(void *)(v27 + 32) = *(void *)(v28 + 32);
    (**(void (***)(void))(v29 - 8))();
  }
  unint64_t v32 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(void *)(v22 + v32) = *(void *)(v23 + v32);
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v9 + v12 + a1) & ~v12;
  uint64_t v14 = (v9 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v19 = v18 + 15;
  unint64_t v20 = (unint64_t)v16 + v18 + 15;
  unint64_t v21 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v20 & v21;
  unint64_t v23 = ((unint64_t)v17 + v19) & v21;
  v8(v20 & v21, v23, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)((v9 + 7 + v23) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v24 = (((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (((v9 + 7 + v23) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = *(void *)(v25 + 24);
  if (*(void *)(v24 + 24) < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      *(void *)(v24 + 24) = v26;
      *(void *)(v24 + 32) = *(void *)(v25 + 32);
      (**(void (***)(unint64_t, unint64_t))(v26 - 8))((((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8, v25);
      goto LABEL_8;
    }
LABEL_7:
    long long v27 = *(_OWORD *)v25;
    long long v28 = *(_OWORD *)(v25 + 16);
    *(void *)(v24 + 32) = *(void *)(v25 + 32);
    *(_OWORD *)unint64_t v24 = v27;
    *(_OWORD *)(v24 + 16) = v28;
    goto LABEL_8;
  }
  if (v26 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((((v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8), (uint64_t *)v25);
LABEL_8:
  unint64_t v29 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(void *)(v22 + v29) = *(void *)(v23 + v29);
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v9 + v12 + a1) & ~v12;
  uint64_t v14 = (v9 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 32) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v19 = v18 + 15;
  unint64_t v20 = (unint64_t)v16 + v18 + 15;
  unint64_t v21 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v20 & v21;
  unint64_t v23 = ((unint64_t)v17 + v19) & v21;
  v8(v20 & v21, v23, v6);
  unint64_t v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v9 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(v25 + 32);
  long long v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v27;
  *(void *)(v24 + 32) = v26;
  unint64_t v28 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v31 = *(_OWORD *)v29;
  long long v30 = *(_OWORD *)(v29 + 16);
  *(void *)(v28 + 32) = *(void *)(v29 + 32);
  *(_OWORD *)unint64_t v28 = v31;
  *(_OWORD *)(v28 + 16) = v30;
  unint64_t v32 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(void *)(v22 + v32) = *(void *)(v23 + v32);
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.Resolvable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v9 + v12 + a1) & ~v12;
  uint64_t v14 = (v9 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v19 = v18 + 15;
  unint64_t v20 = (unint64_t)v16 + v18 + 15;
  unint64_t v21 = ~v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = v20 & v21;
  unint64_t v23 = ((unint64_t)v17 + v19) & v21;
  v8(v20 & v21, v23, v6);
  unint64_t v24 = (v9 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v9 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v24);
  long long v26 = *(_OWORD *)v25;
  long long v27 = *(_OWORD *)(v25 + 16);
  *(void *)(v24 + 32) = *(void *)(v25 + 32);
  *(_OWORD *)unint64_t v24 = v26;
  *(_OWORD *)(v24 + 16) = v27;
  unint64_t v28 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v28 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(v28);
  }
  unint64_t v29 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v30 = *(_OWORD *)v29;
  long long v31 = *(_OWORD *)(v29 + 16);
  *(void *)(v28 + 32) = *(void *)(v29 + 32);
  *(_OWORD *)unint64_t v28 = v30;
  *(_OWORD *)(v28 + 16) = v31;
  unint64_t v32 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  *(void *)(v22 + v32) = *(void *)(v23 + v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.Resolvable(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v5 + 84);
  }
  if (v12 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  uint64_t v16 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v17 = v10 + 7;
  if (v13 < a2)
  {
    unint64_t v18 = (((v17 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + ((v16 + ((v15 + (v14 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v16)
        + 48;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = a2 - v13 + 1;
    }
    if (v19 >= 0x10000) {
      unsigned int v20 = 4;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v19 < 0x100) {
      unsigned int v20 = 1;
    }
    if (v19 >= 2) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v18);
        if (!*((unsigned char *)a1 + v18)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v18);
        if (*(_WORD *)((char *)a1 + v18)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C3C998);
      case 4:
        int v22 = *(_DWORD *)((char *)a1 + v18);
        if (!v22) {
          break;
        }
LABEL_25:
        int v24 = v22 - 1;
        if ((v18 & 0xFFFFFFF8) != 0)
        {
          int v24 = 0;
          int v25 = *a1;
        }
        else
        {
          int v25 = 0;
        }
        return v13 + (v25 | v24) + 1;
      default:
        break;
    }
  }
  if (v6 == v13) {
    goto LABEL_29;
  }
  unint64_t v27 = ((unint64_t)a1 + v14) & ~v11;
  if (v9 >= v12)
  {
    long long v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    return v30(v27, v9, v7);
  }
  else
  {
    unint64_t v28 = (((v15 + v27) & 0xFFFFFFFFFFFFFFF8) + v16 + 8) & ~v16;
    if (v6 >= 0x7FFFFFFF)
    {
LABEL_29:
      long long v26 = *(uint64_t (**)(void))(v5 + 48);
      return v26();
    }
    unint64_t v29 = *(void *)(((v17 + v28) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v29 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    return (v29 + 1);
  }
}

double storeEnumTagSinglePayload for TimeDataFormatting.Resolvable(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= v9) {
    unsigned int v14 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v10 + v11;
  uint64_t v16 = v12 + 7;
  uint64_t v17 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  unint64_t v18 = (v17 + ((v12 + 7 + ((v10 + v11) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17;
  uint64_t v19 = v10 + 7;
  unint64_t v20 = (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  size_t v21 = v20 + v18 + 48;
  if (v14 >= a3)
  {
    int v25 = 0;
    int v26 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      uint64_t v27 = ~v11;
      switch(v25)
      {
        case 1:
          a1[v21] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v21] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_53;
        case 4:
          *(_DWORD *)&a1[v21] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (!a2) {
            return result;
          }
LABEL_33:
          if (v7 == v14) {
            goto LABEL_34;
          }
          unint64_t v32 = (unint64_t)&a1[v15] & v27;
          if (v9 >= v13)
          {
            long long v34 = *(void (**)(unint64_t))(v8 + 56);
            v34(v32);
          }
          else
          {
            a1 = (unsigned char *)((((v16 + v32) & 0xFFFFFFFFFFFFFFF8) + v17 + 8) & ~v17);
            if (v13 >= a2)
            {
              if (v7 >= 0x7FFFFFFF)
              {
LABEL_34:
                long long v31 = *(void (**)(unsigned char *))(v6 + 56);
                v31(a1);
              }
              else
              {
                unint64_t v35 = (unint64_t)&a1[v19] & 0xFFFFFFFFFFFFFFF8;
                if ((a2 & 0x80000000) != 0)
                {
                  double result = 0.0;
                  *(_OWORD *)(v35 + 8) = 0u;
                  *(_OWORD *)(v35 + 24) = 0u;
                  *(void *)unint64_t v35 = a2 ^ 0x80000000;
                }
                else
                {
                  *(void *)(v35 + 24) = a2 - 1;
                }
              }
            }
            else if (v20 != -40)
            {
              int v33 = ~v13 + a2;
              bzero((void *)((((v16 + v32) & 0xFFFFFFFFFFFFFFF8) + v17 + 8) & ~v17), (v20 + 40));
              *(_DWORD *)a1 = v33;
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v22 = a3 - v14;
    if (v20 + v18 == -48) {
      unsigned int v23 = v22 + 1;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      int v24 = 4;
    }
    else {
      int v24 = 2;
    }
    if (v23 < 0x100) {
      int v24 = 1;
    }
    if (v23 >= 2) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    int v26 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (v21) {
    int v28 = 1;
  }
  else {
    int v28 = v26;
  }
  if (v21)
  {
    int v29 = ~v14 + a2;
    bzero(a1, v21);
    *(_DWORD *)a1 = v29;
  }
  switch(v25)
  {
    case 1:
      a1[v21] = v28;
      break;
    case 2:
      *(_WORD *)&a1[v21] = v28;
      break;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x245C3CCCCLL);
    case 4:
      *(_DWORD *)&a1[v21] = v28;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for TimeDataFormattingContainer(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t *assignWithCopy for TimeDataFormattingContainer(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for TimeDataFormattingContainer(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for TimeDataFormattingContainer()
{
  return &type metadata for TimeDataFormattingContainer;
}

unsigned char *storeEnumTagSinglePayload for TimeDataFormatting.Resolvable.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C3CE4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SafelyCodableRequirement()
{
  return &unk_26FA6B310;
}

uint64_t base witness table accessor for Equatable in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataFormatting.Resolvable<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)()
{
  return 3;
}

void type metadata accessor for DefaultIndices<AttributedString.CharacterView>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView()
{
  return lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
}

{
  return _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
}

unint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>;
  if (!lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>)
  {
    type metadata accessor for DefaultIndices<AttributedString.CharacterView>(255);
    lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance <> DefaultIndices<A>);
  }
  return result;
}

void type metadata accessor for ReversedCollection<DefaultIndices<AttributedString.CharacterView>>.Iterator(uint64_t a1)
{
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>()
{
  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>)
  {
    type metadata accessor for AttributeScopes.FoundationAttributes();
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute();
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.MeasurementAttribute>);
    }
  }
}

void type metadata accessor for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?)()
{
  if (!lazy cache variable for type metadata for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?))
  {
    type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?, AttributeScopes.FoundationAttributes.MeasurementAttribute.Component?));
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnyCodable<SafelyCodableRequirement> and conformance AnyCodable<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Range<AttributedString.Index>?(uint64_t a1)
{
}

void type metadata accessor for Range<AttributedString.Index>??(uint64_t a1)
{
}

uint64_t outlined init with copy of (range: Range<AttributedString.Index>, magnitude: Calendar.Component.Magnitude?)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Range<AttributedString.Index>??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<AttributedString.Index>??(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ReversedCollection<AttributedString.Runs>.Iterator(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_245C3D320@<X0>(unsigned char *a1@<X8>)
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy();
  uint64_t result = AttributeDynamicLookup.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_245C3D36C()
{
  return 8;
}

uint64_t sub_245C3D378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245C3D3B8(uint64_t a1, uint64_t a2)
{
  return keypath_hash_44Tm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.InterpolationStrategy>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy);
  }
  return result;
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.DateFieldAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for KeyPath();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

double _ColorInvertEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(unsigned char *)(v2 + 132) = 16;
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245C3D534()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t static _ColorInvertEffect.== infix(_:_:)()
{
  return 1;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorInvertEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(unsigned char *)(v2 + 132) = 16;
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.colorInvert()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _ColorInvertEffect);
}

unint64_t instantiation function for generic protocol witness table for _ColorInvertEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ColorInvertEffect and conformance _ColorInvertEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorInvertEffect and conformance _ColorInvertEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect;
  if (!lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorInvertEffect and conformance _ColorInvertEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ColorInvertEffect()
{
  return &type metadata for _ColorInvertEffect;
}

uint64_t sub_245C3D6BC()
{
  return swift_getWitnessTable();
}

float specialized static DefaultSystemColorDefinition_PhoneTV.value(for:environment:)(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v34);
    swift_release_n();
    swift_release_n();
    char v4 = v34;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v34);
    swift_release_n();
    swift_release_n();
    char v5 = v34;
    if ((v4 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    BloomFilter.init(hashValue:)(v10);
    uint64_t v11 = swift_retain_n();
    uint64_t v12 = specialized find1<A>(_:key:filter:)(v11, v33);
    if (v12) {
      int v13 = *(unsigned __int8 *)(v12 + 72);
    }
    else {
      int v13 = 0;
    }
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
    BloomFilter.init(hashValue:)(v14);
    uint64_t v15 = swift_retain_n();
    uint64_t v16 = specialized find1<A>(_:key:filter:)(v15, v33);
    if (v16) {
      char v5 = *(unsigned char *)(v16 + 72);
    }
    else {
      char v5 = 0;
    }
    swift_release_n();
    if (!v13)
    {
LABEL_3:
      float result = 0.0;
      float v7 = 0.0;
      float v8 = 0.0;
      switch(v2)
      {
        case 1:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.78824;
            int v17 = 1045483729;
            goto LABEL_103;
          }
          LOBYTE(v33) = 0;
          float v7 = 0.58431;
          goto LABEL_129;
        case 2:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.69804;
            int v17 = 1050714273;
            goto LABEL_103;
          }
          LOBYTE(v33) = 0;
          float v7 = 0.8;
          goto LABEL_129;
        case 3:
          LOBYTE(v33) = 0;
          if (v5)
          {
            float result = 0.14118;
            float v7 = 0.54118;
            int v9 = 1047852277;
          }
          else
          {
            float result = 0.20392;
            float v7 = 0.78039;
            int v9 = 1051898547;
          }
          goto LABEL_131;
        case 4:
          LOBYTE(v33) = 0;
          if (v5)
          {
            float v7 = 0.5098;
            int v9 = 1058642330;
          }
          else
          {
            float result = 0.18824;
            float v7 = 0.6902;
            int v9 = 1061668808;
          }
          goto LABEL_131;
        case 5:
          LOBYTE(v33) = 0;
          if (v5)
          {
            float result = 0.047059;
            float v7 = 0.50588;
            int v9 = 1056372471;
          }
          else
          {
            float v7 = 0.78039;
            int v9 = 1061076671;
          }
          goto LABEL_131;
        case 6:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float v7 = 0.44314;
            int v9 = 1059366053;
            goto LABEL_131;
          }
          LOBYTE(v33) = 0;
          float result = 0.19608;
          int v27 = 1059958190;
          goto LABEL_123;
        case 7:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float v7 = 0.25098;
            int v9 = 1063116254;
            goto LABEL_131;
          }
          LOBYTE(v33) = 0;
          float v7 = 0.47843;
          float v8 = 1.0;
          return specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v33, result, v7, v8);
        case 8:
          LOBYTE(v33) = 0;
          if (v5)
          {
            float result = 0.21176;
            float v7 = 0.20392;
            int v9 = 1059300260;
          }
          else
          {
            float result = 0.3451;
            float v7 = 0.33725;
            int v9 = 1062655703;
          }
          goto LABEL_131;
        case 9:
          LOBYTE(v33) = 0;
          if (v5)
          {
            float result = 0.53725;
            float v7 = 0.26667;
            int v9 = 1059826604;
          }
          else
          {
            float result = 0.68627;
            float v7 = 0.32157;
            int v9 = 1063182047;
          }
          goto LABEL_131;
        case 10:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.82745;
            int v22 = 1030811889;
            goto LABEL_75;
          }
          LOBYTE(v33) = 0;
          float v7 = 0.17647;
          int v32 = 1051372203;
          goto LABEL_128;
        case 11:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.49804;
            int v22 = 1053477579;
LABEL_75:
            float v7 = *(float *)&v22;
            int v9 = 1049266827;
          }
          else
          {
            LOBYTE(v33) = 0;
            float result = 0.63529;
            float v7 = 0.51765;
            int v9 = 1052556477;
          }
          goto LABEL_131;
        case 12:
          if ((v5 & 1) == 0) {
            goto LABEL_78;
          }
          LOBYTE(v33) = 0;
          float result = 0.42353;
          float v8 = 0.43922;
          goto LABEL_145;
        case 13:
        case 17:
          return result;
        case 14:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.23529;
            float v8 = 0.26275;
            goto LABEL_145;
          }
          LOBYTE(v33) = 0;
          float result = 0.23529;
          int v28 = 1049003655;
          goto LABEL_133;
        case 15:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.23529;
            int v18 = 1049003655;
            goto LABEL_83;
          }
          LOBYTE(v33) = 0;
          float result = 0.23529;
          int v29 = 1049003655;
          goto LABEL_135;
        case 16:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.23529;
            int v19 = 1049003655;
            goto LABEL_86;
          }
          LOBYTE(v33) = 0;
          float result = 0.23529;
          int v31 = 1049003655;
          goto LABEL_137;
        case 18:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.47059;
            float v8 = 0.50196;
            goto LABEL_145;
          }
          LOBYTE(v33) = 0;
          float v23 = 0.47059;
          goto LABEL_139;
        case 19:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float v25 = 0.47059;
            goto LABEL_114;
          }
          LOBYTE(v33) = 0;
          float result = 0.47059;
          int v30 = 1056997505;
          goto LABEL_144;
        case 20:
          if ((v5 & 1) == 0)
          {
            LOBYTE(v33) = 0;
            float v24 = 0.47059;
            goto LABEL_141;
          }
          LOBYTE(v33) = 0;
          float v23 = 0.46275;
LABEL_139:
          float result = v23;
          float v8 = 0.50196;
          goto LABEL_145;
        case 21:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float v24 = 0.4549;
LABEL_141:
            float result = v24;
            float v8 = 0.50196;
          }
          else
          {
            LOBYTE(v33) = 0;
            float result = 0.4549;
            float v8 = 0.50196;
          }
          goto LABEL_145;
        default:
          if (v5)
          {
            LOBYTE(v33) = 0;
            float result = 0.84314;
            int v9 = 1034463401;
            goto LABEL_131;
          }
          LOBYTE(v33) = 0;
          float v7 = 0.23137;
          int v32 = 1044431041;
LABEL_128:
          float v8 = *(float *)&v32;
LABEL_129:
          float result = 1.0;
          break;
      }
      return specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v33, result, v7, v8);
    }
  }
  float result = 1.0;
  float v8 = 1.0;
  switch(v2)
  {
    case 1:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float v7 = 0.70196;
        int v9 = 1048608897;
        goto LABEL_131;
      }
      LOBYTE(v33) = 0;
      int v26 = 1059037088;
      goto LABEL_98;
    case 2:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float v7 = 0.83137;
        int v9 = 1041799321;
      }
      else
      {
        LOBYTE(v33) = 0;
        int v26 = 1062655703;
LABEL_98:
        float v7 = *(float *)&v26;
        int v9 = 1025548449;
      }
      goto LABEL_131;
    case 3:
      LOBYTE(v33) = 0;
      float result = 0.18824;
      if (v5)
      {
        float v7 = 0.85882;
        int v9 = 1052161719;
      }
      else
      {
        float v7 = 0.81961;
        int v9 = 1051766961;
      }
      goto LABEL_131;
    case 4:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.36471;
        int v17 = 1063708391;
        goto LABEL_103;
      }
      LOBYTE(v33) = 0;
      float result = 0.25098;
      float v7 = 0.78431;
      int v9 = 1063313633;
      goto LABEL_131;
    case 5:
      LOBYTE(v33) = 0;
      float result = 0.38824;
      float v7 = 0.90196;
      int v9 = 1063445219;
      goto LABEL_131;
    case 6:
      LOBYTE(v33) = 0;
      if (v5)
      {
        float result = 0.43922;
        int v17 = 1062721496;
      }
      else
      {
        float result = 0.39216;
        int v17 = 1062392531;
      }
      goto LABEL_103;
    case 7:
      LOBYTE(v33) = 0;
      if (v5)
      {
        float result = 0.25098;
        int v17 = 1058839709;
      }
      else
      {
        float result = 0.039216;
        int v17 = 1057260677;
      }
      goto LABEL_103;
    case 8:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.4902;
        int v17 = 1056240885;
        goto LABEL_103;
      }
      LOBYTE(v33) = 0;
      float result = 0.36863;
      int v27 = 1052293305;
LABEL_123:
      float v7 = *(float *)&v27;
      int v9 = 1063708391;
      goto LABEL_131;
    case 9:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.8549;
        int v17 = 1057984400;
LABEL_103:
        float v7 = *(float *)&v17;
      }
      else
      {
        LOBYTE(v33) = 0;
        float result = 0.74902;
        float v7 = 0.35294;
        int v9 = 1064497907;
LABEL_131:
        float v8 = *(float *)&v9;
      }
      return specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v33, result, v7, v8);
    case 10:
      LOBYTE(v33) = 0;
      if (v5)
      {
        float v7 = 0.39216;
        int v9 = 1057129091;
      }
      else
      {
        float v7 = 0.21569;
        int v9 = 1052688063;
      }
      goto LABEL_131;
    case 11:
      LOBYTE(v33) = 0;
      if (v5)
      {
        float result = 0.7098;
        float v7 = 0.58039;
        int v9 = 1054003923;
      }
      else
      {
        float result = 0.67451;
        float v7 = 0.55686;
        int v9 = 1053872337;
      }
      goto LABEL_131;
    case 12:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.68235;
        float v8 = 0.69804;
      }
      else
      {
LABEL_78:
        LOBYTE(v33) = 0;
        float result = 0.55686;
        float v8 = 0.57647;
      }
      break;
    case 13:
    case 17:
      return result;
    case 14:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.92157;
        int v18 = 1064695286;
LABEL_83:
        float v8 = *(float *)&v18;
      }
      else
      {
        LOBYTE(v33) = 0;
        float result = 0.92157;
        int v28 = 1064695286;
LABEL_133:
        float v8 = *(float *)&v28;
      }
      break;
    case 15:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.92157;
        int v19 = 1064695286;
LABEL_86:
        float v8 = *(float *)&v19;
      }
      else
      {
        LOBYTE(v33) = 0;
        float result = 0.92157;
        int v29 = 1064695286;
LABEL_135:
        float v8 = *(float *)&v29;
      }
      break;
    case 16:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.92157;
        int v20 = 1064695286;
        goto LABEL_48;
      }
      LOBYTE(v33) = 0;
      float result = 0.92157;
      int v30 = 1064695286;
LABEL_144:
      float v8 = *(float *)&v30;
      break;
    case 18:
      LOBYTE(v33) = 0;
      float result = 0.47059;
      float v8 = 0.50196;
      break;
    case 19:
      if ((v5 & 1) == 0)
      {
        LOBYTE(v33) = 0;
        float v21 = 0.47059;
        goto LABEL_112;
      }
      LOBYTE(v33) = 0;
      float result = 0.47059;
      int v20 = 1056997505;
LABEL_48:
      float v8 = *(float *)&v20;
      break;
    case 20:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float v21 = 0.46275;
LABEL_112:
        float result = v21;
        float v8 = 0.50196;
      }
      else
      {
        LOBYTE(v33) = 0;
        float v25 = 0.46275;
LABEL_114:
        float result = v25;
        float v8 = 0.50196;
      }
      break;
    case 21:
      if (v5)
      {
        LOBYTE(v33) = 0;
        float result = 0.4549;
        float v8 = 0.50196;
      }
      else
      {
        LOBYTE(v33) = 0;
        float result = 0.4549;
        int v31 = 1056997505;
LABEL_137:
        float v8 = *(float *)&v31;
      }
      break;
    default:
      LOBYTE(v33) = 0;
      if (v5)
      {
        float v7 = 0.41176;
        int v9 = 1052951235;
      }
      else
      {
        float v7 = 0.27059;
        int v9 = 1047062761;
      }
      goto LABEL_131;
  }
LABEL_145:
  float v7 = result;
  return specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v33, result, v7, v8);
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(v1 + 34) == 1)
  {
    __int16 v4 = *(_WORD *)(v1 + 32);
    uint64_t v5 = *(void *)(v1 + 24);
    *(void *)a1 = *(void *)v1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = v4 & 1;
    *(unsigned char *)(a1 + 33) = HIBYTE(v4) & 1;
    return outlined retain of Environment<OpenURLAction>(v1, (void (*)(void, void, void, void, void, void))outlined copy of Environment<OpenURLAction>.Content);
  }
  else
  {
    outlined retain of Environment<OpenURLAction>(v1, (void (*)(void, void, void, void, void, void))outlined copy of Environment<OpenURLAction>.Content);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    float v8 = (void *)static Log.runtimeIssuesLog;
    os_log_type_t v9 = v7;
    if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v7))
    {
      Swift::Int v10 = v8;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v15[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x414C52556E65704FLL, 0xED00006E6F697463, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v12, -1, -1);
      MEMORY[0x24C527CC0](v11, -1, -1);
    }
    v16[0] = 0;
    v16[1] = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    int v13 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    Swift::Int v14 = static CoreGlue2.shared;
    v13(v16);

    swift_getAtKeyPath();
    outlined retain of Environment<OpenURLAction>(v2, (void (*)(void, void, void, void, void, void))outlined consume of Environment<OpenURLAction>.Content);
    swift_release();
    return swift_release();
  }
}

double specialized Environment.wrappedValue.getter()
{
  uint64_t v1 = (uint64_t)v0;
  if (v0[32] == 1) {
    return *(double *)v0;
  }
  swift_retain();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  __int16 v4 = (void *)static Log.runtimeIssuesLog;
  os_log_type_t v5 = v3;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v3))
  {
    unsigned int v6 = v4;
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    double v12 = *(double *)&v8;
    *(_DWORD *)os_log_type_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_245728000, v6, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v8, -1, -1);
    MEMORY[0x24C527CC0](v7, -1, -1);
  }
  v11[0] = 0;
  v11[1] = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  os_log_type_t v9 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  Swift::Int v10 = static CoreGlue2.shared;
  v9(v11);

  swift_getAtKeyPath();
  outlined release of Environment<EdgeInsets>(v1);
  swift_release();
  swift_release();
  return v12;
}

uint64_t LinkDestination.Configuration.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  __int16 v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t LinkDestination.Configuration.url.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  __int16 v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*LinkDestination.Configuration.url.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.Configuration.isSensitive.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LinkDestination.Configuration(0) + 20));
}

uint64_t LinkDestination.Configuration.isSensitive.setter(char a1)
{
  uint64_t result = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*LinkDestination.Configuration.isSensitive.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.Configuration.init(url:isSensitive:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkDestination.Configuration.CodingKeys()
{
  if (*v0) {
    return 0x7469736E65537369;
  }
  else {
    return 7107189;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkDestination.Configuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized LinkDestination.Configuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkDestination.Configuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkDestination.Configuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t LinkDestination.Configuration.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  os_log_type_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for LinkDestination.Configuration(0);
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys);
  }
  return result;
}

uint64_t LinkDestination.Configuration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<LinkDestination.Configuration.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v26 = v7;
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  os_log_type_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for LinkDestination.Configuration(0);
  MEMORY[0x270FA5388](v10);
  double v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  float v21 = v12;
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  char v28 = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
  uint64_t v15 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v6, v15);
  char v27 = 1;
  char v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v26);
  char v17 = v16 & 1;
  uint64_t v19 = (uint64_t)v21;
  uint64_t v18 = v22;
  v21[*(int *)(v10 + 20)] = v17;
  outlined init with copy of LinkDestination.Configuration(v19, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of LinkDestination.Configuration(v19);
}

void type metadata accessor for KeyedEncodingContainer<LinkDestination.Configuration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type LinkDestination.Configuration.CodingKeys and conformance LinkDestination.Configuration.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA507D8, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of LinkDestination.Configuration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LinkDestination.Configuration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LinkDestination.Configuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkDestination.Configuration(void *a1)
{
  return LinkDestination.Configuration.encode(to:)(a1);
}

uint64_t LinkDestination.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LinkDestination(0) + 24);

  return outlined init with copy of LinkDestination.Configuration(v3, a1);
}

uint64_t LinkDestination.configuration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LinkDestination(0) + 24);

  return outlined assign with take of LinkDestination.Configuration(a1, v3);
}

uint64_t outlined assign with take of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LinkDestination.configuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinkDestination.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = swift_getKeyPath();
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 31) = 0;
  *(void *)(a2 + 40) = swift_getKeyPath();
  uint64_t v4 = type metadata accessor for LinkDestination(0);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 71) = 0;
  uint64_t v5 = a2 + *(int *)(v4 + 24);

  return outlined init with take of LinkDestination.Configuration(a1, v5);
}

uint64_t outlined init with take of LinkDestination.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall LinkDestination.open()()
{
  uint64_t v1 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v2 = v1 - 8;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t)v0 + *(int *)(type metadata accessor for LinkDestination(0) + 24);
  if (*(unsigned char *)(v5 + *(int *)(v2 + 28)) == 1)
  {
    long long v6 = *(long long *)((char *)v0 + 56);
    long long v22 = *(long long *)((char *)v0 + 40);
    v23[0] = v6;
    int v7 = *(_DWORD *)((char *)v0 + 71);
  }
  else
  {
    long long v8 = v0[1];
    long long v22 = *v0;
    v23[0] = v8;
    int v7 = *(_DWORD *)((char *)v0 + 31);
  }
  *(_DWORD *)((char *)v23 + 15) = v7;
  outlined retain of Environment<OpenURLAction>((uint64_t)&v22, (void (*)(void, void, void, void, void, void))outlined copy of Environment<OpenURLAction>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  outlined retain of Environment<OpenURLAction>((uint64_t)&v22, (void (*)(void, void, void, void, void, void))outlined consume of Environment<OpenURLAction>.Content);
  uint64_t v9 = v19[0];
  uint64_t v10 = v19[1];
  uint64_t v11 = v19[2];
  uint64_t v12 = v19[3];
  char v13 = v20;
  char v14 = v21;
  outlined init with copy of LinkDestination.Configuration(v5, (uint64_t)v4);
  v16[0] = v9;
  v16[1] = v10;
  void v16[2] = v11;
  void v16[3] = v12;
  char v17 = v13;
  char v18 = v14;
  specialized OpenURLAction._open(_:completion:)((uint64_t)v4, (uint64_t)v16);
  outlined consume of OpenURLAction.Handler(v9, v10, v11, v12, v13);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v4, v15);
}

uint64_t outlined copy of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a6) {
    return outlined copy of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined retain of Environment<OpenURLAction>(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a6) {
    return outlined consume of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  }
  else {
    return swift_release();
  }
}

unint64_t initializeBufferWithCopyOfBuffer for LinkDestination(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    char v11 = *(unsigned char *)(a2 + 34);
    __int16 v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v8, v9, v10, v12, v11);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 34) = v11;
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    char v17 = *(unsigned char *)(a2 + 74);
    __int16 v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(unsigned char *)(a1 + 74) = v17;
    uint64_t v19 = *(int *)(a3 + 24);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = type metadata accessor for LinkDestination.Configuration(0);
    *(unsigned char *)(v20 + *(int *)(v23 + 20)) = *(unsigned char *)(v21 + *(int *)(v23 + 20));
  }
  return a1;
}

uint64_t destroy for LinkDestination(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<OpenURLAction>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_WORD *)(a1 + 32), *(unsigned char *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72), *(unsigned char *)(a1 + 74));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 34);
  __int16 v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v7, v8, v9, v11, v10);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 34) = v10;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  char v16 = *(unsigned char *)(a2 + 74);
  __int16 v17 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v17;
  *(unsigned char *)(a1 + 74) = v16;
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(v19 + *(int *)(v22 + 20)) = *(unsigned char *)(v20 + *(int *)(v22 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 34);
  __int16 v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v7, v8, v9, v11, v10);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  char v16 = *(unsigned char *)(a1 + 34);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  __int16 v17 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 64);
  char v22 = *(unsigned char *)(a2 + 74);
  __int16 v23 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a1 + 64);
  char v28 = *(unsigned char *)(a1 + 74);
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v21;
  __int16 v29 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v23;
  *(unsigned char *)(a1 + 74) = v22;
  outlined consume of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
  uint64_t v30 = *(int *)(a3 + 24);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  uint64_t v34 = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(v31 + *(int *)(v34 + 20)) = *(unsigned char *)(v32 + *(int *)(v34 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  uint64_t v9 = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(v7 + *(int *)(v9 + 20)) = *(unsigned char *)(v6 + *(int *)(v9 + 20));
  return a1;
}

uint64_t assignWithTake for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = *(_WORD *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 34);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 34);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  __int16 v14 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 34) = v7;
  outlined consume of Environment<OpenURLAction>.Content(v8, v9, v10, v11, v14, v12);
  __int16 v15 = *(_WORD *)(a2 + 72);
  char v16 = *(unsigned char *)(a2 + 74);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int16 v22 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 74) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = type metadata accessor for LinkDestination.Configuration(0);
  *(unsigned char *)(v24 + *(int *)(v27 + 20)) = *(unsigned char *)(v25 + *(int *)(v27 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C3FDE0);
}

uint64_t sub_245C3FDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 34);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LinkDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C3FE9C);
}

uint64_t sub_245C3FE9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 34) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LinkDestination.Configuration(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for LinkDestination.Configuration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245C40274);
}

uint64_t sub_245C40274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245C40358);
}

uint64_t sub_245C40358(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LinkDestination.Configuration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C404E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LinkDestination.Configuration.CodingKeys()
{
  return &unk_26FA507D8;
}

uint64_t specialized LinkDestination.Configuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65537369 && a2 == 0xEB00000000657669)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t outlined release of Environment<EdgeInsets>(uint64_t a1)
{
  return a1;
}

uint64_t Color.gradient.getter(uint64_t a1)
{
  type metadata accessor for GradientBox<ColorGradientProvider>();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  return v2;
}

void type metadata accessor for GradientBox<ColorGradientProvider>()
{
  if (!lazy cache variable for type metadata for GradientBox<ColorGradientProvider>)
  {
    lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider();
    unint64_t v0 = type metadata accessor for GradientBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GradientBox<ColorGradientProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorGradientProvider and conformance ColorGradientProvider);
  }
  return result;
}

void *type metadata accessor for ColorGradientProvider()
{
  return &unk_26FA63B70;
}

double ColorGradientProvider.resolve(in:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v54 = *a1;
  float v4 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v54);
  float v6 = v5;
  float v8 = v7;
  float v10 = v9;
  float v11 = -v4;
  if (v4 > 0.0) {
    float v11 = v4;
  }
  if (v11 <= 0.0031308)
  {
    float v12 = v11 * 12.92;
  }
  else
  {
    float v12 = 1.0;
    if (v11 != 1.0) {
      float v12 = (float)(powf(v11, 0.41667) * 1.055) + -0.055;
    }
  }
  if (v4 <= 0.0) {
    float v13 = -v12;
  }
  else {
    float v13 = v12;
  }
  float v14 = -v6;
  if (v6 > 0.0) {
    float v14 = v6;
  }
  if (v14 <= 0.0031308)
  {
    float v15 = v14 * 12.92;
  }
  else
  {
    float v15 = 1.0;
    if (v14 != 1.0) {
      float v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
    }
  }
  if (v6 <= 0.0) {
    float v16 = -v15;
  }
  else {
    float v16 = v15;
  }
  float v17 = -v8;
  if (v8 > 0.0) {
    float v17 = v8;
  }
  if (v17 <= 0.0031308)
  {
    float v18 = v17 * 12.92;
  }
  else
  {
    float v18 = 1.0;
    if (v17 != 1.0) {
      float v18 = (float)(powf(v17, 0.41667) * 1.055) + -0.055;
    }
  }
  float v19 = -v18;
  if (v8 > 0.0) {
    float v19 = v18;
  }
  float v20 = (float)((float)(v13 * 0.2126) + (float)(v16 * 0.7152)) + (float)(v19 * 0.0722);
  double v21 = 0.7;
  double v22 = 0.3;
  if (v20 <= 0.75) {
    double v22 = 0.7;
  }
  double v23 = 1.0;
  if (v20 <= 0.75) {
    double v23 = 0.0;
  }
  float v24 = -0.1;
  if (v20 <= 0.75) {
    float v24 = 0.3;
  }
  if (v20 <= 0.5)
  {
    double v25 = 0.0;
  }
  else
  {
    double v21 = v22;
    double v25 = v23;
  }
  if (v20 > 0.5) {
    float v26 = v24;
  }
  else {
    float v26 = 0.25;
  }
  if (v20 <= 0.25) {
    double v27 = 0.7;
  }
  else {
    double v27 = v21;
  }
  if (v20 <= 0.25) {
    double v28 = 0.0;
  }
  else {
    double v28 = v25;
  }
  if (v20 <= 0.25) {
    float v29 = 0.2;
  }
  else {
    float v29 = v26;
  }
  float v30 = v13 - (float)((float)(v20 - v13) * 0.2);
  float v31 = 1.0 - v30;
  if (v29 < 0.0) {
    float v31 = v13 - (float)((float)(v20 - v13) * 0.2);
  }
  float v32 = v16 - (float)((float)(v20 - v16) * 0.2);
  float v33 = 1.0 - v32;
  if (v29 < 0.0) {
    float v33 = v16 - (float)((float)(v20 - v16) * 0.2);
  }
  float v34 = v19 - (float)((float)(v20 - v19) * 0.2);
  if (v29 >= 0.0) {
    float v35 = 1.0 - v34;
  }
  else {
    float v35 = v19 - (float)((float)(v20 - v19) * 0.2);
  }
  LOBYTE(v54) = 0;
  float v36 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v54, v30 + (float)(v29 * v31), v32 + (float)(v29 * v33), v34 + (float)(v29 * v35));
  if (v27 >= v28) {
    float v40 = v4;
  }
  else {
    float v40 = v36;
  }
  if (v27 >= v28) {
    float v41 = v6;
  }
  else {
    float v41 = v37;
  }
  if (v27 >= v28) {
    float v42 = v8;
  }
  else {
    float v42 = v38;
  }
  if (v27 >= v28) {
    float v43 = v10;
  }
  else {
    float v43 = v39;
  }
  float v52 = v43;
  float v53 = v42;
  if (v27 >= v28) {
    double v44 = v27;
  }
  else {
    double v44 = v28;
  }
  double v51 = v44;
  float v45 = v8;
  if (v27 >= v28) {
    float v46 = v36;
  }
  else {
    float v46 = v4;
  }
  if (v27 >= v28) {
    float v47 = v37;
  }
  else {
    float v47 = v6;
  }
  if (v27 >= v28) {
    float v48 = v38;
  }
  else {
    float v48 = v45;
  }
  if (v27 >= v28)
  {
    float v10 = v39;
    double v27 = v28;
  }
  type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>();
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_2461BDD50;
  *(float *)(v49 + 32) = v46;
  *(float *)(v49 + 36) = v47;
  *(float *)(v49 + 40) = v48;
  *(float *)(v49 + 44) = v10;
  *(double *)(v49 + 48) = v27;
  *(void *)(v49 + 56) = 0;
  *(void *)(v49 + 64) = 0;
  *(unsigned char *)(v49 + 72) = 1;
  *(float *)(v49 + 80) = v40;
  *(float *)(v49 + 84) = v41;
  *(float *)(v49 + 88) = v53;
  *(float *)(v49 + 92) = v52;
  double result = v51;
  *(double *)(v49 + 96) = v51;
  *(void *)(v49 + 104) = 0;
  *(void *)(v49 + 112) = 0;
  *(unsigned char *)(v49 + 120) = 1;
  *(void *)a3 = v49;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

double protocol witness for GradientProvider.resolve(in:) in conformance ColorGradientProvider@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return ColorGradientProvider.resolve(in:)(a1, *v2, a2);
}

uint64_t protocol witness for GradientProvider.fallbackColor(in:) in conformance ColorGradientProvider()
{
  return swift_retain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ColorGradientProvider()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ColorGradientProvider(uint64_t a1)
{
  int v3 = *(void (**)(uint64_t))(**(void **)v1 + 136);
  swift_retain();
  v3(a1);

  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorGradientProvider()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for ColorGradientProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ColorGradientProvider and conformance ColorGradientProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<ResolvedGradient.Stop>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>);
    }
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  float v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (_s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_0(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    float v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    float v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_0(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  Swift::Int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  if (*(void *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v4 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v5 = v3 & ~v4;
    float v6 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      float v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_18:
        float v20 = 1;
        return v20 & 1;
      }
      uint64_t v13 = ~v4;
      float v14 = (v5 + 1) & v13;
      if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
      {
        while (1)
        {
          char v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
            break;
          }
          float v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            float v14 = (v14 + 1) & v13;
            if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14)) {
              continue;
            }
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  float v20 = 0;
  return v20 & 1;
}

BOOL specialized Set.contains(_:)(Swift::UInt64 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

Swift::Int specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a1);
    Swift::Int result = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = result & ~v5;
    uint64_t v7 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v8 = *(void *)(a2 + 48);
      uint64_t v9 = *(void *)(v8 + 8 * v6);
      if (__OFSUB__(a1, v9))
      {
LABEL_14:
        __break(1u);
        return result;
      }
      if (v9 == a1) {
        return 1;
      }
      uint64_t v10 = ~v5;
      unint64_t v11 = (v6 + 1) & v10;
      if ((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        while (1)
        {
          uint64_t v12 = *(void *)(v8 + 8 * v11);
          if (__OFSUB__(a1, v12)) {
            break;
          }
          Swift::Int result = v12 == a1;
          if (v12 != a1)
          {
            unint64_t v11 = (v11 + 1) & v10;
            if ((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11)) {
              continue;
            }
          }
          return result;
        }
        __break(1u);
        goto LABEL_14;
      }
    }
  }
  return 0;
}

Swift::Int specialized Set.contains(_:)(Swift::UInt64 a1, Swift::UInt a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
    Swift::Int result = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = result & ~v7;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v9 = ~v7;
      uint64_t v10 = *(void *)(a3 + 48);
      do
      {
        if (*(void *)(v10 + 16 * v8) == a1)
        {
          uint64_t v11 = *(void *)(v10 + 16 * v8 + 8);
          if (__OFSUB__(a2, v11))
          {
            __break(1u);
            return result;
          }
          if (v11 == a2) {
            return 1;
          }
        }
        unint64_t v8 = (v8 + 1) & v9;
      }
      while (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
  }
  return 0;
}

uint64_t _TraitWritingModifier.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t _TraitWritingModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::Int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t _ConditionalTraitWritingModifier.value.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::Int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*_ConditionalTraitWritingModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ConditionalTraitWritingModifier.isEnabled.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ConditionalTraitWritingModifier.isEnabled.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ConditionalTraitWritingModifier.isEnabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ConditionalTraitWritingModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, ValueMetadata *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  int v11 = *((_DWORD *)a1 + 20);
  uint64_t v12 = *MEMORY[0x263F288F8];
  type metadata accessor for _TraitWritingModifier();
  long long v15 = *(_OWORD *)(a1 + 3);
  long long v16 = *(_OWORD *)(a1 + 7);
  long long v17 = *(_OWORD *)(a1 + 5);
  uint64_t v13 = a1[9];
  _GraphValue.init(_:)(v12, v26);
  uint64_t v18 = v8;
  int v19 = v9;
  uint64_t v20 = v10;
  long long v21 = v15;
  long long v22 = v17;
  long long v23 = v16;
  uint64_t v24 = v13;
  int v25 = v11;
  return static _TraitWritingModifier._makeView(modifier:inputs:body:)((uint64_t)v26, (uint64_t)&v18, a2, a3, a4);
}

uint64_t static _ConditionalTraitWritingModifier._makeViewList(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (void (*)(void, ValueMetadata *, uint64_t))type metadata accessor for _ConditionalTraitWritingModifier, a7, (uint64_t)&protocol conformance descriptor for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t _ConditionalTraitWritingModifier.ConditionalAddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for _ConditionalTraitWritingModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - v11;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v19);
  uint64_t v13 = v19;
  if (!v19) {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = v13;
  _TraitWritingModifier.AddTrait.modifier.getter((uint64_t (*)(void))type metadata accessor for _ConditionalTraitWritingModifier, (uint64_t)v12);
  int v14 = v12[*(int *)(v9 + 36)];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v14 == 1)
  {
    _TraitWritingModifier.AddTrait.modifier.getter((uint64_t (*)(void))type metadata accessor for _ConditionalTraitWritingModifier, (uint64_t)v12);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, AssociatedTypeWitness);
    uint64_t result = ViewTraitCollection.subscript.setter((uint64_t)v8, v16, a2);
  }
  *uint64_t v18 = v20;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ConditionalTraitWritingModifier<A>.ConditionalAddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _ConditionalTraitWritingModifier.ConditionalAddTrait.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalTraitWritingModifier<A>.ConditionalAddTrait()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ConditionalTraitWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static _ConditionalTraitWritingModifier._makeView(modifier:inputs:body:)(a1, a2, *(ValueMetadata **)(a3 + 16), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ConditionalTraitWritingModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ConditionalTraitWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t static TraitTransformerModifier._makeViewList(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v20 = a2[7];
  int v9 = *((_DWORD *)a2 + 16);
  uint64_t v10 = a2[9];
  char v11 = *((unsigned char *)a2 + 80);
  LODWORD(v26) = *a1;
  HIDWORD(v26) = v9;
  uint64_t v12 = type metadata accessor for TraitTransformerModifier.TransformTrait();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v24 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTraitCollection>();
  uint64_t v16 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v23, v12, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  uint64_t v26 = v4;
  int v27 = v5;
  uint64_t v28 = v6;
  uint64_t v29 = v13;
  uint64_t v30 = v14;
  uint64_t v31 = v7;
  uint64_t v32 = v8;
  uint64_t v33 = v20;
  int v34 = v22;
  uint64_t v35 = v10;
  char v36 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  a3(v18, &v26);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t TraitTransformerModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v10 = (char *)&v15 - v9;
  _TraitWritingModifier.AddTrait.traits.getter(a1, &v16);
  if (v16) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v11;
  type metadata accessor for TraitTransformerModifier();
  uint64_t v12 = *(void (**)(char *))AGGraphGetValue();
  swift_retain();
  uint64_t v16 = v11;
  ViewTraitCollection.value<A>(for:)(a2, a3, (uint64_t)v10);
  v12(v10);
  swift_release();
  uint64_t result = ViewTraitCollection.subscript.setter((uint64_t)v10, v13, a2);
  *a4 = v15;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TraitTransformerModifier<A>.TransformTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return TraitTransformerModifier.TransformTrait.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TraitTransformerModifier<A>.TransformTrait()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TraitTransformerModifier<A>(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  return static TraitTransformerModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t ViewTraitCollection.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(void *)v2 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of AnyTrackedValue(v5, (uint64_t)v10);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (v8 == a2) {
      break;
    }
    v5 += 40;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

void (*ViewTraitCollection.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  void v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  ViewTraitCollection.value<A>(for:)(a3, a4, (uint64_t)v13);
  return ViewTraitCollection.subscript.modify;
}

void ViewTraitCollection.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    ViewTraitCollection.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ViewTraitCollection.subscript.setter((*a1)[7], a2, v2[1]);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Void __swiftcall ViewTraitCollection.mergeValues(_:)(SwiftUI::ViewTraitCollection a1)
{
  uint64_t v1 = *(void *)(*(void *)a1.storage._rawValue + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)a1.storage._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of AnyTrackedValue(v2, (uint64_t)v6);
      uint64_t v3 = v7;
      uint64_t v4 = v8;
      uint64_t v5 = __swift_project_boxed_opaque_existential_1(v6, v7);
      ViewTraitCollection.setErasedValue<A>(trait:)((uint64_t)v5, v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
}

uint64_t ViewTraitKeys.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ViewTraitKeys.types.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ViewTraitKeys.types.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewTraitKeys.isDataDependent.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ViewTraitKeys.isDataDependent.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*ViewTraitKeys.isDataDependent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ViewTraitKeys.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE88];
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL ViewTraitKeys.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized Set.contains(_:)(a2, *v2);
}

uint64_t ViewTraitKeys.formUnion(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t result = specialized Set.formUnion<A>(_:)(v3, (uint64_t (*)(unsigned char *, void))specialized Set._Variant.insert(_:));
  *(unsigned char *)(v1 + 8) = (*(unsigned char *)(v1 + 8) | v2) & 1;
  return result;
}

uint64_t ViewTraitKeys.withDataDependency()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = HIDWORD(a3);
  return result;
}

uint64_t specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 12) = HIDWORD(a3);
  return result;
}

uint64_t type metadata accessor for _ConditionalTraitWritingModifier.ConditionalAddTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ConditionalTraitWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static _ViewTraitKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for _ConditionalTraitWritingModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _ConditionalTraitWritingModifier(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for _ConditionalTraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalTraitWritingModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v9 = v8 + 1;
    char v10 = 8 * (v8 + 1);
    if ((v8 + 1) > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v9 | v13);
      return (v17 + 1);
    }
  }
LABEL_22:
  if (v6 < 0xFE)
  {
    unsigned int v16 = *((unsigned __int8 *)a1 + v8);
    if (v16 < 2) {
      return 0;
    }
    int v17 = (v16 + 2147483646) & 0x7FFFFFFF;
    return (v17 + 1);
  }
  uint64_t v14 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for _ConditionalTraitWritingModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 1;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245C497C8);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10] = a2 + 1;
        }
        else
        {
          int v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t sub_245C497F0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA01_C8TraitKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _TraitWritingModifier);
}

uint64_t sub_245C49810(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA01_C8TraitKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for TraitTransformerModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA01_C8TraitKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

_OWORD *assignWithTake for TraitTransformerModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t initializeWithTake for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t instantiation function for generic protocol witness table for _ConditionalTraitWritingModifier<A>.ConditionalAddTrait(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _ConditionalTraitWritingModifier<A>.ConditionalAddTrait()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<IgnoresAutomaticPaddingLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<IgnoresAutomaticPaddingLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<MoveTransition.MoveLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<MoveTransition.MoveLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t type metadata accessor for TraitTransformerModifier.TransformTrait()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_AlignmentLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_AlignmentLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

void type metadata accessor for ModifiedViewList<_ForegroundStyleModifier2<AngularGradient, Color>>.ListModifier(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for TraitTransformerModifier<A>.TransformTrait(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in TraitTransformerModifier<A>.TransformTrait()
{
  return swift_getWitnessTable();
}

CFIndex specialized Text.Effect.Tokenizer.init(_:range:)(__CFString *string, CFRange range)
{
  uint64_t v3 = CFStringTokenizerCreate(0, string, range, 0, 0);
  CFStringTokenizerTokenType Token = CFStringTokenizerAdvanceToNextToken(v3);
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  if (Token)
  {
    while (1)
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v3);
      CFIndex result = CurrentTokenRange.location;
      CFIndex v8 = CurrentTokenRange.location + CurrentTokenRange.length;
      if (__OFADD__(CurrentTokenRange.location, CurrentTokenRange.length)) {
        break;
      }
      if (v8 < CurrentTokenRange.location) {
        goto LABEL_11;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      long long v5[2] = v10 + 1;
      uint64_t v11 = &v5[2 * v10];
      void v11[4] = CurrentTokenRange.location;
      _OWORD v11[5] = v8;
      if (!CFStringTokenizerAdvanceToNextToken(v3)) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_9:

    return (CFIndex)v5;
  }
  return result;
}

void _ForegroundLayerViewModifier.effectValue(size:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ForegroundLayerViewModifier(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 2;
}

__n128 _ForegroundLayerColorMatrixEffect.foreground.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ForegroundLayerColorMatrixEffect.foreground.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v2;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(__n128 *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ForegroundLayerColorMatrixEffect.foreground.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _ForegroundLayerColorMatrixEffect.background.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 144);
  __n128 result = *(__n128 *)(v1 + 96);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 80);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 _ForegroundLayerColorMatrixEffect.background.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 128) = v2;
  *(_OWORD *)(v1 + 144) = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)a1;
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t (*_ForegroundLayerColorMatrixEffect.background.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall _ForegroundLayerColorMatrixEffect.init(foreground:background:)(SwiftUI::_ForegroundLayerColorMatrixEffect *__return_ptr retstr, SwiftUI::_ColorMatrix *foreground, SwiftUI::_ColorMatrix *background)
{
  long long v3 = *(_OWORD *)&background->m15;
  long long v9 = *(_OWORD *)&background->m24;
  long long v10 = *(_OWORD *)&background->m33;
  long long v11 = *(_OWORD *)&background->m42;
  long long v5 = *(_OWORD *)&foreground->m24;
  long long v6 = *(_OWORD *)&foreground->m33;
  long long v7 = *(_OWORD *)&foreground->m42;
  long long v8 = *(_OWORD *)&background->m11;
  long long v4 = *(_OWORD *)&foreground->m15;
  *(_OWORD *)&retstr->foreground.m11 = *(_OWORD *)&foreground->m11;
  *(_OWORD *)&retstr->foreground.m15 = v4;
  *(_OWORD *)&retstr->background.m33 = v10;
  *(_OWORD *)&retstr->background.m42 = v11;
  *(_OWORD *)&retstr->background.m15 = v3;
  *(_OWORD *)&retstr->background.m24 = v9;
  *(_OWORD *)&retstr->foreground.m42 = v7;
  *(_OWORD *)&retstr->background.m11 = v8;
  *(_OWORD *)&retstr->foreground.m24 = v5;
  *(_OWORD *)&retstr->foreground.m33 = v6;
}

void static _ForegroundLayerColorMatrixEffect._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  long long v17 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v10 = a2[9];
  int v11 = *((_DWORD *)a2 + 20);
  uint64_t KeyPath = swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v13)
  {
    LODWORD(v20) = v6;
    uint64_t v21 = KeyPath;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>();
    lazy protocol witness table accessor for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>();
    unsigned int OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  unsigned int v15 = OffsetAttribute2;
  swift_release();
  unsigned int v19 = v15;
  uint64_t v20 = v7;
  LODWORD(v21) = v8;
  uint64_t v22 = v9;
  long long v23 = v18;
  long long v24 = v17;
  long long v25 = v16;
  uint64_t v26 = v10;
  int v27 = v11;
  static _ForegroundLayerLevelColorMatrixEffect._makeView(modifier:inputs:body:)(&v19, (uint64_t)&v20, a3, a4);
}

uint64_t _ForegroundLayerColorMatrixEffect.levelEffect.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[3];
  long long v15[2] = v1[2];
  uint64_t v15[3] = v3;
  long long v4 = v1[5];
  v15[4] = v1[4];
  long long v5 = v1[1];
  v15[0] = *v1;
  v15[1] = v5;
  long long v6 = v1[6];
  long long v7 = v1[8];
  long long v8 = v1[9];
  long long v14[2] = v1[7];
  v14[3] = v7;
  v14[4] = v8;
  v14[0] = v4;
  v14[1] = v6;
  unsigned __int8 v11 = 1;
  uint64_t result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v11, v15, v14, 0, (uint64_t)&v12);
  int v10 = v13;
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 8) = v10;
  return result;
}

uint64_t sub_245C4A588@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[3];
  long long v14[2] = a1[2];
  v14[3] = v3;
  long long v4 = a1[5];
  v14[4] = a1[4];
  long long v5 = a1[1];
  v14[0] = *a1;
  v14[1] = v5;
  long long v6 = a1[6];
  long long v7 = a1[8];
  long long v8 = a1[9];
  long long v15[2] = a1[7];
  uint64_t v15[3] = v7;
  v15[4] = v8;
  v15[0] = v4;
  v15[1] = v6;
  unsigned __int8 v11 = 1;
  uint64_t result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v11, v14, v15, 0, (uint64_t)&v12);
  int v10 = v13;
  *(void *)a2 = v12;
  *(_DWORD *)(a2 + 8) = v10;
  return result;
}

double static _ForegroundLayerLevelColorMatrixEffect._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 80);
  unint64_t v19 = *(void *)a2;
  LODWORD(v20) = v6;
  uint64_t v21 = v7;
  long long v22 = *(_OWORD *)(a2 + 24);
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  long long v25 = *(_OWORD *)(a2 + 56);
  uint64_t v26 = *(void *)(a2 + 72);
  int v27 = v10;
  a3(&v17);
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    uint64_t v12 = (ValueMetadata **)(v9 + 32);
    while (*v12 != &type metadata for DisplayList.Key)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_9;
      }
    }
    unint64_t v19 = v17;
    LODWORD(v20) = LODWORD(v18);
    unint64_t v13 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
    unsigned int v14 = *MEMORY[0x263F288F8];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v19 = __PAIR64__(v14, v5);
    uint64_t v20 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList();
    unsigned int v15 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v19) = 0;
    PreferencesOutputs.subscript.setter(v15, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  }
LABEL_9:
  *(void *)a4 = v17;
  double result = v18;
  a4[1] = v18;
  return result;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:)@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v7 = *a1;
  uint64_t result = _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)(&v7, a2, a3, 0, (uint64_t)&v8);
  int v6 = v9;
  *(void *)a4 = v8;
  *(_DWORD *)(a4 + 8) = v6;
  return result;
}

void _ForegroundLayerLevel.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_ForegroundLayerLevel.properties.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*_ForegroundLayerLevel.properties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

char *_ForegroundLayerLevel.init(_:)@<X0>(char *result@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *result;
  if (one-time initialization token for all != -1) {
    uint64_t result = (char *)swift_once();
  }
  *a2 = static _ForegroundLayerLevel.all & v3;
  return result;
}

void static _ForegroundLayerLevel.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static _ForegroundLayerLevel.primary.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static _ForegroundLayerLevel.secondary.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

void static _ForegroundLayerLevel.tertiary.getter(unsigned char *a1@<X8>)
{
  *a1 = 32;
}

void static _ForegroundLayerLevel.quaternary.getter(unsigned char *a1@<X8>)
{
  *a1 = 64;
}

void _ForegroundLayerLevel.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static _ForegroundLayerLevel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int _ForegroundLayerLevel.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *_ForegroundLayerLevelViewModifier.init(level:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void _ForegroundLayerLevelViewModifier.effectValue(size:)(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _ForegroundLayerLevelViewModifier(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 2;
}

uint64_t static _ForegroundLayerLevelColorMatrixEffect.Options.premultiplied.getter()
{
  return 1;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(_:options:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t _ForegroundLayerLevelColorMatrixEffect.init(level:foreground:background:options:)@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v9 = *a1;
  uint64_t v10 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, 0, isUniquelyReferenced_nonNull_native);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v9, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(void *)a5 = v10;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

uint64_t ForegroundLayerDisplayList.updateValue()()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    __int16 v14 = 0;
    char v15 = 0;
    return AGGraphSetOutputValue();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v3 = *(_WORD *)(Value + 8);
    char v4 = *(unsigned char *)(Value + 10);
    uint64_t v13 = *(void *)Value;
    __int16 v14 = v3;
    char v15 = v4;
    int v5 = *(_DWORD *)(AGGraphGetValue() + 8);
    if (v6)
    {
      uint64_t v7 = ++static DisplayList.Version.lastValue;
      *(void *)(v0 + 8) = static DisplayList.Version.lastValue;
    }
    else
    {
      uint64_t v7 = *(void *)(v0 + 8);
    }
    uint64_t v10 = v7;
    Swift::Bool v8 = v5 & 1;
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_bridgeObjectRetain();
    DisplayList.insertLayerFilters(matrices:version:premultiplied:)((Swift::OpaquePointer)v9, (SwiftUI::DisplayList::Version)&v10, v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = v13;
    __int16 v11 = v14;
    char v12 = v15;
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
}

void type metadata accessor for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>()
{
  if (!lazy cache variable for type metadata for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>)
  {
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<_ForegroundLayerColorMatrixEffect, _ForegroundLayerLevelColorMatrixEffect> and conformance Focus<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList;
  if (!lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ForegroundLayerViewModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerViewModifier and conformance _ForegroundLayerViewModifier);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ForegroundLayerLevelViewModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelViewModifier and conformance _ForegroundLayerLevelViewModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevelColorMatrixEffect.Options and conformance _ForegroundLayerLevelColorMatrixEffect.Options);
  }
  return result;
}

__n128 __swift_memcpy160_4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for _ForegroundLayerColorMatrixEffect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ForegroundLayerColorMatrixEffect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ForegroundLayerColorMatrixEffect()
{
  return &type metadata for _ForegroundLayerColorMatrixEffect;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevel()
{
  return &type metadata for _ForegroundLayerLevel;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelViewModifier()
{
  return &type metadata for _ForegroundLayerLevelViewModifier;
}

uint64_t assignWithCopy for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for _ForegroundLayerLevelColorMatrixEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelColorMatrixEffect()
{
  return &type metadata for _ForegroundLayerLevelColorMatrixEffect;
}

ValueMetadata *type metadata accessor for _ForegroundLayerLevelColorMatrixEffect.Options()
{
  return &type metadata for _ForegroundLayerLevelColorMatrixEffect.Options;
}

void *type metadata accessor for ForegroundLayerDisplayList()
{
  return &unk_26FA6E118;
}

unint64_t instantiation function for generic protocol witness table for ForegroundLayerDisplayList(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ForegroundLayerDisplayList and conformance ForegroundLayerDisplayList();
  *(void *)(a1 + 8) = result;
  return result;
}

double specialized Sequence.reduce<A>(into:_:)@<D0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  void (*v17)(void *__return_ptr, uint64_t, double, double, double, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned int v23;
  void (*v24)(uint64_t *);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *InputValue;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  double result;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  long long v42;
  char v43;
  void v44[4];
  unsigned __int8 v45;
  void v46[4];
  unsigned __int8 v47;
  unsigned char v48[40];
  void v49[4];
  unsigned __int8 v50;
  double v51[7];
  int v52;
  char v53;

  long long v9 = a1[1];
  float v41 = *a1;
  float v42 = v9;
  float v43 = *((unsigned char *)a1 + 32);
  uint64_t v37 = *(void *)(a2 + 16);
  if (v37)
  {
    uint64_t v10 = a2;
    uint64_t v35 = a3;
    float v52 = *MEMORY[0x263F288F8];
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    char v36 = v10;
    while (1)
    {
      unint64_t v17 = *(void (**)(void *__return_ptr, uint64_t, double, double, double, double))(**(void **)(v10 + 8 * v13 + 32)
                                                                                                 + 80);
      double v18 = swift_retain();
      v17(v44, v18, a4, a5, a6, a7);
      unint64_t v19 = v44[0];
      uint64_t v20 = v44[1];
      uint64_t v21 = v44[3];
      float v38 = v44[2];
      long long v22 = v45;
      outlined init with take of Path.Storage((uint64_t)v44, (uint64_t)v48);
      outlined retain of Path((uint64_t)v48, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      if (one-time initialization token for v5 != -1) {
        swift_once();
      }
      uint64_t v23 = static Semantics.v5;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F4504 == 1)
      {
        if ((dyld_program_minos_at_least() & 1) == 0) {
          goto LABEL_3;
        }
      }
      else if (dword_26B0F4500 < v23)
      {
        goto LABEL_3;
      }
      if (!_threadGeometryProxyData())
      {
LABEL_3:
        uint64_t v14 = v19;
        uint64_t v15 = v20;
        uint64_t v16 = v38;
        goto LABEL_4;
      }
      specialized static Update.begin()();
      uint64_t v14 = v19;
      if (AGWeakAttributeGetAttribute() == v52)
      {
        float v39 = 0;
        float v40 = 0;
        uint64_t v15 = v20;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v24 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
        long long v25 = static CoreGlue2.shared;
        v24(&v39);

        int v27 = v39;
        uint64_t v26 = v40;
      }
      else
      {
        AGWeakAttributeGetAttribute();
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
        int v27 = *InputValue;
        uint64_t v26 = InputValue[1];
        swift_retain();
        swift_retain();
        uint64_t v15 = v20;
      }
      uint64_t v16 = v38;
      static Update.end()();
      if (!v26)
      {
        uint64_t v29 = swift_retain_n();
        uint64_t v30 = specialized find<A>(_:key:)(v29);
        if (v30) {
          uint64_t v31 = *(unsigned __int8 *)(v30 + 72);
        }
        else {
          uint64_t v31 = 0;
        }
        swift_release_n();
        uint64_t v10 = v36;
        if (!v31) {
          goto LABEL_4;
        }
LABEL_26:
        v51[1] = 0.0;
        v51[2] = 0.0;
        v51[0] = -1.0;
        v51[3] = 1.0;
        v51[4] = a6;
        v51[5] = 0.0;
        Path.applying(_:)(v51, (uint64_t)v46);
        uint64_t v14 = v46[0];
        uint64_t v15 = v46[1];
        uint64_t v16 = v46[2];
        uint64_t v21 = v46[3];
        long long v22 = v47;
        outlined retain of Path((uint64_t)v44, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        goto LABEL_4;
      }
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v27, &v53);
      swift_release_n();
      swift_release_n();
      uint64_t v10 = v36;
      if (v53) {
        goto LABEL_26;
      }
LABEL_4:
      ++v13;
      outlined retain of Path((uint64_t)v44, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      v49[0] = v14;
      v49[1] = v15;
      v49[2] = v16;
      v49[3] = v21;
      uint64_t v50 = v22;
      Path.formTrivialUnion(_:)((uint64_t)v49);
      outlined consume of Path.Storage(v14, v15, v16, v21, v22);
      swift_release();
      if (v37 == v13)
      {
        swift_bridgeObjectRelease();
        a3 = v35;
        break;
      }
    }
  }
  uint64_t v32 = v43;
  unint64_t result = *(double *)&v41;
  int v34 = v42;
  *(_OWORD *)a3 = v41;
  *(_OWORD *)(a3 + 16) = v34;
  *(unsigned char *)(a3 + 32) = v32;
  return result;
}

uint64_t ContentShapeKinds.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ContentShapeKinds.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ContentShapeKinds.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ContentShapeKinds __swiftcall ContentShapeKinds.init(rawValue:)(SwiftUI::ContentShapeKinds rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

uint64_t ContentShapeKinds.description.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    v5._uint64_t countAndFlagsBits = 0x7463617265746E69;
    v5._object = (void *)0xEC000000206E6F69;
    String.append(_:)(v5);
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6._uint64_t countAndFlagsBits = 0x7665725067617264;
  v6._object = (void *)0xEC00000020776569;
  String.append(_:)(v6);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v7._object = (void *)0x800000024621E740;
  v7._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v7);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    v9._uint64_t countAndFlagsBits = 0x6666457375636F66;
    v9._object = (void *)0xEC00000020746365;
    String.append(_:)(v9);
    if ((v1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_12:
  v8._uint64_t countAndFlagsBits = 0x6666457265766F68;
  v8._object = (void *)0xEC00000020746365;
  String.append(_:)(v8);
  if ((v1 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v1 & 0x40) != 0)
  {
LABEL_7:
    v2._uint64_t countAndFlagsBits = 0x6269737365636361;
    v2._object = (void *)0xEE00207974696C69;
    String.append(_:)(v2);
  }
LABEL_8:
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 93;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 8283;
}

SwiftUI::ContentShapes __swiftcall ContentShapes.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ContentShapesKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.ContentShapesKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t EnvironmentValues.contentShapes.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.contentShapes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.contentShapes.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void (*EnvironmentValues.contentShapes.modify(uint64_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = (uint64_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[4] = (uint64_t)v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, v3);
  }
  swift_release_n();
  v3[5] = 0;
  return EnvironmentValues.contentShapes.modify;
}

void EnvironmentValues.contentShapes.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = **a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t ContentShapes.addShape<A>(_:forKinds:)(uint64_t a1)
{
  double v2 = MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v5;
  (*(void (**)(char *, uint64_t, double))(v7 + 16))(v4, v8, v2);
  uint64_t v9 = AnyShape.init<A>(_:)((uint64_t)v4);
  uint64_t v10 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (v6)
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      uint64_t v10 = (void *)result;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      uint64_t v10 = (void *)result;
    }
    v10[2] = v13 + 1;
    uint64_t v14 = &v10[2 * v13];
    v14[4] = v6;
  }
  else
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      uint64_t v10 = (void *)result;
    }
    unint64_t v16 = v10[2];
    unint64_t v15 = v10[3];
    if (v16 >= v15 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v10);
      uint64_t v10 = (void *)result;
    }
    v10[2] = v16 + 1;
    uint64_t v14 = &v10[2 * v16];
    v14[4] = 1;
  }
  _OWORD v14[5] = v9;
  *uint64_t v1 = v10;
  return result;
}

uint64_t ContentShapes.shape(for:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v6 = *(void *)(*v2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = v5 + 16 * v6 + 24;
    do
    {
      if (v4)
      {
        uint64_t v8 = *(void *)(v7 - 8);
        if ((v8 & v4) != 0)
        {
          uint64_t v9 = swift_retain();
          MEMORY[0x24C522D60](v9);
          if (*(void *)(v12 + 16) >= *(void *)(v12 + 24) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          v4 &= ~v8;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v7 -= 16;
      --v6;
    }
    while (v6);
    uint64_t v10 = v12;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v10;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, unint64_t a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  double v16 = a2;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    double v17 = *(double *)&a4;
  }
  else
  {
    v58.origin.x = v16;
    v58.origin.y = a3;
    *(void *)&v58.size.double width = a4;
    v58.size.height = a5;
    CGRect v59 = CGRectStandardize(v58);
    if (a7 == a9) {
      double v18 = a9;
    }
    else {
      double v18 = a7;
    }
    double v16 = v18 + v59.origin.x;
    a3 = v59.origin.y + a6;
    double v17 = v59.size.width - (a7 + a9);
    a5 = v59.size.height - (a6 + a8);
    v60.origin.x = v18 + v59.origin.x;
    v60.origin.y = v59.origin.y + a6;
    v60.size.double width = v17;
    v60.size.height = a5;
    if (CGRectGetWidth(v60) < 0.0
      || (v61.origin.x = v16, v61.origin.y = a3, v61.size.double width = v17, v61.size.height = a5, CGRectGetHeight(v61) < 0.0))
    {
      double v16 = *MEMORY[0x263F001A0];
      a3 = *(double *)(MEMORY[0x263F001A0] + 8);
      double v17 = *(double *)(MEMORY[0x263F001A0] + 16);
      a5 = *(double *)(MEMORY[0x263F001A0] + 24);
    }
  }
  v62.origin.x = v16;
  v62.origin.y = a3;
  v62.size.double width = v17;
  v62.size.height = a5;
  BOOL IsNull = CGRectIsNull(v62);
  if (IsNull) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)&v16;
  }
  if (IsNull) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)&a3;
  }
  if (IsNull) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(void *)&v17;
  }
  if (IsNull) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(void *)&a5;
  }
  if (IsNull) {
    unsigned __int8 v24 = 6;
  }
  else {
    unsigned __int8 v24 = 0;
  }
  uint64_t v53 = v20;
  uint64_t v54 = v21;
  uint64_t v55 = v22;
  uint64_t v56 = v23;
  unsigned __int8 v57 = v24;
  unsigned __int8 v43 = v24;
  outlined copy of Path.Storage(v20, v21, v22, v23, v24);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v25 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    uint64_t v26 = v20;
    uint64_t v27 = v21;
    uint64_t v28 = v22;
    uint64_t v29 = v23;
    unsigned __int8 v30 = v43;
    unsigned __int8 v31 = v43;
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v26 = v20;
    uint64_t v27 = v21;
    uint64_t v28 = v22;
    uint64_t v29 = v23;
    unsigned __int8 v31 = v43;
    BOOL v32 = dword_26B0F4500 >= v25;
    unsigned __int8 v30 = v43;
    if (!v32) {
      goto LABEL_42;
    }
  }
  uint64_t v33 = _threadGeometryProxyData();
  uint64_t v26 = v20;
  uint64_t v27 = v21;
  uint64_t v28 = v22;
  uint64_t v29 = v23;
  unsigned __int8 v31 = v30;
  if (v33)
  {
    int v34 = *(_DWORD *)(v33 + 48);
    long long v35 = *(_OWORD *)(v33 + 16);
    long long v44 = *(_OWORD *)v33;
    long long v45 = v35;
    long long v46 = *(_OWORD *)(v33 + 32);
    int v47 = v34;
    GeometryProxy.environment.getter(&v48);
    uint64_t v36 = v48;
    if (v49)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v36, &v44);
      swift_release_n();
      swift_release_n();
      uint64_t v26 = v20;
      uint64_t v27 = v21;
      uint64_t v28 = v22;
      uint64_t v29 = v23;
      unsigned __int8 v31 = v30;
      if ((v44 & 1) == 0) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v37 = swift_retain_n();
      uint64_t v38 = specialized find<A>(_:key:)(v37);
      if (!v38)
      {
        swift_release_n();
        uint64_t v26 = v20;
        uint64_t v27 = v21;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        unsigned __int8 v31 = v30;
        goto LABEL_42;
      }
      int v39 = *(unsigned __int8 *)(v38 + 72);
      swift_release_n();
      uint64_t v26 = v20;
      uint64_t v27 = v21;
      uint64_t v28 = v22;
      uint64_t v29 = v23;
      unsigned __int8 v31 = v43;
      BOOL v40 = v39 == 1;
      unsigned __int8 v30 = v43;
      if (!v40) {
        goto LABEL_42;
      }
    }
    long long v44 = 0xBFF0000000000000;
    *(void *)&long long v45 = 0;
    *((void *)&v45 + 1) = 0x3FF0000000000000;
    long long v46 = a4;
    Path.applying(_:)((double *)&v44, (uint64_t)&v48);
    uint64_t v26 = v48;
    uint64_t v27 = v49;
    uint64_t v28 = v50;
    uint64_t v29 = v51;
    unsigned __int8 v31 = v52;
    outlined consume of Path.Storage(v20, v21, v22, v23, v30);
  }
LABEL_42:
  uint64_t result = outlined consume of Path.Storage(v20, v21, v22, v23, v30);
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v29;
  *(unsigned char *)(a1 + 32) = v31;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, double a6@<D3>)
{
  void (*v18)(double *__return_ptr, uint64_t, double, double, double, double);
  uint64_t v19;
  CGFloat v20;
  CGFloat v21;
  double v22;
  int v23;
  unsigned int v24;
  void **v25;
  double v26;
  uint64_t v27;
  void (*v28)(CGAffineTransform *);
  void *v29;
  CGFloat b;
  uint64_t v31;
  uint64_t *InputValue;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char IsEmpty;
  double v38;
  CGFloat v39;
  double v40;
  int8x16_t v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  BOOL IsNull;
  CGFloat v46;
  double v47;
  double v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  BOOL v52;
  unsigned __int8 v53;
  double v54;
  double v55;
  CGFloat v56;
  CGFloat v57;
  BOOL v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  double v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  long long v75;
  uint64_t v76;
  void *v77;
  id v78;
  int v79;
  BOOL IsIdentity;
  uint64_t v81;
  uint64_t v82;
  int v83;
  long long v84;
  uint64_t v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  int v89;
  char v90;
  CGFloat x;
  CGFloat y;
  CGFloat height;
  uint64_t v94;
  CGFloat v95;
  int8x16_t v96;
  int8x16_t v97;
  CGSize v98;
  uint64_t v99;
  BOOL IsInfinite;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  CGFloat v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  long long v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  int v125;
  BOOL v126;
  uint64_t result;
  int8x16_t v128;
  CGFloat rect2;
  CGFloat v131;
  double v132;
  double v133;
  double v134;
  int v135;
  CGFloat v136;
  int v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  int8x16_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int size;
  CGSize sizea;
  unsigned __int8 sizeb;
  double v153;
  uint64_t v154;
  double rect;
  double v156[6];
  CGAffineTransform v157;
  int v158;
  double v159;
  double v160;
  double v161;
  double v162;
  unsigned __int8 v163;
  void v164[4];
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 v170;
  void v171[4];
  unsigned __int8 v172;
  uint64_t v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;

  v173 = *MEMORY[0x263EF8340];
  *(double *)&__int16 v11 = COERCE_DOUBLE((__objc2_class *)&OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache);
  uint64_t v147 = *(void *)(a1 + 16);
  if (v147)
  {
    uint64_t v137 = *MEMORY[0x263F288F8];
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    CGFloat v16 = 0.0;
    uint64_t v141 = 0.0;
    char v142 = 0.0;
    uint64_t v143 = 0.0;
    size = 6;
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    uint64_t v128 = (int8x16_t)vnegq_f64(v17);
    unsigned __int8 v146 = v14;
    uint64_t v139 = a3;
    uint64_t v140 = a4;
    while (1)
    {
      double v18 = *(void (**)(double *__return_ptr, uint64_t, double, double, double, double))(**(void **)(v14 + 8 * v15 + 32)
                                                                                                 + 80);
      unint64_t v19 = swift_retain();
      v18(&v159, v19, a3, a4, a5, a6);
      uint64_t v21 = v159;
      uint64_t v20 = v160;
      uint64_t v22 = v162;
      uint64_t v23 = v163;
      rect = v161;
      outlined copy of Path.Storage(*(uint64_t *)&v159, *(uint64_t *)&v160, *(uint64_t *)&v161, *(uint64_t *)&v162, v163);
      if (one-time initialization token for v5 != -1) {
        swift_once();
      }
      unsigned __int8 v24 = static Semantics.v5;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F4504 == 1)
      {
        if ((dyld_program_minos_at_least() & 1) == 0) {
          goto LABEL_20;
        }
      }
      else if (*((_DWORD *)v11 + 320) < v24)
      {
        goto LABEL_20;
      }
      if (!_threadGeometryProxyData())
      {
LABEL_20:
        outlined retain of Path((uint64_t)&v159, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        goto LABEL_21;
      }
      uint64_t v153 = v22;
      unsigned int v25 = v11;
      uint64_t v26 = v16;
      specialized static Update.begin()();
      if (AGWeakAttributeGetAttribute() == v137)
      {
        uint64_t v27 = v15;
        v157.a = 0.0;
        v157.b = 0.0;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v28 = *(void (**)(CGAffineTransform *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                         + 0x68);
        uint64_t v29 = static CoreGlue2.shared;
        v28(&v157);

        unsigned __int8 v31 = *(void *)&v157.a;
        b = v157.b;
      }
      else
      {
        uint64_t v27 = v15;
        AGWeakAttributeGetAttribute();
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
        unsigned __int8 v31 = *InputValue;
        b = *((double *)InputValue + 1);
        swift_retain();
        swift_retain();
      }
      static Update.end()();
      if (b == 0.0)
      {
        uint64_t v33 = swift_retain_n();
        int v34 = specialized find<A>(_:key:)(v33);
        if (v34) {
          long long v35 = *(unsigned __int8 *)(v34 + 72);
        }
        else {
          long long v35 = 0;
        }
        swift_release_n();
        if (v35)
        {
LABEL_95:
          v156[1] = 0.0;
          v156[2] = 0.0;
          v156[0] = -1.0;
          v156[3] = 1.0;
          v156[4] = a5;
          v156[5] = 0.0;
          Path.applying(_:)(v156, (uint64_t)v164);
          outlined retain of Path((uint64_t)&v159, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          outlined retain of Path((uint64_t)&v159, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          uint64_t v21 = *(double *)v164;
          uint64_t v20 = *(double *)&v164[1];
          rect = *(double *)&v164[2];
          uint64_t v23 = v165;
          uint64_t v15 = v27;
          CGFloat v16 = v26;
          __int16 v11 = v25;
          uint64_t v22 = *(double *)&v164[3];
          goto LABEL_21;
        }
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v31, v171);
        swift_release_n();
        swift_release_n();
        if (v171[0]) {
          goto LABEL_95;
        }
      }
      outlined retain of Path((uint64_t)&v159, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      uint64_t v15 = v27;
      CGFloat v16 = v26;
      __int16 v11 = v25;
      uint64_t v22 = v153;
LABEL_21:
      uint64_t v154 = v15 + 1;
      switch(v23)
      {
        case 2:
          if (!CGRectIsNull(*(CGRect *)(*(void *)&v21 + 16))) {
            break;
          }
          goto LABEL_90;
        case 3:
        case 4:
          goto LABEL_191;
        case 5:
          if (!*(unsigned char *)(*(void *)&v21 + 16))
          {
            if (!*(void *)(*(void *)&v21 + 24)) {
              __break(1u);
            }
LABEL_28:
            swift_retain();
            goto LABEL_39;
          }
          if (*(unsigned char *)(*(void *)&v21 + 16) == 1) {
            goto LABEL_28;
          }
          uint64_t v36 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v36 != -1) {
            swift_once();
          }
LABEL_39:
          IsEmpCGFloat ty = RBPathIsEmpty();
          outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, 5u);
          if (IsEmpty) {
            goto LABEL_90;
          }
          break;
        case 6:
          goto LABEL_91;
        default:
          v174.origin.x = v21;
          v174.origin.y = v20;
          v174.size.CGFloat width = rect;
          v174.size.height = v22;
          if (CGRectIsNull(v174)) {
            goto LABEL_90;
          }
          break;
      }
      switch((char)size)
      {
        case 0:
          CGFloat v10 = v16;
          a4 = v141;
          CGFloat v8 = v142;
          CGFloat v9 = v143;
          double v7 = 0.0;
          uint64_t v38 = 0.0;
          goto LABEL_43;
        case 1:
          CGFloat v8 = v142;
          CGFloat v9 = v143;
          if (v142 != v143) {
            goto LABEL_81;
          }
          a4 = v141;
          CGFloat v10 = v16;
          double v7 = v142 * 0.5;
          uint64_t v138 = v142 * 0.5;
          break;
        case 2:
          CGFloat v10 = *(double *)(*(void *)&v16 + 16);
          a4 = *(double *)(*(void *)&v16 + 24);
          CGFloat v8 = *(double *)(*(void *)&v16 + 32);
          CGFloat v9 = *(double *)(*(void *)&v16 + 40);
          double v7 = *(double *)(*(void *)&v16 + 48);
          uint64_t v38 = *(double *)(*(void *)&v16 + 56);
LABEL_43:
          uint64_t v138 = v38;
          break;
        case 6:
          if (*(void *)&v141 | *(void *)&v16 | *(void *)&v142 | *(void *)&v143) {
            goto LABEL_81;
          }
          v157.b = 0.0;
          v157.CC_SHA1_CTX c = 0.0;
          v157.a = 1.0;
          v157.d = 1.0;
          v157.CGFloat tx = 0.0;
          v157.CGFloat ty = 0.0;
          if (CGAffineTransformIsIdentity(&v157)) {
            goto LABEL_80;
          }
          ++v15;
          switch(v23)
          {
            case 2:
              uint64_t v191 = *(CGRect *)(*(void *)&v21 + 16);
              v41.i64[0] = *(void *)(*(void *)&v21 + 48);
              sizea = (CGSize)v41;
              v41.i64[0] = *(void *)(*(void *)&v21 + 56);
              char v144 = v41;
              uint64_t v90 = *(unsigned char *)(*(void *)&v21 + 64);
              v157.b = 0.0;
              v157.CC_SHA1_CTX c = 0.0;
              v157.a = 1.0;
              v157.d = 1.0;
              v157.CGFloat tx = 0.0;
              v157.CGFloat ty = 0.0;
              v192 = CGRectApplyAffineTransform(v191, &v157);
              x = v192.origin.x;
              y = v192.origin.y;
              CGFloat width = v192.size.width;
              height = v192.size.height;
              if ((~*(void *)&sizea.width & 0x7FF0000000000000) != 0)
              {
                uint64_t v94 = v144.i64[0];
                if ((~v144.i64[0] & 0x7FF0000000000000) != 0)
                {
                  v157.b = 0.0;
                  v157.CC_SHA1_CTX c = 0.0;
                  v157.a = 1.0;
                  v157.d = 1.0;
                  v157.CGFloat tx = 0.0;
                  v157.CGFloat ty = 0.0;
                  uint64_t v95 = sizea.width;
                  uint64_t v98 = CGSizeApplyAffineTransform(*(CGSize *)(&v94 - 1), &v157);
                  *(CGFloat *)v97.i64 = v98.height;
                  *(CGFloat *)v96.i64 = v98.width;
                  *(void *)&sizea.CGFloat width = vbslq_s8(v128, v96, (int8x16_t)sizea).u64[0];
                  v144.i64[0] = vbslq_s8(v128, v97, v144).u64[0];
                }
              }
              CGFloat v16 = COERCE_DOUBLE(swift_allocObject());
              *(CGFloat *)(*(void *)&v16 + 16) = x;
              *(CGFloat *)(*(void *)&v16 + 24) = y;
              *(CGFloat *)(*(void *)&v16 + 32) = width;
              *(CGFloat *)(*(void *)&v16 + 40) = height;
              *(CGFloat *)(*(void *)&v16 + 48) = sizea.width;
              *(void *)(*(void *)&v16 + 56) = v144.i64[0];
              *(unsigned char *)(*(void *)&v16 + 64) = v90;
              size = 2;
              outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, 2u);
              swift_release();
              uint64_t v141 = 0.0;
              char v142 = 0.0;
              uint64_t v143 = 0.0;
              goto LABEL_160;
            case 1:
              v189.origin.x = v21;
              v189.origin.y = v20;
              v189.size.CGFloat width = rect;
              v157.b = 0.0;
              v157.CC_SHA1_CTX c = 0.0;
              v189.size.height = v22;
              v157.a = 1.0;
              v157.d = 1.0;
              v157.CGFloat tx = 0.0;
              v157.CGFloat ty = 0.0;
              v190 = CGRectApplyAffineTransform(v189, &v157);
              uint64_t v86 = v190.origin.x;
              CGFloat width = v190.origin.y;
              uint64_t v87 = v190.size.width;
              uint64_t v88 = v190.size.height;
              if (CGRectIsNull(v190))
              {
                swift_release();
LABEL_147:
                CGFloat v16 = 0.0;
                uint64_t v141 = 0.0;
                char v142 = 0.0;
                uint64_t v143 = 0.0;
                uint64_t v89 = 6;
              }
              else
              {
                v193.origin.x = v86;
                v193.origin.y = width;
                v193.size.CGFloat width = v87;
                v193.size.height = v88;
                IsInfinite = CGRectIsInfinite(v193);
                swift_release();
                CGFloat v16 = v86;
                uint64_t v141 = width;
                char v142 = v87;
                uint64_t v143 = v88;
                uint64_t v89 = !IsInfinite;
              }
              size = v89;
LABEL_160:
              uint64_t v14 = v146;
              a3 = v139;
              a4 = v140;
              goto LABEL_6;
            case 0:
              v175.origin.x = v21;
              v175.origin.y = v20;
              v175.size.CGFloat width = rect;
              v157.b = 0.0;
              v157.CC_SHA1_CTX c = 0.0;
              v175.size.height = v22;
              v157.a = 1.0;
              v157.d = 1.0;
              v157.CGFloat tx = 0.0;
              v157.CGFloat ty = 0.0;
              char v176 = CGRectApplyAffineTransform(v175, &v157);
              float v42 = v176.origin.x;
              CGFloat width = v176.origin.y;
              unsigned __int8 v43 = v176.size.width;
              long long v44 = v176.size.height;
              BOOL IsNull = CGRectIsNull(v176);
              swift_release();
              if (IsNull) {
                goto LABEL_147;
              }
              size = 0;
              CGFloat v16 = v42;
              uint64_t v141 = width;
              char v142 = v43;
              uint64_t v143 = v44;
              goto LABEL_160;
          }
          type metadata accessor for Path.PathBox();
          CGFloat v16 = COERCE_DOUBLE(swift_allocObject());
          *(_OWORD *)(*(void *)&v16 + 24) = 0u;
          uint64_t v99 = *(void *)&v16 + 24;
          *(_OWORD *)(*(void *)&v16 + 104) = 0u;
          *(_OWORD *)(*(void *)&v16 + 88) = 0u;
          *(_OWORD *)(*(void *)&v16 + 72) = 0u;
          *(_OWORD *)(*(void *)&v16 + 56) = 0u;
          *(_OWORD *)(*(void *)&v16 + 40) = 0u;
          *(unsigned char *)(*(void *)&v16 + 16) = 2;
          RBPathStorageInit();
          v157.b = 0.0;
          v157.CC_SHA1_CTX c = 0.0;
          v157.a = 1.0;
          v157.d = 1.0;
          v157.CGFloat tx = 0.0;
          v157.CGFloat ty = 0.0;
          if (*(unsigned char *)(*(void *)&v16 + 16) != 2) {
            Path.PathBox.prepareBuffer()();
          }
          MEMORY[0x24C526C30](v99, 17, 0, &v157);
          a3 = v139;
          a4 = v140;
          if ((v23 - 3) < 2u) {
            goto LABEL_191;
          }
          if (!*(unsigned char *)(*(void *)&v21 + 16))
          {
            if (!*(void *)(*(void *)&v21 + 24)) {
              goto LABEL_190;
            }
LABEL_157:
            swift_retain();
            goto LABEL_165;
          }
          if (*(unsigned char *)(*(void *)&v21 + 16) == 1) {
            goto LABEL_157;
          }
          int v101 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v101 != -1) {
            swift_once();
          }
LABEL_165:
          RBPathStorageAppendPath();
          size = 5;
          outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, 5u);
          MEMORY[0x24C526C30](v99, 16, 0, 0);
          outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, v23);
          swift_release();
          uint64_t v141 = 0.0;
          char v142 = 0.0;
          uint64_t v143 = 0.0;
          goto LABEL_92;
        default:
          goto LABEL_81;
      }
      switch(v23)
      {
        case 0:
          uint64_t v133 = v7;
          double v7 = v21;
          int v39 = v20;
          a3 = rect;
          CGFloat width = v22;
          BOOL v40 = 0.0;
          goto LABEL_58;
        case 1:
          a3 = rect;
          CGFloat width = v22;
          if (rect == v22)
          {
            uint64_t v133 = v7;
            int v39 = v20;
            double v7 = v21;
            BOOL v40 = rect * 0.5;
LABEL_58:
            int v134 = v40;
LABEL_59:
            uint64_t v132 = v40;
            v177.origin.x = v10;
            v177.origin.y = a4;
            v177.size.CGFloat width = v8;
            v177.size.height = v9;
            uint64_t v178 = CGRectInset(v177, -0.001, -0.001);
            v194.origin.x = v7;
            v194.origin.y = v39;
            v194.size.CGFloat width = a3;
            v194.size.height = width;
            uint64_t v131 = v39;
            if (!CGRectContainsRect(v178, v194)) {
              goto LABEL_69;
            }
            recCGAffineTransform t2 = v7;
            double v7 = v133;
            if (v138 > v132)
            {
LABEL_61:
              while (2)
              {
                v179.origin.x = v10;
                v179.origin.y = a4;
                v179.size.CGFloat width = v8;
                v179.size.height = v9;
                long long v46 = v10;
                int v47 = fabs(CGRectGetWidth(v179)) * 0.5;
                v180.origin.x = v46;
                v180.origin.y = a4;
                v180.size.CGFloat width = v8;
                v180.size.height = v9;
                uint64_t v48 = fabs(CGRectGetHeight(v180)) * 0.5;
                if (v48 >= v47) {
                  uint64_t v48 = v47;
                }
                CGFloat v10 = v46;
                if (v48 >= v7) {
                  uint64_t v49 = v7;
                }
                else {
                  uint64_t v49 = v48;
                }
                if (v48 >= v138) {
                  uint64_t v48 = v138;
                }
                uint64_t v50 = v49 * 0.292893219;
                uint64_t v51 = v48 * 0.292893219;
                v181.origin.x = v46;
                v181.origin.y = a4;
                v181.size.CGFloat width = v8;
                v181.size.height = v9;
                int v182 = CGRectInset(v181, v50, v51);
                double v7 = rect2;
                int v39 = v131;
                v195.origin.x = rect2;
                v195.origin.y = v131;
                v195.size.CGFloat width = a3;
                v195.size.height = width;
                if (!CGRectContainsRect(v182, v195))
                {
LABEL_69:
                  v183.origin.x = v7;
                  v183.origin.y = v39;
                  v183.size.CGFloat width = a3;
                  v183.size.height = width;
                  uint64_t v184 = CGRectInset(v183, -0.001, -0.001);
                  v196.origin.x = v10;
                  recCGAffineTransform t2 = a4;
                  v196.origin.y = a4;
                  v196.size.CGFloat width = v8;
                  v196.size.height = v9;
                  unsigned __int8 v52 = CGRectContainsRect(v184, v196);
                  uint64_t v53 = size;
                  if (!v52) {
                    goto LABEL_81;
                  }
                  if (v134 > v133 || v132 > v138)
                  {
                    v185.origin.x = v7;
                    v185.origin.y = v131;
                    v185.size.CGFloat width = a3;
                    v185.size.height = width;
                    uint64_t v138 = v10;
                    CGFloat v10 = 0.5;
                    a4 = v7;
                    double v7 = fabs(CGRectGetWidth(v185)) * 0.5;
                    v186.origin.x = a4;
                    v186.origin.y = v131;
                    v186.size.CGFloat width = a3;
                    v186.size.height = width;
                    uint64_t v54 = fabs(CGRectGetHeight(v186)) * 0.5;
                    if (v54 >= v7) {
                      uint64_t v54 = v7;
                    }
                    uint64_t v55 = v134;
                    if (v54 < v134) {
                      uint64_t v55 = v54;
                    }
                    if (v54 >= v132) {
                      uint64_t v54 = v132;
                    }
                    uint64_t v56 = v55 * 0.292893219;
                    unsigned __int8 v57 = v54 * 0.292893219;
                    v187.origin.x = a4;
                    v187.origin.y = v131;
                    v187.size.CGFloat width = a3;
                    v187.size.height = width;
                    uint64_t v188 = CGRectInset(v187, v56, v57);
                    v197.origin.x = v138;
                    v197.origin.y = rect2;
                    v197.size.CGFloat width = v8;
                    v197.size.height = v9;
                    CGRect v58 = CGRectContainsRect(v188, v197);
                    uint64_t v53 = size;
                    if (!v58)
                    {
LABEL_81:
                      switch(v23)
                      {
                        case 0:
                          CGRect v59 = v21;
                          CGRect v60 = v20;
                          CGRect v61 = rect;
                          CGRect v62 = v22;
                          goto LABEL_89;
                        case 1:
                          a3 = rect;
                          CGFloat width = v22;
                          goto LABEL_88;
                        case 2:
                          CGRect v59 = *(double *)(*(void *)&v21 + 16);
                          CGRect v60 = *(double *)(*(void *)&v21 + 24);
                          CGRect v61 = *(double *)(*(void *)&v21 + 32);
                          CGRect v62 = *(double *)(*(void *)&v21 + 40);
                          goto LABEL_89;
                        case 3:
                        case 4:
                          goto LABEL_191;
                        case 5:
                          goto LABEL_83;
                        default:
                          continue;
                      }
                    }
                  }
                  outlined consume of Path.Storage(*(uint64_t *)&v16, *(uint64_t *)&v141, *(uint64_t *)&v142, *(uint64_t *)&v143, v53);
LABEL_80:
                  swift_release();
                  CGFloat v16 = v21;
                  uint64_t v141 = v20;
                  char v142 = rect;
                  uint64_t v143 = v22;
                  size = v23;
                  goto LABEL_4;
                }
                break;
              }
            }
            outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, v23);
            swift_release();
LABEL_4:
            uint64_t v14 = v146;
            a3 = v139;
            a4 = v140;
            goto LABEL_5;
          }
LABEL_88:
          CGRect v59 = v21;
          CGRect v60 = v20;
          CGRect v61 = a3;
          CGRect v62 = width;
LABEL_89:
          a3 = v139;
          a4 = v140;
          if (CGRectIsNull(*(CGRect *)&v59))
          {
LABEL_90:
            outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, v23);
LABEL_91:
            swift_release();
LABEL_92:
            uint64_t v14 = v146;
LABEL_5:
            uint64_t v15 = v154;
          }
          else
          {
LABEL_101:
            uint64_t v136 = v20;
            uint64_t v135 = v23;
            if (size != 5)
            {
              *(double *)&__int16 v11 = v16;
              type metadata accessor for Path.PathBox();
              *(double *)&uint64_t v69 = COERCE_DOUBLE(swift_allocObject());
              *(_OWORD *)(v69 + 24) = 0u;
              uint64_t v70 = v69 + 24;
              *(_OWORD *)(v69 + 104) = 0u;
              *(_OWORD *)(v69 + 88) = 0u;
              *(_OWORD *)(v69 + 72) = 0u;
              *(_OWORD *)(v69 + 56) = 0u;
              *(_OWORD *)(v69 + 40) = 0u;
              *(unsigned char *)(v69 + 16) = 2;
              RBPathStorageInit();
              uint64_t v71 = *(unsigned __int8 *)(v69 + 16);
              swift_retain();
              if (v71 != 2) {
                Path.PathBox.prepareBuffer()();
              }
              CGFloat v16 = *(double *)&v11;
              switch(size)
              {
                case 0:
                  uint64_t v65 = *(void *)&v141;
                  uint64_t v66 = *(void *)&v142;
                  v157.a = v16;
                  v157.b = v141;
                  char v67 = *(void *)&v143;
                  v157.CC_SHA1_CTX c = v142;
                  v157.d = v143;
                  MEMORY[0x24C526C30](v70, 5, &v157, 0);
                  swift_release();
                  uint64_t v68 = 0;
                  goto LABEL_122;
                case 1:
                  uint64_t v65 = *(void *)&v141;
                  uint64_t v66 = *(void *)&v142;
                  v157.a = v16;
                  v157.b = v141;
                  char v67 = *(void *)&v143;
                  v157.CC_SHA1_CTX c = v142;
                  v157.d = v143;
                  MEMORY[0x24C526C30](v70, 7, &v157, 0);
                  swift_release();
                  uint64_t v68 = 1;
                  goto LABEL_122;
                case 2:
                  uint64_t v74 = *((unsigned __int8 *)v11 + 64);
                  uint64_t v75 = *((_OWORD *)v11 + 2);
                  *(_OWORD *)&v157.a = *((_OWORD *)v11 + 1);
                  *(_OWORD *)&v157.CC_SHA1_CTX c = v75;
                  *(_OWORD *)&v157.CGFloat tx = *((_OWORD *)v11 + 3);
                  if (v74) {
                    uint64_t v76 = 9;
                  }
                  else {
                    uint64_t v76 = 8;
                  }
                  MEMORY[0x24C526C30](v70, v76, &v157, 0);
                  swift_release();
                  uint64_t v68 = 2;
                  goto LABEL_117;
                case 3:
                case 4:
                  goto LABEL_191;
                case 5:
                  __break(1u);
                  JUMPOUT(0x245C4D9A4);
                case 6:
                  swift_release();
                  uint64_t v68 = 6;
LABEL_117:
                  uint64_t v65 = *(void *)&v141;
                  uint64_t v66 = *(void *)&v142;
                  char v67 = *(void *)&v143;
                  goto LABEL_122;
                default:
                  goto LABEL_81;
              }
            }
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v65 = 0;
              uint64_t v66 = 0;
              char v67 = 0;
              uint64_t v68 = 6;
              *(double *)&uint64_t v69 = v16;
              CGFloat v16 = 0.0;
            }
            else
            {
              type metadata accessor for Path.PathBox();
              *(double *)&uint64_t v69 = COERCE_DOUBLE(swift_allocObject());
              *(_OWORD *)(v69 + 24) = 0u;
              *(_OWORD *)(v69 + 104) = 0u;
              *(_OWORD *)(v69 + 88) = 0u;
              *(_OWORD *)(v69 + 72) = 0u;
              *(_OWORD *)(v69 + 56) = 0u;
              *(_OWORD *)(v69 + 40) = 0u;
              uint64_t v72 = *(unsigned __int8 *)(*(void *)&v16 + 16);
              *(unsigned char *)(v69 + 16) = v72;
              if (v72)
              {
                if (v72 == 1)
                {
                  swift_retain();
                  *(void *)(v69 + 24) = RBPathRetain();
                  *(void *)(v69 + 32) = v73;
                  swift_release();
                }
                else
                {
                  RBPathStorageInit();
                }
              }
              else
              {
                uint64_t v77 = *(void **)(*(void *)&v16 + 24);
                if (!v77) {
                  goto LABEL_188;
                }
                *(void *)(v69 + 24) = v77;
                uint64_t v78 = v77;
              }
              swift_release();
              CGFloat v16 = 0.0;
              uint64_t v65 = 0;
              uint64_t v66 = 0;
              char v67 = 0;
              uint64_t v68 = 6;
            }
LABEL_122:
            swift_retain();
            outlined consume of Path.Storage(*(uint64_t *)&v16, v65, v66, v67, v68);
            uint64_t v79 = *(unsigned __int8 *)(v69 + 16);
            swift_retain();
            if (v79 != 2) {
              Path.PathBox.prepareBuffer()();
            }
            v157.b = 0.0;
            v157.CC_SHA1_CTX c = 0.0;
            v157.a = 1.0;
            v157.d = 1.0;
            v157.CGFloat tx = 0.0;
            v157.CGFloat ty = 0.0;
            IsIdentiCGFloat ty = CGAffineTransformIsIdentity(&v157);
            if (!IsIdentity)
            {
              v157.b = 0.0;
              v157.CC_SHA1_CTX c = 0.0;
              v157.a = 1.0;
              v157.d = 1.0;
              v157.CGFloat tx = 0.0;
              v157.CGFloat ty = 0.0;
              MEMORY[0x24C526C30](v69 + 24, 17, 0, &v157);
            }
            switch(v135)
            {
              case 1:
                v157.a = v21;
                v157.b = v136;
                v157.CC_SHA1_CTX c = rect;
                v157.d = v22;
                uint64_t v81 = v69 + 24;
                int v82 = 7;
                goto LABEL_136;
              case 2:
                uint64_t v83 = *(unsigned __int8 *)(*(void *)&v21 + 64);
                uint64_t v84 = *(_OWORD *)(*(void *)&v21 + 32);
                *(_OWORD *)&v157.a = *(_OWORD *)(*(void *)&v21 + 16);
                *(_OWORD *)&v157.CC_SHA1_CTX c = v84;
                *(_OWORD *)&v157.CGFloat tx = *(_OWORD *)(*(void *)&v21 + 48);
                if (v83) {
                  int v82 = 9;
                }
                else {
                  int v82 = 8;
                }
                uint64_t v81 = v69 + 24;
                goto LABEL_136;
              case 3:
              case 4:
                goto LABEL_191;
              case 5:
                if (!*(unsigned char *)(*(void *)&v21 + 16))
                {
                  if (!*(void *)(*(void *)&v21 + 24)) {
                    goto LABEL_189;
                  }
LABEL_134:
                  swift_retain();
                  goto LABEL_143;
                }
                if (*(unsigned char *)(*(void *)&v21 + 16) == 1) {
                  goto LABEL_134;
                }
                uint64_t v85 = one-time initialization token for bufferCallbacks;
                swift_retain();
                if (v85 != -1) {
                  swift_once();
                }
LABEL_143:
                RBPathStorageAppendPath();
                outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v136, *(uint64_t *)&rect, *(uint64_t *)&v22, 5u);
                uint64_t v15 = v154;
                if (!IsIdentity) {
LABEL_137:
                }
                  MEMORY[0x24C526C30](v69 + 24, 16, 0, 0);
LABEL_138:
                swift_release_n();
                outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v136, *(uint64_t *)&rect, *(uint64_t *)&v22, v135);
                swift_release();
                uint64_t v141 = 0.0;
                char v142 = 0.0;
                uint64_t v143 = 0.0;
                size = 5;
                *(double *)&__int16 v11 = COERCE_DOUBLE((__objc2_class *)&OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache);
                CGFloat v16 = *(double *)&v69;
                uint64_t v14 = v146;
                break;
              default:
                v157.a = v21;
                v157.b = v136;
                v157.CC_SHA1_CTX c = rect;
                v157.d = v22;
                uint64_t v81 = v69 + 24;
                int v82 = 5;
LABEL_136:
                MEMORY[0x24C526C30](v81, v82, &v157, 0);
                ++v15;
                if (!IsIdentity) {
                  goto LABEL_137;
                }
                goto LABEL_138;
            }
          }
LABEL_6:
          if (v147 == v15)
          {
            swift_bridgeObjectRelease();
            uint64_t v102 = *(void *)&v141;
            uint64_t v103 = *(void *)&v142;
            uint64_t v104 = *(void *)&v143;
            uint64_t v105 = size;
            goto LABEL_168;
          }
          break;
        case 2:
          uint64_t v133 = v7;
          double v7 = *(double *)(*(void *)&v21 + 16);
          int v39 = *(double *)(*(void *)&v21 + 24);
          a3 = *(double *)(*(void *)&v21 + 32);
          CGFloat width = *(double *)(*(void *)&v21 + 40);
          int v134 = *(double *)(*(void *)&v21 + 48);
          BOOL v40 = *(double *)(*(void *)&v21 + 56);
          goto LABEL_59;
        case 3:
        case 4:
          goto LABEL_191;
        case 5:
LABEL_83:
          if (!*(unsigned char *)(*(void *)&v21 + 16))
          {
            if (!*(void *)(*(void *)&v21 + 24))
            {
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
              while (1)
              {
LABEL_191:
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
            }
LABEL_97:
            swift_retain();
            a3 = v139;
            a4 = v140;
            goto LABEL_100;
          }
          if (*(unsigned char *)(*(void *)&v21 + 16) == 1) {
            goto LABEL_97;
          }
          uint64_t v63 = one-time initialization token for bufferCallbacks;
          swift_retain();
          a3 = v139;
          a4 = v140;
          if (v63 != -1) {
            swift_once();
          }
LABEL_100:
          uint64_t v64 = RBPathIsEmpty();
          outlined consume of Path.Storage(*(uint64_t *)&v21, *(uint64_t *)&v20, *(uint64_t *)&rect, *(uint64_t *)&v22, 5u);
          if ((v64 & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_90;
        default:
          goto LABEL_61;
      }
    }
  }
  CGFloat v16 = 0.0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 6;
LABEL_168:
  *(CGFloat *)uint64_t v171 = v16;
  v171[1] = v102;
  v171[2] = v103;
  v171[3] = v104;
  double v172 = v105;
  uint64_t v106 = v102;
  unsigned int v145 = v104;
  sizeb = v105;
  outlined copy of Path.Storage(*(uint64_t *)&v16, v102, v103, v104, v105);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  uint64_t v107 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504)
  {
    uint64_t v108 = dyld_program_minos_at_least();
    uint64_t v109 = v16;
    uint64_t v110 = v106;
    uint64_t v111 = v106;
    uint64_t v112 = v103;
    int v113 = v145;
    float64x2_t v114 = v145;
    uint64_t v115 = sizeb;
    char v116 = sizeb;
    if ((v108 & 1) == 0) {
      goto LABEL_185;
    }
  }
  else
  {
    uint64_t v109 = v16;
    uint64_t v110 = v106;
    uint64_t v111 = v106;
    uint64_t v117 = *((_DWORD *)v11 + 320);
    uint64_t v112 = v103;
    int v113 = v145;
    float64x2_t v114 = v145;
    uint64_t v115 = sizeb;
    char v116 = sizeb;
    if (v117 < v107) {
      goto LABEL_185;
    }
  }
  uint64_t v118 = _threadGeometryProxyData();
  uint64_t v115 = sizeb;
  int v113 = v145;
  uint64_t v109 = v16;
  uint64_t v111 = v110;
  uint64_t v112 = v103;
  float64x2_t v114 = v145;
  char v116 = sizeb;
  if (v118)
  {
    long long v119 = *(_DWORD *)(v118 + 48);
    uint64_t v120 = *(_OWORD *)(v118 + 16);
    *(_OWORD *)&v157.a = *(_OWORD *)v118;
    *(_OWORD *)&v157.CC_SHA1_CTX c = v120;
    *(_OWORD *)&v157.CGFloat tx = *(_OWORD *)(v118 + 32);
    long long v158 = v119;
    GeometryProxy.environment.getter(&v166);
    uint64_t v121 = v166;
    if (v167)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v121, &v157);
      swift_release_n();
      swift_release_n();
      uint64_t v109 = v16;
      uint64_t v110 = v106;
      uint64_t v111 = v106;
      uint64_t v112 = v103;
      int v113 = v145;
      float64x2_t v114 = v145;
      uint64_t v115 = sizeb;
      char v116 = sizeb;
      if ((LOBYTE(v157.a) & 1) == 0) {
        goto LABEL_185;
      }
    }
    else
    {
      uint64_t v122 = swift_retain_n();
      uint64_t v123 = specialized find<A>(_:key:)(v122);
      uint64_t v110 = v106;
      if (!v123)
      {
        swift_release_n();
        uint64_t v109 = v16;
        uint64_t v111 = v106;
        uint64_t v112 = v103;
        int v113 = v145;
        float64x2_t v114 = v145;
        uint64_t v115 = sizeb;
        char v116 = sizeb;
        goto LABEL_185;
      }
      uint64_t v124 = v16;
      long long v125 = *(unsigned __int8 *)(v123 + 72);
      swift_release_n();
      uint64_t v109 = v124;
      uint64_t v111 = v106;
      uint64_t v112 = v103;
      int v113 = v145;
      float64x2_t v114 = v145;
      uint64_t v115 = sizeb;
      char v116 = sizeb;
      int v126 = v125 == 1;
      CGFloat v16 = v124;
      if (!v126) {
        goto LABEL_185;
      }
    }
    v157.a = -1.0;
    v157.b = 0.0;
    v157.CC_SHA1_CTX c = 0.0;
    v157.d = 1.0;
    v157.CGFloat tx = a5;
    v157.CGFloat ty = 0.0;
    Path.applying(_:)(&v157.a, (uint64_t)&v166);
    uint64_t v109 = *(double *)&v166;
    uint64_t v111 = v167;
    uint64_t v112 = v168;
    float64x2_t v114 = v169;
    char v116 = v170;
    outlined consume of Path.Storage(*(uint64_t *)&v16, v110, v103, v145, sizeb);
    uint64_t v115 = sizeb;
    int v113 = v145;
  }
LABEL_185:
  uint64_t result = outlined consume of Path.Storage(*(uint64_t *)&v16, v110, v103, v113, v115);
  *(CGFloat *)a2 = v109;
  *(void *)(a2 + 8) = v111;
  *(void *)(a2 + 16) = v112;
  *(void *)(a2 + 24) = v114;
  *(unsigned char *)(a2 + 32) = v116;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D2>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v23);
  uint64_t v5 = v23[0];
  uint64_t v6 = v23[1];
  uint64_t v7 = v23[2];
  uint64_t v8 = v23[3];
  char v9 = v24;
  outlined init with take of Path.Storage((uint64_t)v23, (uint64_t)v30);
  outlined retain of Path((uint64_t)v30, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v10 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else if (dword_26B0F4500 < v10)
  {
    goto LABEL_17;
  }
  uint64_t v11 = _threadGeometryProxyData();
  if (v11)
  {
    int v12 = *(_DWORD *)(v11 + 48);
    long long v13 = *(_OWORD *)(v11 + 16);
    long long v19 = *(_OWORD *)v11;
    long long v20 = v13;
    long long v21 = *(_OWORD *)(v11 + 32);
    int v22 = v12;
    GeometryProxy.environment.getter(&v25);
    uint64_t v14 = v25;
    if (v26)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, &v19);
      swift_release_n();
      swift_release_n();
      if ((v19 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      long long v19 = 0xBFF0000000000000;
      *(void *)&long long v20 = 0;
      *((void *)&v20 + 1) = 0x3FF0000000000000;
      long long v21 = a3;
      Path.applying(_:)((double *)&v19, (uint64_t)&v25);
      uint64_t v5 = v25;
      uint64_t v6 = v26;
      uint64_t v7 = v27;
      uint64_t v8 = v28;
      char v9 = v29;
      outlined retain of Path((uint64_t)v23, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    uint64_t v15 = swift_retain_n();
    uint64_t v16 = specialized find<A>(_:key:)(v15);
    if (!v16)
    {
      swift_release_n();
      goto LABEL_17;
    }
    int v17 = *(unsigned __int8 *)(v16 + 72);
    swift_release_n();
    if (v17 == 1) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = outlined retain of Path((uint64_t)v23, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(char a1@<W0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double Width = CGRectGetWidth(*(CGRect *)&a3);
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.CGFloat width = a5;
  v17.size.height = a6;
  double Height = CGRectGetHeight(v17);
  if (Height < Width) {
    double Width = Height;
  }
  v18.origin.x = a3;
  v18.origin.y = a4;
  v18.size.CGFloat width = a5;
  v18.size.height = a6;
  if (CGRectIsNull(v18))
  {
    uint64_t result = 0;
    char v15 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else
  {
    double v16 = Width * 0.5;
    if (v16 == 0.0
      || (v19.origin.x = a3, v19.origin.y = a4, v19.size.CGFloat width = a5, v19.size.height = a6, CGRectIsInfinite(v19)))
    {
      char v15 = 0;
      uint64_t result = *(void *)&a3;
    }
    else
    {
      uint64_t result = swift_allocObject();
      *(CGFloat *)(result + 16) = a3;
      *(CGFloat *)(result + 24) = a4;
      *(CGFloat *)(result + 32) = a5;
      *(CGFloat *)(result + 40) = a6;
      char v15 = 2;
      a4 = 0.0;
      *(double *)(result + 48) = v16;
      *(double *)(result + 56) = v16;
      a5 = 0.0;
      a6 = 0.0;
      *(unsigned char *)(result + 64) = a1 & 1;
    }
  }
  *(void *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>)
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      char v13 = 0;
      goto LABEL_10;
    }
  }
  else if (static Semantics.forced < v12)
  {
    goto LABEL_7;
  }
  char v13 = LOBYTE(a6) & 1;
  *(void *)&a6 &= ~1uLL;
LABEL_10:
  v23.origin.CGFloat x = a2;
  v23.origin.CGFloat y = a3;
  v23.size.CGFloat width = a4;
  v23.size.CGFloat height = a5;
  CGRect v24 = CGRectInset(v23, a6, a6);
  CGFloat x = v24.origin.x;
  CGFloat y = v24.origin.y;
  CGFloat width = v24.size.width;
  CGFloat height = v24.size.height;
  double v18 = CGRectGetWidth(v24);
  v25.origin.CGFloat x = x;
  v25.origin.CGFloat y = y;
  v25.size.CGFloat width = width;
  v25.size.CGFloat height = height;
  double v19 = CGRectGetHeight(v25);
  if (v19 < v18) {
    double v18 = v19;
  }
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  if (CGRectIsNull(v26))
  {
    uint64_t result = 0;
    char v21 = 6;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    double v22 = v18 * 0.5;
    if (v22 == 0.0
      || (v27.origin.x = x, v27.origin.y = y, v27.size.CGFloat width = width, v27.size.height = height, CGRectIsInfinite(v27)))
    {
      char v21 = 0;
      uint64_t result = *(void *)&x;
    }
    else
    {
      uint64_t result = swift_allocObject();
      *(CGFloat *)(result + 16) = x;
      *(CGFloat *)(result + 24) = y;
      *(CGFloat *)(result + 32) = width;
      *(CGFloat *)(result + 40) = height;
      char v21 = 2;
      CGFloat y = 0.0;
      *(double *)(result + 48) = v22;
      *(double *)(result + 56) = v22;
      CGFloat width = 0.0;
      CGFloat height = 0.0;
      *(unsigned char *)(result + 64) = v13;
    }
  }
  *(void *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v21;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, unint64_t a2@<D2>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  char v10 = *(unsigned char *)(v2 + 32);
  outlined init with take of Path.Storage(v2, (uint64_t)v29);
  outlined retain of Path((uint64_t)v29, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  outlined retain of Path((uint64_t)v29, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v11 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else if (dword_26B0F4500 < v11)
  {
    goto LABEL_17;
  }
  uint64_t v12 = _threadGeometryProxyData();
  if (v12)
  {
    int v13 = *(_DWORD *)(v12 + 48);
    long long v14 = *(_OWORD *)(v12 + 16);
    long long v20 = *(_OWORD *)v12;
    long long v21 = v14;
    long long v22 = *(_OWORD *)(v12 + 32);
    int v23 = v13;
    GeometryProxy.environment.getter(&v24);
    uint64_t v15 = v24;
    if (v25)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v15, &v20);
      swift_release_n();
      swift_release_n();
      if ((v20 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      long long v20 = 0xBFF0000000000000;
      *(void *)&long long v21 = 0;
      *((void *)&v21 + 1) = 0x3FF0000000000000;
      long long v22 = a2;
      Path.applying(_:)((double *)&v20, (uint64_t)&v24);
      uint64_t v6 = v24;
      uint64_t v7 = v25;
      uint64_t v8 = v26;
      uint64_t v9 = v27;
      char v10 = v28;
      outlined retain of Path(v3, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    uint64_t v16 = swift_retain_n();
    uint64_t v17 = specialized find<A>(_:key:)(v16);
    if (!v17)
    {
      swift_release_n();
      goto LABEL_17;
    }
    char v18 = *(unsigned char *)(v17 + 72);
    swift_release_n();
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = outlined retain of Path(v3, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v11 = *(double *)v5;
  double v12 = *(double *)(v5 + 8);
  double v14 = *(double *)(v5 + 16);
  double v13 = *(double *)(v5 + 24);
  char v15 = *(unsigned char *)(v5 + 32);
  long long v30 = 0u;
  long long v31 = 0u;
  char v16 = 6;
  LOBYTE(v32) = 6;
  long long v41 = 0x3FF0000000000000uLL;
  uint64_t v42 = 0;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    specialized Path.withMutableBuffer(do:)((uint64_t)&v30, &v41, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    uint64_t v19 = *((void *)&v30 + 1);
    uint64_t v20 = v30;
    uint64_t v17 = *((void *)&v31 + 1);
    uint64_t v18 = v31;
    char v16 = v32;
  }
  v39[0] = v30;
  v39[1] = v31;
  char v40 = v32;
  outlined init with take of Path.Storage((uint64_t)v39, (uint64_t)v46);
  outlined retain of Path((uint64_t)v46, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v21 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_20;
    }
  }
  else if (dword_26B0F4500 < v21)
  {
    goto LABEL_20;
  }
  uint64_t v22 = _threadGeometryProxyData();
  if (v22)
  {
    int v23 = *(_DWORD *)(v22 + 48);
    long long v24 = *(_OWORD *)(v22 + 16);
    long long v30 = *(_OWORD *)v22;
    long long v31 = v24;
    long long v32 = *(_OWORD *)(v22 + 32);
    int v33 = v23;
    GeometryProxy.environment.getter(&v34);
    uint64_t v25 = v34;
    if (v35)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v25, &v30);
      swift_release_n();
      swift_release_n();
      if ((v30 & 1) == 0) {
        goto LABEL_20;
      }
LABEL_18:
      long long v30 = 0xBFF0000000000000;
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = 0x3FF0000000000000;
      long long v32 = *(unint64_t *)&a4;
      Path.applying(_:)((double *)&v30, (uint64_t)&v34);
      uint64_t v20 = v34;
      uint64_t v19 = v35;
      uint64_t v18 = v36;
      uint64_t v17 = v37;
      char v16 = v38;
      outlined retain of Path((uint64_t)v39, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_20;
    }
    uint64_t v26 = swift_retain_n();
    uint64_t v27 = specialized find<A>(_:key:)(v26);
    if (!v27)
    {
      swift_release_n();
      goto LABEL_20;
    }
    char v28 = *(unsigned char *)(v27 + 72);
    swift_release_n();
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_20:
  uint64_t result = outlined retain of Path((uint64_t)v39, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v19;
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v17;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, unint64_t a3@<D2>)
{
  long long v6 = v3[1];
  long long v25 = *v3;
  long long v26 = v6;
  long long v27 = v3[2];
  UnevenRoundedRectangle._Inset.path(in:)((uint64_t)v28, a2);
  uint64_t v7 = v28[0];
  uint64_t v8 = v28[1];
  uint64_t v9 = v28[2];
  uint64_t v10 = v28[3];
  char v11 = v29;
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)v35);
  outlined retain of Path((uint64_t)v35, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else if (dword_26B0F4500 < v12)
  {
    goto LABEL_17;
  }
  uint64_t v13 = _threadGeometryProxyData();
  if (v13)
  {
    int v14 = *(_DWORD *)(v13 + 48);
    long long v15 = *(_OWORD *)(v13 + 16);
    long long v21 = *(_OWORD *)v13;
    long long v22 = v15;
    long long v23 = *(_OWORD *)(v13 + 32);
    int v24 = v14;
    GeometryProxy.environment.getter(&v30);
    uint64_t v16 = v30;
    if (v31)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v16, &v21);
      swift_release_n();
      swift_release_n();
      if ((v21 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      long long v21 = 0xBFF0000000000000;
      *(void *)&long long v22 = 0;
      *((void *)&v22 + 1) = 0x3FF0000000000000;
      long long v23 = a3;
      Path.applying(_:)((double *)&v21, (uint64_t)&v30);
      uint64_t v7 = v30;
      uint64_t v8 = v31;
      uint64_t v9 = v32;
      uint64_t v10 = v33;
      char v11 = v34;
      outlined retain of Path((uint64_t)v28, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    uint64_t v17 = swift_retain_n();
    uint64_t v18 = specialized find<A>(_:key:)(v17);
    if (!v18)
    {
      swift_release_n();
      goto LABEL_17;
    }
    char v19 = *(unsigned char *)(v18 + 72);
    swift_release_n();
    if (v19) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = outlined retain of Path((uint64_t)v28, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, unint64_t a3@<D2>, CGFloat a4@<D4>)
{
  CGRect v34 = CGRectInset(*(CGRect *)&a2, a4, a4);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v26, (__n128)v34.origin, *(__n128 *)&v34.origin.y, (__n128)v34.size, *(__n128 *)&v34.size.height);
  uint64_t v8 = v26[0];
  uint64_t v9 = v26[1];
  uint64_t v10 = v26[2];
  uint64_t v11 = v26[3];
  char v12 = v27;
  outlined init with take of Path.Storage((uint64_t)v26, (uint64_t)v33);
  outlined retain of Path((uint64_t)v33, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v13 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else if (dword_26B0F4500 < v13)
  {
    goto LABEL_17;
  }
  uint64_t v14 = _threadGeometryProxyData();
  if (v14)
  {
    int v15 = *(_DWORD *)(v14 + 48);
    long long v16 = *(_OWORD *)(v14 + 16);
    long long v22 = *(_OWORD *)v14;
    long long v23 = v16;
    long long v24 = *(_OWORD *)(v14 + 32);
    int v25 = v15;
    GeometryProxy.environment.getter(&v28);
    uint64_t v17 = v28;
    if (v29)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v22);
      swift_release_n();
      swift_release_n();
      if ((v22 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      long long v22 = 0xBFF0000000000000;
      *(void *)&long long v23 = 0;
      *((void *)&v23 + 1) = 0x3FF0000000000000;
      long long v24 = a3;
      Path.applying(_:)((double *)&v22, (uint64_t)&v28);
      uint64_t v8 = v28;
      uint64_t v9 = v29;
      uint64_t v10 = v30;
      uint64_t v11 = v31;
      char v12 = v32;
      outlined retain of Path((uint64_t)v26, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    uint64_t v18 = swift_retain_n();
    uint64_t v19 = specialized find<A>(_:key:)(v18);
    if (!v19)
    {
      swift_release_n();
      goto LABEL_17;
    }
    char v20 = *(unsigned char *)(v19 + 72);
    swift_release_n();
    if (v20) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = outlined retain of Path((uint64_t)v26, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CombinedContentShape@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v7 = *v5;
  memset(v12, 0, sizeof(v12));
  char v13 = 6;
  specialized Sequence.reduce<A>(into:_:)(v12, v7, (uint64_t)v10, a2, a3, a4, a5);
  double result = *(double *)v10;
  long long v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t sub_245C4EBC0()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ContentShapes()
{
  return &type metadata for ContentShapes;
}

ValueMetadata *type metadata accessor for CombinedContentShape()
{
  return &type metadata for CombinedContentShape;
}

unint64_t instantiation function for generic protocol witness table for CombinedContentShape(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245C4ECA4()
{
  return swift_deallocObject();
}

uint64_t specialized Shape.effectivePath(in:)@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  unint64_t v5 = a4.n128_u64[0];
  specialized ContainerRelativeShape.path(in:)((uint64_t)v25, a2, a3, a4, a5);
  uint64_t v7 = v25[0];
  uint64_t v8 = v25[1];
  uint64_t v9 = v25[2];
  uint64_t v10 = v25[3];
  char v11 = v26;
  outlined init with take of Path.Storage((uint64_t)v25, (uint64_t)v32);
  outlined retain of Path((uint64_t)v32, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 == 1)
  {
    if ((dyld_program_minos_at_least() & 1) == 0) {
      goto LABEL_17;
    }
  }
  else if (dword_26B0F4500 < v12)
  {
    goto LABEL_17;
  }
  uint64_t v13 = _threadGeometryProxyData();
  if (v13)
  {
    int v14 = *(_DWORD *)(v13 + 48);
    long long v15 = *(_OWORD *)(v13 + 16);
    long long v21 = *(_OWORD *)v13;
    long long v22 = v15;
    long long v23 = *(_OWORD *)(v13 + 32);
    int v24 = v14;
    GeometryProxy.environment.getter(&v27);
    uint64_t v16 = v27;
    if (v28)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v16, &v21);
      swift_release_n();
      swift_release_n();
      if ((v21 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      long long v21 = 0xBFF0000000000000;
      *(void *)&long long v22 = 0;
      *((void *)&v22 + 1) = 0x3FF0000000000000;
      long long v23 = v5;
      Path.applying(_:)((double *)&v21, (uint64_t)&v27);
      uint64_t v7 = v27;
      uint64_t v8 = v28;
      uint64_t v9 = v29;
      uint64_t v10 = v30;
      char v11 = v31;
      outlined retain of Path((uint64_t)v25, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_17;
    }
    uint64_t v17 = swift_retain_n();
    uint64_t v18 = specialized find<A>(_:key:)(v17);
    if (!v18)
    {
      swift_release_n();
      goto LABEL_17;
    }
    char v19 = *(unsigned char *)(v18 + 72);
    swift_release_n();
    if (v19) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t result = outlined retain of Path((uint64_t)v25, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ContentShapesKey()
{
  return &type metadata for EnvironmentValues.ContentShapesKey;
}

void _GrayscaleEffect.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_GrayscaleEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _GrayscaleEffect.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*_GrayscaleEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _GrayscaleEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 10;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245C4F018()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

BOOL static _GrayscaleEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _GrayscaleEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 10;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.grayscale(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _GrayscaleEffect);
}

double sub_245C4F13C@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245C4F148(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _GrayscaleEffect()
{
  return &type metadata for _GrayscaleEffect;
}

uint64_t sub_245C4F164()
{
  return swift_getWitnessTable();
}

uint64_t Anchor.convert(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  long long v2 = *(_OWORD *)(a1 + 3);
  long long v5 = *(_OWORD *)(a1 + 1);
  long long v6 = v2;
  return (*(uint64_t (**)(uint64_t *))(*(void *)a2 + 96))(&v4);
}

uint64_t AnchorGeometry.init(position:size:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t AnchorGeometry.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  double v4 = *(double *)(Value + 8);
  double v5 = *(double *)(Value + 16);
  double v6 = *(double *)(Value + 24);
  double v7 = *(double *)(Value + 32);
  uint64_t v8 = (double *)AGGraphGetValue();
  double v9 = *v8;
  double v10 = v8[1];
  *(void *)a1 = v3;
  *(double *)(a1 + 24) = v6 - (v9 - v4);
  *(double *)(a1 + 32) = v7 - (v10 - v5);
  *(double *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v10;

  return swift_retain();
}

double AnchorGeometry.size.getter()
{
  return *(double *)AGGraphGetValue();
}

uint64_t Anchor.defaultValue.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t Anchor<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 112))();
}

Swift::Int Anchor<A>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> Anchor<A>()
{
  return Anchor<A>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> Anchor<A>(uint64_t a1)
{
  return Anchor<A>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> Anchor<A>()
{
  Hasher.init(_seed:)();
  Anchor<A>.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void AnchorBoxBase.prepare(geometry:)()
{
}

uint64_t AnchorBoxBase.deinit()
{
  return v0;
}

uint64_t AnchorBoxBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AnchorValueBoxBase.defaultValue.getter()
{
}

void AnchorValueBoxBase.convert(to:)()
{
}

uint64_t AnchorValueBoxBase.deinit()
{
  return v0;
}

uint64_t static AnchorProtocol<>.valueIsEqual(lhs:rhs:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t static AnchorProtocol<>.hashValue(_:into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Anchor.Source.init<A>(anchor:)(uint64_t a1)
{
  return AnchorBox.__allocating_init(_:)(a1);
}

uint64_t AnchorValueBox.__allocating_init(_:)(uint64_t a1)
{
  return AnchorValueBox.init(_:)(a1);
}

uint64_t AnchorBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t AnchorValueBox.defaultValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 136) + 24))();
}

uint64_t AnchorValueBox.hash(into:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)v1 + 136) + 48))(v1 + *(void *)(*(void *)v1 + 144), a1);
}

uint64_t AnchorValueBox.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t ArrayAnchorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t ArrayAnchorBox.prepare(geometry:)(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(*v1 + 104);
  type metadata accessor for ArrayAnchorValueBox();
  uint64_t v13 = v1[2];
  void v11[2] = v4;
  v11[3] = *(void *)a1;
  int v12 = v3;
  type metadata accessor for Anchor.Source();
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = type metadata accessor for Anchor();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:), (uint64_t)v11, v5, v6, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v9;
  return result;
}

uint64_t ArrayAnchorBox.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t ArrayAnchorValueBox.defaultValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v9 = v0[2];
  uint64_t v8 = *(void *)(v1 + 128);
  type metadata accessor for Anchor();
  uint64_t v2 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter, (uint64_t)&v7, v2, v8, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t ArrayAnchorValueBox.convert(to:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  long long v3 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v3;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v12 = v1[2];
  uint64_t v10 = *(void *)(v2 + 128);
  char v11 = v13;
  type metadata accessor for Anchor();
  uint64_t v4 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.convert(to:), (uint64_t)&v9, v4, v10, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t ArrayAnchorValueBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 16);
    uint64_t v3 = type metadata accessor for Anchor();
    swift_retain();
    uint64_t v4 = MEMORY[0x24C522E60](v2, v3);
    uint64_t v5 = *(void *)(v0 + 16);
    if (v4 == MEMORY[0x24C522E60](v5, v3))
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t result = RandomAccessCollection<>.indices.getter();
      uint64_t v6 = v8;
      if (v8 == v9)
      {
LABEL_8:
        swift_release();
        return 1;
      }
      else
      {
        if (v9 >= v8)
        {
          while (v6 < v9)
          {
            Array.subscript.getter();
            Array.subscript.getter();
            char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v5);
            swift_release();
            uint64_t result = swift_release();
            if ((v7 & 1) == 0) {
              goto LABEL_9;
            }
            if (v9 == ++v6) {
              goto LABEL_8;
            }
          }
          __break(1u);
        }
        __break(1u);
      }
    }
    else
    {
LABEL_9:
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t ArrayAnchorValueBox.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for Anchor();
  uint64_t v5 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v5, v4))
  {
    uint64_t v6 = 4;
    do
    {
      uint64_t v7 = v6 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v9 = *(void *)(v3 + 8 * v6);
        swift_retain();
        uint64_t v10 = v6 - 3;
        if (__OFADD__(v7, 1)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v9 = _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v10 = v6 - 3;
        if (__OFADD__(v7, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      char v11 = *(void (**)(uint64_t))(*(void *)v9 + 112);
      swift_retain();
      v11(a1);
      swift_release_n();
      ++v6;
    }
    while (v10 != MEMORY[0x24C522EA0](v3, v4));
  }

  return swift_bridgeObjectRelease();
}

uint64_t ArrayAnchorBox.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t vtable thunk for AnchorValueBoxBase.defaultValue.getter dispatching to ArrayAnchorValueBox.defaultValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ArrayAnchorValueBox.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t vtable thunk for AnchorValueBoxBase.convert(to:) dispatching to ArrayAnchorValueBox.convert(to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ArrayAnchorValueBox.convert(to:)(a1);
  *a2 = result;
  return result;
}

uint64_t OptionalAnchorBox.__ivar_destroyer()
{
  return swift_release();
}

uint64_t OptionalAnchorValueBox.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v8 = v1[2];
  uint64_t v7 = *(void *)(v3 + 128);
  type metadata accessor for Anchor();
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter, (uint64_t)&v6, MEMORY[0x263F8E628], v7, v4, a1);
  return swift_release();
}

uint64_t OptionalAnchorValueBox.convert(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  long long v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v11 = v2[2];
  uint64_t v9 = *(void *)(v4 + 128);
  uint64_t v10 = v12;
  type metadata accessor for Anchor();
  type metadata accessor for Optional();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in OptionalAnchorValueBox.convert(to:), (uint64_t)&v8, MEMORY[0x263F8E628], v9, v6, a2);
  return swift_release();
}

uint64_t OptionalAnchorValueBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(result + 16);
    uint64_t result = (v2 | v3) == 0;
    if (v2) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      long long v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 104);
      swift_retain();
      swift_retain();
      uint64_t v6 = swift_retain();
      LOBYTE(v5) = v5(v6);
      swift_release();
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

uint64_t OptionalAnchorValueBox.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 112))();
  }
  return result;
}

uint64_t type metadata accessor for ArrayAnchorBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in <A> Anchor<A>()
{
  return swift_getWitnessTable();
}

uint64_t method lookup function for AnchorBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnchorBoxBase);
}

uint64_t method lookup function for AnchorValueBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnchorValueBoxBase);
}

uint64_t dispatch thunk of static AnchorProtocol.defaultAnchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnchorProtocol.prepare(geometry:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static AnchorProtocol.valueIsEqual(lhs:rhs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static AnchorProtocol.hashValue(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t type metadata accessor for ArrayAnchorValueBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in OptionalAnchorValueBox.convert(to:)(uint64_t *a1)
{
  return partial apply for closure #1 in OptionalAnchorValueBox.convert(to:)(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  long long v4;
  uint64_t v6;
  long long v7;
  long long v8;

  uint64_t v2 = *(uint64_t **)(v1 + 24);
  uint64_t v3 = *a1;
  uint64_t v6 = *v2;
  BOOL v4 = *(_OWORD *)(v2 + 3);
  uint64_t v7 = *(_OWORD *)(v2 + 1);
  uint64_t v8 = v4;
  return (*(uint64_t (**)(uint64_t *))(*(void *)v3 + 96))(&v6);
}

uint64_t partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter(uint64_t a1)
{
  return partial apply for closure #1 in OptionalAnchorValueBox.defaultValue.getter(a1);
}

{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))();
}

uint64_t partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in OptionalAnchorBox.prepare(geometry:)(a1, a2);
}

{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  BOOL v4 = *(_DWORD *)(v2 + 32);
  long long v5 = *a1;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = v4;
  uint64_t result = Anchor.Source.prepare(geometry:)(&v7, v5);
  *a2 = result;
  return result;
}

void _Rotation3DEffect.Data.transform.getter(CGFloat *a1@<X8>)
{
  CGFloat v34 = v1[1];
  CGFloat v35 = *v1;
  CGFloat v32 = v1[3];
  CGFloat v33 = v1[2];
  double v30 = v1[5];
  double v31 = v1[4];
  CGFloat v3 = v1[6];
  double v29 = v3;
  CGFloat v36 = v1[8];
  CGFloat v4 = *(double *)(MEMORY[0x263F15740] + 8);
  CGFloat v6 = *(double *)(MEMORY[0x263F15740] + 16);
  CGFloat v7 = *(double *)(MEMORY[0x263F15740] + 24);
  CGFloat v9 = *(double *)(MEMORY[0x263F15740] + 32);
  CGFloat v8 = *(double *)(MEMORY[0x263F15740] + 40);
  CGFloat v10 = *(double *)(MEMORY[0x263F15740] + 48);
  CGFloat v11 = *(double *)(MEMORY[0x263F15740] + 56);
  CGFloat v22 = *(double *)(MEMORY[0x263F15740] + 72);
  CGFloat v23 = *(double *)(MEMORY[0x263F15740] + 64);
  CGFloat v26 = *(double *)(MEMORY[0x263F15740] + 104);
  CGFloat v27 = *(double *)(MEMORY[0x263F15740] + 96);
  CGFloat v24 = *(double *)(MEMORY[0x263F15740] + 112);
  CGFloat v25 = *(double *)(MEMORY[0x263F15740] + 120);
  CGFloat v28 = -1.0 / v1[7];
  a.CGFloat m11 = *(CGFloat *)MEMORY[0x263F15740];
  CGFloat m11 = a.m11;
  a.CGFloat m12 = v4;
  a.m13 = v6;
  a.CGFloat m14 = v7;
  a.CGFloat m21 = v9;
  a.CGFloat m22 = v8;
  a.m23 = v10;
  a.CGFloat m24 = v11;
  a.m31 = v23;
  a.m32 = v22;
  *(_OWORD *)&a.CGFloat m33 = *(_OWORD *)(MEMORY[0x263F15740] + 80);
  CGFloat m33 = a.m33;
  a.CGFloat m41 = v27;
  a.CGFloat m42 = v26;
  a.m43 = v24;
  a.CGFloat m44 = v25;
  CATransform3DTranslate(&b, &a, v31, v30, v3);
  a.CGFloat m11 = m11;
  a.CGFloat m12 = v4;
  a.m13 = v6;
  a.CGFloat m14 = v7;
  a.CGFloat m21 = v9;
  a.CGFloat m22 = v8;
  a.m23 = v10;
  a.CGFloat m24 = v11;
  a.m31 = v23;
  a.m32 = v22;
  a.CGFloat m33 = m33;
  a.m34 = v28;
  a.CGFloat m41 = v27;
  a.CGFloat m42 = v26;
  a.m43 = v24;
  a.CGFloat m44 = v25;
  CATransform3DConcat(&v37, &a, &b);
  CATransform3D a = v37;
  CATransform3DRotate(&b, &a, v35, v34, v33, v32);
  CATransform3D a = b;
  CATransform3DTranslate(&b, &a, -v31, -v30, -v29);
  CGFloat v12 = b.m11;
  CGFloat m12 = b.m12;
  CGFloat m14 = b.m14;
  CGFloat m21 = b.m21;
  CGFloat m22 = b.m22;
  CGFloat m24 = b.m24;
  CGFloat m41 = b.m41;
  CGFloat m42 = b.m42;
  CGFloat m44 = b.m44;
  a.CGFloat m11 = b.m11;
  a.CGFloat m12 = b.m12;
  a.m13 = b.m14;
  a.CGFloat m14 = b.m21;
  a.CGFloat m21 = b.m22;
  a.CGFloat m22 = b.m24;
  a.m23 = b.m41;
  a.CGFloat m24 = b.m42;
  a.m31 = b.m44;
  if ((~*(void *)&v36 & 0x7FF0000000000000) != 0)
  {
    b.CGFloat m11 = -1.0;
    memset(&b.m12, 0, 24);
    *(_OWORD *)&b.CGFloat m21 = xmmword_2461BCA80;
    b.m23 = v36;
    *(_OWORD *)&b.CGFloat m24 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)(&a.m11, v40);
    ProjectionTransform.concatenating(_:)(&b.m11, &v37.m11);
    CGFloat v12 = v37.m11;
    CGFloat m12 = v37.m12;
    CGFloat m14 = v37.m13;
    CGFloat m21 = v37.m14;
    CGFloat m22 = v37.m21;
    CGFloat m24 = v37.m22;
    CGFloat m41 = v37.m23;
    CGFloat m42 = v37.m24;
    CGFloat m44 = v37.m31;
  }
  *a1 = v12;
  a1[1] = m12;
  a1[2] = m14;
  a1[3] = m21;
  a1[4] = m22;
  a1[5] = m24;
  a1[6] = m41;
  a1[7] = m42;
  a1[8] = m44;
}

double _Rotation3DEffect.angle.getter()
{
  return *(double *)v0;
}

void _Rotation3DEffect.angle.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_Rotation3DEffect.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.axis.getter()
{
  return *(double *)(v0 + 8);
}

void _Rotation3DEffect.axis.setter(double a1, double a2, double a3)
{
  v3[1] = a1;
  long long v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*_Rotation3DEffect.axis.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.anchor.getter()
{
  return *(double *)(v0 + 32);
}

void _Rotation3DEffect.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*_Rotation3DEffect.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.anchorZ.getter()
{
  return *(double *)(v0 + 48);
}

void _Rotation3DEffect.anchorZ.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*_Rotation3DEffect.anchorZ.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.perspective.getter()
{
  return *(double *)(v0 + 56);
}

void _Rotation3DEffect.perspective.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*_Rotation3DEffect.perspective.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.angle.getter()
{
  return *(double *)v0;
}

void _Rotation3DEffect.Data.angle.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_Rotation3DEffect.Data.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.axis.getter()
{
  return *(double *)(v0 + 8);
}

void _Rotation3DEffect.Data.axis.setter(double a1, double a2, double a3)
{
  v3[1] = a1;
  long long v3[2] = a2;
  v3[3] = a3;
}

uint64_t (*_Rotation3DEffect.Data.axis.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.anchor.getter()
{
  return *(double *)(v0 + 32);
}

void _Rotation3DEffect.Data.anchor.setter(double a1, double a2, double a3)
{
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
}

uint64_t (*_Rotation3DEffect.Data.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.perspective.getter()
{
  return *(double *)(v0 + 56);
}

void _Rotation3DEffect.Data.perspective.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*_Rotation3DEffect.Data.perspective.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.flipWidth.getter()
{
  return *(double *)(v0 + 64);
}

void _Rotation3DEffect.Data.flipWidth.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*_Rotation3DEffect.Data.flipWidth.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _Rotation3DEffect.Data.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x7FF8000000000000;
  return result;
}

double _Rotation3DEffect.Data.init(_:size:layoutDirection:)@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, double a5@<D1>)
{
  int v5 = *a2;
  if (a4.f64[0] > a5) {
    double v6 = a4.f64[0];
  }
  else {
    double v6 = a5;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  double v8 = *(double *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v9;
  double v10 = NAN;
  if (v5) {
    double v10 = a4.f64[0];
  }
  a4.f64[1] = a5;
  *(float64x2_t *)(a3 + 32) = vmulq_f64(*(float64x2_t *)(a1 + 32), a4);
  double result = v6 / v8;
  *(void *)(a3 + 48) = v7;
  *(double *)(a3 + 56) = v6 / v8;
  *(double *)(a3 + 64) = v10;
  return result;
}

__n128 _Rotation3DEffect.effectValue(size:)@<Q0>(uint64_t a1@<X8>)
{
  _Rotation3DEffect.Data.transform.getter((CGFloat *)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(void *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

float64_t _Rotation3DEffect.animatableData.getter@<D0>(float64x2_t *a1@<X8>)
{
  float64_t result = v1[3].f64[0];
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64_t v4 = v1[3].f64[1] * 128.0;
  float64x2_t v5 = vmulq_f64(v1[1], v3);
  *a1 = vmulq_f64(*v1, v3);
  a1[1] = v5;
  a1[2] = vmulq_f64(v1[2], v3);
  a1[3].f64[0] = result;
  a1[3].f64[1] = v4;
  return result;
}

float64_t _Rotation3DEffect.animatableData.setter(float64x2_t *a1)
{
  float64_t result = a1[3].f64[0];
  double v3 = a1[3].f64[1];
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(a1[1], v4);
  *uint64_t v1 = vmulq_f64(*a1, v4);
  v1[1] = v5;
  v1[2] = vmulq_f64(a1[2], v4);
  v1[3].f64[0] = result;
  v1[3].f64[1] = v3 * 0.0078125;
  return result;
}

double (*_Rotation3DEffect.animatableData.modify(float64x2_t **a1))(uint64_t *a1)
{
  double v3 = (float64x2_t *)malloc(0x48uLL);
  *a1 = v3;
  v3[4].f64[0] = v1;
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64_t v5 = *(double *)(*(void *)&v1 + 48);
  double v6 = *(double *)(*(void *)&v1 + 56) * 128.0;
  float64x2_t v7 = vmulq_f64(*(float64x2_t *)(*(void *)&v1 + 16), v4);
  float64x2_t *v3 = vmulq_f64(**(float64x2_t **)&v1, v4);
  v3[1] = v7;
  long long v3[2] = vmulq_f64(*(float64x2_t *)(*(void *)&v1 + 32), v4);
  v3[3].f64[0] = v5;
  v3[3].f64[1] = v6;
  return _Rotation3DEffect.animatableData.modify;
}

double _Rotation3DEffect.animatableData.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 48);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  double v5 = *(double *)(v1 + 56) * 0.0078125;
  float64x2_t v6 = vmulq_f64(*(float64x2_t *)v1, v4);
  float64x2_t v7 = vmulq_f64(*(float64x2_t *)(v1 + 16), v4);
  float64x2_t v8 = vmulq_f64(*(float64x2_t *)(v1 + 32), v4);
  *(float64x2_t *)uint64_t v2 = v6;
  *(float64x2_t *)(v2 + 16) = v7;
  *(float64x2_t *)(v2 + 32) = v8;
  *(void *)(v2 + 48) = v3;
  *(double *)(v2 + 56) = v5;
  free((void *)v1);
  return result;
}

BOOL static _Rotation3DEffect.== infix(_:_:)(double *a1, double *a2)
{
  if (*a1 == *a2
    && (a1[1] == a2[1] ? (BOOL v2 = a1[2] == a2[2]) : (BOOL v2 = 0),
        v2 ? (BOOL v3 = a1[3] == a2[3]) : (BOOL v3 = 0),
        v3 && a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6]))
  {
    return a1[7] == a2[7];
  }
  else
  {
    return 0;
  }
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _Rotation3DEffect@<Q0>(uint64_t a1@<X8>)
{
  _Rotation3DEffect.Data.transform.getter((CGFloat *)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(void *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _Rotation3DEffect(float64x2_t *a1, float64x2_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0]&& a1[2].f64[1] == a2[2].f64[1]&& a1[3].f64[0] == a2[3].f64[0])
  {
    return a1[3].f64[1] == a2[3].f64[1];
  }
  return result;
}

uint64_t protocol witness for static GeometryEffectProvider.resolve(effect:origin:size:layoutDirection:) in conformance _Rotation3DEffect@<X0>(long long *a1@<X0>, unsigned __int8 *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  long long v16 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 6);
  int v9 = *a2;
  double v10 = *((double *)a1 + 4) * a4;
  double v11 = *((double *)a1 + 5) * a5;
  if (a4 > a5) {
    a5 = a4;
  }
  double v13 = a5 / *((double *)a1 + 7);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = v16;
  double v15 = NAN;
  if (v9) {
    double v15 = a4;
  }
  *(void *)(result + 32) = v6;
  *(void *)(result + 40) = v7;
  *(double *)(result + 48) = v10;
  *(double *)(result + 56) = v11;
  *(void *)(result + 64) = v8;
  *(double *)(result + 72) = v13;
  *(double *)(result + 80) = v15;
  *(unsigned char *)(result + 88) = 3;
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 8;
  return result;
}

float64_t protocol witness for Animatable.animatableData.getter in conformance _Rotation3DEffect@<D0>(float64x2_t *a1@<X8>)
{
  float64_t result = v1[3].f64[0];
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64_t v4 = v1[3].f64[1] * 128.0;
  float64x2_t v5 = vmulq_f64(v1[1], v3);
  *a1 = vmulq_f64(*v1, v3);
  a1[1] = v5;
  a1[2] = vmulq_f64(v1[2], v3);
  a1[3].f64[0] = result;
  a1[3].f64[1] = v4;
  return result;
}

float64_t protocol witness for Animatable.animatableData.setter in conformance _Rotation3DEffect(float64x2_t *a1)
{
  float64_t result = a1[3].f64[0];
  double v3 = a1[3].f64[1];
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(a1[1], v4);
  *uint64_t v1 = vmulq_f64(*a1, v4);
  v1[1] = v5;
  v1[2] = vmulq_f64(a1[2], v4);
  v1[3].f64[0] = result;
  v1[3].f64[1] = v3 * 0.0078125;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance _Rotation3DEffect(float64x2_t **a1))(uint64_t *a1)
{
  double v3 = (float64x2_t *)malloc(0x48uLL);
  *a1 = v3;
  v3[4].f64[0] = v1;
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64_t v5 = *(double *)(*(void *)&v1 + 48);
  double v6 = *(double *)(*(void *)&v1 + 56) * 128.0;
  float64x2_t v7 = vmulq_f64(*(float64x2_t *)(*(void *)&v1 + 16), v4);
  float64x2_t *v3 = vmulq_f64(**(float64x2_t **)&v1, v4);
  v3[1] = v7;
  long long v3[2] = vmulq_f64(*(float64x2_t *)(*(void *)&v1 + 32), v4);
  v3[3].f64[0] = v5;
  v3[3].f64[1] = v6;
  return _Rotation3DEffect.animatableData.modify;
}

void *_Rotation3DEffect.Data.encode(to:)(void *result)
{
  long long v2 = v1;
  double v3 = result;
  double v4 = *v2;
  double v5 = v2[1];
  double v7 = v2[2];
  double v6 = v2[3];
  double v9 = v2[4];
  double v8 = v2[5];
  double v10 = v2[6];
  double v40 = v2[7];
  double v11 = v2[8];
  if (*v2 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v12 = v3[1];
    float64_t result = (void *)(v12 + 8);
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v12) = v4;
      goto LABEL_5;
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)float64_t result = v4;
  }
LABEL_5:
  float v13 = v5;
  if (v13 == 0.0) {
    goto LABEL_9;
  }
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  uint64_t v14 = v3[1];
  float64_t result = (void *)(v14 + 4);
  if (__OFADD__(v14, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v14) = v13;
    goto LABEL_9;
  }
  float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)float64_t result = v13;
LABEL_9:
  float v15 = v7;
  if (v15 == 0.0) {
    goto LABEL_13;
  }
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  uint64_t v16 = v3[1];
  float64_t result = (void *)(v16 + 4);
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(float *)(*v3 + v16) = v15;
    goto LABEL_13;
  }
  float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(float *)float64_t result = v15;
LABEL_13:
  float v17 = v6;
  if (v17 == 0.0) {
    goto LABEL_17;
  }
  ProtobufEncoder.encodeVarint(_:)(0x25uLL);
  uint64_t v18 = v3[1];
  float64_t result = (void *)(v18 + 4);
  if (__OFADD__(v18, 4))
  {
    __break(1u);
LABEL_82:
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(float *)float64_t result = v17;
    if (v9 == 0.0) {
      goto LABEL_28;
    }
    goto LABEL_18;
  }
  if (v3[2] < (uint64_t)result) {
    goto LABEL_82;
  }
  v3[1] = result;
  *(float *)(*v3 + v18) = v17;
LABEL_17:
  if (v9 == 0.0) {
    goto LABEL_28;
  }
LABEL_18:
  double v19 = fabs(v9);
  if (v19 >= 65536.0) {
    Swift::UInt v20 = 41;
  }
  else {
    Swift::UInt v20 = 45;
  }
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    uint64_t v22 = v3[1];
    float64_t result = (void *)(v22 + 8);
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v22) = v9;
      goto LABEL_28;
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)float64_t result = v9;
  }
  else
  {
    uint64_t v21 = v3[1];
    float64_t result = (void *)(v21 + 4);
    if (__OFADD__(v21, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v19 = v9;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v21) = LODWORD(v19);
        goto LABEL_28;
      }
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)float64_t result = LODWORD(v19);
  }
LABEL_28:
  if (v8 == 0.0) {
    goto LABEL_39;
  }
  double v23 = fabs(v8);
  if (v23 >= 65536.0) {
    Swift::UInt v24 = 49;
  }
  else {
    Swift::UInt v24 = 53;
  }
  ProtobufEncoder.encodeVarint(_:)(v24);
  if (v23 >= 65536.0)
  {
    uint64_t v26 = v3[1];
    float64_t result = (void *)(v26 + 8);
    if (__OFADD__(v26, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v26) = v8;
      goto LABEL_39;
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)float64_t result = v8;
  }
  else
  {
    uint64_t v25 = v3[1];
    float64_t result = (void *)(v25 + 4);
    if (__OFADD__(v25, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v23 = v8;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v25) = LODWORD(v23);
        goto LABEL_39;
      }
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)float64_t result = LODWORD(v23);
  }
LABEL_39:
  if (v10 == 0.0) {
    goto LABEL_50;
  }
  double v27 = fabs(v10);
  if (v27 >= 65536.0) {
    Swift::UInt v28 = 57;
  }
  else {
    Swift::UInt v28 = 61;
  }
  ProtobufEncoder.encodeVarint(_:)(v28);
  if (v27 >= 65536.0)
  {
    uint64_t v30 = v3[1];
    float64_t result = (void *)(v30 + 8);
    if (__OFADD__(v30, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v30) = v10;
      goto LABEL_50;
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)float64_t result = v10;
  }
  else
  {
    uint64_t v29 = v3[1];
    float64_t result = (void *)(v29 + 4);
    if (__OFADD__(v29, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v27 = v10;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v29) = LODWORD(v27);
        goto LABEL_50;
      }
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)float64_t result = LODWORD(v27);
  }
LABEL_50:
  if (v40 != 0.0)
  {
    double v31 = fabs(v40);
    if (v31 >= 65536.0) {
      Swift::UInt v32 = 65;
    }
    else {
      Swift::UInt v32 = 69;
    }
    ProtobufEncoder.encodeVarint(_:)(v32);
    if (v31 >= 65536.0)
    {
      uint64_t v34 = v3[1];
      float64_t result = (void *)(v34 + 8);
      if (__OFADD__(v34, 8))
      {
        __break(1u);
      }
      else if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(double *)(*v3 + v34) = v40;
        goto LABEL_61;
      }
      float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(double *)float64_t result = v40;
      goto LABEL_61;
    }
    uint64_t v33 = v3[1];
    float64_t result = (void *)(v33 + 4);
    if (__OFADD__(v33, 4))
    {
      __break(1u);
    }
    else
    {
      *(float *)&double v31 = v40;
      if (v3[2] >= (uint64_t)result)
      {
        v3[1] = result;
        *(_DWORD *)(*v3 + v33) = LODWORD(v31);
        goto LABEL_61;
      }
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(_DWORD *)float64_t result = LODWORD(v31);
  }
LABEL_61:
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0 || v11 == 0.0) {
    return result;
  }
  double v35 = fabs(v11);
  if (v35 >= 65536.0) {
    Swift::UInt v36 = 73;
  }
  else {
    Swift::UInt v36 = 77;
  }
  ProtobufEncoder.encodeVarint(_:)(v36);
  if (v35 >= 65536.0)
  {
    uint64_t v38 = v3[1];
    int64_t v39 = v38 + 8;
    if (__OFADD__(v38, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v39)
    {
      v3[1] = v39;
      float64_t result = (void *)(*v3 + v38);
LABEL_73:
      *(double *)float64_t result = v11;
      return result;
    }
    float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)(v39);
    goto LABEL_73;
  }
  uint64_t v37 = v3[1];
  float64_t result = (void *)(v37 + 4);
  if (__OFADD__(v37, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&double v11 = v11;
    if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(_DWORD *)(*v3 + v37) = LODWORD(v11);
      return result;
    }
  }
  float64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(_DWORD *)float64_t result = LODWORD(v11);
  return result;
}

unint64_t _Rotation3DEffect.Data.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  double v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    double v46 = 0.0;
    double v7 = NAN;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    while (1)
    {
      float64_t result = v3[3];
      if (result)
      {
        unint64_t v15 = v3[4];
        if (v5 < v15) {
          goto LABEL_15;
        }
        if (v15 < v5) {
          goto LABEL_122;
        }
        v3[3] = 0;
      }
      float64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_122:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          unint64_t v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              uint64_t v34 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v34 + 1);
              if (v6 < (unint64_t)(v34 + 1)) {
                goto LABEL_122;
              }
              float v35 = *v34;
              v3[1] = v5;
              double v14 = v35;
              goto LABEL_8;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_127;
              }
              float v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result) {
                goto LABEL_122;
              }
              v3[3] = 9;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              float v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          unint64_t v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1)) {
            goto LABEL_122;
          }
          double v14 = *v17;
          goto LABEL_7;
        case 2uLL:
          if ((result & 7) == 2)
          {
            float64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
              JUMPOUT(0x245C51A10);
            }
            uint64_t v18 = (float *)v3[1];
            if (v6 < (unint64_t)v18 + result) {
              goto LABEL_122;
            }
            v3[3] = 21;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_122;
            }
            uint64_t v18 = (float *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v18 + 1);
          if (v6 < (unint64_t)(v18 + 1)) {
            goto LABEL_122;
          }
          float v31 = *v18;
          v3[1] = v5;
          double v13 = v31;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            float64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_125;
            }
            double v19 = (float *)v3[1];
            if (v6 < (unint64_t)v19 + result) {
              goto LABEL_122;
            }
            v3[3] = 29;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_122;
            }
            double v19 = (float *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v19 + 1);
          if (v6 < (unint64_t)(v19 + 1)) {
            goto LABEL_122;
          }
          float v32 = *v19;
          v3[1] = v5;
          double v12 = v32;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            float64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_126;
            }
            Swift::UInt v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result) {
              goto LABEL_122;
            }
            v3[3] = 37;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_122;
            }
            Swift::UInt v20 = (float *)v3[1];
          }
          unint64_t v5 = (unint64_t)(v20 + 1);
          if (v6 < (unint64_t)(v20 + 1)) {
            goto LABEL_122;
          }
          float v33 = *v20;
          v3[1] = v5;
          double v11 = v33;
          break;
        case 5uLL:
          unint64_t v21 = result & 7;
          switch(v21)
          {
            case 5uLL:
              Swift::UInt v36 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v36 + 1);
              if (v6 < (unint64_t)(v36 + 1)) {
                goto LABEL_122;
              }
              float v37 = *v36;
              v3[1] = v5;
              double v10 = v37;
              goto LABEL_8;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_128;
              }
              uint64_t v22 = (double *)v3[1];
              if (v6 < (unint64_t)v22 + result) {
                goto LABEL_122;
              }
              v3[3] = 41;
              v3[4] = (char *)v22 + result;
              break;
            case 1uLL:
              uint64_t v22 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          unint64_t v5 = (unint64_t)(v22 + 1);
          if (v6 < (unint64_t)(v22 + 1)) {
            goto LABEL_122;
          }
          double v10 = *v22;
          goto LABEL_7;
        case 6uLL:
          unint64_t v23 = result & 7;
          switch(v23)
          {
            case 5uLL:
              uint64_t v38 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v38 + 1);
              if (v6 < (unint64_t)(v38 + 1)) {
                goto LABEL_122;
              }
              float v39 = *v38;
              v3[1] = v5;
              double v9 = v39;
              goto LABEL_8;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_129;
              }
              Swift::UInt v24 = (double *)v3[1];
              if (v6 < (unint64_t)v24 + result) {
                goto LABEL_122;
              }
              v3[3] = 49;
              v3[4] = (char *)v24 + result;
              break;
            case 1uLL:
              Swift::UInt v24 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          unint64_t v5 = (unint64_t)(v24 + 1);
          if (v6 < (unint64_t)(v24 + 1)) {
            goto LABEL_122;
          }
          double v9 = *v24;
          goto LABEL_7;
        case 7uLL:
          unint64_t v25 = result & 7;
          switch(v25)
          {
            case 5uLL:
              double v40 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v40 + 1);
              if (v6 < (unint64_t)(v40 + 1)) {
                goto LABEL_122;
              }
              float v41 = *v40;
              v3[1] = v5;
              double v8 = v41;
              goto LABEL_8;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_130;
              }
              uint64_t v26 = (double *)v3[1];
              if (v6 < (unint64_t)v26 + result) {
                goto LABEL_122;
              }
              v3[3] = 57;
              v3[4] = (char *)v26 + result;
              break;
            case 1uLL:
              uint64_t v26 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          unint64_t v5 = (unint64_t)(v26 + 1);
          if (v6 < (unint64_t)(v26 + 1)) {
            goto LABEL_122;
          }
          double v8 = *v26;
          goto LABEL_7;
        case 8uLL:
          unint64_t v27 = result & 7;
          switch(v27)
          {
            case 5uLL:
              uint64_t v42 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v42 + 1);
              if (v6 < (unint64_t)(v42 + 1)) {
                goto LABEL_122;
              }
              float v43 = *v42;
              v3[1] = v5;
              double v46 = v43;
              goto LABEL_8;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_131;
              }
              Swift::UInt v28 = (double *)v3[1];
              if (v6 < (unint64_t)v28 + result) {
                goto LABEL_122;
              }
              v3[3] = 65;
              v3[4] = (char *)v28 + result;
              break;
            case 1uLL:
              Swift::UInt v28 = (double *)v3[1];
              break;
            default:
              goto LABEL_122;
          }
          unint64_t v5 = (unint64_t)(v28 + 1);
          if (v6 < (unint64_t)(v28 + 1)) {
            goto LABEL_122;
          }
          double v46 = *v28;
          goto LABEL_7;
        case 9uLL:
          unint64_t v29 = result & 7;
          if (v29 == 5)
          {
            uint64_t v44 = (float *)v3[1];
            unint64_t v5 = (unint64_t)(v44 + 1);
            if (v6 < (unint64_t)(v44 + 1)) {
              goto LABEL_122;
            }
            float v45 = *v44;
            v3[1] = v5;
            double v7 = v45;
          }
          else
          {
            if (v29 == 2)
            {
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_132;
              }
              uint64_t v30 = (double *)v3[1];
              if (v6 < (unint64_t)v30 + result) {
                goto LABEL_122;
              }
              v3[3] = 73;
              v3[4] = (char *)v30 + result;
            }
            else
            {
              if (v29 != 1) {
                goto LABEL_122;
              }
              uint64_t v30 = (double *)v3[1];
            }
            unint64_t v5 = (unint64_t)(v30 + 1);
            if (v6 < (unint64_t)(v30 + 1)) {
              goto LABEL_122;
            }
            double v7 = *v30;
LABEL_7:
            v3[1] = v5;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              float64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_133;
              }
              unint64_t v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5) {
                goto LABEL_7;
              }
              goto LABEL_122;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_122;
          }
      }
LABEL_8:
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  double v46 = 0.0;
  double v8 = 0.0;
  double v7 = NAN;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  double v14 = 0.0;
LABEL_4:
  v3[3] = 0;
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v12;
  a2[3] = v11;
  a2[4] = v10;
  a2[5] = v9;
  a2[6] = v8;
  a2[7] = v46;
  a2[8] = v7;
  return result;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _Rotation3DEffect.Data(void *a1)
{
  return _Rotation3DEffect.Data.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _Rotation3DEffect.Data@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return _Rotation3DEffect.Data.init(from:)(a1, a2);
}

unint64_t instantiation function for generic protocol witness table for _Rotation3DEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _Rotation3DEffect()
{
  return lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

float64_t sub_245C51B30@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result = a1[3].f64[0];
  float64x2_t v3 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64_t v4 = a1[3].f64[1] * 128.0;
  float64x2_t v5 = vmulq_f64(a1[1], v3);
  *a2 = vmulq_f64(*a1, v3);
  a2[1] = v5;
  a2[2] = vmulq_f64(a1[2], v3);
  a2[3].f64[0] = result;
  a2[3].f64[1] = v4;
  return result;
}

float64_t sub_245C51B68(float64x2_t *a1, float64x2_t *a2)
{
  float64_t result = a1[3].f64[0];
  double v3 = a1[3].f64[1];
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(a1[1], v4);
  *a2 = vmulq_f64(*a1, v4);
  a2[1] = v5;
  a2[2] = vmulq_f64(a1[2], v4);
  a2[3].f64[0] = result;
  a2[3].f64[1] = v3 * 0.0078125;
  return result;
}

ValueMetadata *type metadata accessor for _Rotation3DEffect()
{
  return &type metadata for _Rotation3DEffect;
}

uint64_t getEnumTagSinglePayload for _Rotation3DEffect.Data(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _Rotation3DEffect.Data(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)float64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Rotation3DEffect.Data()
{
  return &type metadata for _Rotation3DEffect.Data;
}

uint64_t sub_245C51C1C()
{
  return swift_deallocObject();
}

void static LayoutDirectionBehavior.mirrors.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL LayoutDirectionBehavior.shouldFlip(in:)(void (*a1)(uint64_t *__return_ptr))
{
  int v2 = *v1;
  BOOL result = 0;
  if (v2 != 2)
  {
    a1(&v4);
    if (v4 != 2 && ((v4 ^ v2) & 1) == 0) {
      return 1;
    }
  }
  return result;
}

void LayoutDirectionBehavior.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Swift::UInt v2 = 0;
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
}

BOOL static LayoutDirectionBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2) {
    return ((v3 ^ v2) & 1) == 0;
  }
  return result;
}

Swift::Int LayoutDirectionBehavior.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = 0;
  if (v1 != 2)
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LayoutDirectionBehavior()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = 0;
  if (v1 != 2)
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LayoutDirectionBehavior()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Swift::UInt v2 = 0;
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LayoutDirectionBehavior()
{
  Hasher.init(_seed:)();
  int v1 = *v0;
  if (v1 == 2)
  {
    Swift::UInt v2 = 0;
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior;
  if (!lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutDirectionBehavior and conformance LayoutDirectionBehavior);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutDirectionBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C51F94);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = v7 - 2;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for LayoutDirectionBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245C5207CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for LayoutDirectionBehavior(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for LayoutDirectionBehavior(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutDirectionBehavior()
{
  return &type metadata for LayoutDirectionBehavior;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)&v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)&v44[-v8];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  double v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)&v44[-v15];
  outlined init with copy of Text.Effect.BaseContent(a2, (uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v9, (uint64_t)v13, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v18 = *v9;
  Swift::UInt64 v17 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v18 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    if (v20)
    {
      swift_endAccess();
      _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v13, (uint64_t)v16);
      uint64_t v21 = *(int *)(v11 + 36);
      while (1)
      {
        unint64_t v22 = *(uint64_t *)((char *)v16 + v21);
        uint64_t v24 = *v16;
        Swift::UInt64 v23 = v16[1];
        uint64_t v25 = v16[2];
        swift_beginAccess();
        uint64_t v26 = *(void *)(v24 + 48);
        if (!*(void *)(v26 + 16)) {
          break;
        }
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v28 & 1) == 0) {
          break;
        }
        uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        uint64_t v30 = *(void *)(v29 + 16);
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
          break;
        }
        if (v30 == v22) {
          goto LABEL_19;
        }
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v24, v23, v25, v22, v45);
        outlined init with copy of Text.Effect.BaseContent((uint64_t)v16, (uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        uint64_t v31 = *v6;
        Swift::UInt64 v32 = v6[1];
        uint64_t v33 = v6[2];
        uint64_t v34 = *v6 + 48;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v31 + 48) + 16)) {
          goto LABEL_26;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if ((v35 & 1) == 0) {
          goto LABEL_26;
        }
        swift_endAccess();
        swift_beginAccess();
        uint64_t v36 = *(void *)v34;
        if (!*(void *)(*(void *)v34 + 16)) {
          goto LABEL_27;
        }
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if ((v38 & 1) == 0) {
          goto LABEL_27;
        }
        uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
        swift_endAccess();
        if (v22 >= *(void *)(v39 + 16)) {
          goto LABEL_21;
        }
        *(uint64_t *)((char *)v16 + v21) = v22 + 1;
        _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        uint64_t v40 = v45[6];
        uint64_t v41 = *(void *)(*(void *)(v45[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v45);
        if (__OFADD__(v40, v41)) {
          goto LABEL_22;
        }
        if (v40 + v41 < v40) {
          goto LABEL_23;
        }
        if (__OFSUB__(v40 + v41, v40)) {
          goto LABEL_24;
        }
        BOOL v42 = __OFADD__(a1, v41);
        a1 += v41;
        if (v42)
        {
          __break(1u);
LABEL_19:
          _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_26:
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_endAccess();
      __break(1u);
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t result;
  unsigned char v43[24];
  void v44[7];

  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)&v43[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)&v43[-v8];
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  double v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)&v43[-v15];
  outlined init with copy of Text.Effect.BaseContent(a2, (uint64_t)v9);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v9, (uint64_t)v13);
  uint64_t v18 = *v9;
  Swift::UInt64 v17 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v18 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
    if (v20)
    {
      swift_endAccess();
      outlined destroy of Text.Effect.BaseContent((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v13, (uint64_t)v16);
      uint64_t v21 = *(int *)(v11 + 36);
      while (1)
      {
        unint64_t v22 = *(uint64_t *)((char *)v16 + v21);
        uint64_t v24 = *v16;
        Swift::UInt64 v23 = v16[1];
        uint64_t v25 = v16[2];
        swift_beginAccess();
        uint64_t v26 = *(void *)(v24 + 48);
        if (!*(void *)(v26 + 16)) {
          break;
        }
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v28 & 1) == 0) {
          break;
        }
        uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        uint64_t v30 = *(void *)(v29 + 16);
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_18:
          __break(1u);
          break;
        }
        if (v30 == v22) {
          goto LABEL_16;
        }
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v24, v23, v25, v22, v44);
        outlined init with copy of Text.Effect.BaseContent((uint64_t)v16, (uint64_t)v6);
        uint64_t v31 = *v6;
        Swift::UInt64 v32 = v6[1];
        uint64_t v33 = v6[2];
        uint64_t v34 = *v6 + 48;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v31 + 48) + 16)) {
          goto LABEL_20;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if ((v35 & 1) == 0) {
          goto LABEL_20;
        }
        swift_endAccess();
        swift_beginAccess();
        uint64_t v36 = *(void *)v34;
        if (!*(void *)(*(void *)v34 + 16)) {
          goto LABEL_21;
        }
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if ((v38 & 1) == 0) {
          goto LABEL_21;
        }
        uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
        swift_endAccess();
        if (v22 >= *(void *)(v39 + 16)) {
          goto LABEL_18;
        }
        *(uint64_t *)((char *)v16 + v21) = v22 + 1;
        outlined destroy of Text.Effect.BaseContent((uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
        uint64_t v40 = *(void *)(v44[3] + 112);
        outlined release of Text.Effect.BaseFragment((uint64_t)v44);
        uint64_t v41 = __OFADD__(a1, v40);
        a1 += v40;
        if (v41)
        {
          __break(1u);
LABEL_16:
          outlined destroy of Text.Effect.BaseContent((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_endAccess();
      __break(1u);
    }
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::UInt64 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t result;
  void v49[7];
  uint64_t *v50;

  type metadata accessor for Text.Effect.DrawableContent<BigTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v50 = (void *)((char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 24);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)v49 - v7 + 24);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (void *)((char *)v49 - v14 + 24);
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>(a2, (uint64_t)v8);
  outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8, (uint64_t)v12);
  Swift::UInt64 v17 = *v8;
  unint64_t v16 = v8[1];
  uint64_t v18 = v8[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
    if (v19)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v8);
      *(void *)&v12[*(int *)(v10 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
      char v20 = *(int *)(v10 + 36);
      while (1)
      {
        uint64_t v21 = v20;
        unint64_t v22 = *(uint64_t *)((char *)v15 + v20);
        uint64_t v24 = *v15;
        Swift::UInt64 v23 = v15[1];
        uint64_t v25 = v15[2];
        swift_beginAccess();
        uint64_t v26 = *(void *)(v24 + 48);
        if (!*(void *)(v26 + 16)) {
          break;
        }
        swift_retain();
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v28 & 1) == 0) {
          goto LABEL_25;
        }
        uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v30 = *(void *)(v29 + 16);
        swift_bridgeObjectRelease();
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_release();
          break;
        }
        if (v30 == v22) {
          goto LABEL_19;
        }
        swift_retain();
        uint64_t v31 = swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v23, v25, v22, v49);
        Swift::UInt64 v32 = v50;
        outlined init with copy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v15, (uint64_t)v50);
        uint64_t v33 = *v32;
        uint64_t v34 = v32[1];
        char v35 = v32[2];
        uint64_t v36 = *v32 + 48;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v33 + 48) + 16)) {
          goto LABEL_28;
        }
        swift_retain();
        specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v37 & 1) == 0) {
          goto LABEL_27;
        }
        swift_endAccess();
        swift_release();
        swift_beginAccess();
        char v38 = *(void *)v36;
        if (!*(void *)(*(void *)v36 + 16)) {
          goto LABEL_30;
        }
        swift_retain();
        uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v40 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 16 * v39);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        BOOL v42 = *(void *)(v41 + 16);
        swift_bridgeObjectRelease();
        if (v22 >= v42) {
          goto LABEL_21;
        }
        float v43 = v22 + 1;
        outlined destroy of Text.Effect.DrawableContent<BigTextEffect>((uint64_t)v50);
        char v20 = v21;
        *(uint64_t *)((char *)v15 + v21) = v43;
        uint64_t v44 = v49[6];
        float v45 = *(void *)(*(void *)(v49[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v49);
        if (__OFADD__(v44, v45)) {
          goto LABEL_22;
        }
        if (v44 + v45 < v44) {
          goto LABEL_23;
        }
        if (__OFSUB__(v44 + v45, v44)) {
          goto LABEL_24;
        }
        double v46 = __OFADD__(a1, v45);
        a1 += v45;
        if (v46)
        {
          __break(1u);
LABEL_19:
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_release();
LABEL_28:
      swift_endAccess();
      __break(1u);
LABEL_29:
      swift_release();
LABEL_30:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  Swift::UInt64 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::UInt64 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t result;
  void v49[7];
  uint64_t *v50;

  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v50 = (void *)((char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 24);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)v49 - v7 + 24);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (void *)((char *)v49 - v14 + 24);
  outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>(a2, (uint64_t)v8);
  outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v8, (uint64_t)v12);
  Swift::UInt64 v17 = *v8;
  unint64_t v16 = v8[1];
  uint64_t v18 = v8[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
    if (v19)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v8);
      *(void *)&v12[*(int *)(v10 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>((uint64_t)v12, (uint64_t)v15);
      char v20 = *(int *)(v10 + 36);
      while (1)
      {
        uint64_t v21 = v20;
        unint64_t v22 = *(uint64_t *)((char *)v15 + v20);
        uint64_t v24 = *v15;
        Swift::UInt64 v23 = v15[1];
        uint64_t v25 = v15[2];
        swift_beginAccess();
        uint64_t v26 = *(void *)(v24 + 48);
        if (!*(void *)(v26 + 16)) {
          break;
        }
        swift_retain();
        unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
        if ((v28 & 1) == 0) {
          goto LABEL_25;
        }
        uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 16 * v27);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v30 = *(void *)(v29 + 16);
        swift_bridgeObjectRelease();
        if (__OFSUB__(v30, v22))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_release();
          break;
        }
        if (v30 == v22) {
          goto LABEL_19;
        }
        swift_retain();
        uint64_t v31 = swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v23, v25, v22, v49);
        Swift::UInt64 v32 = v50;
        outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v15, (uint64_t)v50);
        uint64_t v33 = *v32;
        uint64_t v34 = v32[1];
        char v35 = v32[2];
        uint64_t v36 = *v32 + 48;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v33 + 48) + 16)) {
          goto LABEL_28;
        }
        swift_retain();
        specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v37 & 1) == 0) {
          goto LABEL_27;
        }
        swift_endAccess();
        swift_release();
        swift_beginAccess();
        char v38 = *(void *)v36;
        if (!*(void *)(*(void *)v36 + 16)) {
          goto LABEL_30;
        }
        swift_retain();
        uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
        if ((v40 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v41 = *(void *)(*(void *)(v38 + 56) + 16 * v39);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_release();
        BOOL v42 = *(void *)(v41 + 16);
        swift_bridgeObjectRelease();
        if (v22 >= v42) {
          goto LABEL_21;
        }
        float v43 = v22 + 1;
        outlined destroy of Text.Effect.DrawableContent<BounceTextEffect>((uint64_t)v50);
        char v20 = v21;
        *(uint64_t *)((char *)v15 + v21) = v43;
        uint64_t v44 = v49[6];
        float v45 = *(void *)(*(void *)(v49[3] + 96) + 16);
        outlined release of Text.Effect.BaseFragment((uint64_t)v49);
        if (__OFADD__(v44, v45)) {
          goto LABEL_22;
        }
        if (v44 + v45 < v44) {
          goto LABEL_23;
        }
        if (__OFSUB__(v44 + v45, v44)) {
          goto LABEL_24;
        }
        double v46 = __OFADD__(a1, v45);
        a1 += v45;
        if (v46)
        {
          __break(1u);
LABEL_19:
          outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>((uint64_t)v15);
          return a1;
        }
      }
      swift_endAccess();
      __break(1u);
LABEL_27:
      swift_release();
LABEL_28:
      swift_endAccess();
      __break(1u);
LABEL_29:
      swift_release();
LABEL_30:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for FragmentRangeSequence(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  unsigned int v9 = (int *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v53 - v13;
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v7, type metadata accessor for FragmentRangeSequence);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v7, (uint64_t)v14, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v15 = *(int *)(v5 + 32);
  unint64_t v16 = &v7[*(int *)(v5 + 28)];
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  uint64_t v19 = &v14[v9[7]];
  *(void *)uint64_t v19 = v18;
  *((void *)v19 + 1) = v17;
  char v20 = &v14[v9[8]];
  *(_OWORD *)char v20 = *(_OWORD *)&v7[v15];
  uint64_t v21 = v9[9];
  uint64_t v54 = v14;
  unint64_t v22 = &v14[v21];
  *(void *)unint64_t v22 = v18;
  *((void *)v22 + 1) = v17;
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v7, type metadata accessor for FragmentRangeSequence);
  while (1)
  {
    unint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)v20;
    if (*(void *)v22 >= *(void *)v20)
    {
      if (__OFSUB__(v24, v23)) {
        goto LABEL_48;
      }
      if (v24 != v23 || *((void *)v22 + 1) >= *((void *)v20 + 1)) {
        return _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v54, type metadata accessor for FragmentRangeSequence.Iterator);
      }
    }
    outlined init with copy of Text.Effect.BaseContent((uint64_t)v54, (uint64_t)v11, type metadata accessor for FragmentRangeSequence.Iterator);
    uint64_t v25 = *v11;
    Swift::UInt64 v26 = v11[1];
    uint64_t v27 = v11[2];
    swift_beginAccess();
    uint64_t v28 = *(void *)(v25 + 48);
    if (!*(void *)(v28 + 16)) {
      goto LABEL_52;
    }
    swift_retain_n();
    swift_retain();
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    if ((v30 & 1) == 0) {
      break;
    }
    uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 16 * v29);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v23 & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    if (v23 >= *(void *)(v31 + 16)) {
      goto LABEL_39;
    }
    uint64_t v32 = v31 + 32;
    uint64_t v33 = *(void *)(v31 + 32 + 8 * v23);
    uint64_t v34 = 0;
    if (v23)
    {
      while (1)
      {
        uint64_t v35 = *(void *)(*(void *)(*(void *)v32 + 96) + 16);
        BOOL v48 = __OFADD__(v34, v35);
        v34 += v35;
        if (v48) {
          break;
        }
        v32 += 8;
        if (!--v23) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_retain();
      swift_retain();
      goto LABEL_54;
    }
LABEL_13:
    swift_retain();
    swift_bridgeObjectRelease();
    _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v11, type metadata accessor for Text.Effect.BaseContent);
    unint64_t v36 = *(void *)v22;
    if (__OFSUB__(*(void *)v20, *(void *)v22)) {
      goto LABEL_40;
    }
    if (*(void *)v20 == *(void *)v22)
    {
      uint64_t v37 = *((void *)v22 + 1);
      uint64_t v38 = *((void *)v20 + 1);
      if (v38 < v37) {
        goto LABEL_49;
      }
      uint64_t v39 = *(void *)(v33 + 96);
      uint64_t v40 = *(void *)(v39 + 16);
      BOOL v48 = __OFADD__(v34, v40);
      uint64_t v41 = v34 + v40;
      BOOL v42 = v48;
    }
    else
    {
      uint64_t v39 = *(void *)(v33 + 96);
      uint64_t v43 = *(void *)(v39 + 16);
      uint64_t v41 = v34 + v43;
      BOOL v42 = __OFADD__(v34, v43);
      if (__OFADD__(v34, v43)) {
        goto LABEL_50;
      }
      uint64_t v37 = *((void *)v22 + 1);
      BOOL v44 = v41 < v34 || v41 < v37;
      if (v44) {
        goto LABEL_51;
      }
      uint64_t v38 = v41;
    }
    if (v42) {
      goto LABEL_41;
    }
    if (v41 < v34) {
      goto LABEL_42;
    }
    *((void *)v22 + 1) = v41;
    BOOL v48 = __OFADD__(v36, 1);
    unint64_t v45 = v36 + 1;
    if (v48) {
      goto LABEL_43;
    }
    *(void *)unint64_t v22 = v45;
    if (__OFSUB__(v38, v37)) {
      goto LABEL_44;
    }
    uint64_t v46 = *(void *)(v39 + 16);
    BOOL v48 = __OFADD__(v34, v46);
    uint64_t v47 = v34 + v46;
    if (v48) {
      goto LABEL_45;
    }
    BOOL v48 = __OFSUB__(v47, v34);
    BOOL v44 = v47 < v34;
    uint64_t v49 = v47 - v34;
    if (v44) {
      goto LABEL_46;
    }
    if (v48) {
      goto LABEL_47;
    }
    double v50 = (double)(v38 - v37) / (double)v49 * CGRectGetWidth(*(CGRect *)(v33 + 120));
    double Width = CGRectGetWidth(*(CGRect *)(v33 + 120));
    swift_release();
    swift_release();
    swift_release();
    a2 = a2 + v50 / Width;
  }
  swift_release();
LABEL_54:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt64 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double Width;
  double v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;

  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (uint64_t *)((char *)&v47 - v8);
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v9, (uint64_t)v13, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  uint64_t v19 = v9[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v17 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    if (v20)
    {
      swift_endAccess();
      swift_release();
      outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
      *(void *)&v13[*(int *)(v11 + 36)] = 0;
      outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>);
      BOOL v48 = *(int *)(v11 + 36);
      uint64_t v21 = *(uint64_t *)((char *)v16 + v48);
      unint64_t v23 = *v16;
      unint64_t v22 = v16[1];
      uint64_t v24 = v16[2];
      swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 48);
      if (*(void *)(v25 + 16))
      {
        while (1)
        {
          swift_retain();
          Swift::UInt64 v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
          if ((v27 & 1) == 0) {
            break;
          }
          uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 16 * v26);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v29 = *(void *)(v28 + 16);
          swift_bridgeObjectRelease();
          if (__OFSUB__(v29, v21))
          {
            __break(1u);
LABEL_16:
            __break(1u);
            break;
          }
          if (v29 == v21) {
            return outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>);
          }
          swift_retain();
          char v30 = swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v30, v22, v24, v21, v49);
          outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v16, (uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
          uint64_t v31 = *v6;
          uint64_t v32 = v6[1];
          uint64_t v33 = v6[2];
          uint64_t v34 = *v6 + 48;
          swift_beginAccess();
          if (!*(void *)(*(void *)(v31 + 48) + 16)) {
            goto LABEL_20;
          }
          swift_retain();
          specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v35 & 1) == 0) {
            goto LABEL_19;
          }
          swift_endAccess();
          swift_release();
          swift_beginAccess();
          unint64_t v36 = *(void *)v34;
          if (!*(void *)(*(void *)v34 + 16)) {
            goto LABEL_22;
          }
          swift_retain();
          uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
          if ((v38 & 1) == 0) {
            goto LABEL_21;
          }
          uint64_t v39 = *(void *)(*(void *)(v36 + 56) + 16 * v37);
          swift_endAccess();
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v40 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          if (v21 >= v40) {
            goto LABEL_16;
          }
          outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v6, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
          uint64_t v41 = v48;
          *(uint64_t *)((char *)v16 + v48) = v21 + 1;
          BOOL v42 = v50;
          double Width = CGRectGetWidth(*(CGRect *)(v50 + 120));
          BOOL v44 = CGRectGetWidth(*(CGRect *)(v42 + 120));
          outlined release of Text.Effect.BaseFragment((uint64_t)v49);
          a2 = a2 + Width / v44;
          uint64_t v21 = *(uint64_t *)((char *)v16 + v41);
          unint64_t v45 = *v16;
          unint64_t v22 = v16[1];
          uint64_t v24 = v16[2];
          swift_beginAccess();
          uint64_t v25 = *(void *)(v45 + 48);
          if (!*(void *)(v25 + 16)) {
            goto LABEL_18;
          }
        }
        swift_release();
      }
LABEL_18:
      swift_endAccess();
      __break(1u);
LABEL_19:
      swift_release();
LABEL_20:
      swift_endAccess();
      __break(1u);
LABEL_21:
      swift_release();
LABEL_22:
      swift_endAccess();
      __break(1u);
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ClusterIndexSequence(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v48 - v14;
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v8, type metadata accessor for ClusterIndexSequence);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v8, (uint64_t)v15, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v16 = *(int *)(v6 + 32);
  uint64_t v17 = &v8[*(int *)(v6 + 28)];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  char v20 = &v15[v10[7]];
  *(void *)char v20 = v19;
  *((void *)v20 + 1) = v18;
  uint64_t v21 = &v15[v10[8]];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&v8[v16];
  unint64_t v22 = &v15[v10[9]];
  *(void *)unint64_t v22 = v19;
  *((void *)v22 + 1) = v18;
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v8, type metadata accessor for ClusterIndexSequence);
  unint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)v21;
  if (*(void *)v22 >= *(void *)v21)
  {
    if (__OFSUB__(v24, v23))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v24 != v23 || *((void *)v22 + 1) >= *((void *)v21 + 1))
    {
      uint64_t result = _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v15, type metadata accessor for ClusterIndexSequence.Iterator);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      return result;
    }
  }
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v15, (uint64_t)v12, type metadata accessor for ClusterIndexSequence.Iterator);
  uint64_t v25 = v12;
  uint64_t v26 = *v12;
  Swift::UInt64 v28 = v25[1];
  uint64_t v27 = v25[2];
  uint64_t v53 = (uint64_t)v25;
  swift_beginAccess();
  uint64_t v29 = *(void *)(v26 + 48);
  if (*(void *)(v29 + 16))
  {
    uint64_t v52 = v2;
    swift_retain_n();
    swift_retain();
    Swift::UInt64 v51 = v28;
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
    if ((v31 & 1) == 0)
    {
      swift_release();
      goto LABEL_33;
    }
    uint64_t v32 = v26;
    uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 16 * v30);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v34 = v53;
    if ((v23 & 0x8000000000000000) == 0)
    {
      uint64_t v50 = v32;
      unint64_t v35 = *(void *)(v33 + 16);
      if (v23 >= v35)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v49 = v27;
      uint64_t v36 = v33 + 32;
      uint64_t v37 = *(void *)(v33 + 32 + 8 * v23);
      uint64_t v38 = 0;
      if (!v23)
      {
LABEL_10:
        swift_retain();
        swift_bridgeObjectRelease();
        _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0(v34, type metadata accessor for Text.Effect.BaseContent);
        uint64_t v42 = *((void *)v22 + 1);
        uint64_t v43 = v42 + 1;
        if (!__OFADD__(v42, 1))
        {
          *((void *)v22 + 1) = v43;
          uint64_t v44 = *(void *)(*(void *)(v37 + 96) + 16);
          BOOL v41 = __OFADD__(v38, v44);
          uint64_t v45 = v38 + v44;
          if (!v41)
          {
            if (v45 >= v38)
            {
              if (!__OFSUB__(v45, v43))
              {
                if (v45 == v43)
                {
                  if (__OFADD__(*(void *)v22, 1))
                  {
LABEL_30:
                    __break(1u);
                    goto LABEL_31;
                  }
                  ++*(void *)v22;
                }
                uint64_t result = _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v15, type metadata accessor for ClusterIndexSequence.Iterator);
                Swift::UInt64 v47 = v51;
                *(void *)a2 = v50;
                *(void *)(a2 + 8) = v47;
                *(void *)(a2 + 16) = v49;
                *(void *)(a2 + 24) = v37;
                *(void *)(a2 + 32) = v23;
                *(void *)(a2 + 40) = v35;
                *(void *)(a2 + 48) = v38;
                *(void *)(a2 + 56) = v42;
                return result;
              }
              goto LABEL_28;
            }
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      unint64_t v39 = v23;
      while (1)
      {
        uint64_t v40 = *(void *)(*(void *)(*(void *)v36 + 96) + 16);
        BOOL v41 = __OFADD__(v38, v40);
        v38 += v40;
        if (v41) {
          break;
        }
        v36 += 8;
        if (!--v39) {
          goto LABEL_10;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_31:
  swift_retain();
  swift_retain();
LABEL_33:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_7SwiftUI4TextVAJE6EffectO6TimingV09UnitGlyphJ0Vs5NeverOTg506_sS2d7f3UI4h5VAAE6i2O6j3V09kl19E0VIgyyd_Sd_SdtAIs5m149OIegnrzr_TR03_s7a3UI4c5VAAE6d2O6e109V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09fG65t21VGAG13ConfigurationV_v31AA6SpringVSayAG0W4InfoVGtFAQSd_W16XEfU5_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v35 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  int64_t v32 = v5;
  unint64_t v33 = v4;
  uint64_t v34 = a1;
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = v6;
    uint64_t v11 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_26;
      }
      uint64_t v12 = *v7;
      uint64_t v13 = *v8;
      unint64_t v15 = *(void *)(v35 + 16);
      unint64_t v14 = *(void *)(v35 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v30 = v11;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v30;
      }
      *(void *)(v35 + 16) = v15 + 1;
      uint64_t v16 = v35 + 16 * v15;
      --v5;
      *(void *)(v16 + 32) = v12;
      *(void *)(v16 + 40) = v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
LABEL_13:
    if (v33 <= v32)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    uint64_t v17 = 0;
    if (v6 <= v32) {
      int64_t v18 = v32;
    }
    else {
      int64_t v18 = v6;
    }
    int64_t v19 = v18 - v6;
    unint64_t v20 = v33 - v6;
    int64_t v21 = v32 - v6;
    uint64_t v22 = 8 * v6 + 32;
    uint64_t v23 = v34 + v22;
    uint64_t v24 = v11 + v22;
    while (v20 != v17)
    {
      if (v21 == v17) {
        goto LABEL_24;
      }
      if (v19 == v17) {
        goto LABEL_28;
      }
      uint64_t v25 = *(void *)(v23 + 8 * v17);
      uint64_t v26 = *(void *)(v24 + 8 * v17);
      unint64_t v28 = *(void *)(v35 + 16);
      unint64_t v27 = *(void *)(v35 + 24);
      if (v28 >= v27 >> 1)
      {
        uint64_t v31 = v11;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v11 = v31;
      }
      *(void *)(v35 + 16) = v28 + 1;
      uint64_t v29 = v35 + 16 * v28;
      *(void *)(v29 + 32) = v25;
      *(void *)(v29 + 40) = v26;
      if (v20 == ++v17) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

Swift::Double __swiftcall Text.Effect.ClusterSeparationFunction.separation(clusterCount:lineCoverage:)(Swift::Int clusterCount, Swift::Double lineCoverage)
{
  switch(v5)
  {
    case 1:
      Swift::Int v22 = 2;
      if (clusterCount > 2) {
        Swift::Int v22 = clusterCount;
      }
      double v23 = -2.0 / (double)v22 + 1.0;
      double v11 = (1.0 - v23) * v3;
      double v12 = v23 * v2;
      goto LABEL_13;
    case 2:
      double v8 = v2;
      double v9 = v3;
      long double v10 = 2.0 / (exp(((double)clusterCount + -1.0) / -10.0) + 1.0) + -1.0;
      double v11 = (1.0 - v10) * v9;
      double v12 = v10 * v8;
LABEL_13:
      Swift::Double result = v12 + v11;
      break;
    case 3:
      double v13 = v2;
      double v14 = v3;
      double v15 = v4;
      double v16 = exp(lineCoverage * -0.75);
      if (v16 <= 1.0) {
        double v17 = v16;
      }
      else {
        double v17 = 1.0;
      }
      BOOL v18 = v16 < 0.0;
      double v19 = 0.0;
      if (!v18) {
        double v19 = v17;
      }
      double v20 = v19 * v13 + (1.0 - v19) * v14;
      long double v21 = exp(((double)clusterCount + -1.0) / -10.0);
      Swift::Double result = (1.0 - (2.0 / (v21 + 1.0) + -1.0)) * v15 + (2.0 / (v21 + 1.0) + -1.0) * v20;
      break;
    default:
      Swift::Double result = v2;
      break;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    return !*(unsigned char *)(a2 + 16) && v2 == v3;
  }
  double v5 = *(double *)(a2 + 8);
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    if (v4 == 1 && v2 == v3) {
      return *(double *)(a1 + 8) == v5;
    }
    return 0;
  }
  uint64_t v7 = *(void *)&v5 | *(void *)&v3;
  return v4 == 2 && v7 == 0;
}

void Text.Effect.FractionalIndexFunction.summary(of:content:)(unint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, double *a7@<X8>)
{
  unint64_t v67 = a1;
  uint64_t v66 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x270FA5388](v66);
  double v14 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  double v17 = (char *)&v54 - v16;
  uint64_t v18 = type metadata accessor for ClusterIndexSequence(0);
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a6 & 1) == 0)
  {
    if (a4 >= a2)
    {
      char v21 = 0;
      *(void *)a7 = a2;
      *((void *)a7 + 1) = a4;
LABEL_32:
      *((unsigned char *)a7 + 16) = v21;
      return;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v64 = a5;
  outlined init with copy of Text.Effect.BaseContent(a5, (uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
  Swift::Int v22 = &v20[*(int *)(v18 + 20)];
  *(void *)Swift::Int v22 = v67;
  *((void *)v22 + 1) = a2;
  double v23 = &v20[*(int *)(v18 + 24)];
  uint64_t v65 = a3;
  *(void *)double v23 = a3;
  *((void *)v23 + 1) = a4;
  specialized Sequence.first(where:)((uint64_t)v20, (uint64_t)v68);
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v20, type metadata accessor for ClusterIndexSequence);
  uint64_t v24 = v68[0];
  unint64_t v25 = a2;
  uint64_t v63 = a7;
  if (!v68[0]) {
    goto LABEL_11;
  }
  unint64_t v26 = v73 - v72;
  if (__OFSUB__(v73, v72))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v27 = *(void *)(v69 + 96);
  if (v26 < *(void *)(v27 + 16))
  {
    unint64_t v28 = *(void **)(v27 + 24 * v26 + 48);
    if (v28[2])
    {
      uint64_t v29 = (void *)v28[4];
      CFIndex v55 = v28[5];
      uint64_t v62 = v28[9];
      uint64_t v57 = v68[1];
      uint64_t v61 = v72;
      uint64_t v58 = v69;
      uint64_t v59 = v70;
      uint64_t v60 = v71;
      uint64_t v56 = v68[2];
      swift_retain_n();
      uint64_t v30 = v29;
      uint64_t v31 = (id)_CTLineGetRunAtIndex(v30, v55);
      LODWORD(v55) = CTRunGetStatus((CTRunRef)v31);

      outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v24);
      swift_release_n();

      char v32 = v55 & 1;
      goto LABEL_12;
    }
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v68[0]);
LABEL_11:
    char v32 = 0;
LABEL_12:
    outlined init with copy of Text.Effect.BaseContent(v64, (uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
    unint64_t v33 = &v20[*(int *)(v18 + 20)];
    unint64_t v34 = v67;
    *(void *)unint64_t v33 = v67;
    *((void *)v33 + 1) = v25;
    uint64_t v35 = &v20[*(int *)(v18 + 24)];
    uint64_t v36 = v65;
    *(void *)uint64_t v35 = v65;
    *((void *)v35 + 1) = a4;
    outlined init with copy of Text.Effect.BaseContent((uint64_t)v20, (uint64_t)v17, type metadata accessor for Text.Effect.BaseContent);
    uint64_t v37 = v66;
    uint64_t v38 = &v17[*(int *)(v66 + 20)];
    *(void *)uint64_t v38 = v34;
    *((void *)v38 + 1) = v25;
    unint64_t v39 = &v17[*(int *)(v37 + 24)];
    *(void *)unint64_t v39 = v36;
    *((void *)v39 + 1) = a4;
    uint64_t v40 = (unint64_t *)&v17[*(int *)(v37 + 28)];
    *uint64_t v40 = v34;
    v40[1] = v25;
    _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v20, type metadata accessor for ClusterIndexSequence);
    double v41 = INFINITY;
    double v42 = -INFINITY;
    while (1)
    {
      unint64_t v43 = *v40;
      uint64_t v44 = *(void *)v39;
      if ((int64_t)*v40 >= *(void *)v39)
      {
        if (__OFSUB__(v44, v43)) {
          goto LABEL_38;
        }
        if (v44 != v43 || (int64_t)v40[1] >= *((void *)v39 + 1)) {
          break;
        }
      }
      outlined init with copy of Text.Effect.BaseContent((uint64_t)v17, (uint64_t)v14, type metadata accessor for ClusterIndexSequence.Iterator);
      uint64_t v45 = *v14;
      Swift::UInt64 v46 = v14[1];
      uint64_t v47 = v14[2];
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v45, v46, v47, v43, v68);
      _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v14, type metadata accessor for Text.Effect.BaseContent);
      uint64_t v48 = v40[1];
      uint64_t v49 = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v40[1] = v49;
      uint64_t v50 = *(void *)(*(void *)(v69 + 96) + 16);
      BOOL v51 = __OFADD__(v72, v50);
      uint64_t v52 = v72 + v50;
      if (v51) {
        goto LABEL_34;
      }
      if (v52 < v72) {
        goto LABEL_35;
      }
      if (__OFSUB__(v52, v49)) {
        goto LABEL_36;
      }
      if (v52 == v49)
      {
        if (__OFADD__(*v40, 1)) {
          goto LABEL_39;
        }
        ++*v40;
      }
      if (v49 < v48) {
        goto LABEL_37;
      }
      Text.Effect.BaseFragment.typographicBounds(for:)(v48, v49, (uint64_t)v74);
      *(void *)&v77.origin.CGFloat x = v74[0];
      *(void *)&v77.size.CGFloat width = v74[2];
      v77.origin.CGFloat y = *(double *)&v74[1] - v75;
      v77.size.CGFloat height = v75 + v76;
      double MidX = CGRectGetMidX(v77);
      outlined release of Text.Effect.BaseFragment((uint64_t)v68);
      if (MidX < v41) {
        double v41 = MidX;
      }
      if (v42 <= MidX) {
        double v42 = MidX;
      }
    }
    _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v17, type metadata accessor for ClusterIndexSequence.Iterator);
    if (v41 > v42) {
      goto LABEL_41;
    }
    char v21 = v32 | 0x80;
    a7 = v63;
    *uint64_t v63 = v41;
    a7[1] = v42;
    goto LABEL_32;
  }
LABEL_44:
  __break(1u);
}

void *Text.Effect.ChunkingFunction.chunk(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v87 = a3;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v11 = (char *)&v78 - v10;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v90 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v89 = (char *)&v78 - v14;
  uint64_t v15 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v15 - 8);
  double v17 = (uint64_t *)((char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  double v20 = (uint64_t *)((char *)&v78 - v19);
  if (a4)
  {
    outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)&v78 - v19, type metadata accessor for Text.Effect.BaseContent);
    specialized BidirectionalCollection.last.getter((uint64_t)&v99);
    if (!v99)
    {
LABEL_15:
      unint64_t v26 = 0;
LABEL_16:
      uint64_t v28 = *v20;
      Swift::UInt64 v29 = v20[1];
      uint64_t v30 = v20[2];
      swift_beginAccess();
      if (!*(void *)(*(void *)(v28 + 48) + 16))
      {
LABEL_86:
        swift_endAccess();
        __break(1u);
        goto LABEL_87;
      }
      swift_retain();
      specialized __RawDictionaryStorage.find<A>(_:)(v29, v30);
      if ((v31 & 1) == 0)
      {
LABEL_85:
        swift_release();
        goto LABEL_86;
      }
      swift_endAccess();
LABEL_64:
      swift_release();
      uint64_t v75 = specialized Text.Effect.DrawableContent.endIndex.getter();
      type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>);
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = xmmword_2461B9DC0;
      *(void *)(v76 + 32) = 0;
      *(void *)(v76 + 40) = 0;
      *(void *)(v76 + 48) = v75;
      *(void *)(v76 + 56) = v26;
      double v80 = (void *)v76;
      _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
      return v80;
    }
    uint64_t v25 = v101;
    a1 = *(void *)(*(void *)(v100 + 96) + 16);
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v99);
    unint64_t v26 = (char *)(v25 + a1);
    if (__OFADD__(v25, a1)) {
      goto LABEL_81;
    }
    if ((uint64_t)v26 >= v25) {
      goto LABEL_16;
    }
    __break(1u);
  }
  else if (specialized Sequence.reduce<A>(_:_:)(0, a1) > a2)
  {
    uint64_t v85 = v11;
    uint64_t v88 = (uint64_t *)a1;
    uint64_t v21 = specialized RandomAccessCollection<>.indices.getter();
    if (v22 < v21)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if (__OFSUB__(v22, v21))
    {
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    int64_t v23 = v21;
    int64_t v24 = v22;
    if (v22 == v21) {
      return (void *)MEMORY[0x263F8EE78];
    }
    int v82 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v83 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v81 = (void (**)(char *, uint64_t))(v13 + 8);
    double v80 = (void *)MEMORY[0x263F8EE78];
    char v32 = v88;
    int64_t v86 = v22;
    uint64_t v84 = v8;
    while (1)
    {
      if (v23 >= v24) {
        goto LABEL_71;
      }
      uint64_t v33 = *v32;
      Swift::UInt64 v34 = v32[1];
      uint64_t v35 = v32[2];
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v33, v34, v35, v23, v93);
      uint64_t v36 = v93[6];
      uint64_t v37 = *(void *)(*(void *)(v93[3] + 96) + 16);
      outlined release of Text.Effect.BaseFragment((uint64_t)v93);
      if (__OFADD__(v36, v37)) {
        break;
      }
      BOOL v38 = __OFSUB__(v36 + v37, v36);
      uint64_t v39 = v37;
      if (v37 < 0 != v38) {
        goto LABEL_73;
      }
      if (v38) {
        goto LABEL_74;
      }
      int64_t v40 = v23 + 1;
      if (v23 + 1 < v24 && v39 < v87)
      {
        unint64_t v79 = v23;
        while (1)
        {
          swift_retain();
          swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v33, v34, v35, v40, v94);
          uint64_t v41 = v95;
          uint64_t v102 = v95;
          swift_retain();
          outlined release of Text.Effect.BaseFragment((uint64_t)v94);
          double v42 = *(void **)(v41 + 32);
          uint64_t v43 = *(void *)(v41 + 40);
          char v44 = *(unsigned char *)(v41 + 48);
          if (v44)
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v41 + 32), *(void *)(v41 + 40), 1);
            uint64_t v45 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v42);
            if (!v45)
            {
              char v44 = 1;
              goto LABEL_32;
            }
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v41 + 32), *(void *)(v41 + 40), 0);
            outlined copy of Text.Layout.Line.Line(v42, v43, 0);
            swift_release();
            uint64_t v45 = (const __CTLine *)v42;
          }
          _CTLineGetRunCount(v45);

LABEL_32:
          outlined consume of Text.Layout.Line.Line(v42, v43, v44);
          (*v83)(v89, v41+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v90);
          Swift::UInt64 v46 = v85;
          RangeSet.ranges.getter();
          lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges();
          uint64_t v47 = v84;
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          uint64_t v48 = v92;
          uint64_t v49 = v91[0];
          if (v92 == v91[0])
          {
            uint64_t v50 = 0;
          }
          else
          {
            BOOL v51 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
            uint64_t v50 = *v52;
            v51(v91, 0);
          }
          LOBYTE(v91[0]) = v48 == v49;
          (*v82)(v46, v47);
          char v53 = v91[0];
          (*v81)(v89, v90);
          outlined release of ViewTransform((uint64_t)&v102);
          if ((v53 & 1) == 0 && !v50) {
            goto LABEL_46;
          }
          uint64_t v33 = *v88;
          Swift::UInt64 v34 = v88[1];
          uint64_t v35 = v88[2];
          swift_retain();
          swift_retain();
          specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v33, v34, v35, v40, v96);
          uint64_t v54 = v96[6];
          uint64_t v55 = *(void *)(*(void *)(v96[3] + 96) + 16);
          outlined release of Text.Effect.BaseFragment((uint64_t)v96);
          uint64_t v56 = v54 + v55;
          if (__OFADD__(v54, v55))
          {
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }
          if (v56 < v54) {
            goto LABEL_67;
          }
          if (__OFSUB__(v56, v54)) {
            goto LABEL_68;
          }
          BOOL v38 = __OFADD__(v39, v55);
          v39 += v55;
          if (v38) {
            goto LABEL_69;
          }
          if (v39 <= v87) {
            int64_t v23 = v40;
          }
          if (v39 < v87)
          {
            int64_t v40 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_70;
            }
            if (v40 < v86) {
              continue;
            }
          }
LABEL_46:
          int64_t v40 = v23 + 1;
          unint64_t v57 = v79;
          goto LABEL_48;
        }
      }
      unint64_t v57 = v23;
LABEL_48:
      char v32 = v88;
      uint64_t v58 = *v88;
      Swift::UInt64 v59 = v88[1];
      uint64_t v60 = v88[2];
      swift_retain();
      swift_retain();
      unint64_t v61 = v57;
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v58, v59, v60, v57, v97);
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v58, v59, v60, v23, &v99);
      uint64_t v62 = v98;
      uint64_t v63 = *(void *)(*(void *)(v97[3] + 96) + 16);
      BOOL v38 = __OFADD__(v98, v63);
      uint64_t v64 = v98 + v63;
      if (v38) {
        goto LABEL_75;
      }
      if (v64 < v98) {
        goto LABEL_76;
      }
      uint64_t v65 = *(void *)(*(void *)(v100 + 96) + 16);
      uint64_t v66 = v101 + v65;
      if (__OFADD__(v101, v65)) {
        goto LABEL_77;
      }
      if (v66 < v101) {
        goto LABEL_78;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
      }
      unint64_t v68 = v80[2];
      unint64_t v67 = v80[3];
      if (v68 >= v67 >> 1) {
        double v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v80);
      }
      uint64_t v69 = v80;
      v80[2] = v68 + 1;
      uint64_t v70 = &v69[4 * v68];
      v70[4] = v61;
      v70[5] = v62;
      v70[6] = v40;
      v70[7] = v66;
      outlined release of Text.Effect.BaseFragment((uint64_t)&v99);
      outlined release of Text.Effect.BaseFragment((uint64_t)v97);
      int64_t v24 = v86;
      if (v86 <= v23) {
        goto LABEL_79;
      }
      if (__OFSUB__(v86, v40)) {
        goto LABEL_80;
      }
      int64_t v23 = v40;
      if (v86 == v40) {
        return v80;
      }
    }
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v17, type metadata accessor for Text.Effect.BaseContent);
  specialized BidirectionalCollection.last.getter((uint64_t)&v99);
  if (v99)
  {
    uint64_t v27 = v101;
    double v20 = *(uint64_t **)(*(void *)(v100 + 96) + 16);
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v99);
    unint64_t v26 = (char *)v20 + v27;
    if (__OFADD__(v27, v20))
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if ((uint64_t)v26 < v27)
    {
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v26 = 0;
  }
  uint64_t v71 = *v17;
  Swift::UInt64 v72 = v17[1];
  uint64_t v73 = v17[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v71 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v72, v73);
    if ((v74 & 1) == 0)
    {
LABEL_87:
      swift_release();
      goto LABEL_88;
    }
    swift_endAccess();
    double v20 = v17;
    goto LABEL_64;
  }
LABEL_88:
  Swift::Double result = (void *)swift_endAccess();
  __break(1u);
  return result;
}

SwiftUI::Spring __swiftcall Spring.scaledResponse(_:)(Swift::Double a1)
{
  double v3 = v2[1];
  double v4 = -*v2;
  if (*v2 >= 0.0) {
    double v4 = *v2;
  }
  double v5 = 6.28318531 / sqrt(v3 * v3 + *v2 * v4);
  *(double *)&uint64_t v6 = v5 * a1;
  double v7 = v3 * 0.5 * v5 / 3.14159265;
  *(void *)&v8.f64[0] = qword_2461CB510[v7 > 1.0];
  v8.f64[1] = v7;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(0x401921FB54442D18, 0);
  v9.f64[0] = sqrt(vabdd_f64(1.0, v7 * v7));
  float64x2_t v10 = vmulq_f64(v8, v9);
  float64x2_t v11 = vdivq_f64(v10, (float64x2_t)vdupq_lane_s64(v6, 0));
  *(float64x2_t *)uint64_t v1 = v11;
  *(void *)(v1 + 16) = 0x3FF0000000000000;
  result._mass = v9.f64[0];
  result.decayConstant = v10.f64[0];
  result.angularFrequencCGFloat y = v11.f64[0];
  return result;
}

uint64_t protocol witness for Text.Effect.DurationProvider.duration.getter in conformance Text.Effect.Timing()
{
  return *(void *)v0;
}

unint64_t protocol witness for Text.Effect.DurationProvider.animationInterval(for:) in conformance Text.Effect.Timing(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (*(void *)(v2 + 16) > result) {
      return *(void *)(v2 + 16 * result + 32);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Text.Effect.DurationProvider.chunks.getter in conformance Text.Effect.Timing()
{
  return swift_bridgeObjectRetain();
}

void Text.Effect.Timing.Chunk.computeInfos(configuration:chunk:content:)(uint64_t a1, unint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v96 = a6;
  unint64_t v88 = a2;
  double v95 = *(double *)&a1;
  uint64_t v11 = type metadata accessor for FragmentRangeSequence(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  uint64_t v16 = (int *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (uint64_t *)((char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  double v20 = (char *)&v87 - v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x263F8EE78];
  *uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v92 = (void **)v6;
  swift_bridgeObjectRelease();
  _OWORD v6[2] = v21;
  uint64_t v22 = v96;
  Text.Effect.FractionalIndexFunction.summary(of:content:)(a2, a3, a4, a5, v96, *(unsigned char *)(*(void *)&v95 + 112), v97);
  double v94 = v97[0];
  double v95 = v97[1];
  char v23 = v98;
  outlined init with copy of Text.Effect.BaseContent(v22, (uint64_t)v14, type metadata accessor for Text.Effect.BaseContent);
  int64_t v24 = &v14[*(int *)(v12 + 28)];
  unint64_t v25 = v88;
  *(void *)int64_t v24 = v88;
  *((void *)v24 + 1) = a3;
  unint64_t v26 = (uint64_t *)&v14[*(int *)(v12 + 32)];
  *unint64_t v26 = a4;
  v26[1] = a5;
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v14, (uint64_t)v20, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v27 = &v20[v16[7]];
  *(void *)uint64_t v27 = v25;
  *((void *)v27 + 1) = a3;
  uint64_t v28 = (uint64_t *)&v20[v16[8]];
  *uint64_t v28 = a4;
  v28[1] = a5;
  uint64_t v91 = v28;
  uint64_t v29 = v16[9];
  uint64_t v90 = v20;
  uint64_t v30 = (unint64_t *)&v20[v29];
  *uint64_t v30 = v25;
  v30[1] = a3;
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v14, type metadata accessor for FragmentRangeSequence);
  double v31 = v94;
  double v32 = v95 - v94;
  uint64_t v33 = *(void *)&v95 - *(void *)&v94;
  BOOL v34 = __OFSUB__(*(void *)&v95, *(void *)&v94);
  LODWORD(v96) = v34;
  *(void *)&v95 -= *(void *)&v94;
  double v35 = (double)(v33 - 1);
  for (i = v30; ; uint64_t v30 = i)
  {
    unint64_t v36 = *v30;
    uint64_t v37 = v91;
    uint64_t v38 = *v91;
    if ((uint64_t)*v30 >= *v91)
    {
      if (__OFSUB__(v38, v36)) {
        goto LABEL_86;
      }
      if (v38 != v36 || (uint64_t)v30[1] >= v91[1])
      {
        _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v90, type metadata accessor for FragmentRangeSequence.Iterator);
        return;
      }
    }
    uint64_t v39 = v89;
    outlined init with copy of Text.Effect.BaseContent((uint64_t)v90, (uint64_t)v89, type metadata accessor for FragmentRangeSequence.Iterator);
    uint64_t v40 = *v39;
    Swift::UInt64 v41 = v39[1];
    uint64_t v42 = v39[2];
    swift_retain();
    swift_retain();
    uint64_t v43 = v40;
    char v44 = i;
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v43, v41, v42, v36, v97);
    _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v39, type metadata accessor for Text.Effect.BaseContent);
    unint64_t v45 = *v44;
    if (__OFSUB__(*v37, *v44)) {
      break;
    }
    if (*v37 == *v44)
    {
      uint64_t v46 = v44[1];
      uint64_t v47 = v37[1];
      if (v47 < v46) {
        goto LABEL_87;
      }
      uint64_t v48 = v101;
      uint64_t v49 = v99;
      uint64_t v50 = *(void *)(*(void *)(v99 + 96) + 16);
      BOOL v54 = __OFADD__(v101, v50);
      uint64_t v51 = v101 + v50;
      char v52 = v54;
    }
    else
    {
      uint64_t v48 = v101;
      uint64_t v49 = v99;
      uint64_t v53 = *(void *)(*(void *)(v99 + 96) + 16);
      BOOL v54 = __OFADD__(v101, v53);
      uint64_t v51 = v101 + v53;
      char v52 = v54;
      if (v54) {
        goto LABEL_88;
      }
      uint64_t v46 = v44[1];
      if (v51 < v101 || v51 < v46) {
        goto LABEL_89;
      }
      uint64_t v47 = v51;
    }
    if (v52) {
      goto LABEL_78;
    }
    if (v51 < v48) {
      goto LABEL_79;
    }
    v44[1] = v51;
    BOOL v54 = __OFADD__(v45, 1);
    unint64_t v56 = v45 + 1;
    if (v54) {
      goto LABEL_80;
    }
    *char v44 = v56;
    if (__OFSUB__(v47, v46)) {
      goto LABEL_81;
    }
    if (v47 != v46)
    {
      if (v47 < v46) {
        goto LABEL_90;
      }
      uint64_t v58 = *v92;
      while (v46 < v47)
      {
        uint64_t v59 = v46 + 1;
        if (v23 < 0)
        {
          double v60 = 0.0;
          if (v32 > 0.0)
          {
            Text.Effect.BaseFragment.typographicBounds(for:)(v46, v46 + 1, (uint64_t)v102);
            *(void *)&v106.origin.CGFloat x = v102[0];
            *(void *)&v106.size.CGFloat width = v102[2];
            v106.origin.CGFloat y = *(double *)&v102[1] - v103;
            v106.size.CGFloat height = v103 + v104;
            double v61 = (CGRectGetMidX(v106) - v31) / v32;
            if (v61 < 0.0) {
              double v61 = 0.0;
            }
            if (v61 > 1.0) {
              double v61 = 1.0;
            }
            if (v23) {
              double v60 = 1.0 - v61;
            }
            else {
              double v60 = v61;
            }
          }
        }
        else
        {
          if (v96) {
            goto LABEL_75;
          }
          double v60 = 0.0;
          if (*(uint64_t *)&v95 >= 2)
          {
            if (__OFSUB__(v46, *(void *)&v94)) {
              goto LABEL_76;
            }
            double v60 = (double)(v46 - *(void *)&v94) / v35;
          }
        }
        unint64_t v62 = v46 - v48;
        if (__OFSUB__(v46, v48)) {
          goto LABEL_70;
        }
        if ((v62 & 0x8000000000000000) != 0) {
          goto LABEL_71;
        }
        uint64_t v63 = *(void *)(v49 + 96);
        if (v62 >= *(void *)(v63 + 16)) {
          goto LABEL_72;
        }
        uint64_t v64 = v63 + 24 * v62;
        CFIndex v65 = *(void *)(v64 + 32);
        uint64_t v66 = *(void *)(v64 + 40);
        CFStringRef v67 = (id)CFAttributedStringGetString(*(CFAttributedStringRef *)(v49 + 80));
        if (__OFSUB__(v66, v65)) {
          goto LABEL_73;
        }
        unint64_t v68 = (__CFString *)v67;
        v105.location = v65;
        v105.length = v66 - v65;
        CFStringRef v69 = CFStringCreateWithSubstring(0, v67, v105);
        if (!v69) {
          goto LABEL_91;
        }
        uint64_t v70 = (__CFString *)v69;
        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v73 = v72;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58[2] + 1, 1, v58);
        }
        unint64_t v75 = v58[2];
        unint64_t v74 = v58[3];
        if (v75 >= v74 >> 1) {
          uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v58);
        }
        uint64_t v76 = v100;
        v58[2] = v75 + 1;
        CGRect v77 = (double *)&v58[4 * v75];
        v77[4] = v60;
        *((void *)v77 + 5) = v71;
        *((void *)v77 + 6) = v73;
        *((void *)v77 + 7) = v76;
        if (__OFSUB__(v47, v59)) {
          goto LABEL_74;
        }
        uint64_t v46 = v59;
        if (v47 == v59)
        {
          unint64_t v57 = v92;
          *uint64_t v92 = v58;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      break;
    }
    unint64_t v57 = v92;
    uint64_t v58 = *v92;
LABEL_58:
    uint64_t v78 = *(void *)(*(void *)(v49 + 96) + 16);
    BOOL v54 = __OFADD__(v48, v78);
    uint64_t v79 = v48 + v78;
    if (v54) {
      goto LABEL_82;
    }
    uint64_t v80 = v79 - v48;
    if (__OFSUB__(v79, v48)) {
      goto LABEL_83;
    }
    uint64_t v81 = v58[2];
    uint64_t v82 = v81 - v80;
    if (__OFSUB__(v81, v80)) {
      goto LABEL_84;
    }
    if (v79 < v48 || v81 < v82) {
      goto LABEL_85;
    }
    uint64_t v83 = v57[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
    }
    unint64_t v85 = v83[2];
    unint64_t v84 = v83[3];
    if (v85 >= v84 >> 1) {
      uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, v83);
    }
    v83[2] = v85 + 1;
    int64_t v86 = &v83[2 * v85];
    v86[4] = v82;
    v86[5] = v81;
    outlined release of Text.Effect.BaseFragment((uint64_t)v97);
    v57[2] = v83;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
}

uint64_t Text.Effect.Timing.Chunk.computeTimings(configuration:lineCoverage:spring:from:)(uint64_t a1, Swift::Double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  long long v158 = *(_OWORD *)a1;
  char v159 = *(unsigned char *)(a1 + 16);
  uint64_t v133 = a4;
  unint64_t v7 = *(void *)(a4 + 16);
  outlined init with take of Text.Effect.DurationFunction.Storage(&v158, (uint64_t)&v160);
  outlined init with take of Text.Effect.DurationFunction.Storage(&v160, (uint64_t)v161);
  double v8 = v161[0];
  if (v162 == 1)
  {
    double v9 = 3.0 / ((double)(uint64_t)v7 + 2.0);
    double v10 = 1.0 - v9;
    if (v9 > 1.0) {
      double v10 = 0.0;
    }
    if (v9 < 0.0) {
      double v11 = 1.0;
    }
    else {
      double v11 = v10;
    }
    double v8 = (1.0 - v11) * v161[0] + v11 * v161[1];
  }
  *(double *)(v4 + 24) = v8;
  if (v7 < 2)
  {
    double v12 = 0.0;
    double v13 = 1.0;
  }
  else
  {
    double v12 = Text.Effect.ClusterSeparationFunction.separation(clusterCount:lineCoverage:)(v7, a2);
    double v13 = 1.0 - v12 + v12 * (1.0 / (double)*(uint64_t *)(*(void *)v4 + 16));
  }
  outlined retain of Text.Effect.Timing.Configuration(v6);
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO6TimingV9GlyphInfoVG_Sds5NeverOTg503_s7d3UI4f5VAAE6g2O6h113V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09Uniti43E0VGAG13ConfigurationV_SdAA6SpringVSayAG0W4J14VGtFSdAXXEfU0_AL13ConfigurationVSdTf1cn_nTf4ngn_n(v133, v6, v13);
  outlined release of Text.Effect.Timing.Configuration(v6);
  uint64_t v15 = (void *)specialized Array.init(repeating:count:)(v7, 0.0);
  uint64_t v128 = v4;
  unint64_t v16 = *(unint64_t *)(v4 + 16);
  uint64_t v131 = *(void *)(v16 + 16);
  if (!v131)
  {
    uint64_t v135 = (void *)MEMORY[0x263F8EE78];
LABEL_79:
    char v156 = *(unsigned char *)(v6 + 40);
    long long v155 = *(_OWORD *)(v6 + 24);
    unint64_t v62 = *(void *)(v16 + 16);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v155, (uint64_t)&v157);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v157, (uint64_t)&v163);
    if (!v165)
    {
      double v12 = v163;
      if (!v62) {
        goto LABEL_138;
      }
LABEL_86:
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      }
      uint64_t v64 = 0;
      uint64_t v65 = *(void *)(v16 + 16);
      uint64_t v66 = v135 + 4;
      double v67 = 0.0;
      while (1)
      {
        if (v64 == v65) {
          goto LABEL_166;
        }
        unint64_t v68 = (int64_t *)(v16 + 32 + 16 * v64);
        int64_t v70 = *v68;
        int64_t v69 = v68[1];
        if (v64)
        {
          if ((unint64_t)(v64 - 1) >= v135[2]) {
            goto LABEL_171;
          }
          double v67 = v67 + v12 * *(double *)&v66[v64 - 1];
        }
        if (v69 != v70)
        {
          if (v69 < v70) {
            goto LABEL_172;
          }
          unint64_t v71 = v69 - v70;
          if (v69 <= v70) {
            goto LABEL_173;
          }
          if (v70 < 0) {
            goto LABEL_174;
          }
          unint64_t v72 = v15[2];
          if (v70 >= v72 || v69 - 1 >= v72) {
            goto LABEL_175;
          }
          if (v71 >= 4)
          {
            int64_t v73 = v70 + (v71 & 0xFFFFFFFFFFFFFFFCLL);
            float64x2_t v74 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v67, 0);
            unint64_t v75 = (float64x2_t *)&v15[v70 + 6];
            unint64_t v76 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v77 = vaddq_f64(v74, *v75);
              v75[-1] = vaddq_f64(v74, v75[-1]);
              *unint64_t v75 = v77;
              v75 += 2;
              v76 -= 4;
            }
            while (v76);
            if (v71 == (v71 & 0xFFFFFFFFFFFFFFFCLL)) {
              goto LABEL_89;
            }
          }
          else
          {
            int64_t v73 = v70;
          }
          int64_t v78 = v69 - v73;
          uint64_t v79 = (double *)&v15[v73 + 4];
          do
          {
            *uint64_t v79 = v67 + *v79;
            ++v79;
            --v78;
          }
          while (v78);
        }
LABEL_89:
        if (++v64 == v62) {
          goto LABEL_137;
        }
      }
    }
    if (v165 == 1)
    {
      uint64_t v63 = 5;
      if (v62 > 5) {
        uint64_t v63 = v62;
      }
      double v12 = (-5.0 / (double)v63 + 1.0) * v163 + (1.0 - (-5.0 / (double)v63 + 1.0)) * v164;
      if (!v62)
      {
LABEL_138:
        int64_t v100 = v15[2];
        uint64_t v101 = MEMORY[0x263F8EE78];
        if (v100)
        {
          uint64_t v102 = *(void *)(v14 + 16);
          if (v102)
          {
            double v103 = (double *)(v15 + 4);
            double v104 = (double *)(v14 + 32);
            uint64_t v105 = v102 - 1;
            int64_t v106 = v100 - 1;
            double v107 = 0.0;
            do
            {
              double v108 = *v103++;
              double v109 = v108;
              double v110 = *v104++;
              double v111 = v109 + v110;
              if (v107 <= v111) {
                double v107 = v111;
              }
              if (!v106) {
                break;
              }
              uint64_t v112 = v105--;
              --v106;
            }
            while (v112);
          }
          else
          {
            double v107 = 0.0;
          }
          uint64_t v154 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
          uint64_t v116 = 0;
          uint64_t v113 = v154;
          unint64_t v117 = *(void *)(v154 + 16);
          do
          {
            double v118 = *(double *)&v15[v116 + 4];
            uint64_t v154 = v113;
            unint64_t v119 = *(void *)(v113 + 24);
            if (v117 >= v119 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v117 + 1, 1);
              uint64_t v113 = v154;
            }
            ++v116;
            *(void *)(v113 + 16) = v117 + 1;
            *(double *)(v113 + 8 * v117++ + 32) = v118 / v107;
          }
          while (v100 != v116);
          swift_bridgeObjectRelease();
          int64_t v114 = *(void *)(v14 + 16);
          if (v114) {
            goto LABEL_154;
          }
        }
        else
        {
          double v107 = 0.0;
          uint64_t v113 = MEMORY[0x263F8EE78];
          int64_t v114 = *(void *)(v14 + 16);
          if (v114)
          {
LABEL_154:
            uint64_t v154 = v101;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
            uint64_t v120 = 0;
            uint64_t v115 = v154;
            unint64_t v121 = *(void *)(v154 + 16);
            do
            {
              double v122 = *(double *)(v14 + 8 * v120 + 32);
              uint64_t v154 = v115;
              unint64_t v123 = *(void *)(v115 + 24);
              if (v121 >= v123 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v121 + 1, 1);
                uint64_t v115 = v154;
              }
              ++v120;
              *(void *)(v115 + 16) = v121 + 1;
              *(double *)(v115 + 8 * v121++ + 32) = v122 / v107;
            }
            while (v114 != v120);
            swift_bridgeObjectRelease();
            goto LABEL_159;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v115 = MEMORY[0x263F8EE78];
LABEL_159:
        uint64_t v124 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_7SwiftUI4TextVAJE6EffectO6TimingV09UnitGlyphJ0Vs5NeverOTg506_sS2d7f3UI4h5VAAE6i2O6j3V09kl19E0VIgyyd_Sd_SdtAIs5m149OIegnrzr_TR03_s7a3UI4c5VAAE6d2O6e109V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09fG65t21VGAG13ConfigurationV_v31AA6SpringVSayAG0W4InfoVGtFAQSd_W16XEfU5_Tf3nnnpf_nTf1cn_n(v113, v115);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v124;
      }
      goto LABEL_86;
    }
    if (!v62) {
      goto LABEL_138;
    }
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
    }
    uint64_t v80 = 0;
    uint64_t v81 = *(void *)(v16 + 16);
    uint64_t v82 = v15 + 4;
    while (1)
    {
      if (v80 == v81) {
        goto LABEL_176;
      }
      uint64_t v83 = (int64_t *)(v16 + 32 + 16 * v80);
      int64_t v85 = *v83;
      int64_t v84 = v83[1];
      if (v80 && (v87 = *(v83 - 2), uint64_t v86 = *(v83 - 1), v87 != v86))
      {
        if (v87 >= v86) {
          goto LABEL_183;
        }
        BOOL v89 = v86 < 1;
        unint64_t v91 = v86 - 1;
        if (v89) {
          goto LABEL_184;
        }
        if (v91 >= v15[2]) {
          goto LABEL_185;
        }
        if (v91 >= *(void *)(v14 + 16)) {
          goto LABEL_186;
        }
        if (v84 == v85) {
          goto LABEL_112;
        }
        double v88 = *(double *)&v82[v91] + v12 * *(double *)(v14 + 32 + 8 * v91);
        unint64_t v90 = v84 - v85;
        BOOL v89 = v84 <= v85;
        if (v84 < v85) {
          goto LABEL_179;
        }
      }
      else
      {
        double v88 = 0.0;
        if (v84 == v85) {
          goto LABEL_112;
        }
        unint64_t v90 = v84 - v85;
        BOOL v89 = v84 <= v85;
        if (v84 < v85) {
          goto LABEL_179;
        }
      }
      if (v89) {
        goto LABEL_180;
      }
      if (v85 < 0) {
        goto LABEL_181;
      }
      unint64_t v92 = v15[2];
      if (v85 >= v92 || v84 - 1 >= v92) {
        goto LABEL_182;
      }
      if (v90 >= 4)
      {
        int64_t v93 = v85 + (v90 & 0xFFFFFFFFFFFFFFFCLL);
        float64x2_t v94 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v88, 0);
        double v95 = (float64x2_t *)&v15[v85 + 6];
        unint64_t v96 = v90 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v97 = vaddq_f64(v94, *v95);
          v95[-1] = vaddq_f64(v94, v95[-1]);
          float64x2_t *v95 = v97;
          v95 += 2;
          v96 -= 4;
        }
        while (v96);
        if (v90 == (v90 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_112;
        }
      }
      else
      {
        int64_t v93 = v85;
      }
      uint64_t v98 = v84 - v93;
      uint64_t v99 = (double *)&v82[v93];
      do
      {
        double *v99 = v88 + *v99;
        ++v99;
        --v98;
      }
      while (v98);
LABEL_112:
      if (++v80 == v62)
      {
LABEL_137:
        swift_bridgeObjectRelease();
        goto LABEL_138;
      }
    }
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_187:
  }
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
  unint64_t v17 = 0;
  unint64_t v130 = v16 + 32;
  uint64_t v136 = v133 + 32;
  uint64_t v144 = v14 + 32;
  unsigned int v145 = v15 + 4;
  int64x2_t v127 = (int64x2_t)xmmword_24619B550;
  uint64_t v135 = (void *)MEMORY[0x263F8EE78];
  unint64_t v129 = v16;
  uint64_t v140 = v15;
  uint64_t v139 = v14;
  uint64_t v138 = v6;
  unint64_t v137 = v7;
  while (1)
  {
    if (v17 >= *(void *)(v16 + 16)) {
      goto LABEL_164;
    }
    uint64_t v18 = (void *)(v130 + 16 * v17);
    uint64_t v20 = *v18;
    int64_t v19 = v18[1];
    uint64_t v21 = v19 - *v18;
    if (__OFSUB__(v19, *v18)) {
      goto LABEL_165;
    }
    unint64_t v134 = v17;
    if (!v21)
    {
      *(double *)&unint64_t v16 = MEMORY[0x263F8EE78];
      goto LABEL_28;
    }
    if (v21 < 1) {
      break;
    }
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>);
    *(double *)&unint64_t v16 = COERCE_DOUBLE(swift_allocObject());
    int64_t v22 = _swift_stdlib_malloc_size((const void *)v16);
    uint64_t v23 = 0;
    uint64_t v24 = v22 - 32;
    if (v22 < 32) {
      uint64_t v24 = v22 - 25;
    }
    *(void *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = 2 * (v24 >> 3);
    if (v20 == v19) {
      goto LABEL_25;
    }
    if (v19 < v20) {
      goto LABEL_177;
    }
    if (v20 >= v19) {
      goto LABEL_178;
    }
    *(void *)(v16 + 32) = v20;
    if (v21 == 1)
    {
      uint64_t v23 = 1;
LABEL_25:
      if (v23 != v21) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
    unint64_t v50 = v20 + 1;
    if (v20 + 1 != v19)
    {
      uint64_t v51 = (int64_t *)(v16 + 40);
      unint64_t v52 = v19 - v20 - 2;
      if (v19 + ~v20 < v52) {
        unint64_t v52 = v19 + ~v20;
      }
      unint64_t v53 = v52 + 1;
      if (v53 >= 5)
      {
        uint64_t v56 = v53 & 3;
        if ((v53 & 3) == 0) {
          uint64_t v56 = 4;
        }
        unint64_t v57 = v53 - v56;
        uint64_t v58 = v53 - v56 + 2;
        int64_t v54 = v50 + v57;
        v51 += v57;
        int64x2_t v59 = vaddq_s64(vdupq_n_s64(v50), v127);
        double v60 = (int64x2_t *)(v16 + 56);
        do
        {
          v60[-1] = v59;
          *double v60 = vaddq_s64(v59, vdupq_n_s64(2uLL));
          int64x2_t v59 = vaddq_s64(v59, vdupq_n_s64(4uLL));
          v60 += 2;
          v57 -= 4;
        }
        while (v57);
        uint64_t v55 = v58 + v20;
      }
      else
      {
        int64_t v54 = v20 + 1;
        uint64_t v55 = v20 + 2;
      }
      while (v54 < v19)
      {
        *uint64_t v51 = v54;
        if (v19 != v55)
        {
          ++v51;
          ++v54;
          ++v55;
          if (v19 != v54) {
            continue;
          }
        }
        goto LABEL_28;
      }
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
LABEL_28:
    double v163 = *(double *)&v16;
    uint64_t v25 = v133;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v163, v25);
    swift_bridgeObjectRelease_n();
    unint64_t v16 = *(unint64_t *)(*(void *)&v163 + 16);
    if (*(double *)&v16 == 0.0)
    {
      swift_release();
      double v45 = 0.0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    uint64_t v26 = *(void *)(v6 + 104);
    uint64_t v146 = *(void *)&v163 + 32;
    uint64_t v27 = *(void *)(v26 + 16);
    double v132 = v163;
    swift_retain();
    uint64_t v28 = 0;
    uint64_t v141 = (unint64_t *)(v26 + 48);
    double v29 = 0.0;
    unint64_t v143 = v16;
    uint64_t v142 = v27;
    do
    {
      uint64_t v30 = *(void *)(v146 + 8 * v28);
      unint64_t v31 = v30 - 1;
      if (v30 >= 1)
      {
        if (v31 >= *(void *)(v14 + 16)) {
          goto LABEL_162;
        }
        double v29 = v29 + v12 * *(double *)(v144 + 8 * v31);
      }
      if (v30 >= v7)
      {
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
        goto LABEL_163;
      }
      if (v27)
      {
        uint64_t v148 = v28;
        uint64_t v147 = v30;
        uint64_t v32 = v136 + 32 * v30;
        unint64_t v33 = *(unint64_t *)(v32 + 8);
        unint64_t v34 = *(void *)(v32 + 16);
        outlined retain of Text.Effect.Timing.Configuration(v6);
        uint64_t v152 = HIBYTE(v34) & 0xF;
        uint64_t v151 = v33 & 0xFFFFFFFFFFFFLL;
        if ((v34 & 0x2000000000000000) != 0) {
          uint64_t v35 = HIBYTE(v34) & 0xF;
        }
        else {
          uint64_t v35 = v33 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v150 = v34 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v149 = (v34 & 0xFFFFFFFFFFFFFFFLL) + 32;
        swift_bridgeObjectRetain();
        unint64_t v36 = v141;
        while (1)
        {
          if (v35)
          {
            double v40 = *((double *)v36 - 2);
            uint64_t v41 = *(v36 - 1);
            unint64_t v42 = *v36;
            _StringGuts.validateScalarIndex(_:)(0xFuLL, v33, v34);
            if ((v34 & 0x1000000000000000) != 0)
            {
              int v37 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              uint64_t v38 = swift_bridgeObjectRetain();
            }
            else if ((v34 & 0x2000000000000000) != 0)
            {
              double v163 = *(double *)&v33;
              double v164 = *(double *)&v150;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              int v37 = _decodeScalar(_:startingAt:)();
              uint64_t v38 = swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v153 = v41;
              if ((v33 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              int v37 = _decodeScalar(_:startingAt:)();
              uint64_t v38 = swift_bridgeObjectRelease();
              uint64_t v41 = v153;
            }
            LODWORD(v163) = v37;
            MEMORY[0x270FA5388](v38);
            v126[2] = &v163;
            swift_bridgeObjectRetain();
            char v39 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)v126, v41, v42);
            swift_bridgeObjectRelease_n();
            if (v39) {
              break;
            }
          }
          v36 += 3;
          if (!--v27)
          {
            double v40 = 0.0;
            break;
          }
        }
        uint64_t v6 = v138;
        outlined release of Text.Effect.Timing.Configuration(v138);
        swift_bridgeObjectRelease();
        uint64_t v15 = v140;
        uint64_t v14 = v139;
        unint64_t v7 = v137;
        unint64_t v16 = v143;
        uint64_t v27 = v142;
        uint64_t v28 = v148;
        uint64_t v30 = v147;
      }
      else
      {
        double v40 = 0.0;
      }
      if (v30 >= v15[2]) {
        goto LABEL_161;
      }
      ++v28;
      double v29 = v29 + v40;
      *(double *)&v145[v30] = v29;
    }
    while (v28 != v16);
    double v43 = v132;
    swift_release();
    if (v16 > *(void *)(*(void *)&v43 + 16)) {
      goto LABEL_168;
    }
    unint64_t v44 = *(void *)(v146 + 8 * v16 - 8);
    swift_release();
    if ((v44 & 0x8000000000000000) != 0) {
      goto LABEL_169;
    }
    if (v44 >= *(void *)(v14 + 16)) {
      goto LABEL_170;
    }
    double v45 = v29 + *(double *)(v144 + 8 * v44);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_58;
    }
LABEL_63:
    uint64_t v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v135[2] + 1, 1, v135);
LABEL_58:
    unint64_t v47 = v135[2];
    unint64_t v46 = v135[3];
    unint64_t v48 = v134;
    if (v47 >= v46 >> 1)
    {
      double v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v135);
      unint64_t v48 = v134;
      uint64_t v135 = v61;
    }
    unint64_t v17 = v48 + 1;
    uint64_t v49 = v135;
    v135[2] = v47 + 1;
    *(double *)&v49[v47 + 4] = v45;
    unint64_t v16 = v129;
    if (v17 == v131)
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = *(unint64_t *)(v128 + 16);
      goto LABEL_79;
    }
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI4TextVAFE6EffectO6TimingV9GlyphInfoVG_Sds5NeverOTg503_s7d3UI4f5VAAE6g2O6h113V5Chunk33_EA19070B6A02390AF2C0CF68765CF6B2LLV14computeTimings13configuration12lineCoverage6spring4fromSayAG09Uniti43E0VGAG13ConfigurationV_SdAA6SpringVSayAG0W4J14VGtFSdAXXEfU0_AL13ConfigurationVSdTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v14;
    double v8 = (double *)(a1 + 32);
    long long v15 = *(_OWORD *)(a2 + 80);
    char v16 = *(unsigned char *)(a2 + 96);
    outlined init with take of Text.Effect.DurationFunction.Storage(&v15, (uint64_t)&v17);
    do
    {
      double v9 = *v8;
      outlined init with take of Text.Effect.DurationFunction.Storage(&v17, (uint64_t)v18);
      double v10 = 1.0;
      if ((v19 & 1) == 0) {
        double v10 = (1.0 - v9) * v18[0] + v9 * v18[1];
      }
      unint64_t v12 = *(void *)(v14 + 16);
      unint64_t v11 = *(void *)(v14 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v14 + 16) = v12 + 1;
      *(double *)(v14 + 8 * v12 + 32) = v10 * a3;
      v8 += 4;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a5 + 32;
    unint64_t v7 = *(void *)(a5 + 16);
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    unint64_t v9 = *(void *)(v5 + 8 * a3);
    double v10 = (double *)(v6 + 32 * v9);
    uint64_t v11 = result;
    unint64_t v12 = (unint64_t *)v8;
    while (v9 < v7)
    {
      unint64_t v13 = *v12;
      if (*v12 >= v7) {
        goto LABEL_17;
      }
      double v14 = *(double *)(v6 + 32 * v13);
      if (*v10 < v14 || (*v10 == v14 ? (BOOL v15 = v9 >= v13) : (BOOL v15 = 1), !v15))
      {
        if (!v5) {
          goto LABEL_18;
        }
        *unint64_t v12 = v9;
        v12[1] = v13;
        --v12;
        if (a3 != ++v11) {
          continue;
        }
      }
      ++a3;
      v8 += 8;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  double v14;
  BOOL v15;

  if (a3 != a2)
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a5 + 32;
    unint64_t v7 = *(void *)(a5 + 16);
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    unint64_t v9 = *(void *)(v5 + 8 * a3);
    double v10 = result;
    uint64_t v11 = (unint64_t *)v8;
    while (v9 < v7)
    {
      unint64_t v12 = *v11;
      if (*v11 >= v7) {
        goto LABEL_17;
      }
      unint64_t v13 = *(double *)(v6 + 8 * v9);
      double v14 = *(double *)(v6 + 8 * v12);
      if (v13 < v14 || (v13 == v14 ? (BOOL v15 = v9 >= v12) : (BOOL v15 = 1), !v15))
      {
        if (!v5) {
          goto LABEL_18;
        }
        *uint64_t v11 = v9;
        v11[1] = v12;
        --v11;
        if (a3 != ++v10) {
          continue;
        }
      }
      ++a3;
      v8 += 8;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_168;
    }
    if (!v4) {
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    if (!v117) {
      return swift_bridgeObjectRelease_n();
    }
    goto LABEL_139;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 >= -1)
  {
    uint64_t v112 = a2;
    Swift::Int v108 = v4;
    Swift::Int v106 = v5;
    double v104 = a1;
    if (v4 >= 2)
    {
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v7;
      uint64_t v105 = v8;
      __dst = (char *)(v8 + 32);
LABEL_13:
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v107 = a2 + 32;
      uint64_t v103 = *a1 - 8;
      double v10 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v13 = v4;
      uint64_t v110 = *a1;
      while (1)
      {
        Swift::Int v14 = v11 + 1;
        if (v11 + 1 < v13)
        {
          unint64_t v15 = *(void *)(v12 + 8 * v14);
          if ((v15 & 0x8000000000000000) != 0) {
            goto LABEL_164;
          }
          unint64_t v16 = *(void *)(a2 + 16);
          if (v15 >= v16) {
            goto LABEL_165;
          }
          unint64_t v17 = *(void *)(v12 + 8 * v11);
          if (v17 >= v16) {
            goto LABEL_166;
          }
          double v18 = *(double *)(v107 + 32 * v15);
          double v19 = *(double *)(v107 + 32 * v17);
          if (v18 < v19)
          {
            Swift::Int v14 = v11 + 2;
            if (v11 + 2 < v13)
            {
              BOOL v20 = 1;
LABEL_26:
              if (v13 <= v14 + 1) {
                Swift::Int v21 = v14 + 1;
              }
              else {
                Swift::Int v21 = v13;
              }
              while (1)
              {
                unint64_t v22 = *(void *)(v12 + 8 * v14);
                if (v22 >= v16) {
                  goto LABEL_146;
                }
                if (v15 >= v16) {
                  break;
                }
                double v23 = *(double *)(v107 + 32 * v22);
                double v24 = *(double *)(v107 + 32 * v15);
                if (v23 < v24)
                {
                  if (!v20) {
                    goto LABEL_49;
                  }
                }
                else if (v23 == v24)
                {
                  if (((v20 ^ (v22 >= v15)) & 1) == 0) {
                    goto LABEL_40;
                  }
                }
                else if (v20)
                {
                  goto LABEL_41;
                }
                ++v14;
                unint64_t v15 = v22;
                if (v14 >= v13)
                {
                  Swift::Int v14 = v21;
                  goto LABEL_40;
                }
              }
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_42:
            if (v11 < v14)
            {
              Swift::Int v25 = v14 - 1;
              Swift::Int v26 = v11;
              while (1)
              {
                if (v26 != v25)
                {
                  if (!v12) {
                    goto LABEL_174;
                  }
                  uint64_t v27 = *(void *)(v12 + 8 * v26);
                  *(void *)(v12 + 8 * v26) = *(void *)(v12 + 8 * v25);
                  *(void *)(v12 + 8 * v25) = v27;
                }
                BOOL v71 = ++v26 < v25--;
                if (!v71) {
                  goto LABEL_49;
                }
              }
            }
            goto LABEL_49;
          }
          if (v18 == v19)
          {
            BOOL v20 = v15 < v17;
            Swift::Int v14 = v11 + 2;
            if (v11 + 2 < v13) {
              goto LABEL_26;
            }
LABEL_40:
            if (!v20) {
              goto LABEL_49;
            }
LABEL_41:
            if (v14 < v11) {
              goto LABEL_169;
            }
            goto LABEL_42;
          }
          Swift::Int v14 = v11 + 2;
          if (v11 + 2 < v13)
          {
            BOOL v20 = 0;
            goto LABEL_26;
          }
        }
LABEL_49:
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v11)) {
            goto LABEL_167;
          }
          if (v14 - v11 < v106)
          {
            Swift::Int v28 = v11 + v106;
            if (__OFADD__(v11, v106)) {
              goto LABEL_170;
            }
            if (v28 >= v13) {
              Swift::Int v28 = v13;
            }
            if (v28 < v11) {
              goto LABEL_171;
            }
            if (v14 != v28)
            {
              unint64_t v29 = *(void *)(a2 + 16);
              uint64_t v30 = (unint64_t *)(v103 + 8 * v14);
              do
              {
                unint64_t v31 = *(void *)(v12 + 8 * v14);
                uint64_t v32 = (double *)(v107 + 32 * v31);
                Swift::Int v33 = v11;
                unint64_t v34 = v30;
                do
                {
                  if (v31 >= v29)
                  {
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
                    goto LABEL_147;
                  }
                  unint64_t v35 = *v34;
                  if (*v34 >= v29) {
                    goto LABEL_141;
                  }
                  double v36 = *(double *)(v107 + 32 * v35);
                  if (*v32 >= v36 && (*v32 != v36 || v31 >= v35)) {
                    break;
                  }
                  if (!v12) {
                    goto LABEL_172;
                  }
                  *unint64_t v34 = v31;
                  v34[1] = v35;
                  --v34;
                  ++v33;
                }
                while (v14 != v33);
                ++v14;
                ++v30;
              }
              while (v14 != v28);
              Swift::Int v14 = v28;
            }
          }
        }
        if (v14 < v11) {
          goto LABEL_163;
        }
        Swift::Int v109 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v39 = *((void *)v10 + 2);
        unint64_t v38 = *((void *)v10 + 3);
        uint64_t v113 = v10;
        unint64_t v40 = v39 + 1;
        uint64_t v12 = v110;
        if (v39 >= v38 >> 1)
        {
          unint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v10);
          uint64_t v12 = v110;
          uint64_t v113 = v92;
        }
        *((void *)v113 + 2) = v40;
        uint64_t v41 = v113 + 32;
        unint64_t v42 = &v113[16 * v39 + 32];
        *(void *)unint64_t v42 = v11;
        *((void *)v42 + 1) = v14;
        if (v39)
        {
          double v10 = v113;
          while (1)
          {
            unint64_t v43 = v40 - 1;
            if (v40 >= 4)
            {
              unint64_t v48 = &v41[16 * v40];
              uint64_t v49 = *((void *)v48 - 8);
              uint64_t v50 = *((void *)v48 - 7);
              BOOL v54 = __OFSUB__(v50, v49);
              uint64_t v51 = v50 - v49;
              if (v54) {
                goto LABEL_148;
              }
              uint64_t v53 = *((void *)v48 - 6);
              uint64_t v52 = *((void *)v48 - 5);
              BOOL v54 = __OFSUB__(v52, v53);
              uint64_t v46 = v52 - v53;
              char v47 = v54;
              if (v54) {
                goto LABEL_149;
              }
              unint64_t v55 = v40 - 2;
              uint64_t v56 = &v41[16 * v40 - 32];
              uint64_t v58 = *(void *)v56;
              uint64_t v57 = *((void *)v56 + 1);
              BOOL v54 = __OFSUB__(v57, v58);
              uint64_t v59 = v57 - v58;
              if (v54) {
                goto LABEL_151;
              }
              BOOL v54 = __OFADD__(v46, v59);
              uint64_t v60 = v46 + v59;
              if (v54) {
                goto LABEL_154;
              }
              if (v60 >= v51)
              {
                int64_t v78 = &v41[16 * v43];
                uint64_t v80 = *(void *)v78;
                uint64_t v79 = *((void *)v78 + 1);
                BOOL v54 = __OFSUB__(v79, v80);
                uint64_t v81 = v79 - v80;
                if (v54) {
                  goto LABEL_158;
                }
                BOOL v71 = v46 < v81;
                goto LABEL_109;
              }
            }
            else
            {
              if (v40 != 3)
              {
                uint64_t v72 = *((void *)v10 + 4);
                uint64_t v73 = *((void *)v10 + 5);
                BOOL v54 = __OFSUB__(v73, v72);
                uint64_t v65 = v73 - v72;
                char v66 = v54;
                goto LABEL_103;
              }
              uint64_t v45 = *((void *)v10 + 4);
              uint64_t v44 = *((void *)v10 + 5);
              BOOL v54 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              char v47 = v54;
            }
            if (v47) {
              goto LABEL_150;
            }
            unint64_t v55 = v40 - 2;
            double v61 = &v41[16 * v40 - 32];
            uint64_t v63 = *(void *)v61;
            uint64_t v62 = *((void *)v61 + 1);
            BOOL v64 = __OFSUB__(v62, v63);
            uint64_t v65 = v62 - v63;
            char v66 = v64;
            if (v64) {
              goto LABEL_153;
            }
            double v67 = &v41[16 * v43];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v54 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v54) {
              goto LABEL_156;
            }
            if (__OFADD__(v65, v70)) {
              goto LABEL_157;
            }
            if (v65 + v70 >= v46)
            {
              BOOL v71 = v46 < v70;
LABEL_109:
              if (v71) {
                unint64_t v43 = v55;
              }
              goto LABEL_111;
            }
LABEL_103:
            if (v66) {
              goto LABEL_152;
            }
            float64x2_t v74 = &v41[16 * v43];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v54 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v54) {
              goto LABEL_155;
            }
            if (v77 < v65) {
              goto LABEL_120;
            }
LABEL_111:
            unint64_t v82 = v43 - 1;
            if (v43 - 1 >= v40) {
              goto LABEL_142;
            }
            if (!v12) {
              goto LABEL_173;
            }
            uint64_t v83 = v41;
            int64_t v84 = &v41[16 * v82];
            uint64_t v85 = *(void *)v84;
            unint64_t v86 = v43;
            uint64_t v87 = &v83[16 * v43];
            uint64_t v88 = *((void *)v87 + 1);
            uint64_t v115 = (char *)(v12 + 8 * *(void *)v84);
            BOOL v89 = (char *)(v12 + 8 * *(void *)v87);
            unint64_t v90 = v12 + 8 * v88;
            a2 = v112;
            swift_bridgeObjectRetain();
            specialized _merge<A>(low:mid:high:buffer:by:)(v115, v89, v90, __dst, v112);
            if (v117)
            {
LABEL_136:
              uint64_t v102 = v105;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_138;
            }
            swift_bridgeObjectRelease();
            if (v88 < v85) {
              goto LABEL_143;
            }
            double v10 = v113;
            if (v86 > *((void *)v113 + 2)) {
              goto LABEL_144;
            }
            *(void *)int64_t v84 = v85;
            uint64_t v41 = v113 + 32;
            *(void *)&v113[16 * v82 + 40] = v88;
            unint64_t v91 = *((void *)v113 + 2);
            if (v86 >= v91) {
              goto LABEL_145;
            }
            unint64_t v40 = v91 - 1;
            memmove(v87, v87 + 16, 16 * (v91 - 1 - v86));
            *((void *)v113 + 2) = v91 - 1;
            uint64_t v12 = v110;
            if (v91 <= 2) {
              goto LABEL_120;
            }
          }
        }
        unint64_t v40 = 1;
        double v10 = v113;
LABEL_120:
        Swift::Int v13 = v108;
        Swift::Int v11 = v109;
        if (v109 >= v108) {
          goto LABEL_124;
        }
      }
    }
    double v10 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v105 = MEMORY[0x263F8EE78];
    if (v4 == 1) {
      goto LABEL_13;
    }
    unint64_t v40 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_124:
    if (v40 >= 2)
    {
      uint64_t v93 = *v104;
      uint64_t v116 = *v104;
      while (1)
      {
        unint64_t v94 = v40 - 2;
        if (v40 < 2) {
          break;
        }
        if (!v93) {
          goto LABEL_175;
        }
        int64_t v114 = v10;
        uint64_t v95 = *(void *)&v10[16 * v94 + 32];
        uint64_t v96 = *(void *)&v10[16 * v40 + 24];
        float64x2_t v97 = (char *)(v93 + 8 * v95);
        uint64_t v98 = (char *)(v93 + 8 * *(void *)&v10[16 * v40 + 16]);
        unint64_t v99 = v93 + 8 * v96;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v97, v98, v99, __dst, v112);
        if (v117) {
          goto LABEL_136;
        }
        swift_bridgeObjectRelease();
        if (v96 < v95) {
          goto LABEL_160;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        }
        double v10 = v114;
        if (v94 >= *((void *)v114 + 2)) {
          goto LABEL_161;
        }
        int64_t v100 = &v114[16 * v94 + 32];
        *(void *)int64_t v100 = v95;
        *((void *)v100 + 1) = v96;
        unint64_t v101 = *((void *)v114 + 2);
        if (v40 > v101) {
          goto LABEL_162;
        }
        memmove(&v114[16 * v40 + 16], &v114[16 * v40 + 32], 16 * (v101 - v40));
        *((void *)v114 + 2) = v101 - 1;
        unint64_t v40 = v101 - 1;
        uint64_t v93 = v116;
        if (v101 <= 2) {
          goto LABEL_137;
        }
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_173:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_174:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_175:
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_176;
    }
LABEL_137:
    swift_bridgeObjectRelease();
    uint64_t v102 = v105;
LABEL_138:
    *(void *)(v102 + 16) = 0;
LABEL_139:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_176:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  BOOL v20;
  Swift::Int v21;
  unint64_t v22;
  double v23;
  double v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  Swift::Int v32;
  unint64_t *v33;
  unint64_t v34;
  double v35;
  double v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  Swift::Int v106;
  uint64_t v107;
  Swift::Int v108;
  Swift::Int v109;
  uint64_t v110;
  char *__dst;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_168;
    }
    if (!v4) {
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    if (!v117) {
      return swift_bridgeObjectRelease_n();
    }
    goto LABEL_139;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 >= -1)
  {
    uint64_t v112 = a2;
    Swift::Int v108 = v4;
    Swift::Int v106 = v5;
    double v104 = a1;
    if (v4 >= 2)
    {
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v7;
      uint64_t v105 = v8;
      __dst = (char *)(v8 + 32);
LABEL_13:
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v107 = a2 + 32;
      uint64_t v103 = *a1 - 8;
      double v10 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v13 = v4;
      uint64_t v110 = *a1;
      while (1)
      {
        Swift::Int v14 = v11 + 1;
        if (v11 + 1 < v13)
        {
          unint64_t v15 = *(void *)(v12 + 8 * v14);
          if ((v15 & 0x8000000000000000) != 0) {
            goto LABEL_164;
          }
          unint64_t v16 = *(void *)(a2 + 16);
          if (v15 >= v16) {
            goto LABEL_165;
          }
          unint64_t v17 = *(void *)(v12 + 8 * v11);
          if (v17 >= v16) {
            goto LABEL_166;
          }
          double v18 = *(double *)(v107 + 8 * v15);
          double v19 = *(double *)(v107 + 8 * v17);
          if (v18 < v19)
          {
            Swift::Int v14 = v11 + 2;
            if (v11 + 2 < v13)
            {
              BOOL v20 = 1;
LABEL_26:
              if (v13 <= v14 + 1) {
                Swift::Int v21 = v14 + 1;
              }
              else {
                Swift::Int v21 = v13;
              }
              while (1)
              {
                unint64_t v22 = v15;
                unint64_t v15 = *(void *)(v12 + 8 * v14);
                if (v15 >= v16) {
                  goto LABEL_146;
                }
                if (v22 >= v16) {
                  break;
                }
                double v23 = *(double *)(v107 + 8 * v15);
                double v24 = *(double *)(v107 + 8 * v22);
                if (v23 < v24)
                {
                  if (!v20) {
                    goto LABEL_49;
                  }
                }
                else if (v23 == v24)
                {
                  if (((v20 ^ (v15 >= v22)) & 1) == 0) {
                    goto LABEL_40;
                  }
                }
                else if (v20)
                {
                  goto LABEL_41;
                }
                if (++v14 >= v13)
                {
                  Swift::Int v14 = v21;
                  goto LABEL_40;
                }
              }
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_42:
            if (v11 < v14)
            {
              Swift::Int v25 = v14 - 1;
              Swift::Int v26 = v11;
              while (1)
              {
                if (v26 != v25)
                {
                  if (!v12) {
                    goto LABEL_174;
                  }
                  uint64_t v27 = *(void *)(v12 + 8 * v26);
                  *(void *)(v12 + 8 * v26) = *(void *)(v12 + 8 * v25);
                  *(void *)(v12 + 8 * v25) = v27;
                }
                BOOL v71 = ++v26 < v25--;
                if (!v71) {
                  goto LABEL_49;
                }
              }
            }
            goto LABEL_49;
          }
          if (v18 == v19)
          {
            BOOL v20 = v15 < v17;
            Swift::Int v14 = v11 + 2;
            if (v11 + 2 < v13) {
              goto LABEL_26;
            }
LABEL_40:
            if (!v20) {
              goto LABEL_49;
            }
LABEL_41:
            if (v14 < v11) {
              goto LABEL_169;
            }
            goto LABEL_42;
          }
          Swift::Int v14 = v11 + 2;
          if (v11 + 2 < v13)
          {
            BOOL v20 = 0;
            goto LABEL_26;
          }
        }
LABEL_49:
        if (v14 < v13)
        {
          if (__OFSUB__(v14, v11)) {
            goto LABEL_167;
          }
          if (v14 - v11 < v106)
          {
            Swift::Int v28 = v11 + v106;
            if (__OFADD__(v11, v106)) {
              goto LABEL_170;
            }
            if (v28 >= v13) {
              Swift::Int v28 = v13;
            }
            if (v28 < v11) {
              goto LABEL_171;
            }
            if (v14 != v28)
            {
              unint64_t v29 = *(void *)(a2 + 16);
              uint64_t v30 = (unint64_t *)(v103 + 8 * v14);
              do
              {
                unint64_t v31 = *(void *)(v12 + 8 * v14);
                uint64_t v32 = v11;
                Swift::Int v33 = v30;
                do
                {
                  if (v31 >= v29)
                  {
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
LABEL_144:
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
                    goto LABEL_147;
                  }
                  unint64_t v34 = *v33;
                  if (*v33 >= v29) {
                    goto LABEL_141;
                  }
                  unint64_t v35 = *(double *)(v107 + 8 * v31);
                  double v36 = *(double *)(v107 + 8 * v34);
                  if (v35 >= v36 && (v35 != v36 || v31 >= v34)) {
                    break;
                  }
                  if (!v12) {
                    goto LABEL_172;
                  }
                  *Swift::Int v33 = v31;
                  v33[1] = v34;
                  --v33;
                  ++v32;
                }
                while (v14 != v32);
                ++v14;
                ++v30;
              }
              while (v14 != v28);
              Swift::Int v14 = v28;
            }
          }
        }
        if (v14 < v11) {
          goto LABEL_163;
        }
        Swift::Int v109 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v39 = *((void *)v10 + 2);
        unint64_t v38 = *((void *)v10 + 3);
        uint64_t v113 = v10;
        unint64_t v40 = v39 + 1;
        uint64_t v12 = v110;
        if (v39 >= v38 >> 1)
        {
          unint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v10);
          uint64_t v12 = v110;
          uint64_t v113 = v92;
        }
        *((void *)v113 + 2) = v40;
        uint64_t v41 = v113 + 32;
        unint64_t v42 = &v113[16 * v39 + 32];
        *(void *)unint64_t v42 = v11;
        *((void *)v42 + 1) = v14;
        if (v39)
        {
          double v10 = v113;
          while (1)
          {
            unint64_t v43 = v40 - 1;
            if (v40 >= 4)
            {
              unint64_t v48 = &v41[16 * v40];
              uint64_t v49 = *((void *)v48 - 8);
              uint64_t v50 = *((void *)v48 - 7);
              BOOL v54 = __OFSUB__(v50, v49);
              uint64_t v51 = v50 - v49;
              if (v54) {
                goto LABEL_148;
              }
              uint64_t v53 = *((void *)v48 - 6);
              uint64_t v52 = *((void *)v48 - 5);
              BOOL v54 = __OFSUB__(v52, v53);
              uint64_t v46 = v52 - v53;
              char v47 = v54;
              if (v54) {
                goto LABEL_149;
              }
              unint64_t v55 = v40 - 2;
              uint64_t v56 = &v41[16 * v40 - 32];
              uint64_t v58 = *(void *)v56;
              uint64_t v57 = *((void *)v56 + 1);
              BOOL v54 = __OFSUB__(v57, v58);
              uint64_t v59 = v57 - v58;
              if (v54) {
                goto LABEL_151;
              }
              BOOL v54 = __OFADD__(v46, v59);
              uint64_t v60 = v46 + v59;
              if (v54) {
                goto LABEL_154;
              }
              if (v60 >= v51)
              {
                int64_t v78 = &v41[16 * v43];
                uint64_t v80 = *(void *)v78;
                uint64_t v79 = *((void *)v78 + 1);
                BOOL v54 = __OFSUB__(v79, v80);
                uint64_t v81 = v79 - v80;
                if (v54) {
                  goto LABEL_158;
                }
                BOOL v71 = v46 < v81;
                goto LABEL_109;
              }
            }
            else
            {
              if (v40 != 3)
              {
                uint64_t v72 = *((void *)v10 + 4);
                uint64_t v73 = *((void *)v10 + 5);
                BOOL v54 = __OFSUB__(v73, v72);
                uint64_t v65 = v73 - v72;
                char v66 = v54;
                goto LABEL_103;
              }
              uint64_t v45 = *((void *)v10 + 4);
              uint64_t v44 = *((void *)v10 + 5);
              BOOL v54 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              char v47 = v54;
            }
            if (v47) {
              goto LABEL_150;
            }
            unint64_t v55 = v40 - 2;
            double v61 = &v41[16 * v40 - 32];
            uint64_t v63 = *(void *)v61;
            uint64_t v62 = *((void *)v61 + 1);
            BOOL v64 = __OFSUB__(v62, v63);
            uint64_t v65 = v62 - v63;
            char v66 = v64;
            if (v64) {
              goto LABEL_153;
            }
            double v67 = &v41[16 * v43];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v54 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v54) {
              goto LABEL_156;
            }
            if (__OFADD__(v65, v70)) {
              goto LABEL_157;
            }
            if (v65 + v70 >= v46)
            {
              BOOL v71 = v46 < v70;
LABEL_109:
              if (v71) {
                unint64_t v43 = v55;
              }
              goto LABEL_111;
            }
LABEL_103:
            if (v66) {
              goto LABEL_152;
            }
            float64x2_t v74 = &v41[16 * v43];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v54 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v54) {
              goto LABEL_155;
            }
            if (v77 < v65) {
              goto LABEL_120;
            }
LABEL_111:
            unint64_t v82 = v43 - 1;
            if (v43 - 1 >= v40) {
              goto LABEL_142;
            }
            if (!v12) {
              goto LABEL_173;
            }
            uint64_t v83 = &v41[16 * v82];
            int64_t v84 = v41;
            uint64_t v85 = *(void *)v83;
            unint64_t v86 = v43;
            uint64_t v87 = &v84[16 * v43];
            uint64_t v88 = *((void *)v87 + 1);
            uint64_t v115 = (char *)(v12 + 8 * *(void *)v83);
            BOOL v89 = (char *)(v12 + 8 * *(void *)v87);
            unint64_t v90 = v12 + 8 * v88;
            a2 = v112;
            swift_bridgeObjectRetain();
            specialized _merge<A>(low:mid:high:buffer:by:)(v115, v89, v90, __dst, v112);
            if (v117)
            {
LABEL_136:
              uint64_t v102 = v105;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_138;
            }
            swift_bridgeObjectRelease();
            if (v88 < v85) {
              goto LABEL_143;
            }
            double v10 = v113;
            if (v86 > *((void *)v113 + 2)) {
              goto LABEL_144;
            }
            *(void *)uint64_t v83 = v85;
            uint64_t v41 = v113 + 32;
            *(void *)&v113[16 * v82 + 40] = v88;
            unint64_t v91 = *((void *)v113 + 2);
            if (v86 >= v91) {
              goto LABEL_145;
            }
            unint64_t v40 = v91 - 1;
            memmove(v87, v87 + 16, 16 * (v91 - 1 - v86));
            *((void *)v113 + 2) = v91 - 1;
            uint64_t v12 = v110;
            if (v91 <= 2) {
              goto LABEL_120;
            }
          }
        }
        unint64_t v40 = 1;
        double v10 = v113;
LABEL_120:
        Swift::Int v13 = v108;
        Swift::Int v11 = v109;
        if (v109 >= v108) {
          goto LABEL_124;
        }
      }
    }
    double v10 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v105 = MEMORY[0x263F8EE78];
    if (v4 == 1) {
      goto LABEL_13;
    }
    unint64_t v40 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_124:
    if (v40 >= 2)
    {
      uint64_t v93 = *v104;
      uint64_t v116 = *v104;
      while (1)
      {
        unint64_t v94 = v40 - 2;
        if (v40 < 2) {
          break;
        }
        if (!v93) {
          goto LABEL_175;
        }
        int64_t v114 = v10;
        uint64_t v95 = *(void *)&v10[16 * v94 + 32];
        uint64_t v96 = *(void *)&v10[16 * v40 + 24];
        float64x2_t v97 = (char *)(v93 + 8 * v95);
        uint64_t v98 = (char *)(v93 + 8 * *(void *)&v10[16 * v40 + 16]);
        unint64_t v99 = v93 + 8 * v96;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v97, v98, v99, __dst, v112);
        if (v117) {
          goto LABEL_136;
        }
        swift_bridgeObjectRelease();
        if (v96 < v95) {
          goto LABEL_160;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
        }
        double v10 = v114;
        if (v94 >= *((void *)v114 + 2)) {
          goto LABEL_161;
        }
        int64_t v100 = &v114[16 * v94 + 32];
        *(void *)int64_t v100 = v95;
        *((void *)v100 + 1) = v96;
        unint64_t v101 = *((void *)v114 + 2);
        if (v40 > v101) {
          goto LABEL_162;
        }
        memmove(&v114[16 * v40 + 16], &v114[16 * v40 + 32], 16 * (v101 - v40));
        *((void *)v114 + 2) = v101 - 1;
        unint64_t v40 = v101 - 1;
        uint64_t v93 = v116;
        if (v101 <= 2) {
          goto LABEL_137;
        }
      }
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_173:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_174:
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_175:
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_176;
    }
LABEL_137:
    swift_bridgeObjectRelease();
    uint64_t v102 = v105;
LABEL_138:
    *(void *)(v102 + 16) = 0;
LABEL_139:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_176:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

double specialized Text.Effect.Timing.Chunk.init(configuration:spring:chunk:content:)(uint64_t a1, uint64_t a2, unint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for FragmentRangeSequence(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = &v23[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v26 = MEMORY[0x263F8EE78];
  double v27 = 0.0;
  outlined init with copy of Text.Effect.BaseContent(a7, (uint64_t)v16, type metadata accessor for Text.Effect.BaseContent);
  unint64_t v17 = (unint64_t *)&v16[*(int *)(v14 + 28)];
  *unint64_t v17 = a3;
  v17[1] = a4;
  double v18 = (uint64_t *)&v16[*(int *)(v14 + 32)];
  *double v18 = a5;
  v18[1] = a6;
  specialized Sequence.reduce<A>(_:_:)((uint64_t)v16, 0.0);
  Swift::Double v20 = v19;
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0((uint64_t)v16, type metadata accessor for FragmentRangeSequence);
  Text.Effect.Timing.Chunk.computeInfos(configuration:chunk:content:)(a1, a3, a4, a5, a6, a7);
  uint64_t v21 = v24;
  swift_bridgeObjectRetain();
  Text.Effect.Timing.Chunk.computeTimings(configuration:lineCoverage:spring:from:)(a1, v20, (uint64_t)v23, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0(a7, type metadata accessor for Text.Effect.BaseContent);
  return v27;
}

uint64_t outlined init with take of Text.Effect.DurationFunction.Storage(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t outlined retain of Text.Effect.Timing.Configuration(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Effect.Timing.Configuration(uint64_t a1)
{
  return a1;
}

BOOL partial apply for specialized closure #1 in Sequence<>.contains(_:)(_DWORD *a1)
{
  return *a1 == **(_DWORD **)(v1 + 16);
}

uint64_t outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of IndexingIterator<Text.Effect.BaseContent>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s7SwiftUI21FragmentRangeSequence33_B506F8998190523A096BB0DDC674B4BFLLVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *assignWithCopy for Text.Effect.DelayFunction.Element(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Text.Effect.DelayFunction.Element(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.DelayFunction.Element()
{
  return &type metadata for Text.Effect.DelayFunction.Element;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Chunk.Fragment()
{
  return &type metadata for Text.Effect.Timing.Chunk.Fragment;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ClusterDurationFunction.Storage(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for Text.Effect.ClusterDurationFunction.Storage(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for Text.Effect.ClusterDurationFunction.Storage(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterDurationFunction.Storage()
{
  return &type metadata for Text.Effect.ClusterDurationFunction.Storage;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.UnitGlyphTiming()
{
  return &type metadata for Text.Effect.Timing.UnitGlyphTiming;
}

uint64_t getEnumTag for Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for Text.Effect.FragmentSeparationFunction.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for Text.Effect.FragmentSeparationFunction.Storage()
{
  return &unk_26FA7AF78;
}

ValueMetadata *type metadata accessor for Text.Effect.DurationFunction.Storage()
{
  return &type metadata for Text.Effect.DurationFunction.Storage;
}

void *initializeWithCopy for Text.Effect.Timing.Chunk(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.Timing.Chunk(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for Text.Effect.Timing.Chunk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Chunk()
{
  return &type metadata for Text.Effect.Timing.Chunk;
}

uint64_t initializeWithCopy for Text.Effect.Timing.GlyphInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.Timing.GlyphInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for Text.Effect.Timing.GlyphInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.GlyphInfo()
{
  return &type metadata for Text.Effect.Timing.GlyphInfo;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing.GlyphTiming(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing.GlyphTiming(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.GlyphTiming()
{
  return &type metadata for Text.Effect.Timing.GlyphTiming;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing.Fragment()
{
  return &type metadata for Text.Effect.Timing.Fragment;
}

uint64_t destroy for Text.Effect.Timing()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.Timing(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.Timing(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Text.Effect.Timing(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Timing()
{
  return &type metadata for Text.Effect.Timing;
}

ValueMetadata *type metadata accessor for Text.Effect.DurationFunction()
{
  return &type metadata for Text.Effect.DurationFunction;
}

uint64_t getEnumTagSinglePayload for Text.Effect.FragmentSeparationFunction.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.FragmentSeparationFunction.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FragmentSeparationFunction()
{
  return &type metadata for Text.Effect.FragmentSeparationFunction;
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterDurationFunction()
{
  return &type metadata for Text.Effect.ClusterDurationFunction;
}

ValueMetadata *type metadata accessor for Text.Effect.DelayFunction()
{
  return &type metadata for Text.Effect.DelayFunction;
}

void static EmptyHoverEffectContent._makeHoverEffectContent(effect:inputs:body:)()
{
}

void __swiftcall EmptyHoverEffectContent.init()()
{
}

void protocol witness for static HoverEffectContent._makeHoverEffectContent(effect:inputs:body:) in conformance EmptyHoverEffectContent()
{
}

void _HoverEffectContentInputs.base.getter()
{
}

void _HoverEffectContentInputs.base.setter()
{
}

void _HoverEffectContentInputs.base.modify()
{
}

void _HoverEffectContentInputs.isActive.getter()
{
}

void _HoverEffectContentInputs.isActive.setter()
{
}

void _HoverEffectContentInputs.init(base:isActive:)()
{
}

void _HoverEffectContentOutputs.content.getter()
{
}

void _HoverEffectContentOutputs.content.setter()
{
}

void _HoverEffectContentOutputs.init(content:)()
{
}

void HoverEffectContent.geometryEffect<A>(_:)()
{
}

void HoverEffectContent.concat<A>(_:)()
{
}

void static ModifiedContent<>._makeHoverEffectContent(effect:inputs:body:)()
{
}

void HoverEffectContentList.Item.identity.getter(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *HoverEffectContentList.Item.identity.setter(_DWORD *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*HoverEffectContentList.Item.identity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void HoverEffectContentList.Item.version.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *HoverEffectContentList.Item.version.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*HoverEffectContentList.Item.version.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t HoverEffectContentList.Item.value.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t HoverEffectContentList.Item.value.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HoverEffectContentList.Item.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_DWORD *HoverEffectContentList.Item.init(identity:version:value:)@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  *(_DWORD *)a4 = *result;
  *(void *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = v5;
  return result;
}

BOOL static HoverEffectContentList.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t HoverEffectContentList.Item.affectsBoundsForHitTesting.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  char v7 = *(unsigned char *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 88);
  char v9 = 1;
  switch(v7)
  {
    case 1:
    case 2:
    case 3:
      return v9 & 1;
    case 4:
      uint64_t v15 = *(void *)(v1 + 56);
      if (!v4)
      {
        uint64_t v14 = *(void *)(v1 + 56);
        swift_retain();
        uint64_t v10 = outlined copy of HoverEffectContentList.Effect(v3, v2, v5, 0, v6, v14, 4);
        goto LABEL_3;
      }
      uint64_t v11 = *(void *)(v1 + 56);
      swift_retain();
      uint64_t v12 = outlined copy of HoverEffectContentList.Effect(v3, v2, v5, v4, v6, v11, 4);
      uint64_t v10 = HoverEffectContentList.Item.affectsBoundsForHitTesting.getter(v12);
      if ((v10 & 1) == 0) {
        goto LABEL_3;
      }
      swift_release();
      outlined consume of HoverEffectContentList.Effect(v3, v2, v5, v4, v6, v15, 4);
      char v9 = 1;
      break;
    default:
      uint64_t v15 = *(void *)(v1 + 56);
      uint64_t v10 = swift_retain();
LABEL_3:
      if (v8)
      {
        char v9 = HoverEffectContentList.Item.affectsBoundsForHitTesting.getter(v10);
        outlined consume of HoverEffectContentList.Effect(v3, v2, v5, v4, v6, v15, v7);
        swift_release();
      }
      else
      {
        outlined consume of HoverEffectContentList.Effect(v3, v2, v5, v4, v6, v15, v7);
        char v9 = 0;
      }
      break;
  }
  return v9 & 1;
}

uint64_t outlined copy of HoverEffectContentList.Effect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7)
{
  if (a7 == 4)
  {
    swift_retain();
    return swift_retain();
  }
  else if (a7 == 3 || a7 == 2)
  {
    return outlined copy of Path.Storage(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t outlined consume of HoverEffectContentList.Effect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7)
{
  if (a7 == 4)
  {
    swift_release();
    return swift_release();
  }
  else if (a7 == 3 || a7 == 2)
  {
    return outlined consume of Path.Storage(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t HoverEffectContentList.Item.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(uint64_t *)(v3 + 24);
  uint64_t v60 = *(uint64_t *)(v3 + 16);
  uint64_t v5 = *(uint64_t *)(v3 + 32);
  uint64_t v6 = *(uint64_t *)(v3 + 40);
  double v8 = *(double *)(v3 + 48);
  uint64_t v7 = *(uint64_t *)(v3 + 56);
  char v9 = *(unsigned char *)(v3 + 64);
  uint64_t v10 = *(void *)(v3 + 72);
  double v11 = *(double *)(v3 + 80);
  CGFloat v12 = *(double *)(v3 + 88);
  switch(v9)
  {
    case 1:
      CGFloat v51 = *(double *)(v3 + 80);
      char v52 = *(unsigned char *)(v3 + 64);
      int v48 = *(void *)(v3 + 72);
      uint64_t v13 = swift_retain();
      CGFloat a = *(double *)&v60;
      double v15 = *(double *)&v4;
      CGFloat c = *(double *)&v5;
      double v17 = *(double *)&v6;
      double v18 = v8;
      CGFloat ty = *(double *)&v7;
      if (v12 == 0.0) {
        goto LABEL_15;
      }
      goto LABEL_4;
    case 2:
      swift_retain();
      uint64_t v25 = v60;
      uint64_t v26 = v4;
      uint64_t v27 = v5;
      uint64_t v28 = v6;
      unsigned __int8 v29 = LOBYTE(v8);
      uint64_t v30 = v7;
      char v31 = 2;
      goto LABEL_8;
    case 3:
      swift_retain();
      uint64_t v25 = v60;
      uint64_t v26 = v4;
      uint64_t v27 = v5;
      uint64_t v28 = v6;
      unsigned __int8 v29 = LOBYTE(v8);
      uint64_t v30 = v7;
      char v31 = 3;
LABEL_8:
      uint64_t v13 = outlined copy of HoverEffectContentList.Effect(v25, v26, v27, v28, v29, v30, v31);
      goto LABEL_9;
    case 4:
      if (*(double *)&v6 == 0.0)
      {
        char v54 = *(unsigned char *)(v3 + 64);
        outlined copy of HoverEffectContentList.Effect(v60, v4, v5, 0, LOBYTE(v8), v7, 4);
        swift_retain();
        outlined copy of HoverEffectContentList.Effect(v60, v4, v5, 0, LOBYTE(v8), v7, 4);
        char v9 = v54;
        uint64_t v13 = outlined consume of HoverEffectContentList.Effect(v60, v4, v5, 0, LOBYTE(v8), v7, 4);
LABEL_9:
        if (v12 == 0.0)
        {
          uint64_t result = outlined consume of HoverEffectContentList.Effect(v60, v4, v5, v6, LOBYTE(v8), v7, v9);
          CGFloat a = 0.0;
          CGFloat v22 = 0.0;
          CGFloat c = 0.0;
          CGFloat v23 = 0.0;
          CGFloat v24 = 0.0;
          CGFloat ty = 0.0;
          char v21 = 1;
        }
        else
        {
          LODWORD(v65[0]) = v10;
          *(double *)&v65[1] = v11;
          *(CGFloat *)&v65[2] = v12;
          char v32 = v9;
          unsigned __int8 v33 = LOBYTE(v8);
          uint64_t v56 = v7;
          HoverEffectContentList.Item.transform.getter(&v66, v13);
          uint64_t v53 = a1;
          CGFloat b = v66.b;
          CGFloat d = v66.d;
          CGFloat c = v66.c;
          char v35 = v32;
          CGFloat ty = v66.ty;
          CGFloat tx = v66.tx;
          char v21 = v67;
          unsigned __int8 v37 = v33;
          CGFloat a = v66.a;
          outlined consume of HoverEffectContentList.Effect(v60, v4, v5, v6, v37, v56, v35);
          uint64_t result = swift_release();
          CGFloat v24 = tx;
          CGFloat v23 = d;
          CGFloat v22 = b;
          a1 = v53;
        }
        goto LABEL_18;
      }
      LODWORD(v68) = *(void *)(v3 + 24);
      uint64_t v69 = v5;
      double v70 = *(double *)&v6;
      swift_retain();
      uint64_t v38 = outlined copy of HoverEffectContentList.Effect(v60, v4, v5, v6, LOBYTE(v8), v7, 4);
      CGFloat v51 = v11;
      HoverEffectContentList.Item.transform.getter(v64, v38);
      uint64_t v13 = outlined init with take of CGAffineTransform?((uint64_t)v64, (uint64_t)&v68);
      if (v74) {
        goto LABEL_9;
      }
      int v48 = v10;
      char v52 = v9;
      CGFloat a = v68;
      double v15 = *(double *)&v69;
      CGFloat c = v70;
      double v17 = v71;
      double v18 = v72;
      CGFloat ty = v73;
      if (v12 == 0.0)
      {
LABEL_15:
        uint64_t v39 = v4;
        unsigned __int8 v40 = LOBYTE(v8);
        uint64_t v41 = v7;
        double v42 = v15;
        double v43 = v17;
        double v44 = ty;
        double v45 = v18;
        uint64_t result = outlined consume of HoverEffectContentList.Effect(v60, v39, v5, v6, v40, v41, v52);
        CGFloat v24 = v45;
        CGFloat ty = v44;
        CGFloat v23 = v43;
        CGFloat v22 = v42;
      }
      else
      {
LABEL_4:
        CGFloat v47 = v18;
        CGFloat v49 = v17;
        uint64_t v55 = v7;
        CGFloat v57 = v15;
        LODWORD(v66.a) = v48;
        v66.CGFloat b = v51;
        v66.CGFloat c = v12;
        HoverEffectContentList.Item.transform.getter(v65, v13);
        outlined init with take of CGAffineTransform?((uint64_t)v65, (uint64_t)&v66);
        if (v67)
        {
          swift_release();
          uint64_t result = outlined consume of HoverEffectContentList.Effect(v60, v4, v5, v6, LOBYTE(v8), v7, v52);
          char v21 = 0;
          CGFloat v22 = v57;
          CGFloat v23 = v49;
          CGFloat v24 = v47;
          goto LABEL_18;
        }
        CGAffineTransform t1 = v66;
        t2.CGFloat a = a;
        t2.CGFloat b = v57;
        t2.CGFloat c = c;
        t2.CGFloat d = v49;
        t2.CGFloat tx = v47;
        t2.CGFloat ty = ty;
        CGAffineTransformConcat(&v61, &t1, &t2);
        CGFloat a = v61.a;
        CGFloat v59 = v61.b;
        CGFloat c = v61.c;
        CGFloat v50 = v61.d;
        CGFloat v46 = v61.tx;
        CGFloat ty = v61.ty;
        swift_release();
        uint64_t result = outlined consume of HoverEffectContentList.Effect(v60, v4, v5, v6, LOBYTE(v8), v55, v52);
        CGFloat v24 = v46;
        CGFloat v23 = v50;
        CGFloat v22 = v59;
      }
      char v21 = 0;
LABEL_18:
      *(CGFloat *)a1 = a;
      *(CGFloat *)(a1 + 8) = v22;
      *(CGFloat *)(a1 + 16) = c;
      *(CGFloat *)(a1 + 24) = v23;
      *(CGFloat *)(a1 + 32) = v24;
      *(CGFloat *)(a1 + 40) = ty;
      *(unsigned char *)(a1 + 48) = v21;
      return result;
    default:
      uint64_t v13 = swift_retain();
      goto LABEL_9;
  }
}

uint64_t HoverEffectContentList.transform.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 16))
  {
    uint64_t result = HoverEffectContentList.Item.transform.getter((uint64_t)v8);
    long long v4 = v8[0];
    long long v5 = v8[1];
    long long v6 = v8[2];
    char v7 = v9;
  }
  else
  {
    long long v4 = 0uLL;
    char v7 = 1;
    long long v5 = 0uLL;
    long long v6 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectContentList.Item(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t HoverEffectContentList.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  return swift_retain();
}

__n128 HoverEffectContentList.item.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_release();
  __n128 result = v4;
  *uint64_t v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*HoverEffectContentList.item.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 HoverEffectContentList.init(item:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

BOOL specialized static HoverEffectContentList.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  if (a1[2])
  {
    if (v2) {
      return *a1 == *a2 && a1[1] == a2[1];
    }
    swift_retain();
  }
  else if (!v2)
  {
    return 1;
  }
  swift_release();
  return 0;
}

uint64_t dispatch thunk of static HoverEffectContent._makeHoverEffectContent(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for EmptyHoverEffectContent()
{
  return &type metadata for EmptyHoverEffectContent;
}

uint64_t initializeWithCopy for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _HoverEffectContentInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for _HoverEffectContentInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HoverEffectContentInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _HoverEffectContentInputs()
{
  return &type metadata for _HoverEffectContentInputs;
}

ValueMetadata *type metadata accessor for _HoverEffectContentOutputs()
{
  return &type metadata for _HoverEffectContentOutputs;
}

ValueMetadata *type metadata accessor for HoverEffectContentList()
{
  return &type metadata for HoverEffectContentList;
}

uint64_t initializeBufferWithCopyOfBuffer for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for HoverEffectContentList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Item()
{
  return &type metadata for HoverEffectContentList.Item;
}

void *__swift_initWithCopy_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t __swift_destroy_strong()
{
  return swift_release();
}

void *__swift_assignWithCopy_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_assignWithTake_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContentList.Item.Value(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContentList.Item.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Item.Value()
{
  return &type metadata for HoverEffectContentList.Item.Value;
}

uint64_t destroy for HoverEffectContentList.Effect(uint64_t a1)
{
  return outlined consume of HoverEffectContentList.Effect(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of HoverEffectContentList.Effect(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  outlined copy of HoverEffectContentList.Effect(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of HoverEffectContentList.Effect(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for HoverEffectContentList.Effect(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of HoverEffectContentList.Effect(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContentList.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContentList.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for HoverEffectContentList.Effect(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 4u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for HoverEffectContentList.Effect(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContentList.Effect()
{
  return &type metadata for HoverEffectContentList.Effect;
}

uint64_t sub_245C57F6C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void HoverEffectContent.rendererEffect<A>(_:)()
{
}

void _OpacityEffect.opacity.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_OpacityEffect.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _OpacityEffect.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*_OpacityEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

float _OpacityEffect.effectValue(size:)@<S0>(uint64_t a1@<X8>, double a2@<D2>)
{
  float result = a2;
  *(void *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 4;
  return result;
}

uint64_t _ViewInputs.opacityAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t static _OpacityEffect.isScrapeable.getter()
{
  return 1;
}

uint64_t _OpacityEffect.scrapeableContent.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result | 0x7000000000000000;
  return result;
}

BOOL static _OpacityEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

float protocol witness for _RendererEffect.effectValue(size:) in conformance _OpacityEffect@<S0>(uint64_t a1@<X8>)
{
  float result = *v1;
  *(void *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 4;
  return result;
}

uint64_t protocol witness for _RendererEffect.scrapeableContent.getter in conformance _OpacityEffect@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a1 = result | 0x7000000000000000;
  return result;
}

double OpacityRendererEffect.opacity.getter()
{
  return *(double *)v0;
}

uint64_t (*OpacityRendererEffect.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::OpacityRendererEffect __swiftcall OpacityRendererEffect.init(opacity:)(SwiftUI::OpacityRendererEffect opacity)
{
  v1->opaciCGFloat ty = opacity.opacity;
  return opacity;
}

SwiftUI::OpacityRendererEffect __swiftcall OpacityRendererEffect.init(isHidden:)(Swift::Bool isHidden)
{
  result.opaciCGFloat ty = 1.0;
  if (isHidden) {
    result.opaciCGFloat ty = 0.0;
  }
  *uint64_t v1 = result.opacity;
  return result;
}

double OpacityRendererEffect.animatableData.getter()
{
  return *(double *)v0;
}

uint64_t (*OpacityRendererEffect.animatableData.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

float OpacityRendererEffect.effectValue(size:)@<S0>(uint64_t a1@<X8>)
{
  float result = *v1;
  *(void *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 4;
  return result;
}

uint64_t static OpacityRendererEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  _OWORD v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

float *_OpacityEffect.encode(to:)(float *result, double a2)
{
  float v2 = a2;
  if (v2 != 1.0)
  {
    uint64_t v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v4 = *((void *)v3 + 1);
    float result = (float *)(v4 + 4);
    if (__OFADD__(v4, 4))
    {
      __break(1u);
    }
    else if (*((void *)v3 + 2) >= (uint64_t)result)
    {
      *((void *)v3 + 1) = result;
      *(float *)(*(void *)v3 + v4) = v2;
      return result;
    }
    float result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *float result = v2;
  }
  return result;
}

double _OpacityEffect.init(from:)(void *a1)
{
  return specialized _OpacityEffect.init(from:)(a1);
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _OpacityEffect(float *result)
{
  float v2 = *v1;
  if (v2 != 1.0)
  {
    uint64_t v3 = result;
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v4 = *((void *)v3 + 1);
    int64_t v5 = v4 + 4;
    if (__OFADD__(v4, 4))
    {
      __break(1u);
    }
    else if (*((void *)v3 + 2) >= v5)
    {
      *((void *)v3 + 1) = v5;
      float result = (float *)(*(void *)v3 + v4);
LABEL_5:
      *float result = v2;
      return result;
    }
    float result = (float *)ProtobufEncoder.growBufferSlow(to:)(v5);
    goto LABEL_5;
  }
  return result;
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _OpacityEffect(void *a1@<X0>, double *a2@<X8>)
{
  double v4 = specialized _OpacityEffect.init(from:)(a1);
  if (!v2) {
    *a2 = v4;
  }
}

id OpacityViewResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 80);
  *(void *)(v2 + 216) = 0x3FF0000000000000;
  uint64_t v10 = v3;
  int v11 = v4;
  uint64_t v12 = v5;
  long long v7 = *(_OWORD *)(a1 + 40);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v14 = v7;
  long long v15 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 72);
  int v17 = v6;
  id v8 = specialized DefaultLayoutViewResponder.init(inputs:)(&v10, v2);
  swift_release();
  return v8;
}

double OpacityViewResponder.opacity.getter()
{
  return *(double *)(v0 + 216);
}

uint64_t OpacityViewResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*(double *)(v4 + 216) <= 0.0)
  {
    swift_beginAccess();
    uint64_t v11 = *(void *)(v4 + 40);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = v11;
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 72);
    if (!v7
      || (uint64_t v8 = *(void *)(v4 + 48), (v8 & 0x100000000) != 0)
      || (a2 & 0x100000000) != 0
      || v8 != a2)
    {
      closure #1 in MultiViewResponder.containsGlobalPoints(_:cacheKey:options:)(v4, a1, a2 | ((HIDWORD(a2) & 1) << 32), *a3, (uint64_t)v15);
      uint64_t v12 = v15[0];
      uint64_t v13 = v15[1];
      uint64_t v14 = v15[2];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v4 + 48) = a2 & 0x1FFFFFFFFLL;
      *(void *)(v4 + 56) = v12;
      *(void *)(v4 + 64) = v13;
      *(void *)(v4 + 72) = v14;
      *a4 = v12;
      a4[1] = v13;
      a4[2] = v14;
    }
    else
    {
      uint64_t v9 = *(void *)(v4 + 64);
      *a4 = *(void *)(v4 + 56);
      a4[1] = v9;
      a4[2] = v7;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t OpacityViewResponder.extendPrintTree(string:)()
{
  v0._uint64_t countAndFlagsBits = 0x207974696361706FLL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t OpacityViewResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 80);
  *(void *)(v4 + 216) = 0x3FF0000000000000;
  uint64_t v12 = v5;
  int v13 = v6;
  uint64_t v14 = v7;
  long long v9 = *(_OWORD *)(a1 + 40);
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 72);
  int v19 = v8;
  uint64_t v10 = specialized DefaultLayoutViewResponder.init(inputs:viewSubgraph:)(&v12, a2, v4);
  swift_release();
  return v10;
}

uint64_t _OpacityShapeStyle.init(style:opacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for _OpacityShapeStyle();
  *(float *)(a3 + *(int *)(result + 36)) = a4;
  return result;
}

uint64_t (*_OpacityShapeStyle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _OpacityShapeStyle.opacity.getter(uint64_t a1)
{
  return *(float *)(v1 + *(int *)(a1 + 36));
}

uint64_t _OpacityShapeStyle.opacity.setter(uint64_t result, float a2)
{
  *(float *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*_OpacityShapeStyle.opacity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  long long v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v11 = *(float *)(v3 + *(int *)(v10 + 36));
  if (v11 == 1.0)
  {
LABEL_2:
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 24) + 32);
    v12(a1, v6);
  }
  else
  {
    uint64_t v14 = *(void *)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 24))
    {
      case 1:
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)(a2 + 24) + 32))(a1, v6, *(void *)(a2 + 24));
        long long v16 = *(void **)(a1 + 32);
        int v17 = *(unsigned __int8 *)(a1 + 40);
        BOOL v18 = v17 == 1;
        if (v17 == 1) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = *(void *)(a1 + 32);
        }
        if (v17 == 1) {
          int v17 = 5;
        }
        int v37 = v17;
        if (v18) {
          Swift::Double v20 = v16;
        }
        else {
          Swift::Double v20 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v39 = v20;
        unsigned __int8 v38 = v14;
        int64_t v21 = _ShapeStyle_Pack.indices(of:)(&v38);
        if (v21 == v22) {
          goto LABEL_34;
        }
        unint64_t v23 = v21;
        int64_t v24 = v22;
        if (v22 < v21) {
          goto LABEL_39;
        }
        if (v21 >= v22) {
          goto LABEL_40;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v36 = v19;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_19;
        }
        break;
      case 2:
        (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 24) + 32))(a1, v6);
        if (*(unsigned char *)(a1 + 40) != 3) {
          return;
        }
        uint64_t v29 = *(void *)(a1 + 32);
        type metadata accessor for ColorBox<Color.OpacityColor>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
        uint64_t v30 = swift_allocObject();
        *(void *)(v30 + 16) = v29;
        *(double *)(v30 + 24) = v11;
        *(void *)(a1 + 32) = v30;
        char v31 = 3;
        goto LABEL_35;
      case 3:
        uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
        MEMORY[0x270FA5388](v32);
        uint64_t v33 = *(void *)(a2 + 24);
        *(&v35 - 4) = v6;
        *(&v35 - 3) = v33;
        *(&v35 - 2) = v3;
        type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _OpacityShapeStyle);
        ShapeStyle.mapCopiedStyle<A>(in:body:)(a1, (void (*)(uint64_t))partial apply for closure #2 in _OpacityShapeStyle._apply(to:), (uint64_t)(&v35 - 6), v6, v34);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        return;
      case 4:
        goto LABEL_2;
      case 5:
        if (!(v15 | v13 | v14)) {
          goto LABEL_2;
        }
        return;
      default:
        outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        *(void *)(a1 + 32) = 0;
        *(unsigned char *)(a1 + 40) = 0;
        return;
    }
LABEL_41:
    Swift::Double v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
LABEL_19:
    uint64_t v26 = (uint64_t)&v20[15 * v23 + 5];
    do
    {
      if ((v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v23 >= v20[2]) {
        goto LABEL_38;
      }
      uint64_t v27 = *(unsigned __int8 *)(v26 - 7);
      if (v13 <= v27 && v15 > v27) {
        closure #1 in _OpacityShapeStyle._apply(to:)(v26, v3);
      }
      ++v23;
      v26 += 120;
    }
    while (v24 != v23);
    uint64_t v19 = v36;
LABEL_34:
    outlined consume of _ShapeStyle_Shape.Result(v19, v37);
    *(void *)(a1 + 32) = v20;
    char v31 = 1;
LABEL_35:
    *(unsigned char *)(a1 + 40) = v31;
  }
}

uint64_t closure #1 in _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for _OpacityShapeStyle();
  float v5 = *(float *)(a2 + *(int *)(result + 36));
  *(float *)(a1 + 84) = v5 * *(float *)(a1 + 84);
  uint64_t v6 = *(void **)(a1 + 104);
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_17:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      uint64_t v6 = (void *)result;
    }
    unint64_t v8 = v6[2];
    unint64_t v9 = v7 - 1;
    if (v8 < v7 - 1) {
      unint64_t v9 = v6[2];
    }
    if (v9 > 1)
    {
      unint64_t v11 = v9 + 1;
      uint64_t v12 = v11 & 1;
      if ((v11 & 1) == 0) {
        uint64_t v12 = 2;
      }
      unint64_t v10 = v11 - v12;
      uint64_t v13 = (float *)(v6 + 19);
      unint64_t v14 = v10;
      do
      {
        float v15 = v5 * *v13;
        *(v13 - 18) = v5 * *(v13 - 18);
        *uint64_t v13 = v15;
        v13 += 36;
        v14 -= 2;
      }
      while (v14);
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v16 = 72 * v10 + 80;
    do
    {
      if (v10 >= v8)
      {
        __break(1u);
        goto LABEL_17;
      }
      ++v10;
      *(float *)((char *)v6 + v16) = v5 * *(float *)((char *)v6 + v16);
      v16 += 72;
    }
    while (v7 != v10);
    *(void *)(a1 + 104) = v6;
  }
  return result;
}

uint64_t static _OpacityShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _OpacityShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _OpacityShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t (*_OpacitiesShapeStyle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OpacitiesShapeStyle.opacities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _OpacitiesShapeStyle.opacities.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*_OpacitiesShapeStyle.opacities.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OpacitiesShapeStyle.init(style:opacities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _OpacitiesShapeStyle();
  *(void *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

void _OpacitiesShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v107 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v7;
  uint64_t v12 = v7[1];
  switch(*((unsigned char *)v7 + 24))
  {
    case 1:
      uint64_t v108 = v7[2];
      unsigned int v13 = v11;
      *(void *)a1 = v11;
      *(_OWORD *)(a1 + 8) = xmmword_24619B550;
      *(unsigned char *)(a1 + 24) = 1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 + 24) + 32))(a1, v5);
      unint64_t v14 = *(void **)(a1 + 32);
      int v15 = *(unsigned __int8 *)(a1 + 40);
      uint64_t v16 = (void *)MEMORY[0x263F8EE78];
      if (v15 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = v14;
      }
      int64x2_t v127 = v16;
      v122[0] = v13;
      _ShapeStyle_Pack.subscript.getter(v122, 0, (uint64_t)&v128);
      swift_bridgeObjectRelease();
      int v17 = v128;
      unsigned __int8 v18 = v129;
      uint64_t v19 = v130;
      Swift::Double v20 = (void *)v131;
      uint64_t v21 = v132;
      uint64_t v22 = v133;
      uint64_t v23 = v134;
      uint64_t v24 = v135;
      uint64_t v25 = v136;
      uint64_t v26 = v137;
      uint64_t v27 = v139;
      unsigned __int8 v28 = v140;
      uint64_t v29 = (void *)v141[0];
      uint64_t v30 = v108;
      if (v12 == v108)
      {
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v128, v129, (uint64_t)v130, v131, v132, v133, v134, v135, v136, v137, v138);
        outlined consume of GraphicsBlendMode?(v27, v28);
        swift_bridgeObjectRelease();
      }
      else
      {
        int v120 = v138;
        uint64_t v121 = v139;
        uint64_t v102 = a1;
        if (v108 < v12) {
          goto LABEL_88;
        }
        Swift::Int v106 = (_DWORD *)((char *)&v128 + 2);
        float v42 = *((float *)&v138 + 1);
        uint64_t v105 = (_WORD *)((char *)&v139 + 1);
        double v104 = (_DWORD *)((char *)v141 + 1);
        uint64_t v43 = v107;
        uint64_t v103 = v3;
        int v119 = v140;
        uint64_t v118 = v135;
        uint64_t v117 = v134;
        uint64_t v116 = v133;
        uint64_t v115 = v132;
        uint64_t v114 = v131;
        uint64_t v113 = v130;
        uint64_t v112 = v129;
        double v111 = v128;
        uint64_t v110 = v136;
        uint64_t v109 = v137;
        do
        {
          if (v12 >= v30) {
            goto LABEL_84;
          }
          uint64_t v49 = *(void *)(v3 + *(int *)(v43 + 36));
          unint64_t v50 = *(void *)(v49 + 16);
          unint64_t v51 = v50 - 1;
          if ((uint64_t)(v50 - 1) >= v12) {
            unint64_t v51 = v12;
          }
          if ((v51 & 0x8000000000000000) != 0)
          {
            double v53 = 1.0;
            uint64_t v52 = v121;
          }
          else
          {
            uint64_t v52 = v121;
            if (v51 >= v50) {
              goto LABEL_86;
            }
            double v53 = *(double *)(v49 + 8 * v51 + 32);
          }
          float v54 = v53;
          uint64_t v55 = v29[2];
          outlined copy of _ShapeStyle_Pack.Fill(v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v120);
          outlined copy of GraphicsBlendMode?(v52, v28);
          swift_bridgeObjectRetain();
          uint64_t v56 = v29;
          if (v55)
          {
            uint64_t v56 = v29;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            }
            unint64_t v57 = v56[2];
            unint64_t v58 = v55 - 1;
            if (v55 - 1 >= v57) {
              unint64_t v58 = v56[2];
            }
            if (v58 > 1)
            {
              unint64_t v60 = v58 + 1;
              uint64_t v61 = v60 & 1;
              if ((v60 & 1) == 0) {
                uint64_t v61 = 2;
              }
              unint64_t v59 = v60 - v61;
              uint64_t v62 = (float *)(v56 + 19);
              unint64_t v63 = v59;
              do
              {
                float v64 = *v62 * v54;
                *(v62 - 18) = *(v62 - 18) * v54;
                *uint64_t v62 = v64;
                v62 += 36;
                v63 -= 2;
              }
              while (v63);
            }
            else
            {
              unint64_t v59 = 0;
            }
            uint64_t v65 = 72 * v59 + 80;
            while (v59 < v57)
            {
              ++v59;
              *(float *)((char *)v56 + v65) = *(float *)((char *)v56 + v65) * v54;
              v65 += 72;
              if (v55 == v59) {
                goto LABEL_47;
              }
            }
            __break(1u);
LABEL_84:
            __break(1u);
            goto LABEL_85;
          }
LABEL_47:
          float v66 = v42 * v54;
          if (v15 == 1) {
            int v48 = v14;
          }
          else {
            int v48 = (void *)MEMORY[0x263F8EE78];
          }
          if (v15 == 1) {
            uint64_t v67 = 0;
          }
          else {
            uint64_t v67 = (uint64_t)v14;
          }
          if (v15 == 1) {
            char v68 = 5;
          }
          else {
            char v68 = v15;
          }
          int64x2_t v127 = v48;
          unint64_t v69 = v48[2];
          if (v69)
          {
            unint64_t v44 = 0;
            double v70 = (char *)v48 + 33;
            uint64_t v71 = 18;
            while (1)
            {
              unsigned int v72 = v70[v71 * 8 - 145];
              unsigned int v73 = v70[v71 * 8 - 144];
              if (v72 == v13 && v73 == v12)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
                }
                if (v44 >= v48[2]) {
                  goto LABEL_87;
                }
                uint64_t v77 = &v48[v71];
                uint64_t v78 = v48[v71 - 13];
                uint64_t v79 = v48[v71 - 12];
                uint64_t v80 = v48[v71 - 11];
                uint64_t v81 = v48[v71 - 10];
                uint64_t v82 = v48[v71 - 9];
                uint64_t v83 = v48[v71 - 8];
                uint64_t v84 = v48[v71 - 7];
                uint64_t v85 = v48[v71 - 6];
                uint64_t v86 = v48[v71 - 5];
                uint64_t v87 = v48[v71 - 4];
                char v88 = v48[v71 - 3];
                uint64_t v89 = v48[v71 - 2];
                uint64_t v90 = v112;
                *(v77 - 13) = v111;
                *(v77 - 12) = v90;
                uint64_t v91 = v114;
                *(v77 - 11) = v113;
                *(v77 - 10) = v91;
                uint64_t v92 = v116;
                *(v77 - 9) = v115;
                *(v77 - 8) = v92;
                uint64_t v93 = v118;
                *(v77 - 7) = v117;
                *(v77 - 6) = v93;
                uint64_t v94 = v109;
                *(v77 - 5) = v110;
                *(v77 - 4) = v94;
                *((unsigned char *)v77 - 24) = v120;
                *((float *)v77 - 5) = v66;
                *(v77 - 2) = v121;
                unsigned __int8 v95 = v48[v71 - 1];
                *((unsigned char *)v77 - 8) = v119;
                *uint64_t v77 = v56;
                outlined consume of _ShapeStyle_Pack.Fill(v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88);
                unsigned __int8 v96 = v95;
                uint64_t v43 = v107;
                outlined consume of GraphicsBlendMode?(v89, v96);
                swift_bridgeObjectRelease();
                outlined consume of _ShapeStyle_Shape.Result(v67, v68);
                uint64_t v3 = v103;
                goto LABEL_25;
              }
              BOOL v75 = v73 > v12 && v72 == v13;
              if (v72 > v13 || v75) {
                break;
              }
              ++v44;
              v71 += 15;
              if (v69 == v44)
              {
                unint64_t v44 = v48[2];
                uint64_t v3 = v103;
                goto LABEL_24;
              }
            }
            uint64_t v3 = v103;
            if (v69 < v44)
            {
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
              JUMPOUT(0x245C5F25CLL);
            }
          }
          else
          {
            unint64_t v44 = 0;
          }
LABEL_24:
          double v45 = v106;
          *Swift::Int v106 = v125;
          *((_WORD *)v45 + 2) = v126;
          CGFloat v46 = v105;
          *uint64_t v105 = v123;
          *((unsigned char *)v46 + 2) = v124;
          CGFloat v47 = v104;
          *double v104 = *(_DWORD *)v122;
          *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)&v122[3];
          LOBYTE(v128) = v13;
          BYTE1(v128) = v12;
          uint64_t v129 = (uint64_t)v111;
          unint64_t v130 = (void *)v112;
          uint64_t v131 = (uint64_t)v113;
          uint64_t v132 = v114;
          uint64_t v133 = v115;
          uint64_t v134 = v116;
          uint64_t v135 = v117;
          uint64_t v136 = v118;
          uint64_t v137 = v110;
          uint64_t v138 = v109;
          LOBYTE(v139) = v120;
          *((float *)&v139 + 1) = v66;
          uint64_t v140 = v121;
          LOBYTE(v141[0]) = v119;
          v141[1] = v56;
          specialized Array.replaceSubrange<A>(_:with:)(v44, v44, (uint64_t)&v128);
          outlined consume of _ShapeStyle_Shape.Result(v67, v68);
          int v48 = v127;
LABEL_25:
          ++v12;
          LOBYTE(v15) = 1;
          unint64_t v14 = v48;
          uint64_t v30 = v108;
          unsigned __int8 v28 = v119;
          uint64_t v24 = v118;
          uint64_t v23 = v117;
          uint64_t v22 = v116;
          uint64_t v21 = v115;
          Swift::Double v20 = (void *)v114;
          uint64_t v19 = v113;
          unsigned __int8 v18 = v112;
          int v17 = v111;
          uint64_t v25 = v110;
          uint64_t v26 = v109;
        }
        while (v12 != v108);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v111, v112, (uint64_t)v113, v114, v115, v116, v117, v118, v110, v109, v120);
        outlined consume of GraphicsBlendMode?(v121, v28);
        swift_bridgeObjectRelease();
        uint64_t v97 = v102;
        *(void *)(v102 + 32) = v48;
        *(unsigned char *)(v97 + 40) = 1;
      }
      return;
    case 2:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 2;
      uint64_t v31 = v107;
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)(v107 + 24) + 32))(a1, v5, v8.n128_f64[0]);
      if (*(unsigned char *)(a1 + 40) != 3) {
        return;
      }
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = *(void *)(v3 + *(int *)(v31 + 36));
      unint64_t v34 = *(void *)(v33 + 16);
      unint64_t v35 = v34 - 1;
      if ((uint64_t)(v34 - 1) >= v11) {
        unint64_t v35 = v11;
      }
      if ((v35 & 0x8000000000000000) != 0)
      {
        double v36 = 1.0;
      }
      else
      {
        if (v35 >= v34) {
          goto LABEL_89;
        }
        double v36 = *(double *)(v33 + 8 * v35 + 32);
      }
      type metadata accessor for ColorBox<Color.OpacityColor>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor, (uint64_t)&type metadata for Color.OpacityColor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      uint64_t v98 = swift_allocObject();
      *(void *)(v98 + 16) = v32;
      *(double *)(v98 + 24) = v36;
      *(void *)(a1 + 32) = v98;
      char v41 = 3;
LABEL_81:
      *(unsigned char *)(a1 + 40) = v41;
      return;
    case 3:
      uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v10, v3, v5, v8.n128_f64[0]);
      MEMORY[0x270FA5388](v37);
      uint64_t v99 = v5;
      uint64_t v100 = *(void *)(v107 + 24);
      uint64_t v101 = v38;
      type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for _OpacitiesShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _OpacitiesShapeStyle);
      ShapeStyle.mapCopiedStyle<A>(in:body:)(a1, (void (*)(uint64_t))partial apply for closure #1 in _OpacitiesShapeStyle._apply(to:), (uint64_t)(&v102 - 6), v5, v39);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      return;
    case 4:
      unsigned __int8 v40 = *(void (**)(uint64_t, uint64_t, __n128))(*(void *)(v107 + 24) + 32);
      v40(a1, v5, v8);
      return;
    case 5:
      if (v7[2] | v12 | v11) {
        return;
      }
      outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      *(void *)(a1 + 32) = 1;
      char v41 = 4;
      goto LABEL_81;
    default:
      outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      return;
  }
}

uint64_t closure #1 in _OpacitiesShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + *(int *)(type metadata accessor for _OpacitiesShapeStyle() + 36));
  *a3 = a1;
  a3[1] = v5;
  swift_retain();

  return swift_bridgeObjectRetain();
}

void OpacityTransition.body(content:phase:)(char a1@<W1>, double *a2@<X8>)
{
  double v2 = 0.0;
  if (a1 == 1) {
    double v2 = 1.0;
  }
  *a2 = v2;
}

void static OpacityTransition.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t OpacityTransition._makeContentTransition(transition:)(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _Transition_ContentTransition.Result(*((void *)a1 + 3), a1[32]);
  uint64_t v4 = &outlined read-only object #0 of OpacityTransition._makeContentTransition(transition:);
  if (v2 == 3) {
    uint64_t v4 = 0;
  }
  *((void *)a1 + 3) = v4;
  a1[32] = v2 != 3;
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance OpacityTransition(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of _Transition_ContentTransition.Result(*((void *)a1 + 3), a1[32]);
  uint64_t v4 = &outlined read-only object #0 of OpacityTransition._makeContentTransition(transition:);
  if (v2 == 3) {
    uint64_t v4 = 0;
  }
  *((void *)a1 + 3) = v4;
  a1[32] = v2 != 3;
  return result;
}

uint64_t _GraphInputs.opacityAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t key path getter for _GraphInputs.opacityAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t key path setter for _GraphInputs.opacityAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.opacityAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.opacityAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.opacityAccessibilityProvider.modify;
}

void _GraphInputs.opacityAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.OpacityAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.opacityAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void (*_ViewInputs.opacityAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t v7 = v6;
  v3[6] = 0;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  void *v3 = v5;
  v3[1] = v7;
  return _GraphInputs.opacityAccessibilityProvider.modify;
}

uint64_t sub_245C5F914()
{
  return swift_deallocObject();
}

double specialized _OpacityEffect.init(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  for (i = 1.0; v3 < v4; unint64_t v4 = a1[2])
  {
    unint64_t v6 = a1[3];
    if (v6)
    {
      unint64_t v7 = a1[4];
      if (v3 < v7) {
        goto LABEL_12;
      }
      if (v7 < v3) {
        goto LABEL_30;
      }
      a1[3] = 0;
    }
    unint64_t v6 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return i;
    }
    if (v6 <= 7) {
      goto LABEL_30;
    }
LABEL_12:
    unint64_t v8 = v6 & 7;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      if (v8 == 2)
      {
        uint64_t v10 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return i;
        }
        if (v10 < 0)
        {
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x245C5FAECLL);
        }
        uint64_t v9 = (float *)a1[1];
        if (v4 < (unint64_t)v9 + v10)
        {
LABEL_30:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return i;
        }
        a1[3] = 13;
        a1[4] = (char *)v9 + v10;
      }
      else
      {
        if (v8 != 5) {
          goto LABEL_30;
        }
        uint64_t v9 = (float *)a1[1];
      }
      unint64_t v3 = (unint64_t)(v9 + 1);
      if (v4 < (unint64_t)(v9 + 1)) {
        goto LABEL_30;
      }
      float v11 = *v9;
      a1[1] = v3;
      double i = v11;
    }
    else
    {
      switch(v6 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v1) {
            return i;
          }
          unint64_t v3 = a1[1];
          continue;
        case 1uLL:
          unint64_t v3 = a1[1] + 8;
          if (v4 < v3) {
            goto LABEL_30;
          }
          goto LABEL_4;
        case 2uLL:
          uint64_t v12 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return i;
          }
          if (v12 < 0) {
            goto LABEL_35;
          }
          unint64_t v3 = a1[1] + v12;
          if (v4 < v3) {
            goto LABEL_30;
          }
LABEL_4:
          a1[1] = v3;
          break;
        case 5uLL:
          unint64_t v3 = a1[1] + 4;
          if (v4 >= v3) {
            goto LABEL_4;
          }
          goto LABEL_30;
        default:
          goto LABEL_30;
      }
    }
  }
  a1[3] = 0;
  return i;
}

uint64_t type metadata accessor for _OpacityShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in _OpacityShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  int v6 = *(_DWORD *)(v5 + *(int *)(type metadata accessor for _OpacityShapeStyle() + 36));
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 8) = v6;

  return swift_retain();
}

uint64_t type metadata accessor for _OpacitiesShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in _OpacitiesShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _OpacitiesShapeStyle._apply(to:)(a1, *(void *)(v2 + 32), a2);
}

double sub_245C5FBA0@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245C5FBAC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t type metadata completion function for _OpacityShapeStyle()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t *initializeBufferWithCopyOfBuffer for _OpacityShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3;
  int v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v12 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t assignWithCopy for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 40) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 40) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithTake for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 32) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 32) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for _OpacityShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_DWORD *)((*(void *)(v5 + 24) + 3 + a1) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 24) + 3 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for _OpacityShapeStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFFC;
    if ((v6 & 0xFFFFFFFC) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C5FF58);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _OpacityShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C60118);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _OpacitiesShapeStyle()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t getEnumTagSinglePayload for _OpacitiesShapeStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C6029CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _OpacitiesShapeStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245C6048CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unsigned __int8 v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *unsigned __int8 v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t dispatch thunk of static OpacityAccessibilityProvider.makeOpacity(effect:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t sub_245C604C8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii()
{
  unint64_t result = lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii;
  if (!lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RectangleCornerRadii and conformance RectangleCornerRadii);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<RectangleCornerRadii>, (uint64_t (*)(void))lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii, (uint64_t)&type metadata for RectangleCornerRadii, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGRect>()
{
  if (!lazy cache variable for type metadata for AnimatableAttribute<CGRect>)
  {
    type metadata accessor for CGRect(255);
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, type metadata accessor for CGRect);
    unint64_t v0 = type metadata accessor for AnimatableAttribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<CGRect>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<Angle>, (uint64_t)&type metadata for Angle, (uint64_t)&protocol witness table for Angle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint;
  if (!lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint;
  if (!lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitPoint and conformance UnitPoint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnitPoint>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle;
  if (!lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrokeStyle and conformance StrokeStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<StrokeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle, (uint64_t)&type metadata for StrokeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle;
  if (!lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedShadowStyle and conformance ResolvedShadowStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedShadowStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle;
  if (!lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlurStyle and conformance BlurStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<BlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle, (uint64_t)&type metadata for BlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Fill>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Style>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnitRect and conformance UnitRect()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitRect and conformance UnitRect;
  if (!lazy protocol witness table cache variable for type UnitRect and conformance UnitRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitRect and conformance UnitRect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnitRect and conformance UnitRect;
  if (!lazy protocol witness table cache variable for type UnitRect and conformance UnitRect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitRect and conformance UnitRect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<UnitRect>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitRect and conformance UnitRect, (uint64_t)&type metadata for UnitRect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGSize>()
{
  if (!lazy cache variable for type metadata for AnimatableAttribute<CGSize>)
  {
    type metadata accessor for CGSize(255);
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
    unint64_t v0 = type metadata accessor for AnimatableAttribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<CGSize>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant;
  if (!lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Color.ResolvedVibrant>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant, (uint64_t)&type metadata for Color.ResolvedVibrant, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedGradient>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient, (uint64_t)&type metadata for ResolvedGradient, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewSize and conformance ViewSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewSize and conformance ViewSize;
  if (!lazy protocol witness table cache variable for type ViewSize and conformance ViewSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewSize and conformance ViewSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewSize and conformance ViewSize, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin;
  if (!lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewOrigin and conformance ViewOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewOrigin>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<_OffsetEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>);
  }
  return result;
}

void type metadata accessor for AnimatableAttribute<CGPoint>()
{
  if (!lazy cache variable for type metadata for AnimatableAttribute<CGPoint>)
  {
    type metadata accessor for CGPoint(255);
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, type metadata accessor for CGPoint);
    unint64_t v0 = type metadata accessor for AnimatableAttribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<CGPoint>);
    }
  }
}

uint64_t assignWithCopy for OpacityResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for OpacityResponderFilter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OpacityResponderFilter()
{
  return &type metadata for OpacityResponderFilter;
}

ValueMetadata *type metadata accessor for EmptyOpacityAccessibilityProvider()
{
  return &type metadata for EmptyOpacityAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.OpacityAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.OpacityAccessibilityProviderKey;
}

uint64_t _ShadowEffect.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ShadowEffect.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ShadowEffect.radius.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*_ShadowEffect.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ShadowEffect.offset.getter(double a1, double a2)
{
  return a2;
}

void _ShadowEffect.offset.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*_ShadowEffect.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ShadowEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ShadowEffect._requiresMainThread.getter()
{
  return 0;
}

double _ShadowEffect._Resolved.style.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 32);
  int v3 = *(_DWORD *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 44);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 44) = v4;
  return result;
}

double _ShadowEffect._Resolved.style.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 44);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v5;
  *(double *)(v1 + 32) = result;
  *(_DWORD *)(v1 + 40) = v3;
  *(unsigned char *)(v1 + 44) = v4;
  return result;
}

uint64_t (*_ShadowEffect._Resolved.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _ShadowEffect._Resolved.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  int8x16_t v9 = *(int8x16_t *)v1;
  __n128 v10 = *(__n128 *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v4);
    float32x4_t v5 = v11;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  float32x4_t v7 = vmulq_f32(v5, v6);
  __n128 result = v10;
  *(float32x4_t *)a1 = v7;
  *(__n128 *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  return result;
}

double key path getter for _ShadowEffect._Resolved.animatableData : _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  _ShadowEffect._Resolved.animatableData.getter((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

double _ShadowEffect._Resolved.animatableData.setter(uint64_t a1)
{
  float32x4_t v3 = *(float32x4_t *)a1;
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    float32x4_t v11 = *(float32x4_t *)a1;
    swift_once();
    v4.i64[0] = 0x3C0000003C000000;
    v4.i64[1] = 0x3C0000003C000000;
    float32x4_t v3 = v11;
  }
  float32x4_t v10 = vmulq_f32(v3, v4);
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float v5 = v10.f32[0];
    __int32 v7 = v10.i32[2];
    __int32 v6 = v10.i32[1];
    __int32 v8 = v10.i32[3];
  }
  else
  {
    char v13 = 2;
    float32x4_t v12 = v10;
    float v5 = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
  }
  *(float *)uint64_t v1 = v5;
  *(_DWORD *)(v1 + 4) = v6;
  *(_DWORD *)(v1 + 8) = v7;
  *(_DWORD *)(v1 + 12) = v8;
  double result = *(double *)(a1 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(a1 + 16);
  *(double *)(v1 + 32) = result;
  return result;
}

void (*_ShadowEffect._Resolved.animatableData.modify(void *a1))(float32x4_t **a1, char a2)
{
  float32x4_t v3 = malloc(0x48uLL);
  *a1 = v3;
  unsigned char v3[8] = v1;
  int8x16_t v9 = *(int8x16_t *)v1;
  long long v10 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v6 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v5);
    float32x4_t v6 = v11;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *(float32x4_t *)float32x4_t v3 = vmulq_f32(v6, v7);
  *((_OWORD *)v3 + 1) = v10;
  v3[4] = v4;
  return _ShadowEffect._Resolved.animatableData.modify;
}

void _ShadowEffect._Resolved.animatableData.modify(float32x4_t **a1, char a2)
{
  uint64_t v2 = *a1;
  float32x4_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2].i64[0];
  v5.i64[0] = 0x3C0000003C000000;
  v5.i64[1] = 0x3C0000003C000000;
  float32x4_t v6 = vmulq_f32(**a1, v5);
  if (a2)
  {
    if (static Color.Resolved.legacyInterpolation)
    {
      __int32 v7 = v6.i32[1];
      __int32 v9 = v6.i32[3];
      __int32 v8 = v6.i32[2];
    }
    else
    {
      float32x4_t v16 = v6;
      float32x4_t v15 = v3;
      v6.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v16.f32);
      float32x4_t v3 = v15;
    }
    char v13 = (float32x4_t *)v2[4].i64[0];
    v13->i32[0] = v6.i32[0];
    v13->i32[1] = v7;
    v13->i32[2] = v8;
    v13->i32[3] = v9;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      float32x4_t v16 = v6;
      float32x4_t v14 = v3;
      v6.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v16.f32);
      float32x4_t v3 = v14;
      v6.i32[1] = v10;
      v6.i64[1] = __PAIR64__(v12, v11);
    }
    char v13 = (float32x4_t *)v2[4].i64[0];
    *char v13 = v6;
  }
  v13[1] = v3;
  v13[2].i64[0] = v4;

  free(v2);
}

double _ShadowEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  long long v8 = v1[1];
  long long v9 = *v1;
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v4 = *((unsigned int *)v1 + 10);
  uint64_t v5 = *((unsigned __int8 *)v1 + 44);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(void *)(v6 + 48) = v3;
  *(void *)(v6 + 56) = v4 | (v5 << 32);
  double result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 128) = 0;
  *(unsigned char *)(v6 + 132) = 2;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  long long v8 = v1[1];
  long long v9 = *v1;
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v4 = *((unsigned int *)v1 + 10);
  uint64_t v5 = *((unsigned __int8 *)v1 + 44);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(void *)(v6 + 48) = v3;
  *(void *)(v6 + 56) = v4 | (v5 << 32);
  double result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 128) = 0;
  *(unsigned char *)(v6 + 132) = 2;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance _ShadowEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  _ShadowEffect._Resolved.animatableData.getter((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ShadowEffect._Resolved(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ShadowEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

BOOL static _ShadowEffect.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 == a2)
  {
    if (a3 != a6) {
      return 0;
    }
    return a5 == a8 && a4 == a7;
  }
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2);
  BOOL result = 0;
  if ((v14 & 1) != 0 && a3 == a6) {
    return a5 == a8 && a4 == a7;
  }
  return result;
}

__n128 protocol witness for EnvironmentalModifier.resolve(in:) in conformance _ShadowEffect@<Q0>(long long *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *v2;
  unint64_t v5 = v2[3];
  __n128 v10 = *(__n128 *)(v2 + 1);
  long long v11 = *a1;
  a2->n128_f32[0] = (*(float (**)(long long *))(*(void *)v4 + 104))(&v11);
  a2->n128_u32[1] = v6;
  a2->n128_u32[2] = v7;
  a2->n128_u32[3] = v8;
  __n128 result = v10;
  a2[1] = v10;
  a2[2].n128_u64[0] = v5;
  a2[2].n128_u32[2] = 1056964608;
  a2[2].n128_u8[12] = 0;
  return result;
}

uint64_t sub_245C62EB0()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for _ShadowEffect._Resolved(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _ShadowEffect._Resolved()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ShadowEffect()
{
  return &protocol witness table for _ShadowEffect._Resolved;
}

double sub_245C62FDC(uint64_t a1)
{
  return _ShadowEffect._Resolved.animatableData.setter(a1);
}

uint64_t assignWithTake for _ShadowEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShadowEffect._Resolved(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ShadowEffect._Resolved(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 45) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ShadowEffect._Resolved()
{
  return &type metadata for _ShadowEffect._Resolved;
}

uint64_t sub_245C630B4()
{
  return swift_getWitnessTable();
}

uint64_t LayoutProxyAttributes.init(layoutComputer:traitsList:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t LayoutProxyAttributes.init(traitsList:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *MEMORY[0x263F288F8];
  a2[1] = result;
  return result;
}

uint64_t LayoutProxyAttributes.init(layoutComputer:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v2 = *MEMORY[0x263F288F8];
  *a2 = result;
  a2[1] = v2;
  return result;
}

void LayoutProxyAttributes.init()(_DWORD *a1@<X8>)
{
  int v1 = *MEMORY[0x263F288F8];
  *a1 = *MEMORY[0x263F288F8];
  a1[1] = v1;
}

BOOL LayoutProxyAttributes.isEmpty.getter()
{
  return *v0 == *MEMORY[0x263F288F8] && v0[1] == *MEMORY[0x263F288F8];
}

BOOL static LayoutProxyAttributes.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

double LayoutProxy.init(context:attributes:)@<D0>(int a1@<W0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = a1;
  double result = *a2;
  *(double *)(a3 + 4) = *a2;
  return result;
}

uint64_t LayoutProxy.layoutComputer.getter@<X0>(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (long long *)AGGraphGetInputValue();
  }
  uint64_t v4 = *((void *)InputValue + 1);
  *a1 = *(void *)InputValue;
  a1[1] = v4;

  return swift_retain();
}

void LayoutProxy.traits.getter(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 8) == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
  }
  else
  {
    type metadata accessor for ViewList();
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v5);
    uint64_t v3 = v6;
    uint64_t v4 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

uint64_t LayoutProxy.ignoresAutomaticPadding.getter()
{
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (long long *)AGGraphGetInputValue();
  }
  uint64_t v2 = *(void *)InputValue;
  uint64_t v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    char v4 = (*(uint64_t (**)(void))(*(void *)v2 + 96))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

BOOL static LayoutProxy.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LayoutProxy(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t LayoutProxyCollection.init(context:attributes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(void *)(a3 + 8) = a2;
  return result;
}

uint64_t LayoutProxyCollection.startIndex.getter()
{
  return 0;
}

uint64_t LayoutProxyCollection.endIndex.getter()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

unint64_t LayoutProxyCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (*(void *)(v3 + 16) > result)
    {
      *(_DWORD *)a2 = *(_DWORD *)v2;
      *(void *)(a2 + 4) = *(void *)(v3 + 8 * result + 32);
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LayoutProxyCollection(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(*(void *)(v1 + 8) + 16))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

char *protocol witness for Collection.subscript.read in conformance LayoutProxyCollection(char *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (v3 < *(void *)(v4 + 16))
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3 + 32);
      *(_DWORD *)uint64_t result = *(_DWORD *)v2;
      *(void *)(result + 4) = v5;
      return (char *)_ViewInputs.base.modify;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance LayoutProxyCollection@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *(uint64_t **)(v2 + 8), result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(a2 + 16) = *(_DWORD *)v2;
    *(void *)(a2 + 24) = result;
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance LayoutProxyCollection(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 16);
  *a1 = 0;
  a1[1] = v2;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LayoutProxyCollection@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)(v3 + 8) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutProxyCollection@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance LayoutProxyCollection(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 8) + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void *protocol witness for Collection.index(after:) in conformance LayoutProxyCollection@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result >= *(void *)(*(void *)(v2 + 8) + 16)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance LayoutProxyCollection(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutProxyCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection;
  if (!lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutProxyCollection and conformance LayoutProxyCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutProxyCollection>(255, &lazy cache variable for type metadata for Slice<LayoutProxyCollection>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutProxyCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<LayoutProxyCollection>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LayoutProxyCollection()
{
  return lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<LayoutProxyCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<LayoutProxyCollection>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutProxyCollection> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutProxyCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<LayoutProxyCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type LayoutProxyCollection and conformance LayoutProxyCollection();
    unint64_t v7 = a3(a1, &type metadata for LayoutProxyCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

ValueMetadata *type metadata accessor for LayoutProxyAttributes()
{
  return &type metadata for LayoutProxyAttributes;
}

ValueMetadata *type metadata accessor for LayoutProxy()
{
  return &type metadata for LayoutProxy;
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutProxyCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LayoutProxyCollection()
{
  return &type metadata for LayoutProxyCollection;
}

unsigned char *RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *a3;
  *(unsigned char *)a5 = *result;
  *(_DWORD *)(a5 + 4) = a2;
  *(unsigned char *)(a5 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a5 + 12) = v5;
  *(unsigned char *)(a5 + 16) = a4;
  return result;
}

uint64_t RasterizationOptions.isAccelerated.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

uint64_t RasterizationOptions.alphaOnly.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 6) & 1;
}

uint64_t RasterizationOptions.requiresLayer.getter()
{
  return *(unsigned __int8 *)(v0 + 12) >> 7;
}

BOOL static ColorRenderingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ColorRenderingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ColorRenderingMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ColorRenderingMode.protobufValue.getter()
{
  return *v0;
}

SwiftUI::ColorRenderingMode_optional __swiftcall ColorRenderingMode.init(protobufValue:)(Swift::UInt protobufValue)
{
  char v2 = 3;
  if (protobufValue < 3) {
    char v2 = protobufValue;
  }
  *Swift::UInt v1 = v2;
  return (SwiftUI::ColorRenderingMode_optional)protobufValue;
}

uint64_t RasterizationOptions.Flags.rawValue.getter()
{
  return *v0;
}

uint64_t RasterizationOptions.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static RasterizationOptions.Flags.isAccelerated.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static RasterizationOptions.Flags.isOpaque.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static RasterizationOptions.Flags.rendersAsynchronously.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static RasterizationOptions.Flags.prefersDisplayCompositing.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static RasterizationOptions.Flags.rendersFirstFrameAsync.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static RasterizationOptions.Flags.allowsPackedDrawable.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static RasterizationOptions.Flags.alphaOnly.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static RasterizationOptions.Flags.requiresLayer.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static RasterizationOptions.Flags.rgbaContext.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static RasterizationOptions.Flags.highRes.getter(_DWORD *a1@<X8>)
{
  *a1 = 512;
}

void static RasterizationOptions.Flags.defaultFlags.getter(_DWORD *a1@<X8>)
{
  *a1 = 160;
}

uint64_t (*RasterizationOptions.colorMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RasterizationOptions.rbColorMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void RasterizationOptions.flags.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *RasterizationOptions.flags.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*RasterizationOptions.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t RasterizationOptions.maxDrawableCount.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t RasterizationOptions.maxDrawableCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*RasterizationOptions.maxDrawableCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned __int8 *(*RasterizationOptions.isAccelerated.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 12) & 1;
  return RasterizationOptions.isAccelerated.modify;
}

unsigned __int8 *RasterizationOptions.isAccelerated.modify(unsigned __int8 *result)
{
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFFE | result[8];
  return result;
}

uint64_t RasterizationOptions.isOpaque.setter(uint64_t result)
{
  if (result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

unsigned char *(*RasterizationOptions.isOpaque.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 2) != 0;
  return RasterizationOptions.isOpaque.modify;
}

unsigned char *RasterizationOptions.isOpaque.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 2;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFFD | v1;
  return result;
}

uint64_t RasterizationOptions.rendersAsynchronously.setter(uint64_t result)
{
  if (result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

unsigned char *(*RasterizationOptions.rendersAsynchronously.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 4) != 0;
  return RasterizationOptions.rendersAsynchronously.modify;
}

unsigned char *RasterizationOptions.rendersAsynchronously.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFFB | v1;
  return result;
}

uint64_t RasterizationOptions.rendersFirstFrameAsynchronously.setter(uint64_t result)
{
  if (result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

unsigned char *(*RasterizationOptions.rendersFirstFrameAsynchronously.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 0x10) != 0;
  return RasterizationOptions.rendersFirstFrameAsynchronously.modify;
}

unsigned char *RasterizationOptions.rendersFirstFrameAsynchronously.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 16;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFEF | v1;
  return result;
}

uint64_t RasterizationOptions.prefersDisplayCompositing.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 3) & 1;
}

uint64_t RasterizationOptions.prefersDisplayCompositing.setter(uint64_t result)
{
  if (result) {
    int v2 = 8;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFF7 | v2;
  return result;
}

unsigned char *(*RasterizationOptions.prefersDisplayCompositing.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 8) != 0;
  return RasterizationOptions.prefersDisplayCompositing.modify;
}

unsigned char *RasterizationOptions.prefersDisplayCompositing.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 8;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFF7 | v1;
  return result;
}

uint64_t RasterizationOptions.allowsPackedDrawable.setter(uint64_t result)
{
  if (result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

unsigned char *(*RasterizationOptions.allowsPackedDrawable.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 0x20) != 0;
  return RasterizationOptions.allowsPackedDrawable.modify;
}

unsigned char *RasterizationOptions.allowsPackedDrawable.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 32;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFDF | v1;
  return result;
}

uint64_t RasterizationOptions.alphaOnly.setter(uint64_t result)
{
  if (result) {
    int v2 = 64;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFBF | v2;
  return result;
}

unsigned char *(*RasterizationOptions.alphaOnly.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 0x40) != 0;
  return RasterizationOptions.alphaOnly.modify;
}

unsigned char *RasterizationOptions.alphaOnly.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 64;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFBF | v1;
  return result;
}

uint64_t RasterizationOptions.requiresLayer.setter(uint64_t result)
{
  if (result) {
    int v2 = 128;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFF7F | v2;
  return result;
}

unsigned char *(*RasterizationOptions.requiresLayer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(_DWORD *)(v1 + 12) & 0x80) != 0;
  return RasterizationOptions.requiresLayer.modify;
}

unsigned char *RasterizationOptions.requiresLayer.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 128;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFF7F | v1;
  return result;
}

void RasterizationOptions.encode(to:)()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((unsigned int *)v0 + 1);
  unsigned __int8 v3 = v0[8];
  Swift::UInt v4 = *((unsigned int *)v0 + 3);
  uint64_t v5 = (char)v0[16];
  if (*v0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v1);
  }
  if ((v3 & 1) == 0)
  {
    if ((v2 & 0x80000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if (v2)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v2);
    }
  }
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v4);
  }
  if (v5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v5) ^ (v5 >> 63));
  }
}

uint64_t RasterizationOptions.init(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    char v8 = 0;
    char v9 = 3;
    int v10 = 160;
    char v11 = 1;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v13 = v3[4];
        if (v5 < v13) {
          goto LABEL_14;
        }
        if (v13 < v5) {
          goto LABEL_59;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if ((unint64_t)result <= 7)
      {
LABEL_59:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch((unint64_t)result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0) {
            goto LABEL_21;
          }
          if ((result & 7) != 2) {
            goto LABEL_59;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result < 0)
          {
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            JUMPOUT(0x245C645F4);
          }
          unint64_t v14 = v3[1] + result;
          if (v6 < v14) {
            goto LABEL_59;
          }
          v3[3] = 8;
          v3[4] = v14;
LABEL_21:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result == 2) {
            char v8 = 2;
          }
          else {
            char v8 = result == 1;
          }
          break;
        case 2uLL:
          if ((result & 7) == 0) {
            goto LABEL_34;
          }
          if ((result & 7) != 2) {
            goto LABEL_59;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result < 0) {
            goto LABEL_62;
          }
          unint64_t v15 = v3[1] + result;
          if (v6 < v15) {
            goto LABEL_59;
          }
          v3[3] = 16;
          v3[4] = v15;
LABEL_34:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          uint64_t v16 = -(result & 1) ^ (result >> 1);
          v11 &= (int)v16 != v16;
          if ((int)v16 == v16) {
            int v7 = -(result & 1) ^ (result >> 1);
          }
          break;
        case 3uLL:
          if ((result & 7) == 0) {
            goto LABEL_43;
          }
          if ((result & 7) != 2) {
            goto LABEL_59;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result < 0) {
            goto LABEL_63;
          }
          unint64_t v17 = v3[1] + result;
          if (v6 < v17) {
            goto LABEL_59;
          }
          v3[3] = 24;
          v3[4] = v17;
LABEL_43:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          int v10 = result;
          break;
        case 4uLL:
          if ((result & 7) == 0) {
            goto LABEL_51;
          }
          if ((result & 7) != 2) {
            goto LABEL_59;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result < 0) {
            goto LABEL_64;
          }
          unint64_t v18 = v3[1] + result;
          if (v6 < v18) {
            goto LABEL_59;
          }
          v3[3] = 32;
          v3[4] = v18;
LABEL_51:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((-(result & 1) ^ (result >> 1)) == (char)(-(result & 1) ^ (result >> 1))) {
            char v9 = -(result & 1) ^ (result >> 1);
          }
          break;
        default:
          switch(result & 7)
          {
            case 0:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              goto LABEL_7;
            case 1:
              unint64_t v12 = v3[1] + 8;
              if (v6 >= v12) {
                goto LABEL_6;
              }
              goto LABEL_59;
            case 2:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if (result < 0) {
                goto LABEL_65;
              }
              unint64_t v12 = v3[1] + result;
              if (v6 < v12) {
                goto LABEL_59;
              }
LABEL_6:
              v3[1] = v12;
              break;
            case 5:
              unint64_t v12 = v3[1] + 4;
              if (v6 < v12) {
                goto LABEL_59;
              }
              goto LABEL_6;
            default:
              goto LABEL_59;
          }
          break;
      }
LABEL_7:
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  int v7 = 0;
  char v8 = 0;
  char v9 = 3;
  int v10 = 160;
  char v11 = 1;
LABEL_4:
  v3[3] = 0;
  *(unsigned char *)a2 = v8;
  *(_DWORD *)(a2 + 4) = v7;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  *(_DWORD *)(a2 + 12) = v10;
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RasterizationOptions()
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance RasterizationOptions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RasterizationOptions.init(from:)(a1, a2);
}

void _DrawingGroupEffect.rasterizationOptions.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 4);
  char v3 = *(unsigned char *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 12);
  char v5 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(_DWORD *)(a1 + 4) = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(unsigned char *)(a1 + 16) = v5;
}

uint64_t _DrawingGroupEffect.rasterizationOptions.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(result + 4);
  char v3 = *(unsigned char *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  char v5 = *(unsigned char *)(result + 16);
  *(unsigned char *)uint64_t v1 = *(unsigned char *)result;
  *(_DWORD *)(v1 + 4) = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 12) = v4;
  *(unsigned char *)(v1 + 16) = v5;
  return result;
}

uint64_t (*_DrawingGroupEffect.rasterizationOptions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _DrawingGroupEffect.isOpaque.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 1) & 1;
}

uint64_t _DrawingGroupEffect.isOpaque.setter(uint64_t result)
{
  if (result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

unsigned char *(*_DrawingGroupEffect.isOpaque.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 2) != 0;
  return RasterizationOptions.isOpaque.modify;
}

void _DrawingGroupEffect.colorMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_DrawingGroupEffect.colorMode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*_DrawingGroupEffect.colorMode.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return _DrawingGroupEffect.colorMode.modify;
}

uint64_t _DrawingGroupEffect.colorMode.modify(uint64_t result)
{
  **(unsigned char **)uint64_t result = *(unsigned char *)(result + 8);
  return result;
}

uint64_t _DrawingGroupEffect.init(opaque:colorMode:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *a2;
  if (result) {
    int v3 = 163;
  }
  else {
    int v3 = 161;
  }
  *(_DWORD *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v3;
  *(unsigned char *)(a3 + 16) = 3;
  return result;
}

uint64_t static _DrawingGroupEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  v138[1] = *MEMORY[0x263EF8340];
  unsigned int v93 = *a1;
  long long v4 = a2[1];
  long long v132 = *a2;
  long long v133 = v4;
  long long v5 = a2[3];
  long long v7 = *a2;
  long long v6 = a2[1];
  long long v134 = a2[2];
  long long v135 = v5;
  *(_OWORD *)uint64_t v136 = a2[4];
  *(_DWORD *)&v136[16] = *((_DWORD *)a2 + 20);
  int v103 = DWORD2(v132);
  uint64_t v9 = *((void *)&v133 + 1);
  uint64_t v8 = v133;
  int v10 = v134;
  unsigned int v105 = DWORD1(v134);
  uint64_t v11 = v5;
  unsigned int v108 = DWORD2(v5);
  v137[1] = v6;
  v137[2] = v134;
  uint64_t v12 = *(void *)&v136[12];
  uint64_t v13 = v6;
  unint64_t v14 = (_DWORD *)(v6 + 16);
  v137[0] = v7;
  swift_beginAccess();
  uint64_t v115 = v11;
  uint64_t v116 = *((void *)&v134 + 1);
  uint64_t v117 = v132;
  __int16 v94 = WORD2(v134);
  if ((BYTE4(v134) & 0x20) == 0)
  {
    LODWORD(v15) = *(_DWORD *)v136;
    outlined retain of _ViewInputs((uint64_t)&v132);
    goto LABEL_16;
  }
  int v97 = v134;
  uint64_t v101 = v132;
  int v16 = DWORD2(v132);
  uint64_t v17 = v133;
  unsigned int v18 = DWORD2(v133);
  uint64_t v20 = v134;
  uint64_t v19 = v135;
  uint64_t v95 = *((void *)&v134 + 1);
  uint64_t v21 = *((void *)&v135 + 1);
  uint64_t v91 = *(void *)&v136[8];
  uint64_t v92 = *(void *)v136;
  int v22 = *(_DWORD *)&v136[16];
  long long v129 = v134;
  long long v130 = v135;
  *(_OWORD *)uint64_t v131 = *(_OWORD *)v136;
  *(_DWORD *)&v131[16] = *(_DWORD *)&v136[16];
  long long v127 = v132;
  long long v128 = v133;
  outlined retain of _ViewInputs((uint64_t)&v132);
  outlined retain of _ViewInputs((uint64_t)&v132);
  unsigned int v23 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v13 + 81) & 1) != 0
    || v92 != *(_DWORD *)(v13 + 32)
    || v91 != *(_DWORD *)(v13 + 36)
    || v25 != *(_DWORD *)(v13 + 40)
    || v16 != *(_DWORD *)(v13 + 44)
    || v23 != *(_DWORD *)(v13 + 48)
    || v18 != *(_DWORD *)(v13 + 52))
  {
    *(void *)&long long v127 = v101;
    DWORD2(v127) = v16;
    *(void *)&long long v128 = v17;
    *((void *)&v128 + 1) = __PAIR64__(v23, v18);
    *(void *)&long long v129 = v20;
    *((void *)&v129 + 1) = v95;
    *(void *)&long long v130 = v19;
    *((void *)&v130 + 1) = v21;
    *(void *)uint64_t v131 = v92;
    *(void *)&v131[8] = v91;
    *(_DWORD *)&v131[16] = v22;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v25, (uint64_t)&v120);
    long long v26 = v121;
    uint64_t v27 = v122;
    unsigned __int8 v28 = v126;
    unint64_t v29 = v122 | ((unint64_t)v123 << 32);
    unint64_t v30 = v124 | ((unint64_t)v125 << 32);
    *(_OWORD *)(v13 + 32) = v120;
    *(_OWORD *)(v13 + 48) = v26;
    *(void *)(v13 + 64) = v29;
    *(void *)(v13 + 72) = v30;
    *(_WORD *)(v13 + 80) = v28;
    if (v27 != 1)
    {
      uint64_t v15 = HIDWORD(*((void *)&v26 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v13 + 64))
  {
LABEL_13:
    LODWORD(v15) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v13 + 60) = v15;
    *(unsigned char *)(v13 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v15) = *(_DWORD *)(v13 + 60);
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v10 = v97;
LABEL_16:
  swift_endAccess();
  unsigned int v31 = HIDWORD(v135);
  *(void *)&long long v127 = __PAIR64__(HIDWORD(v135), v15);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  unsigned int v102 = Attribute.init<A>(body:value:flags:update:)();
  int v32 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  unsigned int v33 = *(_DWORD *)v136;
  unsigned int v34 = *(_DWORD *)&v136[8];
  uint64_t v35 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v137);
  int v36 = specialized CachedEnvironment.attribute<A>(keyPath:)(v35);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v137);
  swift_release();
  unsigned int v98 = v33;
  *(void *)&long long v127 = __PAIR64__(v34, v33);
  DWORD2(v127) = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  int v37 = Attribute.init<A>(body:value:flags:update:)();
  int v38 = v10 | 0x1C;
  uint64_t v39 = *(void *)&v137[0];
  v138[0] = *(void *)&v137[0];
  outlined retain of _ViewInputs((uint64_t)&v132);
  outlined retain of _GraphInputs((uint64_t)v137);
  outlined retain of ViewTransform((uint64_t)v138);
  uint64_t v40 = specialized find<A>(_:key:)(v39);
  unsigned int v96 = v31;
  if (v40)
  {
    char v41 = *(unsigned char *)(v40 + 72);
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)v137);
    outlined release of _ViewInputs((uint64_t)&v132);
    uint64_t v42 = v117;
    if (v41) {
      goto LABEL_26;
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v138);
    outlined release of _GraphInputs((uint64_t)v137);
    outlined release of _ViewInputs((uint64_t)&v132);
    uint64_t v42 = v117;
  }
  uint64_t v43 = swift_retain();
  uint64_t v44 = specialized find<A>(_:key:)(v43);
  if (!v44 || (Swift::UInt value = v42, *(unsigned char *)(v44 + 72) != 1))
  {
    type metadata accessor for TypedElement<UsingGraphicsRenderer>();
    *(unsigned char *)(swift_allocObject() + 72) = 1;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for UsingGraphicsRenderer, 0, v42).value;
  }
  swift_release();
  LODWORD(v127) = *v14;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment();
  int v46 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v47 = MEMORY[0x263F8EE78];
  unint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v49 = swift_allocObject();
  *(_DWORD *)(v49 + 16) = v46;
  *(void *)(v49 + 24) = v47;
  *(_OWORD *)(v49 + 32) = 0u;
  *(_OWORD *)(v49 + 48) = 0u;
  *(_OWORD *)(v49 + 64) = 0u;
  *(_WORD *)(v49 + 80) = 256;
  *(void *)(v49 + 88) = v48;
  swift_release();
  if ((v10 & 0x20) == 0) {
    int v38 = v10 | 0x3C;
  }
  uint64_t v42 = value;
  uint64_t v8 = v49;
LABEL_26:
  *(void *)&long long v127 = v42;
  DWORD2(v127) = v103;
  *(void *)&long long v128 = v8;
  *((void *)&v128 + 1) = v9;
  *(void *)&long long v129 = __PAIR64__(v105, v38);
  *((void *)&v129 + 1) = v116;
  *(void *)&long long v130 = v115;
  *((void *)&v130 + 1) = __PAIR64__(v102, v108);
  *(_DWORD *)uint64_t v131 = v32;
  *(_DWORD *)&v131[4] = v32;
  *(_DWORD *)&v131[8] = v37;
  *(void *)&v131[12] = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v50 = swift_bridgeObjectRetain();
  a3(&v118, v50, &v127);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v51 = *(void *)(v135 + 16);
  if (!v51)
  {
LABEL_60:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a4 = v118;
    a4[1] = v119;
    return result;
  }
  uint64_t v52 = (ValueMetadata **)(v135 + 32);
  while (*v52 != &type metadata for DisplayList.Key)
  {
    v52 += 2;
    if (!--v51) {
      goto LABEL_60;
    }
  }
  Swift::UInt32 v53 = ++lastIdentity;
  if ((v94 & 0x100) == 0)
  {
LABEL_32:
    swift_beginAccess();
    if ((v94 & 0x20) == 0)
    {
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      unsigned int v55 = v96;
      unsigned int v56 = v98;
LABEL_57:
      swift_endAccess();
      *(void *)&long long v127 = v118;
      DWORD2(v127) = v119;
      unint64_t v85 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      int v86 = *MEMORY[0x263F288F8];
      if ((v85 & 0x100000000) == 0) {
        int v86 = v85;
      }
      *(void *)&long long v127 = __PAIR64__(v93, v53);
      *((void *)&v127 + 1) = __PAIR64__(OffsetAttribute2, v56);
      *(void *)&long long v128 = __PAIR64__(*(unsigned int *)&v136[4], v55);
      DWORD2(v128) = v86;
      WORD6(v128) = 0;
      long long v87 = *(_OWORD *)(MEMORY[0x263F00190] + 16);
      long long v129 = *MEMORY[0x263F00190];
      long long v130 = v87;
      v131[0] = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList();
      unsigned int v88 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v127) = 0;
      PreferencesOutputs.subscript.setter(v88, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_60;
    }
    Swift::UInt32 v114 = v53;
    uint64_t v57 = v132;
    int v58 = DWORD2(v132);
    uint64_t v111 = v133;
    unsigned int v59 = DWORD2(v133);
    uint64_t v61 = v134;
    uint64_t v60 = v135;
    uint64_t v109 = *((void *)&v134 + 1);
    uint64_t v62 = *((void *)&v135 + 1);
    uint64_t v104 = *(void *)&v136[8];
    uint64_t v106 = *(void *)v136;
    int v63 = *(_DWORD *)&v136[16];
    long long v129 = v134;
    long long v130 = v135;
    *(_OWORD *)uint64_t v131 = *(_OWORD *)v136;
    *(_DWORD *)&v131[16] = *(_DWORD *)&v136[16];
    long long v127 = v132;
    long long v128 = v133;
    outlined retain of _ViewInputs((uint64_t)&v132);
    unsigned int v64 = _ViewInputs.geometryTransaction()();
    uint64_t v65 = swift_getKeyPath();
    int v66 = specialized CachedEnvironment.attribute<A>(keyPath:)(v65);
    swift_release();
    if ((*(unsigned char *)(v13 + 81) & 1) == 0
      && v106 == *(_DWORD *)(v13 + 32)
      && v104 == *(_DWORD *)(v13 + 36)
      && v66 == *(_DWORD *)(v13 + 40)
      && v58 == *(_DWORD *)(v13 + 44)
      && v64 == *(_DWORD *)(v13 + 48)
      && v59 == *(_DWORD *)(v13 + 52))
    {
      if ((*(unsigned char *)(v13 + 64) & 1) == 0)
      {
        LODWORD(v99) = *(_DWORD *)(v13 + 60);
        goto LABEL_45;
      }
    }
    else
    {
      *(void *)&long long v127 = v57;
      DWORD2(v127) = v58;
      *(void *)&long long v128 = v111;
      *((void *)&v128 + 1) = __PAIR64__(v64, v59);
      *(void *)&long long v129 = v61;
      *((void *)&v129 + 1) = v109;
      *(void *)&long long v130 = v60;
      *((void *)&v130 + 1) = v62;
      *(void *)uint64_t v131 = v106;
      *(void *)&v131[8] = v104;
      *(_DWORD *)&v131[16] = v63;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v66, (uint64_t)&v120);
      long long v67 = v121;
      uint64_t v68 = v122;
      unsigned __int8 v69 = v126;
      unint64_t v70 = v122 | ((unint64_t)v123 << 32);
      unint64_t v71 = v124 | ((unint64_t)v125 << 32);
      *(_OWORD *)(v13 + 32) = v120;
      *(_OWORD *)(v13 + 48) = v67;
      *(void *)(v13 + 64) = v70;
      *(void *)(v13 + 72) = v71;
      *(_WORD *)(v13 + 80) = v69;
      if (v68 != 1)
      {
        uint64_t v99 = HIDWORD(*((void *)&v67 + 1));
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v72 = v132;
        int v73 = DWORD2(v132);
        uint64_t v112 = v133;
        unsigned int v74 = DWORD2(v133);
        long long v75 = v134;
        long long v76 = v135;
        uint64_t v107 = *(void *)&v136[8];
        uint64_t v110 = *(void *)v136;
        int v77 = *(_DWORD *)&v136[16];
        long long v129 = v134;
        long long v130 = v135;
        *(_OWORD *)uint64_t v131 = *(_OWORD *)v136;
        *(_DWORD *)&v131[16] = *(_DWORD *)&v136[16];
        long long v127 = v132;
        long long v128 = v133;
        outlined retain of _ViewInputs((uint64_t)&v132);
        unsigned int v78 = _ViewInputs.geometryTransaction()();
        uint64_t v79 = swift_getKeyPath();
        int v80 = specialized CachedEnvironment.attribute<A>(keyPath:)(v79);
        swift_release();
        if ((*(unsigned char *)(v13 + 81) & 1) == 0
          && v110 == *(_DWORD *)(v13 + 32)
          && v107 == *(_DWORD *)(v13 + 36)
          && v80 == *(_DWORD *)(v13 + 40)
          && v73 == *(_DWORD *)(v13 + 44)
          && v78 == *(_DWORD *)(v13 + 48)
          && v74 == *(_DWORD *)(v13 + 52))
        {
          unsigned int v55 = v96;
          if ((*(unsigned char *)(v13 + 80) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v13 + 76);
            goto LABEL_56;
          }
        }
        else
        {
          *(void *)&long long v127 = v72;
          DWORD2(v127) = v73;
          *(void *)&long long v128 = v112;
          *((void *)&v128 + 1) = __PAIR64__(v78, v74);
          long long v129 = v75;
          long long v130 = v76;
          *(void *)uint64_t v131 = v110;
          *(void *)&v131[8] = v107;
          *(_DWORD *)&v131[16] = v77;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v80, (uint64_t)&v120);
          unsigned int OffsetAttribute2 = v125;
          int v81 = v126;
          unint64_t v82 = v122 | ((unint64_t)v123 << 32);
          unint64_t v83 = v124 | ((unint64_t)v125 << 32);
          long long v84 = v121;
          *(_OWORD *)(v13 + 32) = v120;
          *(_OWORD *)(v13 + 48) = v84;
          *(void *)(v13 + 64) = v82;
          *(void *)(v13 + 72) = v83;
          *(_WORD *)(v13 + 80) = v81;
          unsigned int v55 = v96;
          if (v81 != 1) {
            goto LABEL_56;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v13 + 76) = OffsetAttribute2;
        *(unsigned char *)(v13 + 80) = 0;
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unsigned int v56 = v99;
        Swift::UInt32 v53 = v114;
        goto LABEL_57;
      }
    }
    LODWORD(v99) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v13 + 60) = v99;
    *(unsigned char *)(v13 + 64) = 0;
    goto LABEL_45;
  }
  outlined retain of _ViewInputs((uint64_t)&v132);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v132);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v120) = v53;
    uint64_t v90 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v120);
    v90(&v127, 0);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _DrawingGroupEffect.ChildEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(0, 255);
}

BOOL static _DrawingGroupEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = *((_DWORD *)a1 + 3);
  int v3 = *((_DWORD *)a2 + 3);
  if (a1[8])
  {
    if (v2 == v3) {
      unsigned __int8 v4 = a2[8];
    }
    else {
      unsigned __int8 v4 = 0;
    }
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (a2[8]) {
      return 0;
    }
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1) || v2 != v3) {
      return 0;
    }
  }
  return a1[16] == a2[16];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _DrawingGroupEffect(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4);
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v6 = *(unsigned char *)a2;
  int v7 = *(_DWORD *)(a2 + 4);
  char v8 = *(unsigned char *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 12);
  char v10 = *(unsigned char *)(a2 + 16);
  v17[0] = *(unsigned char *)a1;
  int v18 = v2;
  char v19 = v3;
  int v20 = v4;
  char v21 = v5;
  v12[0] = v6;
  int v13 = v7;
  char v14 = v8;
  int v15 = v9;
  char v16 = v10;
  return specialized static RasterizationOptions.== infix(_:_:)(v17, v12);
}

uint64_t View.drawingGroup(opaque:colorMode:)(char a1, unsigned char *a2, uint64_t a3)
{
  v5[0] = *a2;
  if (a1) {
    int v3 = 163;
  }
  else {
    int v3 = 161;
  }
  int v6 = 0;
  char v7 = 1;
  int v8 = v3;
  char v9 = 3;
  return View.modifier<A>(_:)(v5, a3, &type metadata for _DrawingGroupEffect);
}

uint64_t _DrawingGroupEffect._rendersAsynchronously.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

uint64_t _DrawingGroupEffect._rendersAsynchronously.setter(uint64_t result)
{
  if (result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

unsigned char *(*_DrawingGroupEffect._rendersAsynchronously.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 4) != 0;
  return RasterizationOptions.rendersAsynchronously.modify;
}

unint64_t _DrawingGroupEffect.rbColorMode.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _DrawingGroupEffect.rbColorMode.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t *(*_DrawingGroupEffect.rbColorMode.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + 8);
  return _DrawingGroupEffect.rbColorMode.modify;
}

uint64_t *_DrawingGroupEffect.rbColorMode.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  char v2 = *((unsigned char *)result + 12);
  *(_DWORD *)(v1 + 4) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 8) = v2;
  return result;
}

uint64_t _DrawingGroupEffect.rendersFirstFrameAsynchronously.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 4) & 1;
}

uint64_t _DrawingGroupEffect.rendersFirstFrameAsynchronously.setter(uint64_t result)
{
  if (result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

unsigned char *(*_DrawingGroupEffect.rendersFirstFrameAsynchronously.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 0x10) != 0;
  return RasterizationOptions.rendersFirstFrameAsynchronously.modify;
}

uint64_t _DrawingGroupEffect.isAccelerated.getter()
{
  return *(_DWORD *)(v0 + 12) & 1;
}

uint64_t _DrawingGroupEffect.isAccelerated.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | result & 1;
  return result;
}

unsigned __int8 *(*_DrawingGroupEffect.isAccelerated.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 12) & 1;
  return RasterizationOptions.isAccelerated.modify;
}

uint64_t _DrawingGroupEffect.allowsPackedDrawable.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 5) & 1;
}

uint64_t _DrawingGroupEffect.allowsPackedDrawable.setter(uint64_t result)
{
  if (result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

unsigned char *(*_DrawingGroupEffect.allowsPackedDrawable.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 0x20) != 0;
  return RasterizationOptions.allowsPackedDrawable.modify;
}

uint64_t DrawingGroupDisplayList.updateValue()()
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (v0[6] == *MEMORY[0x263F288F8]
    || (uint64_t Value = AGGraphGetValue(),
        char v3 = v2,
        uint64_t v4 = *(void *)Value,
        __int16 v5 = *(_WORD *)(Value + 8),
        char v6 = *(unsigned char *)(Value + 10),
        swift_bridgeObjectRetain(),
        !v4))
  {
    __int16 v5 = 0;
    char v6 = 0;
    int v7 = *((unsigned __int8 *)v0 + 64);
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  else
  {
    int v7 = v3 & 1;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  *((unsigned char *)v0 + 64) = v8 != 0;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v58 = MEMORY[0x263F8EE78];
    WORD4(v58) = 0;
    BYTE10(v58) = 0;
    return AGGraphSetOutputValue();
  }
  uint64_t v9 = AGGraphGetValue();
  char v11 = v10;
  int v54 = *(_DWORD *)(v9 + 4);
  char v55 = *(unsigned char *)v9;
  int v52 = *(_DWORD *)(v9 + 12);
  char v53 = *(unsigned char *)(v9 + 8);
  char v51 = *(unsigned char *)(v9 + 16);
  type metadata accessor for CGSize(0);
  uint64_t v12 = (double *)AGGraphGetValue();
  char v14 = v13;
  char v15 = v11 | v13;
  double width = *v12;
  double height = v12[1];
  int v18 = (float64x2_t *)AGGraphGetValue();
  int v20 = v19;
  uint64_t v21 = AGGraphGetValue();
  uint64_t v23 = *(void *)v21;
  float64x2_t v24 = *v18;
  float64x2_t v25 = *(float64x2_t *)(v21 + 8);
  float64x2_t v26 = *(float64x2_t *)(v21 + 24);
  float64x2_t v50 = *v18;
  if (v15)
  {
    int v7 = 1;
    if ((v20 & 1) == 0 && (v14 & 1) == 0 && (v22 & 1) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    memset(&v63, 0, sizeof(v63));
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    char v64 = 1;
    uint64_t v56 = v23;
    v57[0] = v24;
    v57[1] = vsubq_f64(v26, vsubq_f64(v24, v25));
    long long v58 = 0u;
    swift_retain();
    specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)&v56, (uint64_t)&v58);
    CGFloat x = 0.0;
    if ((v64 & 1) != 0
      || (CGPoint origin = v63.origin, size = v63.size, CGRectGetWidth(v63) > width)
      && (v67.CGPoint origin = origin, v67.size = size, CGRectGetHeight(v67) > height))
    {
      CGFloat y = 0.0;
    }
    else
    {
      v68.origin.CGFloat x = 0.0;
      v68.origin.CGFloat y = 0.0;
      v68.size.double width = width;
      v68.size.double height = height;
      v72.CGPoint origin = origin;
      v72.CGSize size = size;
      CGRect v69 = CGRectIntersection(v68, v72);
      CGFloat x = v69.origin.x;
      CGFloat y = v69.origin.y;
      double width = v69.size.width;
      double height = v69.size.height;
    }
    v70.origin.CGFloat x = x;
    v70.origin.CGFloat y = y;
    v70.size.double width = width;
    v70.size.double height = height;
    if (!CGRectEqualToRect(v70, *((CGRect *)v0 + 1)))
    {
      *((CGFloat *)v0 + 4) = x;
      *((CGFloat *)v0 + 5) = y;
      int v7 = 1;
      *((double *)v0 + 6) = width;
      *((double *)v0 + 7) = height;
    }
    goto LABEL_20;
  }
  if ((v20 | v22)) {
    goto LABEL_13;
  }
LABEL_10:
  swift_retain();
LABEL_20:
  double v32 = *((double *)v0 + 4);
  double v33 = *((double *)v0 + 5);
  CGFloat v34 = *((double *)v0 + 6);
  CGFloat v35 = *((double *)v0 + 7);
  v71.origin.CGFloat x = v32;
  v71.origin.CGFloat y = v33;
  v71.size.double width = v34;
  v71.size.double height = v35;
  if (CGRectIsEmpty(v71))
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v58 = MEMORY[0x263F8EE78];
    WORD4(v58) = 0;
    BYTE10(v58) = 0;
    AGGraphSetOutputValue();
  }
  else
  {
    int v36 = (double *)AGGraphGetValue();
    double v39 = *v36;
    double v38 = v36[1];
    if (((v7 | v20) & 1) != 0 || (v37 & 1) != 0 || !AGGraphGetOutputValue())
    {
      unint64_t v40 = ++static DisplayList.Version.lastValue;
      if (v7)
      {
        if (v40) {
          int v41 = (2 * ((33 * (v40 >> 16)) ^ v40)) | 1;
        }
        else {
          LOWORD(v41) = 0;
        }
        *((_WORD *)v0 + 14) = v41;
      }
      float64_t v42 = v50.f64[1] - v38;
      double v43 = v32 + v50.f64[0] - v39;
      double v44 = v33 + v42;
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v4;
      *(_WORD *)(v45 + 24) = v5;
      *(unsigned char *)(v45 + 26) = v6;
      *(double *)(v45 + 32) = v32;
      *(double *)(v45 + 40) = v33;
      *(unsigned char *)(v45 + 48) = v55;
      *(_DWORD *)(v45 + 52) = v54;
      *(unsigned char *)(v45 + 56) = v53;
      *(_DWORD *)(v45 + 60) = v52;
      *(unsigned char *)(v45 + 64) = v51;
      unint64_t v46 = *((unsigned __int16 *)v0 + 14);
      int v47 = *v0;
      _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_2461B9DC0;
      *(double *)(v48 + 32) = v43;
      *(double *)(v48 + 40) = v44;
      *(CGFloat *)(v48 + 48) = v34;
      *(CGFloat *)(v48 + 56) = v35;
      *(void *)(v48 + 64) = v40;
      *(void *)(v48 + 72) = v45 | 0x9000000000000000;
      *(void *)(v48 + 80) = v46;
      *(void *)(v48 + 88) = 0;
      *(unsigned char *)(v48 + 98) = 0;
      *(_WORD *)(v48 + 96) = 0;
      *(_DWORD *)(v48 + 100) = v47;
      *(double *)&long long v58 = v43;
      *((double *)&v58 + 1) = v44;
      *(CGFloat *)&long long v59 = v34;
      *((CGFloat *)&v59 + 1) = v35;
      *(void *)&long long v60 = v40;
      *((void *)&v60 + 1) = v45 | 0x9000000000000000;
      long long v61 = v46;
      BYTE2(v62) = 0;
      LOWORD(v62) = 0;
      DWORD1(v62) = v47;
      swift_retain();
      DisplayList.Item.features.getter((__int16 *)v57);
      char v49 = *(unsigned char *)(v45 + 26);
      uint64_t v56 = v48;
      BYTE2(v57[0]) = v49;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DrawingGroupEffect.ChildEnvironment and conformance _DrawingGroupEffect.ChildEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList;
  if (!lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColorRenderingMode and conformance ColorRenderingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode;
  if (!lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorRenderingMode and conformance ColorRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags;
  if (!lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RasterizationOptions.Flags and conformance RasterizationOptions.Flags);
  }
  return result;
}

uint64_t sub_245C65FE0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 12) & 1;
  return result;
}

unsigned __int8 *sub_245C65FF0(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFE | *result;
  return result;
}

uint64_t sub_245C66008@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 2) != 0;
  return result;
}

unsigned char *sub_245C66018(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t sub_245C6603C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 4) != 0;
  return result;
}

unsigned char *sub_245C6604C(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t sub_245C66070@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 0x10) != 0;
  return result;
}

unsigned char *sub_245C66080(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t sub_245C660A4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 8) != 0;
  return result;
}

unsigned char *sub_245C660B4(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 8;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t sub_245C660D8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 0x20) != 0;
  return result;
}

unsigned char *sub_245C660E8(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t sub_245C6610C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 0x40) != 0;
  return result;
}

unsigned char *sub_245C6611C(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 64;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFBF | v2;
  return result;
}

uint64_t sub_245C66140@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 12) & 0x80) != 0;
  return result;
}

unsigned char *sub_245C66150(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 128;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFF7F | v2;
  return result;
}

unsigned char *sub_245C66174(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFD | v2;
  return result;
}

unsigned char *sub_245C66198@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_245C661A4(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_245C661B0(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t sub_245C661D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  *(_DWORD *)a2 = *(_DWORD *)(result + 4);
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_245C661E8(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)result;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

unsigned char *sub_245C661FC(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFEF | v2;
  return result;
}

unsigned __int8 *sub_245C66220(unsigned __int8 *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFE | *result;
  return result;
}

unsigned char *sub_245C66238(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFDF | v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ColorRenderingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C66328);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RasterizationOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[17]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RasterizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_245C663E0()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for DrawingGroupDisplayList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DrawingGroupDisplayList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for DrawingGroupDisplayList()
{
  return &unk_26FA69268;
}

void *type metadata accessor for _DrawingGroupEffect.ChildEnvironment()
{
  return &unk_26FA60210;
}

unint64_t instantiation function for generic protocol witness table for DrawingGroupDisplayList(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DrawingGroupDisplayList and conformance DrawingGroupDisplayList();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245C66540()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t key path getter for EnvironmentValues.isLuminanceReduced : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

void (*EnvironmentValues.isLuminanceReduced.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isLuminanceReduced.modify;
}

void EnvironmentValues.isLuminanceReduced.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  int v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t sub_245C66810(char *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

ValueMetadata *type metadata accessor for ReducedLuminanceKey()
{
  return &type metadata for ReducedLuminanceKey;
}

void _BrightnessEffect.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_BrightnessEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _BrightnessEffect.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*_BrightnessEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _BrightnessEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 8;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245C6692C()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

BOOL static _BrightnessEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _BrightnessEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 8;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.brightness(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _BrightnessEffect);
}

double sub_245C66A50@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245C66A5C(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_245C66A68()
{
  return swift_getWitnessTable();
}

uint64_t static _RendererEffect.isScrapeable.getter()
{
  return 0;
}

void protocol witness for _RendererEffect.scrapeableContent.getter in conformance _ColorMonochromeEffect._Resolved(void *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

void _RendererEffect.scrapeableContent.getter(void *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

{
  _RendererEffect.scrapeableContent.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t specialized static RendererEffect._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  if ((*(unsigned char *)(a2 + 36) & 0x20) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    uint64_t v5 = *(void *)(v4 + 16);
    if (!v5)
    {
LABEL_6:
      long long v7 = *(_OWORD *)(a2 + 48);
      _OWORD v10[2] = *(_OWORD *)(a2 + 32);
      void v10[3] = v7;
      v10[4] = *(_OWORD *)(a2 + 64);
      int v11 = *(_DWORD *)(a2 + 80);
      long long v8 = *(_OWORD *)(a2 + 16);
      v10[0] = *(_OWORD *)a2;
      v10[1] = v8;
      return ((uint64_t (*)(uint64_t, _OWORD *))a3)(a1, v10);
    }
    uint64_t v6 = (ValueMetadata **)(v4 + 32);
    while (*v6 != &type metadata for DisplayList.Key)
    {
      v6 += 2;
      if (!--v5) {
        goto LABEL_6;
      }
    }
  }

  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4);
}

uint64_t static RendererEffect._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ExtendedBlendModeEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  _OWORD v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PremultipliedColorMatrixEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(long long *a1, uint64_t (*a2)(long long *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2);
}

{
  swift_getWitnessTable();
  return static RendererEffect._viewListCount(inputs:body:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContrastEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorInvertEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundLayerLevelViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GrayscaleEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t ResetPositionTransform.init(position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BrightnessEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  unint64_t v7 = a6;
  unint64_t v8 = a5;
  char v10 = a7;
  uint64_t v145 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)a2;
  int v108 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  long long v111 = *(_OWORD *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  LODWORD(v16) = *(_DWORD *)(a2 + 68);
  unsigned int v105 = *(_DWORD *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  int v114 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 32);
  long long v138 = *(_OWORD *)(a2 + 16);
  long long v139 = v18;
  long long v137 = *(_OWORD *)a2;
  LOWORD(v19) = WORD2(v18);
  unsigned int v95 = v16;
  if ((BYTE4(v18) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    goto LABEL_16;
  }
  __int16 v93 = WORD2(v18);
  uint64_t v100 = v13;
  uint64_t v101 = v12;
  uint64_t v102 = v11;
  uint64_t v20 = v138;
  swift_beginAccess();
  int v21 = *(_DWORD *)(a2 + 8);
  uint64_t v97 = *(void *)(a2 + 16);
  uint64_t v98 = *(void *)a2;
  int v22 = *(_DWORD *)(a2 + 24);
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t v24 = *(void *)(a2 + 40);
  uint64_t v25 = *(void *)(a2 + 48);
  uint64_t v26 = *(void *)(a2 + 56);
  uint64_t v89 = *(void *)(a2 + 72);
  uint64_t v90 = *(void *)(a2 + 64);
  int v88 = *(_DWORD *)(a2 + 80);
  long long v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v141[16] = *(_OWORD *)(a2 + 32);
  long long v142 = v27;
  long long v143 = *(_OWORD *)(a2 + 64);
  int v144 = *(_DWORD *)(a2 + 80);
  long long v28 = *(_OWORD *)(a2 + 16);
  long long v140 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v141 = v28;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v29 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v138 + 81) & 1) != 0
    || v90 != *(_DWORD *)(v138 + 32)
    || v89 != *(_DWORD *)(v138 + 36)
    || v31 != *(_DWORD *)(v138 + 40)
    || v21 != *(_DWORD *)(v138 + 44)
    || v29 != *(_DWORD *)(v138 + 48)
    || v22 != *(_DWORD *)(v138 + 52))
  {
    *(void *)&long long v140 = v98;
    DWORD2(v140) = v21;
    *(void *)uint64_t v141 = v97;
    *(_DWORD *)&v141[8] = v22;
    *(_DWORD *)&v141[12] = v29;
    *(void *)&v141[16] = v23;
    *(void *)&v141[24] = v24;
    *(void *)&long long v142 = v25;
    *((void *)&v142 + 1) = v26;
    *(void *)&long long v143 = v90;
    *((void *)&v143 + 1) = v89;
    int v144 = v88;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v31, (uint64_t)&v131);
    long long v32 = v132;
    uint64_t v33 = v133;
    unsigned __int8 v34 = v134;
    unint64_t v35 = v133 | ((unint64_t)DWORD1(v133) << 32);
    unint64_t v36 = BYTE8(v133) | ((unint64_t)HIDWORD(v133) << 32);
    *(_OWORD *)(v20 + 32) = v131;
    *(_OWORD *)(v20 + 48) = v32;
    *(void *)(v20 + 64) = v35;
    *(void *)(v20 + 72) = v36;
    *(_WORD *)(v20 + 80) = v34;
    if (v33 != 1)
    {
      uint64_t v16 = HIDWORD(*((void *)&v32 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v138 + 64))
  {
LABEL_13:
    LODWORD(v16) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v20 + 60) = v16;
    *(unsigned char *)(v20 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v16) = *(_DWORD *)(v138 + 60);
LABEL_15:
  uint64_t v11 = v102;
  char v10 = a7;
  uint64_t v13 = v100;
  LOWORD(v19) = v93;
  unint64_t v7 = a6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v12 = v101;
  unint64_t v8 = a5;
LABEL_16:
  *(void *)&long long v140 = v11;
  DWORD2(v140) = v108;
  *(void *)uint64_t v141 = v12;
  *(_OWORD *)&v141[8] = v111;
  *(void *)&v141[24] = v14;
  *(void *)&long long v142 = v13;
  *((void *)&v142 + 1) = v15;
  *(void *)&long long v143 = __PAIR64__(v16, v105);
  *((void *)&v143 + 1) = v17;
  int v144 = v114;
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(a3, (uint64_t)&v140, a4, 0, v8, v7, &v122);
  uint64_t v37 = *(void *)(a2 + 48);
  uint64_t v38 = *(void *)(v37 + 16);
  if (!v38)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *char v10 = v122;
    v10[1] = v123;
    return result;
  }
  double v39 = (ValueMetadata **)(v37 + 32);
  while (*v39 != &type metadata for DisplayList.Key)
  {
    v39 += 2;
    if (!--v38) {
      goto LABEL_57;
    }
  }
  Swift::UInt32 v121 = ++lastIdentity;
  unint64_t v40 = (int *)MEMORY[0x263F288F8];
  if (((unsigned __int16)v19 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v104 = v10;
    uint64_t v41 = v138;
    float64_t v42 = (unsigned int *)(v138 + 16);
    swift_beginAccess();
    if ((v19 & 0x20) == 0)
    {
      LODWORD(v118) = *(_DWORD *)(a2 + 64);
      unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      unsigned int v76 = *v42;
      *(void *)&long long v131 = v122;
      DWORD2(v131) = v123;
      unint64_t v77 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v77 & 0x100000000) != 0) {
        int v78 = *v40;
      }
      else {
        int v78 = v77;
      }
      uint64_t v79 = v137;
      *(void *)&long long v124 = v137;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v137);
      outlined retain of ViewTransform((uint64_t)&v124);
      uint64_t v80 = specialized find<A>(_:key:)(v79);
      if (v80) {
        char v81 = *(unsigned char *)(v80 + 72);
      }
      else {
        char v81 = 0;
      }
      char v10 = v104;
      outlined release of ViewTransform((uint64_t)&v124);
      outlined release of _GraphInputs((uint64_t)&v137);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v137);
      outlined retain of ViewTransform((uint64_t)&v124);
      uint64_t v82 = specialized find<A>(_:key:)(v79);
      if (v82) {
        int v83 = *(_DWORD *)(v82 + 72);
      }
      else {
        int v83 = 0;
      }
      unsigned int v84 = *(_DWORD *)(a2 + 60);
      unsigned int v85 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v124);
      outlined release of _GraphInputs((uint64_t)&v137);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&long long v131 = __PAIR64__(a1, v121);
      *((void *)&v131 + 1) = __PAIR64__(OffsetAttribute2, v118);
      *(void *)&long long v132 = __PAIR64__(v95, v84);
      *((void *)&v132 + 1) = __PAIR64__(v85, v76);
      LODWORD(v133) = v78;
      BYTE4(v133) = v81;
      DWORD2(v133) = 0;
      HIDWORD(v133) = v83;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      unsigned int v86 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v131) = 0;
      PreferencesOutputs.subscript.setter(v86, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    uint64_t v44 = *(void *)a2;
    int v45 = *(_DWORD *)(a2 + 8);
    uint64_t v115 = *(void *)(a2 + 16);
    unsigned int v46 = *(_DWORD *)(a2 + 24);
    uint64_t v47 = *(void *)(a2 + 32);
    uint64_t v48 = *(void *)(a2 + 48);
    uint64_t v112 = *(void *)(a2 + 40);
    uint64_t v49 = *(void *)(a2 + 56);
    uint64_t v119 = *(void *)(a2 + 64);
    uint64_t v109 = *(void *)(a2 + 72);
    int v106 = *(_DWORD *)(a2 + 80);
    long long v50 = *(_OWORD *)(a2 + 48);
    long long v133 = *(_OWORD *)(a2 + 32);
    long long v134 = v50;
    long long v135 = *(_OWORD *)(a2 + 64);
    int v136 = *(_DWORD *)(a2 + 80);
    long long v51 = *(_OWORD *)(a2 + 16);
    long long v131 = *(_OWORD *)a2;
    long long v132 = v51;
    outlined retain of _ViewInputs(a2);
    unsigned int v52 = _ViewInputs.geometryTransaction()();
    uint64_t v53 = swift_getKeyPath();
    int v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(v53);
    swift_release();
    if ((*(unsigned char *)(v41 + 81) & 1) == 0
      && v119 == *(_DWORD *)(v41 + 32)
      && v109 == *(_DWORD *)(v41 + 36)
      && v54 == *(_DWORD *)(v41 + 40)
      && v45 == *(_DWORD *)(v41 + 44)
      && v52 == *(_DWORD *)(v41 + 48)
      && v46 == *(_DWORD *)(v41 + 52))
    {
      if ((*(unsigned char *)(v41 + 64) & 1) == 0)
      {
        LODWORD(v118) = *(_DWORD *)(v41 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&long long v131 = v44;
      DWORD2(v131) = v45;
      *(void *)&long long v132 = v115;
      *((void *)&v132 + 1) = __PAIR64__(v52, v46);
      *(void *)&long long v133 = v47;
      *((void *)&v133 + 1) = v112;
      *(void *)&long long v134 = v48;
      *((void *)&v134 + 1) = v49;
      *(void *)&long long v135 = v119;
      *((void *)&v135 + 1) = v109;
      int v136 = v106;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v54, (uint64_t)&v124);
      long long v55 = v125;
      uint64_t v56 = v126;
      unsigned __int8 v57 = v130;
      unint64_t v58 = v126 | ((unint64_t)v127 << 32);
      unint64_t v59 = v128 | ((unint64_t)v129 << 32);
      *(_OWORD *)(v41 + 32) = v124;
      *(_OWORD *)(v41 + 48) = v55;
      *(void *)(v41 + 64) = v58;
      *(void *)(v41 + 72) = v59;
      *(_WORD *)(v41 + 80) = v57;
      if (v56 != 1)
      {
        uint64_t v118 = HIDWORD(*((void *)&v55 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v60 = *(void *)a2;
        int v61 = *(_DWORD *)(a2 + 8);
        uint64_t v116 = *(void *)(a2 + 16);
        unsigned int v62 = *(_DWORD *)(a2 + 24);
        uint64_t v63 = *(void *)(a2 + 32);
        uint64_t v64 = *(void *)(a2 + 48);
        uint64_t v113 = *(void *)(a2 + 40);
        uint64_t v65 = *(void *)(a2 + 56);
        uint64_t v107 = *(void *)(a2 + 72);
        uint64_t v110 = *(void *)(a2 + 64);
        int v99 = *(_DWORD *)(a2 + 80);
        long long v66 = *(_OWORD *)(a2 + 48);
        long long v133 = *(_OWORD *)(a2 + 32);
        long long v134 = v66;
        long long v135 = *(_OWORD *)(a2 + 64);
        int v136 = *(_DWORD *)(a2 + 80);
        long long v67 = *(_OWORD *)(a2 + 16);
        long long v131 = *(_OWORD *)a2;
        long long v132 = v67;
        outlined retain of _ViewInputs(a2);
        unsigned int v68 = _ViewInputs.geometryTransaction()();
        uint64_t v69 = swift_getKeyPath();
        int v70 = specialized CachedEnvironment.attribute<A>(keyPath:)(v69);
        swift_release();
        if ((*(unsigned char *)(v41 + 81) & 1) == 0
          && v110 == *(_DWORD *)(v41 + 32)
          && v107 == *(_DWORD *)(v41 + 36)
          && v70 == *(_DWORD *)(v41 + 40)
          && v61 == *(_DWORD *)(v41 + 44)
          && v68 == *(_DWORD *)(v41 + 48)
          && v62 == *(_DWORD *)(v41 + 52))
        {
          unint64_t v40 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v41 + 72) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v41 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&long long v131 = v60;
          DWORD2(v131) = v61;
          *(void *)&long long v132 = v116;
          *((void *)&v132 + 1) = __PAIR64__(v68, v62);
          *(void *)&long long v133 = v63;
          *((void *)&v133 + 1) = v113;
          *(void *)&long long v134 = v64;
          *((void *)&v134 + 1) = v65;
          *(void *)&long long v135 = v110;
          *((void *)&v135 + 1) = v107;
          int v136 = v99;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v131, v70, (uint64_t)&v124);
          unsigned int OffsetAttribute2 = v127;
          uint64_t v71 = v128;
          unsigned __int8 v72 = v130;
          unint64_t v73 = v126 | ((unint64_t)v127 << 32);
          unint64_t v74 = v128 | ((unint64_t)v129 << 32);
          long long v75 = v125;
          *(_OWORD *)(v41 + 32) = v124;
          *(_OWORD *)(v41 + 48) = v75;
          *(void *)(v41 + 64) = v73;
          *(void *)(v41 + 72) = v74;
          *(_WORD *)(v41 + 80) = v72;
          unint64_t v40 = (int *)MEMORY[0x263F288F8];
          if (v71 != 1) {
            goto LABEL_46;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v41 + 68) = OffsetAttribute2;
        *(unsigned char *)(v41 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_47;
      }
    }
    LODWORD(v118) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v41 + 60) = v118;
    *(unsigned char *)(v41 + 64) = 0;
    goto LABEL_35;
  }
  char v94 = (char)v19;
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v40)
  {
    LODWORD(v124) = v121;
    int v19 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v124);
    v19(&v131, 0);
    LOBYTE(v19) = v94;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  unsigned int v5 = a4;
  unsigned int v6 = a3;
  unint64_t v8 = a5;
  uint64_t v141 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)a2;
  int v110 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  long long v113 = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  LODWORD(v14) = *(_DWORD *)(a2 + 68);
  unsigned int v107 = *(_DWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  int v116 = *(_DWORD *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 32);
  long long v134 = *(_OWORD *)(a2 + 16);
  long long v135 = v16;
  long long v133 = *(_OWORD *)a2;
  __int16 v17 = WORD2(v16);
  unsigned int v94 = v14;
  if ((BYTE4(v16) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    goto LABEL_16;
  }
  __int16 v92 = WORD2(v16);
  uint64_t v104 = v12;
  uint64_t v105 = v10;
  uint64_t v106 = v11;
  uint64_t v18 = v134;
  swift_beginAccess();
  uint64_t v101 = *(void *)a2;
  int v19 = *(_DWORD *)(a2 + 8);
  uint64_t v98 = *(void *)(a2 + 16);
  int v20 = *(_DWORD *)(a2 + 24);
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v23 = *(void *)(a2 + 48);
  uint64_t v24 = *(void *)(a2 + 56);
  uint64_t v88 = *(void *)(a2 + 72);
  uint64_t v89 = *(void *)(a2 + 64);
  int v87 = *(_DWORD *)(a2 + 80);
  long long v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v137[16] = *(_OWORD *)(a2 + 32);
  long long v138 = v25;
  long long v139 = *(_OWORD *)(a2 + 64);
  int v140 = *(_DWORD *)(a2 + 80);
  long long v26 = *(_OWORD *)(a2 + 16);
  long long v136 = *(_OWORD *)a2;
  *(_OWORD *)long long v137 = v26;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v27 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v29 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v134 + 81) & 1) != 0
    || v89 != *(_DWORD *)(v134 + 32)
    || v88 != *(_DWORD *)(v134 + 36)
    || v29 != *(_DWORD *)(v134 + 40)
    || v19 != *(_DWORD *)(v134 + 44)
    || v27 != *(_DWORD *)(v134 + 48)
    || v20 != *(_DWORD *)(v134 + 52))
  {
    *(void *)&long long v136 = v101;
    DWORD2(v136) = v19;
    *(void *)long long v137 = v98;
    *(_DWORD *)&v137[8] = v20;
    *(_DWORD *)&v137[12] = v27;
    *(void *)&v137[16] = v21;
    *(void *)&v137[24] = v22;
    *(void *)&long long v138 = v23;
    *((void *)&v138 + 1) = v24;
    *(void *)&long long v139 = v89;
    *((void *)&v139 + 1) = v88;
    int v140 = v87;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v136, v29, (uint64_t)&v127);
    long long v30 = v128;
    uint64_t v31 = v129;
    unsigned __int8 v32 = v130;
    unint64_t v33 = v129 | ((unint64_t)DWORD1(v129) << 32);
    unint64_t v34 = BYTE8(v129) | ((unint64_t)HIDWORD(v129) << 32);
    *(_OWORD *)(v18 + 32) = v127;
    *(_OWORD *)(v18 + 48) = v30;
    *(void *)(v18 + 64) = v33;
    *(void *)(v18 + 72) = v34;
    *(_WORD *)(v18 + 80) = v32;
    if (v31 != 1)
    {
      uint64_t v14 = HIDWORD(*((void *)&v30 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v134 + 64))
  {
LABEL_13:
    LODWORD(v14) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v14;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v14) = *(_DWORD *)(v134 + 60);
LABEL_15:
  unint64_t v8 = a5;
  uint64_t v11 = v106;
  unsigned int v5 = a4;
  __int16 v17 = v92;
  unsigned int v6 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v12 = v104;
  uint64_t v10 = v105;
LABEL_16:
  *(void *)&long long v136 = v9;
  DWORD2(v136) = v110;
  *(void *)long long v137 = v10;
  *(_OWORD *)&v137[8] = v113;
  *(void *)&v137[24] = v11;
  *(void *)&long long v138 = v12;
  *((void *)&v138 + 1) = v13;
  *(void *)&long long v139 = __PAIR64__(v14, v107);
  *((void *)&v139 + 1) = v15;
  int v140 = v116;
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v6, (uint64_t)&v136, v5, 0, &v118);
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *unint64_t v8 = v118;
    v8[1] = v119;
    return result;
  }
  uint64_t v37 = (ValueMetadata **)(v35 + 32);
  while (*v37 != &type metadata for DisplayList.Key)
  {
    v37 += 2;
    if (!--v36) {
      goto LABEL_57;
    }
  }
  Swift::UInt32 v117 = ++lastIdentity;
  uint64_t v38 = (int *)MEMORY[0x263F288F8];
  if ((v17 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v39 = v134;
    unint64_t v40 = (unsigned int *)(v134 + 16);
    swift_beginAccess();
    if ((v17 & 0x20) == 0)
    {
      LODWORD(v114) = *(_DWORD *)(a2 + 64);
      unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      unsigned int v74 = *v40;
      *(void *)&long long v127 = v118;
      DWORD2(v127) = v119;
      unint64_t v75 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v75 & 0x100000000) != 0) {
        int v76 = *v38;
      }
      else {
        int v76 = v75;
      }
      uint64_t v77 = v133;
      *(void *)&long long v120 = v133;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v133);
      outlined retain of ViewTransform((uint64_t)&v120);
      uint64_t v78 = specialized find<A>(_:key:)(v77);
      if (v78) {
        char v79 = *(unsigned char *)(v78 + 72);
      }
      else {
        char v79 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v120);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v133);
      outlined retain of ViewTransform((uint64_t)&v120);
      uint64_t v80 = specialized find<A>(_:key:)(v77);
      if (v80) {
        int v81 = *(_DWORD *)(v80 + 72);
      }
      else {
        int v81 = 0;
      }
      unsigned int v82 = *(_DWORD *)(a2 + 60);
      unsigned int v83 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v120);
      outlined release of _GraphInputs((uint64_t)&v133);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&long long v127 = __PAIR64__(a1, v117);
      *((void *)&v127 + 1) = __PAIR64__(OffsetAttribute2, v114);
      *(void *)&long long v128 = __PAIR64__(v94, v82);
      *((void *)&v128 + 1) = __PAIR64__(v83, v74);
      LODWORD(v129) = v76;
      BYTE4(v129) = v79;
      DWORD2(v129) = 0;
      HIDWORD(v129) = v81;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      unsigned int v84 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v127) = 0;
      PreferencesOutputs.subscript.setter(v84, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    uint64_t v97 = v8;
    uint64_t v42 = *(void *)a2;
    int v43 = *(_DWORD *)(a2 + 8);
    unsigned int v44 = *(_DWORD *)(a2 + 24);
    uint64_t v45 = *(void *)(a2 + 32);
    uint64_t v46 = *(void *)(a2 + 48);
    uint64_t v108 = *(void *)(a2 + 40);
    uint64_t v111 = *(void *)(a2 + 16);
    uint64_t v47 = *(void *)(a2 + 56);
    uint64_t v115 = *(void *)(a2 + 64);
    uint64_t v102 = *(void *)(a2 + 72);
    int v99 = *(_DWORD *)(a2 + 80);
    long long v48 = *(_OWORD *)(a2 + 48);
    long long v129 = *(_OWORD *)(a2 + 32);
    long long v130 = v48;
    long long v131 = *(_OWORD *)(a2 + 64);
    int v132 = *(_DWORD *)(a2 + 80);
    long long v49 = *(_OWORD *)(a2 + 16);
    long long v127 = *(_OWORD *)a2;
    long long v128 = v49;
    outlined retain of _ViewInputs(a2);
    unsigned int v50 = _ViewInputs.geometryTransaction()();
    uint64_t v51 = swift_getKeyPath();
    int v52 = specialized CachedEnvironment.attribute<A>(keyPath:)(v51);
    swift_release();
    if ((*(unsigned char *)(v39 + 81) & 1) == 0
      && v115 == *(_DWORD *)(v39 + 32)
      && v102 == *(_DWORD *)(v39 + 36)
      && v52 == *(_DWORD *)(v39 + 40)
      && v43 == *(_DWORD *)(v39 + 44)
      && v50 == *(_DWORD *)(v39 + 48)
      && v44 == *(_DWORD *)(v39 + 52))
    {
      if ((*(unsigned char *)(v39 + 64) & 1) == 0)
      {
        LODWORD(v114) = *(_DWORD *)(v39 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&long long v127 = v42;
      DWORD2(v127) = v43;
      *(void *)&long long v128 = v111;
      *((void *)&v128 + 1) = __PAIR64__(v50, v44);
      *(void *)&long long v129 = v45;
      *((void *)&v129 + 1) = v108;
      *(void *)&long long v130 = v46;
      *((void *)&v130 + 1) = v47;
      *(void *)&long long v131 = v115;
      *((void *)&v131 + 1) = v102;
      int v132 = v99;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v52, (uint64_t)&v120);
      long long v53 = v121;
      uint64_t v54 = v122;
      unsigned __int8 v55 = v126;
      unint64_t v56 = v122 | ((unint64_t)v123 << 32);
      unint64_t v57 = v124 | ((unint64_t)v125 << 32);
      *(_OWORD *)(v39 + 32) = v120;
      *(_OWORD *)(v39 + 48) = v53;
      *(void *)(v39 + 64) = v56;
      *(void *)(v39 + 72) = v57;
      *(_WORD *)(v39 + 80) = v55;
      if (v54 != 1)
      {
        uint64_t v114 = HIDWORD(*((void *)&v53 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v58 = *(void *)a2;
        int v59 = *(_DWORD *)(a2 + 8);
        unsigned int v60 = *(_DWORD *)(a2 + 24);
        uint64_t v61 = *(void *)(a2 + 32);
        uint64_t v62 = *(void *)(a2 + 48);
        uint64_t v109 = *(void *)(a2 + 40);
        uint64_t v112 = *(void *)(a2 + 16);
        uint64_t v63 = *(void *)(a2 + 56);
        uint64_t v100 = *(void *)(a2 + 72);
        uint64_t v103 = *(void *)(a2 + 64);
        int v93 = *(_DWORD *)(a2 + 80);
        long long v64 = *(_OWORD *)(a2 + 48);
        long long v129 = *(_OWORD *)(a2 + 32);
        long long v130 = v64;
        long long v131 = *(_OWORD *)(a2 + 64);
        int v132 = *(_DWORD *)(a2 + 80);
        long long v65 = *(_OWORD *)(a2 + 16);
        long long v127 = *(_OWORD *)a2;
        long long v128 = v65;
        outlined retain of _ViewInputs(a2);
        unsigned int v66 = _ViewInputs.geometryTransaction()();
        uint64_t v67 = swift_getKeyPath();
        int v68 = specialized CachedEnvironment.attribute<A>(keyPath:)(v67);
        swift_release();
        if ((*(unsigned char *)(v39 + 81) & 1) == 0
          && v103 == *(_DWORD *)(v39 + 32)
          && v100 == *(_DWORD *)(v39 + 36)
          && v68 == *(_DWORD *)(v39 + 40)
          && v59 == *(_DWORD *)(v39 + 44)
          && v66 == *(_DWORD *)(v39 + 48)
          && v60 == *(_DWORD *)(v39 + 52))
        {
          uint64_t v38 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v39 + 72) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v39 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&long long v127 = v58;
          DWORD2(v127) = v59;
          *(void *)&long long v128 = v112;
          *((void *)&v128 + 1) = __PAIR64__(v66, v60);
          *(void *)&long long v129 = v61;
          *((void *)&v129 + 1) = v109;
          *(void *)&long long v130 = v62;
          *((void *)&v130 + 1) = v63;
          *(void *)&long long v131 = v103;
          *((void *)&v131 + 1) = v100;
          int v132 = v93;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v127, v68, (uint64_t)&v120);
          unsigned int OffsetAttribute2 = v123;
          uint64_t v69 = v124;
          unsigned __int8 v70 = v126;
          unint64_t v71 = v122 | ((unint64_t)v123 << 32);
          unint64_t v72 = v124 | ((unint64_t)v125 << 32);
          long long v73 = v121;
          *(_OWORD *)(v39 + 32) = v120;
          *(_OWORD *)(v39 + 48) = v73;
          *(void *)(v39 + 64) = v71;
          *(void *)(v39 + 72) = v72;
          *(_WORD *)(v39 + 80) = v70;
          uint64_t v38 = (int *)MEMORY[0x263F288F8];
          if (v69 != 1) {
            goto LABEL_46;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v39 + 68) = OffsetAttribute2;
        *(unsigned char *)(v39 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v8 = v97;
        goto LABEL_47;
      }
    }
    LODWORD(v114) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v39 + 60) = v114;
    *(unsigned char *)(v39 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v38)
  {
    LODWORD(v120) = v117;
    unsigned int v86 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v120);
    v86(&v127, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, long long *)@<X2>, void *a4@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, long long *);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  long long v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata **v35;
  int *v36;
  uint64_t v37;
  int *v38;
  unsigned int OffsetAttribute2;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  int v48;
  uint64_t v49;
  int v50;
  long long v51;
  uint64_t v52;
  unsigned __int8 v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  long long v62;
  long long v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned __int8 v68;
  unint64_t v69;
  unint64_t v70;
  long long v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t result;
  _DWORD *v84;
  void (*v85)(long long *, void);
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v90;
  int v91;
  char v92;
  int v93;
  void *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  Swift::UInt32 v116;
  uint64_t v117;
  uint64_t v118;
  long long v119;
  long long v120;
  unsigned __int8 v121;
  unsigned int v122;
  unsigned __int8 v123;
  unsigned int v124;
  unsigned __int8 v125;
  long long v126;
  unsigned char v127[32];
  long long v128;
  long long v129;
  int v130;
  long long v131;
  long long v132;
  long long v133;
  uint64_t v134;

  uint64_t v4 = a3;
  unsigned int v6 = a4;
  long long v134 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)a2;
  uint64_t v109 = *(_DWORD *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  uint64_t v112 = *(_OWORD *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  LODWORD(v12) = *(_DWORD *)(a2 + 68);
  uint64_t v106 = *(_DWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v115 = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(_OWORD *)(a2 + 32);
  int v132 = *(_OWORD *)(a2 + 16);
  long long v133 = v14;
  long long v131 = *(_OWORD *)a2;
  uint64_t v15 = WORD2(v14);
  int v93 = v12;
  if ((BYTE4(v14) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    goto LABEL_16;
  }
  uint64_t v90 = WORD2(v14);
  uint64_t v103 = v9;
  uint64_t v104 = v8;
  uint64_t v105 = v7;
  long long v16 = v132;
  swift_beginAccess();
  uint64_t v100 = *(void *)a2;
  __int16 v17 = *(_DWORD *)(a2 + 8);
  uint64_t v97 = *(void *)(a2 + 16);
  uint64_t v18 = *(_DWORD *)(a2 + 24);
  int v19 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(a2 + 40);
  int v20 = *(void *)(a2 + 48);
  uint64_t v22 = *(void *)(a2 + 56);
  int v87 = *(void *)(a2 + 72);
  uint64_t v88 = *(void *)(a2 + 64);
  unsigned int v86 = *(_DWORD *)(a2 + 80);
  uint64_t v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
  long long v128 = v23;
  long long v129 = *(_OWORD *)(a2 + 64);
  long long v130 = *(_DWORD *)(a2 + 80);
  uint64_t v24 = *(_OWORD *)(a2 + 16);
  unsigned __int8 v126 = *(_OWORD *)a2;
  *(_OWORD *)long long v127 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  long long v25 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v132 + 81) & 1) != 0
    || v88 != *(_DWORD *)(v132 + 32)
    || v87 != *(_DWORD *)(v132 + 36)
    || v27 != *(_DWORD *)(v132 + 40)
    || v17 != *(_DWORD *)(v132 + 44)
    || v25 != *(_DWORD *)(v132 + 48)
    || v18 != *(_DWORD *)(v132 + 52))
  {
    *(void *)&unsigned __int8 v126 = v100;
    DWORD2(v126) = v17;
    *(void *)long long v127 = v97;
    *(_DWORD *)&v127[8] = v18;
    *(_DWORD *)&v127[12] = v25;
    *(void *)&v127[16] = v19;
    *(void *)&v127[24] = v21;
    *(void *)&long long v128 = v20;
    *((void *)&v128 + 1) = v22;
    *(void *)&long long v129 = v88;
    *((void *)&v129 + 1) = v87;
    long long v130 = v86;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v27, (uint64_t)&v119);
    long long v28 = v120;
    int v29 = v121;
    long long v30 = v125;
    uint64_t v31 = v121 | ((unint64_t)v122 << 32);
    unsigned __int8 v32 = v123 | ((unint64_t)v124 << 32);
    *(_OWORD *)(v16 + 32) = v119;
    *(_OWORD *)(v16 + 48) = v28;
    *(void *)(v16 + 64) = v31;
    *(void *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if (v29 != 1)
    {
      uint64_t v12 = HIDWORD(*((void *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v132 + 64))
  {
LABEL_13:
    LODWORD(v12) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v12;
    *(unsigned char *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v12) = *(_DWORD *)(v132 + 60);
LABEL_15:
  unsigned int v6 = a4;
  unint64_t v8 = v104;
  unint64_t v7 = v105;
  uint64_t v9 = v103;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v15 = v90;
  uint64_t v4 = a3;
LABEL_16:
  *(void *)&unsigned __int8 v126 = v7;
  DWORD2(v126) = v109;
  *(void *)long long v127 = v8;
  *(_OWORD *)&v127[8] = v112;
  *(void *)&v127[24] = v10;
  *(void *)&long long v128 = v9;
  *((void *)&v128 + 1) = v11;
  *(void *)&long long v129 = __PAIR64__(v12, v106);
  *((void *)&v129 + 1) = v13;
  long long v130 = v115;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4(&v117, &v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v33 = *(void *)(a2 + 48);
  unint64_t v34 = *(void *)(v33 + 16);
  if (!v34)
  {
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *unsigned int v6 = v117;
    v6[1] = v118;
    return result;
  }
  uint64_t v35 = (ValueMetadata **)(v33 + 32);
  while (*v35 != &type metadata for DisplayList.Key)
  {
    v35 += 2;
    if (!--v34) {
      goto LABEL_57;
    }
  }
  int v116 = ++lastIdentity;
  uint64_t v36 = (int *)MEMORY[0x263F288F8];
  if ((v15 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v37 = v132;
    uint64_t v38 = (int *)(v132 + 16);
    swift_beginAccess();
    if ((v15 & 0x20) == 0)
    {
      LODWORD(v113) = *(_DWORD *)(a2 + 64);
      unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      unint64_t v72 = *v38;
      *(void *)&unsigned __int8 v126 = v117;
      DWORD2(v126) = v118;
      long long v73 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v73 & 0x100000000) != 0) {
        unsigned int v74 = *v36;
      }
      else {
        unsigned int v74 = v73;
      }
      unint64_t v75 = v131;
      *(void *)&uint64_t v119 = v131;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v131);
      outlined retain of ViewTransform((uint64_t)&v119);
      int v76 = specialized find<A>(_:key:)(v75);
      if (v76) {
        uint64_t v77 = *(unsigned char *)(v76 + 72);
      }
      else {
        uint64_t v77 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v119);
      outlined release of _GraphInputs((uint64_t)&v131);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v131);
      outlined retain of ViewTransform((uint64_t)&v119);
      uint64_t v78 = specialized find<A>(_:key:)(v75);
      if (v78) {
        char v79 = *(_DWORD *)(v78 + 72);
      }
      else {
        char v79 = 0;
      }
      uint64_t v80 = *(_DWORD *)(a2 + 60);
      int v81 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v119);
      outlined release of _GraphInputs((uint64_t)&v131);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&unsigned __int8 v126 = __PAIR64__(a1, v116);
      *((void *)&v126 + 1) = __PAIR64__(OffsetAttribute2, v113);
      *(_DWORD *)long long v127 = v80;
      *(_DWORD *)&v127[4] = v93;
      *(_DWORD *)&v127[8] = v72;
      *(_DWORD *)&v127[12] = v81;
      *(_DWORD *)&v127[16] = v74;
      v127[20] = v77;
      *(_DWORD *)&v127[24] = 0;
      *(_DWORD *)&v127[28] = v79;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for TypedElement<_ViewInputs.ScrapeableParentID>(0, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RendererEffectDisplayList);
      lazy protocol witness table accessor for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, (uint64_t)&type metadata for ContentTransitionEffect, (uint64_t)&protocol witness table for ContentTransitionEffect);
      unsigned int v82 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v126) = 0;
      PreferencesOutputs.subscript.setter(v82, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    unsigned int v96 = v6;
    unint64_t v40 = *(void *)a2;
    uint64_t v41 = *(_DWORD *)(a2 + 8);
    uint64_t v42 = *(_DWORD *)(a2 + 24);
    int v43 = *(void *)(a2 + 32);
    unsigned int v44 = *(void *)(a2 + 48);
    unsigned int v107 = *(void *)(a2 + 40);
    int v110 = *(void *)(a2 + 16);
    uint64_t v45 = *(void *)(a2 + 56);
    uint64_t v114 = *(void *)(a2 + 64);
    uint64_t v101 = *(void *)(a2 + 72);
    uint64_t v98 = *(_DWORD *)(a2 + 80);
    uint64_t v46 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
    long long v128 = v46;
    long long v129 = *(_OWORD *)(a2 + 64);
    long long v130 = *(_DWORD *)(a2 + 80);
    uint64_t v47 = *(_OWORD *)(a2 + 16);
    unsigned __int8 v126 = *(_OWORD *)a2;
    *(_OWORD *)long long v127 = v47;
    outlined retain of _ViewInputs(a2);
    long long v48 = _ViewInputs.geometryTransaction()();
    long long v49 = swift_getKeyPath();
    unsigned int v50 = specialized CachedEnvironment.attribute<A>(keyPath:)(v49);
    swift_release();
    if ((*(unsigned char *)(v37 + 81) & 1) == 0
      && v114 == *(_DWORD *)(v37 + 32)
      && v101 == *(_DWORD *)(v37 + 36)
      && v50 == *(_DWORD *)(v37 + 40)
      && v41 == *(_DWORD *)(v37 + 44)
      && v48 == *(_DWORD *)(v37 + 48)
      && v42 == *(_DWORD *)(v37 + 52))
    {
      if ((*(unsigned char *)(v37 + 64) & 1) == 0)
      {
        LODWORD(v113) = *(_DWORD *)(v37 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&unsigned __int8 v126 = v40;
      DWORD2(v126) = v41;
      *(void *)long long v127 = v110;
      *(_DWORD *)&v127[8] = v42;
      *(_DWORD *)&v127[12] = v48;
      *(void *)&v127[16] = v43;
      *(void *)&v127[24] = v107;
      *(void *)&long long v128 = v44;
      *((void *)&v128 + 1) = v45;
      *(void *)&long long v129 = v114;
      *((void *)&v129 + 1) = v101;
      long long v130 = v98;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v50, (uint64_t)&v119);
      uint64_t v51 = v120;
      int v52 = v121;
      long long v53 = v125;
      uint64_t v54 = v121 | ((unint64_t)v122 << 32);
      unsigned __int8 v55 = v123 | ((unint64_t)v124 << 32);
      *(_OWORD *)(v37 + 32) = v119;
      *(_OWORD *)(v37 + 48) = v51;
      *(void *)(v37 + 64) = v54;
      *(void *)(v37 + 72) = v55;
      *(_WORD *)(v37 + 80) = v53;
      if (v52 != 1)
      {
        long long v113 = HIDWORD(*((void *)&v51 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v56 = *(void *)a2;
        unint64_t v57 = *(_DWORD *)(a2 + 8);
        uint64_t v58 = *(_DWORD *)(a2 + 24);
        int v59 = *(void *)(a2 + 32);
        unsigned int v60 = *(void *)(a2 + 48);
        uint64_t v108 = *(void *)(a2 + 40);
        uint64_t v111 = *(void *)(a2 + 16);
        uint64_t v61 = *(void *)(a2 + 56);
        int v99 = *(void *)(a2 + 72);
        uint64_t v102 = *(void *)(a2 + 64);
        uint64_t v91 = *(_DWORD *)(a2 + 80);
        uint64_t v62 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
        long long v128 = v62;
        long long v129 = *(_OWORD *)(a2 + 64);
        long long v130 = *(_DWORD *)(a2 + 80);
        uint64_t v63 = *(_OWORD *)(a2 + 16);
        unsigned __int8 v126 = *(_OWORD *)a2;
        *(_OWORD *)long long v127 = v63;
        outlined retain of _ViewInputs(a2);
        long long v64 = _ViewInputs.geometryTransaction()();
        long long v65 = swift_getKeyPath();
        unsigned int v66 = specialized CachedEnvironment.attribute<A>(keyPath:)(v65);
        swift_release();
        if ((*(unsigned char *)(v37 + 81) & 1) == 0
          && v102 == *(_DWORD *)(v37 + 32)
          && v99 == *(_DWORD *)(v37 + 36)
          && v66 == *(_DWORD *)(v37 + 40)
          && v57 == *(_DWORD *)(v37 + 44)
          && v64 == *(_DWORD *)(v37 + 48)
          && v58 == *(_DWORD *)(v37 + 52))
        {
          uint64_t v36 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v37 + 72) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v37 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&unsigned __int8 v126 = v56;
          DWORD2(v126) = v57;
          *(void *)long long v127 = v111;
          *(_DWORD *)&v127[8] = v58;
          *(_DWORD *)&v127[12] = v64;
          *(void *)&v127[16] = v59;
          *(void *)&v127[24] = v108;
          *(void *)&long long v128 = v60;
          *((void *)&v128 + 1) = v61;
          *(void *)&long long v129 = v102;
          *((void *)&v129 + 1) = v99;
          long long v130 = v91;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v66, (uint64_t)&v119);
          unsigned int OffsetAttribute2 = v122;
          uint64_t v67 = v123;
          int v68 = v125;
          uint64_t v69 = v121 | ((unint64_t)v122 << 32);
          unsigned __int8 v70 = v123 | ((unint64_t)v124 << 32);
          unint64_t v71 = v120;
          *(_OWORD *)(v37 + 32) = v119;
          *(_OWORD *)(v37 + 48) = v71;
          *(void *)(v37 + 64) = v69;
          *(void *)(v37 + 72) = v70;
          *(_WORD *)(v37 + 80) = v68;
          uint64_t v36 = (int *)MEMORY[0x263F288F8];
          if (v67 != 1) {
            goto LABEL_46;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v37 + 68) = OffsetAttribute2;
        *(unsigned char *)(v37 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unsigned int v6 = v96;
        goto LABEL_47;
      }
    }
    LODWORD(v113) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v37 + 60) = v113;
    *(unsigned char *)(v37 + 64) = 0;
    goto LABEL_35;
  }
  __int16 v92 = v15;
  unsigned int v84 = (_DWORD *)MEMORY[0x263F288F8];
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v84)
  {
    LODWORD(v119) = v116;
    unsigned int v85 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v119);
    v85(&v126, 0);
    uint64_t v36 = (int *)MEMORY[0x263F288F8];
    LOBYTE(v15) = v92;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

unint64_t static RendererEffectDisplayList.scrapeContent(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetAttributeInfo();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(type metadata accessor for RendererEffectDisplayList() + 16);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v9, Value, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v18, a2, a3);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  unint64_t v15 = v18;
  if ((~v18 & 0xF000000000000007) != 0)
  {
    uint64_t v17 = v18;
    closure #1 in static RendererEffectDisplayList.scrapeContent(from:)(&v17, v11, a4);
    return outlined consume of ScrapeableContent.Content?(v15);
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(void *)(a4 + 32) = 1;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
  }
  return result;
}

unint64_t closure #1 in static RendererEffectDisplayList.scrapeContent(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v9 = *a1;
  unint64_t v4 = v9;
  int v5 = *(_DWORD *)(a2 + 40);
  int v7 = *(_DWORD *)(a2 + 44);
  int v8 = v5;
  type metadata accessor for RendererEffectDisplayList();
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)((uint64_t *)&v9, &v8, &v7, a3);
  return outlined copy of ScrapeableContent.Content(v4);
}

unint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance RendererEffectDisplayList<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static RendererEffectDisplayList.scrapeContent(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t ResetPositionTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*(float64x2_t *)(Value + 24), vsubq_f64(*(float64x2_t *)AGGraphGetValue(), *(float64x2_t *)(Value + 8)));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;

  return swift_retain();
}

id GraphicsFilter.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v20 = *(void *)(v1 + 8);
  uint64_t v18 = *(void *)(v1 + 24);
  int v19 = *(void **)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 40);
  uint64_t v17 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v14 = *(void *)(v1 + 56);
  uint64_t v15 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  int v10 = *(_DWORD *)(v1 + 112);
  char v11 = *(unsigned char *)(v1 + 116);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v20;
  *(void *)(v12 + 32) = v19;
  *(void *)(v12 + 40) = v18;
  *(void *)(v12 + 48) = v17;
  *(void *)(v12 + 56) = v16;
  *(void *)(v12 + 64) = v15;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = v4;
  *(void *)(v12 + 88) = v5;
  *(void *)(v12 + 96) = v6;
  *(void *)(v12 + 104) = v7;
  *(void *)(v12 + 112) = v8;
  *(void *)(v12 + 120) = v9;
  *(_DWORD *)(v12 + 128) = v10;
  *(unsigned char *)(v12 + 132) = v11;
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return outlined copy of GraphicsFilter(v3, v20, v19, v18, v17, v16, v15, v14, v4, v5, v6, v7, v8, v9, v10, SBYTE2(v10));
}

id protocol witness for _RendererEffect.effectValue(size:) in conformance GraphicsFilter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v20 = *(void *)(v1 + 8);
  uint64_t v18 = *(void *)(v1 + 24);
  int v19 = *(void **)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 40);
  uint64_t v17 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v14 = *(void *)(v1 + 56);
  uint64_t v15 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  int v10 = *(_DWORD *)(v1 + 112);
  char v11 = *(unsigned char *)(v1 + 116);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v20;
  *(void *)(v12 + 32) = v19;
  *(void *)(v12 + 40) = v18;
  *(void *)(v12 + 48) = v17;
  *(void *)(v12 + 56) = v16;
  *(void *)(v12 + 64) = v15;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = v4;
  *(void *)(v12 + 88) = v5;
  *(void *)(v12 + 96) = v6;
  *(void *)(v12 + 104) = v7;
  *(void *)(v12 + 112) = v8;
  *(void *)(v12 + 120) = v9;
  *(_DWORD *)(v12 + 128) = v10;
  *(unsigned char *)(v12 + 132) = v11;
  *(void *)a1 = v12;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return outlined copy of GraphicsFilter(v3, v20, v19, v18, v17, v16, v15, v14, v4, v5, v6, v7, v8, v9, v10, SBYTE2(v10));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsFilter(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t GraphicsBlendMode.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = 5;
  return outlined copy of GraphicsBlendMode(v2, v3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GraphicsBlendMode(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VariableBlurStyle(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance Shader.ResolvedShader(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _LuminanceToAlphaEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LuminanceCurveEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect(long long *a1, uint64_t (*a2)(long long *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SaturationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMultiplyEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _ClipEffect<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HueRotationEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t sub_245C6954C()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for ResetPositionTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for GraphicsFilter(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GraphicsFilter and conformance GraphicsFilter();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsFilter and conformance GraphicsFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter;
  if (!lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsFilter and conformance GraphicsFilter);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for GraphicsBlendMode(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GraphicsBlendMode and conformance GraphicsBlendMode();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicsBlendMode and conformance GraphicsBlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode;
  if (!lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicsBlendMode and conformance GraphicsBlendMode);
  }
  return result;
}

uint64_t dispatch thunk of _RendererEffect.effectValue(size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _RendererEffect.isolatesChildPosition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static _RendererEffect.disabledForFlattenedContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static _RendererEffect.preservesEmptyContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static _RendererEffect.isScrapeable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _RendererEffect.scrapeableContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for ResetPositionTransform()
{
  return &type metadata for ResetPositionTransform;
}

unint64_t outlined consume of ScrapeableContent.Content?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of ScrapeableContent.Content(result);
  }
  return result;
}

uint64_t static _GeometryGroupEffect.isolatesChildPosition.getter()
{
  return 1;
}

void _GeometryGroupEffect.effectValue(size:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 19;
}

uint64_t static _GeometryGroupEffect.== infix(_:_:)()
{
  return 1;
}

unint64_t instantiation function for generic protocol witness table for _GeometryGroupEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _GeometryGroupEffect and conformance _GeometryGroupEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _GeometryGroupEffect and conformance _GeometryGroupEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect;
  if (!lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GeometryGroupEffect and conformance _GeometryGroupEffect);
  }
  return result;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _GeometryGroupEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 19;
}

uint64_t StaticIf<>.init<>(_:then:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v8(a5, a2, a4);
}

uint64_t StaticIf.trueBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t StaticIf.trueBody.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*StaticIf.trueBody.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StaticIf.falseBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t StaticIf.falseBody.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 32) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*StaticIf.falseBody.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StaticIf<>.init<>(_:then:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t StaticIf<>.init(_:then:else:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v21 = a4;
  uint64_t v12 = *(void *)(a5 - 8);
  double v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v16(v13);
  a2(v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  uint64_t v22 = a3;
  uint64_t v23 = v21;
  uint64_t v24 = a5;
  uint64_t v25 = a7;
  uint64_t v18 = type metadata accessor for StaticIf();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6 + *(int *)(v18 + 52), v15, a5);
}

uint64_t StaticIf<>.init<>(_:then:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  char v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12(v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a3);
}

uint64_t StaticIf<>.init<A>(in:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
  type metadata accessor for StyleContextAcceptsPredicate();
  a2();
  uint64_t v10 = type metadata accessor for StaticIf();
  return a4(v10, v11, v12, v13);
}

uint64_t StaticIf<>.init<A>(in:then:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return type metadata accessor for StaticIf();
}

uint64_t static StaticIf<>._viewListCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  int v11 = *((_DWORD *)a1 + 4);
  uint64_t v12 = a1[3];
  int v13 = *MEMORY[0x263F288F8];
  uint64_t v14 = MEMORY[0x263F8EE78];
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v14;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_WORD *)(v16 + 80) = 256;
  *(void *)(v16 + 88) = v15;
  uint64_t v21 = v10;
  LODWORD(v22) = v13;
  uint64_t v23 = v16;
  LODWORD(v24) = v13;
  HIDWORD(v24) = v13;
  int v25 = -1;
  int v26 = v11;
  uint64_t v27 = MEMORY[0x263F8EE88];
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  LOBYTE(a2) = v17(&v21, a2, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v21 = v10;
  uint64_t v22 = v9;
  LODWORD(v23) = v11;
  uint64_t v24 = v12;
  if (a2) {
    return (*(uint64_t (**)(uint64_t *))(a6 + 40))(&v21);
  }
  else {
    return (*(uint64_t (**)(uint64_t *))(a7 + 40))(&v21);
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> StaticIf<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static StaticIf<>._viewListCount(inputs:)(a1, a2[2], a2[3], a2[4], a2[5], *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t StaticIf<>.init<A>(idiom:then:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  type metadata accessor for InterfaceIdiomPredicate();
  return StaticIf<>.init(_:then:else:)(a2, v8, a3, (uint64_t)&type metadata for EmptyModifier, a5);
}

uint64_t StaticIf<>.init<A>(in:then:else:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  type metadata accessor for StyleContextAcceptsPredicate();

  return StaticIf<>.init(_:then:else:)(a2, a3, a4, a5, a7);
}

double static StaticIf<>._makeGesture(gesture:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v16 = *a1;
  uint64_t v17 = *a2;
  unsigned int v18 = *((_DWORD *)a2 + 2);
  unsigned int v43 = *((_DWORD *)a2 + 3);
  uint64_t v19 = a2[2];
  unsigned int v20 = *((_DWORD *)a2 + 6);
  unsigned int v21 = *((_DWORD *)a2 + 7);
  int v22 = *((_DWORD *)a2 + 8);
  int v23 = *((_DWORD *)a2 + 9);
  uint64_t v24 = a2[5];
  uint64_t v38 = a2[6];
  int v37 = *((_DWORD *)a2 + 14);
  int v36 = *((_DWORD *)a2 + 15);
  int v35 = *((_DWORD *)a2 + 16);
  int v34 = *((_DWORD *)a2 + 17);
  int v33 = *((_DWORD *)a2 + 18);
  int v32 = *((_DWORD *)a2 + 19);
  int v31 = *((_DWORD *)a2 + 20);
  long long v25 = *(_OWORD *)((char *)a2 + 100);
  long long v68 = *(_OWORD *)((char *)a2 + 84);
  long long v69 = v25;
  uint64_t v70 = *(uint64_t *)((char *)a2 + 116);
  uint64_t v46 = v17;
  uint64_t v47 = v17;
  unsigned int v45 = v18;
  LODWORD(v48) = v18;
  uint64_t v44 = v19;
  uint64_t v49 = v19;
  unsigned int v42 = v20;
  unint64_t v50 = __PAIR64__(v21, v20);
  unsigned int v41 = v21;
  int v40 = v22;
  int v51 = v22;
  int v39 = v23;
  int v52 = v23;
  uint64_t v53 = v24;
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v47, a3, a6);
  v30[1] = v30;
  if (v26)
  {
    MEMORY[0x270FA5388](v26);
    LODWORD(v66[0]) = v16;
    uint64_t v47 = a3;
    unint64_t v48 = a4;
    uint64_t v49 = a5;
    unint64_t v50 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StaticIf<>._makeGesture(gesture:inputs:), a4, &v65);
    long long v63 = v69;
    uint64_t v47 = v46;
    unint64_t v48 = __PAIR64__(v43, v45);
    uint64_t v49 = v44;
    unint64_t v50 = __PAIR64__(v41, v42);
    int v51 = v40;
    int v52 = v39;
    uint64_t v53 = v24;
    uint64_t v54 = v38;
    int v55 = v37;
    int v56 = v36;
    int v57 = v35;
    int v58 = v34;
    int v59 = v33;
    int v60 = v32;
    int v61 = v31;
    uint64_t v64 = v70;
    long long v62 = v68;
    (*(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(v66, &v65, &v47, a4, a7);
  }
  else
  {
    MEMORY[0x270FA5388](v26);
    LODWORD(v66[0]) = v16;
    uint64_t v47 = a3;
    unint64_t v48 = a4;
    uint64_t v49 = a5;
    unint64_t v50 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:), a5, &v65);
    long long v63 = v69;
    uint64_t v47 = v46;
    unint64_t v48 = __PAIR64__(v43, v45);
    uint64_t v49 = v44;
    unint64_t v50 = __PAIR64__(v41, v42);
    int v51 = v40;
    int v52 = v39;
    uint64_t v53 = v24;
    uint64_t v54 = v38;
    int v55 = v37;
    int v56 = v36;
    int v57 = v35;
    int v58 = v34;
    int v59 = v33;
    int v60 = v32;
    int v61 = v31;
    uint64_t v64 = v70;
    long long v62 = v68;
    (*(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a8 + 32))(v66, &v65, &v47, a5, a8);
  }
  double result = *(double *)v66;
  uint64_t v28 = v66[1];
  int v29 = v67;
  *(void *)a9 = v66[0];
  *(void *)(a9 + 8) = v28;
  *(_DWORD *)(a9 + 16) = v29;
  return result;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance <> StaticIf<A, B, C>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static StaticIf<>._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t ViewModifier.requiring<A, B>(_:and:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a2 - 8);
  double v15 = MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AndOperationViewInputPredicate.init()(v18, v19, v20, v21, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v7, a2);
  v24[0] = a3;
  v24[1] = a4;
  v24[2] = a5;
  v24[3] = a6;
  uint64_t v22 = type metadata accessor for AndOperationViewInputPredicate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v22, v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7, v17, a2);
}

uint64_t View.staticIf<A, B, C>(idiom:trueModifier:falseModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = type metadata accessor for InterfaceIdiomPredicate();

  return View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(v18, a2, a3, a4, a5, a6, v18, a8, a9, a10, (uint64_t)&protocol witness table for InterfaceIdiomPredicate<A>, a12, a13);
}

uint64_t View.staticIf<A, B>(idiom:trueModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = type metadata accessor for InterfaceIdiomPredicate();

  return View.staticIf<A, B>(_:trueModifier:)(v14, a2, a3, a4, v14, a6, a7, (uint64_t)&protocol witness table for InterfaceIdiomPredicate<A>, a9);
}

uint64_t View.staticIf<A, B>(context:trueModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = type metadata accessor for StyleContextAcceptsPredicate();

  return View.staticIf<A, B>(_:trueModifier:)(v14, a2, a3, a4, v14, a6, a7, (uint64_t)&protocol witness table for StyleContextAcceptsPredicate<A>, a9);
}

uint64_t partial apply for closure #1 in static StaticIf<>._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:)(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), closure #1 in static StaticIf<>._makeView(view:inputs:));
}

uint64_t instantiation function for generic protocol witness table for <> StaticIf<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for StaticIf(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for StaticIf(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245C6B09CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t sub_245C6B0C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B158()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B1C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B234()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B2B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B338()
{
  return swift_getWitnessTable();
}

uint64_t sub_245C6B3B8()
{
  return swift_getWitnessTable();
}

void Text.Effect.AttributeTracker.AnyValue.copy.getter()
{
}

void Text.Effect.AttributeTracker.AnyValue.isSettled.getter()
{
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__allocating_init(_:)(uint64_t a1)
{
  return Text.Effect.AttributeTracker.ValueBox.init(_:)(a1);
}

uint64_t Text.Effect.AttributeTracker.ValueBox.init(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v4 = type metadata accessor for Text.Effect.AttributeTracker.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t Text.Effect.AttributeTracker.ValueBox.copy.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for Text.Effect.AttributeTracker.Value();
  double v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, char *, double))(v6 + 16))((char *)&v8 - v4, &v0[*(void *)(v1 + 120)], v3);
  swift_allocObject();
  return Text.Effect.AttributeTracker.ValueBox.init(_:)((uint64_t)v5);
}

BOOL Text.Effect.AttributeTracker.ValueBox.isSettled.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Text.Effect.AttributeTracker.Value();
  uint64_t v3 = v1 + *(int *)(v2 + 48);
  if (*(unsigned char *)(v3 + 8)) {
    return 1;
  }
  uint64_t v4 = v1 + *(int *)(v2 + 52);
  return (*(unsigned char *)(v4 + 8) & 1) != 0 || *(double *)v4 <= *(double *)v3;
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Text.Effect.AttributeTracker.Value();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t Text.Effect.AttributeTracker.ValueBox.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v2 = type metadata accessor for Text.Effect.AttributeTracker.Value();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t Text.Effect.AttributeTracker.ValueBox.__deallocating_deinit()
{
  Text.Effect.AttributeTracker.ValueBox.deinit();

  return swift_deallocClassInstance();
}

void Text.Effect.AttributeTracker.Key.hash(into:)()
{
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(void *)(v0 + 16));
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v1 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int Text.Effect.AttributeTracker.Key.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(*(void *)(v0 + 8));
  Hasher._combine(_:)(*(void *)(v0 + 16));
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v1 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.AttributeTracker.Key()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  Swift::UInt v4 = *(void *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  Swift::UInt v6 = *(void *)(v0 + 40);
  int v7 = *(unsigned __int8 *)(v0 + 48);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  if (v5 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    if (!v7) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(0);
  if (v7) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.AttributeTracker.Key(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  long long v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return specialized static Text.Effect.AttributeTracker.Key.== infix(_:_:)((BOOL)v5, (uint64_t)v7);
}

uint64_t Text.Effect.AttributeTracker.Tracker.commitUpdates()()
{
  Swift::UInt v1 = (void *)v0;
  *(unsigned char *)(v0 + 32) = 2 * (*(unsigned char *)(v0 + 32) == 1);
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x263F8EE80];
    *Swift::UInt v1 = MEMORY[0x263F8EE80];
    v1[1] = v23;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    v1[3] = v23;
    return result;
  }
  uint64_t v3 = *(void *)(v0 + 8);
  if ((unint64_t)v2 >= *(void *)(v3 + 16))
  {
LABEL_29:
    uint64_t v24 = v1[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *Swift::UInt v1 = v24;
    return result;
  }
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v8) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_28;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_22:
    uint64_t v16 = *(void *)(v3 + 56);
    uint64_t v17 = *(void *)(v3 + 48) + 56 * v12;
    long long v18 = *(_OWORD *)(v17 + 16);
    v25[0] = *(_OWORD *)v17;
    v25[1] = v18;
    void v25[2] = *(_OWORD *)(v17 + 32);
    char v26 = *(unsigned char *)(v17 + 48);
    uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)(v16 + 8 * v12) + 88))(result);
    if (result)
    {
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v25);
      if (v19)
      {
        unint64_t v20 = result;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = v1[1];
        v1[1] = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native) {
          specialized _NativeDictionary.copy()();
        }
        specialized _NativeDictionary._delete(at:)(v20, v22);
        v1[1] = v22;
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_28:
    swift_release();
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t Text.Effect.AttributeTracker.needsUpdate(for:state:interval:consideringRestart:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  double v10 = *(double *)(a2 + 16);
  double v11 = *(double *)(a2 + 24);
  uint64_t v12 = v6 + 56;
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)v12 + 16))
    {
      *(void *)uint64_t v12 = MEMORY[0x263F8EE88];
      swift_bridgeObjectRelease();
    }
    if ((a5 & 1) == 0)
    {
      double v15 = v11 - v10;
      if (v11 - v10 < 0.0) {
        double v15 = 0.0;
      }
      if (v15 < *(double *)&a3 || v15 > *(double *)&a4)
      {
        if ((a6 & 1) == 0 || (swift_beginAccess(), *(unsigned char *)(v6 + 48) != 2))
        {
          swift_beginAccess();
          uint64_t v17 = *(void *)(v6 + 40);
          uint64_t v18 = *(void *)(v17 + 16);
          if (v18)
          {
            uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
            if (v20)
            {
              LOBYTE(v18) = *(void *)(*(void *)(v17 + 56) + 8 * v19) != 0;
              return v18 & 1;
            }
LABEL_25:
            LOBYTE(v18) = 0;
            return v18 & 1;
          }
          return v18 & 1;
        }
      }
    }
LABEL_20:
    LOBYTE(v18) = 1;
    return v18 & 1;
  }
  uint64_t v21 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 80);
  swift_beginAccess();
  char v23 = specialized Set.contains(_:)(a1, *(void *)(v6 + 56));
  swift_beginAccess();
  uint64_t v24 = *(void *)(v6 + 40);
  if (*(void *)(v24 + 16))
  {
    uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v26)
    {
      if (*(void *)(*(void *)(v24 + 56) + 8 * v25)) {
        goto LABEL_20;
      }
    }
  }
  if (a5)
  {
    if (v23) {
      goto LABEL_25;
    }
  }
  else
  {
    double v27 = v11 - v10;
    if (v11 - v10 < 0.0) {
      double v27 = 0.0;
    }
    if ((v27 < *(double *)&a3) | v23 & 1) {
      goto LABEL_25;
    }
  }
  char v28 = (v21 | v22) == 0;
  if (v21 && v22)
  {
    int v29 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 88);
    swift_retain();
    swift_retain();
    char v28 = v29(v22);
    swift_release();
    swift_release();
  }
  LOBYTE(v18) = v28 ^ 1;
  return v18 & 1;
}

uint64_t Text.Effect.AttributeTracker.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker()
{
  return self;
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.AnyValue()
{
  return self;
}

uint64_t type metadata completion function for Text.Effect.AttributeTracker.ValueBox()
{
  uint64_t result = type metadata accessor for Text.Effect.AttributeTracker.Value();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.ValueBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Text.Effect.AttributeTracker.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Text.Effect.AttributeTracker.Value()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.AttributeTracker.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (v7 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7) + 55) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = AssociatedTypeWitness;
    uint64_t v13 = ~v7;
    unint64_t v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v14(a1, a2, AssociatedTypeWitness);
    unint64_t v15 = ((unint64_t)a2 + v8) & v13;
    v14((uint64_t *)(((unint64_t)a1 + v8) & v13), (uint64_t *)v15, v12);
    unint64_t v16 = (v8 + (((unint64_t)a1 + v8) & v13)) & v13;
    unint64_t v17 = (v8 + v15) & v13;
    v14((uint64_t *)v16, (uint64_t *)v17, v12);
    uint64_t v18 = (_OWORD *)((v16 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (long long *)((v17 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = *v19;
    *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)v19 + 9);
    *uint64_t v18 = v20;
    unint64_t v21 = (v16 + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v17 + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
    char v23 = *(unsigned char *)(v22 + 8);
    *(void *)unint64_t v21 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = v23;
    unint64_t v24 = (v16 + v6 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v17 + v6 + 55) & 0xFFFFFFFFFFFFFFF8;
    LOBYTE(v21) = *(unsigned char *)(v25 + 8);
    *(void *)unint64_t v24 = *(void *)v25;
    *(unsigned char *)(v24 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for Text.Effect.AttributeTracker.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v9 = v3 + 8;
  v8(a1, AssociatedTypeWitness);
  uint64_t v4 = *(unsigned __int8 *)(v9 + 72);
  uint64_t v5 = *(void *)(v9 + 56) + v4;
  uint64_t v6 = (v5 + a1) & ~v4;
  v8(v6, AssociatedTypeWitness);

  return ((uint64_t (*)(uint64_t, uint64_t))v8)((v5 + v6) & ~v4, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (_OWORD *)((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (long long *)((v12 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = *v14;
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)v14 + 9);
  *uint64_t v13 = v15;
  unint64_t v16 = (v11 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = (v11 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v12 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v16) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v16;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (_OWORD *)((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (long long *)((v12 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = *v14;
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)v14 + 9);
  *uint64_t v13 = v15;
  unint64_t v16 = (v11 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = (v11 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v12 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v16) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v16;
  return a1;
}

uint64_t initializeWithTake for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (_OWORD *)((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (long long *)((v12 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = *v14;
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)v14 + 9);
  *uint64_t v13 = v15;
  unint64_t v16 = (v11 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = (v11 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v12 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v16) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v16;
  return a1;
}

uint64_t assignWithTake for Text.Effect.AttributeTracker.Value(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9;
  uint64_t v12 = (v8 + v9 + v10) & ~v9;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (_OWORD *)((v11 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (long long *)((v12 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = *v14;
  *(_OWORD *)((char *)v13 + 9) = *(long long *)((char *)v14 + 9);
  *uint64_t v13 = v15;
  unint64_t v16 = (v11 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = (v11 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v12 + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v16) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.AttributeTracker.Value(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v7 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
         + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
           + *(unsigned __int8 *)(v5 + 80)
           + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 55) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    if (v7 < 4) {
      unsigned int v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v7];
        if (!a1[v7]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v7];
        if (*(_WORD *)&a1[v7]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C6CCA4);
      case 4:
        int v11 = *(_DWORD *)&a1[v7];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v7);
        if (v7 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
             + ((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
               + *(unsigned __int8 *)(v5 + 80)
               + ((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64) + *(unsigned __int8 *)(v5 + 80)) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v5 + 80))
             + 55) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v13 = *a1;
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v6 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  unint64_t v14 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Value(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64)
       + ((*(void *)(v6 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 55) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v12 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            char v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v8 <= 3) {
      unsigned int v10 = ((a3 - v7 + 255) >> v9) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v13 = ~v7 + a2;
  unsigned int v14 = v13 >> v9;
  unsigned int v15 = (~(_BYTE)v7 + a2);
  if (v8 < 4) {
    int v16 = v14 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v8 >= 4) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245C6CEC8);
    case 4:
      *(_DWORD *)&a1[v8] = v16;
      break;
    default:
      return;
  }
}

uint64_t destroy for Text.Effect.AttributeTracker.Tracker()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.AttributeTracker.Tracker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.AttributeTracker.Tracker(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Text.Effect.AttributeTracker.Tracker(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.AttributeTracker.Tracker(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Tracker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for Text.Effect.AttributeTracker.Tracker()
{
  return &unk_26FA797C8;
}

BOOL specialized static Text.Effect.AttributeTracker.Key.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if (*(void *)result != *(void *)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (__OFSUB__(v3, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v3 != v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (__OFSUB__(v5, v4)) {
    goto LABEL_21;
  }
  if (v5 != v4) {
    return 0;
  }
  if ((*(unsigned char *)(result + 32) & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 32)) {
      return 0;
    }
    uint64_t v6 = *(void *)(result + 24);
    uint64_t v7 = *(void *)(a2 + 24);
    if (!__OFSUB__(v7, v6))
    {
      if (v7 != v6) {
        return 0;
      }
      goto LABEL_12;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((*(unsigned char *)(a2 + 32) & 1) == 0) {
    return 0;
  }
LABEL_12:
  if (*(unsigned char *)(result + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0;
  }
  if (*(unsigned char *)(a2 + 48)) {
    return 0;
  }
  uint64_t v8 = *(void *)(result + 40);
  uint64_t v9 = *(void *)(a2 + 40);
  if (!__OFSUB__(v9, v8)) {
    return v9 == v8;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.AttributeTracker.Tracker.deepCopy()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  unsigned int v10 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v9 << 6);
    }
    else
    {
      int64_t v14 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_36;
      }
      if (v14 >= v40)
      {
LABEL_33:
        swift_release();
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        *(void *)a4 = v10;
        *(void *)(a4 + 8) = v10;
        *(void *)(a4 + 16) = a2;
        *(void *)(a4 + 24) = a3;
        *(unsigned char *)(a4 + 32) = 0;
        return result;
      }
      unint64_t v15 = *(void *)(v39 + 8 * v14);
      ++v9;
      if (!v15)
      {
        int64_t v9 = v14 + 1;
        if (v14 + 1 >= v40) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v39 + 8 * v9);
        if (!v15)
        {
          int64_t v9 = v14 + 2;
          if (v14 + 2 >= v40) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v39 + 8 * v9);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v40) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v39 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v9 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_37;
                }
                if (v9 >= v40) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v39 + 8 * v9);
                ++v16;
                if (v15) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v9 = v16;
          }
        }
      }
LABEL_21:
      unint64_t v7 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
    }
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 48) + 56 * v13;
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v41 = *(_OWORD *)v18;
    long long v42 = v19;
    long long v43 = *(_OWORD *)(v18 + 32);
    char v44 = *(unsigned char *)(v18 + 48);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(**(void **)(v17 + 8 * v13) + 80))(v8);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v41);
    uint64_t v24 = v10[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v10[3] >= v26)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v22) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v27) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v41);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_38;
      }
      unint64_t v23 = v28;
      if (v27)
      {
LABEL_4:
        uint64_t v11 = v10[7];
        swift_release();
        *(void *)(v11 + 8 * v23) = v20;
        goto LABEL_5;
      }
    }
    v10[(v23 >> 6) + 8] |= 1 << v23;
    uint64_t v30 = v10[6] + 56 * v23;
    long long v31 = v42;
    *(_OWORD *)uint64_t v30 = v41;
    *(_OWORD *)(v30 + 16) = v31;
    *(_OWORD *)(v30 + 32) = v43;
    *(unsigned char *)(v30 + 48) = v44;
    *(void *)(v10[7] + 8 * v23) = v20;
    uint64_t v32 = v10[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_35;
    }
    _OWORD v10[2] = v34;
LABEL_5:
    swift_release();
    uint64_t v8 = swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Tracker.RestartPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C6D5C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Text.Effect.AttributeTracker.Tracker.RestartPhase()
{
  return &unk_26FA8B468;
}

uint64_t getEnumTagSinglePayload for Text.Effect.AttributeTracker.Key(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.AttributeTracker.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.AttributeTracker.Key()
{
  return &type metadata for Text.Effect.AttributeTracker.Key;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Tracker.RestartPhase and conformance Text.Effect.AttributeTracker.Tracker.RestartPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Tracker.RestartPhase and conformance Text.Effect.AttributeTracker.Tracker.RestartPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Tracker.RestartPhase and conformance Text.Effect.AttributeTracker.Tracker.RestartPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Tracker.RestartPhase and conformance Text.Effect.AttributeTracker.Tracker.RestartPhase);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.WidthMultiplierAttribute()
{
  return &type metadata for Text.Effect.WidthMultiplierAttribute;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingStateAttribute()
{
  return &type metadata for Text.Effect.DrawingStateAttribute;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingState and conformance Text.Effect.DrawingState);
  }
  return result;
}

uint64_t AsymmetricTransition.insertion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AsymmetricTransition.insertion.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AsymmetricTransition.insertion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AsymmetricTransition.removal.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t AsymmetricTransition.removal.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*AsymmetricTransition.removal.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AsymmetricTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(a2 - 1);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v8;
  if (v9 == 3)
  {
    BOOL v10 = Transition.hasContentTransition.getter(a2[2], a2[4]);
    (*(void (**)(char *, uint64_t, uint64_t *))(v5 + 16))(v7, v2, a2);
    BOOL v11 = v10 || Transition.hasContentTransition.getter(a2[3], a2[5]);
    (*(void (**)(char *, uint64_t *))(v5 + 8))(v7, a2);
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    double v13 = *(double *)(a1 + 8);
    double v12 = *(double *)(a1 + 16);
    unint64_t v48 = a2;
    uint64_t v49 = a1;
    uint64_t v46 = v9;
    uint64_t v47 = v2;
    unsigned __int8 v51 = v9;
    uint64_t v14 = Transition.contentTransitionEffects(style:size:)(&v51, v13, v12, a2[2], a2[4]);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      int64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      uint64_t v17 = 0;
      unint64_t v18 = *((void *)v16 + 2);
      uint64_t v19 = 36 * v18;
      do
      {
        uint64_t v20 = *(void *)(v14 + v17 + 32);
        char v21 = *(unsigned char *)(v14 + v17 + 40);
        int v22 = *(_DWORD *)(v14 + v17 + 44);
        char v23 = *(unsigned char *)(v14 + v17 + 48);
        uint64_t v24 = *(void *)(v14 + v17 + 52);
        int v25 = *(_DWORD *)(v14 + v17 + 64);
        unint64_t v26 = *((void *)v16 + 3);
        unint64_t v27 = v18 + 1;
        if (v18 >= v26 >> 1) {
          int64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v18 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v27;
        unint64_t v28 = &v16[v19 + v17];
        *((void *)v28 + 4) = v20;
        v28[40] = v21;
        *((_DWORD *)v28 + 11) = v22;
        v28[48] = v23;
        *(void *)(v28 + 52) = v24;
        v17 += 36;
        unint64_t v18 = v27;
        *((_DWORD *)v28 + 15) = 1;
        *((_DWORD *)v28 + 16) = v25;
        --v15;
      }
      while (v15);
    }
    else
    {
      int64_t v16 = (char *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    unsigned __int8 v50 = v46;
    uint64_t v30 = Transition.contentTransitionEffects(style:size:)(&v50, v13, v12, v48[3], v48[5]);
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
      }
      uint64_t v32 = 0;
      unint64_t v33 = *((void *)v16 + 2);
      uint64_t v34 = 36 * v33;
      do
      {
        uint64_t v35 = *(void *)(v30 + v32 + 32);
        char v36 = *(unsigned char *)(v30 + v32 + 40);
        int v37 = *(_DWORD *)(v30 + v32 + 44);
        char v38 = *(unsigned char *)(v30 + v32 + 48);
        uint64_t v39 = *(void *)(v30 + v32 + 52);
        int v40 = *(_DWORD *)(v30 + v32 + 64);
        unint64_t v41 = *((void *)v16 + 3);
        unint64_t v42 = v33 + 1;
        if (v33 >= v41 >> 1) {
          int64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v33 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v42;
        long long v43 = &v16[v34 + v32];
        *((void *)v43 + 4) = v35;
        v43[40] = v36;
        *((_DWORD *)v43 + 11) = v37;
        v43[48] = v38;
        *(void *)(v43 + 52) = v39;
        v32 += 36;
        unint64_t v33 = v42;
        *((_DWORD *)v43 + 15) = 2;
        *((_DWORD *)v43 + 16) = v40;
        --v31;
      }
      while (v31);
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = v49;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(v49 + 24), *(unsigned char *)(v49 + 32));
    *(void *)(v44 + 24) = v16;
    *(unsigned char *)(v44 + 32) = 1;
  }
  return result;
}

uint64_t sub_245C6DCA4()
{
  return swift_getWitnessTable();
}

void *assignWithCopy for AnyTransition.InsertionVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *type metadata accessor for AnyTransition.InsertionVisitor()
{
  return &unk_26FA48240;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyTransition.RemovalVisitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTransition.RemovalVisitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyTransition.RemovalVisitor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C6E164);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AnyTransition.RemovalVisitor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245C6E364);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v18 = 0;
            *(_DWORD *)unint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

double static CGPoint.defaultAnchor.getter()
{
  return 0.0;
}

double CGPoint.prepare(geometry:)(double a1, double a2)
{
  *(double *)unint64_t v18 = a1;
  *(double *)&v18[1] = a2;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  char v17 = 2;
  uint64_t Value = AGGraphGetValue();
  double v3 = *(double *)Value;
  double v4 = *(double *)(Value + 8);
  double v5 = *(double *)(Value + 16);
  double v6 = *(double *)(Value + 24);
  double v7 = *(double *)(Value + 32);
  uint64_t v8 = AGGraphGetValue();
  double v9 = *(double *)v8;
  double v10 = *(double *)(v8 + 8);
  double v11 = v6 - (*(double *)v8 - v4);
  v14[0] = v3;
  v14[1] = v9;
  long long v14[2] = v10;
  v14[3] = v11;
  v14[4] = v7 - (v10 - v5);
  outlined init with copy of CoordinateSpace((uint64_t)v15, (uint64_t)v13);
  v13[89] = 2;
  swift_retain();
  specialized ViewTransform.convert(_:_:)((uint64_t)v13, v14, (uint64_t)v18);
  outlined destroy of ViewTransform.Conversion((uint64_t)v13);
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)v15);
  return *(double *)v18;
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance CGPoint(uint64_t a1@<X8>)
{
  *(double *)a1 = CGPoint.prepare(geometry:)(*v1, v1[1]);
  *(void *)(a1 + 8) = v3;
}

void protocol witness for static AnchorProtocol.hashValue(_:into:) in conformance CGPoint(double *a1)
{
}

double static UnitPoint.defaultAnchor.getter()
{
  return 0.0;
}

void UnitPoint.prepare(geometry:)(double a1, double a2)
{
  type metadata accessor for CGSize(0);
  uint64_t Value = (double *)AGGraphGetValue();
  CGPoint.prepare(geometry:)(*Value * a1, Value[1] * a2);
}

void static UnitPoint.hashValue(_:into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

void protocol witness for AnchorProtocol.prepare(geometry:) in conformance UnitPoint(uint64_t a1@<X8>)
{
  double v3 = *v1;
  double v4 = v1[1];
  type metadata accessor for CGSize(0);
  uint64_t Value = (double *)AGGraphGetValue();
  *(double *)a1 = CGPoint.prepare(geometry:)(v3 * *Value, v4 * Value[1]);
  *(void *)(a1 + 8) = v6;
}

uint64_t static Anchor.Source<A>.point(_:)(double a1, double a2)
{
  return static Anchor.Source<A>.point(_:)((void (*)(void))type metadata accessor for AnchorBox<CGPoint>, a1, a2);
}

uint64_t static Anchor.Source<A>.unitPoint(_:)(double a1, double a2)
{
  return static Anchor.Source<A>.point(_:)((void (*)(void))type metadata accessor for AnchorBox<UnitPoint>, a1, a2);
}

{
  uint64_t result;

  type metadata accessor for AnchorBox<UnitRect>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t static Anchor.Source<A>.point(_:)(void (*a1)(void), double a2, double a3)
{
  a1(0);
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  return result;
}

uint64_t static Anchor.Source<A>.topLeading.getter()
{
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  long long v0 = static UnitPoint.topLeading;
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = v0;
  return result;
}

double static Anchor.Source<A>.top.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 0.5;
  *(_OWORD *)(v0 + 16) = xmmword_2461C2050;
  return result;
}

double static Anchor.Source<A>.topTrailing.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 1.0;
  *(_OWORD *)(v0 + 16) = xmmword_2461BCA80;
  return result;
}

double static Anchor.Source<A>.leading.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_2461D0A90;
  return result;
}

__n128 static Anchor.Source<A>.center.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.2D, #0.5 }
  v0[1] = result;
  return result;
}

double static Anchor.Source<A>.trailing.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 1.0;
  *(_OWORD *)(v0 + 16) = xmmword_2461D0AA0;
  return result;
}

double static Anchor.Source<A>.bottomLeading.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_2461C55F0;
  return result;
}

double static Anchor.Source<A>.bottom.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = swift_allocObject();
  double result = 0.5;
  *(_OWORD *)(v0 + 16) = xmmword_2461C0DD0;
  return result;
}

__n128 static Anchor.Source<A>.bottomTrailing.getter()
{
  type metadata accessor for AnchorBox<UnitPoint>();
  uint64_t v0 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.2D, #1.0 }
  v0[1] = result;
  return result;
}

void specialized static CGPoint.hashValue(_:into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

void type metadata accessor for AnchorBox<CGPoint>()
{
  if (!lazy cache variable for type metadata for AnchorBox<CGPoint>)
  {
    type metadata accessor for CGPoint(255);
    unint64_t v0 = type metadata accessor for AnchorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnchorBox<CGPoint>);
    }
  }
}

void type metadata accessor for AnchorBox<UnitPoint>()
{
  if (!lazy cache variable for type metadata for AnchorBox<UnitPoint>)
  {
    unint64_t v0 = type metadata accessor for AnchorBox();
    if (!v1) {
      atomic_store(v0, &lazy cache variable for type metadata for AnchorBox<UnitPoint>);
    }
  }
}

_UNKNOWN **associated type witness table accessor for AnchorProtocol.AnchorValue : ViewTransformable in CGPoint()
{
  return &protocol witness table for CGPoint;
}

uint64_t AbsoluteEdge.Set.rawValue.getter()
{
  return *v0;
}

uint64_t AbsoluteEdge.Set.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned __int8 *AbsoluteEdge.Set.init(_:)@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 8;
  if (v2 >= 8) {
    LOBYTE(v4) = 0;
  }
  else {
    int v4 = 1 << v2;
  }
  if (v3) {
    LOBYTE(v4) = 0;
  }
  *a2 = v4;
  return result;
}

void static AbsoluteEdge.Set.top.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AbsoluteEdge.Set.left.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static AbsoluteEdge.Set.bottom.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static AbsoluteEdge.Set.right.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void *static AbsoluteEdge.Set.all.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(&one-time initialization token for all, &static AbsoluteEdge.Set.all, a1);
}

void one-time initialization function for horizontal()
{
  char v0 = byte_26FA44B29;
  if ((byte_26FA44B29 & ~byte_26FA44B28) == 0) {
    char v0 = 0;
  }
  static AbsoluteEdge.Set.horizontal = v0 | byte_26FA44B28;
}

void *static AbsoluteEdge.Set.horizontal.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(&one-time initialization token for horizontal, &static AbsoluteEdge.Set.horizontal, a1);
}

void one-time initialization function for vertical()
{
  char v0 = byte_26FA44B79;
  if ((byte_26FA44B79 & ~byte_26FA44B78) == 0) {
    char v0 = 0;
  }
  static AbsoluteEdge.Set.vertical = v0 | byte_26FA44B78;
}

void *static AbsoluteEdge.Set.vertical.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AbsoluteEdge.Set.all.getter(one-time initialization token for vertical, &static AbsoluteEdge.Set.vertical, a1);
}

void *static AbsoluteEdge.Set.all.getter@<X0>(void *result@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X8>)
{
  if (*result != -1) {
    __n128 result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

uint64_t AbsoluteEdge.rawValue.getter()
{
  return *v0;
}

Swift::Bool __swiftcall AbsoluteEdge.Set.contains(_:)(SwiftUI::AbsoluteEdge a1)
{
  unsigned int v2 = *(unsigned __int8 *)a1;
  BOOL v3 = v2 > 8;
  if (v2 >= 8) {
    int v4 = 0;
  }
  else {
    int v4 = 1 << v2;
  }
  if (v3) {
    int v4 = 0;
  }
  return (v4 & ~*v1) == 0;
}

SwiftUI::AbsoluteEdge_optional __swiftcall AbsoluteEdge.init(rawValue:)(SwiftUI::AbsoluteEdge_optional rawValue)
{
  SwiftUI::AbsoluteEdge value = rawValue.value;
  if ((rawValue.value & 0xFC) != 0) {
    SwiftUI::AbsoluteEdge value = SwiftUI_AbsoluteEdge_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

void *static AbsoluteEdge.allCases.getter()
{
  return &outlined read-only object #0 of static AbsoluteEdge.allCases.getter;
}

SwiftUI::AbsoluteEdge_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AbsoluteEdge(Swift::Int8 *a1)
{
  return AbsoluteEdge.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance AbsoluteEdge(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AbsoluteEdge;
}

Swift::tuple_min_SwiftUI_AbsoluteEdge_max_SwiftUI_AbsoluteEdge __swiftcall Axis.perpendicularAbsoluteEdges(with:)(SwiftUI::LayoutDirection with)
{
  if (*v2) {
    char v4 = 3;
  }
  else {
    char v4 = 1;
  }
  if (*v2) {
    char v5 = 1;
  }
  else {
    char v5 = 3;
  }
  if (v3)
  {
    char v4 = 0;
    char v5 = 2;
  }
  *(unsigned char *)with = v4;
  *uint64_t v1 = v5;
  result.maCGFloat x = (char)v1;
  result.min = with;
  return result;
}

BOOL AbsoluteEdge.horizontal.getter()
{
  return ((*v0 - 1) & 0xFD) == 0;
}

void AbsoluteEdge.opposite.getter(unsigned char *a1@<X8>)
{
  *a1 = 0x1000302u >> (8 * *v1);
}

unint64_t lazy protocol witness table accessor for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AbsoluteEdge.Set and conformance AbsoluteEdge.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AbsoluteEdge] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A])
  {
    type metadata accessor for [AbsoluteEdge]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AbsoluteEdge] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AbsoluteEdge]()
{
  if (!lazy cache variable for type metadata for [AbsoluteEdge])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AbsoluteEdge]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AbsoluteEdge and conformance AbsoluteEdge()
{
  unint64_t result = lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge;
  if (!lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type AbsoluteEdge and conformance AbsoluteEdge);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AbsoluteEdge(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C6EF20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AbsoluteEdge()
{
  return &type metadata for AbsoluteEdge;
}

ValueMetadata *type metadata accessor for AbsoluteEdge.Set()
{
  return &type metadata for AbsoluteEdge.Set;
}

uint64_t static AGNamedTraceEventID.update.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for update, (unsigned int *)&static AGNamedTraceEventID.update);
}

uint64_t one-time initialization function for sizeThatFits()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.sizeThatFits = result;
  return result;
}

uint64_t static AGNamedTraceEventID.sizeThatFits.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for sizeThatFits, (unsigned int *)&static AGNamedTraceEventID.sizeThatFits);
}

uint64_t one-time initialization function for lengthThatFits()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.lengthThatFits = result;
  return result;
}

uint64_t static AGNamedTraceEventID.lengthThatFits.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for lengthThatFits, (unsigned int *)&static AGNamedTraceEventID.lengthThatFits);
}

uint64_t one-time initialization function for childGeometries()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.childGeometries = result;
  return result;
}

uint64_t static AGNamedTraceEventID.childGeometries.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for childGeometries, (unsigned int *)&static AGNamedTraceEventID.childGeometries);
}

uint64_t one-time initialization function for contentDescription()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.contentDescription = result;
  return result;
}

uint64_t static AGNamedTraceEventID.contentDescription.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for contentDescription, (unsigned int *)&static AGNamedTraceEventID.contentDescription);
}

uint64_t one-time initialization function for explicitAlignment()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.explicitAlignment = result;
  return result;
}

uint64_t static AGNamedTraceEventID.explicitAlignment.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for explicitAlignment, (unsigned int *)&static AGNamedTraceEventID.explicitAlignment);
}

uint64_t one-time initialization function for alignmentType()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.alignmentType = result;
  return result;
}

uint64_t static AGNamedTraceEventID.alignmentType.getter()
{
  return static AGNamedTraceEventID.update.getter(&one-time initialization token for alignmentType, (unsigned int *)&static AGNamedTraceEventID.alignmentType);
}

uint64_t static AGNamedTraceEventID.update.getter(void *a1, unsigned int *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

uint64_t static LayoutTrace.register(graph:)(void *a1)
{
  if (one-time initialization token for update != -1) {
    swift_once();
  }
  uint64_t result = AGGraphTraceEventEnabled();
  if (result)
  {
    type metadata accessor for LayoutTrace.Recorder();
    uint64_t v3 = swift_allocObject();
    *(unsigned char *)(v3 + 24) = 0;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 32) = 0;
    *(_WORD *)(v3 + 56) = 512;
    *(void *)(v3 + 64) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(void *)(v3 + 16) = a1;
    swift_beginAccess();
    static LayoutTrace.recorder = (_UNKNOWN *)v3;
    id v4 = a1;
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for LayoutTrace.Recorder()
{
  return self;
}

BOOL static LayoutTrace.isEnabled.getter()
{
  return static LayoutTrace.recorder != 0;
}

uint64_t static LayoutTrace.recorder.getter()
{
  return swift_retain();
}

uint64_t static LayoutTrace.recorder.setter(void *a1)
{
  static LayoutTrace.recorder = a1;
  return swift_release();
}

uint64_t (*static LayoutTrace.recorder.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id LayoutTrace.Recorder.graph.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);

  return v1;
}

void LayoutTrace.Recorder.graph.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*LayoutTrace.Recorder.graph.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t LayoutTrace.Recorder.frameActive.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t LayoutTrace.Recorder.frameActive.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t (*LayoutTrace.Recorder.frameActive.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

__n128 LayoutTrace.Recorder.cacheLookup.getter@<Q0>(__n128 *a1@<X8>)
{
  swift_beginAccess();
  unint64_t v3 = v1[3].n128_u64[0];
  unsigned __int16 v4 = v1[3].n128_u16[4];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u16[4] = v4;
  return result;
}

__n128 LayoutTrace.Recorder.cacheLookup.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int16 v3 = a1[1].n128_u16[4];
  swift_beginAccess();
  __n128 result = v5;
  v1[2] = v5;
  v1[3].n128_u64[0] = v2;
  v1[3].n128_u16[4] = v3;
  return result;
}

uint64_t (*LayoutTrace.Recorder.cacheLookup.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t LayoutTrace.Recorder.alignmentTypeID(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(v1 + 64);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v1 + 64);
  unint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    swift_endAccess();
    goto LABEL_6;
  }
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v12)
  {
    unint64_t v10 = *(unsigned int *)(*(void *)(v9 + 56) + 4 * v11);
LABEL_12:
    swift_endAccess();
    return v10;
  }
  swift_endAccess();
  if (!HIDWORD(v10))
  {
LABEL_6:
    swift_beginAccess();
    unsigned int v13 = *(void **)(v2 + 16);
    uint64_t v14 = one-time initialization token for alignmentType;
    id v15 = v13;
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v23 = a1;
    AGTypeID.description.getter();
    static String.Encoding.utf8.getter();
    uint64_t v16 = String.data(using:allowLossyConversion:)();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    int v25 = v10;
    if (v18 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    AGGraphAddNamedTraceEvent();

    outlined consume of Data?(v16, v18);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v23, isUniquelyReferenced_nonNull_native);
    *uint64_t v8 = v24;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LayoutTrace.Recorder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LayoutTrace.Recorder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t static LayoutTrace.traceSizeThatFits(_:proposal:_:)(unint64_t a1, uint64_t *a2, double (*a3)(uint64_t))
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    uint64_t v10 = v5;
    char v11 = v6;
    uint64_t v12 = v7;
    char v13 = v8;
    swift_retain();
    LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(a1 | ((HIDWORD(a1) & 1) << 32), (uint64_t)&v10, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double LayoutTrace.Recorder.traceSizeThatFits(_:proposal:_:)(uint64_t a1, uint64_t a2, double (*a3)(uint64_t))
{
  uint64_t v4 = v3;
  LayoutTrace.Recorder.activateFrameIfNeeded()();
  swift_beginAccess();
  uint64_t v6 = one-time initialization token for sizeThatFits;
  id v7 = *(id *)(v3 + 16);
  if (v6 != -1) {
    swift_once();
  }
  AGGraphAddNamedTraceEvent();

  uint64_t v8 = swift_beginAccess();
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 56) = 512;
  double v9 = a3(v8);
  AGGraphAddNamedTraceEvent();
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 56) = 512;
  return v9;
}

uint64_t static LayoutTrace.traceLengthThatFits(_:proposal:in:_:)(unint64_t a1, uint64_t *a2, char a3, double (*a4)(uint64_t))
{
  uint64_t v7 = *a2;
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v9 = a2[2];
  char v10 = *((unsigned char *)a2 + 24);
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    uint64_t v12 = v7;
    char v13 = v8;
    uint64_t v14 = v9;
    char v15 = v10;
    swift_retain();
    LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(a1 | ((HIDWORD(a1) & 1) << 32), (uint64_t)&v12, a3 & 1, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

double LayoutTrace.Recorder.traceLengthThatFits(_:proposal:in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  LayoutTrace.Recorder.activateFrameIfNeeded()();
  swift_beginAccess();
  uint64_t v7 = one-time initialization token for lengthThatFits;
  id v8 = *(id *)(v4 + 16);
  if (v7 != -1) {
    swift_once();
  }
  AGGraphAddNamedTraceEvent();

  uint64_t v9 = swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 512;
  double v10 = a4(v9);
  AGGraphAddNamedTraceEvent();
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 512;
  return v10;
}

uint64_t static LayoutTrace.traceCacheLookup(_:_:)(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 8);
  uint64_t v5 = a1[2];
  __int16 v6 = *((unsigned __int8 *)a1 + 24);
  uint64_t result = swift_beginAccess();
  id v8 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    if (a2) {
      __int16 v9 = 256;
    }
    else {
      __int16 v9 = 0;
    }
    __int16 v10 = v9 | v6;
    uint64_t result = swift_beginAccess();
    v8[4] = v3;
    _OWORD v8[5] = v4;
    v8[6] = v5;
    *((_WORD *)v8 + 28) = v10;
  }
  return result;
}

uint64_t static LayoutTrace.traceCacheLookup(_:_:)(char a1, double a2, double a3)
{
  uint64_t result = swift_beginAccess();
  uint64_t v7 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    if (a1) {
      __int16 v8 = 256;
    }
    else {
      __int16 v8 = 0;
    }
    uint64_t result = swift_beginAccess();
    _OWORD v7[4] = a2;
    _OWORD v7[5] = 0.0;
    v7[6] = a3;
    *((_WORD *)v7 + 28) = v8;
  }
  return result;
}

uint64_t static LayoutTrace.traceChildGeometries(_:at:origin:_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), double a4, double a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t result = swift_beginAccess();
  uint64_t v14 = static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.activateFrameIfNeeded()();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if ((a1 & 0x100000000) != 0) {
      int v15 = 0;
    }
    else {
      int v15 = a1;
    }
    swift_beginAccess();
    uint64_t v16 = static CoreGlue.shared;
    int v25 = v14;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    double v30 = a4;
    double v31 = a5;
    int v32 = v15;
    unint64_t v17 = (void *)MEMORY[0x263F8EED0];
    unint64_t v18 = *(void (**)(void **))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x90);
    swift_retain();
    id v19 = v16;
    v18(&v25);

    uint64_t v20 = swift_release();
    uint64_t v21 = a3(v20);
    uint64_t v22 = static CoreGlue.shared;
    int v25 = v14;
    uint64_t v26 = v21;
    uint64_t v23 = *(void (**)(void **))((*v17 & *(void *)static CoreGlue.shared) + 0xA0);
    swift_retain();
    id v24 = v22;
    swift_bridgeObjectRetain();
    v23(&v25);

    swift_bridgeObjectRelease();
    swift_release_n();
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static LayoutTrace.traceContentDescription(_:_:)(unint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    swift_retain();
    LayoutTrace.Recorder.traceContentDescription(_:_:)(a1 | ((HIDWORD(a1) & 1) << 32));
    return swift_release();
  }
  return result;
}

void LayoutTrace.Recorder.traceContentDescription(_:_:)(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for String.Encoding();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  __int16 v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x100000000) != 0) {
    int v7 = 0;
  }
  else {
    int v7 = a1;
  }
  swift_beginAccess();
  __int16 v8 = *(void **)(v1 + 16);
  uint64_t v9 = one-time initialization token for contentDescription;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  void v15[3] = v7;
  if (v13 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  AGGraphAddNamedTraceEvent();

  outlined consume of Data?(v11, v13);
}

uint64_t static LayoutTrace.traceExplicitAlignment(_:alignment:at:body:)(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[3];
  uint64_t result = swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    v13[0] = v7;
    v13[1] = v8;
    _OWORD v13[2] = v9;
    v13[3] = v10;
    swift_retain();
    uint64_t v12 = LayoutTrace.Recorder.traceExplicitAlignment(_:alignment:at:body:)(a1 | ((HIDWORD(a1) & 1) << 32), a2, (uint64_t)v13, a4);
    swift_release();
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LayoutTrace.Recorder.traceExplicitAlignment(_:alignment:at:body:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  LayoutTrace.Recorder.activateFrameIfNeeded()();
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v7 = static AlignmentKey._typeCache;
  uint64_t v8 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v8);
  swift_release();
  if (a2 < 2)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a2 >> 1 > *(void *)(v9 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v9 + 16 * ((a2 >> 1) - 1) + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LayoutTrace.Recorder.alignmentTypeID(for:)(v10);
  swift_beginAccess();
  uint64_t v11 = one-time initialization token for explicitAlignment;
  uint64_t v4 = (id *)v4[2];
  if (v11 != -1) {
LABEL_9:
  }
    swift_once();
  AGGraphAddNamedTraceEvent();

  uint64_t v12 = a4();
  AGGraphAddNamedTraceEvent();
  return v12;
}

Swift::Void __swiftcall LayoutTrace.Recorder.activateFrameIfNeeded()()
{
  swift_beginAccess();
  if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    *(unsigned char *)(v0 + 24) = 1;
    swift_beginAccess();
    uint64_t v1 = one-time initialization token for update;
    id v2 = *(id *)(v0 + 16);
    if (v1 != -1) {
      swift_once();
    }
    AGGraphAddNamedTraceEvent();

    swift_retain();
    specialized static Update.begin()();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded();
    *(void *)(v3 + 24) = v0;
    uint64_t v4 = one-time initialization token for actions;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = static Update.actions;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    }
    unint64_t v7 = v5[2];
    unint64_t v6 = v5[3];
    if (v7 >= v6 >> 1) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
    }
    long long v5[2] = v7 + 1;
    uint64_t v8 = &v5[2 * v7];
    v8[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    _OWORD v8[5] = v3;
    static Update.actions = v5;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
  }
}

uint64_t closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    *(unsigned char *)(a1 + 24) = 0;
    swift_beginAccess();
    uint64_t v3 = one-time initialization token for update;
    id v4 = *(id *)(a1 + 16);
    if (v3 != -1) {
      swift_once();
    }
    AGGraphAddNamedTraceEvent();

    return AGGraphSyncTracing();
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutTrace()
{
  return &type metadata for LayoutTrace;
}

uint64_t method lookup function for LayoutTrace.Recorder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LayoutTrace.Recorder);
}

uint64_t partial apply for closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()()
{
  return closure #1 in LayoutTrace.Recorder.activateFrameIfNeeded()(v0);
}

uint64_t sub_245C70B80()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Date.ComponentsFormatStyle.Field.magnitude.getter@<X0>(double *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v22 - v10, v2, v4, v9);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if (v12)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
    double v15 = 31536000.0;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v7, v4);
    if (v16)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
      double v15 = 2592000.0;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v7, v4);
      if (v17)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
        double v15 = 604800.0;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v7, v4);
        if (v18)
        {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
          double v15 = 86400.0;
        }
        else
        {
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
          v13(v7, v4);
          if (v19)
          {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
            double v15 = 3600.0;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.minute.getter();
            char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
            v13(v7, v4);
            if (v20)
            {
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
              double v15 = 60.0;
            }
            else
            {
              static Date.ComponentsFormatStyle.Field.second.getter();
              char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
              v13(v7, v4);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
              double v15 = 1.0;
              if ((v21 & 1) == 0)
              {
                if (one-time initialization token for max != -1) {
                  uint64_t result = swift_once();
                }
                double v15 = *(double *)&static Calendar.Component.Magnitude.max;
              }
            }
          }
        }
      }
    }
  }
  *a1 = v15;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  double v9 = (char *)&v27 - v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v32 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v35 = v4 + 16;
  char v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v34 = v4 + 48;
  uint64_t v14 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v39 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  double v31 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v16);
    if (!v20) {
      break;
    }
LABEL_18:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(void *)(v39 + 48) + *(void *)(v4 + 72) * v18, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
    {
      swift_release();
      return (uint64_t)v31;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    closure #1 in NSCalendarUnit.init(_:)((uint64_t)v6, (uint64_t)&v37);
    if (v1)
    {
      (*v14)(v6, v3);
      uint64_t v26 = v31;
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v14)(v6, v3);
    if ((v38 & 1) == 0)
    {
      uint64_t v30 = v37;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        double v31 = (void *)result;
      }
      unint64_t v23 = v31[2];
      unint64_t v22 = v31[3];
      unint64_t v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        unint64_t v28 = v31[2];
        unint64_t v29 = v23 + 1;
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v31);
        unint64_t v23 = v28;
        unint64_t v24 = v29;
        double v31 = (void *)result;
      }
      int v25 = v31;
      v31[2] = v24;
      v25[v23 + 4] = v30;
    }
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v33) {
    goto LABEL_33;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20) {
    goto LABEL_17;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v33) {
    goto LABEL_33;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20) {
    goto LABEL_17;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v33) {
    goto LABEL_33;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20) {
    goto LABEL_17;
  }
  int64_t v21 = v16 + 4;
  if (v16 + 4 >= v33)
  {
LABEL_33:
    uint64_t v26 = v31;
    (*v36)(v9, 1, 1, v3);
LABEL_34:
    swift_release();
    return (uint64_t)v26;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
LABEL_17:
    int64_t v16 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_18;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void Calendar.Component.Magnitude.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

BOOL static Calendar.Component.Magnitude.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.magnitude.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (result == *MEMORY[0x263F064F0])
  {
    *a1 = 0x4122750000000000;
  }
  else if (result == *MEMORY[0x263F064E0])
  {
    *a1 = 0x40F5180000000000;
  }
  else if (result == *MEMORY[0x263F064E8])
  {
    *a1 = 0x40AC200000000000;
  }
  else if (result == *MEMORY[0x263F064F8])
  {
    *a1 = 0x404E000000000000;
  }
  else if (result == *MEMORY[0x263F06500])
  {
    *a1 = 0x3FF0000000000000;
  }
  else if (result == *MEMORY[0x263F064D0])
  {
    *a1 = 0x3EB0C6F7A0B5ED8DLL;
  }
  else if (result == *MEMORY[0x263F064D8])
  {
    *a1 = 0x3F50624DD2F1A9FCLL;
  }
  else if (result == *MEMORY[0x263F064C8])
  {
    *a1 = 0x3E112E0BE826D695;
  }
  else
  {
    if (one-time initialization token for max != -1) {
      swift_once();
    }
    *a1 = static Calendar.Component.Magnitude.max;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.magnitude.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (result == *MEMORY[0x263F06598])
  {
    uint64_t v10 = 0x422D5EC4B0000000;
LABEL_26:
    *a1 = v10;
    return result;
  }
  if (result == *MEMORY[0x263F065B0] || result == *MEMORY[0x263F06588])
  {
    uint64_t v10 = 0x417E133800000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065D0])
  {
    uint64_t v10 = 0x415DA9C000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065B8])
  {
    uint64_t v10 = 0x4143C68000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F06568] || result == *MEMORY[0x263F06570])
  {
LABEL_19:
    uint64_t v10 = 0x4122750000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065D8]) {
    goto LABEL_25;
  }
  if (result == *MEMORY[0x263F06580]) {
    goto LABEL_19;
  }
  if (result == *MEMORY[0x263F06590] || result == *MEMORY[0x263F065E8])
  {
LABEL_25:
    uint64_t v10 = 0x40F5180000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065A0])
  {
    uint64_t v10 = 0x40E5180000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065A8])
  {
    uint64_t v10 = 0x40AC200000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065C0])
  {
    uint64_t v10 = 0x404E000000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065C8])
  {
    uint64_t v10 = 0x3FF0000000000000;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F06578])
  {
    uint64_t v10 = 0x3F50624DD2F1A9FCLL;
    goto LABEL_26;
  }
  if (result == *MEMORY[0x263F065E0])
  {
    if (one-time initialization token for max != -1) {
      uint64_t result = swift_once();
    }
    *a1 = static Calendar.Component.Magnitude.max;
  }
  else
  {
    if (one-time initialization token for max != -1) {
      swift_once();
    }
    *a1 = static Calendar.Component.Magnitude.max;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

Swift::Void __swiftcall Calendar.Component.Magnitude.decrementByOrderOfMagnitude()()
{
  *uint64_t v0 = *v0 / 10.0;
}

uint64_t URL.swiftUI_contentType.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x263F06898], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - v3;
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  double v6 = (void *)*MEMORY[0x263EFF608];
  *(void *)(inited + 32) = *MEMORY[0x263EFF608];
  id v7 = v6;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for URLResourceValues();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of URLResourceValues?((uint64_t)v4);
    uint64_t v10 = type metadata accessor for UTType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    URLResourceValues.contentType.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
}

uint64_t Set<>.init(_:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  MEMORY[0x270FA5388](v4);
  double v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t result = MEMORY[0x263F8EE88];
  uint64_t v16 = MEMORY[0x263F8EE88];
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = 0;
    unint64_t v13 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t v14 = *(void *)((char *)&outlined read-only object #0 of Set<>.init(_:) + v12 + 32);
      if ((v14 & ~a1) == 0)
      {
        if (v14 > 127)
        {
          switch(v14)
          {
            case 0x80:
              static Duration.UnitsFormatStyle.Unit.seconds.getter();
              break;
            case 0x8000:
              static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
              break;
            case 0x200:
              static Duration.UnitsFormatStyle.Unit.weeks.getter();
              break;
            default:
              goto LABEL_5;
          }
        }
        else
        {
          switch(v14)
          {
            case 16:
              static Duration.UnitsFormatStyle.Unit.days.getter();
              break;
            case 32:
              static Duration.UnitsFormatStyle.Unit.hours.getter();
              break;
            case 64:
              static Duration.UnitsFormatStyle.Unit.minutes.getter();
              break;
            default:
              goto LABEL_5;
          }
        }
        specialized Set._Variant.insert(_:)((uint64_t)v10, v6);
        (*v13)(v10, v4);
      }
LABEL_5:
      v12 += 8;
      if (v12 == 40) {
        return v16;
      }
    }
  }
  return result;
}

{
  return specialized Set<>.init(_:)(a1, a2 & 1);
}

uint64_t NSCalendarUnit.init(_:)(uint64_t a1)
{
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(a1, a1);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      if ((v6 & ~v3) == 0) {
        uint64_t v5 = 0;
      }
      v3 |= v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      if ((v6 & ~v3) == 0) {
        uint64_t v5 = 0;
      }
      v3 |= v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #1 in NSCalendarUnit.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v26 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v26 - v12, a1, v6, v11);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
    char v17 = 0;
    uint64_t v18 = 4;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.narrow.getter();
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v6);
    if (v19)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
      char v17 = 0;
      uint64_t v18 = 8;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.abbreviated.getter();
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v15(v9, v6);
      if (v20)
      {
        v15(v13, v6);
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        char v21 = specialized Set.contains(_:)((uint64_t)v9, a2);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v9, v6);
        char v17 = 0;
        uint64_t v18 = 0x2000;
        if (v21) {
          uint64_t v18 = 4096;
        }
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        v15(v9, v6);
        if (v22)
        {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
          char v17 = 0;
          uint64_t v18 = 16;
        }
        else
        {
          static Date.ComponentsFormatStyle.Style.spellOut.getter();
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          v15(v9, v6);
          if (v23)
          {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
            char v17 = 0;
            uint64_t v18 = 32;
          }
          else
          {
            static Date.ComponentsFormatStyle.Field.minute.getter();
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            v15(v9, v6);
            if (v24)
            {
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
              char v17 = 0;
              uint64_t v18 = 64;
            }
            else
            {
              static Date.ComponentsFormatStyle.Field.second.getter();
              char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
              v15(v9, v6);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v6);
              if (v25) {
                uint64_t v18 = 128;
              }
              else {
                uint64_t v18 = 0;
              }
              char v17 = v25 ^ 1;
            }
          }
        }
      }
    }
  }
  *(void *)a3 = v18;
  *(unsigned char *)(a3 + 8) = v17 & 1;
  return result;
}

uint64_t closure #1 in NSCalendarUnit.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  double v11 = (char *)v24 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)v24 - v10, a1, v4, v9);
  static Duration.UnitsFormatStyle.Unit.weeks.getter();
  _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if (v12)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
    char v15 = 0;
    uint64_t v16 = 0x2000;
  }
  else
  {
    static Duration.UnitsFormatStyle.Unit.days.getter();
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v7, v4);
    if (v17)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
      char v15 = 0;
      uint64_t v16 = 16;
    }
    else
    {
      static Duration.UnitsFormatStyle.Unit.hours.getter();
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v7, v4);
      if (v18)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
        char v15 = 0;
        uint64_t v16 = 32;
      }
      else
      {
        static Duration.UnitsFormatStyle.Unit.minutes.getter();
        char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v7, v4);
        if (v19)
        {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
          char v15 = 0;
          uint64_t v16 = 64;
        }
        else
        {
          static Duration.UnitsFormatStyle.Unit.seconds.getter();
          char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v13(v7, v4);
          if (v20)
          {
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
            char v15 = 0;
            uint64_t v16 = 128;
          }
          else
          {
            static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
            char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
            v13(v7, v4);
            if ((v21 & 1) != 0
              || (static Duration.UnitsFormatStyle.Unit.microseconds.getter(),
                  char v22 = dispatch thunk of static Equatable.== infix(_:_:)(),
                  v13(v7, v4),
                  (v22 & 1) != 0))
            {
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
              char v15 = 0;
              uint64_t v16 = 0x8000;
            }
            else
            {
              static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
              char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
              v13(v7, v4);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
              if (v23) {
                uint64_t v16 = 0x8000;
              }
              else {
                uint64_t v16 = 0;
              }
              char v15 = v23 ^ 1;
            }
          }
        }
      }
    }
  }
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = v15 & 1;
  return result;
}

double Calendar.Component.Magnitude.init(_:)@<D0>(double *a1@<X8>)
{
  uint64_t v2 = Duration.components.getter();
  double result = (double)v3 * 1.0e-18 + (double)v2;
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Calendar.Component.Magnitude.incrementByOrderOfMagnitude()()
{
  *uint64_t v0 = *v0 * 10.0;
}

double Calendar.Component.Magnitude.ratio(to:)(double *a1)
{
  double v2 = *a1;
  double v3 = INFINITY;
  if (*v1 == 0.0) {
    double v3 = NAN;
  }
  if (v2 == 0.0) {
    return v3;
  }
  else {
    return *v1 / v2;
  }
}

void one-time initialization function for max()
{
  static Calendar.Component.Magnitude.maCGFloat x = 0x7FF0000000000000;
}

double static Calendar.Component.Magnitude.max.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for max, (double *)&static Calendar.Component.Magnitude.max, a1);
}

double one-time initialization function for zero()
{
  static Duration.zero.getter();
  uint64_t v0 = Duration.components.getter();
  double result = (double)v1 * 1.0e-18 + (double)v0;
  *(double *)&static Calendar.Component.Magnitude.zero = result;
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_268F73650 = 0u;
  xmmword_268F73660 = 0u;
  static Text.Effect.DrawingState.zero = 0u;
  xmmword_268F73640 = 0u;
  qword_268F73670 = 0x3FF0000000000000;
  byte_268F73678 = 0;
  return result;
}

double static Calendar.Component.Magnitude.zero.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for zero, (double *)&static Calendar.Component.Magnitude.zero, a1);
}

void Calendar.Component.Magnitude.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

BOOL static Calendar.Component.Magnitude.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.Component.Magnitude.CodingKeys()
{
  return 0x6C61767265746E69;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.Component.Magnitude.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Component.Magnitude.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Component.Magnitude.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Calendar.Component.Magnitude.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_26FA3F050, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Calendar.Component.Magnitude.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Calendar.Component.Magnitude.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  char v14 = a2;
  type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_26FA3F050, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    double v9 = v14;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *double v9 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Calendar.Component.Magnitude(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.Component.Magnitude()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Component.Magnitude@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Calendar.Component.Magnitude.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Component.Magnitude(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys, (uint64_t)&unk_26FA3F050, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Duration.UnitsFormatStyle.Unit.magnitude.getter@<X0>(double *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v24 - v10, v2, v4, v9);
  static Duration.UnitsFormatStyle.Unit.weeks.getter();
  _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if (v12) {
    goto LABEL_11;
  }
  static Duration.UnitsFormatStyle.Unit.days.getter();
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v7, v4);
  if (v14) {
    goto LABEL_11;
  }
  static Duration.UnitsFormatStyle.Unit.hours.getter();
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v7, v4);
  if (v15) {
    goto LABEL_11;
  }
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v7, v4);
  if (v16) {
    goto LABEL_11;
  }
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v7, v4);
  if ((v17 & 1) != 0
    || (static Duration.UnitsFormatStyle.Unit.milliseconds.getter(),
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v13(v7, v4),
        (v18 & 1) != 0)
    || (static Duration.UnitsFormatStyle.Unit.microseconds.getter(),
        char v19 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v13(v7, v4),
        (v19 & 1) != 0))
  {
LABEL_11:
    v13(v11, v4);
LABEL_13:
    uint64_t result = Duration.components.getter();
    double v23 = (double)v22 * 1.0e-18 + (double)result;
    goto LABEL_14;
  }
  static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v13(v7, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v4);
  if (v20) {
    goto LABEL_13;
  }
  if (one-time initialization token for max != -1) {
    uint64_t result = swift_once();
  }
  double v23 = *(double *)&static Calendar.Component.Magnitude.max;
LABEL_14:
  *a1 = v23;
  return result;
}

BOOL String.isBeginningOfSentence(pattern:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (__CFString *)MEMORY[0x24C522820](a4, a5);
  uint64_t v8 = (__CFString *)MEMORY[0x24C522820](a1, a2);
  CFLocaleRef isa = Locale._bridgeToObjectiveC()().super.isa;
  BOOL isBeginningOfSentence = _isBeginningOfSentence(v7, v8, isa);

  return isBeginningOfSentence;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Calendar.Component>();
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    double v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x263F07908]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x263F07908]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>();
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    double v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>();
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    double v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<NSURLResourceKey>();
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    double v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      uint64_t v7 = v6;
      String.hash(into:)();
      uint64_t v8 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      uint64_t v11 = v8 & ~v10;
      char v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        char v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          uint64_t v11 = (v11 + 1) & v21;
          char v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      BOOL v28 = *(void *)(v3 + 16);
      uint64_t v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const char *v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE88];
  }
  type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(0, &lazy cache variable for type metadata for _SetStorage<DefaultDescriptionAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDescriptionAttribute and conformance DefaultDescriptionAttribute, (uint64_t)&type metadata for DefaultDescriptionAttribute, MEMORY[0x263F8DBD8]);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v37 = a1 + 32;
  do
  {
    uint64_t v6 = *(unsigned __int8 *)(v37 + v4);
    Hasher.init(_seed:)();
    DefaultDescriptionAttribute.rawValue.getter();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    uint64_t v9 = v7 & v8;
    uint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    char v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        uint64_t v13 = 0xE400000000000000;
        uint64_t v14 = 1952671090;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            uint64_t v13 = 0xE600000000000000;
            uint64_t v14 = 0x6E696769726FLL;
            break;
          case 2:
            uint64_t v13 = 0xEA0000000000746ELL;
            uint64_t v14 = 0x696F507472617473;
            break;
          case 3:
            uint64_t v13 = 0xE800000000000000;
            uint64_t v14 = 0x746E696F50646E65;
            break;
          case 4:
            uint64_t v14 = 0x726F66736E617274;
            uint64_t v13 = 0xE90000000000006DLL;
            break;
          case 5:
            uint64_t v13 = 0xE500000000000000;
            uint64_t v14 = 0x7370696C63;
            break;
          case 6:
            char v15 = 0x72656E726F63;
            goto LABEL_22;
          case 7:
            uint64_t v16 = "continuousCorners";
            goto LABEL_36;
          case 8:
            uint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x7974696361706FLL;
            break;
          case 9:
            uint64_t v14 = 0x6957726564726F62;
            uint64_t v13 = 0xEB00000000687464;
            break;
          case 0xA:
            uint64_t v17 = 0x726564726F62;
            goto LABEL_24;
          case 0xB:
            uint64_t v14 = 0x756F72676B636162;
            uint64_t v13 = 0xEF726F6C6F43646ELL;
            break;
          case 0xC:
            uint64_t v16 = "compositingFilter";
            goto LABEL_36;
          case 0xD:
            uint64_t v14 = 0x55656C6261736964;
            uint64_t v13 = 0xEE00736574616470;
            break;
          case 0xE:
            uint64_t v14 = 0x704F776F64616873;
            uint64_t v13 = 0xED00007974696361;
            break;
          case 0xF:
            char v15 = 0x776F64616873;
LABEL_22:
            uint64_t v14 = v15 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
            uint64_t v13 = 0xEC00000073756964;
            break;
          case 0x10:
            uint64_t v17 = 0x776F64616873;
LABEL_24:
            uint64_t v14 = v17 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
            uint64_t v13 = 0xEB00000000726F6CLL;
            break;
          case 0x11:
            uint64_t v14 = 0x664F776F64616873;
            uint64_t v13 = 0xEC00000074657366;
            break;
          case 0x12:
            uint64_t v14 = 0x6150776F64616873;
            uint64_t v13 = 0xEA00000000006874;
            break;
          case 0x13:
            uint64_t v14 = 0xD000000000000012;
            unint64_t v18 = "shadowPathIsBounds";
            goto LABEL_38;
          case 0x14:
            uint64_t v14 = 0x73746E65746E6F63;
            uint64_t v13 = 0xEE007265746E6543;
            break;
          case 0x15:
            uint64_t v14 = 0x73746E65746E6F63;
            uint64_t v13 = 0xEF676E696C616353;
            break;
          case 0x16:
            uint64_t v14 = 0xD000000000000015;
            unint64_t v18 = "contentsMultiplyColor";
            goto LABEL_38;
          case 0x17:
            uint64_t v14 = 0x686353726F6C6F63;
            uint64_t v13 = 0xEB00000000656D65;
            break;
          case 0x18:
            uint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x737265746C6966;
            break;
          case 0x19:
            uint64_t v14 = 0x746E656964617267;
            uint64_t v13 = 0xEC00000065707954;
            break;
          case 0x1A:
            uint64_t v14 = 0x746E656964617267;
            uint64_t v13 = 0xEE0073726F6C6F43;
            break;
          case 0x1B:
            uint64_t v16 = "gradientLocations";
LABEL_36:
            uint64_t v13 = (unint64_t)(v16 - 32) | 0x8000000000000000;
            uint64_t v14 = 0xD000000000000011;
            break;
          case 0x1C:
            uint64_t v14 = 0xD000000000000016;
            unint64_t v18 = "gradientInterpolations";
LABEL_38:
            uint64_t v13 = (unint64_t)(v18 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v19 = 0xE400000000000000;
        uint64_t v20 = 1952671090;
        switch(v6)
        {
          case 1:
            unint64_t v19 = 0xE600000000000000;
            if (v14 == 0x6E696769726FLL) {
              goto LABEL_88;
            }
            goto LABEL_89;
          case 2:
            unint64_t v19 = 0xEA0000000000746ELL;
            if (v14 != 0x696F507472617473) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 3:
            unint64_t v19 = 0xE800000000000000;
            if (v14 != 0x746E696F50646E65) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 4:
            unint64_t v19 = 0xE90000000000006DLL;
            if (v14 != 0x726F66736E617274) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 5:
            unint64_t v19 = 0xE500000000000000;
            if (v14 != 0x7370696C63) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 6:
            uint64_t v21 = 0x72656E726F63;
            goto LABEL_63;
          case 7:
            uint64_t v22 = "continuousCorners";
            goto LABEL_86;
          case 8:
            unint64_t v19 = 0xE700000000000000;
            if (v14 != 0x7974696361706FLL) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 9:
            char v23 = 0x6957726564726F62;
            uint64_t v24 = 6845540;
            goto LABEL_75;
          case 10:
            char v25 = 0x726564726F62;
            goto LABEL_65;
          case 11:
            unint64_t v19 = 0xEF726F6C6F43646ELL;
            if (v14 != 0x756F72676B636162) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 12:
            uint64_t v22 = "compositingFilter";
            goto LABEL_86;
          case 13:
            uint64_t v26 = 0x55656C6261736964;
            uint64_t v27 = 0x736574616470;
            goto LABEL_83;
          case 14:
            unint64_t v19 = 0xED00007974696361;
            if (v14 != 0x704F776F64616873) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 15:
            uint64_t v21 = 0x776F64616873;
LABEL_63:
            BOOL v28 = v21 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
            uint64_t v29 = 1937074532;
            goto LABEL_80;
          case 16:
            char v25 = 0x776F64616873;
LABEL_65:
            char v23 = v25 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
            uint64_t v24 = 7499628;
            goto LABEL_75;
          case 17:
            BOOL v28 = 0x664F776F64616873;
            uint64_t v29 = 1952805734;
            goto LABEL_80;
          case 18:
            unint64_t v19 = 0xEA00000000006874;
            if (v14 != 0x6150776F64616873) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 19:
            uint64_t v30 = 0xD000000000000012;
            double v31 = "shadowPathIsBounds";
            goto LABEL_93;
          case 20:
            uint64_t v26 = 0x73746E65746E6F63;
            uint64_t v27 = 0x7265746E6543;
            goto LABEL_83;
          case 21:
            unint64_t v19 = 0xEF676E696C616353;
            if (v14 != 0x73746E65746E6F63) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 22:
            uint64_t v30 = 0xD000000000000015;
            double v31 = "contentsMultiplyColor";
            goto LABEL_93;
          case 23:
            char v23 = 0x686353726F6C6F63;
            uint64_t v24 = 6647141;
LABEL_75:
            unint64_t v19 = v24 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v14 != v23) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 24:
            unint64_t v19 = 0xE700000000000000;
            if (v14 != 0x737265746C6966) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 25:
            BOOL v28 = 0x746E656964617267;
            uint64_t v29 = 1701869908;
LABEL_80:
            unint64_t v19 = v29 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
            if (v14 != v28) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 26:
            uint64_t v26 = 0x746E656964617267;
            uint64_t v27 = 0x73726F6C6F43;
LABEL_83:
            unint64_t v19 = v27 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v14 != v26) {
              goto LABEL_89;
            }
            goto LABEL_88;
          case 27:
            uint64_t v22 = "gradientLocations";
LABEL_86:
            unint64_t v19 = (unint64_t)(v22 - 32) | 0x8000000000000000;
            uint64_t v20 = 0xD000000000000011;
            goto LABEL_87;
          case 28:
            uint64_t v30 = 0xD000000000000016;
            double v31 = "gradientInterpolations";
LABEL_93:
            unint64_t v19 = (unint64_t)(v31 - 32) | 0x8000000000000000;
            if (v14 != v30) {
              goto LABEL_89;
            }
            goto LABEL_88;
          default:
LABEL_87:
            if (v14 != v20) {
              goto LABEL_89;
            }
LABEL_88:
            if (v13 == v19)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_89:
            uint64_t v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v32) {
              goto LABEL_4;
            }
            uint64_t v9 = (v9 + 1) & v8;
            uint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            char v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_95;
            }
            break;
        }
      }
    }
LABEL_95:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v33 = *(void *)(v3 + 16);
    uint64_t v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
      JUMPOUT(0x245C7523CLL);
    }
    *(void *)(v3 + 16) = v35;
LABEL_4:
    ++v4;
  }
  while (v4 != v1);
  return v3;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v32 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v36 = v5 + 16;
  uint64_t v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v35 = v5 + 48;
  char v15 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v40 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  double v31 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v33) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_18:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v40 + 48) + *(void *)(v5 + 72) * v19, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    {
      swift_release();
      return (uint64_t)v31;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    closure #1 in NSCalendarUnit.init(_:)((uint64_t)v7, v34, (uint64_t)&v38);
    if (v2)
    {
      (*v15)(v7, v4);
      uint64_t v27 = v31;
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v15)(v7, v4);
    if ((v39 & 1) == 0)
    {
      uint64_t v30 = v38;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        double v31 = (void *)result;
      }
      unint64_t v24 = v31[2];
      unint64_t v23 = v31[3];
      unint64_t v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        unint64_t v28 = v31[2];
        unint64_t v29 = v24 + 1;
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v31);
        unint64_t v24 = v28;
        unint64_t v25 = v29;
        double v31 = (void *)result;
      }
      uint64_t v26 = v31;
      v31[2] = v25;
      v26[v24 + 4] = v30;
    }
  }
  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v33) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v33) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v33) {
    goto LABEL_33;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v33)
  {
LABEL_33:
    uint64_t v27 = v31;
    (*v37)(v10, 1, 1, v4);
LABEL_34:
    swift_release();
    return (uint64_t)v27;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21)
  {
LABEL_17:
    int64_t v17 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v33) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_18;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set<>.init(_:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t result = MEMORY[0x263F8EE88];
  uint64_t v16 = MEMORY[0x263F8EE88];
  if ((a2 & 1) == 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t v14 = *(void *)((char *)&outlined read-only object #0 of Set<>.init(_:) + v12 + 32);
      if ((v14 & ~a1) == 0)
      {
        if (v14 <= 63)
        {
          switch(v14)
          {
            case 4:
              static Date.ComponentsFormatStyle.Style.wide.getter();
              goto LABEL_4;
            case 8:
              static Date.ComponentsFormatStyle.Style.narrow.getter();
              goto LABEL_4;
            case 16:
              static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
              goto LABEL_4;
            case 32:
              static Date.ComponentsFormatStyle.Style.spellOut.getter();
              goto LABEL_4;
            default:
              goto LABEL_5;
          }
          goto LABEL_5;
        }
        if (v14 > 4095)
        {
          if (v14 != 4096 && v14 != 0x2000) {
            goto LABEL_5;
          }
          static Date.ComponentsFormatStyle.Style.abbreviated.getter();
        }
        else if (v14 == 64)
        {
          static Date.ComponentsFormatStyle.Field.minute.getter();
        }
        else
        {
          if (v14 != 128) {
            goto LABEL_5;
          }
          static Date.ComponentsFormatStyle.Field.second.getter();
        }
LABEL_4:
        specialized Set._Variant.insert(_:)((uint64_t)v10, v6);
        (*v13)(v10, v4);
      }
LABEL_5:
      v12 += 8;
      if (v12 == 64) {
        return v16;
      }
    }
  }
  return result;
}

uint64_t outlined destroy of URLResourceValues?(uint64_t a1)
{
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x263F06898], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude.CodingKeys and conformance Calendar.Component.Magnitude.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude;
  if (!lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component.Magnitude and conformance Calendar.Component.Magnitude);
  }
  return result;
}

ValueMetadata *type metadata accessor for Calendar.Component.Magnitude()
{
  return &type metadata for Calendar.Component.Magnitude;
}

unsigned char *storeEnumTagSinglePayload for Calendar.Component.Magnitude.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245C74868);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Calendar.Component.Magnitude.CodingKeys()
{
  return &unk_26FA3F050;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(0, &lazy cache variable for type metadata for _SetStorage<TouchType>, (uint64_t (*)(void))lazy protocol witness table accessor for type TouchType and conformance TouchType, (uint64_t)&type metadata for TouchType, MEMORY[0x263F8DBD8]);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

unint64_t lazy protocol witness table accessor for type TouchType and conformance TouchType()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchType and conformance TouchType;
  if (!lazy protocol witness table cache variable for type TouchType and conformance TouchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchType and conformance TouchType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TouchType and conformance TouchType;
  if (!lazy protocol witness table cache variable for type TouchType and conformance TouchType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchType and conformance TouchType);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<Calendar.Component.Magnitude.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _SetStorage<Calendar.Component>()
{
  if (!lazy cache variable for type metadata for _SetStorage<Calendar.Component>)
  {
    type metadata accessor for Calendar.Component();
    _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x263F07908]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Calendar.Component>);
    }
  }
}

void type metadata accessor for URLResourceValues?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _SetStorage<NSURLResourceKey>()
{
  if (!lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>)
  {
    type metadata accessor for NSURLResourceKey(255);
    _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    }
  }
}

uint64_t _s10Foundation4DateV21ComponentsFormatStyleV5FieldVAGSQAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewBuilder()
{
  return &type metadata for ViewBuilder;
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)((uint64_t)v9, a3);
}

uint64_t static ViewBuilder.buildIf<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t EnvironmentObject.Wrapper.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_unknownObjectRetain();
  swift_retain();

  return Binding.init<A>(_:keyPath:isolation:)(a2, a1, 0, 0, a3);
}

uint64_t EnvironmentObject.wrappedValue.getter(uint64_t a1)
{
  specialized EnvironmentObject.wrappedValue.getter(a1);

  return swift_unknownObjectRetain();
}

void EnvironmentObject.error()()
{
}

uint64_t EnvironmentObject._store.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*EnvironmentObject._store.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentObject._seed.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t EnvironmentObject._seed.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*EnvironmentObject._seed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EnvironmentObject.projectedValue.getter(uint64_t a1)
{
  if (!a1) {
    specialized EnvironmentObject.error()();
  }
  return swift_unknownObjectRetain();
}

uint64_t static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6);
}

uint64_t static EnvironmentObject._propertyBehaviors.getter()
{
  return 2;
}

uint64_t StoreBox.reset()()
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 40) = 0;
  return result;
}

void specialized EnvironmentObject.error()()
{
  _StringGuts.grow(_:)(117);
  v0._object = (void *)0x800000024621E9D0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0xD000000000000029;
  v2._object = (void *)0x800000024621C280;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v4._object = (void *)0x800000024621C2B0;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized EnvironmentObject.wrappedValue.getter(uint64_t result)
{
  if (!result) {
    specialized EnvironmentObject.error()();
  }
  return result;
}

uint64_t sub_245C75C4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245C75C98()
{
  return 16;
}

uint64_t sub_245C75CA4()
{
  return 1;
}

Swift::Int sub_245C75CAC(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 16));
}

__n128 sub_245C75CB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *assignWithCopy for EnvironmentObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for EnvironmentObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t type metadata accessor for EnvironmentObject.Wrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245C75D74()
{
  return swift_getWitnessTable();
}

uint64_t destroy for StoreBox()
{
  swift_release();
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for StoreBox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StoreBox<A>()
{
  return &protocol witness table for EnvironmentObject<A>;
}

uint64_t View.mask<A>(alignment:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _MaskAlignmentEffect();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v20 - v17;
  a3(v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v18[*(int *)(v14 + 36)], v13, a5);
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  View.modifier<A>(_:)(v18, v21, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t _MaskAlignmentEffect.init(alignment:mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for _MaskAlignmentEffect();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a5[*(int *)(v10 + 36)], a3, a4);
  *(void *)a5 = a1;
  *((void *)a5 + 1) = a2;
  return result;
}

uint64_t _MaskAlignmentEffect.alignment.getter()
{
  return *(void *)v0;
}

uint64_t _MaskAlignmentEffect.alignment.setter(uint64_t result, uint64_t a2)
{
  *Swift::String v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_MaskAlignmentEffect.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _MaskAlignmentEffect.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t _MaskAlignmentEffect.mask.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*_MaskAlignmentEffect.mask.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _MaskEffect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _MaskEffect<A>()
{
  return static _MaskEffect<>.== infix(_:_:)();
}

uint64_t protocol witness for Rule.value.getter in conformance MaskDefaultForeground@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  uint64_t v4 = one-time initialization token for black;
  swift_retain();
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static Color.black;
  uint64_t v6 = one-time initialization token for foreground;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  if (v5 == (void *)static Color.foreground || ((*(uint64_t (**)(void))(*(void *)v5 + 88))() & 1) != 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    swift_retain();
    uint64_t v7 = (uint64_t)v5;
  }
  specialized EnvironmentValues.subscript.setter(v7);
  swift_release();
  swift_release();
  uint64_t v8 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v8);

  return swift_release();
}

uint64_t View.mask<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _MaskEffect();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t _MaskEffect.init(mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _MaskEffect.mask.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _MaskEffect.mask.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_MaskEffect.mask.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t getEnumTagSinglePayload for _MaskAlignmentEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for _MaskAlignmentEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C76A58);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 16] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for _MaskEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _MaskEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245C76DF4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_245C76E1C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20_MaskAlignmentEffectVyqd__GGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _MaskAlignmentEffect);
}

uint64_t sub_245C76E3C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20_MaskAlignmentEffectVyqd__GGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _MaskEffect);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA20_MaskAlignmentEffectVyqd__GGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for MaskDefaultForeground()
{
  return &type metadata for MaskDefaultForeground;
}

unint64_t instantiation function for generic protocol witness table for MaskDefaultForeground(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245C76F20()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void *type metadata accessor for MaskDisplayList()
{
  return &unk_26FA508C8;
}

unint64_t instantiation function for generic protocol witness table for MaskDisplayList(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MaskDisplayList and conformance MaskDisplayList();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of ContentTransitionProvidingFormatStyle.contentTransition<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContainerBackgroundKind.Key(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

BOOL static ContainerBackgroundKind.Builtin.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ContainerBackgroundKind.Builtin.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static ContainerBackgroundKind.Builtin.allCases.getter()
{
  return &outlined read-only object #0 of static ContainerBackgroundKind.Builtin.allCases.getter;
}

Swift::Int ContainerBackgroundKind.Builtin.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContainerBackgroundKind.Builtin(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContainerBackgroundKind.Builtin;
}

void ContainerBackgroundKind.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if (v1 == 5) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

BOOL static ContainerBackgroundKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 5) {
    return v3 == 5;
  }
  if (v3 == 5) {
    return 0;
  }
  return v2 == v3;
}

Swift::Int ContainerBackgroundKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContainerBackgroundKind()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContainerBackgroundKind()
{
  Swift::UInt v1 = *v0;
  if (v1 == 5) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContainerBackgroundKind()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *v0;
  if (v1 == 5) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContainerBackgroundKind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 5;
  BOOL v6 = v3 != 5 && v2 == v3;
  if (v2 == 5) {
    return v4;
  }
  else {
    return v6;
  }
}

uint64_t EnvironmentValues.containerBackgroundKind.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.containerBackgroundKind : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.containerBackgroundKind.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.containerBackgroundKind.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ContainerBackgroundKind.Key>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 6;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.containerBackgroundKind.modify;
}

uint64_t EnvironmentValues.containerBackgroundKind.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ContainerBackgroundKind.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKind.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKind.Builtin and conformance ContainerBackgroundKind.Builtin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContainerBackgroundKind.Builtin] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A])
  {
    type metadata accessor for [ContainerBackgroundKind.Builtin]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContainerBackgroundKind.Builtin] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ContainerBackgroundKind.Builtin]()
{
  if (!lazy cache variable for type metadata for [ContainerBackgroundKind.Builtin])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ContainerBackgroundKind.Builtin]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundKind and conformance ContainerBackgroundKind()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundKind and conformance ContainerBackgroundKind);
  }
  return result;
}

uint64_t sub_245C777CC(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.containerBackgroundKind.setter(&v2);
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245C778B0);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 5;
  unsigned int v9 = v7 - 5;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ContainerBackgroundKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245C77998);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ContainerBackgroundKind(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 5) {
    return v1 - 4;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ContainerBackgroundKind(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind()
{
  return &type metadata for ContainerBackgroundKind;
}

unsigned char *storeEnumTagSinglePayload for ContainerBackgroundKind.Builtin(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245C77AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind.Key()
{
  return &type metadata for ContainerBackgroundKind.Key;
}

void Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)(uint64_t a1)
{
  if (*(double *)(v1 + 88) > 0.0009765625)
  {
    unsigned int v2 = *(void **)v1;
    CFIndex v3 = *(void *)(v1 + 8);
    CGFloat v5 = *(double *)(v1 + 16);
    CGFloat v4 = *(double *)(v1 + 24);
    CFIndex v7 = *(void *)(v1 + 32);
    uint64_t v6 = *(void *)(v1 + 40);
    CFIndex v9 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    long long v10 = *(_OWORD *)(v1 + 96);
    long long v11 = *(_OWORD *)(v1 + 112);
    long long v12 = *(_OWORD *)(v1 + 128);
    unsigned int v101 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v102 = *(void *)(v1 + 72);
    uint64_t v103 = *(void *)(v1 + 64);
    double v105 = *(double *)&v7;
    switch(v101 >> 5)
    {
      case 1u:
        long long v88 = *(_OWORD *)(v1 + 128);
        long long v91 = *(_OWORD *)(v1 + 112);
        long long v94 = *(_OWORD *)(v1 + 96);
        swift_retain_n();
        uint64_t v38 = (id)_CTLineGetRunAtIndex((const __CTLine *)v2, v3);
        if (__OFSUB__(v8, v9)) {
          goto LABEL_31;
        }
        char v39 = v38;
        v114.location = v9;
        v114.length = v8 - v9;
        CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v38, 0, v114);
        CGFloat x = ImageBounds.origin.x;
        CGFloat y = ImageBounds.origin.y;
        CGFloat width = ImageBounds.size.width;
        CGFloat height = ImageBounds.size.height;

        v106.CGFloat a = 1.0;
        v106.CGFloat b = 0.0;
        v106.CGFloat c = 0.0;
        v106.CGFloat d = -1.0;
        v106.CGFloat tx = v5;
        v106.CGFloat ty = v4;
        v123.origin.CGFloat x = x;
        v123.origin.CGFloat y = y;
        v123.size.CGFloat width = width;
        v123.size.CGFloat height = height;
        CGRect v124 = CGRectApplyAffineTransform(v123, &v106);
        CGFloat v44 = v124.origin.x;
        CGFloat v45 = v124.origin.y;
        CGFloat v46 = v124.size.width;
        CGFloat v47 = v124.size.height;
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        v125.origin.CGFloat x = v44;
        v125.origin.CGFloat y = v45;
        v125.size.CGFloat width = v46;
        v125.size.CGFloat height = v47;
        CGRect v126 = CGRectInset(v125, -1.0, -1.0);
        CGFloat v13 = v126.origin.x;
        CGFloat v14 = v126.origin.y;
        CGFloat v15 = v126.size.width;
        CGFloat v16 = v126.size.height;
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        goto LABEL_28;
      case 2u:
        long long v92 = *(_OWORD *)(v1 + 112);
        long long v95 = *(_OWORD *)(v1 + 96);
        long long v89 = *(_OWORD *)(v1 + 128);
        outlined copy of Path.Storage((uint64_t)v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7);
        Path.boundingRect.getter();
        CGFloat v13 = v48;
        CGFloat v14 = v49;
        CGFloat v15 = v50;
        CGFloat v16 = v51;
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        long long v12 = v89;
        long long v11 = v92;
        long long v10 = v95;
        goto LABEL_29;
      case 3u:
        long long v93 = *(_OWORD *)(v1 + 112);
        long long v96 = *(_OWORD *)(v1 + 96);
        LODWORD(v10) = *(void *)(v1 + 8);
        long long v90 = *(_OWORD *)(v1 + 128);
        objc_msgSend(v2, sel_boundingRectWithProgress_, *(double *)&v10);
        CGFloat v13 = v52;
        CGFloat v14 = v53;
        long long v11 = v93;
        long long v10 = v96;
        CGFloat v15 = v54;
        long long v12 = v90;
        CGFloat v16 = v55;
        goto LABEL_29;
      case 4u:
        uint64_t v99 = *(void *)(v1 + 40);
        long long v88 = *(_OWORD *)(v1 + 128);
        long long v91 = *(_OWORD *)(v1 + 112);
        long long v94 = *(_OWORD *)(v1 + 96);
        int v57 = Text.Effect.Keyframes.validFilter(_:)((Swift::UInt64)v2, *(void *)(a1 + 16));
        if (v57)
        {
          int v58 = v57;
          CFIndex v7 = v9;
          int v59 = *(double (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v57) + 0xE0);
          uint64_t v60 = swift_bridgeObjectRetain();
          double v61 = v59(v60);
          CFIndex v9 = v7;
          LOBYTE(v7) = LOBYTE(v105);
          double v62 = v61;
          double v64 = v63;
          double v66 = v65;
          double v68 = v67;
        }
        else
        {
          swift_bridgeObjectRetain();
          double v62 = 0.0;
          double v64 = 0.0;
          double v66 = 0.0;
          double v68 = 0.0;
        }
        CGFloat v69 = *MEMORY[0x263F001A0];
        CGFloat v70 = *(double *)(MEMORY[0x263F001A0] + 8);
        CGFloat v71 = *(double *)(MEMORY[0x263F001A0] + 16);
        CGFloat v72 = *(double *)(MEMORY[0x263F001A0] + 24);
        uint64_t v73 = *(void *)(*(void *)&v5 + 16);
        if (v73)
        {
          uint64_t v97 = v9;
          unsigned int v74 = (_OWORD *)(*(void *)&v5 + 32);
          swift_bridgeObjectRetain();
          for (uint64_t i = v73 - 1; ; --i)
          {
            *(_OWORD *)&v106.CGFloat a = *v74;
            long long v76 = v74[1];
            long long v77 = v74[2];
            long long v78 = v74[4];
            long long v107 = v74[3];
            long long v108 = v78;
            *(_OWORD *)&v106.CGFloat c = v76;
            *(_OWORD *)&v106.CGFloat tx = v77;
            long long v79 = v74[5];
            long long v80 = v74[6];
            long long v81 = v74[8];
            long long v111 = v74[7];
            long long v112 = v81;
            long long v109 = v79;
            long long v110 = v80;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v106, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            v131.origin.CGFloat x = Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)(a1);
            v131.origin.CGFloat y = v82;
            v131.size.CGFloat width = v83;
            v131.size.CGFloat height = v84;
            v127.origin.CGFloat x = v69;
            v127.origin.CGFloat y = v70;
            v127.size.CGFloat width = v71;
            v127.size.CGFloat height = v72;
            CGRect v128 = CGRectUnion(v127, v131);
            CGFloat v69 = v128.origin.x;
            CGFloat v70 = v128.origin.y;
            CGFloat v71 = v128.size.width;
            CGFloat v72 = v128.size.height;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v106, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            if (!i) {
              break;
            }
            v74 += 9;
          }
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, LOBYTE(v105), v99, v97, v8, v103, v102, v101);
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, LOBYTE(v105), v99, v97, v8, v103, v102, v101);
        }
        else
        {
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        }
        CGFloat v13 = CGRect.outset(by:)(v62, v64, v66, v68, v69, v70, v71, v72);
        CGFloat v14 = v85;
        CGFloat v15 = v86;
        CGFloat v16 = v87;
        goto LABEL_28;
      default:
        CGFloat v13 = *MEMORY[0x263F001A0];
        CGFloat v14 = *(double *)(MEMORY[0x263F001A0] + 8);
        CGFloat v15 = *(double *)(MEMORY[0x263F001A0] + 16);
        CGFloat v16 = *(double *)(MEMORY[0x263F001A0] + 24);
        if (v9 == v8) {
          goto LABEL_29;
        }
        long long v88 = *(_OWORD *)(v1 + 128);
        long long v91 = *(_OWORD *)(v1 + 112);
        long long v94 = *(_OWORD *)(v1 + 96);
        if (v8 < v9) {
          goto LABEL_32;
        }
        uint64_t v104 = *(uint64_t *)(v1 + 24);
        uint64_t v98 = *(void *)(v1 + 40);
        outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, *(uint64_t *)&v5, *(uint64_t *)&v4, v7, v6, v9, v8, v103, v102, v101);
        CFIndex v17 = v9;
        *(double *)&uint64_t v100 = v5;
        break;
    }
    do
    {
      if (v17 >= v8)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x245C78320);
      }
      if (LOBYTE(v5))
      {
        outlined copy of Text.Layout.Line.Line(v2, v3, 1);
        id v36 = (id)_NSTextLineFragmentGetCTLine(v2);
        if (!v36) {
          goto LABEL_33;
        }
        uint64_t v18 = v36;
        uint64_t v37 = *(void *)&v5;
        CGFloat v20 = *(double *)&v104;
        CGFloat v19 = v105;
        outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, v37, v104, LOBYTE(v105), v98, v9, v8, v103, v102, v101);
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v2, v3, 0);
        outlined copy of Text.Layout.Line.Line(v2, v3, 0);

        swift_release();
        uint64_t v18 = v2;
        CGFloat v20 = *(double *)&v104;
        CGFloat v19 = v105;
      }
      CFIndex v21 = v17 + 1;
      swift_retain();
      uint64_t v22 = v18;
      unint64_t v23 = (id)_CTLineGetRunAtIndex(v22, v17);
      v113.location = 0;
      v113.length = 0;
      CGRect v115 = CTRunGetImageBounds((CTRunRef)v23, 0, v113);
      CGFloat v24 = v115.origin.x;
      CGFloat v25 = v115.origin.y;
      CGFloat v26 = v115.size.width;
      CGFloat v27 = v115.size.height;

      v106.CGFloat b = 0.0;
      v106.CGFloat c = 0.0;
      v106.CGFloat a = 1.0;
      v106.CGFloat d = -1.0;
      v106.CGFloat tx = v20;
      v106.CGFloat ty = v19;
      v116.origin.CGFloat x = v24;
      v116.origin.CGFloat y = v25;
      v116.size.CGFloat width = v26;
      v116.size.CGFloat height = v27;
      CGRect v117 = CGRectApplyAffineTransform(v116, &v106);
      CGFloat v28 = v117.origin.x;
      CGFloat v29 = v117.origin.y;
      CGFloat v30 = v117.size.width;
      CGFloat v31 = v117.size.height;
      swift_release();

      v118.origin.CGFloat x = v28;
      v118.origin.CGFloat y = v29;
      v118.size.CGFloat width = v30;
      v118.size.CGFloat height = v31;
      CGRect v119 = CGRectInset(v118, -1.0, -1.0);
      CGFloat v32 = v119.origin.x;
      CGFloat v33 = v119.origin.y;
      CGFloat v34 = v119.size.width;
      CGFloat v35 = v119.size.height;
      swift_release();

      v120.origin.CGFloat x = v13;
      v120.origin.CGFloat y = v14;
      v120.size.CGFloat width = v15;
      v120.size.CGFloat height = v16;
      v130.origin.CGFloat x = v32;
      v130.origin.CGFloat y = v33;
      v130.size.CGFloat width = v34;
      v130.size.CGFloat height = v35;
      CGRect v121 = CGRectUnion(v120, v130);
      CGFloat v13 = v121.origin.x;
      CGFloat v14 = v121.origin.y;
      CGFloat v15 = v121.size.width;
      CGFloat v16 = v121.size.height;
      CFIndex v17 = v21;
      CGFloat v5 = *(double *)&v100;
    }
    while (v8 != v21);
    outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, v100, v104, LOBYTE(v105), v98, v9, v8, v103, v102, v101);
LABEL_28:
    long long v11 = v91;
    long long v10 = v94;
    long long v12 = v88;
LABEL_29:
    *(_OWORD *)&v106.CGFloat a = v10;
    *(_OWORD *)&v106.CGFloat c = v11;
    *(_OWORD *)&v106.CGFloat tx = v12;
    v129.origin.CGFloat x = v13;
    v129.origin.CGFloat y = v14;
    v129.size.CGFloat width = v15;
    v129.size.CGFloat height = v16;
    CGRectApplyAffineTransform(v129, &v106);
  }
}

uint64_t Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4, char a5, uint64_t *a6)
{
  CFIndex v7 = a6;
  uint64_t v9 = a2[2];
  uint64_t v73 = a2[1];
  uint64_t v74 = a2[3];
  uint64_t v75 = *a2;
  uint64_t v77 = a2[5];
  uint64_t v79 = a2[4];
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(v6 + 8);
  uint64_t v12 = *(void *)(v6 + 24);
  unint64_t v76 = *(void *)(v6 + 32);
  uint64_t v13 = *(void *)(v6 + 48);
  uint64_t v97 = *(void *)(v6 + 16);
  unint64_t v98 = *(void *)(v6 + 40);
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v96 = *(void *)(v6 + 64);
  long long v94 = *(void **)v6;
  uint64_t v95 = *(void *)(v6 + 72);
  unsigned int v15 = *(unsigned __int8 *)(v6 + 80);
  double v16 = *(double *)(v6 + 88);
  long long v17 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)&v120.CGFloat a = *(_OWORD *)(v6 + 96);
  *(_OWORD *)&v120.CGFloat c = v17;
  *(_OWORD *)&v120.CGFloat tx = *(_OWORD *)(v6 + 128);
  uint64_t v18 = *a6;
  RBDrawingStateGetCTM();
  long long v115 = v104;
  long long v116 = v105;
  long long v117 = v106;
  float v19 = *(float *)(v18 + 48);
  GraphicsContext.concatenate(_:)(&v120);
  float v20 = *(float *)(*v7 + 48);
  float v21 = v16 * v20;
  uint64_t v93 = v11;
  if (v20 != v21)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v22 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v23 = swift_retain();
      *CFIndex v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v23, v22, 1, 0);
      swift_release();
    }
    *(float *)(*v7 + 48) = v21;
  }
  switch(v15 >> 5)
  {
    case 1u:
      uint64_t v81 = *v7;
      *(void *)&long long v104 = v94;
      *((void *)&v104 + 1) = v11;
      *(void *)&long long v105 = v97;
      *((void *)&v105 + 1) = v12;
      LODWORD(v106) = v76;
      *((void *)&v106 + 1) = v98;
      *(void *)&long long v107 = v13;
      char v43 = a5 & 1;
      if (a5) {
        uint64_t v44 = v96;
      }
      else {
        uint64_t v44 = a3;
      }
      uint64_t v45 = a4;
      if (a5) {
        uint64_t v45 = v95;
      }
      uint64_t v91 = v45;
      *((void *)&v107 + 1) = v14;
      id v46 = v94;
      swift_retain();
      GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)&v104, v44, v91, v43 & v15, 41, v81);
      outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v93, v97, v12, v76, v98, v13, v14, v96, v95, v15);
      goto LABEL_43;
    case 2u:
      v118[0] = v94;
      v118[1] = v11;
      v118[2] = v97;
      v118[3] = v12;
      char v119 = v76;
      uint64_t v82 = *v7;
      if (a5)
      {
        unint64_t v47 = HIDWORD(v76);
        uint64_t v48 = v98;
        unint64_t v49 = HIDWORD(v98);
        LODWORD(v50) = v98;
        LODWORD(v51) = v13;
      }
      else
      {
        LODWORD(v49) = a4;
        LODWORD(v47) = a3;
        unint64_t v50 = HIDWORD(a3);
        unint64_t v51 = HIDWORD(a4);
        uint64_t v48 = v98;
      }
      *(void *)&long long v104 = __PAIR64__(v50, v47);
      *((void *)&v104 + 1) = __PAIR64__(v51, v49);
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v104);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v104, (uint64_t)v103);
      uint64_t v99 = 256;
      long long v100 = 0u;
      long long v101 = 0u;
      char v102 = 0;
      outlined copy of Path.Storage((uint64_t)v94, v11, v97, v12, v76);
      GraphicsContext.draw(_:with:style:)((uint64_t)v118, (uint64_t)v103, (uint64_t)&v99, v82);
      outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v11, v97, v12, v76, v48, v13, v14, v96, v95, v15);
      goto LABEL_43;
    case 3u:
      int v52 = v11;
      id v53 = v94;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v55 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v56 = swift_retain();
        *CFIndex v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v56, v55, 1, 0);
        swift_release();
      }
      LODWORD(v54) = v52;
      objc_msgSend(v53, sel_drawInState_by_, *(void *)(*v7 + 24), v54);
      outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v93, v97, v12, v76, v98, v13, v14, v96, v95, v15);
      goto LABEL_43;
    case 4u:
      uint64_t v99 = v9;
      int v57 = Text.Effect.Keyframes.validFilter(_:)((Swift::UInt64)v94, v9);
      if (v57)
      {
        long long v92 = v57;
        v103[0] = *(_OWORD *)a2;
        uint64_t v58 = *(void *)(*(void *)&v103[0] + 16);
        if (v58)
        {
          uint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
          if (v60) {
            uint64_t v58 = *(void *)(*(void *)(*(void *)&v103[0] + 56) + 8 * v59);
          }
          else {
            uint64_t v58 = 0;
          }
        }
        v118[0] = v79;
        uint64_t v114 = v77;
        uint64_t v88 = v58 + v11;
        if (__OFADD__(v58, v11))
        {
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          JUMPOUT(0x245C78C24);
        }
        uint64_t v113 = v10;
        *(void *)&long long v104 = v10;
        *((void *)&v104 + 1) = v97;
        *(void *)&long long v105 = v75;
        *((void *)&v105 + 1) = v73;
        *(void *)&long long v106 = v9;
        *((void *)&v106 + 1) = v74;
        *(void *)&long long v107 = v79;
        *((void *)&v107 + 1) = v77;
        double v85 = *(void (**)(void *, uint64_t, uint64_t *, long long *, uint64_t *, uint64_t *))((*MEMORY[0x263F8EED0] & *v92)
                                                                                                  + 0xD8);
        outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v11, v97, v12, v76, v98, v13, v14, v96, v95, v15);
        outlined retain of LinearGradient((uint64_t)v103);
        outlined retain of ViewTransform((uint64_t)&v99);
        swift_retain();
        outlined retain of LinearGradient((uint64_t)v118);
        outlined retain of LinearGradient((uint64_t)&v114);
        v85(v94, v88, &v113, &v104, a2, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v61 = *(void *)(v97 + 16);
        if (v61)
        {
          double v62 = (long long *)(v97 + 32);
          swift_bridgeObjectRetain();
          for (uint64_t i = v61 - 1; ; --i)
          {
            long long v104 = *v62;
            long long v64 = v62[1];
            long long v65 = v62[2];
            long long v66 = v62[4];
            long long v107 = v62[3];
            long long v108 = v66;
            long long v105 = v64;
            long long v106 = v65;
            long long v67 = v62[5];
            long long v68 = v62[6];
            long long v69 = v62[8];
            long long v111 = v62[7];
            long long v112 = v69;
            long long v109 = v67;
            long long v110 = v68;
            v103[5] = v62[5];
            v103[6] = v62[6];
            v103[7] = v62[7];
            v103[8] = v62[8];
            v103[1] = v62[1];
            v103[2] = v62[2];
            v103[3] = v62[3];
            v103[4] = v62[4];
            v103[0] = *v62;
            v118[0] = v10;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(v118, a2, 0, 0, 1, v7);
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            if (!i) {
              break;
            }
            v62 += 9;
          }
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v93, v97, v12, v76, v98, v13, v14, v96, v95, v15);
        }
      }
LABEL_43:
      GraphicsContext.transform.setter();
      uint64_t result = *v7;
      if (*(float *)(*v7 + 48) != v19)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t v71 = RBDrawingStateInit();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v72 = swift_retain();
          *CFIndex v7 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v72, v71, 1, 0);
          uint64_t result = swift_release();
        }
        *(float *)(*v7 + 48) = v19;
      }
      return result;
    default:
      if (v13 == v14) {
        goto LABEL_43;
      }
      if (v14 < v13) {
        goto LABEL_53;
      }
      outlined copy of Text.Layout.Line.Line(v94, v11, v97 & 1);
      char v24 = a5 & 1;
      if (a5) {
        uint64_t v25 = v96;
      }
      else {
        uint64_t v25 = a3;
      }
      uint64_t v26 = v95;
      if ((a5 & 1) == 0) {
        uint64_t v26 = a4;
      }
      uint64_t v80 = v26;
      unsigned __int8 v90 = v15;
      char v78 = v24 & v15;
      uint64_t v27 = v13;
      CGFloat v84 = v7;
      uint64_t v87 = v25;
      unint64_t v28 = v76;
      while (v27 < v14)
      {
        uint64_t v35 = *v7;
        uint64_t v36 = v13;
        uint64_t v37 = v13;
        uint64_t v38 = v14;
        outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v11, v97, v12, v28, v98, v37, v14, v96, v95, v90);
        if (v97)
        {
          id v39 = (id)_NSTextLineFragmentGetCTLine(v94);
          if (!v39) {
            goto LABEL_54;
          }
          CGFloat v29 = v39;
          uint64_t v40 = v11;
          uint64_t v41 = v12;
          unsigned __int8 v42 = v28;
          uint64_t v31 = v12;
          unint64_t v32 = v28;
          int v33 = v98;
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v40, v97, v41, v42, v98, v36, v38, v96, v95, v90);
          uint64_t v30 = 0;
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v94, v11, 0);

          swift_release();
          CGFloat v29 = v94;
          uint64_t v30 = v11;
          uint64_t v31 = v12;
          unint64_t v32 = v28;
          int v33 = v98;
        }
        *(void *)&long long v104 = v29;
        *((void *)&v104 + 1) = v27;
        *(void *)&long long v105 = v31;
        *((void *)&v105 + 1) = v32;
        LODWORD(v106) = v33;
        *((void *)&v106 + 1) = v30;
        GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)&v104, v87, v80, v78, 8, v35);

        swift_release();
        BOOL v34 = v38 == ++v27;
        CFIndex v7 = v84;
        uint64_t v14 = v38;
        uint64_t v13 = v36;
        unint64_t v28 = v32;
        uint64_t v12 = v31;
        uint64_t v11 = v93;
        if (v34)
        {
          outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v94, v93, v97, v12, v28, v98, v36, v14, v96, v95, v90);
          goto LABEL_43;
        }
      }
      __break(1u);
      goto LABEL_52;
  }
}

uint64_t Text.Effect.DrawingContext.Storage.Shared.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Text.Effect.DrawingContext.Storage.append(_:)(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = v1[5];
  uint64_t v13 = v1[6];
  uint64_t v14 = v1[7];
  uint64_t v15 = v1[8];
  uint64_t v16 = v1[9];
  unsigned __int8 v17 = *(unsigned char *)(a1 + 80);
  char v24 = (void *)(v9 + 16);
  uint64_t v25 = *(void *)(a1 + 32);
  swift_beginAccess();
  uint64_t v18 = *(void **)(v9 + 16);
  swift_retain();
  unint64_t v28 = v2;
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(v2, v3, v26, v27, v25, v4, v6, v5, v7, v8, v17);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v9 + 16) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    void *v24 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
    void *v24 = v18;
  }
  void v18[2] = v21 + 1;
  uint64_t v22 = &v18[18 * v21];
  v22[4] = v28;
  v22[5] = v3;
  v22[6] = v26;
  v22[7] = v27;
  v22[8] = v25;
  v22[9] = v4;
  v22[10] = v6;
  v22[11] = v5;
  v22[12] = v7;
  v22[13] = v8;
  *((unsigned char *)v22 + 112) = v17;
  *(_DWORD *)((char *)v22 + 113) = *(_DWORD *)v29;
  *((_DWORD *)v22 + 29) = *(_DWORD *)&v29[3];
  v22[15] = v16;
  unsigned char v22[16] = v10;
  v22[17] = v11;
  v22[18] = v12;
  v22[19] = v13;
  v22[20] = v14;
  v22[21] = v15;
  swift_endAccess();
  return swift_release();
}

{
  uint64_t v1;
  long long v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  long long v17;
  long long v18;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  void *v25;
  double v26;
  void *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v45[2];
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v3 = *(_OWORD *)(v1 + 40);
  id v53 = *(_OWORD *)(v1 + 24);
  double v54 = v3;
  uint64_t v55 = *(_OWORD *)(v1 + 56);
  uint64_t v56 = 0x3FF0000000000000;
  int v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0x3FF0000000000000;
  char v60 = 0;
  uint64_t v61 = 0;
  uint64_t result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) != 0 || (uint64_t v5 = *(double *)(v1 + 72), v5 == 1.0))
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Array.append<A>(contentsOf:)(a1);
    swift_endAccess();
    return swift_release();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = v6 - 1;
      uint64_t v7 = 32;
      int v33 = a1;
      while (1)
      {
        BOOL v34 = v7;
        uint64_t v8 = (_OWORD *)(a1 + v7);
        uint64_t v9 = v8[8];
        uint64_t v10 = v8[6];
        unint64_t v51 = v8[7];
        int v52 = v9;
        uint64_t v11 = v8[3];
        id v46 = v8[2];
        unint64_t v47 = v11;
        uint64_t v12 = v8[4];
        unint64_t v49 = v8[5];
        unint64_t v50 = v10;
        uint64_t v48 = v12;
        uint64_t v13 = v8[1];
        v45[0] = *v8;
        v45[1] = v13;
        uint64_t v14 = *(void *)(v1 + 16);
        uint64_t v15 = v45[0];
        uint64_t v16 = *((void *)&v13 + 1);
        unsigned __int8 v17 = v46;
        uint64_t v41 = v13;
        id v39 = *((void *)&v47 + 1);
        uint64_t v40 = v47;
        uint64_t v37 = *((void *)&v12 + 1);
        uint64_t v38 = v12;
        uint64_t v36 = v49;
        *(_OWORD *)&t1.CGFloat a = v10;
        *(_OWORD *)&t1.CGFloat c = v51;
        *(_OWORD *)&t1.CGFloat tx = v9;
        uint64_t v18 = *(_OWORD *)(v1 + 40);
        *(_OWORD *)&t2.CGFloat a = *(_OWORD *)(v1 + 24);
        *(_OWORD *)&t2.CGFloat c = v18;
        *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v1 + 56);
        CGAffineTransformConcat(&v42, &t1, &t2);
        CGFloat a = v42.a;
        CGFloat b = v42.b;
        CGFloat c = v42.c;
        CGFloat d = v42.d;
        CGFloat tx = v42.tx;
        CGFloat ty = v42.ty;
        uint64_t v25 = (void *)(v14 + 16);
        uint64_t v26 = *((double *)&v49 + 1);
        swift_beginAccess();
        uint64_t v27 = *(void **)(v14 + 16);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v14 + 16) = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          *uint64_t v25 = v27;
        }
        uint64_t v30 = v27[2];
        CGFloat v29 = v27[3];
        if (v30 >= v29 >> 1)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v27);
          *uint64_t v25 = v27;
        }
        uint64_t v27[2] = v30 + 1;
        uint64_t v31 = &v27[18 * v30];
        *((_OWORD *)v31 + 2) = v15;
        v31[6] = v41;
        v31[7] = v16;
        *((_OWORD *)v31 + 4) = v17;
        v31[10] = v40;
        v31[11] = v39;
        v31[12] = v38;
        v31[13] = v37;
        *((unsigned char *)v31 + 112) = v36;
        unint64_t v32 = *(_DWORD *)((char *)&t2.a + 3);
        *(_DWORD *)((char *)v31 + 113) = LODWORD(t2.a);
        *((_DWORD *)v31 + 29) = v32;
        *((double *)v31 + 15) = v26 * v5;
        *((CGFloat *)v31 + 16) = a;
        *((CGFloat *)v31 + 17) = b;
        *((CGFloat *)v31 + 18) = c;
        *((CGFloat *)v31 + 19) = d;
        *((CGFloat *)v31 + 20) = tx;
        *((CGFloat *)v31 + 21) = ty;
        swift_endAccess();
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v45, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_release();
        if (!v35) {
          break;
        }
        uint64_t v5 = *(double *)(v1 + 72);
        --v35;
        a1 = v33;
        uint64_t v7 = v34 + 144;
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Text.Effect.DrawingContext.Storage.__deallocating_deinit()
{
  swift_release();
  outlined consume of Text.Effect.StopCollector?(v0[23], v0[24], v0[25], v0[26]);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Text.Effect.DrawingContext.Storage()
{
  return self;
}

uint64_t type metadata accessor for Text.Effect.DrawingContext.Storage.Shared()
{
  return self;
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing()
{
  return &type metadata for Text.Effect.ResolvedDrawing;
}

uint64_t initializeWithCopy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  unsigned __int8 v16 = *(unsigned char *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v24 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  unsigned __int8 v26 = *(unsigned char *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  long long v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  unsigned __int8 v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v24;
  *(void *)(a1 + 72) = v25;
  *(unsigned char *)(a1 + 80) = v26;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  unsigned __int8 v15 = *(unsigned char *)(a1 + 80);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v4;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 80) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(unsigned char *)(result + 80) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing.Operation()
{
  return &type metadata for Text.Effect.ResolvedDrawing.Operation;
}

uint64_t assignWithCopy for Text.Effect.DrawingContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Text.Effect.DrawingContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.DrawingContext()
{
  return &type metadata for Text.Effect.DrawingContext;
}

double Text.Effect.DrawingContext.fragment<A>(for:key:fragment:)@<D0>(Swift::UInt64 a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(*(void *)(*(void *)v4 + 16) + 48);
  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(v9, a1, a2, a3, (uint64_t)v12);
  long long v10 = v12[1];
  *(_OWORD *)a4 = v12[0];
  *(_OWORD *)(a4 + 16) = v10;
  double result = *(double *)&v13;
  *(_OWORD *)(a4 + 32) = v13;
  *(void *)(a4 + 48) = v14;
  return result;
}

uint64_t Text.Effect.DrawingContext.foregroundColor.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a2;
  uint64_t result = *v3;
  if (a3)
  {
    if (*(unsigned char *)(*v3 + 96)) {
      return result;
    }
    goto LABEL_15;
  }
  if ((*(unsigned char *)(*v3 + 96) & 1) != 0
    || (*(float *)&a1 == COERCE_FLOAT(*(void *)(result + 80))
      ? (_ZF = *((float *)&a1 + 1) == COERCE_FLOAT(HIDWORD(*(void *)(result + 80))))
      : (_ZF = 0),
        _ZF ? (BOOL v9 = *(float *)&a2 == COERCE_FLOAT(*(void *)(result + 88))) : (BOOL v9 = 0),
        v9 ? (BOOL v10 = *((float *)&a2 + 1) == COERCE_FLOAT(HIDWORD(*(void *)(result + 88)))) : (BOOL v10 = 0),
        !v10))
  {
LABEL_15:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v11 = *v3;
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 104) = 0u;
      *(_OWORD *)(v12 + 120) = 0u;
      *(_OWORD *)(v12 + 136) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v12 + 152) = _Q0;
      *(void *)(v12 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v12 + 176) = 0;
      *(void *)(v12 + 16) = *(void *)(v11 + 16);
      long long v17 = *(_OWORD *)(v11 + 40);
      long long v18 = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v11 + 24);
      *(_OWORD *)(v12 + 40) = v17;
      *(_OWORD *)(v12 + 56) = v18;
      *(void *)(v12 + 72) = *(void *)(v11 + 72);
      uint64_t v19 = *(void *)(v11 + 184);
      uint64_t v20 = *(void *)(v11 + 192);
      uint64_t v28 = a1;
      uint64_t v29 = v5;
      uint64_t v22 = *(void *)(v11 + 200);
      uint64_t v21 = *(void *)(v11 + 208);
      uint64_t v23 = *(void *)(v11 + 216);
      *(void *)(v12 + 184) = v19;
      *(void *)(v12 + 192) = v20;
      *(void *)(v12 + 200) = v22;
      *(void *)(v12 + 208) = v21;
      *(void *)(v12 + 216) = v23;
      swift_retain();
      swift_retain();
      outlined copy of Text.Effect.StopCollector?(v19, v20, v22, v21);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v24 = *(void *)(v11 + 80);
      uint64_t v25 = *(void *)(v11 + 88);
      char v26 = *(unsigned char *)(v11 + 96);
      swift_release();
      *(void *)(v12 + 80) = v24;
      *(void *)(v12 + 88) = v25;
      a1 = v28;
      uint64_t v5 = v29;
      *(unsigned char *)(v12 + 96) = v26;
      uint64_t *v3 = v12;
      uint64_t result = swift_release();
    }
    uint64_t v27 = *v3;
    *(void *)(v27 + 80) = a1;
    *(void *)(v27 + 88) = v5;
    *(unsigned char *)(v27 + 96) = a3 & 1;
  }
  return result;
}

uint64_t specialized Text.Effect.DrawingContext.withStopCollector(prepare:perform:)(void (*a1)(void), double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  long long v49 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(a5 + 16);
  if (v7)
  {
    BOOL v9 = (_OWORD *)(a5 + 32);
    do
    {
      long long v10 = v9[7];
      *(_OWORD *)&v45[96] = v9[6];
      long long v46 = v10;
      long long v11 = v9[5];
      *(_OWORD *)&v45[64] = v9[4];
      *(_OWORD *)&v45[80] = v11;
      long long v12 = v9[1];
      *(_OWORD *)uint64_t v45 = *v9;
      *(_OWORD *)&v45[16] = v12;
      long long v13 = v9[3];
      *(_OWORD *)&v45[32] = v9[2];
      *(_OWORD *)&v45[48] = v13;
      uint64_t v50 = *(void *)v45;
      long long v51 = *(_OWORD *)&v45[8];
      long long v52 = *(_OWORD *)&v45[24];
      long long v53 = *(_OWORD *)&v45[40];
      long long v54 = *(_OWORD *)&v45[56];
      long long v55 = *(_OWORD *)&v45[72];
      long long v56 = *(_OWORD *)&v45[88];
      double v57 = *(double *)&v45[104] + a2;
      long long v58 = v46;
      outlined retain of Text.Effect.DisplayInfo((uint64_t)v45);
      Text.Effect.DisplayInfo.prepare(in:)((uint64_t)&v47);
      outlined release of Text.Effect.DisplayInfo((uint64_t)v45);
      v9 += 8;
      --v7;
    }
    while (v7);
  }
  Text.Effect.StopCollector.flushSegment()();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v14 = *a4;
    type metadata accessor for Text.Effect.DrawingContext.Storage();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v15 + 152) = _Q0;
    *(void *)(v15 + 168) = 0x3FF0000000000000;
    *(unsigned char *)(v15 + 176) = 0;
    *(void *)(v15 + 16) = *(void *)(v14 + 16);
    long long v21 = *(_OWORD *)(v14 + 40);
    long long v22 = *(_OWORD *)(v14 + 56);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v15 + 40) = v21;
    *(_OWORD *)(v15 + 56) = v22;
    *(void *)(v15 + 72) = *(void *)(v14 + 72);
    uint64_t v23 = *(void *)(v14 + 184);
    uint64_t v24 = *(void *)(v14 + 192);
    uint64_t v44 = a1;
    uint64_t v25 = *(void *)(v14 + 200);
    uint64_t v26 = *(void *)(v14 + 208);
    uint64_t v27 = *(void *)(v14 + 216);
    *(void *)(v15 + 184) = v23;
    *(void *)(v15 + 192) = v24;
    *(void *)(v15 + 200) = v25;
    *(void *)(v15 + 208) = v26;
    *(void *)(v15 + 216) = v27;
    swift_retain();
    swift_retain();
    uint64_t v28 = v25;
    a1 = v44;
    outlined copy of Text.Effect.StopCollector?(v23, v24, v28, v26);
    outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
    uint64_t v29 = *(void *)(v14 + 80);
    uint64_t v30 = *(void *)(v14 + 88);
    LOBYTE(v23) = *(unsigned char *)(v14 + 96);
    swift_release();
    *(void *)(v15 + 80) = v29;
    *(void *)(v15 + 88) = v30;
    *(unsigned char *)(v15 + 96) = v23;
    *a4 = v15;
    swift_release();
  }
  uint64_t v31 = *a4;
  uint64_t v32 = *(void *)(*a4 + 184);
  uint64_t v33 = *(void *)(*a4 + 192);
  uint64_t v34 = *(void *)(*a4 + 200);
  uint64_t v35 = *(void *)(*a4 + 208);
  uint64_t v36 = *(void *)(*a4 + 216);
  uint64_t v37 = v48;
  *(_OWORD *)(v31 + 184) = v47;
  *(void *)(v31 + 200) = v37;
  *(_OWORD *)(v31 + 208) = v49;
  outlined copy of Text.Effect.StopCollector?(v32, v33, v34, v35);
  outlined consume of Text.Effect.StopCollector?(v32, v33, v34, v35);
  a1(a4);
  uint64_t v38 = (void *)*a4;
  uint64_t v39 = *(void *)(*a4 + 184);
  uint64_t v40 = *(void *)(*a4 + 192);
  uint64_t v41 = *(void *)(*a4 + 200);
  uint64_t v42 = *(void *)(*a4 + 208);
  v38[23] = v32;
  v38[24] = v33;
  v38[25] = v34;
  v38[26] = v35;
  v38[27] = v36;
  return outlined consume of Text.Effect.StopCollector?(v39, v40, v41, v42);
}

uint64_t outlined release of Text.Effect.DisplayInfo(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Text.Effect.StopCollector?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(result, a2);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text.Effect.StopCollector?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(result, a2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void destroy for Text.Effect.ResolvedDrawing.Operation(uint64_t a1)
{
}

uint64_t initializeWithCopy for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  unsigned __int8 v25 = *(unsigned char *)(a2 + 80);
  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  long long v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  unsigned __int8 v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  unsigned __int8 v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 80) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(unsigned char *)(result + 80) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80) >> 5;
}

uint64_t destructiveProjectEnumData for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result)
{
  *(unsigned char *)(result + 80) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.ResolvedDrawing.Operation.Kind(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = *(unsigned char *)(result + 80) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.ResolvedDrawing.Operation.Kind()
{
  return &type metadata for Text.Effect.ResolvedDrawing.Operation.Kind;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RadialGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance EllipticalGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EllipticalGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance AngularGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AngularGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

void ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3)
{
}

uint64_t ViewValuePredicate.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ViewValuePredicate.view.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Optional();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ViewValuePredicate.view.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewValuePredicate.init(view:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(a3, a1, v5);
}

BOOL ViewValuePredicate.apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)AGGraphGetAttributeInfo();
  uint64_t v14 = swift_conformsToProtocol2();
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v14) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v5, a1, v5);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v3, v12, v6);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  BOOL v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v9, 1, v5) != 1;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v17;
}

uint64_t ViewStatePredicate.state.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v3 = type metadata accessor for Optional();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ViewStatePredicate.state.setter(uint64_t a1)
{
  type metadata accessor for Binding();
  uint64_t v3 = type metadata accessor for Optional();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ViewStatePredicate.state.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewStatePredicate.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

BOOL ViewStatePredicate.apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)AGGraphGetAttributeInfo();
  uint64_t v16 = swift_conformsToProtocol2();
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t, void))(v17 + 24))(&v22, *(void *)(a2 + 16), a1, *(void *)(a2 + 16));
    if ((v23 & 1) == 0)
    {
      _DynamicPropertyBuffer.getState<A>(type:)(v6, (uint64_t)v14);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v3, v14, v8);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v3, v8);
  BOOL v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v11, 1, v7) != 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v19;
}

double protocol witness for static View._makeView(view:inputs:) in conformance _IntelligenceSupport.AnimatingText@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _IntelligenceSupport.AnimatingText(int *a1, uint64_t a2)
{
  int v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  void v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static View.makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _IntelligenceSupport.AnimatingSummarySymbol@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _IntelligenceSupport.AnimatingSummarySymbol@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Path@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Path@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Capsule@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Capsule@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Ellipse@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Ellipse@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Circle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Rectangle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Rectangle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance RoundedRectangle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedRectangle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for static View._makeView(view:inputs:) in conformance Capsule._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Capsule._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  _OWORD v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}