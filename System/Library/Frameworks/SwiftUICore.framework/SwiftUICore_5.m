void DynamicAnimationListener.animationWasAdded()()
{
  uint64_t v0;

  ++*(void *)(v0 + 32);
}

uint64_t type metadata accessor for AnimatorState()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

uint64_t Bindable<A>.subscript.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  swift_unknownObjectRetain();
  swift_retain();

  return Binding.init<A>(_:keyPath:isolation:)(v5, a1, 0, 0, a2);
}

uint64_t type metadata completion function for AnimatableAttributeHelper()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PreferenceTransform<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t EventBindingManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  return v0;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (Swift::UInt *)(v3[6] + 16 * result);
    Swift::UInt *v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    Swift::UInt v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  type metadata accessor for _DictionaryStorage<GestureDependency, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  v3 = static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)();
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return v3;
  }
  v7 = a1 + 5;
  char v8 = v1 - 1;
  while (1)
  {
    *(void *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v3 + 56) + 8 * result) = v4;
    v9 = *(void *)(v3 + 16);
    v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    *(void *)(v3 + 16) = v11;
    if (!v8) {
      goto LABEL_8;
    }
    BOOL v12 = *v7++;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)();
    --v8;
    Swift::UInt v4 = v12;
    if (v13) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static _ShapeStyle_Pack.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (v4 != *(void *)(*a2 + 16))
  {
    char v13 = 0;
    return v13 & 1;
  }
  if (!v4)
  {
    char v13 = 1;
    return v13 & 1;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)&v62[64] = *(_OWORD *)(v2 + 96);
  *(_OWORD *)&v62[80] = v7;
  long long v63 = *(_OWORD *)(v2 + 128);
  uint64_t v64 = *(void *)(v2 + 144);
  long long v8 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)v62 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)&v62[16] = v8;
  long long v9 = *(_OWORD *)(v2 + 80);
  uint64_t v10 = v3 + 32;
  *(_OWORD *)&v62[32] = *(_OWORD *)(v2 + 64);
  *(_OWORD *)&v62[48] = v9;
  uint64_t v11 = v2 + 152;
  uint64_t v12 = v4 - 1;
  char v13 = 1;
  uint64_t v42 = v11;
  uint64_t v43 = v3 + 32;
  uint64_t v44 = v3;
  uint64_t v41 = v4;
  while (1)
  {
    if (v4 == v5)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return v13 & 1;
    }
    if (v5 >= *(void *)(v3 + 16)) {
      break;
    }
    long long v22 = *(_OWORD *)(v10 + v6);
    long long v23 = *(_OWORD *)(v10 + v6 + 16);
    long long v24 = *(_OWORD *)(v10 + v6 + 48);
    *(_OWORD *)&v49[32] = *(_OWORD *)(v10 + v6 + 32);
    *(_OWORD *)&v49[48] = v24;
    *(_OWORD *)v49 = v22;
    *(_OWORD *)&v49[16] = v23;
    long long v25 = *(_OWORD *)(v10 + v6 + 64);
    long long v26 = *(_OWORD *)(v10 + v6 + 80);
    long long v27 = *(_OWORD *)(v10 + v6 + 96);
    uint64_t v51 = *(void *)(v10 + v6 + 112);
    *(_OWORD *)&v49[80] = v26;
    long long v50 = v27;
    *(_OWORD *)&v49[64] = v25;
    v52[4] = *(_OWORD *)&v62[64];
    v52[5] = *(_OWORD *)&v62[80];
    v52[6] = v63;
    uint64_t v53 = v64;
    v52[0] = *(_OWORD *)v62;
    v52[1] = *(_OWORD *)&v62[16];
    v52[2] = *(_OWORD *)&v62[32];
    v52[3] = *(_OWORD *)&v62[48];
    long long v56 = *(_OWORD *)&v49[32];
    long long v57 = v24;
    long long v54 = *(_OWORD *)v49;
    long long v55 = *(_OWORD *)&v49[16];
    uint64_t v61 = v51;
    long long v59 = v26;
    long long v60 = v27;
    long long v58 = v25;
    if ((v13 & 1) == 0)
    {
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v62);
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v49);
LABEL_26:
      outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
      if (v12 == v5) {
        goto LABEL_40;
      }
LABEL_27:
      char v13 = 0;
      goto LABEL_10;
    }
    if (v62[0] != v49[0] || v62[1] != v49[1])
    {
      outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
      outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v49);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v62);
      goto LABEL_26;
    }
    uint64_t v28 = v12;
    float v29 = *(float *)&v62[92];
    uint64_t v30 = v63;
    int v31 = BYTE8(v63);
    uint64_t v32 = v64;
    float v33 = *(float *)&v49[92];
    uint64_t v34 = v50;
    int v35 = BYTE8(v50);
    uint64_t v36 = v51;
    v47[0] = *(_OWORD *)&v62[8];
    v47[1] = *(_OWORD *)&v62[24];
    v47[2] = *(_OWORD *)&v62[40];
    v47[3] = *(_OWORD *)&v62[56];
    v47[4] = *(_OWORD *)&v62[72];
    char v48 = v62[88];
    v45[0] = *(_OWORD *)&v49[8];
    v45[1] = *(_OWORD *)&v49[24];
    v45[2] = *(_OWORD *)&v49[40];
    v45[3] = *(_OWORD *)&v49[56];
    v45[4] = *(_OWORD *)&v49[72];
    char v46 = v49[88];
    outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
    outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
    if ((specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)((uint64_t)v47, (uint64_t)v45) & 1) == 0
      || (uint64_t v40 = v32, v29 != v33))
    {
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v49);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v62);
      outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
      if (v28 == v5) {
        goto LABEL_40;
      }
      uint64_t v12 = v28;
      goto LABEL_9;
    }
    if (v31 == 255)
    {
      uint64_t v15 = v36;
      uint64_t v14 = v32;
      uint64_t v12 = v28;
      if (v35 == 255) {
        goto LABEL_32;
      }
LABEL_7:
      outlined copy of GraphicsBlendMode?(v34, v35);
      outlined copy of GraphicsBlendMode?(v30, v31);
      outlined consume of GraphicsBlendMode?(v30, v31);
      outlined consume of GraphicsBlendMode?(v34, v35);
      goto LABEL_8;
    }
    uint64_t v12 = v28;
    if (v35 == 255) {
      goto LABEL_7;
    }
    if (v31)
    {
      if (v35)
      {
        outlined copy of GraphicsBlendMode?(v34, v35);
        outlined copy of GraphicsBlendMode?(v30, v31);
        outlined consume of GraphicsBlendMode(v30, 1);
        outlined consume of GraphicsBlendMode(v34, 1);
        uint64_t v15 = v36;
        uint64_t v14 = v40;
        if (v30 == v34) {
          goto LABEL_32;
        }
        goto LABEL_8;
      }
      swift_unknownObjectRetain();
    }
    else if ((v35 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v30, 0);
      outlined consume of GraphicsBlendMode(v34, 0);
      uint64_t v15 = v36;
      uint64_t v14 = v40;
      if (v30 == v34)
      {
LABEL_32:
        char v37 = specialized static Array<A>.== infix(_:_:)(v14, v15);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v49);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v62);
        outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
        if (v37)
        {
          uint64_t v11 = v42;
          uint64_t v10 = v43;
          uint64_t v3 = v44;
          uint64_t v4 = v41;
          if (v12 == v5) {
            goto LABEL_45;
          }
          char v13 = 1;
          goto LABEL_10;
        }
        uint64_t v11 = v42;
        uint64_t v10 = v43;
        uint64_t v3 = v44;
        uint64_t v4 = v41;
        if (v12 == v5)
        {
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v13 = 0;
          goto LABEL_41;
        }
        goto LABEL_27;
      }
      goto LABEL_8;
    }
    char v38 = v35 & 1;
    outlined copy of GraphicsBlendMode(v34, v38);
    outlined consume of GraphicsBlendMode(v30, v31 & 1);
    outlined consume of GraphicsBlendMode(v34, v38);
LABEL_8:
    outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v49);
    outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v62);
    outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))((uint64_t)v52);
    if (v12 == v5) {
      goto LABEL_40;
    }
LABEL_9:
    char v13 = 0;
    uint64_t v11 = v42;
    uint64_t v10 = v43;
    uint64_t v3 = v44;
    uint64_t v4 = v41;
LABEL_10:
    long long v16 = *(_OWORD *)(v11 + v6);
    long long v17 = *(_OWORD *)(v11 + v6 + 16);
    long long v18 = *(_OWORD *)(v11 + v6 + 48);
    *(_OWORD *)&v62[32] = *(_OWORD *)(v11 + v6 + 32);
    *(_OWORD *)&v62[48] = v18;
    *(_OWORD *)v62 = v16;
    *(_OWORD *)&v62[16] = v17;
    long long v19 = *(_OWORD *)(v11 + v6 + 64);
    long long v20 = *(_OWORD *)(v11 + v6 + 80);
    long long v21 = *(_OWORD *)(v11 + v6 + 96);
    uint64_t v64 = *(void *)(v11 + v6 + 112);
    *(_OWORD *)&v62[80] = v20;
    long long v63 = v21;
    *(_OWORD *)&v62[64] = v19;
    v6 += 120;
    if (__OFADD__(++v5, 1))
    {
      __break(1u);
      break;
    }
  }
  __break(1u);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v13 = 1;
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t outlined retain of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  long long v17 = *(void **)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v15 = *(void **)(a1 + 144);
  uint64_t v14 = *(void **)(a1 + 152);
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  char v7 = *(unsigned char *)(a1 + 208);
  uint64_t v11 = *(void *)(a1 + 216);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 104);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 224);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v8);
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill(v17, v16, v15, v14, v13, v3, v4, v12, v5, v6, v7);
  outlined copy of GraphicsBlendMode?(v11, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized static _ShapeStyle_Pack.Fill.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v13 = *(void **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(void **)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  int v23 = *(unsigned __int8 *)(a2 + 80);
  v115[0] = v3;
  v115[1] = v2;
  v115[2] = v4;
  v115[3] = v5;
  v115[4] = v6;
  v115[5] = v7;
  v115[6] = v9;
  v115[7] = v8;
  v115[8] = v10;
  v115[9] = v11;
  char v116 = v12;
  v117 = v13;
  uint64_t v118 = v14;
  uint64_t v119 = v15;
  v120 = v16;
  uint64_t v121 = v17;
  uint64_t v122 = v18;
  uint64_t v123 = v19;
  uint64_t v124 = v20;
  uint64_t v125 = v21;
  uint64_t v126 = v22;
  char v127 = v23;
  switch(v12)
  {
    case 1:
      if (v23 != 1)
      {
        uint64_t v42 = v21;
        uint64_t v43 = v20;
        uint64_t v44 = v19;
        uint64_t v83 = v18;
        uint64_t v45 = v17;
        swift_retain();
        uint64_t v21 = v42;
        uint64_t v17 = v45;
        uint64_t v18 = v83;
        goto LABEL_30;
      }
      long long v59 = *(uint64_t (**)(void *))(*(void *)v3 + 128);
      uint64_t v56 = v22;
      unsigned __int8 v27 = v14;
      v91 = (void *)v4;
      uint64_t v28 = v10;
      float v29 = (void *)v15;
      uint64_t v30 = v11;
      int v31 = v16;
      uint64_t v32 = v6;
      uint64_t v33 = v8;
      uint64_t v34 = v9;
      outlined copy of _ShapeStyle_Pack.Fill(v13, v27, v29, v31, v17, v18, v19, v20, v21, v56, 1);
      outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v91, v5, v32, v7, v34, v33, v28, v30, 1);
      LOBYTE(v33) = v59(v13);
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
      return v33 & 1;
    case 2:
      if (v23 != 2)
      {
        uint64_t v95 = v21;
        uint64_t v40 = v4;
        unsigned __int8 v41 = v5;
        goto LABEL_29;
      }
      uint64_t v71 = v11;
      uint64_t v74 = v9;
      uint64_t v87 = v10;
      uint64_t v68 = v8;
      if (*(float *)&v3 == *(float *)&v13
        && *((float *)&v3 + 1) == *((float *)&v13 + 1)
        && *(float *)&v2 == *(float *)&v14
        && *((float *)&v2 + 1) == *((float *)&v14 + 1))
      {
        v106.i64[0] = v4;
        v106.i8[8] = (char)v5;
        v106.i32[3] = HIDWORD(v5);
        LOWORD(v107) = v6;
        uint64_t v94 = v21;
        v97.i64[0] = v15;
        v97.i8[8] = (char)v16;
        v97.i32[3] = HIDWORD(v16);
        LOWORD(v98) = v17;
        v90 = (void *)v4;
        uint64_t v24 = v6;
        uint64_t v77 = v6;
        uint64_t v80 = v18;
        uint64_t v62 = v17;
        uint64_t v65 = v19;
        uint64_t v84 = v20;
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v17, v18, v19, v20, v21, v22, 2);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v90, v5, v24, v7, v74, v68, v87, v71, 2);
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v62, v80, v65, v84, v94, v22, 2);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v90, v5, v77, v7, v74, v68, v87, v71, 2);
        char v25 = static ContentStyle.MaterialStyle.== infix(_:_:)(&v106, &v97);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v13, v14, v15, v16, v62, v80, v65, v84, v94, v22, 2);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v3, v2, (uint64_t)v90, v5, v77, v7, v74, v68, v87, v71, 2);
        return v25 & 1;
      }
      uint64_t v55 = v21;
      uint64_t v57 = v22;
      v52 = v13;
      uint64_t v53 = (void *)v4;
      uint64_t v54 = v6;
      outlined copy of _ShapeStyle_Pack.Fill(v52, v14, (void *)v15, v16, v17, v18, v19, v20, v55, v57, 2);
      outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v53, v5, v54, v7, v74, v68, v87, v71, 2);
      goto LABEL_33;
    case 3:
      uint64_t v95 = v21;
      if (v23 == 3)
      {
        v106.i64[0] = (uint64_t)v3;
        v106.i8[8] = v2;
        v97.i64[0] = (uint64_t)v13;
        v97.i8[8] = v14;
        uint64_t v88 = v10;
        v92 = (void *)v4;
        uint64_t v36 = v11;
        uint64_t v69 = v8;
        uint64_t v72 = v11;
        uint64_t v78 = v6;
        uint64_t v81 = v18;
        uint64_t v63 = v17;
        uint64_t v66 = v19;
        uint64_t v85 = v20;
        uint64_t v75 = v9;
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v17, v18, v19, v20, v21, v22, 3);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v92, v5, v78, v7, v75, v69, v88, v36, 3);
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v63, v81, v66, v85, v95, v22, 3);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v92, v5, v78, v7, v75, v69, v88, v72, 3);
        char v58 = static Material.ID.== infix(_:_:)(&v106, &v97);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v13, v14, v15, v16, v63, v81, v66, v85, v95, v22, 3);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v3, v2, (uint64_t)v92, v5, v78, v7, v75, v69, v88, v72, 3);
        char v25 = v58 & (HIDWORD(v2) == HIDWORD(v14));
        return v25 & 1;
      }
      uint64_t v40 = (uint64_t)v3;
      unsigned __int8 v41 = v2;
LABEL_29:
      uint64_t v43 = v20;
      uint64_t v44 = v19;
      uint64_t v46 = v18;
      uint64_t v47 = v17;
      outlined copy of Material.ID(v40, v41);
      uint64_t v21 = v95;
      uint64_t v17 = v47;
      uint64_t v18 = v46;
LABEL_30:
      uint64_t v19 = v44;
      uint64_t v20 = v43;
      goto LABEL_32;
    case 4:
      if (v23 == 4) {
        goto LABEL_11;
      }
      goto LABEL_32;
    case 5:
      v97.i64[0] = (uint64_t)v3;
      v97.i64[1] = v2;
      uint64_t v98 = v4;
      v99 = v5;
      uint64_t v100 = v6;
      uint64_t v101 = v7;
      uint64_t v102 = v9;
      uint64_t v103 = v8;
      uint64_t v104 = v10;
      uint64_t v105 = v11;
      if (v23 != 5) {
        goto LABEL_32;
      }
      v106.i64[0] = (uint64_t)v13;
      v106.i64[1] = v14;
      uint64_t v107 = v15;
      v108 = v16;
      uint64_t v109 = v17;
      uint64_t v110 = v18;
      uint64_t v111 = v19;
      uint64_t v112 = v20;
      uint64_t v113 = v21;
      uint64_t v114 = v22;
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
      char v25 = specialized static _ColorMatrix.== infix(_:_:)(&v97, &v106);
      return v25 & 1;
    case 6:
      uint64_t v86 = v20;
      uint64_t v96 = v21;
      if (v23 == 6)
      {
        v106.i64[0] = (uint64_t)v3;
        v106.i64[1] = v2;
        LOWORD(v107) = v4 & 0x101;
        BYTE2(v107) = BYTE2(v4) & 1;
        v108 = v5;
        v97.i64[0] = (uint64_t)v13;
        v97.i64[1] = v14;
        LOWORD(v98) = v15 & 0x101;
        BYTE2(v98) = BYTE2(v15) & 1;
        v99 = v16;
        long long v60 = v5;
        uint64_t v61 = v7;
        uint64_t v89 = v10;
        v93 = (void *)v4;
        uint64_t v37 = v10;
        uint64_t v38 = v11;
        uint64_t v70 = v8;
        uint64_t v73 = v11;
        uint64_t v79 = v6;
        uint64_t v82 = v18;
        uint64_t v64 = v17;
        uint64_t v67 = v19;
        uint64_t v39 = v9;
        uint64_t v76 = v9;
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v17, v18, v19, v20, v21, v22, 6);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v93, v60, v79, v61, v39, v70, v37, v38, 6);
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v64, v82, v67, v86, v96, v22, 6);
        outlined copy of _ShapeStyle_Pack.Fill(v3, v2, v93, v60, v79, v61, v76, v70, v89, v73, 6);
        char v25 = specialized static ResolvedMulticolorStyle.== infix(_:_:)(&v106, &v97);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v13, v14, v15, v16, v64, v82, v67, v86, v96, v22, 6);
        outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v3, v2, (uint64_t)v93, v60, v79, v61, v76, v70, v89, v73, 6);
      }
      else
      {
        uint64_t v48 = v19;
        uint64_t v49 = v18;
        uint64_t v50 = v17;
        id v51 = v5;
        uint64_t v21 = v96;
        uint64_t v17 = v50;
        uint64_t v18 = v49;
        uint64_t v19 = v48;
        uint64_t v20 = v86;
LABEL_32:
        outlined copy of _ShapeStyle_Pack.Fill(v13, v14, (void *)v15, v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_33:
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
        char v25 = 0;
      }
      return v25 & 1;
    default:
      if (v23) {
        goto LABEL_32;
      }
LABEL_11:
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v115, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill);
      BOOL v26 = *(float *)&v3 == *(float *)&v13;
      if (*((float *)&v3 + 1) != *((float *)&v13 + 1)) {
        BOOL v26 = 0;
      }
      if (*(float *)&v2 != *(float *)&v14) {
        BOOL v26 = 0;
      }
      char v25 = *((float *)&v2 + 1) == *((float *)&v14 + 1) && v26;
      return v25 & 1;
  }
}

uint64_t outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 192);
  char v9 = *(unsigned char *)(a1 + 200);
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized static _ShapeStyle_Pack.AnimatableData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 != *(void *)(*a2 + 16)) {
    return 0;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v89 = v3 + 32;
  uint64_t v90 = v2 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t result = swift_bridgeObjectRetain_n();
  unint64_t v6 = 0;
  char v7 = 1;
  uint64_t v87 = v4;
  uint64_t v88 = v3;
  while (v6 < *(void *)(v3 + 16))
  {
    uint64_t v8 = (unsigned __int8 *)(v90 + 112 * v6);
    int v9 = *v8;
    int v10 = v8[1];
    uint64_t v11 = *((void *)v8 + 1);
    uint64_t v12 = *((void *)v8 + 2);
    uint64_t v13 = *((void *)v8 + 3);
    uint64_t v14 = *((void *)v8 + 4);
    uint64_t v16 = *((void *)v8 + 5);
    uint64_t v15 = *((void *)v8 + 6);
    uint64_t v17 = *((void *)v8 + 7);
    uint64_t v18 = *((void *)v8 + 8);
    uint64_t v20 = *((void *)v8 + 9);
    uint64_t v19 = *((void *)v8 + 10);
    char v21 = v8[88];
    float v22 = *((float *)v8 + 24);
    uint64_t v23 = *((void *)v8 + 13);
    unint64_t v99 = v6 + 1;
    uint64_t v24 = (unsigned __int8 *)(v89 + 112 * v6);
    int v25 = *v24;
    int v26 = v24[1];
    uint64_t v28 = *((void *)v24 + 1);
    uint64_t v27 = *((void *)v24 + 2);
    uint64_t v29 = *((void *)v24 + 3);
    uint64_t v30 = *((void *)v24 + 4);
    uint64_t v32 = *((void *)v24 + 5);
    uint64_t v31 = *((void *)v24 + 6);
    uint64_t v34 = *((void *)v24 + 7);
    uint64_t v33 = *((void *)v24 + 8);
    uint64_t v35 = *((void *)v24 + 9);
    uint64_t v36 = *((void *)v24 + 10);
    char v37 = v24[88];
    float v38 = *((float *)v24 + 24);
    uint64_t v39 = *((void *)v24 + 13);
    v116[0] = v9;
    v116[1] = v10;
    uint64_t v102 = v11;
    uint64_t v103 = v14;
    uint64_t v117 = v11;
    uint64_t v118 = v12;
    uint64_t v104 = v12;
    uint64_t v105 = v16;
    uint64_t v106 = v19;
    uint64_t v107 = v13;
    uint64_t v119 = v13;
    uint64_t v120 = v14;
    uint64_t v121 = v16;
    uint64_t v122 = v15;
    uint64_t v123 = v17;
    uint64_t v124 = v18;
    uint64_t v125 = v20;
    uint64_t v126 = v19;
    char v101 = v21;
    char v127 = v21;
    float v128 = v22;
    uint64_t v129 = v23;
    char v130 = v25;
    char v131 = v26;
    uint64_t v132 = v28;
    uint64_t v133 = v27;
    uint64_t v134 = v29;
    uint64_t v135 = v30;
    uint64_t v136 = v32;
    uint64_t v137 = v31;
    uint64_t v138 = v34;
    uint64_t v139 = v33;
    uint64_t v140 = v35;
    uint64_t v141 = v36;
    char v142 = v37;
    float v143 = v38;
    uint64_t v144 = v39;
    uint64_t v100 = v39;
    if (v7)
    {
      uint64_t v93 = v23;
      uint64_t v94 = v29;
      uint64_t v84 = v17;
      uint64_t v85 = v18;
      uint64_t v92 = v20;
      uint64_t v86 = v15;
      if (v9 == v25 && v10 == v26)
      {
        v112[0] = v11;
        v112[1] = v12;
        uint64_t v91 = v30;
        v112[2] = v13;
        v112[3] = v14;
        v112[4] = v16;
        v112[5] = v15;
        v112[6] = v17;
        v112[7] = v18;
        uint64_t v82 = v28;
        uint64_t v83 = v27;
        v112[8] = v20;
        v112[9] = v19;
        char v113 = v21;
        float v114 = v22;
        uint64_t v115 = v23;
        v108[0] = v28;
        v108[1] = v27;
        v108[2] = v29;
        v108[3] = v30;
        v108[4] = v32;
        v108[5] = v31;
        v108[6] = v34;
        v108[7] = v33;
        v108[8] = v35;
        v108[9] = v36;
        char v109 = v37;
        float v110 = v38;
        uint64_t v111 = v39;
        uint64_t v95 = v34;
        uint64_t v97 = v33;
        uint64_t v81 = v31;
        uint64_t v40 = v18;
        uint64_t v41 = v17;
        uint64_t v42 = v15;
        uint64_t v43 = v20;
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        uint64_t v44 = v36;
        uint64_t v45 = v32;
        uint64_t v46 = v42;
        uint64_t v47 = v44;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v46, v41, v40, v43, v106, v101);
        swift_bridgeObjectRetain();
        uint64_t v80 = v47;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v32, v81, v95, v97, v35, v47, v37);
        swift_bridgeObjectRetain();
        uint64_t v79 = v32;
        if ((specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)((uint64_t)v112, (uint64_t)v108) & 1) == 0)
        {
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v32, v81, v95, v97, v35, v47, v37);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v86, v84, v85, v92, v106, v101);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v32, v81, v95, v97, v35, v47, v37);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v86, v84, v85, v92, v106, v101);
          goto LABEL_46;
        }
        if (v22 != v38)
        {
          uint64_t v70 = v29;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v32, v81, v95, v97, v35, v80, v37);
          swift_bridgeObjectRelease();
          char v71 = v101;
          char v78 = v101;
          uint64_t v76 = v92;
          uint64_t v77 = v106;
          uint64_t v72 = v102;
          uint64_t v73 = v102;
          uint64_t v74 = v104;
          char v49 = v37;
          goto LABEL_45;
        }
        uint64_t v48 = *(void *)(v93 + 16);
        char v49 = v37;
        if (v48 != *(void *)(v100 + 16)) {
          goto LABEL_43;
        }
        if (v48 && v93 != v100)
        {
          uint64_t v50 = 0;
          while (1)
          {
            uint64_t v55 = v93 + v50;
            uint64_t v56 = v100 + v50;
            if (*(float *)(v93 + v50 + 32) != *(float *)(v100 + v50 + 32)) {
              break;
            }
            if (*(unsigned char *)(v55 + 80))
            {
              if ((*(unsigned char *)(v56 + 80) & 1) == 0) {
                break;
              }
            }
            else
            {
              if (*(unsigned char *)(v56 + 80)) {
                break;
              }
              uint64_t v57 = *(void *)(v55 + 40);
              uint64_t v58 = *(void *)(v55 + 48);
              double v59 = *(double *)(v55 + 56);
              double v60 = *(double *)(v55 + 64);
              double v61 = *(double *)(v55 + 72);
              uint64_t v62 = *(void *)(v56 + 40);
              uint64_t v63 = *(void *)(v56 + 48);
              BOOL v64 = *(float *)&v57 == *(float *)&v62 && *((float *)&v57 + 1) == *((float *)&v62 + 1);
              BOOL v65 = v64 && *(float *)&v58 == *(float *)&v63;
              BOOL v66 = v65 && *((float *)&v58 + 1) == *((float *)&v63 + 1);
              BOOL v67 = v66 && v59 == *(double *)(v56 + 56);
              BOOL v68 = v67 && v60 == *(double *)(v56 + 64);
              if (!v68 || v61 != *(double *)(v56 + 72)) {
                break;
              }
            }
            v50 += 56;
            if (!--v48) {
              goto LABEL_49;
            }
          }
LABEL_43:
          uint64_t v70 = v29;
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v45, v81, v95, v97, v35, v80, v37);
          swift_bridgeObjectRelease();
          char v71 = v101;
          char v78 = v101;
          uint64_t v76 = v92;
          uint64_t v77 = v106;
          uint64_t v72 = v102;
          uint64_t v73 = v102;
          uint64_t v74 = v104;
LABEL_45:
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v73, v74, v107, v103, v105, v86, v84, v85, v76, v77, v78);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v82, v83, v70, v91, v79, v81, v95, v97, v35, v80, v49);
          swift_bridgeObjectRelease();
          outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v72, v104, v107, v103, v105, v86, v84, v85, v92, v106, v71);
LABEL_46:
          swift_bridgeObjectRelease();
          uint64_t v75 = 0;
          goto LABEL_47;
        }
LABEL_49:
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v45, v81, v95, v97, v35, v47, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v86, v84, v85, v92, v106, v101);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v83, v29, v91, v79, v81, v95, v97, v35, v47, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v86, v84, v85, v92, v106, v101);
        swift_bridgeObjectRelease();
        uint64_t v75 = 1;
LABEL_47:
        uint64_t v3 = v88;
        uint64_t result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        if (v99 == v87)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        unint64_t v6 = v99;
        char v7 = v75;
      }
      else
      {
        uint64_t v52 = v33;
        uint64_t v53 = v34;
        uint64_t v54 = v31;
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v28, v27, v94, v30, v32, v54, v53, v52, v35, v36, v37);
        swift_bridgeObjectRelease();
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v102, v104, v107, v103, v105, v86, v84, v85, v92, v106, v101);
        swift_bridgeObjectRelease();
        uint64_t result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
        unint64_t v6 = v99;
        if (v99 == v87)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v75 = 0;
LABEL_55:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v75;
        }
        char v7 = 0;
        uint64_t v3 = v88;
      }
    }
    else
    {
      uint64_t v96 = v34;
      uint64_t v98 = v33;
      uint64_t v51 = v31;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v11, v12, v13, v14, v16, v15, v17, v18, v20, v19, v101);
      swift_bridgeObjectRetain();
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v27, v29, v30, v32, v51, v96, v98, v35, v36, v37);
      swift_bridgeObjectRetain();
      uint64_t result = outlined release of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))((uint64_t)v116);
      if (v99 == v87)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      char v7 = 0;
      unint64_t v6 = v99;
      uint64_t v3 = v88;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      goto LABEL_3;
    case 6:
      swift_bridgeObjectRelease();
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of ((key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>), (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 192);
  char v9 = *(unsigned char *)(a1 + 200);
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  swift_bridgeObjectRetain();
  outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v13, v12, v11, v2, v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      goto LABEL_3;
    case 6:
      swift_bridgeObjectRetain();
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized static _ShapeStyle_Pack.Fill.AnimatableData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
  float64x2_t v9 = *(float64x2_t *)a1;
  float64x2_t v10 = *(float64x2_t *)(a1 + 16);
  float64x2_t v11 = *(float64x2_t *)a2;
  float64x2_t v12 = *(float64x2_t *)(a2 + 16);
  uint64_t v14 = *(uint64_t *)(a2 + 32);
  uint64_t v13 = *(uint64_t *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  int v19 = *(unsigned __int8 *)(a2 + 80);
  v108[0] = *(_OWORD *)a1;
  v108[1] = v10;
  uint64_t v109 = v2;
  uint64_t v110 = v3;
  uint64_t v111 = v5;
  uint64_t v112 = v4;
  uint64_t v113 = v7;
  uint64_t v114 = v6;
  char v115 = v8;
  float64x2_t v116 = v11;
  float64x2_t v117 = v12;
  uint64_t v118 = v14;
  uint64_t v119 = v13;
  uint64_t v120 = v16;
  uint64_t v121 = v15;
  uint64_t v122 = v18;
  uint64_t v123 = v17;
  char v124 = v19;
  switch(v8)
  {
    case 1:
      if (v19 != 1) {
        goto LABEL_47;
      }
      goto LABEL_5;
    case 2:
      float64x2_t v85 = v12;
      if (v19 != 2) {
        goto LABEL_46;
      }
      uint64_t v81 = v4;
      uint64_t v83 = v3;
      float64x2_t v72 = v9;
      float64x2_t v65 = v10;
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v11), (int32x4_t)vceqq_f64(v10, v12))), 0xFuLL))) & 1) == 0)
      {
        uint64_t v54 = v17;
        uint64_t v27 = v2;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v11.f64[0], *(uint64_t *)&v11.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v14, v13, v16, v15, v18, v54, 2);
        uint64_t v29 = *(void *)&v72.f64[1];
        uint64_t v28 = *(void *)&v72.f64[0];
        uint64_t v31 = *(void *)&v65.f64[1];
        uint64_t v30 = *(void *)&v65.f64[0];
        char v59 = 2;
        uint64_t v53 = v7;
        uint64_t v55 = v6;
        uint64_t v32 = v27;
        goto LABEL_57;
      }
      uint64_t v80 = v2;
      float64x2_t v92 = v11;
      char v71 = specialized static Array<A>.== infix(_:_:)(v2, v14);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v92.f64[0], *(uint64_t *)&v92.f64[1], *(uint64_t *)&v85.f64[0], *(uint64_t *)&v85.f64[1], v14, v13, v16, v15, v18, v17, 2);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v72.f64[0], *(uint64_t *)&v72.f64[1], *(uint64_t *)&v65.f64[0], *(uint64_t *)&v65.f64[1], v80, v83, v5, v81, v7, v6, 2);
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      if ((v71 & 1) != 0 && v83 == v13) {
        goto LABEL_60;
      }
      goto LABEL_49;
    case 3:
      if (v19 != 3) {
        goto LABEL_29;
      }
      uint64_t v78 = v2;
      uint64_t v81 = v4;
      uint64_t v83 = v3;
      v66.f64[0] = v10.f64[1];
      float64x2_t v73 = v9;
      int32x2_t v33 = vmovn_s64(vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      if (v33.i32[1] & v33.i32[0])
      {
        uint64_t v60 = *(void *)&v12.f64[0];
        uint64_t v68 = *(void *)&v10.f64[0];
        float64x2_t v87 = v11;
        uint64_t v34 = *(void *)&v12.f64[1];
        char v86 = specialized static Array<A>.== infix(_:_:)(*(void *)&v10.f64[0], *(void *)&v12.f64[0]);
        uint64_t v56 = v17;
        unsigned __int8 v35 = v34;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v87.f64[0], *(uint64_t *)&v87.f64[1], v60, v34, v14, v13, v16, v15, v18, v56, 3);
        uint64_t v37 = *(void *)&v73.f64[1];
        uint64_t v36 = *(void *)&v73.f64[0];
        char v38 = 3;
        goto LABEL_24;
      }
      uint64_t v51 = *(void *)&v10.f64[0];
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v11.f64[0], *(uint64_t *)&v11.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v14, v13, v16, v15, v18, v17, 3);
      uint64_t v29 = *(void *)&v73.f64[1];
      uint64_t v28 = *(void *)&v73.f64[0];
      char v52 = 3;
      goto LABEL_54;
    case 4:
      if (v19 != 4) {
        goto LABEL_29;
      }
      uint64_t v78 = v2;
      uint64_t v81 = v4;
      uint64_t v83 = v3;
      v66.f64[0] = v10.f64[1];
      float64x2_t v74 = v9;
      int32x2_t v39 = vmovn_s64(vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      if (v39.i32[1] & v39.i32[0])
      {
        uint64_t v61 = *(void *)&v12.f64[0];
        uint64_t v68 = *(void *)&v10.f64[0];
        float64x2_t v88 = v11;
        uint64_t v40 = *(void *)&v12.f64[1];
        char v86 = specialized static Array<A>.== infix(_:_:)(*(void *)&v10.f64[0], *(void *)&v12.f64[0]);
        uint64_t v57 = v17;
        unsigned __int8 v35 = v40;
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v88.f64[0], *(uint64_t *)&v88.f64[1], v61, v40, v14, v13, v16, v15, v18, v57, 4);
        uint64_t v37 = *(void *)&v74.f64[1];
        uint64_t v36 = *(void *)&v74.f64[0];
        char v38 = 4;
        goto LABEL_24;
      }
      uint64_t v51 = *(void *)&v10.f64[0];
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v11.f64[0], *(uint64_t *)&v11.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v14, v13, v16, v15, v18, v17, 4);
      uint64_t v29 = *(void *)&v74.f64[1];
      uint64_t v28 = *(void *)&v74.f64[0];
      char v52 = 4;
      goto LABEL_54;
    case 5:
      if (v19 != 5)
      {
LABEL_29:
        float64x2_t v85 = v12;
        goto LABEL_46;
      }
      uint64_t v78 = v2;
      uint64_t v81 = v4;
      uint64_t v83 = v3;
      v66.f64[0] = v10.f64[1];
      float64x2_t v75 = v9;
      int32x2_t v41 = vmovn_s64(vceqq_f64((float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      if ((v41.i32[1] & v41.i32[0] & 1) == 0)
      {
        uint64_t v51 = *(void *)&v10.f64[0];
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v11.f64[0], *(uint64_t *)&v11.f64[1], *(uint64_t *)&v12.f64[0], *(uint64_t *)&v12.f64[1], v14, v13, v16, v15, v18, v17, 5);
        uint64_t v29 = *(void *)&v75.f64[1];
        uint64_t v28 = *(void *)&v75.f64[0];
        char v52 = 5;
LABEL_54:
        char v59 = v52;
        uint64_t v53 = v7;
        uint64_t v55 = v6;
        uint64_t v30 = v51;
        goto LABEL_56;
      }
      uint64_t v62 = *(void *)&v12.f64[0];
      uint64_t v68 = *(void *)&v10.f64[0];
      float64x2_t v89 = v11;
      uint64_t v42 = *(void *)&v12.f64[1];
      char v86 = specialized static Array<A>.== infix(_:_:)(*(void *)&v10.f64[0], *(void *)&v12.f64[0]);
      uint64_t v58 = v17;
      unsigned __int8 v35 = v42;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(*(uint64_t *)&v89.f64[0], *(uint64_t *)&v89.f64[1], v62, v42, v14, v13, v16, v15, v18, v58, 5);
      uint64_t v37 = *(void *)&v75.f64[1];
      uint64_t v36 = *(void *)&v75.f64[0];
      char v38 = 5;
LABEL_24:
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v36, v37, v68, *(uint64_t *)&v66.f64[0], v78, v83, v5, v81, v7, v6, v38);
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      if ((v86 & 1) != 0
        && LOBYTE(v66.f64[0]) == v35
        && *(double *)&v78 == *(double *)&v14
        && *(double *)&v83 == *(double *)&v13)
      {
        goto LABEL_60;
      }
      goto LABEL_49;
    case 6:
      float64x2_t v85 = v12;
      float64x2_t v90 = v11;
      if (v19 != 6)
      {
        swift_bridgeObjectRetain();
        float64x2_t v11 = v90;
LABEL_46:
        float64x2_t v91 = v11;
        swift_bridgeObjectRetain();
        float64x2_t v12 = v85;
        float64x2_t v11 = v91;
LABEL_47:
        uint64_t v29 = *(void *)&v11.f64[1];
        uint64_t v28 = *(void *)&v11.f64[0];
        uint64_t v31 = *(void *)&v12.f64[1];
        uint64_t v30 = *(void *)&v12.f64[0];
        char v59 = v19;
        uint64_t v53 = v18;
        uint64_t v55 = v17;
        uint64_t v32 = v14;
        uint64_t v48 = v13;
        uint64_t v49 = v16;
        uint64_t v50 = v15;
LABEL_48:
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v28, v29, v30, v31, v32, v48, v49, v50, v53, v55, v59);
        outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
LABEL_49:
        char v26 = 0;
        return v26 & 1;
      }
      uint64_t v70 = *(float32x4_t **)&v9.f64[1];
      uint64_t v78 = v2;
      uint64_t v81 = v4;
      uint64_t v83 = v3;
      uint64_t v76 = *(void *)&v10.f64[0];
      uint64_t v64 = *(void *)&v9.f64[0];
      v66.f64[0] = v10.f64[1];
      uint64_t v46 = *(void *)&v11.f64[0];
      if (!specialized static Array<A>.== infix(_:_:)(*(uint64_t *)&v9.f64[0], *(uint64_t *)&v11.f64[0]))
      {
        outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v46, *(uint64_t *)&v90.f64[1], *(uint64_t *)&v85.f64[0], *(uint64_t *)&v85.f64[1], v14, v13, v16, v15, v18, v17, 6);
        char v59 = 6;
        uint64_t v53 = v7;
        uint64_t v55 = v6;
        uint64_t v28 = v64;
        uint64_t v29 = (uint64_t)v70;
        uint64_t v30 = v76;
LABEL_56:
        uint64_t v31 = *(void *)&v66.f64[0];
        uint64_t v32 = v78;
LABEL_57:
        uint64_t v50 = v81;
        uint64_t v48 = v83;
        uint64_t v49 = v5;
        goto LABEL_48;
      }
      specialized static Array<A>.== infix(_:_:)(v70, *(float32x4_t **)&v90.f64[1]);
      LOBYTE(v90.f64[0]) = v47;
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v46, *(uint64_t *)&v90.f64[1], *(uint64_t *)&v85.f64[0], *(uint64_t *)&v85.f64[1], v14, v13, v16, v15, v18, v17, 6);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v64, (uint64_t)v70, v76, *(uint64_t *)&v66.f64[0], v78, v83, v5, v81, v7, v6, 6);
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      if ((LOBYTE(v90.f64[0]) & 1) == 0
        || *(float *)&v76 != *(float *)v85.f64
        || *((float *)&v76 + 1) != *((float *)v85.f64 + 1)
        || *(float *)v66.f64 != *(float *)&v85.f64[1]
        || *((float *)v66.f64 + 1) != *((float *)&v85.f64[1] + 1))
      {
        goto LABEL_49;
      }
LABEL_60:
      char v26 = 1;
      return v26 & 1;
    case 7:
      float64x2_t v85 = v12;
      if (v19 != 7) {
        goto LABEL_46;
      }
      uint64_t v43 = *(void *)&v11.f64[0];
      uint64_t v69 = *(void *)&v9.f64[0];
      uint64_t v82 = v4;
      uint64_t v84 = v3;
      uint64_t v79 = v2;
      uint64_t v77 = *(void *)&v9.f64[1];
      uint64_t v93 = *(void *)&v11.f64[1];
      float64x2_t v67 = v10;
      char v63 = specialized static Array<A>.== infix(_:_:)(*(uint64_t *)&v9.f64[0], *(uint64_t *)&v11.f64[0]);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v43, v93, *(uint64_t *)&v85.f64[0], *(uint64_t *)&v85.f64[1], v14, v13, v16, v15, v18, v17, 7);
      outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v69, v77, *(uint64_t *)&v67.f64[0], *(uint64_t *)&v67.f64[1], v79, v84, v5, v82, v7, v6, 7);
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      return v63 & 1;
    case 8:
      v94[0] = v9;
      v94[1] = v10;
      uint64_t v95 = v2;
      uint64_t v96 = v3;
      uint64_t v97 = v5;
      uint64_t v98 = v4;
      uint64_t v99 = v7;
      uint64_t v100 = v6;
      if (v19 != 8) {
        goto LABEL_47;
      }
      v101[0] = v11;
      v101[1] = v12;
      uint64_t v102 = v14;
      uint64_t v103 = v13;
      uint64_t v104 = v16;
      uint64_t v105 = v15;
      uint64_t v106 = v18;
      uint64_t v107 = v17;
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      char v26 = specialized static _ColorMatrix.== infix(_:_:)(v94, v101);
      return v26 & 1;
    case 9:
      if (v19 != 9) {
        goto LABEL_47;
      }
      int8x16_t v45 = vorrq_s8((int8x16_t)v11, (int8x16_t)v12);
      if (v13 | *(void *)&vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)) | v16 | v14 | v15 | v18 | v17) {
        goto LABEL_47;
      }
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      char v26 = 1;
      return v26 & 1;
    default:
      if (v19) {
        goto LABEL_47;
      }
LABEL_5:
      float v20 = *((float *)&v9.f64[1] + 1);
      float v21 = *(float *)&v9.f64[1];
      float v22 = *((float *)v9.f64 + 1);
      float v23 = *(float *)v9.f64;
      float64x2_t v24 = v11;
      outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined consume of _ShapeStyle_Pack.Fill.AnimatableData);
      BOOL v25 = v23 == *(float *)v24.f64;
      if (v22 != *((float *)v24.f64 + 1)) {
        BOOL v25 = 0;
      }
      if (v21 != *(float *)&v24.f64[1]) {
        BOOL v25 = 0;
      }
      char v26 = v20 == *((float *)&v24.f64[1] + 1) && v25;
      return v26 & 1;
  }
}

uint64_t outlined release of (_ShapeStyle_Pack.Fill, _ShapeStyle_Pack.Fill.AnimatableData)(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v16 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 160);
  char v12 = *(unsigned char *)(a1 + 168);
  char v14 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v14);
  LOBYTE(v15) = v12;
  a3(v17, v16, v4, v5, v6, v7, v8, v10, v9, v11, v15);
  return a1;
}

uint64_t outlined release of ((key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style), (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v17 = *(void *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(void *)(a1 + 200);
  char v7 = *(unsigned char *)(a1 + 208);
  uint64_t v11 = *(void *)(a1 + 216);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 104);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 224);
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v8);
  swift_bridgeObjectRelease();
  outlined consume of _ShapeStyle_Pack.Fill(v17, v16, v15, v14, v13, v3, v4, v12, v5, v6, v7);
  outlined consume of GraphicsBlendMode?(v11, v9);
  swift_bridgeObjectRelease();
  return a1;
}

BOOL specialized static ContentStyle.MaterialStyle.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  int v4 = *((unsigned __int8 *)a1 + 16);
  int v5 = *((unsigned __int8 *)a1 + 17);
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  int v8 = *((_DWORD *)a2 + 3);
  int v9 = *((unsigned __int8 *)a2 + 16);
  int v10 = *((unsigned __int8 *)a2 + 17);
  uint64_t v16 = *a1;
  char v17 = v2;
  uint64_t v14 = v6;
  char v15 = v7;
  if (!specialized static Material.ID.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v14)) {
    return 0;
  }
  BOOL v12 = v4 == v9 && v5 == v10;
  return v3 == v8 && v12;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t type metadata completion function for ShapeStyledResponderData()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _ViewInputs.layoutAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t View.disabled(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = a1;
  v13[0] = KeyPath;
  v13[1] = a6;
  v13[2] = v10;
  type metadata accessor for _EnvironmentKeyTransformModifier<Bool>();
  View.modifier<A>(_:)(v13, a2, v11);
  swift_release();
  return swift_release();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Bool>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>);
    }
  }
}

uint64_t getEnumTagSinglePayload for _LayoutRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StrokeShapeView<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t))
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for [AnyFontModifier](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI15AnyFontModifierCGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI15AnyFontModifierCGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(uint64_t a1)
{
}

void type metadata accessor for [AnyFontModifier](uint64_t a1)
{
}

uint64_t EnvironmentValues.nearestScrollableAxes.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

void EnvironmentValues.nearestScrollableAxes.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void ***)a1;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v9 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v10 = *v9;
  swift_retain_n();
  if (a2) {
    int v11 = v7 + 1;
  }
  else {
    int v11 = v7 + 2;
  }
  a3(v9, v8, v11);
  swift_release();
  if (v9[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

void (*EnvironmentValues.allScrollableAxes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5;
  return EnvironmentValues.allScrollableAxes.modify;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t destroy for CanvasSymbols.Child(id *a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void static Material.thick.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

void *static ScrollCoordinateSpace.vertical.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for vertical, &static ScrollCoordinateSpace.vertical, a1);
}

uint64_t type metadata accessor for AnyResolvedPaint()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for BackgroundProminence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t static _ViewList_ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)) {
    return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8));
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for Font.Weight()
{
  return &type metadata for Font.Weight;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v6()
{
  return &type metadata for _SemanticFeature_v6;
}

ValueMetadata *type metadata accessor for HoverEffectContext.Properties()
{
  return &type metadata for HoverEffectContext.Properties;
}

unint64_t lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout;
  if (!lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout;
  if (!lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FlexFrameLayout and conformance _FlexFrameLayout);
  }
  return result;
}

uint64_t EnvironmentValues.locale.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

Swift::Void __swiftcall EnvironmentValues.configureForRoot()()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v27 = *(void *)(v0 - 8);
  uint64_t v28 = v0;
  MEMORY[0x270FA5388](v0);
  char v26 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  BOOL v25 = (char *)&v25 - v3;
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v25 - v16;
  static Locale.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v14);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  v18(v17, v11);
  static Calendar.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v7);
  int v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  v19(v10, v4);
  float v20 = v25;
  static TimeZone.current.getter();
  uint64_t v22 = (uint64_t)v26;
  uint64_t v21 = v27;
  uint64_t v23 = v28;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v26, v20, v28);
  specialized EnvironmentValues._set<A>(_:for:)(v22);
  float64x2_t v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v24(v22, v23);
  v24((uint64_t)v20, v23);
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t *, unsigned char *, unsigned char *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v16[-v11];
  uint64_t v13 = *v4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v9 + 16))(&v16[-v11], a1, v8, v10);
  swift_retain_n();
  a3(v4, v12, v16);
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
  if (v4[1])
  {
    uint64_t v14 = *v4;
    swift_retain();
    swift_retain();
    a4(v13, v14);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TimeZoneKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<CalendarKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<CalendarKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<CalendarKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<LocaleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LocaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<LocaleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TimeZoneKey>, (uint64_t)&type metadata for TimeZoneKey, (uint64_t)&protocol witness table for TimeZoneKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TimeZoneKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<CalendarKey>, (uint64_t)&type metadata for CalendarKey, (uint64_t)&protocol witness table for CalendarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CalendarKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double ScrollPhaseState.velocity.getter()
{
  return *(double *)(v0 + 8);
}

unint64_t ResolvedVectorGlyph.value.getter()
{
  objc_msgSend(*v0, sel_variableValue);
  *(float *)&unsigned int v2 = v1;
  uint64_t v3 = v2;
  if ((*(void *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)((*(void *)&v1 & 0x7FF0000000000000) == 0x7FF0000000000000) << 32);
}

uint64_t base witness table accessor for _AttributeBody in _ForegroundStyleModifier<A>.ForegroundStyleEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t _GraphInputs.scrollTargetRole.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2;
}

ValueMetadata *type metadata accessor for Text.Scale()
{
  return &type metadata for Text.Scale;
}

uint64_t instantiation function for generic protocol witness table for _TraitWritingModifier<A>.AddTrait(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v3);
  return Hasher._finalize()();
}

uint64_t ColorBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t type metadata completion function for ZStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall PreferenceBridge.invalidate()()
{
  swift_beginAccess();
  v0[5] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  v0[6] = 0;
  swift_release();
  swift_beginAccess();
  uint64_t v61 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_80:
    char v59 = v61;
    swift_beginAccess();
    swift_weakAssign();
    *((unsigned char *)v59 + 24) = 0;
    return;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v4 = 0;
  int v70 = *MEMORY[0x263F288F8];
  uint64_t v63 = v2;
  uint64_t v64 = v1;
  uint64_t v62 = v1 + 32;
  while (v4 < *(void *)(v1 + 16))
  {
    uint64_t v5 = *(void *)(v3 + 8 * v4);
    swift_retain();
    if (swift_weakLoadStrong())
    {
      swift_release();
      uint64_t Strong = swift_weakLoadStrong();
      uint64_t v71 = v5;
      uint64_t v74 = v5 + 424;
      if (Strong)
      {
        unint64_t v66 = v4;
        uint64_t v67 = Strong;
        uint64_t v65 = v5 + 432;
        swift_beginAccess();
        uint64_t v7 = *(void *)(v5 + 432);
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8)
        {
          uint64_t v9 = v67 + 16;
          uint64_t v10 = v67 + 72;
          uint64_t v73 = v7 + 32;
          swift_bridgeObjectRetain();
          swift_beginAccess();
          uint64_t v72 = v10;
          swift_beginAccess();
          unint64_t v11 = 0;
          uint64_t v69 = v9;
          while (v11 < *(void *)(v7 + 16))
          {
            uint64_t v12 = *(void *)(v73 + 24 * v11);
            uint64_t v13 = swift_weakLoadStrong();
            if (v13)
            {
              uint64_t v14 = v13;
              unint64_t v15 = *(void *)(*(void *)v72 + 16);
              if (!v15) {
                goto LABEL_9;
              }
              unint64_t v16 = 0;
              uint64_t v17 = *(void *)v72 + 48;
              while (*(void *)(v17 - 16) != v12)
              {
                ++v16;
                v17 += 24;
                if (v15 == v16) {
                  goto LABEL_9;
                }
              }
              if (v16 >= v15) {
                goto LABEL_82;
              }
              uint64_t Attribute = AGWeakAttributeGetAttribute();
              if (Attribute == v70) {
                goto LABEL_9;
              }
              uint64_t v68 = &v60;
              char v75 = 0;
              MEMORY[0x270FA5388](Attribute);
              uint64_t v19 = type metadata accessor for PreferenceCombiner();
              MEMORY[0x270FA5388](v19);
              AGGraphMutateAttribute();
              if ((v75 & 1) != 0 && (swift_beginAccess(), MEMORY[0x24C527E00](v14 + 200)))
              {
                uint64_t v20 = *(void *)(v14 + 208);
                uint64_t ObjectType = swift_getObjectType();
                (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 16))(ObjectType);
                swift_release();
                swift_unknownObjectRelease();
              }
              else
              {
LABEL_9:
                swift_release();
              }
            }
            if (++v11 == v8)
            {
              swift_bridgeObjectRelease();
              uint64_t v5 = v71;
              goto LABEL_27;
            }
          }
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
LABEL_27:
        *(void *)(v5 + 432) = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v22 = v67;
        swift_beginAccess();
        uint64_t v23 = swift_weakLoadStrong();
        uint64_t v25 = v62;
        uint64_t v24 = v63;
        unint64_t v4 = v66;
        if (v23)
        {
          uint64_t v26 = v23;
          swift_beginAccess();
          uint64_t v27 = AGWeakAttributeGetAttribute();
          if (v27 != v70
            && (char v75 = 0, MEMORY[0x270FA5388](v27), MEMORY[0x270FA5388](v28), AGGraphMutateAttribute(), (v75 & 1) != 0)
            && (swift_beginAccess(), MEMORY[0x24C527E00](v26 + 200)))
          {
            uint64_t v29 = *(void *)(v26 + 208);
            uint64_t v30 = swift_getObjectType();
            (*(void (**)(uint64_t))(*(void *)(v29 + 8) + 16))(v30);
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
          }
          uint64_t v22 = v67;
        }
        uint64_t v31 = (void **)(v22 + 32);
        swift_beginAccess();
        uint64_t v32 = *(void *)(v22 + 32);
        uint64_t v33 = *(void *)(v32 + 16);
        uint64_t v5 = v71;
        uint64_t v3 = v25;
        uint64_t v2 = v24;
        uint64_t v1 = v64;
        if (v33)
        {
          if (*(void *)(v32 + 32) == v71)
          {
            unint64_t v35 = 0;
            goto LABEL_43;
          }
          if (v33 != 1)
          {
            uint64_t v34 = 5;
            while (1)
            {
              unint64_t v35 = v34 - 4;
              if (*(void *)(v32 + 8 * v34) == v71) {
                break;
              }
              uint64_t v36 = v34 - 3;
              if (__OFADD__(v35, 1)) {
                goto LABEL_84;
              }
              ++v34;
              if (v36 == v33) {
                goto LABEL_48;
              }
            }
LABEL_43:
            swift_beginAccess();
            uint64_t v37 = *v31;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
            }
            unint64_t v38 = v37[2];
            if (v35 >= v38) {
              goto LABEL_86;
            }
            unint64_t v39 = v38 - 1;
            uint64_t v40 = v38 - 1 - v35;
            if (v40 < 0) {
              goto LABEL_87;
            }
            memmove(&v37[v35 + 4], &v37[v35 + 5], 8 * v40);
            v37[2] = v39;
            *uint64_t v31 = v37;
            swift_endAccess();
            uint64_t v5 = v71;
          }
        }
LABEL_48:
        swift_release();
      }
      swift_weakAssign();
      swift_beginAccess();
      if (*(unsigned char *)(v5 + 128)) {
        GraphHost.uninstantiate(immediately:)(1);
      }
      swift_weakAssign();
      uint64_t v41 = swift_weakLoadStrong();
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = (void **)(v41 + 32);
        swift_beginAccess();
        uint64_t v44 = *(void *)(v42 + 32);
        uint64_t v45 = *(void *)(v44 + 16);
        if (!v45) {
          goto LABEL_59;
        }
        if (*(void *)(v44 + 32) != v71)
        {
          if (v45 != 1)
          {
            uint64_t v46 = 5;
            while (1)
            {
              uint64_t v47 = v46 - 3;
              if (__OFADD__(v46 - 4, 1)) {
                break;
              }
              if (*(void *)(v44 + 8 * v46) == v71) {
                goto LABEL_64;
              }
              ++v46;
              if (v47 == v45) {
                goto LABEL_59;
              }
            }
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
            break;
          }
LABEL_59:
          swift_beginAccess();
          uint64_t v48 = *v43;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v43 = v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
            *uint64_t v43 = v48;
          }
          unint64_t v51 = v48[2];
          unint64_t v50 = v48[3];
          if (v51 >= v50 >> 1)
          {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v48);
            *uint64_t v43 = v48;
          }
          v48[2] = v51 + 1;
          v48[v51 + 4] = v71;
          swift_endAccess();
        }
LABEL_64:
        swift_release();
        uint64_t v5 = v71;
      }
      swift_beginAccess();
      unsigned int v52 = *(unsigned __int8 *)(v5 + 169);
      if (v52)
      {
        int v53 = 1;
      }
      else
      {
        uint64_t v56 = swift_weakLoadStrong();
        LOBYTE(v52) = v56;
        if (v56)
        {
          swift_beginAccess();
          uint64_t v57 = swift_weakLoadStrong();
          swift_release();
          if (v57)
          {
            swift_beginAccess();
            unsigned int v52 = *(unsigned __int8 *)(v57 + 169);
            swift_release();
            int v53 = (v52 >> 1) & 1;
          }
          else
          {
            int v53 = 0;
            LOBYTE(v52) = 0;
          }
        }
        else
        {
          int v53 = 0;
        }
      }
      uint64_t v54 = v71;
      swift_beginAccess();
      if (v53 != *(unsigned __int8 *)(v54 + 40))
      {
        uint64_t v54 = v71;
        if (v53)
        {
          id v55 = *(id *)(v71 + 32);
          AGSubgraphApply();

          AGSubgraphRemoveChild();
        }
        else
        {
          AGSubgraphAddChild();
          id v58 = *(id *)(v54 + 32);
          AGSubgraphApply();
        }
        *(unsigned char *)(v54 + 40) = v53;
      }
      if ((((v52 & 2) != 0) ^ *(unsigned __int8 *)(v54 + 41)))
      {
        *(unsigned char *)(v54 + 41) = (v52 & 2) >> 1;
        ViewGraph.isHiddenForReuseDidChange()();
      }
    }
    swift_release();
    if (++v4 == v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_80;
    }
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall GraphHost.uninstantiate(immediately:)(Swift::Bool immediately)
{
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 128) == 1)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 88);
    swift_beginAccess();
    int v4 = *(_DWORD *)(v3 + 16);
    uint64_t v5 = MEMORY[0x263F8EE78];
    unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for External<Time>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v7 = swift_allocObject();
    *(_DWORD *)(v7 + 16) = v4;
    *(void *)(v7 + 24) = v5;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_WORD *)(v7 + 80) = 256;
    *(void *)(v7 + 88) = v6;
    *(void *)(v1 + 88) = v7;
    swift_endAccess();
    uint64_t v8 = swift_release();
    (*(void (**)(uint64_t))(*(void *)v1 + 216))(v8);
    id v9 = *(id *)(v1 + 32);
    AGSubgraphApply();

    if ((*(unsigned char *)(v1 + 40) & 1) == 0) {
      uint64_t v10 = AGSubgraphRemoveChild();
    }
    MEMORY[0x270FA5388](v10);
    id v12 = v11;
    AGSubgraphApply();

    uint64_t v13 = *(void **)(v1 + 32);
    if (immediately)
    {
      AGSubgraphInvalidate();
    }
    else
    {
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      id v15 = v13;
      specialized static Update.begin()();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = partial apply for closure #1 in GraphHost.uninstantiate(immediately:);
      *(void *)(v16 + 24) = v14;
      uint64_t v17 = one-time initialization token for actions;
      swift_retain();
      if (v17 != -1) {
        swift_once();
      }
      uint64_t v18 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v19 = v18[2];
      unint64_t v20 = v18[3];
      unint64_t v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        unint64_t v28 = v19 + 1;
        uint64_t v25 = v18;
        unint64_t v26 = v18[2];
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v19 + 1, 1, v25);
        unint64_t v19 = v26;
        unint64_t v21 = v28;
        uint64_t v18 = v27;
      }
      v18[2] = v21;
      uint64_t v22 = &v18[2 * v19];
      v22[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v22[5] = v16;
      static Update.actions = v18;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
    }
    if (*(void *)(v1 + 16))
    {
      uint64_t v23 = AGSubgraphCreate();
      uint64_t v24 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v23;

      if ((*(unsigned char *)(v1 + 40) & 1) == 0) {
        AGSubgraphAddChild();
      }
      *(unsigned char *)(v1 + 128) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return ViewGraph.init<A>(rootViewType:requestedOutputs:)(a1, a2, a3, a4);
}

uint64_t static GeometryReader._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unsigned int v7 = *a1;
  unint64_t v8 = *(void *)a2;
  unsigned int v40 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  int v11 = *(_DWORD *)(a2 + 36);
  int v36 = *(_DWORD *)(a2 + 32);
  uint64_t v35 = *(void *)(a2 + 40);
  uint64_t v34 = *(void *)(a2 + 48);
  unsigned int v12 = *(_DWORD *)(a2 + 60);
  int v38 = *(_DWORD *)(a2 + 56);
  unsigned int v13 = *(_DWORD *)(a2 + 64);
  int v37 = *(_DWORD *)(a2 + 68);
  unsigned int v14 = *(_DWORD *)(a2 + 72);
  uint64_t v44 = *(void *)(a2 + 76);
  swift_beginAccess();
  int v15 = *(_DWORD *)(v9 + 16);
  unint64_t v51 = __PAIR64__(v14, v7);
  unsigned int v52 = v13;
  unsigned int v53 = v12;
  unsigned int v39 = v12;
  LODWORD(v54) = v15;
  *(void *)((char *)&v54 + 4) = v44;
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>();
  uint64_t v48 = type metadata accessor for _VariadicView.Tree();
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v49 = type metadata accessor for GeometryReader.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v47, v49, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  uint64_t v18 = (int *)MEMORY[0x263F288F8];
  int v19 = v11;
  if ((v11 & 0x20) != 0)
  {
    int v33 = v11 | 2;
    uint64_t KeyPath = swift_getKeyPath();
    swift_beginAccess();
    swift_retain_n();
    swift_retain_n();
    uint64_t v20 = v35;
    swift_bridgeObjectRetain_n();
    uint64_t v21 = v34;
    swift_bridgeObjectRetain();
    unsigned int v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unsigned int v26 = *v18;
    unint64_t v51 = __PAIR64__(v14, v25);
    unsigned int v52 = v26;
    unsigned int v53 = v26;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry();
    Attribute.init<A>(body:value:flags:update:)();
    unint64_t v51 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v13);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
    unsigned int v13 = Attribute.init<A>(body:value:flags:update:)();
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    int v22 = v33;
    unsigned int v14 = OffsetAttribute2;
    int v23 = v36 | 0x18;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v20 = v35;
    swift_bridgeObjectRetain();
    uint64_t v21 = v34;
    swift_bridgeObjectRetain();
    int v22 = v19;
    int v23 = v36;
  }
  unint64_t v51 = v8;
  unsigned int v52 = v40;
  *(void *)&long long v54 = v9;
  *((void *)&v54 + 1) = v10;
  int v55 = v23;
  int v56 = v22;
  uint64_t v57 = v20;
  uint64_t v58 = v21;
  int v59 = v38;
  unsigned int v60 = v39;
  unsigned int v61 = v13;
  int v62 = v37;
  unsigned int v63 = v14;
  uint64_t v64 = v44;
  uint64_t v28 = closure #1 in static GeometryReader._makeView(view:inputs:)((uint64_t *)&v51, v45, v41, v42, (uint64_t)&v45);
  if ((v19 & 0x20) != 0)
  {
    MEMORY[0x270FA5388](v28);
    MEMORY[0x270FA5388](v29);
    AGGraphMutateAttribute();
  }
  int v30 = *MEMORY[0x263F288F8];
  int v31 = v46;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a5 = v45;
  *(_DWORD *)(a5 + 8) = v31 | 0x80;
  *(_DWORD *)(a5 + 12) = v30;
  return result;
}

uint64_t ViewGraph.init<A>(rootViewType:requestedOutputs:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v67 = *MEMORY[0x263EF8340];
  char v7 = *a2;
  *(void *)(v4 + 208) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v4 + 216) = 0;
  *(void *)(v4 + 224) = 0;
  *(unsigned char *)(v4 + 232) = 1;
  int v8 = *MEMORY[0x263F288F8];
  *(_DWORD *)(v4 + 272) = *MEMORY[0x263F288F8];
  *(_DWORD *)(v4 + 292) = v8;
  *(_DWORD *)(v4 + 296) = v8;
  *(_DWORD *)(v4 + 300) = v8;
  *(void *)(v4 + 312) = 0;
  *(void *)(v4 + 332) = 0;
  *(void *)(v4 + 340) = 0;
  *(void *)(v4 + 324) = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 352) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v4 + 360) = 0;
  *(unsigned char *)(v4 + 362) = 0;
  *(void *)(v4 + 368) = 0;
  uint64_t v10 = one-time initialization token for infinity;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static Time.infinity;
  *(void *)(v4 + 376) = static Time.infinity;
  uint64_t v12 = MEMORY[0x263F8EE88];
  *(void *)(v4 + 384) = 0x7FF0000000000000;
  *(void *)(v4 + 392) = v12;
  *(void *)(v4 + 400) = v11;
  *(void *)(v4 + 408) = 0x7FF0000000000000;
  *(void *)(v4 + 416) = v12;
  swift_weakInit();
  *(void *)(v4 + 432) = v9;
  *(void *)(v4 + 176) = a1;
  *(unsigned char *)(v4 + 361) = v7;
  GraphHost.Data.init()((uint64_t)&v56);
  unsigned int v13 = (void *)*((void *)&v56 + 1);
  unint64_t v50 = (void *)v56;
  unint64_t v51 = *(void **)v57;
  int v49 = v57[8];
  int v48 = v57[9];
  uint64_t v14 = *(void *)&v57[12];
  uint64_t v15 = v58;
  uint64_t v16 = v59;
  int v47 = v60;
  uint64_t v53 = v61;
  int v46 = v62;
  uint64_t v52 = v63;
  uint64_t v17 = v64;
  uint64_t v18 = v65;
  uint64_t v19 = v66;
  id v54 = (id)AGSubgraphGetCurrent();
  uint64_t v20 = AGSubgraphSetCurrent();
  MEMORY[0x270FA5388](v20);
  v45[2] = a3;
  uint64_t v21 = type metadata accessor for External();
  uint64_t v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v22, (uint64_t)partial apply for closure #1 in Attribute.init(type:), (uint64_t)v45, v21, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v23);
  *(_DWORD *)(v4 + 236) = v56;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RootTransform and conformance RootTransform();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v4 + 240) = v24;
  *(_DWORD *)(v4 + 244) = v24;
  unsigned int v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewOrigin> and conformance External<A>, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
  long long v56 = 0uLL;
  *(_DWORD *)(v4 + 248) = Attribute.init<A>(body:value:flags:update:)();
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize, v25);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewSize> and conformance External<A>, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize);
  long long v56 = 0u;
  *(_OWORD *)uint64_t v57 = 0u;
  *(_DWORD *)(v4 + 252) = Attribute.init<A>(body:value:flags:update:)();
  int v26 = v8;
  if ((v7 & 0x10) != 0)
  {
    long long v56 = 0u;
    *(_OWORD *)uint64_t v57 = 0u;
    int v26 = Attribute.init<A>(body:value:flags:update:)();
  }
  *(_DWORD *)(v4 + 272) = v26;
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2461B9DC0;
  *(void *)(v27 + 32) = 1;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(void *)&long long v56 = v27;
  *((void *)&v56 + 1) = 1;
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>(&lazy protocol witness table cache variable for type External<_SafeAreaInsetsModifier> and conformance External<A>, &lazy cache variable for type metadata for External<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier);
  int v28 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  outlined consume of Transaction?(1);
  *(_DWORD *)(v4 + 256) = v28;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v56 = static LayoutComputer.defaultValue;
  uint64_t v29 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>(&lazy protocol witness table cache variable for type External<LayoutComputer> and conformance External<A>, &lazy cache variable for type metadata for External<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer);
  swift_retain();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  *(_DWORD *)(v4 + 320) = v30;
  *(void *)&long long v56 = 0;
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, v29);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
  *(_DWORD *)(v4 + 276) = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v31 = MEMORY[0x263F8EE78];
  *(void *)&long long v56 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for [EventID : EventType]();
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for External<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
  int v32 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v4 + 280) = v32;
  *(void *)&long long v56 = 1;
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, v29);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase);
  *(_DWORD *)(v4 + 284) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v56) = 0;
  uint64_t v33 = MEMORY[0x263F8E8F8];
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], v29);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v33);
  *(_DWORD *)(v4 + 288) = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v56 = v31;
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v29);
  lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  *(_DWORD *)(v4 + 304) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v56) = v8;
  *(void *)((char *)&v56 + 4) = *(void *)(v4 + 252);
  HIDWORD(v56) = v8;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry();
  *(_DWORD *)(v4 + 260) = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v4 + 264) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v4 + 268) = AGGraphCreateOffsetAttribute2();
  int v34 = *(_DWORD *)(v4 + 256);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v55;
  *(void *)(v35 + 16) = a3;
  *(void *)(v35 + 24) = v36;
  *(void *)(v35 + 32) = *(void *)(v4 + 248);
  *(_DWORD *)(v35 + 40) = v34;
  *(void *)(v4 + 184) = partial apply for closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:);
  *(void *)(v4 + 192) = v35;
  swift_release();
  int v37 = v50;
  *(void *)&long long v56 = v50;
  *((void *)&v56 + 1) = v13;
  int v38 = v51;
  *(void *)uint64_t v57 = v51;
  v57[8] = v49;
  v57[9] = v48;
  *(void *)&v57[12] = v14;
  uint64_t v58 = v15;
  uint64_t v59 = v16;
  int v60 = v47;
  uint64_t v61 = v53;
  int v62 = v46;
  uint64_t v63 = v52;
  uint64_t v64 = v17;
  uint64_t v65 = v18;
  uint64_t v66 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v39 = v37;
  id v40 = v13;
  id v41 = v38;
  uint64_t v42 = GraphHost.init(data:)((uint64_t)&v56);
  uint64_t v43 = v54;
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v42;
}

void type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<ViewOrigin> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall ViewGraph.setSafeAreaInsets(_:)(Swift::OpaquePointer a1)
{
  swift_bridgeObjectRetain();
  int v2 = AGGraphSetValue();
  if (v2 && (swift_beginAccess(), MEMORY[0x24C527E00](v1 + 200)))
  {
    uint64_t v3 = *(void *)(v1 + 208);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 16))(ObjectType);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of Transaction?(1);
  return v2;
}

uint64_t outlined consume of Transaction?(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry;
  if (!lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootGeometry and conformance RootGeometry);
  }
  return result;
}

uint64_t GraphHost.init(data:)(uint64_t a1)
{
  int v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 25);
  long long v17 = *(_OWORD *)(a1 + 28);
  long long v18 = *(_OWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 44);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  long long v16 = *(_OWORD *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)(v1 + 120) = MEMORY[0x263F8EE80];
  *(unsigned char *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 132) = 0;
  *(_DWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = -1;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 144) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = v11;
  *(_WORD *)(v1 + 168) = 1;
  if (!objc_msgSend(self, sel_isMainThread)) {
    goto LABEL_9;
  }
  *(void *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 24) = v18;
  *(unsigned char *)(v1 + 40) = v3;
  *(unsigned char *)(v1 + 41) = v4;
  *(_OWORD *)(v1 + 44) = v17;
  *(void *)(v1 + 60) = v5;
  *(_DWORD *)(v1 + 68) = v6;
  *(void *)(v1 + 72) = v7;
  *(_DWORD *)(v1 + 80) = v8;
  *(void *)(v1 + 88) = v9;
  *(_OWORD *)(v1 + 96) = v16;
  *(void *)(v1 + 112) = v10;
  if (v2)
  {
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    id v12 = v2;
    AGGraphSetUpdateCallback();

    swift_release_n();
    swift_beginAccess();
    unsigned int v13 = *(void **)(v1 + 16);
    if (v13)
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      id v14 = v13;
      AGGraphSetInvalidationCallback();

      swift_release_n();
      if (*(void *)(v1 + 16))
      {
        AGGraphSetContext();
        return v1;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double GraphHost.Data.init()@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for sharedGraph != -1) {
    swift_once();
  }
  Shared = (void *)AGGraphCreateShared();
  id v18 = Shared;
  int v2 = (void *)AGSubgraphCreate();
  id v16 = (id)AGSubgraphGetCurrent();
  id v3 = v2;
  AGSubgraphSetCurrent();
  char v4 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
  type metadata accessor for External<Time>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, MEMORY[0x263F288C8]);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
  int v17 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for External<Time>(0, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, v4);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0(&lazy protocol witness table cache variable for type External<EnvironmentValues> and conformance External<A>, &lazy cache variable for type metadata for External<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for External<Time>(0, &lazy cache variable for type metadata for External<_GraphInputs.Phase>, (uint64_t)&type metadata for _GraphInputs.Phase, v4);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0(&lazy protocol witness table cache variable for type External<_GraphInputs.Phase> and conformance External<A>, &lazy cache variable for type metadata for External<_GraphInputs.Phase>, (uint64_t)&type metadata for _GraphInputs.Phase);
  int v15 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v6 = MEMORY[0x263F8EE78];
  type metadata accessor for External<Time>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v4);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  int v14 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for External<Time>(0, (unint64_t *)&lazy cache variable for type metadata for External<Transaction>, (uint64_t)&type metadata for Transaction, v4);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0(&lazy protocol witness table cache variable for type External<Transaction> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Transaction>, (uint64_t)&type metadata for Transaction);
  int v7 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v8 = MEMORY[0x263F8E8F8];
  type metadata accessor for External<Time>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], v4);
  _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v8);
  LODWORD(v4) = Attribute.init<A>(body:value:flags:update:)();
  int v9 = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  type metadata accessor for External<Time>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v6;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_WORD *)(v11 + 80) = 256;
  *(void *)(v11 + 88) = v10;
  uint64_t v12 = AGSubgraphCreate();
  AGSubgraphAddChild();

  AGSubgraphSetCurrent();
  *(void *)a1 = Shared;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v12;
  *(_WORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v17;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v15;
  *(_DWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 44) = v7;
  *(_DWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 52) = v9;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 84) = v7;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 88) = 0xFFFFFFFFLL;
  *(void *)(a1 + 96) = MEMORY[0x263F8EE88];
  return result;
}

void type metadata accessor for External<Time>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<Time> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for GesturePhase<()>(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14AttributeGraph8ExternalVy7SwiftUI4TimeVGACyxGAA01_A4BodyAAWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<Time>(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootTransform and conformance RootTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type RootTransform and conformance RootTransform;
  if (!lazy protocol witness table cache variable for type RootTransform and conformance RootTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootTransform and conformance RootTransform);
  }
  return result;
}

uint64_t GeometryReader.Child.updateValue()(uint64_t a1)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>();
  uint64_t v4 = v3;
  uint64_t v104 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v96 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v81 - v7;
  uint64_t v9 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v98 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v81 = (char *)&v81 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v81 - v15;
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  uint64_t v93 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v94 = (uint64_t)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v101 = (uint64_t)&v81 - v19;
  uint64_t v103 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v95 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v100 = (char *)&v81 - v23;
  MEMORY[0x270FA5388](v24);
  unint64_t v26 = (unint64_t)&v81 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v102 = (char *)&v81 - v28;
  uint64_t v29 = (char *)v1;
  LODWORD(v97) = *(_DWORD *)(v1 + 24) + 1;
  *(_DWORD *)(v1 + 24) = v97;
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  int v31 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unint64_t v83 = v26;
    uint64_t v84 = v4;
    float64x2_t v85 = v8;
    uint64_t v99 = v6;
    int v32 = *(_DWORD *)(v1 + 20);
    float64x2_t v92 = *(char **)(v104 + 24);
    LODWORD(v89) = v31 == v32;
    if (v31 == v32) {
      int v32 = 0;
    }
    int v88 = v32;
    unint64_t v33 = AGCreateWeakAttribute();
    uint64_t v105 = v5;
    int v34 = v33;
    unint64_t v91 = HIDWORD(v33);
    unint64_t v26 = AGCreateWeakAttribute();
    unint64_t v90 = HIDWORD(v26);
    unint64_t v35 = AGCreateWeakAttribute();
    int v36 = v35;
    unint64_t v87 = HIDWORD(v35);
    unint64_t v37 = AGCreateWeakAttribute();
    int v38 = v37;
    unint64_t v86 = HIDWORD(v37);
    unint64_t v39 = AGCreateWeakAttribute();
    int v40 = v39;
    unint64_t v41 = HIDWORD(v39);
    uint64_t v42 = AGCreateWeakAttribute();
    float64x2_t v89 = &v81;
    v106[0] = v34;
    uint64_t v5 = v105;
    v106[1] = v91;
    v106[2] = v26;
    v106[3] = v90;
    v106[4] = v36;
    v106[5] = v87;
    v106[6] = v38;
    v106[7] = v86;
    v106[8] = v40;
    v106[9] = v41;
    uint64_t v107 = v42;
    int v108 = v97;
    MEMORY[0x270FA5388](v42);
    uint64_t v8 = (char *)(&v81 - 6);
    uint64_t v43 = v92;
    *(&v81 - 4) = (char *)v5;
    *(&v81 - 3) = v43;
    *(&v81 - 2) = v29;
    *(&v81 - 1) = (char *)v106;
    uint64_t v44 = AGGraphGetCurrentAttribute();
    if (v44 != v31)
    {
      unint64_t v26 = v44;
      if (one-time initialization token for lastestAccessLists == -1) {
        goto LABEL_6;
      }
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_20:
  swift_once();
LABEL_6:
  swift_beginAccess();
  float64x2_t v92 = (char *)static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v45 = v98;
  uint64_t v46 = v101;
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v101, 1, 1, v9);
  MEMORY[0x270FA5388](v47);
  *(&v81 - 4) = (char *)v5;
  *(&v81 - 3) = (char *)partial apply for closure #1 in GeometryReader.Child.updateValue();
  *(&v81 - 2) = v8;
  unint64_t v48 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v46, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v81 - 6), v93, v48, v5, MEMORY[0x263F8E4E0], (uint64_t)v109);
  uint64_t v49 = v94;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_0(v46, v94, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v49, 1, v9);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  uint64_t v97 = 0;
  if (v50 == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v49);
  }
  else
  {
    uint64_t v52 = v45;
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    id v54 = v82;
    v53(v82, v49, v9);
    uint64_t v55 = v81;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v81, v54, v9);
    swift_beginAccess();
    long long v56 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v56 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v56 + 2) + 1, 1, (unint64_t)v56);
      static ObservationRegistrar.lastestAccessLists = v56;
    }
    unint64_t v59 = *((void *)v56 + 2);
    unint64_t v58 = *((void *)v56 + 3);
    if (v59 >= v58 >> 1)
    {
      long long v56 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, (unint64_t)v56);
      static ObservationRegistrar.lastestAccessLists = v56;
    }
    *((void *)v56 + 2) = v59 + 1;
    uint64_t v60 = v98;
    v53(&v56[((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v98 + 72) * v59], (uint64_t)v55, v9);
    uint64_t v45 = v60;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v9);
    uint64_t v5 = v105;
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  uint64_t v61 = *(void (**)(unint64_t, char *, uint64_t))(v103 + 32);
  unint64_t v62 = v83;
  v61(v83, v100, v5);
  outlined destroy of ObservationTracking._AccessList?(v101);
  v61((unint64_t)v102, (char *)v62, v5);
  uint64_t v63 = (uint64_t)p_cache[338];
  uint64_t v64 = *(void *)(v63 + 16);
  if (v64)
  {
    uint64_t v67 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
    uint64_t v66 = v45 + 16;
    uint64_t v65 = v67;
    unint64_t v68 = v63 + ((*(unsigned __int8 *)(v66 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 64));
    uint64_t v69 = *(void *)(v66 + 56);
    uint64_t v101 = v63;
    swift_bridgeObjectRetain();
    uint64_t v70 = v99;
    do
    {
      v65(v11, v68, v9);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v11, v26, v70);
      (*(void (**)(char *, uint64_t))(v66 - 8))(v11, v9);
      v68 += v69;
      --v64;
    }
    while (v64);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v92;
  swift_bridgeObjectRelease();
  uint64_t v72 = v102;
  uint64_t v71 = v103;
  uint64_t v73 = (uint64_t)v95;
  uint64_t v74 = v105;
  uint64_t v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v103 + 16))(v95, v102, v105);
  uint64_t v76 = (uint64_t)v85;
  uint64_t v77 = _VariadicView.Tree.init(root:content:)(v75, v73, v84, v74, (uint64_t)v85);
  MEMORY[0x270FA5388](v77);
  *(&v81 - 2) = (char *)v104;
  *(&v81 - 1) = (char *)swift_getWitnessTable();
  uint64_t v78 = v99;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v76, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v81 - 4), v99, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v79);
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v76, v78);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v72, v74);
}

void type metadata accessor for _LayoutRoot<GeometryReaderLayout>()
{
  if (!lazy cache variable for type metadata for _LayoutRoot<GeometryReaderLayout>)
  {
    lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout();
    unint64_t v0 = type metadata accessor for _LayoutRoot();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<GeometryReaderLayout>);
    }
  }
}

uint64_t _VariadicView.Tree.init(root:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for _VariadicView.Tree() + 44);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t SizeAndSpacingContext.subscript.getter(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(v1 + 4);
  int v8 = *(_DWORD *)(v1 + 8);
  uint64_t v9 = a1;
  uint64_t v4 = *(void *)(*MEMORY[0x263F8EA20] + v2 + 8);
  uint64_t v5 = type metadata accessor for EnvironmentFetch();
  uint64_t v11 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  int v14 = 1;
  int v15 = v3;
  char v16 = 0;
  uint64_t v17 = &v8;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in Rule<>.cachedValue(options:owner:), (uint64_t)v10, v5, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v6);
  return swift_release();
}

uint64_t type metadata accessor for EnvironmentFetch()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static GeometryReader._makeView(view:inputs:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v7 = *((_DWORD *)a1 + 2);
  uint64_t v29 = a1[2];
  uint64_t v30 = *a1;
  int v8 = *((_DWORD *)a1 + 6);
  int v9 = *((_DWORD *)a1 + 7);
  int v10 = *((_DWORD *)a1 + 9);
  int v26 = *((_DWORD *)a1 + 8);
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  int v13 = *((_DWORD *)a1 + 14);
  int v23 = *((_DWORD *)a1 + 16);
  int v24 = *((_DWORD *)a1 + 15);
  int v21 = *((_DWORD *)a1 + 18);
  int v22 = *((_DWORD *)a1 + 17);
  int v19 = *((_DWORD *)a1 + 20);
  int v20 = *((_DWORD *)a1 + 19);
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>();
  uint64_t v25 = v14;
  type metadata accessor for _VariadicView.Tree();
  _GraphValue.init(_:)(a2, &v32);
  int v15 = v32;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  char v17 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v49 = v30;
  int v50 = v7;
  uint64_t v51 = v29;
  int v52 = v8;
  int v53 = v9;
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  int v58 = v13;
  int v59 = v24;
  int v60 = v23;
  int v61 = v22;
  int v62 = v21;
  int v63 = v20;
  int v64 = v19;
  int v54 = 0;
  int v55 = v10;
  int v31 = v15;
  uint64_t v33 = v30;
  int v34 = v7;
  uint64_t v35 = v29;
  int v36 = v8;
  int v37 = v9;
  int v38 = 0;
  int v39 = v10;
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  int v42 = v13;
  int v43 = v24;
  int v44 = v23;
  int v45 = v22;
  int v46 = v21;
  int v47 = v20;
  int v48 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView.Tree<>._makeView(view:inputs:)(&v31, (uint64_t)&v33, v25, a3, (uint64_t)&protocol witness table for _LayoutRoot<A>, a4, a5);
  int v54 = v26;
  if (v17)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v49);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t type metadata accessor for GeometryReader.Child()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EventID and conformance EventID()
{
  unint64_t result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EventID and conformance EventID;
  if (!lazy protocol witness table cache variable for type EventID and conformance EventID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventID and conformance EventID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryReaderLayout and conformance GeometryReaderLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout;
  if (!lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout;
  if (!lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReaderLayout and conformance GeometryReaderLayout);
  }
  return result;
}

Swift::Void __swiftcall ViewGraph.uninstantiateOutputs()()
{
  uint64_t v1 = v0;
  ViewGraph.removePreferenceOutlets(isInvalidating:)(0);
  uint64_t v2 = (uint64_t *)(v0 + 216);
  swift_beginAccess();
  int v3 = *(_DWORD *)(v1 + 228);
  if (!v3)
  {
LABEL_8:
    AGGraphMutateAttribute();
    *(void *)(v1 + 332) = 0;
    *(void *)(v1 + 324) = 0;
    *(void *)(v1 + 340) = 0;
    swift_beginAccess();
    *(_DWORD *)(v1 + 132) = 0;
    *(_DWORD *)(v1 + 136) = 0;
    return;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    int v5 = 0;
    int v6 = v3 - 1;
    do
    {
      int v9 = (uint64_t *)(v4 + v5);
      if (v6) {
        v5 += *((_DWORD *)v9 + 2);
      }
      else {
        int v5 = 0;
      }
      int v7 = v6 | v5;
      uint64_t v8 = *v9;
      v10[0] = v9;
      (*(void (**)(void *, uint64_t))(v8 + 128))(v10, v1);
      --v6;
    }
    while (v7);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t static ViewGraphFeatureBuffer._VTable.uninstantiate(elt:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 + 176) + 24))(a2, v4);
}

uint64_t getEnumTagSinglePayload for CountingIndex(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 >= a2)
  {
LABEL_23:
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0;
  }
  unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  unsigned int v7 = (a2 - v5 + 255) >> (8 * v6);
  if (v6 < 4) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v8 < 0x100) {
    unsigned int v9 = 1;
  }
  if (v8 >= 2) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  switch(v10)
  {
    case 1:
      int v11 = *(unsigned __int8 *)(result + v6);
      if (!*(unsigned char *)(result + v6)) {
        goto LABEL_23;
      }
      goto LABEL_18;
    case 2:
      int v11 = *(unsigned __int16 *)(result + v6);
      if (!*(_WORD *)(result + v6)) {
        goto LABEL_23;
      }
      goto LABEL_18;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v11 = *(_DWORD *)(result + v6);
      if (!v11) {
        goto LABEL_23;
      }
LABEL_18:
      int v12 = (v11 - 1) << (8 * v6);
      if (v6 >= 4) {
        int v12 = 0;
      }
      if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
        int v13 = *(unsigned __int8 *)result;
      }
      else {
        int v13 = *(_DWORD *)result;
      }
      unint64_t result = v5 + (v13 | v12) + 1;
      break;
    default:
      goto LABEL_23;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t *))
{
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  int v13 = *((_DWORD *)a2 + 16);
  uint64_t v14 = a2[9];
  char v15 = *((unsigned char *)a2 + 80);
  uint64_t v27 = *a2;
  int v28 = v10;
  uint64_t v29 = v11;
  long long v30 = *(_OWORD *)(a2 + 3);
  uint64_t v31 = v12;
  long long v32 = *((_OWORD *)a2 + 3);
  int v33 = v13;
  uint64_t v34 = v14;
  char v35 = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  a7(v9, &v27);
  uint64_t v18 = v27;
  int v19 = v28;
  uint64_t v20 = v29;
  long long v21 = v30;
  uint64_t v22 = v31;
  long long v23 = v32;
  int v24 = v33;
  uint64_t v25 = v34;
  char v26 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for UpdateEnvironment<LineLimitModifier>, (uint64_t)&type metadata for LineLimitModifier, (uint64_t)&protocol witness table for LineLimitModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
  lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(&lazy protocol witness table cache variable for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>, &lazy cache variable for type metadata for UpdateEnvironment<LineLimitModifier>, (uint64_t)&type metadata for LineLimitModifier, (uint64_t)&protocol witness table for LineLimitModifier);
  int v3 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v6;
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  }
  return result;
}

{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;

  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for UpdateEnvironment<SystemColorSchemeModifier>, (uint64_t)&type metadata for SystemColorSchemeModifier, (uint64_t)&protocol witness table for SystemColorSchemeModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
  lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(&lazy protocol witness table cache variable for type UpdateEnvironment<SystemColorSchemeModifier> and conformance UpdateEnvironment<A>, &lazy cache variable for type metadata for UpdateEnvironment<SystemColorSchemeModifier>, (uint64_t)&type metadata for SystemColorSchemeModifier, (uint64_t)&protocol witness table for SystemColorSchemeModifier);
  int v3 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v4 = MEMORY[0x263F8EE78];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_WORD *)(v6 + 80) = 256;
  *(void *)(v6 + 88) = v5;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v6;
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v8 | 0x20;
  }
  return result;
}

void type metadata accessor for TypedElement<VariantThatFitsFlag>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t static EnvironmentModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v5 = *(_DWORD *)(v4 + 16);
  v14[0] = v3;
  v14[1] = v5;
  uint64_t updated = type metadata accessor for UpdateEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v15, updated, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v13;
  *(void *)(v10 + 24) = v8;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(void *)(v10 + 88) = v9;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v10;
  int v12 = *(_DWORD *)(a2 + 32);
  if ((v12 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v12 | 0x20;
  }
  return result;
}

uint64_t type metadata accessor for UpdateEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type UpdateEnvironment<LineLimitModifier> and conformance UpdateEnvironment<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TypedElement<VariantThatFitsFlag>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UpdateEnvironment);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall AnimatableFrameAttribute.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  Value = (uint64_t *)AGGraphGetValue();
  char v4 = v3;
  uint64_t v5 = *Value;
  uint64_t v6 = Value[1];
  uint64_t v7 = (uint64_t *)AGGraphGetValue();
  char v9 = v4 | v8;
  uint64_t v10 = *v7;
  uint64_t v11 = v7[1];
  uint64_t v12 = v7[2];
  uint64_t v13 = v7[3];
  double v15 = *(double *)AGGraphGetValue();
  uint64_t v20 = v12;
  uint64_t v21 = v13;
  if (v9) {
    char v16 = 1;
  }
  else {
    char v16 = v14 & 1;
  }
  char v22 = v16;
  *(void *)&long long v17 = v5;
  *((void *)&v17 + 1) = v6;
  *(void *)&long long v18 = v10;
  *((void *)&v18 + 1) = v11;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v15);
  v19[0] = v17;
  v19[1] = v18;
  if (*(unsigned char *)(v1 + 84))
  {
    if (v16) {
      goto LABEL_9;
    }
LABEL_8:
    if (AGGraphGetOutputValue()) {
      return;
    }
    goto LABEL_9;
  }
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v19, 0, *(unsigned int *)(v1 + 12), v1 + 16);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_9:
  AGGraphSetOutputValue();
}

double protocol witness for static View._makeView(view:inputs:) in conformance LinearGradient@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void Font.OpenTypeFeatureSettingModifier.modify(descriptor:in:)(const __CTFontDescriptor **a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 25) & 1) == 0)
  {
    uint64_t v4 = *v2;
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, [String])>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, [String]), MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    uint64_t v6 = (void *)*MEMORY[0x263F03A98];
    *(void *)(inited + 32) = *MEMORY[0x263F03A98];
    *(void *)(inited + 40) = v4;
    id v7 = v6;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    int v8 = *a1;
    type metadata accessor for CFStringRef(0);
    type metadata accessor for Int?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v8, isa);

    *a1 = CopyWithAttributes;
  }
}

uint64_t Font.platformFont(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3, (uint64_t)&v14);
    swift_release_n();
    swift_release_n();
    char v4 = v14;
    char v5 = v15;
    long long v13 = v16;
    char v6 = v17;
    char v7 = v18;
    swift_retain_n();
    swift_retain_n();
    uint64_t v8 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v19 = *a1;
    uint64_t v20 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v19, (uint64_t)&v14);
    swift_release();
    char v4 = v14;
    char v5 = v15;
    long long v13 = v16;
    char v6 = v17;
    char v7 = v18;
    uint64_t v9 = swift_retain_n();
    uint64_t v8 = specialized closure #1 in PropertyList.subscript.getter(v9);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  uint64_t v19 = a2;
  uint64_t v20 = v8;
  char v21 = v4;
  char v22 = v5;
  long long v23 = v13;
  char v24 = v6;
  char v25 = v7;
  uint64_t v10 = one-time initialization token for fontCache;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized ObjectCache.subscript.getter((uint64_t)&v19);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v11;
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.SystemProvider(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 1);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 25);
  uint64_t v8 = v1[1];
  uint64_t v9 = *((unsigned __int8 *)v1 + 16);
  unsigned __int8 v10 = *((unsigned char *)v1 + 17);
  char v11 = *((unsigned char *)v1 + 18);
  uint64_t v12 = v1[3];
  char v13 = *((unsigned char *)v1 + 32);
  uint64_t v21 = *v1;
  uint64_t v22 = v8;
  LOBYTE(v23) = v9;
  BYTE1(v23) = v10;
  BYTE2(v23) = v11;
  uint64_t v24 = v12;
  char v25 = v13;
  v16[0] = v2;
  v16[1] = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  double v14 = Font.SystemProvider.effectiveSize(in:)(v16);
  v16[0] = v10;
  LOBYTE(v21) = v2;
  BYTE1(v21) = v3;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  LOBYTE(v24) = v6;
  BYTE1(v24) = v7;
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, double))(v5 + 24))(v16, v8, v9, &v21, v4, v5, v14);
}

void Text.Style.fontTraits(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  id v33 = *(id *)v2;
  uint64_t v38 = v4;
  *(void *)&long long v39 = v5;
  uint64_t v6 = Text.Style.TextStyleFont.resolve(in:includeDefaultAttributes:)((unint64_t *)&v38, 1);
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    unint64_t v32 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    unint64_t v32 = specialized closure #1 in PropertyList.subscript.getter(v7);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  unint64_t v8 = *(void *)(v2 + 8);
  unint64_t v9 = v8 >> 62;
  unint64_t v31 = v8;
  if (v8 >> 62) {
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  unint64_t v11 = v32 >> 62;
  if (v10)
  {
    while (1)
    {
LABEL_9:
      if (v5)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4, (uint64_t)&v38);
        swift_release_n();
        swift_release_n();
        uint64_t v29 = a2;
        unint64_t v30 = v9;
        if (!v6) {
          goto LABEL_20;
        }
      }
      else
      {
        id v33 = (id)v4;
        *(void *)&long long v34 = 0;
        swift_retain();
        static EnvironmentValues.FontContextKey.value(in:)((uint64_t *)&v33, (uint64_t)&v38);
        swift_release();
        uint64_t v29 = a2;
        unint64_t v30 = v9;
        if (!v6)
        {
LABEL_20:
          __break(1u);
LABEL_21:
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
      uint64_t v5 = v11;
      char v12 = v38;
      char v13 = BYTE1(v38);
      unint64_t v11 = *((void *)&v39 + 1);
      a2 = v39;
      unint64_t v9 = v40;
      char v14 = v41;
      uint64_t v6 = *(void *)(*(void *)v6 + 80);
      swift_retain();
      char v15 = (void *)((uint64_t (*)(uint64_t *))v6)(&v38);
      swift_release();
      id v33 = v15;
      if (v5)
      {
        uint64_t v6 = v32;
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v4 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v4) {
          goto LABEL_23;
        }
      }
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v5 = 0;
      do
      {
        if ((v32 & 0xC000000000000001) != 0)
        {
          uint64_t v16 = MEMORY[0x24C523D60](v5, v32);
        }
        else
        {
          uint64_t v16 = *(void *)(v32 + 8 * v5 + 32);
          swift_retain();
        }
        ++v5;
        LOBYTE(v38) = v12;
        BYTE1(v38) = v13;
        *(void *)&long long v39 = a2;
        *((void *)&v39 + 1) = v11;
        unsigned __int8 v40 = v9;
        char v41 = v14;
        (*(void (**)(id *, uint64_t *))(*(void *)v16 + 80))(&v33, &v38);
        swift_release();
      }
      while (v4 != v5);
LABEL_23:
      swift_bridgeObjectRelease();
      if (v30)
      {
        swift_bridgeObjectRetain();
        unint64_t v17 = v31;
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6) {
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v17 = v31;
        uint64_t v6 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v6) {
          goto LABEL_33;
        }
      }
      if (v6 >= 1)
      {
        uint64_t v18 = 0;
        unint64_t v19 = v17 & 0xC000000000000001;
        do
        {
          if (v19)
          {
            uint64_t v20 = MEMORY[0x24C523D60](v18, v17);
          }
          else
          {
            uint64_t v20 = *(void *)(v17 + 8 * v18 + 32);
            swift_retain();
          }
          ++v18;
          LOBYTE(v38) = v12;
          BYTE1(v38) = v13;
          *(void *)&long long v39 = a2;
          *((void *)&v39 + 1) = v11;
          unsigned __int8 v40 = v9;
          char v41 = v14;
          (*(void (**)(id *, uint64_t *))(*(void *)v20 + 80))(&v33, &v38);
          swift_release();
          unint64_t v17 = v31;
        }
        while (v6 != v18);
LABEL_33:
        swift_bridgeObjectRelease();
        CFStringRef v21 = (const __CFString *)*MEMORY[0x263F03B28];
        uint64_t v22 = (const __CTFontDescriptor *)v33;
        CFTypeRef v23 = CTFontDescriptorCopyAttribute(v22, v21);
        uint64_t v24 = 0;
        if (v23)
        {
          uint64_t v38 = (uint64_t)v23;
          uint64_t v25 = v29;
          if (swift_dynamicCast()) {
            uint64_t v24 = v37;
          }
        }
        else
        {
          uint64_t v25 = v29;
        }
        CTFontDescriptorGetWeight();
        uint64_t v27 = v26;
        swift_release();

        *(void *)uint64_t v25 = v24;
        *(void *)(v25 + 8) = v27;
        *(void *)(v25 + 16) = 0;
        *(unsigned char *)(v25 + 24) = 1;
        return;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v28) {
        goto LABEL_41;
      }
    }
  }
  if (v11) {
    goto LABEL_40;
  }
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v4, (uint64_t)&v38);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      id v33 = (id)v4;
      *(void *)&long long v34 = 0;
      swift_retain();
      swift_retain();
      static EnvironmentValues.FontContextKey.value(in:)((uint64_t *)&v33, (uint64_t)&v38);
      swift_release();
    }
    LOWORD(v33) = v38;
    long long v34 = v39;
    unsigned __int8 v35 = v40;
    char v36 = v41;
    (*(void (**)(id *))(*(void *)v6 + 88))(&v33);
    swift_release_n();
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t v7 = specialized find1<A>(_:key:filter:)(v4, v12);
  if (!v7
    || (uint64_t v8 = *(void *)(v7 + 72),
        swift_bridgeObjectRetain(),
        char v9 = specialized static Array<A>.== infix(_:_:)(a2, v8),
        uint64_t result = swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    uint64_t v11 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>();
    *(void *)(swift_allocObject() + 72) = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v11);
    return swift_release();
  }
  return result;
}

uint64_t Font.resolveTraits(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5, (uint64_t)&v19);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v15 = *a1;
    *(void *)&long long v16 = 0;
    swift_retain();
    static EnvironmentValues.FontContextKey.value(in:)(&v15, (uint64_t)&v19);
    swift_release();
  }
  LOWORD(v15) = v19;
  long long v16 = v20;
  char v17 = v21;
  char v18 = v22;
  (*(void (**)(long long *__return_ptr, uint64_t *))(*(void *)a2 + 88))(&v23, &v15);
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    unint64_t v7 = specialized PropertyList.Tracker.value<A>(_:for:)(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    unint64_t v7 = specialized closure #1 in PropertyList.subscript.getter(v8);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_release_n();
  if (!(v7 >> 62))
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_9;
    }
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = v24;
    char v14 = v25;
    *(_OWORD *)a3 = v23;
    *(void *)(a3 + 16) = v13;
    *(unsigned char *)(a3 + 24) = v14;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_16;
  }
LABEL_9:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = MEMORY[0x24C523D60](i, v7);
      }
      else
      {
        uint64_t v12 = *(void *)(v7 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(long long *))(*(void *)v12 + 88))(&v23);
      swift_release();
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t key path getter for EnvironmentValues.fontModifiers : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>);
    }
  }
}

uint64_t FontBox.resolveTraits(in:)(__int16 *a1)
{
  uint64_t v2 = *v1;
  char v3 = *((unsigned char *)a1 + 24);
  char v4 = *((unsigned char *)a1 + 25);
  __int16 v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 4);
  char v8 = v3;
  char v9 = v4;
  return (*(uint64_t (**)(__int16 *, void))(*(void *)(v2 + 128) + 24))(&v6, *(void *)(v2 + 120));
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<FontModifiersKey>>);
    }
  }
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.TextStyleProvider(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  char v7 = v1[1];
  uint64_t v8 = *((void *)v1 + 1);
  uint64_t v9 = v1[16];
  char v17 = *v1;
  char v16 = v7;
  __int16 v11 = v2;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  char v15 = v6;
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, __int16 *))(v4 + 16))(&v17, &v16, v8, v9, &v11);
}

uint64_t protocol witness for static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:) in conformance DefaultFontDefinition@<X0>(double a1@<X2>, char a2@<W3>, uint64_t a3@<X8>)
{
  return specialized static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:)(a1, a2 & 1, a3);
}

uint64_t specialized static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:)@<X0>(double a1@<X2>, char a2@<W3>, uint64_t a3@<X8>)
{
  return Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)(a1, a2 & 1, a3);
}

void protocol witness for FontProvider.resolveTraits(in:) in conformance Font.SystemProvider(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = *a1;
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  uint64_t v7 = *v2;
  int v8 = *((unsigned __int8 *)v2 + 16);
  __int16 v9 = *(_WORD *)((char *)v2 + 17);
  uint64_t v10 = v2[3];
  char v11 = *((unsigned char *)v2 + 32);
  double v18 = *((double *)v2 + 1);
  if (v8) {
    double v12 = 0.0;
  }
  else {
    double v12 = v18;
  }
  uint64_t v17 = v7;
  char v19 = v8;
  __int16 v20 = v9;
  uint64_t v21 = v10;
  char v22 = v11;
  *(_WORD *)uint64_t v13 = v4;
  long long v14 = *(_OWORD *)(a1 + 4);
  char v15 = v5;
  char v16 = v6;
  *(double *)a2 = Font.SystemProvider.effectiveSize(in:)(v13);
  *(double *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
}

double Font.SystemProvider.effectiveSize(in:)(unsigned __int8 *a1)
{
  double v2 = *(double *)v1;
  if (*(unsigned char *)(v1 + 18) == 14) {
    return *(double *)v1;
  }
  double v3 = *(double *)(v1 + 24);
  char v4 = *(unsigned char *)(v1 + 32);
  unsigned __int8 v5 = *a1;
  unsigned __int8 v9 = *(unsigned char *)(v1 + 18);
  unsigned __int8 v8 = v5;
  double v6 = round(v2 * specialized static Font.scaleFactor(textStyle:in:)(&v9, &v8));
  if ((v4 & 1) != 0 || v3 >= v6) {
    return v6;
  }
  return v3;
}

uint64_t AnyDynamicFontModifier.modify(descriptor:in:)(uint64_t a1, __int16 *a2)
{
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)a2 + 24);
  char v5 = *((unsigned char *)a2 + 25);
  __int16 v7 = *a2;
  long long v8 = *(_OWORD *)(a2 + 4);
  char v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(uint64_t, __int16 *, void))(*(void *)(v3 + 144) + 16))(a1, &v7, *(void *)(v3 + 136));
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.PlatformFontProvider(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 80))(*v1);
}

uint64_t protocol witness for static FontDefinition.resolveFontInfo(_:) in conformance DefaultFontDefinition@<X0>(const __CTFont *a1@<X0>, uint64_t a2@<X8>)
{
  CGFloat Size = CTFontGetSize(a1);
  uint64_t result = CTFontGetWeight();
  *(CGFloat *)a2 = Size;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t AnyDynamicFontModifier.modify(traits:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 24))(a1, *(void *)(*(void *)v1 + 136));
}

double protocol witness for FontModifier.modify(traits:) in conformance Font.WeightModifier(uint64_t a1)
{
  double result = *v1;
  *(double *)(a1 + 8) = *v1;
  return result;
}

unsigned char *protocol witness for static FontDefinition.resolveSystemFont(size:design:weight:in:) in conformance DefaultFontDefinition(unsigned char *result, uint64_t a2, char a3, uint64_t a4, double a5)
{
  unsigned __int8 v5 = *(unsigned char *)(a4 + 1);
  switch(*result)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_6;
    default:
      long long v8 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      long long v8 = (void *)*MEMORY[0x263F03B98];
      if (*MEMORY[0x263F03B98]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      long long v8 = (void *)*MEMORY[0x263F03B88];
      if (*MEMORY[0x263F03B88]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_8:
      long long v8 = (void *)*MEMORY[0x263F03B90];
      if (*MEMORY[0x263F03B90])
      {
LABEL_9:
        char v9 = a3 & 1;
        unsigned __int8 v12 = v5;
        id v10 = v8;
        uint64_t v11 = specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(v10, a2, v9, &v12, a5);

        return (unsigned char *)v11;
      }
      else
      {
        __break(1u);
      }
      return result;
  }
}

uint64_t specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(void *a1, uint64_t a2, char a3, unsigned __int8 *a4, double a5)
{
  int v9 = *a4;
  type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (void (*)(uint64_t))type metadata accessor for (CFStringRef, Any));
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v11 = (void *)*MEMORY[0x263F03B60];
  *(void *)(inited + 32) = *MEMORY[0x263F03B60];
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_2461BDD50;
  uint64_t v13 = MEMORY[0x263F8EF38];
  long long v14 = (void *)*MEMORY[0x263F03C00];
  *(void *)(result + 64) = MEMORY[0x263F8EF38];
  uint64_t v15 = *MEMORY[0x263F03BF8];
  if ((a3 & 1) == 0) {
    uint64_t v15 = a2;
  }
  *(void *)(result + 32) = v14;
  *(void *)(result + 40) = v15;
  char v16 = (void *)*MEMORY[0x263F03BA8];
  if (*MEMORY[0x263F03BA8])
  {
    uint64_t v17 = result;
    *(void *)(result + 72) = v16;
    type metadata accessor for CFStringRef(0);
    *(void *)(v17 + 104) = v18;
    *(void *)(v17 + 80) = a1;
    id v19 = v11;
    id v20 = v14;
    id v21 = a1;
    id v22 = v16;
    unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(v17);
    type metadata accessor for [CFStringRef : Any]();
    uint64_t v24 = (void **)MEMORY[0x263F03B28];
    *(void *)(inited + 40) = v23;
    char v25 = *v24;
    *(void *)(inited + 64) = v26;
    *(void *)(inited + 72) = v25;
    *(void *)(inited + 104) = v13;
    *(double *)(inited + 80) = a5;
    id v27 = v25;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    if (v9 != 2)
    {
      uint64_t v28 = (void *)*MEMORY[0x263F03AD0];
      uint64_t v35 = MEMORY[0x263F8D6C8];
      *(void *)&long long v34 = v9 & 1;
      outlined init with take of Any(&v34, v33);
      id v29 = v28;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v29, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
    }
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v32 = CTFontDescriptorCreateWithAttributesAndOptions();

    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void Font.DesignModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = (void *)*MEMORY[0x263F03B60];
  CFTypeRef v5 = CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x263F03B60]);
  if (v5
    && (*(void *)&long long v21 = v5,
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]), swift_dynamicCast()))
  {
    unint64_t v6 = *(void *)&v20[0];
  }
  else
  {
    unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  switch(v3)
  {
    case 1:
      goto LABEL_12;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_10;
    default:
      __int16 v7 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_13;
      }
      __break(1u);
LABEL_8:
      __int16 v7 = (void *)*MEMORY[0x263F03B90];
      if (!*MEMORY[0x263F03B90])
      {
        __break(1u);
LABEL_10:
        __int16 v7 = (void *)*MEMORY[0x263F03B88];
        if (!*MEMORY[0x263F03B88])
        {
          __break(1u);
LABEL_12:
          __int16 v7 = (void *)*MEMORY[0x263F03B98];
          if (!*MEMORY[0x263F03B98]) {
            goto LABEL_16;
          }
        }
      }
LABEL_13:
      if (*MEMORY[0x263F03BA8])
      {
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v9;
        type metadata accessor for CFStringRef(0);
        uint64_t v22 = v11;
        *(void *)&long long v21 = v7;
        outlined init with take of Any(&v21, v20);
        id v12 = v7;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v8, v10, isUniquelyReferenced_nonNull_native);
        unint64_t v14 = v6;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = *a1;
        type metadata accessor for _ContiguousArrayStorage<(CFStringRef, [String : Any])>();
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
        *(void *)(inited + 32) = v4;
        *(void *)(inited + 40) = v14;
        id v17 = v4;
        specialized Dictionary.init(dictionaryLiteral:)(inited);
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any]);
        lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
        CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v15, isa);

        *a1 = CopyWithAttributes;
      }
      else
      {
        __break(1u);
LABEL_16:
        __break(1u);
      }
      return;
  }
}

void Font.WidthModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = *a1;
  if (CTFontDescriptorIsSystemUIFont())
  {
    type metadata accessor for _ContiguousArrayStorage<(CFStringRef, [CFStringRef : CGFloat])>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    unint64_t v6 = (void *)*MEMORY[0x263F03B60];
    *(void *)(inited + 32) = *MEMORY[0x263F03B60];
    type metadata accessor for _ContiguousArrayStorage<(String, [String : CGFloat])>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CGFloat)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, CGFloat), MEMORY[0x263F8E0F8]);
    uint64_t v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_2461B9DC0;
    uint64_t v8 = (void *)*MEMORY[0x263F03C50];
    *(void *)(v7 + 32) = *MEMORY[0x263F03C50];
    *(void *)(v7 + 40) = v3;
    id v9 = v6;
    id v10 = v8;
    *(void *)(inited + 40) = specialized Dictionary.init(dictionaryLiteral:)(v7);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : CGFloat]);
    lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v4, isa);

    *a1 = CopyWithAttributes;
  }
  else
  {
    uint64_t v13 = (void *)*MEMORY[0x263F03A80];
    CFTypeRef v14 = CTFontDescriptorCopyAttribute(v4, (CFStringRef)*MEMORY[0x263F03A80]);
    if (v14)
    {
      CFTypeRef v15 = v14;
      CFDictionaryRef v16 = CTFontDescriptorCopyAttributes(v4);
      *(void *)&long long v34 = 0;
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, 255, type metadata accessor for CFStringRef);
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      unint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      id v17 = (id)*MEMORY[0x263F03AE8];
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v17, &v34);

      outlined destroy of Any?((uint64_t)&v34);
      uint64_t ObjectType = swift_getObjectType();
      *(void *)&long long v34 = v15;
      outlined init with take of Any(&v34, v33);
      id v18 = v13;
      swift_unknownObjectRetain();
      unint64_t v19 = v36;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v18, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = v19;

      swift_bridgeObjectRelease();
      long long v21 = (void *)*MEMORY[0x263F03B60];
      CFTypeRef v22 = CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x263F03B60]);
      if (v22
        && (*(void *)&long long v34 = v22,
            type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : Any]), swift_dynamicCast()))
      {
        unint64_t v23 = *(void *)&v33[0];
      }
      else
      {
        unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }

      uint64_t v24 = (void *)*MEMORY[0x263F03C50];
      uint64_t ObjectType = MEMORY[0x263F8EF38];
      *(void *)&long long v34 = v3;
      outlined init with take of Any(&v34, v33);
      id v25 = v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v25, v26);

      swift_bridgeObjectRelease();
      type metadata accessor for [CFStringRef : Any](0, (unint64_t *)&lazy cache variable for type metadata for [CFStringRef : Any]);
      uint64_t ObjectType = v27;
      *(void *)&long long v34 = v23;
      outlined init with take of Any(&v34, v33);
      id v28 = v21;
      unint64_t v29 = v36;
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v28, v30);
      unint64_t v36 = v29;

      swift_bridgeObjectRelease();
      CFDictionaryRef v31 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CTFontDescriptorRef v32 = CTFontDescriptorCreateWithAttributes(v31);

      swift_unknownObjectRelease();
      *a1 = v32;
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnyFontModifier and conformance AnyFontModifier(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, void (*a2)(void))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  a2(0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  CFTypeRef v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for _DictionaryStorage<AGSubgraphRef, [(_:)]>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    a5();
    unint64_t v8 = type metadata accessor for _DictionaryStorage();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    a5();
    unint64_t v8 = type metadata accessor for _DictionaryStorage();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _DictionaryStorage<CFStringRef, CGFloat>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, CGFloat>)
  {
    type metadata accessor for CFStringRef(255);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, CGFloat>);
    }
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  CFTypeRef v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      id v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  id v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  unint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FontModifiersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance LanguageAwareLineHeightRatioFontModifier(const __CTFontDescriptor **a1)
{
  uint64_t v3 = *v1;
  _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA24TypesettingConfigurationVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, Any), MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  CFTypeRef v5 = (void *)*MEMORY[0x263F03AC8];
  *(void *)(inited + 32) = *MEMORY[0x263F03AC8];
  *(void *)(inited + 64) = MEMORY[0x263F8D538];
  *(void *)(inited + 40) = v3;
  id v6 = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v7 = *a1;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v7, isa);

  *a1 = CopyWithAttributes;
}

void TypesettingLanguage.resolve(with:locale:)(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v35[1] = a2;
  uint64_t v6 = type metadata accessor for Locale.Language();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v35 - v11;
  type metadata accessor for _EnvironmentKeyTransformModifier<TypesettingConfiguration>(0, &lazy cache variable for type metadata for Locale.LanguageCode?, MEMORY[0x263F07548], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v35 - v14;
  uint64_t v16 = type metadata accessor for TypesettingLanguage.Storage(0);
  MEMORY[0x270FA5388](v16 - 8);
  id v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage.Storage(v3, (uint64_t)v18, type metadata accessor for TypesettingLanguage.Storage);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v20 = v19;
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 2, v19);
  if (!v21)
  {
    char v26 = v18[*(int *)(v20 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v18, v6);
    uint64_t v27 = Locale.Language.maximalIdentifier.getter();
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)a3 = v27;
    *(void *)(a3 + 8) = v29;
    *(unsigned char *)(a3 + 16) = v26;
    *(unsigned char *)(a3 + 17) = 0;
    return;
  }
  if (v21 == 1) {
    goto LABEL_10;
  }
  if (a1)
  {
    uint64_t v22 = a1();
    unint64_t v23 = (void *)MEMORY[0x24C522820](v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)CTFontCopyTallestTextStyleLanguageForString();

    if (v24)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      uint64_t v25 = v37;
      if (v37)
      {
        *(void *)a3 = v36;
        *(void *)(a3 + 8) = v25;
        *(_WORD *)(a3 + 16) = 256;
        return;
      }
    }
  }
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v30 = type metadata accessor for Locale.LanguageCode();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v15, 1, v30) == 1)
  {
    outlined destroy of (Locale.Language, TypesettingLanguage.Flags)((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for Locale.LanguageCode?, MEMORY[0x263F07548], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _EnvironmentKeyTransformModifier<TypesettingConfiguration>);
LABEL_10:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = 512;
    return;
  }
  uint64_t v32 = MEMORY[0x24C521810]();
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v30);
  *(void *)a3 = v32;
  *(void *)(a3 + 8) = v34;
  *(_WORD *)(a3 + 16) = 1;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<TypesettingConfiguration>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA24TypesettingConfigurationVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (CFStringRef, Any)()
{
  if (!lazy cache variable for type metadata for (CFStringRef, Any))
  {
    type metadata accessor for CFStringRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CFStringRef, Any));
    }
  }
}

void type metadata accessor for _DictionaryStorage<CFStringRef, [String]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, [String]>)
  {
    type metadata accessor for CFStringRef(255);
    type metadata accessor for MutableBox<CachedEnvironment>(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CFStringRef, [String]>);
    }
  }
}

uint64_t _ViewInputs.gestureAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t specialized _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(uint64_t result, unsigned int a2, uint64_t a3, char a4, char a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    uint64_t v8 = result;
    for (uint64_t i = (ValueMetadata **)(*(void *)v5 + 48); *(i - 2) != &type metadata for DisplayList.Key; i += 3)
    {
      if (!--v6) {
        return result;
      }
    }
    int v51 = *(_DWORD *)i;
    unsigned int v10 = *(_DWORD *)(a3 + 64);
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v58 = *(_OWORD *)a3;
    long long v59 = v11;
    long long v60 = *(_OWORD *)(a3 + 32);
    uint64_t v12 = v11;
    uint64_t v13 = (unsigned int *)(v11 + 16);
    swift_beginAccess();
    __int16 v50 = WORD2(v60);
    if ((BYTE4(v60) & 0x20) == 0)
    {
      swift_retain();
      unsigned int v48 = v10;
      uint64_t v14 = v8;
LABEL_20:
      swift_endAccess();
      unsigned int v31 = *(_DWORD *)(a3 + 68);
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      unsigned int v33 = DWORD2(v59);
      unsigned int v34 = HIDWORD(v59);
      unsigned int v35 = DWORD2(v58);
      unsigned int v36 = *v13;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _GraphInputs((uint64_t)&v58);
      unsigned int v38 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v58);
      swift_release();
      _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v56);
      *(void *)&__src[0] = v14;
      *((void *)&__src[0] + 1) = __PAIR64__(v10, a2);
      *(void *)&__src[1] = __PAIR64__(v31, v48);
      *((void *)&__src[1] + 1) = __PAIR64__(v33, OffsetAttribute2);
      *(void *)&__src[2] = __PAIR64__(v34, v35);
      *((void *)&__src[2] + 1) = __PAIR64__(v38, v36);
      LODWORD(__src[3]) = v51;
      BYTE4(__src[3]) = a4 & 1;
      BYTE5(__src[3]) = a5 & 1;
      BYTE6(__src[3]) = (v50 & 0x400) != 0;
      outlined init with take of PlatformImageRepresentableContext?((uint64_t)v56, (uint64_t)&__src[3] + 8, &lazy cache variable for type metadata for Image.Resolved?, (uint64_t)&type metadata for Image.Resolved);
      *((void *)&__src[16] + 1) = 0;
      memset(&__src[15], 0, 20);
      memcpy(__dst, __src, sizeof(__dst));
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for InterpolatedDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
      lazy protocol witness table accessor for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>();
      unsigned int v39 = Attribute.init<A>(body:value:flags:update:)();
      outlined release of InterpolatedDisplayList<Image.Resolved>((uint64_t)__src);
      AGGraphSetFlags();
      LOBYTE(__dst[0]) = 0;
      return PreferencesOutputs.subscript.setter(v39, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    }
    int v46 = *(_DWORD *)(a3 + 8);
    uint64_t v44 = *(void *)(a3 + 16);
    unsigned int v15 = v10;
    unsigned int v16 = *(_DWORD *)(a3 + 24);
    uint64_t v17 = *(void *)(a3 + 32);
    uint64_t v42 = *(void *)a3;
    uint64_t v43 = *(void *)(a3 + 40);
    uint64_t v47 = *(void *)(a3 + 48);
    uint64_t v18 = *(void *)(a3 + 56);
    uint64_t v45 = *(void *)(a3 + 72);
    int v40 = *(_DWORD *)(a3 + 80);
    unsigned int v41 = *(_DWORD *)(a3 + 68);
    long long v19 = *(_OWORD *)(a3 + 48);
    __src[2] = *(_OWORD *)(a3 + 32);
    __src[3] = v19;
    __src[4] = *(_OWORD *)(a3 + 64);
    LODWORD(__src[5]) = *(_DWORD *)(a3 + 80);
    long long v20 = *(_OWORD *)(a3 + 16);
    __src[0] = *(_OWORD *)a3;
    __src[1] = v20;
    swift_retain();
    outlined retain of _ViewInputs(a3);
    unsigned int v21 = _ViewInputs.geometryTransaction()();
    uint64_t v22 = swift_getKeyPath();
    int v49 = specialized CachedEnvironment.attribute<A>(keyPath:)(v22);
    swift_release();
    unsigned int v23 = v16;
    unsigned int v24 = v15;
    if ((*(unsigned char *)(v12 + 81) & 1) == 0
      && v15 == *(_DWORD *)(v12 + 32)
      && v45 == *(_DWORD *)(v12 + 36)
      && v49 == *(_DWORD *)(v12 + 40)
      && v46 == *(_DWORD *)(v12 + 44)
      && v21 == *(_DWORD *)(v12 + 48)
      && v23 == *(_DWORD *)(v12 + 52))
    {
      if ((*(unsigned char *)(v12 + 64) & 1) == 0)
      {
        LODWORD(v30) = *(_DWORD *)(v12 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      *(void *)&__src[0] = v42;
      DWORD2(__src[0]) = v46;
      *(void *)&__src[1] = v44;
      *((void *)&__src[1] + 1) = __PAIR64__(v21, v23);
      *(void *)&__src[2] = v17;
      *((void *)&__src[2] + 1) = v43;
      *(void *)&__src[3] = v47;
      *((void *)&__src[3] + 1) = v18;
      *(void *)&__src[4] = __PAIR64__(v41, v15);
      *((void *)&__src[4] + 1) = v45;
      LODWORD(__src[5]) = v40;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(__src, v49, (uint64_t)__dst);
      long long v25 = __dst[1];
      uint64_t v26 = LOBYTE(__dst[2]);
      unsigned __int8 v27 = __dst[3];
      unint64_t v28 = LOBYTE(__dst[2]) | ((unint64_t)DWORD1(__dst[2]) << 32);
      unint64_t v29 = BYTE8(__dst[2]) | ((unint64_t)HIDWORD(__dst[2]) << 32);
      *(_OWORD *)(v12 + 32) = __dst[0];
      *(_OWORD *)(v12 + 48) = v25;
      *(void *)(v12 + 64) = v28;
      *(void *)(v12 + 72) = v29;
      *(_WORD *)(v12 + 80) = v27;
      if (v26 != 1)
      {
        uint64_t v30 = HIDWORD(*((void *)&v25 + 1));
LABEL_19:
        uint64_t v13 = (unsigned int *)(v12 + 16);
        unsigned int v48 = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v14 = v8;
        unsigned int v10 = v24;
        goto LABEL_20;
      }
    }
    LODWORD(v30) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v30;
    *(unsigned char *)(v12 + 64) = 0;
    goto LABEL_19;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  ValueMetadata **i;
  unsigned int v10;
  long long v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int OffsetAttribute2;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t KeyPath;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  __int16 v51;
  int v52;
  long long v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  unsigned int v60;
  unsigned __int8 v61;
  unsigned int v62;
  unsigned __int8 v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  int v69;
  uint64_t v70;
  long long v71;
  long long v72;
  long long v73;
  uint64_t v74;

  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    uint64_t v8 = result;
    for (uint64_t i = (ValueMetadata **)(*(void *)v5 + 48); *(i - 2) != &type metadata for DisplayList.Key; i += 3)
    {
      if (!--v6) {
        return result;
      }
    }
    int v52 = *(_DWORD *)i;
    unsigned int v10 = *(_DWORD *)(a3 + 64);
    long long v11 = *(_OWORD *)(a3 + 16);
    uint64_t v71 = *(_OWORD *)a3;
    uint64_t v72 = v11;
    uint64_t v73 = *(_OWORD *)(a3 + 32);
    uint64_t v12 = v11;
    uint64_t v13 = (unsigned int *)(v11 + 16);
    swift_beginAccess();
    int v51 = WORD2(v73);
    if ((BYTE4(v73) & 0x20) == 0)
    {
      swift_retain();
      int v49 = v10;
      uint64_t v14 = v8;
LABEL_20:
      swift_endAccess();
      uint64_t v32 = *(_DWORD *)(a3 + 68);
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      unsigned int v35 = DWORD2(v72);
      unsigned int v34 = HIDWORD(v72);
      unsigned int v36 = DWORD2(v71);
      uint64_t v37 = *v13;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _GraphInputs((uint64_t)&v71);
      unsigned int v39 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v71);
      swift_release();
      *(void *)&int v64 = v14;
      *((void *)&v64 + 1) = __PAIR64__(v10, a2);
      *(void *)&uint64_t v65 = __PAIR64__(v32, v49);
      *((void *)&v65 + 1) = __PAIR64__(v35, OffsetAttribute2);
      *(void *)&uint64_t v66 = __PAIR64__(v34, v36);
      *((void *)&v66 + 1) = __PAIR64__(v39, v37);
      LODWORD(v67) = v52;
      BYTE4(v67) = a4 & 1;
      BYTE5(v67) = a5 & 1;
      BYTE6(v67) = (v51 & 0x400) != 0;
      uint64_t v70 = 0;
      unint64_t v68 = 0uLL;
      *((void *)&v67 + 1) = 0;
      uint64_t v69 = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for InterpolatedDisplayList<ResolvedStyledText>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, (uint64_t)&protocol witness table for ResolvedStyledText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
      lazy protocol witness table accessor for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>();
      int v40 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      AGGraphSetFlags();
      LOBYTE(v64) = 0;
      return PreferencesOutputs.subscript.setter(v40, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    }
    uint64_t v47 = *(_DWORD *)(a3 + 8);
    uint64_t v45 = *(void *)(a3 + 16);
    unsigned int v15 = v10;
    unsigned int v16 = *(_DWORD *)(a3 + 24);
    uint64_t v17 = *(void *)(a3 + 32);
    uint64_t v43 = *(void *)a3;
    uint64_t v44 = *(void *)(a3 + 40);
    unsigned int v48 = *(void *)(a3 + 48);
    uint64_t v18 = *(void *)(a3 + 56);
    int v46 = *(void *)(a3 + 72);
    unsigned int v41 = *(_DWORD *)(a3 + 80);
    uint64_t v42 = *(_DWORD *)(a3 + 68);
    long long v19 = *(_OWORD *)(a3 + 48);
    uint64_t v66 = *(_OWORD *)(a3 + 32);
    uint64_t v67 = v19;
    unint64_t v68 = *(_OWORD *)(a3 + 64);
    uint64_t v69 = *(_DWORD *)(a3 + 80);
    long long v20 = *(_OWORD *)(a3 + 16);
    int v64 = *(_OWORD *)a3;
    uint64_t v65 = v20;
    swift_retain();
    outlined retain of _ViewInputs(a3);
    unsigned int v21 = _ViewInputs.geometryTransaction()();
    uint64_t v22 = swift_getKeyPath();
    __int16 v50 = specialized CachedEnvironment.attribute<A>(keyPath:)(v22);
    swift_release();
    unsigned int v23 = v16;
    unsigned int v24 = v15;
    if ((*(unsigned char *)(v12 + 81) & 1) == 0
      && v15 == *(_DWORD *)(v12 + 32)
      && v46 == *(_DWORD *)(v12 + 36)
      && v50 == *(_DWORD *)(v12 + 40)
      && v47 == *(_DWORD *)(v12 + 44)
      && v21 == *(_DWORD *)(v12 + 48)
      && v23 == *(_DWORD *)(v12 + 52))
    {
      if ((*(unsigned char *)(v12 + 64) & 1) == 0)
      {
        LODWORD(v31) = *(_DWORD *)(v12 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      *(void *)&int v64 = v43;
      DWORD2(v64) = v47;
      *(void *)&uint64_t v65 = v45;
      *((void *)&v65 + 1) = __PAIR64__(v21, v23);
      *(void *)&uint64_t v66 = v17;
      *((void *)&v66 + 1) = v44;
      *(void *)&uint64_t v67 = v48;
      *((void *)&v67 + 1) = v18;
      *(void *)&unint64_t v68 = __PAIR64__(v42, v15);
      *((void *)&v68 + 1) = v46;
      uint64_t v69 = v41;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v64, v50, (uint64_t)&v56);
      uint64_t v26 = v57;
      long long v25 = v58;
      unsigned __int8 v27 = v59;
      unint64_t v28 = v63;
      unint64_t v29 = v59 | ((unint64_t)v60 << 32);
      uint64_t v30 = v61 | ((unint64_t)v62 << 32);
      *(_OWORD *)(v12 + 32) = v56;
      *(void *)(v12 + 48) = v26;
      *(void *)(v12 + 56) = v25;
      *(void *)(v12 + 64) = v29;
      *(void *)(v12 + 72) = v30;
      *(_WORD *)(v12 + 80) = v28;
      if ((v27 & 1) == 0)
      {
        unsigned int v31 = HIDWORD(v25);
LABEL_19:
        uint64_t v13 = (unsigned int *)(v12 + 16);
        int v49 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v14 = v8;
        unsigned int v10 = v24;
        goto LABEL_20;
      }
    }
    LODWORD(v31) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v31;
    *(unsigned char *)(v12 + 64) = 0;
    goto LABEL_19;
  }
  return result;
}

double _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  return result;
}

uint64_t outlined release of InterpolatedDisplayList<Image.Resolved>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = *(void **)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 136);
  long long v16 = *(_OWORD *)(a1 + 120);
  long long v14 = *(_OWORD *)(a1 + 152);
  long long v12 = *(_OWORD *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 168);
  long long v11 = *(_OWORD *)(a1 + 200);
  uint64_t v8 = *(void *)(a1 + 216);
  uint64_t v9 = *(void **)(a1 + 224);
  swift_release();
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

unint64_t lazy protocol witness table accessor for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>;
  if (!lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for InterpolatedDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatedDisplayList<Image.Resolved> and conformance InterpolatedDisplayList<A>);
  }
  return result;
}

uint64_t _ViewInputs.privacyReductionAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for EnvironmentFetch<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
}

ValueMetadata *type metadata accessor for EveryMinuteTimelineSchedule()
{
  return &type metadata for EveryMinuteTimelineSchedule;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v4_4()
{
  return &type metadata for _SemanticFeature_v4_4;
}

ValueMetadata *type metadata accessor for _ColorMatrixEffect()
{
  return &type metadata for _ColorMatrixEffect;
}

ValueMetadata *type metadata accessor for DisabledFeature()
{
  return &type metadata for DisabledFeature;
}

void one-time initialization function for infinity()
{
  static Time.infinity = 0x7FF0000000000000;
}

{
  static _ProposedSize.infinity = 0x7FF0000000000000;
  byte_268EF9448 = 0;
  qword_268EF9450 = 0x7FF0000000000000;
  byte_268EF9458 = 0;
}

{
  static ProposedViewSize.infinity = 0x7FF0000000000000;
  byte_268EF0728 = 0;
  qword_268EF0730 = 0x7FF0000000000000;
  byte_268EF0738 = 0;
}

ValueMetadata *type metadata accessor for CatalogAssetMatchType()
{
  return &type metadata for CatalogAssetMatchType;
}

uint64_t static Log.splitViewVisibility.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for splitViewVisibility, (uint64_t)static Log.splitViewVisibility, a1);
}

uint64_t storeEnumTagSinglePayload for ScrollGeometryState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 124) = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for InterpolatedDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

double ViewSize.subscript.getter(char a1)
{
  uint64_t v2 = v1 + 8;
  if ((a1 & 1) == 0) {
    uint64_t v2 = v1;
  }
  return *(double *)v2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForEachState<A, B, C>.Evictor()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ForEachList<A, B, C>.Init()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  v21[2] = a6;
  v21[3] = a7;
  v21[4] = a8;
  v21[5] = a10;
  uint64_t v16 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:), (uint64_t)v21, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnyAccessibilityValue, v17, (uint64_t)v25);
  *(void *)&long long v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v25, (uint64_t)&v22);
  if (a5)
  {
    type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
    *(void *)(v18 + 32) = a2;
    *(void *)(v18 + 40) = a3;
    *(unsigned char *)(v18 + 48) = a4 & 1;
    *(void *)(v18 + 56) = a5;
  }
  else
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
  _sypSgWOhTm_12((uint64_t)v25, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *((void *)&v24 + 1) = v18;
  long long v19 = v23;
  *a9 = v22;
  a9[1] = v19;
  a9[2] = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
}

uint64_t AccessibilityValueStorage.init(description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = 0;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v12, a5);
  if (a4)
  {
    type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
    *(void *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = a2;
    *(unsigned char *)(v10 + 48) = a3 & 1;
    *(void *)(v10 + 56) = a4;
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t result = _sypSgWOhTm_12((uint64_t)v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *(void *)(a5 + 40) = v10;
  return result;
}

uint64_t outlined assign with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyAccessibilityValue?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata completion function for EnumVTable()
{
  return swift_initClassMetadata2();
}

void SymbolVariants.fill.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1 | 1;
  a1[1] = v2;
}

unint64_t lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout;
  if (!lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout;
  if (!lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FrameLayout and conformance _FrameLayout);
  }
  return result;
}

uint64_t static AnyInterfaceIdiom.== infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

BOOL protocol witness for static AnyInterfaceIdiomBox.isEqual(to:) in conformance InterfaceIdiomBox<A>()
{
  return static InterfaceIdiomBox.isEqual(to:)();
}

BOOL static InterfaceIdiomBox.isEqual(to:)()
{
  return swift_dynamicCastMetatype() != 0;
}

uint64_t AnyInterfaceIdiom.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(void))(*(void *)(a1 - 8) + 8))();
  uint64_t result = type metadata accessor for InterfaceIdiomBox();
  *a2 = result;
  a2[1] = (uint64_t)&protocol witness table for InterfaceIdiomBox<A>;
  return result;
}

uint64_t type metadata accessor for InterfaceIdiomBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for StaticLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for LocationBox<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for callout()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1031;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.callout = result;
  return result;
}

uint64_t one-time initialization function for largeTitle()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1024;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.largeTitle = result;
  return result;
}

uint64_t one-time initialization function for headline()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1028;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.headline = result;
  return result;
}

uint64_t one-time initialization function for caption2()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1034;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.caption2 = result;
  return result;
}

uint64_t one-time initialization function for title()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1025;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.title = result;
  return result;
}

uint64_t Font.width(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  type metadata accessor for FontBox<Font.ModifierProvider<Font.WidthModifier>>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.WidthModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WidthModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, (unint64_t *)&lazy cache variable for type metadata for Font.ModifierProvider<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.WidthModifier> and conformance Font.ModifierProvider<A>, (unint64_t *)&lazy cache variable for type metadata for Font.ModifierProvider<Font.WidthModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier, (uint64_t)&type metadata for Font.WidthModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WidthModifier>>);
    }
  }
}

uint64_t Font.smallCaps()(uint64_t a1)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2461F2770;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = xmmword_2461F2780;
  swift_retain();
  return v3;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier, (uint64_t)&type metadata for Font.FeatureSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.FeatureSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.FeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier, (uint64_t)&type metadata for Font.FeatureSettingModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.FeatureSettingModifier>>);
    }
  }
}

uint64_t Font.feature(_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  return v5;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier, (uint64_t)&type metadata for Font.OpenTypeFeatureSettingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier, (uint64_t)&type metadata for Font.OpenTypeFeatureSettingModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>);
    }
  }
}

uint64_t one-time initialization function for caption()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1033;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.caption = result;
  return result;
}

uint64_t one-time initialization function for title2()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1026;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.title2 = result;
  return result;
}

uint64_t Font.italic()(uint64_t a1, void (*a2)(void))
{
  a2(0);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  swift_retain();
  return v3;
}

void type metadata accessor for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.BoldModifier>);
    lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(&lazy protocol witness table cache variable for type Font.StaticModifierProvider<Font.BoldModifier> and conformance Font.StaticModifierProvider<A>, &lazy cache variable for type metadata for Font.StaticModifierProvider<Font.BoldModifier>);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Font.StaticModifierProvider<Font.ItalicModifier> and conformance Font.StaticModifierProvider<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Font.StaticModifierProvider<Font.ItalicModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Font.StaticModifierProvider();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for Font.StaticModifierProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for title3()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1027;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.title3 = result;
  return result;
}

uint64_t one-time initialization function for footnote()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1032;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.footnote = result;
  return result;
}

uint64_t one-time initialization function for subheadline()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1029;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.subheadline = result;
  return result;
}

uint64_t static Font.system(_:design:weight:)(char *a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v4 = *a1;
  if (v4 >= 0xB)
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (void *)**((void **)&unk_2651D62F0 + v4);
    type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.PrivateTextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v7;
    *(void *)(v9 + 32) = a3;
    *(unsigned char *)(v9 + 40) = a4 & 1;
    id v10 = v8;
    id v11 = v7;
    return v9;
  }
  return result;
}

uint64_t Font.leading(_:)(char *a1, uint64_t a2, void (*a3)(void))
{
  char v4 = *a1;
  a3(0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 24) = v4;
  swift_retain();
  return v5;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.LeadingModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.LeadingModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.LeadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier, (uint64_t)&type metadata for Font.LeadingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.LeadingModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.LeadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier, (uint64_t)&type metadata for Font.LeadingModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.LeadingModifier>>);
    }
  }
}

uint64_t Font.weight(_:)(uint64_t a1, double a2)
{
  type metadata accessor for FontBox<Font.ModifierProvider<Font.WeightModifier>>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  swift_retain();
  return v4;
}

void type metadata accessor for FontBox<Font.ModifierProvider<Font.WeightModifier>>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WeightModifier>>)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(&lazy protocol witness table cache variable for type Font.ModifierProvider<Font.WeightModifier> and conformance Font.ModifierProvider<A>, &lazy cache variable for type metadata for Font.ModifierProvider<Font.WeightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier, (uint64_t)&type metadata for Font.WeightModifier);
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.ModifierProvider<Font.WeightModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Font.ModifierProvider<Font.GradeModifier> and conformance Font.ModifierProvider<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Font.ModifierProvider);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AnyDynamicFontModifier<Font.WeightModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI22AnyDynamicFontModifierCyAA0E0V06WeightF0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier;
  if (!lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WeightModifier and conformance Font.WeightModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.LeadingModifier and conformance Font.LeadingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier;
  if (!lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.LeadingModifier and conformance Font.LeadingModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.OpenTypeFeatureSettingModifier and conformance Font.OpenTypeFeatureSettingModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier;
  if (!lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.FeatureSettingModifier and conformance Font.FeatureSettingModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier;
  if (!lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  return result;
}

uint64_t ImageRendererHost.updateSizeThatFitsObserver()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 248);
  uint64_t v3 = *(void *)v2;
  char v4 = v2[8];
  uint64_t v5 = *((void *)v2 + 2);
  char v6 = v2[24];
  uint64_t v7 = v0[7];
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = *(void *)(v1 + 80);
  *(void *)(v9 + 24) = *(void *)(v1 + 88);
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 40) = v3;
  *(unsigned char *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v5;
  *(unsigned char *)(v9 + 64) = v6;
  swift_beginAccess();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 352) = MEMORY[0x263F8EE80];
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  long long v15 = partial apply for closure #1 in ImageRendererHost.updateSizeThatFitsObserver();
  uint64_t v16 = v9;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v7 + 352);
  *(void *)(v7 + 352) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v3, v4, v5, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(v7 + 352) = v12;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a7[6] + 32 * result;
  *(void *)uint64_t v7 = a2;
  *(unsigned char *)(v7 + 8) = a3 & 1;
  *(void *)(v7 + 16) = a4;
  *(unsigned char *)(v7 + 24) = a5 & 1;
  uint64_t v8 = a7[7] + 56 * result;
  long long v9 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a6;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a6 + 32);
  *(void *)(v8 + 48) = *(void *)(a6 + 48);
  uint64_t v10 = a7[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a7[2] = v12;
  }
  return result;
}

uint64_t specialized ViewGraphGeometryObservers.notify()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v42 = *v0 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*v0 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*v0 + 64);
  int64_t v43 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v44 = v2;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      int64_t v45 = v6;
      unint64_t v8 = v7 | (v6 << 6);
    }
    else
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_49;
      }
      if (v9 >= v43) {
        goto LABEL_45;
      }
      unint64_t v10 = *(void *)(v42 + 8 * v9);
      int64_t v11 = v6 + 1;
      if (!v10)
      {
        int64_t v11 = v6 + 2;
        if (v6 + 2 >= v43) {
          goto LABEL_45;
        }
        unint64_t v10 = *(void *)(v42 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v6 + 3;
          if (v6 + 3 >= v43) {
            goto LABEL_45;
          }
          unint64_t v10 = *(void *)(v42 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v6 + 4;
            if (v6 + 4 >= v43) {
              goto LABEL_45;
            }
            unint64_t v10 = *(void *)(v42 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v6 + 5;
              if (v6 + 5 >= v43) {
                goto LABEL_45;
              }
              unint64_t v10 = *(void *)(v42 + 8 * v11);
              if (!v10)
              {
                uint64_t v12 = v6 + 6;
                if (v6 + 6 >= v43) {
                  goto LABEL_45;
                }
                unint64_t v10 = *(void *)(v42 + 8 * v12);
                if (!v10)
                {
                  while (1)
                  {
                    int64_t v11 = v12 + 1;
                    if (__OFADD__(v12, 1)) {
                      break;
                    }
                    if (v11 >= v43) {
                      goto LABEL_45;
                    }
                    unint64_t v10 = *(void *)(v42 + 8 * v11);
                    ++v12;
                    if (v10) {
                      goto LABEL_25;
                    }
                  }
LABEL_50:
                  __break(1u);
LABEL_51:
                  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                int64_t v11 = v6 + 6;
              }
            }
          }
        }
      }
LABEL_25:
      unint64_t v5 = (v10 - 1) & v10;
      int64_t v45 = v11;
      unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    }
    uint64_t v13 = *(void *)(v44 + 48) + 32 * v8;
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 16);
    char v17 = *(unsigned char *)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = *v1;
    uint64_t v19 = v48;
    long long v20 = v1;
    *uint64_t v1 = 0x8000000000000000;
    LOBYTE(v47[0]) = v15;
    LOBYTE(v46[0]) = v17;
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15, v16, v17);
    uint64_t v23 = *(void *)(v19 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    char v26 = v21;
    if (*(void *)(v19 + 24) < v25) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v21 & 1) == 0) {
        goto LABEL_44;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v26 & 1) == 0) {
        goto LABEL_44;
      }
    }
LABEL_33:
    uint64_t v29 = v48;
    uint64_t v30 = *(void *)(v48 + 56) + 56 * v22;
    double v31 = *(double *)v30;
    double v32 = *(double *)(v30 + 8);
    double v34 = *(double *)(v30 + 16);
    double v33 = *(double *)(v30 + 24);
    int v35 = *(unsigned __int8 *)(v30 + 32);
    long long v36 = *(_OWORD *)(v30 + 40);
    if (v35 == 1)
    {
      v47[0] = *(void *)v30;
      *(double *)&v47[1] = v32;
      *(double *)int v46 = v34;
      *(double *)&v46[1] = v33;
      uint64_t v37 = 0;
      if (v34 != v31 || v33 != v32)
      {
        long long v41 = v36;
        ((void (*)(void *, void *))v36)(v47, v46);
        long long v36 = v41;
      }
      LOBYTE(v35) = 0;
      double v31 = v34;
      double v32 = v33;
      double v33 = 0.0;
      if (!(void)v36)
      {
LABEL_4:
        specialized _NativeDictionary._delete(at:)(v22, v29);
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v37 = *(void *)(v30 + 16);
      if (!(void)v36) {
        goto LABEL_4;
      }
    }
    uint64_t v39 = *(void *)(v29 + 56) + 56 * v22;
    *(double *)uint64_t v39 = v31;
    *(double *)(v39 + 8) = v32;
    *(void *)(v39 + 16) = v37;
    *(double *)(v39 + 24) = v33;
    *(unsigned char *)(v39 + 32) = v35;
    *(_OWORD *)(v39 + 40) = v36;
LABEL_5:
    uint64_t v1 = v20;
    *long long v20 = v29;
    int64_t v6 = v45;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
  LOBYTE(v47[0]) = v15;
  LOBYTE(v46[0]) = v17;
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15, v16, v17);
  if ((v26 & 1) != (v28 & 1)) {
    goto LABEL_51;
  }
  unint64_t v22 = v27;
  if (v26) {
    goto LABEL_33;
  }
LABEL_44:
  __break(1u);
LABEL_45:

  return swift_release();
}

void type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>)
  {
    type metadata accessor for FontBox<Font.SystemProvider>(255, &lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, (uint64_t)&type metadata for SizeThatFitsMeasurer, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewGraphGeometryObservers.Observer);
    lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>);
    }
  }
}

uint64_t static Font.system(size:weight:design:)(uint64_t a1, char a2, char *a3, double a4)
{
  char v7 = *a3;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V14SystemProvider33_5603E46EFD6E0B67542F06407CC6DAD5LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider);
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a4;
  *(void *)(result + 24) = a1;
  *(unsigned char *)(result + 32) = a2 & 1;
  *(unsigned char *)(result + 33) = v7;
  *(unsigned char *)(result + 34) = 14;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  return result;
}

void type metadata accessor for FontBox<Font.SystemProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V14SystemProvider33_5603E46EFD6E0B67542F06407CC6DAD5LLVGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for FontBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  char v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1, a4, a5 & 1);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 56 * v16;
      unint64_t result = swift_release();
      long long v25 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)a1;
      *(_OWORD *)(v23 + 16) = v25;
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(a1 + 32);
      *(void *)(v23 + 48) = *(void *)(a1 + 48);
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1, a4, a5 & 1);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  unint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3 & 1, a4, a5 & 1, a1, v22);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t result = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v9 = ~v7;
    do
    {
      uint64_t v10 = *(void *)(v5 + 48) + 32 * result;
      if (*(unsigned char *)(v10 + 8))
      {
        if ((a2 & 1) == 0) {
          goto LABEL_4;
        }
      }
      else if ((a2 & 1) != 0 || *(double *)v10 != *(double *)&a1)
      {
        goto LABEL_4;
      }
      if (*(unsigned char *)(v10 + 24))
      {
        if (a4) {
          return result;
        }
      }
      else if ((a4 & 1) == 0 && *(double *)(v10 + 16) == *(double *)&a3)
      {
        return result;
      }
LABEL_4:
      unint64_t result = (result + 1) & v9;
    }
    while (((*(void *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ProposedSize()
{
  return Hasher._finalize()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v6 = a2 & 1;
  char v7 = a4 & 1;
  Hasher.init(_seed:)();
  _ProposedSize.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a3, v7, v8);
}

void _ProposedSize.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  if (*(unsigned char *)(v0 + 8) != 1)
  {
    Swift::UInt64 v4 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = v4;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v2) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

uint64_t partial apply for closure #1 in ImageRendererHost.updateSizeThatFitsObserver()()
{
  return closure #1 in ImageRendererHost.updateSizeThatFitsObserver()();
}

uint64_t closure #1 in ImageRendererHost.updateSizeThatFitsObserver()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 56);
    swift_retain();
    swift_release();
    if (AGGraphSetValue() && (swift_beginAccess(), MEMORY[0x24C527E00](v1 + 200)))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void protocol witness for GraphDelegate.graphDidChange() in conformance ImageRendererHost<A>()
{
}

unint64_t lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize()
{
  unint64_t result = lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize;
  if (!lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize;
  if (!lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProposedSize and conformance _ProposedSize);
  }
  return result;
}

uint64_t one-time initialization function for body()
{
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 1030;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  static Font.body = result;
  return result;
}

uint64_t static Font.system(_:design:weight:)(char *a1, char *a2, uint64_t a3, char a4)
{
  char v6 = *a1;
  char v7 = *a2;
  type metadata accessor for FontBox<Font.TextStyleProvider>(0, &lazy cache variable for type metadata for FontBox<Font.TextStyleProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v6;
  *(unsigned char *)(result + 17) = v7;
  *(void *)(result + 24) = a3;
  *(unsigned char *)(result + 32) = a4 & 1;
  return result;
}

void type metadata accessor for FontBox<Font.TextStyleProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for FontBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for FontBox()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type Font.TextStyleProvider and conformance Font.TextStyleProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.TextStyleProvider and conformance Font.TextStyleProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider;
  if (!lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.SystemProvider and conformance Font.SystemProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer;
  if (!lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateTextStyleProvider and conformance Font.PrivateTextStyleProvider);
  }
  return result;
}

uint64_t type metadata completion function for ViewGraphGeometryObservers.Observer()
{
  uint64_t result = type metadata accessor for ViewGraphGeometryObservers.Observer.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ViewGraphGeometryObservers.resetObserver(for:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  double v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v6 = &v12[-v5];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v3 + 16))(&v12[-v5], a1, AssociatedTypeWitness, v4);
  uint64_t v7 = type metadata accessor for ViewGraphGeometryObservers.Observer();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Swift::Int v8 = (void (*)(unsigned char *, void))Dictionary.subscript.modify();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v9, 1, v7))
  {
    v8(v12, 0);
    char v10 = 0;
  }
  else
  {
    char v10 = ViewGraphGeometryObservers.Observer.reset()();
    v8(v12, 0);
  }
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v10 & 1;
}

uint64_t getEnumTagSinglePayload for ViewGraphGeometryObservers.Observer(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = AssociatedTypeWitness - 8;
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  char v9 = 8 * v7;
  if (v7 > 3)
  {
    int v10 = 3;
    goto LABEL_5;
  }
  unsigned int v17 = ((1 << v9) + 1) >> v9;
  if (v17 <= 0xFFFD)
  {
    int v10 = v17 + 2;
    if (v17 > 0xFD)
    {
      char v11 = 16;
LABEL_6:
      unsigned int v12 = (1 << v11) - v10;
      unsigned int v13 = 0x7FFFFFFF;
      if (v12 <= 0x7FFFFFFF) {
        int v14 = 0x7FFFFFFF;
      }
      else {
        int v14 = v12;
      }
      if ((v12 & 0x80000000) == 0) {
        unsigned int v13 = v14;
      }
      if (v7 > 3) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
LABEL_5:
    char v11 = 8;
    goto LABEL_6;
  }
  unsigned int v13 = 0x7FFFFFFF;
LABEL_12:
  unsigned int v15 = ((1 << v9) + 1) >> v9;
  uint64_t v16 = 2;
  if (v15 > 0xFFFD) {
    uint64_t v16 = 4;
  }
  if (v15 > 0xFD)
  {
    if (!a2) {
      return 0;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v16 = 1;
  if (!a2) {
    return 0;
  }
LABEL_22:
  if (v13 < a2)
  {
    unint64_t v18 = ((v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v19 = v18 & 0xFFFFFFF8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v13 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v18);
        if (!v23) {
          goto LABEL_41;
        }
        goto LABEL_38;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v18);
        if (!v23) {
          goto LABEL_41;
        }
        goto LABEL_38;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v23 = *(_DWORD *)((char *)a1 + v18);
        if (!v23) {
          goto LABEL_41;
        }
LABEL_38:
        int v24 = v23 - 1;
        if (v19)
        {
          int v24 = 0;
          int v25 = *(_DWORD *)a1;
        }
        else
        {
          int v25 = 0;
        }
        unsigned int v50 = v13 + (v25 | v24);
        break;
      default:
        goto LABEL_41;
    }
    return v50 + 1;
  }
LABEL_41:
  if (v7 > 3)
  {
    int v26 = 3;
LABEL_43:
    char v27 = 8;
    goto LABEL_44;
  }
  unsigned int v37 = ((1 << v9) + 1) >> v9;
  if (v37 > 0xFFFD)
  {
    unsigned int v29 = 0x7FFFFFFF;
    goto LABEL_76;
  }
  int v26 = v37 + 2;
  if (v37 <= 0xFD) {
    goto LABEL_43;
  }
  char v27 = 16;
LABEL_44:
  unsigned int v28 = (1 << v27) - v26;
  unsigned int v29 = 0x7FFFFFFF;
  if (v28 <= 0x7FFFFFFF) {
    int v30 = 0x7FFFFFFF;
  }
  else {
    int v30 = v28;
  }
  if ((v28 & 0x80000000) == 0) {
    unsigned int v29 = v30;
  }
  if (v7 > 3)
  {
    int v31 = 3;
LABEL_51:
    char v32 = 8;
    goto LABEL_52;
  }
LABEL_76:
  unsigned int v45 = ((1 << v9) + 1) >> v9;
  if (v45 > 0xFFFD) {
    goto LABEL_79;
  }
  int v31 = v45 + 2;
  if (v45 <= 0xFD) {
    goto LABEL_51;
  }
  char v32 = 16;
LABEL_52:
  int v33 = (1 << v32) - v31;
  if ((v33 & 0x80000000) == 0)
  {
    if (v33 == v29) {
      goto LABEL_54;
    }
    goto LABEL_80;
  }
LABEL_79:
  if (v29 == 0x7FFFFFFF)
  {
LABEL_54:
    if (v7 <= 3)
    {
      unsigned int v38 = ((1 << v9) + 1) >> v9;
      if (v38 > 0xFFFD) {
        goto LABEL_66;
      }
      int v34 = v38 + 2;
      if (v38 > 0xFD)
      {
        char v35 = 16;
LABEL_57:
        unsigned int v36 = (1 << v35) - v34;
        if ((v36 & 0x80000000) == 0)
        {
          if (v7 > 3) {
            goto LABEL_70;
          }
LABEL_67:
          unsigned int v39 = ((1 << v9) + 1) >> v9;
          uint64_t v40 = 2;
          if (v39 > 0xFFFD) {
            uint64_t v40 = 4;
          }
          if (v39 > 0xFD)
          {
LABEL_71:
            unsigned int v41 = v29 - v36;
            if (v29 <= v36) {
              goto LABEL_105;
            }
            unint64_t v42 = v40 + v7;
            char v43 = 8 * (v40 + v7);
            if (v42 <= 3)
            {
              unsigned int v49 = ((v41 + ~(-1 << v43)) >> v43) + 1;
              if (HIWORD(v49))
              {
                int v44 = *(_DWORD *)((char *)a1 + v42);
                if (!v44) {
                  goto LABEL_105;
                }
                goto LABEL_95;
              }
              if (v49 > 0xFF)
              {
                int v44 = *(unsigned __int16 *)((char *)a1 + v42);
                if (!*(unsigned __int16 *)((char *)a1 + v42)) {
                  goto LABEL_105;
                }
                goto LABEL_95;
              }
              if (v49 < 2)
              {
LABEL_105:
                if (v36)
                {
                  if (v7 <= 3)
                  {
                    unsigned int v60 = ((1 << v9) + 1) >> v9;
                    if (v60 > 0xFFFD)
                    {
                      unsigned int v55 = *(_DWORD *)((char *)a1 + v7);
                      unsigned int v56 = ~v55;
LABEL_115:
                      unsigned int v59 = 0x7FFFFFFF;
LABEL_116:
                      if (v59 > v56) {
                        return -v55;
                      }
                      else {
                        return 0;
                      }
                    }
                    int v58 = v60 + 2;
                    if (v60 > 0xFD)
                    {
                      int v62 = *(unsigned __int16 *)((char *)a1 + v7);
                      unsigned int v55 = v62 | 0xFFFF0000;
                      unsigned int v56 = v62 ^ 0xFFFF;
                      char v57 = 16;
                    }
                    else
                    {
                      int v61 = *((unsigned __int8 *)a1 + v7);
                      unsigned int v55 = v61 | 0xFFFFFF00;
                      unsigned int v56 = v61 ^ 0xFF;
                      char v57 = 8;
                    }
                  }
                  else
                  {
                    int v54 = *((unsigned __int8 *)a1 + v7);
                    unsigned int v55 = v54 | 0xFFFFFF00;
                    unsigned int v56 = v54 ^ 0xFF;
                    char v57 = 8;
                    int v58 = 3;
                  }
                  unsigned int v59 = (1 << v57) - v58;
                  if ((v59 & 0x80000000) == 0) {
                    goto LABEL_116;
                  }
                  goto LABEL_115;
                }
                return 0;
              }
            }
            int v44 = *((unsigned __int8 *)a1 + v42);
            if (!*((unsigned char *)a1 + v42)) {
              goto LABEL_105;
            }
LABEL_95:
            int v51 = (v44 - 1) << v43;
            if (v42 > 3) {
              int v51 = 0;
            }
            if (v42)
            {
              if (v42 <= 3) {
                int v52 = v42;
              }
              else {
                int v52 = 4;
              }
              switch(v52)
              {
                case 2:
                  int v53 = *a1;
                  break;
                case 3:
                  int v53 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
                  break;
                case 4:
                  int v53 = *(_DWORD *)a1;
                  break;
                default:
                  int v53 = *(unsigned __int8 *)a1;
                  break;
              }
            }
            else
            {
              int v53 = 0;
            }
            unsigned int v50 = v36 + (v53 | v51);
            return v50 + 1;
          }
LABEL_70:
          uint64_t v40 = 1;
          goto LABEL_71;
        }
LABEL_66:
        unsigned int v36 = 0x7FFFFFFF;
        if (v7 > 3) {
          goto LABEL_70;
        }
        goto LABEL_67;
      }
    }
    else
    {
      int v34 = 3;
    }
    char v35 = 8;
    goto LABEL_57;
  }
LABEL_80:
  if (v7 > 3) {
    goto LABEL_84;
  }
  unsigned int v46 = ((1 << v9) + 1) >> v9;
  uint64_t v47 = 2;
  if (v46 > 0xFFFD) {
    uint64_t v47 = 4;
  }
  if (v46 <= 0xFD) {
LABEL_84:
  }
    uint64_t v47 = 1;
  unint64_t v48 = *(void *)(((unint64_t)a1 + v7 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v48 >= 0xFFFFFFFF) {
    LODWORD(v48) = -1;
  }
  return (v48 + 1);
}

uint64_t ViewGraphGeometryObservers.Observer.reset()()
{
  uint64_t v1 = type metadata accessor for ViewGraphGeometryObservers.Observer.Storage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0, v1);
  swift_storeEnumTagMultiPayload();
  return 1;
}

uint64_t ViewGraphGeometryObservers.stopObserving(proposal:)()
{
  type metadata accessor for ViewGraphGeometryObservers.Observer();
  uint64_t v0 = type metadata accessor for Optional();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - v2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a3;
  uint64_t v5 = type metadata accessor for ViewGraphGeometryObservers.Observer();
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v15 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v11.n128_f64[0] = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v13 = (char *)&v15 - v12;
  if (a2) {
    ViewGraphGeometryObservers.removeAll()();
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, v15, AssociatedTypeWitness, v11);
  ViewGraphGeometryObservers.Observer.init(callback:)(v16, v17, (uint64_t)v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v8, 0, 1, v5);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  swift_retain();
  return Dictionary.subscript.setter();
}

void storeEnumTagSinglePayload for ViewGraphGeometryObservers.Observer(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  char v9 = 8 * v7;
  if (v7 > 3)
  {
    int v10 = 3;
LABEL_5:
    char v11 = 8;
    goto LABEL_6;
  }
  unsigned int v17 = ((1 << v9) + 1) >> v9;
  if (v17 > 0xFFFD)
  {
    unsigned int v13 = 0x7FFFFFFF;
    goto LABEL_12;
  }
  int v10 = v17 + 2;
  if (v17 <= 0xFD) {
    goto LABEL_5;
  }
  char v11 = 16;
LABEL_6:
  unsigned int v12 = (1 << v11) - v10;
  unsigned int v13 = 0x7FFFFFFF;
  if (v12 <= 0x7FFFFFFF) {
    int v14 = 0x7FFFFFFF;
  }
  else {
    int v14 = v12;
  }
  if ((v12 & 0x80000000) == 0) {
    unsigned int v13 = v14;
  }
  if (v7 > 3) {
    goto LABEL_20;
  }
LABEL_12:
  unsigned int v15 = ((1 << v9) + 1) >> v9;
  uint64_t v16 = 2;
  if (v15 > 0xFFFD) {
    uint64_t v16 = 4;
  }
  if (v15 <= 0xFD) {
LABEL_20:
  }
    uint64_t v16 = 1;
  size_t v18 = ((v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v13 < a3)
  {
    if (((v7 + v16 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v19 = a3 - v13 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    int v22 = a2 - v13;
    if (a2 <= v13) {
      goto LABEL_34;
    }
LABEL_38:
    if (v18) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    if (v18)
    {
      int v24 = ~v13 + a2;
      bzero(a1, v18);
      *(_DWORD *)a1 = v24;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        break;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        break;
      case 3:
LABEL_127:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        break;
      default:
        return;
    }
    return;
  }
  int v21 = 0;
  int v22 = a2 - v13;
  if (a2 > v13) {
    goto LABEL_38;
  }
LABEL_34:
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 3:
      goto LABEL_127;
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_46;
    default:
LABEL_46:
      if (!a2) {
        return;
      }
LABEL_47:
      if (v7 > 3)
      {
        int v25 = 3;
LABEL_49:
        char v26 = 8;
        goto LABEL_50;
      }
      unsigned int v36 = ((1 << v9) + 1) >> v9;
      if (v36 > 0xFFFD)
      {
        unsigned int v28 = 0x7FFFFFFF;
        goto LABEL_86;
      }
      int v25 = v36 + 2;
      if (v36 <= 0xFD) {
        goto LABEL_49;
      }
      char v26 = 16;
LABEL_50:
      unsigned int v27 = (1 << v26) - v25;
      unsigned int v28 = 0x7FFFFFFF;
      if (v27 <= 0x7FFFFFFF) {
        int v29 = 0x7FFFFFFF;
      }
      else {
        int v29 = v27;
      }
      if ((v27 & 0x80000000) == 0) {
        unsigned int v28 = v29;
      }
      if (v7 > 3)
      {
        int v30 = 3;
LABEL_57:
        char v31 = 8;
        goto LABEL_58;
      }
LABEL_86:
      unsigned int v43 = ((1 << v9) + 1) >> v9;
      if (v43 > 0xFFFD) {
        goto LABEL_89;
      }
      int v30 = v43 + 2;
      if (v43 <= 0xFD) {
        goto LABEL_57;
      }
      char v31 = 16;
LABEL_58:
      int v32 = (1 << v31) - v30;
      if ((v32 & 0x80000000) == 0)
      {
        if (v32 == v28) {
          goto LABEL_60;
        }
LABEL_90:
        if (v7 > 3) {
          goto LABEL_94;
        }
        unsigned int v44 = ((1 << v9) + 1) >> v9;
        uint64_t v45 = 2;
        if (v44 > 0xFFFD) {
          uint64_t v45 = 4;
        }
        if (v44 <= 0xFD) {
LABEL_94:
        }
          uint64_t v45 = 1;
        unsigned int v46 = (void *)((unint64_t)&a1[v7 + 7 + v45] & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
        {
          *unsigned int v46 = a2 ^ 0x80000000;
          v46[1] = 0;
        }
        else
        {
          *unsigned int v46 = a2 - 1;
        }
        return;
      }
LABEL_89:
      if (v28 != 0x7FFFFFFF) {
        goto LABEL_90;
      }
LABEL_60:
      if (v7 > 3)
      {
        int v33 = 3;
LABEL_62:
        char v34 = 8;
        goto LABEL_63;
      }
      unsigned int v37 = ((1 << v9) + 1) >> v9;
      if (v37 > 0xFFFD) {
        goto LABEL_76;
      }
      int v33 = v37 + 2;
      if (v37 <= 0xFD) {
        goto LABEL_62;
      }
      char v34 = 16;
LABEL_63:
      unsigned int v35 = (1 << v34) - v33;
      if ((v35 & 0x80000000) == 0)
      {
        if (v7 > 3) {
          goto LABEL_80;
        }
        goto LABEL_77;
      }
LABEL_76:
      unsigned int v35 = 0x7FFFFFFF;
      if (v7 > 3)
      {
LABEL_80:
        uint64_t v39 = 1;
        goto LABEL_81;
      }
LABEL_77:
      unsigned int v38 = ((1 << v9) + 1) >> v9;
      uint64_t v39 = 2;
      if (v38 > 0xFFFD) {
        uint64_t v39 = 4;
      }
      if (v38 <= 0xFD) {
        goto LABEL_80;
      }
LABEL_81:
      size_t v40 = v39 + v7;
      BOOL v41 = v28 >= v35;
      unsigned int v42 = v28 - v35;
      if (v42 != 0 && v41)
      {
        if (v40 <= 3)
        {
          unsigned int v50 = ((v42 + ~(-1 << (8 * v40))) >> (8 * v40)) + 1;
          if (HIWORD(v50))
          {
            int v47 = 4;
          }
          else if (v50 >= 0x100)
          {
            int v47 = 2;
          }
          else
          {
            int v47 = v50 > 1;
          }
        }
        else
        {
          int v47 = 1;
        }
      }
      else
      {
        int v47 = 0;
      }
      if (v35 >= a2)
      {
        switch(v47)
        {
          case 1:
            a1[v40] = 0;
            break;
          case 2:
            *(_WORD *)&a1[v40] = 0;
            break;
          case 3:
            goto LABEL_127;
          case 4:
            *(_DWORD *)&a1[v40] = 0;
            break;
          default:
            break;
        }
        int v52 = -a2;
        if (v7 > 3) {
          goto LABEL_116;
        }
        unsigned int v53 = ((1 << v9) + 1) >> v9;
        if (v53 > 0xFFFD)
        {
          *(_DWORD *)&a1[v7] = v52;
          return;
        }
        if (v53 <= 0xFD)
        {
LABEL_116:
          a1[v7] = v52;
          return;
        }
        *(_WORD *)&a1[v7] = v52;
      }
      else
      {
        unsigned int v48 = ~v35 + a2;
        if (v40 < 4)
        {
          int v49 = (v48 >> (8 * v40)) + 1;
          if (v40)
          {
            int v51 = v48 & ~(-1 << (8 * v40));
            bzero(a1, v40);
            if (v40 == 3)
            {
              *(_WORD *)a1 = v51;
              a1[2] = BYTE2(v51);
            }
            else if (v40 == 2)
            {
              *(_WORD *)a1 = v51;
            }
            else
            {
              *a1 = v51;
            }
          }
        }
        else
        {
          bzero(a1, v40);
          *(_DWORD *)a1 = v48;
          int v49 = 1;
        }
        switch(v47)
        {
          case 1:
            a1[v40] = v49;
            break;
          case 2:
            *(_WORD *)&a1[v40] = v49;
            break;
          case 3:
            goto LABEL_127;
          case 4:
            *(_DWORD *)&a1[v40] = v49;
            break;
          default:
            return;
        }
      }
      return;
  }
}

Swift::Void __swiftcall ViewGraphGeometryObservers.removeAll()()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ViewGraphGeometryObservers.Observer();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();

  Dictionary.removeAll(keepingCapacity:)(0);
}

uint64_t type metadata accessor for ViewGraphGeometryObservers.Observer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ViewGraphGeometryObservers.Observer.init(callback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for ViewGraphGeometryObservers.Observer.Storage();
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for ViewGraphGeometryObservers.Observer();
  unint64_t v7 = (void *)(a3 + *(int *)(result + 36));
  *unint64_t v7 = a1;
  v7[1] = a2;
  return result;
}

uint64_t type metadata accessor for ViewGraphGeometryObservers.Observer.Storage()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for Image.Resolved()
{
  return &type metadata for Image.Resolved;
}

ValueMetadata *type metadata accessor for ScrollablePreferenceKey()
{
  return &type metadata for ScrollablePreferenceKey;
}

ValueMetadata *type metadata accessor for StyledTextContentView()
{
  return &type metadata for StyledTextContentView;
}

uint64_t type metadata completion function for ValueActionDispatcher()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static CoordinateSpaceProtocol<>.named<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _convertToAnyHashable<A>(_:)();
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t Transaction.fromScrollView.setter(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t *))
{
  swift_retain();
  a2(v2, a1, &v6);
  return swift_release();
}

uint64_t Transaction.isContinuous.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = swift_retain();
  LOBYTE(a2) = a2(v3, &v5);
  swift_release();
  return a2 & 1;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<FromScrollViewKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<FromScrollViewKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<FromScrollViewKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<FromScrollViewKey>, (uint64_t)&type metadata for FromScrollViewKey, (uint64_t)&protocol witness table for FromScrollViewKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<FromScrollViewKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

uint64_t MutableBox.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for Font.Context(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LeafLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

void *protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance DefaultAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return DefaultAnimation.animate<A>(value:time:context:)(a1, a2, a3, a4, a5, a6);
}

void *DefaultAnimation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  void *(*v20)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v21;
  char v22;
  long long v23;
  long long v24;
  long long v25;
  _OWORD v26[2];
  _OWORD v27[2];
  char v28;
  uint64_t vars8;

  if (a3 == MEMORY[0x263F8D538])
  {
    uint64_t v16 = *(void *)a1;
    if (one-time initialization token for base != -1) {
      swift_once();
    }
    *(void *)&v26[0] = v16;
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, double))(*(void *)static DefaultAnimation.base + 120))(v27, v26, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a6);
    char v17 = BYTE8(v27[0]);
    *(void *)a5 = *(void *)&v27[0];
    *(unsigned char *)(a5 + 8) = v17;
  }
  else
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v13 == a3)
    {
      long long v18 = *(_OWORD *)a1;
      long long v19 = *(_OWORD *)(a1 + 16);
      if (one-time initialization token for base != -1)
      {
        int v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_OWORD *)a1;
        swift_once();
        long long v19 = v24;
        long long v18 = v25;
      }
      v26[0] = v18;
      v26[1] = v19;
      int v20 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)static DefaultAnimation.base + 120);
      int v21 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
      uint64_t result = v20(v27, v26, a2, a3, v21, a6);
      int v22 = v28;
      int v23 = v27[1];
      *(_OWORD *)a5 = v27[0];
      *(_OWORD *)(a5 + 16) = v23;
      *(unsigned char *)(a5 + 32) = v22;
    }
    else
    {
      if (one-time initialization token for base != -1) {
        swift_once();
      }
      uint64_t v14 = static DefaultAnimation.base;
      v12.n128_f64[0] = a6;
      return Animation.animate<A>(value:time:context:)(a1, a2, v14, a3, a4, a5, v12);
    }
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueTransactionSeed<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static Text.Sizing.adjustsForOversizedCharacters.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for adjustsForOversizedCharacters, &static Text.Sizing.adjustsForOversizedCharacters, &qword_268EF02C8, a1);
}

uint64_t GraphHost.Data.updateSeed.modify(_DWORD *a1)
{
  a1[1] = *a1;
  return AGGraphSetValue();
}

void static Material.ultraThin.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
}

ValueMetadata *type metadata accessor for Font.Width()
{
  return &type metadata for Font.Width;
}

void static ParagraphTypesetting.balanced.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t storeEnumTagSinglePayload for ScrapeableContent.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)uint64_t result = a2 - 119;
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unsigned __int8 *partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter(void *a1)
{
  return closure #1 in ScrollTargetRole.SetLayout.value.getter(a1);
}

_UNKNOWN **associated type witness table accessor for View.Body : View in LinearGradient()
{
  return &protocol witness table for _ShapeView<A, B>;
}

uint64_t type metadata completion function for CustomModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundInfo()
{
  return &type metadata for BackgroundInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for _EndedGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    __n128 v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *__n128 v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

ValueMetadata *type metadata accessor for ViewTransform()
{
  return &type metadata for ViewTransform;
}

_OWORD *assignWithTake for AnyTransition.InsertionVisitor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DisplayGamut()
{
  return &type metadata for DisplayGamut;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.State()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.State;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.State()
{
  return &type metadata for DisplayList.ViewUpdater.Model.State;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.PlatformState()
{
  return &type metadata for DisplayList.ViewUpdater.Model.PlatformState;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo.Seeds()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo.Seeds;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.PlatformViewInfo.Seeds()
{
  return &type metadata for DisplayList.ViewUpdater.PlatformViewInfo.Seeds;
}

uint64_t type metadata completion function for ObjectCache()
{
  return swift_initClassMetadata2();
}

double key path getter for EnvironmentValues._openSensitiveURL : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues._openSensitiveURL.getter((uint64_t)v6);
  char v2 = v7;
  char v3 = v8;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 33) = v3;
  return result;
}

double EnvironmentValues._openSensitiveURL.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!v1[1])
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v13);
    swift_release_n();
    __int16 v4 = v14;
    if ((_BYTE)v14 == 0xFF)
    {
      uint64_t v10 = swift_retain_n();
      char v11 = specialized closure #1 in PropertyList.subscript.getter(v10);
      swift_release_n();
      if (v11) {
        goto LABEL_4;
      }
LABEL_9:
      *(void *)a1 = closure #1 in static OpenURLAction.invalidAction.getter;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_WORD *)(a1 + 32) = 1;
      return result;
    }
LABEL_10:
    double result = *(double *)v13;
    long long v12 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v12;
    *(unsigned char *)(a1 + 32) = v4 & 1;
    *(unsigned char *)(a1 + 33) = HIBYTE(v4) & 1;
    return result;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v13);
  swift_release_n();
  swift_release_n();
  __int16 v4 = v14;
  if ((_BYTE)v14 != 0xFF) {
    goto LABEL_10;
  }
  swift_retain_n();
  swift_retain_n();
  char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
  swift_release_n();
  swift_release_n();
  if ((v5 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v7 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0xD0);
  char v8 = static CoreGlue.shared;
  v7();

  return result;
}

double key path getter for EnvironmentValues.openURL : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues._openURL.getter((uint64_t)v6);
  char v2 = v7;
  char v3 = v8;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 33) = v3;
  return result;
}

void EnvironmentValues._openURL.getter(uint64_t a1@<X8>)
{
  void (*v11)(long long *__return_ptr, uint64_t *);
  void *v12;
  long long v13;
  long long v14;
  char v15;
  char v16;
  char v17;
  void (*v18)(long long *__return_ptr, uint64_t *);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  __int16 v29;

  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v27);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v27);
  }
  swift_release_n();
  char v6 = v29;
  if ((_BYTE)v29 != 0xFF)
  {
    long long v7 = v27;
    long long v8 = v28;
    if ((v29 & 0x100) == 0)
    {
      if ((v29 & 1) == 0)
      {
        *(_OWORD *)a1 = v27;
        *(_OWORD *)(a1 + 16) = v8;
        *(_WORD *)(a1 + 32) = 0;
        return;
      }
      swift_retain();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v8);
      if (v3)
      {
        swift_retain_n();
        swift_retain_n();
        char v17 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
        swift_release_n();
        swift_release_n();
        if (v17)
        {
LABEL_20:
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          int v25 = v4;
          char v26 = v3;
          long long v18 = *(void (**)(long long *__return_ptr, uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                         + 0xC8);
          long long v19 = static CoreGlue.shared;
          v18(&v27, &v25);

          int v21 = *((void *)&v27 + 1);
          int v20 = v27;
          if (v29)
          {
            int v22 = v28;
            swift_retain();
            outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v22);
            swift_release();
            outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
            outlined consume of OpenURLAction.Handler(v20, v21, v22, *((uint64_t *)&v22 + 1), 1);
            int v21 = *((void *)&v22 + 1);
            int v20 = v22;
          }
          else
          {
            outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
          }
          goto LABEL_27;
        }
      }
      else
      {
        int v23 = swift_retain_n();
        int v24 = specialized closure #1 in PropertyList.subscript.getter(v23);
        swift_release_n();
        if (v24) {
          goto LABEL_20;
        }
      }
      outlined consume of OpenURLAction?(v7, *((uint64_t *)&v7 + 1), v8, *((uint64_t *)&v8 + 1), v6);
      int v20 = 0;
      int v21 = 0;
LABEL_27:
      *(_OWORD *)a1 = v7;
      *(void *)(a1 + 16) = v20;
      *(void *)(a1 + 24) = v21;
      *(_WORD *)(a1 + 32) = 1;
      return;
    }
    outlined consume of OpenURLAction?(v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
  }
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    char v9 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v10 = swift_retain_n();
    char v9 = specialized closure #1 in PropertyList.subscript.getter(v10);
  }
  swift_release_n();
  if (v9)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    int v25 = v4;
    char v26 = v3;
    char v11 = *(void (**)(long long *__return_ptr, uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                   + 0xC8);
    long long v12 = static CoreGlue.shared;
    v11(&v27, &v25);

    __int16 v14 = v27;
    uint64_t v13 = v28;
    unsigned int v15 = v29;
    uint64_t v16 = HIBYTE(v29);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v13 = 0uLL;
    *((void *)&v14 + 1) = 0;
    *(void *)&__int16 v14 = closure #1 in static OpenURLAction.invalidAction.getter;
    unsigned int v15 = 1;
  }
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 32) = v15;
  *(unsigned char *)(a1 + 33) = v16;
}

uint64_t OpenURLAction.init(isDefault:handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 33) = result;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t a6@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result)
  {
    uint64_t v11 = *(void *)(result + 72);
    uint64_t v12 = *(void *)(result + 80);
    uint64_t v13 = *(void *)(result + 88);
    uint64_t v14 = *(void *)(result + 96);
    __int16 v15 = *(_WORD *)(result + 104);
    uint64_t result = outlined copy of OpenURLAction?(v11, v12, v13, v14, v15);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    __int16 v15 = 255;
  }
  *(void *)a6 = v11;
  *(void *)(a6 + 8) = v12;
  *(void *)(a6 + 16) = v13;
  *(void *)(a6 + 24) = v14;
  *(_WORD *)(a6 + 32) = v15;
  return result;
}

uint64_t EnvironmentValues.hasSystemOpenURLAction.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HasSystemOpenURLActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a1;
  int v13 = *((_DWORD *)a1 + 2);
  uint64_t v14 = a1[2];
  LODWORD(v22) = a2;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  long long v20 = *(_OWORD *)(a1 + 7);
  long long v21 = *(_OWORD *)(a1 + 5);
  uint64_t v17 = a1[9];
  uint64_t v18 = a1[10];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:), a5, &v31);
  uint64_t v22 = v12;
  int v23 = v13;
  uint64_t v24 = v14;
  uint64_t v25 = v15;
  uint64_t v26 = v16;
  long long v27 = v21;
  long long v28 = v20;
  uint64_t v29 = v17;
  uint64_t v30 = v18;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 32))(&v31, &v22, a3, a4, a5, a7);
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance EmptyHoverEffect(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v5 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v5;
  long long v6 = *(_OWORD *)(a2 + 9);
  long long v13 = *(_OWORD *)(a2 + 7);
  long long v14 = v6;
  return a3(&v8);
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t *a1)
{
  return closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(a1, *(_DWORD *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init(type:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t _AnyResolvedPaint.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 168) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 184));

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for ScrollPositionStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unint64_t *destructiveInjectEnumTag for ScrapeableContent.Content(unint64_t *result, uint64_t a2)
{
  if (a2 < 9)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 60;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 9);
    unint64_t v3 = 0x9000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

uint64_t EnvironmentValues.calendar.getter()
{
  return EnvironmentValues.locale.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.locale.getter()
{
  return EnvironmentValues.locale.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t initializeWithCopy for AnimatableFrameAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  swift_retain();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SafeAreaInsets(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _SafeAreaInsetsModifier.Insets.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 3);
  uint64_t v5 = *(void *)(AGGraphGetValue() + 8);
  long long v6 = (void *)v5;
  if (v5 == 1)
  {
    if (v4 == *MEMORY[0x263F288F8])
    {
      long long v6 = 0;
    }
    else
    {
      Value = (uint64_t *)AGGraphGetValue();
      uint64_t v9 = *Value;
      uint64_t v8 = Value[1];
      uint64_t v10 = Value[2];
      long long v6 = (void *)swift_allocObject();
      _OWORD v6[2] = v9;
      v6[3] = v8;
      v6[4] = v10;
      swift_retain();
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v11 = *(void *)AGGraphGetValue();
  *a1 = v3;
  a1[1] = v11;
  a1[2] = v6;
  outlined copy of SafeAreaInsets.OptionalValue?(v5);

  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of SafeAreaInsets.OptionalValue?(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t static Animation.default.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }

  return swift_retain();
}

void one-time initialization function for defaultValue()
{
  static DefaultBaselineOffsetKey.defaultValue = 0;
}

{
  static LineHeightMultipleKey.defaultValue = 0;
}

{
  static MinimumLineHeightKey.defaultValue = 0;
}

{
  static MaximumLineHeightKey.defaultValue = 0;
}

{
  static HyphenationFactorKey.defaultValue = 0;
}

{
  static DefaultTrackingKey.defaultValue = 0;
}

{
  static BodyHeadOutdentKey.defaultValue = 0;
}

{
  static DefaultKerningKey.defaultValue = 0;
}

{
  static LineSpacingKey.defaultValue = 0;
}

{
  static ReusableInputs.defaultValue = 0;
  qword_26B1119A8 = 0;
}

{
  static _GraphInputs.SavedTransactionKey.defaultValue = (_UNKNOWN *)MEMORY[0x263F8EE78];
}

{
  static AccessibilityProperties.TraitsKey.defaultValue = 0uLL;
}

{
  static AccessibilityProperties.VisibilityKey.defaultValue = 0;
}

{
  static MinimumScaleFactorKey.defaultValue = 0x3FF0000000000000;
}

{
  static TextRendererInput.defaultValue = 0;
}

{
  static _GraphInputs.ScrollTargetRoleKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  static ForEachEvictionInput.defaultValue = 0;
}

{
  static FontModifiersKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static DisplayList.Key.defaultValue = MEMORY[0x263F8EE78];
  word_26B0F1B78 = 0;
  byte_26B0F1B7A = 0;
}

{
  static EnvironmentValues.SymbolEffectsKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  uint64_t v0;

  type metadata accessor for StyleContextTypeBox<NoStyleContext>();
  *(void *)&static StyleContextInput.defaultValue = v0;
  *((void *)&static StyleContextInput.defaultValue + 1) = &protocol witness table for StyleContextTypeBox<A>;
}

{
  *(void *)&static FontDefinitionKey.defaultValue = &type metadata for DefaultFontDefinition;
  *((void *)&static FontDefinitionKey.defaultValue + 1) = &protocol witness table for DefaultFontDefinition;
}

{
  qword_26B0ED188 = (uint64_t)&type metadata for DefaultFallbackFontProvider;
  *(void *)algn_26B0ED190 = &protocol witness table for DefaultFallbackFontProvider;
}

{
  static _GraphInputs.ScrollPositionAnchorKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  static DisplayScaleKey.defaultValue = 0x3FF0000000000000;
}

{
  static UpdateScrollStateRequestKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static AccessibilityProperties.HintsKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static _GraphInputs.ScrollableKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  static ScrollGeometryPreferenceKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static ScrollPhasePreferenceKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static ScrollablePreferenceKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static ScrollPrefetchState.defaultValue = *MEMORY[0x263F288F8];
}

{
  static _GraphInputs.ScrollPhaseStateKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  *(void *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue = &type metadata for EmptyOpacityAccessibilityProvider;
  *((void *)&static _GraphInputs.OpacityAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyOpacityAccessibilityProvider;
}

{
  static DynamicStackOrientation.defaultValue = *MEMORY[0x263F288F8];
}

{
  static _GraphInputs.ScrollStateRequestKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue = *MEMORY[0x263F288F8];
}

{
  static _DisplayList_StableIdentityScope.defaultValue = 0;
}

{
  static AccessibilityProperties.CustomContentListKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  *(void *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue = &type metadata for EmptyPrivacyReductionAccessibilityProvider;
  *((void *)&static _GraphInputs.PrivacyReductionAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyPrivacyReductionAccessibilityProvider;
}

{
  *(void *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue = &type metadata for EmptyLayoutAccessibilityProvider;
  *((void *)&static _GraphInputs.LayoutAccessibilityProviderKey.defaultValue + 1) = &protocol witness table for EmptyLayoutAccessibilityProvider;
}

{
  static EnvironmentValues.ContentShapesKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static _GraphInputs.GestureAccessibilityProviderKey.defaultValue = (uint64_t)&type metadata for EmptyGestureAccessibilityProvider;
  off_268EFEA70 = &protocol witness table for EmptyGestureAccessibilityProvider;
}

{
  static Text.LayoutKey.defaultValue = MEMORY[0x263F8EE78];
}

{
  static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue = MEMORY[0x263F8EE78];
}

void static AccessibilityTraits.isHeader.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1)
{
  return one-time initialization function for defaultValue(a1, static EnvironmentValues.StringResolutionDate.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static EnvironmentValues.ResolvableStringReferenceDateKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, MEMORY[0x263F07920], static CalendarKey.defaultValue, MEMORY[0x263F07810]);
}

{
  return one-time initialization function for defaultValue(a1, MEMORY[0x263F079C8], static TimeZoneKey.defaultValue, MEMORY[0x263F079B8]);
}

unint64_t lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout;
  if (!lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout;
  if (!lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PaddingLayout and conformance _PaddingLayout);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BodyHeadOutdentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>);
    }
  }
}

uint64_t OpenURLAction.init(handler:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 1;
  return result;
}

SwiftUI::CoordinateSpace::ID __swiftcall CoordinateSpace.ID.init()()
{
  uint64_t v1 = v0;
  result.value.value = AGMakeUniqueID();
  v1->value.value = result.value.value;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ViewListTransition<A>()
{
  return swift_getWitnessTable();
}

uint64_t Transaction.animation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_release();
  return v2;
}

void one-time initialization function for topLeading()
{
  static UnitPoint.topLeading = 0uLL;
}

ValueMetadata *type metadata accessor for Time()
{
  return &type metadata for Time;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier()
{
  return &type metadata for ScrollPositionBindingModifier;
}

ValueMetadata *type metadata accessor for ContentOffsetAdjustmentReason()
{
  return &type metadata for ContentOffsetAdjustmentReason;
}

ValueMetadata *type metadata accessor for ScrollTargetConfiguration()
{
  return &type metadata for ScrollTargetConfiguration;
}

ValueMetadata *type metadata accessor for DynamicLayoutViewAdaptor.ItemLayout()
{
  return &type metadata for DynamicLayoutViewAdaptor.ItemLayout;
}

ValueMetadata *type metadata accessor for ReusableInputStorage()
{
  return &type metadata for ReusableInputStorage;
}

uint64_t one-time initialization function for automatic(uint64_t a1)
{
  return one-time initialization function for automatic(a1, static TypesettingLanguage.automatic, 1);
}

ValueMetadata *type metadata accessor for DynamicViewListItem()
{
  return &type metadata for DynamicViewListItem;
}

ValueMetadata *type metadata accessor for CachedEnvironment()
{
  return &type metadata for CachedEnvironment;
}

ValueMetadata *type metadata accessor for PreferenceValues()
{
  return &type metadata for PreferenceValues;
}

ValueMetadata *type metadata accessor for BodyInputElement()
{
  return &type metadata for BodyInputElement;
}

ValueMetadata *type metadata accessor for _ViewListInputs.Options()
{
  return &type metadata for _ViewListInputs.Options;
}

ValueMetadata *type metadata accessor for TextSizeVariant()
{
  return &type metadata for TextSizeVariant;
}

ValueMetadata *type metadata accessor for _GraphInputs.Options()
{
  return &type metadata for _GraphInputs.Options;
}

ValueMetadata *type metadata accessor for _GraphInputs.Phase()
{
  return &type metadata for _GraphInputs.Phase;
}

ValueMetadata *type metadata accessor for ScrollTarget()
{
  return &type metadata for ScrollTarget;
}

ValueMetadata *type metadata accessor for ScrapeableID()
{
  return &type metadata for ScrapeableID;
}

ValueMetadata *type metadata accessor for DisplayList.Version()
{
  return &type metadata for DisplayList.Version;
}

ValueMetadata *type metadata accessor for BloomFilter()
{
  return &type metadata for BloomFilter;
}

ValueMetadata *type metadata accessor for _ViewDebug.Properties()
{
  return &type metadata for _ViewDebug.Properties;
}

uint64_t type metadata completion function for UnaryLayoutEngine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return 0xD000000000000016;
}

uint64_t SpringAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  MEMORY[0x270FA5388](*(void *)(a3 - 8));
  uint64_t v15 = (char *)&v32[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v16 == MEMORY[0x263F8D538])
  {
    uint64_t result = specialized SpringAnimation.animate<A>(value:time:context:)(a2, *a1, a6, *v6, v6[1]);
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v26 & 1;
    return result;
  }
  uint64_t v31 = v13;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v17 == a3)
  {
    specialized SpringAnimation.animate<A>(value:time:context:)(a2, (uint64_t)v32, *a1, a1[1], a1[2], a1[3], a6, v6[1]);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)v32, a5);
  }
  double v18 = v6[1];
  double v19 = v6[3];
  double v20 = sqrt(v18 / *v6);
  double v21 = sqrt(*v6 * v18);
  double v22 = v6[2] / (v21 + v21);
  if (v22 >= 1.0)
  {
    double v24 = v20 - v19;
    double v23 = 0.0;
  }
  else
  {
    double v23 = v20 * sqrt(1.0 - v22 * v22);
    double v24 = (v20 * v22 - v19) / v23;
  }
  *(double *)int v32 = v20;
  *(double *)&v32[1] = v22;
  *(double *)&v32[2] = v23;
  v32[3] = 0x3FF0000000000000;
  *(double *)&v32[4] = v24;
  SpringModel.duration(epsilon:)(0.001);
  if (v27 > a6)
  {
    double v28 = SpringModel.sample(at:)(a6);
    if ((~*(void *)&v28 & 0x7FF0000000000000) != 0)
    {
      uint64_t v30 = v31;
      if ((~*(void *)&v18 & 0x7FF0000000000000) != 0)
      {
        if (6.28318531 / sqrt(v18) > a6)
        {
LABEL_18:
          (*(void (**)(char *, double *, uint64_t))(v30 + 16))(v15, a1, a3);
          (*(void (**)(uint64_t, uint64_t, double))(a4 + 16))(a3, a4, v28);
          (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(a5, v15, a3);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a5, 0, 1, a3);
        }
      }
      else if (a6 < 0.0)
      {
        goto LABEL_18;
      }
      *(unsigned char *)(a2 + 17) = 1;
      goto LABEL_18;
    }
  }
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);

  return v29(a5, 1, 1, a3);
}

void specialized SpringAnimation.animate<A>(value:time:context:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D6>)
{
  SpringModel.duration(epsilon:)(0.001);
  float64x2_t v12 = 0uLL;
  if (v13 <= a7)
  {
    char v15 = 1;
    float64x2_t v16 = 0uLL;
    goto LABEL_11;
  }
  double v14 = SpringModel.sample(at:)(a7);
  if ((~*(void *)&v14 & 0x7FF0000000000000) != 0)
  {
    v17.f64[0] = a5;
    if ((~*(void *)&a8 & 0x7FF0000000000000) != 0)
    {
      if (6.28318531 / sqrt(a8) > a7)
      {
LABEL_10:
        char v15 = 0;
        v18.f64[0] = a3;
        v18.f64[1] = a4;
        float64x2_t v12 = vmulq_n_f64(v18, v14);
        v17.f64[1] = a6;
        float64x2_t v16 = vmulq_n_f64(v17, v14);
        goto LABEL_11;
      }
    }
    else if (a7 < 0.0)
    {
      goto LABEL_10;
    }
    *(unsigned char *)(a1 + 17) = 1;
    goto LABEL_10;
  }
  char v15 = 1;
  float64x2_t v16 = 0uLL;
  float64x2_t v12 = 0uLL;
LABEL_11:
  *(float64x2_t *)a2 = v12;
  *(float64x2_t *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 32) = v15;
}

void SpringModel.duration(epsilon:)(double a1)
{
  double v2 = v1[1];
  double v3 = 0.000001;
  if (a1 > 0.000001)
  {
    if (v2 == 0.0) {
      return;
    }
    double v3 = a1;
    if (v2 >= 1.0) {
      goto LABEL_4;
    }
LABEL_20:
    fmax(-log(v3 / (fabs(v1[3]) + fabs(v1[4]))) / (v2 * *v1), 0.0);
    return;
  }
  if (v2 == 0.0) {
    return;
  }
  if (v2 < 1.0) {
    goto LABEL_20;
  }
LABEL_4:
  double v4 = -1.0;
  double v5 = 0.0;
  double v6 = INFINITY;
  uint64_t v7 = 1024;
  double v8 = 1.0;
  double v9 = -1.0;
  do
  {
    if (v2 >= v8)
    {
      double v16 = v1[3] + v5 * v1[4];
      double v15 = v16 * exp(-(v5 * *v1));
    }
    else
    {
      double v10 = v5 * v1[2];
      double v11 = exp(v5 * (*v1 * -v2));
      double v12 = v1[3];
      __double2 v13 = __sincos_stret(v10);
      double v14 = v12 * v13.__cosval;
      double v8 = 1.0;
      double v15 = v11 * (v14 + v13.__sinval * v1[4]);
      double v4 = -1.0;
    }
    double v17 = fabs(v15 + v4 + v8);
    if ((~*(void *)&v17 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v6 >= v3)
    {
      if (v17 < v6)
      {
        double v6 = v17;
        double v9 = v5;
      }
    }
    else if (v17 >= v3)
    {
      double v6 = INFINITY;
    }
    else if (v5 - v9 > v8)
    {
      return;
    }
    double v5 = v5 + 0.1;
    --v7;
  }
  while (v7);
}

double SpringModel.sample(at:)(double a1)
{
  double v2 = v1[1];
  if (v2 >= 1.0)
  {
    double v8 = v1[3] + v1[4] * a1;
    double v7 = v8 * exp(-(a1 * *v1));
  }
  else
  {
    double v3 = v1[2] * a1;
    double v4 = exp(-(v2 * *v1) * a1);
    double v5 = v1[3];
    __double2 v6 = __sincos_stret(v3);
    double v7 = v4 * (v5 * v6.__cosval + v6.__sinval * v1[4]);
  }
  return 1.0 - v7;
}

uint64_t instantiation function for generic protocol witness table for GeometryReader<A>.Child(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _DrawingGroupEffect()
{
  return &type metadata for _DrawingGroupEffect;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Anchor<A>(uint64_t *a1, uint64_t *a2)
{
  return static Anchor<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for AnyElement()
{
  return self;
}

void _GraphInputs.pushStableType(_:)()
{
  if (*(unsigned char *)(v0 + 37))
  {
    AGTypeGetSignature();
    specialized _GraphInputs.pushScope<A>(id:)(v1, v2, (void *)v3);
  }
}

uint64_t *initializeWithCopy for Text.Suffix(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t outlined copy of Text.Suffix.Storage(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void static ScrollGeometry.viewTransform(contentInsets:contentSize:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  double v18 = CGRect.outset(by:)(a2, a3, a4, a5, 0.0, 0.0, a8, a9);
  if (v20 <= 0.0) {
    double v20 = 0.0;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  if (v21 <= 0.0) {
    double v21 = 0.0;
  }
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a3;
  *(double *)(a1 + 48) = a4;
  *(double *)(a1 + 56) = a5;
  *(CGFloat *)(a1 + 64) = a8;
  *(CGFloat *)(a1 + 72) = a9;
  *(double *)(a1 + 80) = v18;
  *(void *)(a1 + 88) = v19;
  *(double *)(a1 + 96) = v20;
  *(double *)(a1 + 104) = v21;
}

double CGRect.outset(by:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11 = a5;
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  if (!CGRectIsNull(v22))
  {
    double v16 = -a3;
    v23.origin.x = v11;
    v23.origin.y = a6;
    v23.size.width = a7;
    v23.size.height = a8;
    CGRect v24 = CGRectStandardize(v23);
    if (a2 == a4) {
      double v17 = a4;
    }
    else {
      double v17 = a2;
    }
    double v11 = v24.origin.x - v17;
    double v18 = v24.origin.y - a1;
    double v19 = v24.size.width - (-a4 - a2);
    double v20 = v24.size.height - (v16 - a1);
    v25.origin.x = v24.origin.x - v17;
    v25.origin.y = v24.origin.y - a1;
    v25.size.width = v19;
    v25.size.height = v20;
    if (CGRectGetWidth(v25) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
    v26.origin.x = v11;
    v26.origin.y = v18;
    v26.size.width = v19;
    v26.size.height = v20;
    if (CGRectGetHeight(v26) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
  }
  return v11;
}

uint64_t implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)@<X0>(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v7 = *a1;
  uint64_t v8 = *((void *)a1 + 1);
  double v9 = a1[2];
  double v10 = a1[3];
  long long v17 = *((_OWORD *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v12 = *((void *)a1 + 7);
  __int16 v13 = *((_WORD *)a1 + 32);
  char v14 = *((unsigned char *)a1 + 66);
  int v15 = *((_DWORD *)a1 + 17);
  *(void *)&long long v18 = a3;
  LOBYTE(v27) = 0;
  DisplayList.ViewUpdater.ViewInfo.init(platform:kind:)((uint64_t *)&v18, (__int8 *)&v27, a4);
  uint64_t v27 = a3;
  *(double *)&long long v18 = v7;
  *((void *)&v18 + 1) = v8;
  double v19 = v9;
  double v20 = v10;
  long long v21 = v17;
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  char v25 = v14;
  __int16 v24 = v13;
  int v26 = v15;
  return DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a4, &v18, a2, v9, v10);
}

double DisplayList.ViewUpdater.ViewInfo.init(platform:kind:)@<D0>(uint64_t *a1@<X0>, __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v6 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
  v24.i8[0] = *a2;
  __int8 v5 = v24.i8[0];
  double v7 = (void *)(*(uint64_t (**)(int16x8_t *))(v6 + 88))(&v24);
  id v8 = (id)CoreViewLayer(v4 & 3, v7);
  v21[0] = vdupq_n_s64(0x7FF0000000000000uLL);
  v21[1] = v21[0];
  __int8 v22 = v5;
  char v23 = 0;
  uint64_t v9 = swift_unknownObjectRetain();
  DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v21, &v24);
  uint64_t v10 = v25;
  __int16 v11 = v28;
  __int16 v12 = v31;
  int v13 = v32;
  char v14 = v33;
  char v15 = v34;
  double result = v35;
  long long v18 = v29;
  long long v17 = v30;
  long long v19 = v26;
  long long v20 = v27;
  *(int16x8_t *)a3 = v24;
  *(void *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 24) = v19;
  *(_OWORD *)(a3 + 40) = v20;
  *(_WORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 64) = v18;
  *(_OWORD *)(a3 + 80) = v17;
  *(_WORD *)(a3 + 96) = v12;
  *(_DWORD *)(a3 + 100) = v13;
  *(unsigned char *)(a3 + 104) = v14;
  *(unsigned char *)(a3 + 105) = v15;
  *(double *)(a3 + 112) = result;
  return result;
}

void one-time initialization function for actions()
{
  static Update.actions = (_UNKNOWN *)MEMORY[0x263F8EE78];
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextCaseKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextCaseKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextCaseKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>, (uint64_t)&type metadata for TextCaseKey, (uint64_t)&protocol witness table for TextCaseKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextCaseKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for StoredLocationBase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL ViewRendererHost.isRendering.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 80))(&var1);
  return (_BYTE)var1 != 0;
}

uint64_t type metadata accessor for _ViewList_ID_Views()
{
  return self;
}

uint64_t Image.resolveNamedImage(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 88))();
}

uint64_t ImageProviderBox.resolveNamedImage(in:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 120) + 24))(a1, *(void *)(*(void *)v1 + 112));
}

id Image.NamedImageProvider.resolveNamedImage(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  int v6 = *(unsigned __int8 *)(v2 + 20);
  double v7 = *(void **)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 48);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = *(void *)(v2 + 64);
  char v13 = *(unsigned char *)(v2 + 72);
  uint64_t v36 = *(void *)v2;
  uint64_t v37 = *(void *)(v2 + 8);
  unsigned int v50 = *(void **)v2;
  uint64_t v51 = v37;
  uint64_t v35 = v5;
  LODWORD(v52) = v5;
  int v34 = v6;
  BYTE4(v52) = v6;
  uint64_t v53 = (uint64_t)v7;
  uint64_t v54 = v8;
  uint64_t v55 = v9;
  uint64_t v56 = v10;
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  char v59 = v13;
  Image.NamedImageProvider.resolve(in:)(a1, (uint64_t)v60);
  id result = (id)outlined release of Image.Resolved((uint64_t)v60);
  if (v60[8] == 255)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    char v29 = v13;
    uint64_t v31 = v12;
    uint64_t v33 = v11;
    uint64_t v15 = *a1;
    uint64_t v16 = a1[1];
    uint64_t v17 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for ImageResolutionContext() + 32));
    if (v17 == 8)
    {
      if (v16)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v15, (char *)&v50);
        swift_release_n();
        swift_release_n();
        uint64_t v17 = v50;
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>);
        BloomFilter.init(hashValue:)(v18);
        uint64_t v19 = swift_retain_n();
        uint64_t v20 = specialized find1<A>(_:key:filter:)(v19, (uint64_t)v50);
        if (v20) {
          uint64_t v17 = *(unsigned __int8 *)(v20 + 72);
        }
        else {
          uint64_t v17 = 8;
        }
        swift_release_n();
      }
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    v40[0] = v36;
    v40[1] = v37;
    int v41 = v35;
    char v42 = v34;
    unsigned int v43 = v7;
    uint64_t v44 = v8;
    uint64_t v45 = v9;
    uint64_t v46 = v10;
    uint64_t v47 = v33;
    uint64_t v48 = v31;
    char v49 = v29;
    v39[0] = v15;
    v39[1] = v16;
    unsigned int v38 = v7;
    Image.NamedImageProvider.bitmapInfo(in:from:)(v39, &v38, (uint64_t)&v50);
    char v21 = v56;
    if (v56 == 3)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v32 = v55;
      uint64_t v30 = v54;
      uint64_t v23 = v52;
      uint64_t v28 = v53;
      int16x8_t v24 = v50;
      char v25 = v51;
      unsigned int v50 = (void *)v15;
      uint64_t v51 = v16;
      LOBYTE(v40[0]) = v56;
      char v26 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)v40);
      outlined consume of NamedImage.BitmapInfo?(v24, v25, v23, v28, v30, v32, v21);
      uint64_t v22 = 0x1000000000000;
      if ((v26 & 1) == 0) {
        uint64_t v22 = 0;
      }
    }
    uint64_t v27 = 0x100000000;
    if (!v34) {
      uint64_t v27 = 0;
    }
    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v37;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v22 | v27 | v35 | (v17 << 40);
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v16;
    swift_bridgeObjectRetain();
    return outlined copy of Image.Location(v7);
  }
  return result;
}

uint64_t Image.NamedImageProvider.bitmapInfo(in:from:)@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v13 = *v3;
  uint64_t v12 = v3[1];
  uint64_t v18 = a1[1];
  uint64_t v19 = v11;
  uint64_t v17 = v10;
  swift_bridgeObjectRetain();
  outlined copy of Image.Location(v11);
  swift_retain();
  swift_retain();
  NamedImage.BitmapKey.init(name:location:in:)(v13, v12, (uint64_t *)&v19, &v17, (uint64_t)v9);
  if (one-time initialization token for sharedCache != -1) {
    swift_once();
  }
  char v14 = (void *)*((void *)v9 + 4);
  uint64_t v17 = static NamedImage.sharedCache;
  uint64_t v18 = unk_26B0EE920;
  uint64_t v19 = v14;
  NamedImage.Cache.subscript.getter((uint64_t)v9, &v19, a3);
  return outlined destroy of NamedImage.BitmapKey((uint64_t)v9, type metadata accessor for NamedImage.BitmapKey);
}

uint64_t NamedImage.BitmapKey.init(name:location:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *a3;
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  v47[0] = v16;
  v47[1] = v15;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(v47, v48);
  char v17 = v48[1];
  *(unsigned char *)a5 = v48[0];
  *(unsigned char *)(a5 + 1) = v17;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = a2;
  swift_retain();
  swift_retain_n();
  if (v15)
  {
    uint64_t v18 = swift_retain();
    double v19 = specialized PropertyList.Tracker.value<A>(_:for:)(v18);
    swift_release_n();
    swift_release_n();
    *(double *)(a5 + 24) = v19;
    *(void *)(a5 + 32) = v14;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v47);
    swift_release_n();
    swift_release_n();
    *(unsigned char *)(a5 + 40) = v47[0];
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v13);
  }
  else
  {
    uint64_t v20 = swift_retain_n();
    double v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release_n();
    swift_release_n();
    *(double *)(a5 + 24) = v21;
    *(void *)(a5 + 32) = v14;
    swift_retain_n();
    swift_retain();
    uint64_t v22 = specialized find<A>(_:key:)(v16);
    if (v22) {
      char v23 = *(unsigned char *)(v22 + 72);
    }
    else {
      char v23 = 0;
    }
    swift_release();
    swift_release_n();
    *(unsigned char *)(a5 + 40) = v23;
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v13);
    swift_release_n();
  }
  swift_release_n();
  swift_release_n();
  int16x8_t v24 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a5 + v24[9], v13, v10);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    swift_release_n();
    *(unsigned char *)(a5 + v24[10]) = v48[0];
    swift_retain_n();
    swift_retain_n();
    uint64_t v25 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
    swift_release_n();
    swift_release_n();
    *(void *)(a5 + v24[11]) = v25;
    swift_retain_n();
    swift_retain_n();
    uint64_t v26 = specialized PropertyList.Tracker.value<A>(_:for:)(v16);
    swift_release_n();
    swift_release_n();
    *(void *)(a5 + v24[12]) = v26;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    swift_release_n();
    if (v48[0] == 2) {
      char v27 = 0;
    }
    else {
      char v27 = (v48[0] & 1) + 1;
    }
    *(unsigned char *)(a5 + v24[13]) = v27;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v48);
    swift_release_n();
    uint64_t result = swift_release_n();
    int v29 = v48[0];
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>);
    BloomFilter.init(hashValue:)(v30);
    uint64_t v31 = v47[0];
    swift_retain_n();
    swift_retain();
    uint64_t v32 = specialized find1<A>(_:key:filter:)(v16, v31);
    if (v32) {
      char v33 = *(unsigned char *)(v32 + 72);
    }
    else {
      char v33 = 0;
    }
    swift_release();
    char v34 = 2;
    swift_release_n();
    *(unsigned char *)(a5 + v24[10]) = v33;
    swift_retain_n();
    swift_retain_n();
    uint64_t v35 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v46);
    swift_release_n();
    swift_release_n();
    *(void *)(a5 + v24[11]) = v35;
    swift_retain_n();
    swift_retain_n();
    uint64_t v36 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v45);
    swift_release_n();
    swift_release_n();
    *(void *)(a5 + v24[12]) = v36;
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>);
    BloomFilter.init(hashValue:)(v37);
    uint64_t v38 = v47[0];
    swift_retain_n();
    swift_retain();
    uint64_t v39 = specialized find1<A>(_:key:filter:)(v16, v38);
    if (v39) {
      char v34 = *(unsigned char *)(v39 + 72);
    }
    swift_release();
    int v29 = 2;
    swift_release_n();
    if (v34 == 2) {
      char v40 = 0;
    }
    else {
      char v40 = (v34 & 1) + 1;
    }
    *(unsigned char *)(a5 + v24[13]) = v40;
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>);
    BloomFilter.init(hashValue:)(v41);
    uint64_t v42 = v47[0];
    swift_retain_n();
    swift_retain();
    uint64_t v43 = specialized find1<A>(_:key:filter:)(v16, v42);
    if (v43) {
      int v29 = *(unsigned __int8 *)(v43 + 72);
    }
    swift_release_n();
    uint64_t result = swift_release_n();
  }
  if (v29 == 2) {
    char v44 = 0;
  }
  else {
    char v44 = (v29 & 1) + 1;
  }
  *(unsigned char *)(a5 + v24[14]) = v44;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>);
    }
  }
}

void NamedImage.Cache.subscript.getter(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v40 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v40 - v10;
  char v49 = *a2;
  uint64_t v13 = *v3;
  uint64_t v12 = v3[1];
  uint64_t v47 = a1;
  outlined init with copy of NamedImage.Key(a1, (uint64_t)&v40 - v10, type metadata accessor for NamedImage.BitmapKey);
  swift_retain();
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
  uint64_t v14 = *(void *)(v12 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_t v41 = (os_unfair_lock_t)(v12 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 16));
  uint64_t v42 = v13;
  swift_release();
  swift_release_n();
  if (*(void *)(v14 + 16))
  {
    uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if (v16)
    {
      uint64_t v17 = *(void *)(v14 + 56) + 96 * v15;
      uint64_t v18 = *(void **)v17;
      double v19 = *(void **)(v17 + 16);
      uint64_t v48 = *(unsigned __int8 *)(v17 + 24);
      char v49 = v19;
      uint64_t v21 = *(void *)(v17 + 32);
      uint64_t v20 = *(void *)(v17 + 40);
      uint64_t v43 = *(unsigned __int8 *)(v17 + 48);
      uint64_t v23 = *(void *)(v17 + 56);
      uint64_t v22 = *(void *)(v17 + 64);
      uint64_t v42 = *(void *)(v17 + 72);
      uint64_t v46 = *(void *)(v17 + 80);
      uint64_t v47 = v20;
      int v45 = *(unsigned __int8 *)(v17 + 88);
      unsigned __int8 v24 = *(unsigned char *)(v17 + 8);
      uint64_t v44 = v24;
      outlined copy of GraphicsImage.Contents(v18, v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = (uint64_t)v11;
      uint64_t v27 = v42;
      outlined destroy of NamedImage.BitmapKey(v26, type metadata accessor for NamedImage.BitmapKey);
LABEL_6:
      uint64_t v30 = v43;
      uint64_t v29 = v44;
      unsigned __int8 v33 = v45;
      uint64_t v32 = v46;
      uint64_t v31 = v47;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NamedImage.BitmapKey((uint64_t)v11, type metadata accessor for NamedImage.BitmapKey);
  unsigned int v50 = v49;
  uint64_t v28 = v47;
  NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(&v50, *(void *)(v47 + *(int *)(v7 + 44)), *(void *)(v47 + *(int *)(v7 + 48)), (uint64_t)&v51);
  uint64_t v29 = *((void *)&v51 + 1);
  uint64_t v18 = (void *)v51;
  uint64_t v21 = v54;
  uint64_t v48 = v53;
  char v49 = v52;
  uint64_t v31 = v55;
  uint64_t v30 = v56;
  uint64_t v23 = v57;
  uint64_t v25 = v58;
  uint64_t v27 = v59;
  uint64_t v32 = v60;
  unsigned __int8 v33 = v61;
  if (v56 != 3)
  {
    uint64_t v34 = v40;
    uint64_t v43 = v56;
    uint64_t v44 = *((void *)&v51 + 1);
    uint64_t v46 = v60;
    uint64_t v47 = v55;
    int v45 = v61;
    outlined init with copy of NamedImage.Key(v28, v40, type metadata accessor for NamedImage.BitmapKey);
    swift_retain();
    swift_retain_n();
    uint64_t v35 = v27;
    uint64_t v36 = v25;
    char v37 = v48;
    uint64_t v38 = v49;
    outlined copy of NamedImage.BitmapInfo?(v18, v44, (uint64_t)v49, v48, v21, v47, v43);
    os_unfair_lock_lock(v41);
    *(void *)&long long v51 = v18;
    BYTE8(v51) = v44;
    uint64_t v52 = v38;
    LOBYTE(v53) = v37;
    uint64_t v54 = v21;
    uint64_t v55 = v47;
    LOBYTE(v56) = v43;
    uint64_t v57 = v23;
    uint64_t v58 = v36;
    uint64_t v59 = v35;
    uint64_t v60 = v46;
    unsigned __int8 v61 = v45;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v50 = *(void **)(v12 + 32);
    *(void *)(v12 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v51, v34, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = v36;
    uint64_t v27 = v35;
    *(void *)(v12 + 32) = v50;
    swift_bridgeObjectRelease();
    outlined destroy of NamedImage.BitmapKey(v34, type metadata accessor for NamedImage.BitmapKey);
    os_unfair_lock_unlock(v41);
    swift_release();
    swift_release_n();
    goto LABEL_6;
  }
LABEL_7:
  *(void *)a3 = v18;
  *(void *)(a3 + 8) = v29;
  *(void *)(a3 + 16) = v49;
  *(void *)(a3 + 24) = v48;
  *(void *)(a3 + 32) = v21;
  *(void *)(a3 + 40) = v31;
  *(void *)(a3 + 48) = v30;
  *(void *)(a3 + 56) = v23;
  *(void *)(a3 + 64) = v25;
  *(void *)(a3 + 72) = v27;
  *(void *)(a3 + 80) = v32;
  *(unsigned char *)(a3 + 88) = v33;
}

void NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a1;
  if (!*a1)
  {
    if (one-time initialization token for systemAssetManager != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)static Image.Location.systemAssetManager;
    goto LABEL_9;
  }
  if (v9 == (void *)1)
  {
    if (one-time initialization token for privateSystemAssetManager != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)static Image.Location.privateSystemAssetManager;
LABEL_9:
    id v11 = v10;
    id v12 = v11;
    goto LABEL_14;
  }
  uint64_t v13 = one-time initialization token for sharedCache;
  id v14 = v9;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v88 = static NamedImage.sharedCache;
  float64x2_t v89 = (void *)unk_26B0EE920;
  swift_retain();
  swift_retain();
  id v12 = NamedImage.Cache.subscript.getter(v14);
  swift_release();
  swift_release();
  if (!v12)
  {
    outlined consume of Image.Location(v9);
LABEL_63:
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(void *)(a4 + 48) = 3;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(unsigned char *)(a4 + 88) = 0;
    return;
  }
  outlined consume of Image.Location(v9);
LABEL_14:
  if (*(unsigned char *)(v5 + 40)) {
    uint64_t v15 = 4;
  }
  else {
    uint64_t v15 = 5;
  }
  if (a2 == 8)
  {
    type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CatalogAssetMatchType>, (uint64_t)&type metadata for CatalogAssetMatchType, MEMORY[0x263F8E0F8]);
    id v11 = (id)swift_allocObject();
    char v16 = v11;
    *((_OWORD *)v11 + 1) = xmmword_2461BDD50;
    *((void *)v11 + 4) = 8;
    *((unsigned char *)v11 + 40) = 0;
    *((void *)v11 + 6) = 1;
    *((unsigned char *)v11 + 56) = 1;
  }
  else
  {
    char v16 = &outlined read-only object #0 of NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:);
  }
  MEMORY[0x270FA5388](v11);
  v85[2] = v12;
  v85[3] = v5;
  v85[4] = a2;
  v85[5] = a3;
  v85[6] = v15;
  if (v18) {
    __int16 v19 = 256;
  }
  else {
    __int16 v19 = 0;
  }
  uint64_t v20 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v19 | v17, (uint64_t)v16, (uint64_t (*)(unint64_t, unint64_t))partial apply for closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:), (uint64_t)v85);
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_62:

    goto LABEL_63;
  }
  uint64_t v21 = one-time initialization token for v3;
  id v22 = v20;
  if (v21 != -1) {
    swift_once();
  }
  unsigned int v23 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_53;
    }
  }
  else if (static Semantics.forced < v23)
  {
LABEL_53:
    id v58 = objc_msgSend(v22, sel_image);
    if (v58)
    {
      uint64_t v59 = v58;
      if ((unint64_t)v9 >= 2)
      {
        uint64_t v60 = one-time initialization token for sharedCache;
        id v61 = v9;
        if (v60 != -1) {
          swift_once();
        }
        uint64_t v88 = static NamedImage.sharedCache;
        float64x2_t v89 = (void *)unk_26B0EE920;
        swift_retain();
        swift_retain();
        id v62 = NamedImage.Cache.subscript.getter(v61);
        char v64 = v63;
        swift_release();
        swift_release();
        if (v62)
        {
          if (v64)
          {
            outlined consume of Image.Location(v9);
            id v65 = v59;
            uint64_t v66 = (void *)MEMORY[0x24C522820](0xD000000000000020, 0x80000002462213D0);
            CGImageSetProperty();

            goto LABEL_65;
          }
        }
        outlined consume of Image.Location(v9);
      }
LABEL_65:
      uint64_t v48 = v59;
      double Width = (double)(uint64_t)CGImageGetWidth((CGImageRef)v48);
      int64_t Height = CGImageGetHeight((CGImageRef)v48);

      unsigned int v57 = 0;
      double v56 = (double)Height;
      goto LABEL_66;
    }

    goto LABEL_62;
  }
  if (!objc_msgSend(v22, sel_preservedVectorRepresentation)) {
    goto LABEL_53;
  }
  unsigned __int8 v24 = (void *)MEMORY[0x24C522820](*(void *)(v5 + 8), *(void *)(v5 + 16));
  double v25 = *(double *)(v5 + 24);
  uint64_t v26 = *(unsigned __int8 *)(v5 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 40));
  id v27 = objc_msgSend(v22, sel_appearance);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v29 = objc_msgSend(v12, sel_namedVectorImageWithName_scaleFactor_displayGamut_layoutDirection_appearanceName_locale_, v24, v26, v15, v27, isa, v25);

  if (!v29) {
    goto LABEL_53;
  }
  id v30 = objc_msgSend(v29, sel_appearance);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = 0;
  }
  id v35 = objc_msgSend(v22, sel_appearance);
  if (!v35)
  {
    if (!v34) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  uint64_t v36 = v35;
  uint64_t v86 = v32;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  if (!v34)
  {
    if (!v39) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if (!v39)
  {
LABEL_47:

    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  if (v86 == v37 && v34 == v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {

      goto LABEL_53;
    }
  }
LABEL_49:
  unint64_t v87 = v9;
  outlined copy of Image.Location(v9);
  id v41 = v29;
  objc_msgSend(v22, sel_size);
  VectorImageLayer.init(image:location:size:)(v41, &v87, (uint64_t)&v88, v42, v43);
  uint64_t v44 = v88;
  if (!v88)
  {

    goto LABEL_53;
  }
  uint64_t v46 = v90;
  uint64_t v45 = v91;
  uint64_t v47 = v89;
  uint64_t v48 = (void *)swift_allocObject();
  char v48[2] = v44;
  v48[3] = v47;
  v48[4] = v46;
  v48[5] = v45;
  swift_retain();
  outlined copy of Image.Location?(v47);
  swift_bridgeObjectRetain();
  objc_msgSend(v22, sel_size);
  double v50 = v49;
  double v52 = v51;
  objc_msgSend(v22, sel_scale);
  double v54 = v53;
  outlined consume of VectorImageLayer?(v44, v47);

  double Width = v50 * v54;
  double v56 = v52 * v54;
  unsigned int v57 = 3;
LABEL_66:
  id v68 = objc_msgSend(v22, sel_templateRenderingMode);
  char v69 = specialized Image.Orientation.init(exifValue:)((unint64_t)objc_msgSend(v22, sel_exifOrientation) & 0xF);
  if (v69 == 8) {
    LOBYTE(v70) = 0;
  }
  else {
    LOBYTE(v70) = v69;
  }
  id v71 = objc_msgSend(v22, sel_layoutDirection);
  if (objc_msgSend(v22, sel_isFlippable) && v71 && v71 != (id)v15) {
    unint64_t v70 = 0x607040502030001uLL >> (8 * v70);
  }
  outlined copy of GraphicsImage.Contents(v48, v57);
  objc_msgSend(v22, sel_scale);
  uint64_t v73 = v72;
  if (objc_msgSend(v22, sel_hasSliceInformation))
  {
    objc_msgSend(v22, sel_edgeInsets);
    uint64_t v75 = v74;
    uint64_t v77 = v76;
    uint64_t v79 = v78;
    uint64_t v81 = v80;
    id v82 = objc_msgSend(v22, sel_resizingMode);

    outlined consume of GraphicsImage.Contents(v48, v57);
    char v83 = v82 != 0;
  }
  else
  {

    outlined consume of GraphicsImage.Contents(v48, v57);
    char v83 = 2;
    uint64_t v75 = 0;
    uint64_t v77 = 0;
    uint64_t v79 = 0;
    uint64_t v81 = 0;
  }
  *(void *)a4 = v48;
  *(void *)(a4 + 8) = v57;
  *(void *)(a4 + 16) = v73;
  if (v68) {
    uint64_t v84 = 2 * (v68 != (id)1);
  }
  else {
    uint64_t v84 = 1;
  }
  *(void *)(a4 + 24) = v70;
  *(double *)(a4 + 32) = Width;
  *(double *)(a4 + 40) = v56;
  *(void *)(a4 + 48) = v84;
  *(void *)(a4 + 56) = v75;
  *(void *)(a4 + 64) = v77;
  *(void *)(a4 + 72) = v79;
  *(void *)(a4 + 80) = v81;
  *(unsigned char *)(a4 + 88) = v83;
}

void *specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, uint64_t a2, uint64_t (*a3)(unint64_t, unint64_t), uint64_t a4)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  char v6 = a1 & 1;
  uint64_t v7 = a2 + 32;
  id v41 = *(id *)(a2 + 32);
  int v42 = *(unsigned __int8 *)(a2 + 40);
  if (v41 == (id)8) {
    char v8 = *(unsigned char *)(a2 + 40);
  }
  else {
    char v8 = 1;
  }
  uint64_t v39 = *(void *)(a2 + 16);
  if ((a1 & 0x100) != 0)
  {
    if (v8)
    {
      type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
      uint64_t v9 = (char *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_2461C6AA0;
      v9[32] = v6;
      v9[33] = 1;
      v9[34] = v6;
      *(_WORD *)(v9 + 35) = 512;
      v9[37] = 1;
      uint64_t v10 = v9 + 38;
      id v11 = v9 + 39;
      goto LABEL_11;
    }
    uint64_t v9 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
  else
  {
    if (v8)
    {
      type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
      uint64_t v9 = (char *)swift_allocObject();
      *((_OWORD *)v9 + 1) = xmmword_2461BDD50;
      v9[32] = v6;
      v9[33] = 0;
      uint64_t v10 = v9 + 34;
      id v11 = v9 + 35;
LABEL_11:
      unsigned char *v10 = 2;
      *id v11 = 0;
      goto LABEL_14;
    }
    uint64_t v9 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
LABEL_14:
  uint64_t v13 = *((void *)v9 + 2);
  __int16 v40 = a1;
  if (v13)
  {
    uint64_t v38 = v7;
    int v14 = v9[32];
    unsigned __int8 v15 = v9[33];
    swift_bridgeObjectRetain();
    uint64_t v16 = v13 + 1;
    uint64_t v17 = 1;
LABEL_16:
    unint64_t v18 = 0xD00000000000001BLL;
    if (v15)
    {
      unint64_t v19 = 0x8000000246221260;
    }
    else
    {
      unint64_t v18 = 0x7261657070414955;
      unint64_t v19 = 0xEF796E4165636E61;
    }
    unint64_t v20 = 0xD00000000000001DLL;
    if (v15)
    {
      unint64_t v21 = 0x80000002462212C0;
    }
    else
    {
      unint64_t v20 = 0xD000000000000011;
      unint64_t v21 = 0x80000002462212E0;
    }
    unint64_t v22 = 0xD00000000000001CLL;
    if (v15)
    {
      unint64_t v23 = 0x8000000246221280;
    }
    else
    {
      unint64_t v22 = 0xD000000000000010;
      unint64_t v23 = 0x80000002462212A0;
    }
    if (v14)
    {
      unint64_t v20 = v22;
      unint64_t v21 = v23;
    }
    if (v14 == 2) {
      unint64_t v24 = v18;
    }
    else {
      unint64_t v24 = v20;
    }
    if (v14 == 2) {
      unint64_t v25 = v19;
    }
    else {
      unint64_t v25 = v21;
    }
    uint64_t v26 = (void *)a3(v24, v25);
    id v12 = v26;
    if (!v26)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      uint64_t v33 = v17;
      goto LABEL_48;
    }
    if (!v42)
    {
      swift_bridgeObjectRelease();
      if (objc_msgSend(v12, sel_idiom) != v41) {
        goto LABEL_42;
      }
      goto LABEL_45;
    }
    if (!v41) {
      goto LABEL_43;
    }
    id v27 = objc_msgSend(v26, sel_appearance);
    if (!v27)
    {

      swift_bridgeObjectRelease();
      id v12 = 0;
      uint64_t v33 = v17;
      goto LABEL_48;
    }
    uint64_t v28 = v27;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    if (v37 != v24 || v30 != v25)
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
LABEL_42:

        id v12 = 0;
        uint64_t v33 = v17;
        goto LABEL_48;
      }
LABEL_45:
      uint64_t v33 = v17;
      goto LABEL_48;
    }
    swift_bridgeObjectRelease_n();
    uint64_t v33 = v17;
LABEL_48:
    while (v16 != ++v33)
    {
      if (!v12)
      {
        uint64_t v34 = &v9[2 * v17 + 32];
        int v14 = *v34;
        unsigned __int8 v15 = v34[1];
        uint64_t v17 = v33;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v7 = v38;
    if (v12) {
      return v12;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v40 & 0x101, a2, v7, 1, (2 * v39) | 1, a3, a4);
  swift_bridgeObjectRelease();
  return (void *)v36;
}

id partial apply for closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(a1, a2, *(void **)(v2 + 16), *(double **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

id closure #1 in NamedImage.BitmapKey.loadBitmapInfo(location:idiom:subtype:)(uint64_t a1, uint64_t a2, void *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12 = (void *)MEMORY[0x24C522820](*((void *)a4 + 1), *((void *)a4 + 2));
  double v13 = a4[3];
  int v14 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  uint64_t v15 = *((unsigned __int8 *)a4 + v14[10]);
  uint64_t v16 = *((char *)a4 + v14[13]);
  uint64_t v17 = *((char *)a4 + v14[14]);
  unint64_t v18 = (void *)MEMORY[0x24C522820](a1, a2);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v20 = objc_msgSend(a3, sel_imageWithName_scaleFactor_deviceIdiom_deviceSubtype_displayGamut_layoutDirection_sizeClassHorizontal_sizeClassVertical_appearanceName_locale_, v12, a5, a6, v15, a7, v16, v13, v17, v18, isa);

  return v20;
}

uint64_t specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(unint64_t, unint64_t), uint64_t a7)
{
  if (a5 >> 1 == a4) {
    return 0;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v9 = v7;
  unint64_t v12 = a5;
  int64_t v56 = a5 >> 1;
  char v15 = result & 1;
  uint64_t v16 = a3 + 16 * a4;
  uint64_t v17 = *(void **)v16;
  int v18 = *(unsigned __int8 *)(v16 + 8);
  id v58 = v17;
  int v57 = v18;
  if (v17 != (void *)8) {
    LOBYTE(v18) = 1;
  }
  __int16 v54 = result;
  if ((result & 0x100) != 0)
  {
    if ((v18 & 1) == 0)
    {
      unint64_t v19 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
    unint64_t v19 = (char *)swift_allocObject();
    *((_OWORD *)v19 + 1) = xmmword_2461C6AA0;
    v19[32] = v15;
    v19[33] = 1;
    v19[34] = v15;
    *(_WORD *)(v19 + 35) = 512;
    v19[37] = 1;
    id v20 = v19 + 38;
    unint64_t v21 = v19 + 39;
  }
  else
  {
    if ((v18 & 1) == 0)
    {
      unint64_t v19 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
    unint64_t v19 = (char *)swift_allocObject();
    *((_OWORD *)v19 + 1) = xmmword_2461BDD50;
    v19[32] = v15;
    v19[33] = 0;
    id v20 = v19 + 34;
    unint64_t v21 = v19 + 35;
  }
  *id v20 = 2;
  *unint64_t v21 = 0;
LABEL_14:
  uint64_t v22 = *((void *)v19 + 2);
  uint64_t v59 = a7;
  if (!v22)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  unint64_t v52 = v12;
  id v61 = a6;
  uint64_t v53 = a2;
  int v23 = v19[32];
  unsigned __int8 v24 = v19[33];
  swift_bridgeObjectRetain();
  uint64_t v25 = v22 + 1;
  uint64_t v60 = 1;
  unint64_t v26 = 0x80000002462212A0;
  unint64_t v27 = 0x8000000246221280;
LABEL_16:
  unint64_t v28 = 0xD00000000000001BLL;
  if (v24)
  {
    unint64_t v29 = 0x8000000246221260;
  }
  else
  {
    unint64_t v28 = 0x7261657070414955;
    unint64_t v29 = 0xEF796E4165636E61;
  }
  unint64_t v30 = 0xD00000000000001DLL;
  if (v24)
  {
    unint64_t v31 = 0x80000002462212C0;
  }
  else
  {
    unint64_t v30 = 0xD000000000000011;
    unint64_t v31 = 0x80000002462212E0;
  }
  unint64_t v32 = 0xD00000000000001CLL;
  if (v24)
  {
    unint64_t v33 = v27;
  }
  else
  {
    unint64_t v32 = 0xD000000000000010;
    unint64_t v33 = v26;
  }
  if (v23)
  {
    unint64_t v30 = v32;
    unint64_t v31 = v33;
  }
  if (v23 == 2) {
    unint64_t v34 = v28;
  }
  else {
    unint64_t v34 = v30;
  }
  if (v23 == 2) {
    unint64_t v35 = v29;
  }
  else {
    unint64_t v35 = v31;
  }
  unint64_t v36 = v26;
  unint64_t v37 = v27;
  uint64_t v38 = (void *)v61(v34, v35);
  char v8 = v38;
  if (!v38) {
    goto LABEL_43;
  }
  if (!v57)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v8, sel_idiom) != v58)
    {

      char v8 = 0;
    }
    uint64_t v45 = v60;
    goto LABEL_48;
  }
  if (v58)
  {
    uint64_t v51 = v9;
    id v39 = objc_msgSend(v38, sel_appearance);
    if (v39)
    {
      __int16 v40 = v39;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      if (v50 == v34 && v42 == v35)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v9 = v51;
      }
      else
      {
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v51;
        if ((v44 & 1) == 0)
        {

          char v8 = 0;
        }
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      char v8 = 0;
    }
  }
  else
  {
LABEL_43:
    swift_bridgeObjectRelease();
  }
  uint64_t v45 = v60;
LABEL_48:
  unint64_t v26 = v36;
  unint64_t v27 = v37;
  uint64_t v46 = v45;
  while (v25 != ++v46)
  {
    if (!v8)
    {
      uint64_t v47 = &v19[2 * v45 + 32];
      int v23 = *v47;
      unsigned __int8 v24 = v47[1];
      uint64_t v60 = v46;
      goto LABEL_16;
    }
  }
  uint64_t result = swift_bridgeObjectRelease_n();
  unint64_t v12 = v52;
  a2 = v53;
  a6 = v61;
  if (v8) {
    return (uint64_t)v8;
  }
LABEL_57:
  if (__OFSUB__(v56, a4))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v48 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v56 < v48)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v48 >= a4)
  {
    swift_unknownObjectRetain();
    uint64_t v49 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v54 & 0x101, a2, a3, a4 + 1, v12, a6, v59);
    swift_unknownObjectRelease();
    return v49;
  }
LABEL_66:
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.cuiAssetIdiom.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *assignWithTake for Binding(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  char v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *char v6 = *(void *)v5;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

double ScrollAnchorStorage.initialOffset.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)v1;
  double v4 = v2[1];
  int v5 = *((unsigned __int8 *)v2 + 24);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v7)
    {
      uint64_t v8 = (long long *)(*(void *)(v3 + 56) + 16 * v6);
      return *(double *)v8;
    }
  }
  if (v5)
  {
    uint64_t v8 = &static UnitPoint.topLeading;
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    return *(double *)v8;
  }
  return v4;
}

uint64_t base witness table accessor for Equatable in Font.ModifierProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t PreferenceBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = v1;
  specialized static ViewGraph.current.getter();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RoundedRectangle._Inset()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v6 = type metadata accessor for AnimatablePair();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t OffsetShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  long long v14 = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v12 = v11;
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)&v14, AssociatedTypeWitness, v12, a2);
}

void type metadata accessor for AnimatablePair<CGFloat, CGFloat>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<CGFloat, CGFloat>);
    }
  }
}

void type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)
  {
    type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>();
    lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>);
    }
  }
}

void type metadata accessor for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, (unint64_t *)&lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>> and conformance AnimatableArray<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>> and conformance AnimatableArray<A>, (unint64_t *)&lazy cache variable for type metadata for AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>, lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>);
    }
  }
}

uint64_t _StrokedShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v18[-1] - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  uint64_t v11 = (void *)(v2 + *(int *)(a1 + 36));
  uint64_t v12 = v11[2];
  uint64_t v13 = v11[4];
  v18[0] = *v11;
  v18[1] = v12;
  v18[2] = v13;
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(0);
  uint64_t v15 = v14;
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)v18, AssociatedTypeWitness, v15, a2);
}

uint64_t AnimatablePair.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t static AnimatablePair.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for AnimatablePair();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t type metadata accessor for AnimatablePair()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatablePair<A, B>()
{
  return static AnimatablePair.== infix(_:_:)();
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    a4();
    unint64_t v6 = type metadata accessor for AnimatablePair();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(uint64_t a1)
{
}

double protocol witness for Animatable.animatableData.getter in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>)
  {
    lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>;
  if (!lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Pack.Fill.AnimatableData and conformance _ShapeStyle_Pack.Fill.AnimatableData);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>> and conformance AnimatableArray<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CombinedAnimationState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>.Entry(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableArray);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for AnimatableArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>);
}

double protocol witness for EventType.timestamp.getter in conformance MouseEvent@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance Capsule._Inset(unint64_t *a1@<X8>)
{
  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t static Color.orange.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for orange);
}

Swift::Double __swiftcall LayoutComputer.layoutPriority()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    (*(void (**)(void))(*(void *)v1 + 88))();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

void ScrollPositionToValue.hash(into:)()
{
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    double v2 = *(double *)v0;
    double v1 = *(double *)(v0 + 8);
    Hasher._combine(_:)(1u);
    UnitPoint.hash(into:)(v2, v1);
  }
}

void UnitPoint.hash(into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

uint64_t @objc closure #1 in closure #1 in closure #1 in ShapeType.initFromFilled(type:shape:)(uint64_t a1, int a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v5;
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  ShapeType.initFromStroked(type:shape:style:)(a2, a3, (uint64_t)v7);
  return outlined release of StrokeStyle((uint64_t)v7);
}

void ShapeType.initFromStroked(type:shape:style:)(int a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)(a3 + 24) + 16))
  {
    if (a1 == 3)
    {
      double v10 = *(double *)(a2 + 80);
      if (v10 != *(double *)(a2 + 88)) {
        return;
      }
      CGFloat v11 = *(double *)(a2 + 48);
      CGFloat v12 = *(double *)(a2 + 56);
      CGFloat v13 = *(double *)(a2 + 64);
      CGFloat v14 = *(double *)(a2 + 72);
      int v15 = *(_DWORD *)(a2 + 96);
      long long v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v16;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32)) {
        return;
      }
      BOOL v17 = v15 == 1;
      uint64_t v7 = (void *)(v3 + 56);
      uint64_t v8 = (unsigned char *)(v3 + 80);
      outlined consume of ShapeType(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(unsigned char *)(v3 + 80));
      double v18 = *(double *)a3;
      v33.origin.x = v11;
      v33.origin.y = v12;
      v33.size.width = v13;
      v33.size.height = v14;
      double Width = CGRectGetWidth(v33);
      v34.origin.x = v11;
      v34.origin.y = v12;
      v34.size.width = v13;
      v34.size.height = v14;
      double Height = CGRectGetHeight(v34);
      if (Height >= Width) {
        double Height = Width;
      }
      double v21 = Height * 0.5;
      if (v21 >= v10) {
        double v21 = v10;
      }
      if (v21 == 0.0) {
        double v22 = 0.0;
      }
      else {
        double v22 = v18 * 0.5 + v21;
      }
      v35.origin.x = v11;
      v35.origin.y = v12;
      v35.size.width = v13;
      v35.size.height = v14;
      *(CGRect *)uint64_t v3 = CGRectInset(v35, v18 * -0.5, v18 * -0.5);
      *(double *)(v3 + 32) = v22;
      *(void *)(v3 + 40) = v17;
      *(double *)(v3 + 48) = v18;
    }
    else if (a1 == 1)
    {
      CGFloat v23 = *(double *)(a2 + 48);
      CGFloat v24 = *(double *)(a2 + 56);
      CGFloat v25 = *(double *)(a2 + 64);
      CGFloat v26 = *(double *)(a2 + 72);
      v36.origin.x = v23;
      v36.origin.y = v24;
      v36.size.width = v25;
      v36.size.height = v26;
      double v27 = CGRectGetWidth(v36);
      v37.origin.x = v23;
      v37.origin.y = v24;
      v37.size.width = v25;
      v37.size.height = v26;
      if (v27 != CGRectGetHeight(v37)) {
        return;
      }
      long long v28 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v28;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32)) {
        return;
      }
      uint64_t v7 = (void *)(v3 + 56);
      uint64_t v8 = (unsigned char *)(v3 + 80);
      outlined consume of ShapeType(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(unsigned char *)(v3 + 80));
      double v29 = *(double *)a3;
      v38.origin.x = v23;
      v38.origin.y = v24;
      v38.size.width = v25;
      v38.size.height = v26;
      double v30 = CGRectGetWidth(v38) * 0.5;
      if (v30 == 0.0) {
        double v31 = 0.0;
      }
      else {
        double v31 = v29 * 0.5 + v30;
      }
      v39.origin.x = v23;
      v39.origin.y = v24;
      v39.size.width = v25;
      v39.size.height = v26;
      *(CGRect *)uint64_t v3 = CGRectInset(v39, v29 * -0.5, v29 * -0.5);
      *(double *)(v3 + 32) = v31;
      *(void *)(v3 + 40) = 0;
      *(double *)(v3 + 48) = v29;
    }
    else
    {
      if (a1) {
        return;
      }
      if (*(_DWORD *)(a3 + 12)) {
        return;
      }
      if (*(double *)(a3 + 16) <= 1.4142) {
        return;
      }
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v32.a = *(_OWORD *)a2;
      *(_OWORD *)&v32.c = v6;
      *(_OWORD *)&v32.tx = *(_OWORD *)(a2 + 32);
      if (!CGAffineTransformIsIdentity(&v32)) {
        return;
      }
      uint64_t v7 = (void *)(v3 + 56);
      uint64_t v8 = (unsigned char *)(v3 + 80);
      outlined consume of ShapeType(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(unsigned char *)(v3 + 80));
      double v9 = *(double *)a3;
      *(CGRect *)uint64_t v3 = CGRectInset(*(CGRect *)(a2 + 48), *(double *)a3 * -0.5, *(double *)a3 * -0.5);
      *(void *)(v3 + 32) = 0;
      *(void *)(v3 + 40) = 0;
      *(double *)(v3 + 48) = v9;
    }
    *uint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *uint64_t v8 = 1;
  }
}

uint64_t outlined release of StrokeStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t ViewTraitCollection.optionalTransition()()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  char v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0) {
    return 0;
  }
  uint64_t v3 = one-time initialization token for opacity;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_release();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v6))
  {
    swift_release();
    return 0;
  }
  return v5;
}

uint64_t closure #1 in static Canvas._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for Canvas();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t closure #2 in CanvasDisplayList.updateValue()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v9 = result;
    uint64_t v10 = *a1;
    int v11 = *(_DWORD *)(a2 + 24);
    type metadata accessor for CanvasDisplayList();
    type metadata accessor for SymbolRenderer();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 40) = MEMORY[0x263F8EE80];
    *(void *)(v12 + 16) = v10;
    *(_DWORD *)(v12 + 24) = v9;
    *(_DWORD *)(v12 + 28) = a3;
    *(_DWORD *)(v12 + 32) = v11;
    *a4 = v12;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #3 in CanvasDisplayList.updateValue()@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  type metadata accessor for CanvasDisplayList();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a1;
  *(double *)&v16[5] = a6;
  *(double *)&v16[6] = a7;
  char v17 = a2;
  uint64_t v14 = type metadata accessor for Canvas();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #3 in CanvasDisplayList.updateValue(), (uint64_t)v16, v14, MEMORY[0x263F8EE60] + 8, a5);
}

uint64_t type metadata accessor for CanvasDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CanvasDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v240 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v216 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (void (*)(char *, uint64_t))((char *)&v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  v206 = (char *)&v196 - v7;
  MEMORY[0x270FA5388](v8);
  v207 = (char *)&v196 - v9;
  _sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v205 = (uint64_t)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v215 = (char *)&v196 - v13;
  double v15 = *(double *)(a1 + 16);
  uint64_t v14 = *(uint64_t *)(a1 + 24);
  v208 = (void *)a1;
  double v222 = *(double *)&v14;
  uint64_t v225 = type metadata accessor for Canvas();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v224 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v18 = (char *)&v196 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  *(void *)&double v218 = (char *)&v196 - v20;
  MEMORY[0x270FA5388](v21);
  v217 = (char *)&v196 - v22;
  MEMORY[0x270FA5388](v23);
  v227 = (char *)&v196 - v24;
  LODWORD(v221) = *(_DWORD *)(v1 + 24);
  uint64_t v202 = *(void *)(v1 + 32);
  CGFloat v25 = *(double *)(v1 + 40);
  CGFloat v26 = *(double *)(v1 + 48);
  CGFloat v28 = *(double *)(v1 + 56);
  CGFloat v27 = *(double *)(v1 + 64);
  type metadata accessor for CGSize(0);
  Value = (double *)AGGraphGetValue();
  uint64_t v31 = v30;
  double v32 = *Value;
  CGFloat v223 = Value[1];
  CGRect v33 = (float64x2_t *)AGGraphGetValue();
  CGRect v35 = v34;
  float64x2_t v220 = *v33;
  uint64_t v36 = AGGraphGetValue();
  uint64_t v38 = *(void *)v36;
  uint64_t v214 = v3;
  if ((v35 & 1) == 0 && (v31 & 1) == 0 && (v37 & 1) == 0)
  {
    swift_retain();
LABEL_5:
    char v39 = AGGraphCurrentAttributeWasModified();
    goto LABEL_15;
  }
  CGFloat v219 = v27;
  double v211 = v28;
  CGFloat v212 = v26;
  CGFloat v213 = v25;
  CGPoint v237 = (CGPoint)0;
  long long v238 = 0u;
  long long v236 = 0u;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v233 = 0u;
  long long v232 = 0u;
  char v239 = 1;
  *(void *)v230 = v38;
  *(float64x2_t *)&v230[8] = v220;
  float64x2_t v231 = vsubq_f64(*(float64x2_t *)(v36 + 24), vsubq_f64(v220, *(float64x2_t *)(v36 + 8)));
  swift_retain();
  specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)v230, (uint64_t)&v232);
  CGFloat x = 0.0;
  if (v239)
  {
    CGFloat y = 0.0;
    double v42 = v32;
    CGFloat height = v223;
  }
  else
  {
    CGPoint v44 = v237;
    long long v45 = v238;
    CGPoint v241 = v237;
    uint64_t v46 = *((void *)&v238 + 1);
    CGFloat v210 = *(double *)&v238;
    CGFloat Width = CGRectGetWidth(*(CGRect *)(&v45 - 1));
    double v42 = v32;
    if (Width + Width <= v32
      || (v242.origin = v44,
          v242.size.width = v210,
          v242.size.CGFloat height = *((CGFloat *)&v45 + 1),
          CGFloat v48 = CGRectGetHeight(v242),
          CGFloat height = v223,
          CGFloat y = 0.0,
          v48 + v48 <= v223))
    {
      double v209 = floor(v44.x * 0.0078125) * 128.0;
      v243.origin = v44;
      CGFloat v49 = v210;
      v243.size.width = v210;
      v243.size.CGFloat height = *((CGFloat *)&v45 + 1);
      CGFloat v50 = CGRectGetWidth(v243) + 128.0;
      v244.origin = v44;
      v244.size.width = v49;
      v244.size.CGFloat height = *((CGFloat *)&v45 + 1);
      v254.size.CGFloat height = CGRectGetHeight(v244) + 128.0;
      v245.origin.CGFloat x = 0.0;
      v245.origin.CGFloat y = 0.0;
      v245.size.width = v32;
      v245.size.CGFloat height = v223;
      v254.origin.CGFloat x = v209;
      v254.origin.CGFloat y = floor(v44.y * 0.0078125) * 128.0;
      v254.size.width = v50;
      CGRect v246 = CGRectIntersection(v245, v254);
      CGFloat x = v246.origin.x;
      CGFloat y = v246.origin.y;
      double v32 = v246.size.width;
      CGFloat height = v246.size.height;
    }
  }
  v247.origin.CGFloat x = x;
  v247.origin.CGFloat y = y;
  v247.size.width = v32;
  v247.size.CGFloat height = height;
  CGFloat v25 = v213;
  v255.origin.CGFloat x = v213;
  CGFloat v26 = v212;
  v255.origin.CGFloat y = v212;
  CGFloat v28 = v211;
  v255.size.width = v211;
  v255.size.CGFloat height = v219;
  if (CGRectEqualToRect(v247, v255))
  {
    double v32 = v42;
    CGFloat v27 = v219;
    if ((v31 & 1) == 0) {
      goto LABEL_5;
    }
    char v39 = 1;
  }
  else
  {
    *(CGFloat *)(v1 + 40) = x;
    *(CGFloat *)(v1 + 48) = y;
    char v39 = 1;
    CGFloat v25 = x;
    CGFloat v26 = y;
    CGFloat v28 = v32;
    CGFloat v27 = height;
    *(double *)(v1 + 56) = v32;
    *(CGFloat *)(v1 + 64) = height;
    double v32 = v42;
  }
LABEL_15:
  char v229 = v39;
  v248.origin.CGFloat x = v25;
  v248.origin.CGFloat y = v26;
  v248.size.width = v28;
  v248.size.CGFloat height = v27;
  if (CGRectIsEmpty(v248))
  {
    *(void *)&long long v232 = MEMORY[0x263F8EE78];
    WORD4(v232) = 0;
    BYTE10(v232) = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  id v197 = v35;
  uint64_t v199 = v31;
  double v209 = v15;
  v201 = v5;
  uint64_t v226 = v1;
  v200 = v18;
  uint64_t v204 = v38;
  uint64_t v51 = TupleTypeMetadata2;
  uint64_t v52 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v53 = v225;
  uint64_t v54 = AGGraphGetValue();
  char v56 = v55;
  CGFloat v213 = *(double *)(v53 - 8);
  *(void *)&double v57 = *(void *)&v213 + 16;
  id v58 = *(void (**)(void))(*(void *)&v213 + 16);
  uint64_t v59 = v227;
  ((void (*)(char *, uint64_t, uint64_t))v58)(v227, v54, v53);
  *(void *)&double v60 = v56 & 1;
  v59[v52] = LOBYTE(v60);
  id v61 = (double *)AGGraphGetValue();
  double v196 = v62;
  char v63 = v39;
  double v65 = *v61;
  uint64_t v64 = *((void *)v61 + 1);
  uint64_t v198 = ++static DisplayList.Version.lastValue;
  uint64_t v66 = *(int *)(v51 + 48);
  uint64_t v67 = v217;
  CGFloat v212 = v57;
  double v211 = *(double *)&v58;
  v58();
  v67[v66] = LOBYTE(v60);
  uint64_t v221 = v51;
  CGFloat v219 = v65;
  uint64_t v203 = v64;
  CGFloat v210 = v60;
  if ((v63 & 1) == 0)
  {
    uint64_t v73 = (uint64_t)v201;
    if (v60 == 0.0)
    {
      uint64_t v70 = v221;
      uint64_t v71 = v226;
      uint64_t v72 = v214;
      if ((LOBYTE(v196) & 1) == 0)
      {
        id v68 = *(uint64_t (**)(char *, uint64_t))(v224 + 8);
        swift_retain();
        swift_retain();
        uint64_t v69 = v68(v217, v70);
        goto LABEL_24;
      }
      swift_retain();
      swift_retain();
      uint64_t v193 = swift_retain_n();
      char v194 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v193);
      swift_release();
      swift_release();
      id v68 = *(uint64_t (**)(char *, uint64_t))(v224 + 8);
      uint64_t v69 = v68(v217, v70);
      if ((v194 & 1) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      id v68 = *(uint64_t (**)(char *, uint64_t))(v224 + 8);
      swift_retain();
      swift_retain();
      uint64_t v70 = v221;
      uint64_t v69 = v68(v67, v221);
      uint64_t v71 = v226;
      uint64_t v72 = v214;
    }
    char v229 = 1;
    goto LABEL_24;
  }
  id v68 = *(uint64_t (**)(char *, uint64_t))(v224 + 8);
  swift_retain();
  swift_retain();
  uint64_t v69 = v68(v67, v51);
  uint64_t v70 = v51;
  uint64_t v71 = v226;
  uint64_t v72 = v214;
  uint64_t v73 = (uint64_t)v201;
LABEL_24:
  char v74 = v229;
  if ((v229 & 1) != 0 || *(ValueMetadata **)&v209 == &type metadata for EmptyView)
  {
    v217 = 0;
  }
  else
  {
    *(_OWORD *)v230 = *(_OWORD *)(v71 + 4);
    *(void *)&v230[16] = *(void *)(v71 + 20);
    MEMORY[0x270FA5388](v69);
    uint64_t v75 = *(void *)&v222;
    *((void *)&v196 - 4) = v76;
    *((void *)&v196 - 3) = v75;
    *((void *)&v196 - 2) = 6;
    *((void *)&v196 - 1) = &v229;
    *(void *)&long long v232 = type metadata accessor for Attribute();
    uint64_t v77 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F28898];
    _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(255, &lazy cache variable for type metadata for Attribute<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x263F28898]);
    *((void *)&v232 + 1) = v78;
    *(void *)&long long v233 = v78;
    _sSay7SwiftUI13ViewResponderCGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x263F28898]);
    *((void *)&v233 + 1) = v79;
    _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTransform>, (uint64_t)&type metadata for ViewTransform, v77);
    *(void *)&long long v234 = v80;
    _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(255, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, v77);
    *((void *)&v234 + 1) = v81;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v230, (uint64_t)partial apply for closure #1 in CanvasDisplayList.updateValue(), (uint64_t)(&v196 - 6), TupleTypeMetadata, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v83);
    v217 = 0;
    char v74 = v229;
  }
  double v85 = *(double *)(v71 + 56);
  double v84 = *(double *)(v71 + 64);
  uint64_t v86 = AGGraphGetValue();
  double v88 = *(double *)v86;
  double v89 = *(double *)(v86 + 8);
  if ((v74 & 1) == 0)
  {
    int v90 = v87;
    uint64_t OutputValue = AGGraphGetOutputValue();
    if (OutputValue)
    {
      if (((v197 | v90) & 1) == 0
        || (uint64_t v92 = *(void *)OutputValue, !*(void *)(*(void *)OutputValue + 16)))
      {
        swift_release();
        swift_release();
        v68(v227, v70);
        return swift_release();
      }
      double v85 = *(double *)(v92 + 48);
      double v84 = *(double *)(v92 + 56);
      unint64_t v94 = *(void *)(v92 + 72);
      unint64_t v93 = *(void *)(v92 + 80);
      uint64_t v95 = *(void *)(v92 + 88);
      int v96 = *(unsigned __int16 *)(v92 + 96) | (*(unsigned __int8 *)(v92 + 98) << 16);
      double v196 = v88;
      if (v93 >> 62)
      {
        outlined copy of DisplayList.Item.Value(v94, v93);
        double v98 = 0.0;
        double v99 = 0.0;
        uint64_t v97 = v198;
      }
      else
      {
        uint64_t v97 = v198;
        if (v94 >> 60 == 10)
        {
          double v99 = *(double *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          double v98 = *(double *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          outlined copy of DisplayList.Item.Value(v94, v93);
        }
        else
        {
          outlined copy of DisplayList.Item.Value(v94, v93);
          double v98 = 0.0;
          double v99 = 0.0;
        }
      }
      goto LABEL_75;
    }
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  uint64_t v100 = *(int *)(v70 + 48);
  double v101 = v218;
  uint64_t v102 = v225;
  (*(void (**)(void, char *, uint64_t))&v211)(*(void *)&v218, v227, v225);
  *(unsigned char *)(*(void *)&v101 + v100) = LOBYTE(v210);
  uint64_t v103 = *(void *)&v101 + *(int *)(v102 + 40);
  LOBYTE(v100) = *(unsigned char *)v103;
  int v104 = *(_DWORD *)(v103 + 4);
  char v105 = *(unsigned char *)(v103 + 8);
  int v106 = *(_DWORD *)(v103 + 12);
  char v107 = *(unsigned char *)(v103 + 16);
  *(void *)&double v108 = *(void *)&v213 + 8;
  v201 = *(void (**)(char *, uint64_t))(*(void *)&v213 + 8);
  v201(*(char **)&v101, v102);
  LOBYTE(v232) = v100;
  DWORD1(v232) = v104;
  BYTE8(v232) = v105;
  HIDWORD(v232) = v106;
  LOBYTE(v233) = v107;
  uint64_t v109 = RasterizationOptions.colorSpace.getter();
  uint64_t v202 = *(void *)(v226 + 32);
  CGFloat v110 = v219;
  double v196 = v88;
  uint64_t v111 = v109;
  if (v219 == 0.0) {
    uint64_t v112 = 0;
  }
  else {
    uint64_t v112 = *(void *)(*(void *)&v219 + 64);
  }
  uint64_t v113 = v202;
  uint64_t v114 = *(void *)(v202 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v114 + 16));
  *(void *)(v114 + 24) = v112;
  os_unfair_lock_unlock((os_unfair_lock_t)(v114 + 16));
  swift_release();
  swift_release();
  swift_release();
  id v115 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  uint64_t v116 = *(int *)(v221 + 48);
  CGFloat v117 = v110;
  double v118 = v218;
  uint64_t v119 = v225;
  (*(void (**)(void, char *, uint64_t))&v211)(*(void *)&v218, v227, v225);
  *(unsigned char *)(*(void *)&v118 + v116) = LOBYTE(v210);
  LOBYTE(v116) = *(unsigned char *)(*(void *)&v118 + *(int *)(v119 + 44));
  CGFloat v213 = v108;
  v201(*(char **)&v118, v119);
  objc_msgSend(v115, sel_setProfile_, (v116 & 1) == 0);
  objc_msgSend(v115, sel_setDefaultColorSpace_, v111);
  uint64_t v120 = v226;
  double v121 = *(double *)(v226 + 56);
  double v122 = *(double *)(v226 + 64);
  objc_msgSend(v115, sel_setContentRect_, 0.0, 0.0, v121, v122);
  swift_retain_n();
  uint64_t v123 = swift_retain_n();
  double v124 = specialized PropertyList.Tracker.value<A>(_:for:)(v123);
  swift_release_n();
  swift_release_n();
  objc_msgSend(v115, sel_setDeviceScale_, v124);
  double v125 = *(double *)(v120 + 40);
  double v126 = *(double *)(v120 + 48);
  objc_msgSend(v115, sel_translateByX_Y_, -v125, -v126);
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v127 = swift_allocObject();
  *(_OWORD *)(v127 + 32) = xmmword_24619B520;
  *(void *)(v127 + 48) = 1065353216;
  *(void *)(v127 + 56) = 0x7FF8000000000000;
  *(CGFloat *)&long long v232 = v117;
  *((void *)&v232 + 1) = v113;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v128 = v115;
  swift_retain();
  swift_retain();
  id v129 = v128;
  *(void *)(v127 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v129, (uint64_t *)&v232);
  *(void *)(v127 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v127 + 64) = 0;
  id v197 = v129;

  uint64_t v228 = v127;
  double v130 = *(double *)(v120 + 32);
  char v131 = *(unsigned char *)(v120 + 72);
  long long v132 = *(_OWORD *)(v120 + 16);
  long long v232 = *(_OWORD *)v120;
  long long v233 = v132;
  double v218 = v130;
  *(double *)&long long v234 = v130;
  *((double *)&v234 + 1) = v125;
  *(double *)&long long v235 = v126;
  *((double *)&v235 + 1) = v121;
  *(double *)&long long v236 = v122;
  BYTE8(v236) = v131;
  uint64_t v133 = CanvasDisplayList.symbols.getter();
  if (v133)
  {
    *(void *)&long long v232 = v133;
    uint64_t v134 = v217;
    closure #2 in CanvasDisplayList.updateValue()((uint64_t *)&v232, v120, v111, (uint64_t *)v230);
    v217 = v134;
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v135 = *(void *)v230;
  }
  else
  {
    swift_retain();
    uint64_t v135 = 0;
  }
  uint64_t v136 = v216;
  uint64_t v137 = (uint64_t)v215;
  uint64_t v138 = *(void *)(v127 + 16);
  uint64_t v139 = *(void *)(v138 + 24);
  *(void *)(v138 + 24) = v135;
  swift_release();
  swift_release();
  Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v139 = CurrentAttribute;
    uint64_t v141 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v141 == -1) {
      goto LABEL_43;
    }
  }
  swift_once();
LABEL_43:
  char v142 = v199 & 1;
  swift_beginAccess();
  v208 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56))(v137, 1, 1, v72);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v144 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v137;
  char v145 = v142;
  v146 = v217;
  closure #3 in CanvasDisplayList.updateValue()((uint64_t)&v228, v145, *(uint64_t *)&v209, *(uint64_t *)&v222, (uint64_t)&v237.y, v32, v223);
  *(void *)(StatusReg + 848) = v144;
  if (!v146)
  {
    uint64_t v147 = v205;
    outlined init with copy of ObservationTracking._AccessList?(v137, v205);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v147, 1, v72) == 1)
    {
      outlined destroy of ObservationTracking._AccessList?(v147);
    }
    else
    {
      v148 = *(void (**)(char *, uint64_t, uint64_t))(v136 + 32);
      v149 = v207;
      v148(v207, v147, v72);
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v206, v149, v72);
      swift_beginAccess();
      v150 = (char *)static ObservationRegistrar.lastestAccessLists;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      static ObservationRegistrar.lastestAccessLists = v150;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v150 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v150 + 2) + 1, 1, (unint64_t)v150);
        static ObservationRegistrar.lastestAccessLists = v150;
      }
      unint64_t v153 = *((void *)v150 + 2);
      unint64_t v152 = *((void *)v150 + 3);
      if (v153 >= v152 >> 1)
      {
        v150 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v152 > 1, v153 + 1, 1, (unint64_t)v150);
        static ObservationRegistrar.lastestAccessLists = v150;
      }
      *((void *)v150 + 2) = v153 + 1;
      uint64_t v154 = v216;
      v148(&v150[((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(void *)(v216 + 72) * v153], (uint64_t)v206, v72);
      uint64_t v136 = v154;
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v154 + 8))(v207, v72);
      uint64_t v137 = (uint64_t)v215;
    }
    uint64_t v155 = v226;
    outlined destroy of ObservationTracking._AccessList?(v137);
    uint64_t v156 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
    if (v156)
    {
      v157 = *(void (**)(uint64_t, char *, uint64_t))(v136 + 16);
      v158 = (char *)static ObservationRegistrar.lastestAccessLists
           + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
      uint64_t v159 = *(void *)(v136 + 72);
      v160 = (void (**)(uint64_t, uint64_t))(v136 + 8);
      swift_bridgeObjectRetain();
      do
      {
        v157(v73, v158, v72);
        specialized installObservationSlow<A>(accessList:attribute:)(v73, v139);
        (*v160)(v73, v72);
        v158 += v159;
        --v156;
      }
      while (v156);
      swift_bridgeObjectRelease();
      uint64_t v161 = v221;
      uint64_t v155 = v226;
    }
    else
    {
      uint64_t v161 = v221;
    }
    static ObservationRegistrar.lastestAccessLists = v208;
    swift_release();
    swift_bridgeObjectRelease();
    double v98 = 0.0;
    if (*(unsigned char *)(v155 + 72))
    {
      double v99 = 0.0;
      v162 = v200;
      id v163 = v197;
    }
    else
    {
      id v163 = v197;
      objc_msgSend(v197, sel_boundingRect);
      CGFloat v164 = v249.origin.x;
      CGFloat v165 = v249.origin.y;
      CGFloat v166 = v249.size.width;
      CGFloat v167 = v249.size.height;
      IsEmptCGFloat y = CGRectIsEmpty(v249);
      v162 = v200;
      if (IsEmpty)
      {
        *(void *)&long long v232 = MEMORY[0x263F8EE78];
        WORD4(v232) = 0;
        BYTE10(v232) = 0;
        AGGraphSetOutputValue();
        swift_release();
        swift_release_n();

        swift_release();
        (*(void (**)(char *, uint64_t))(v224 + 8))(v227, v161);
        swift_release();
        return swift_release();
      }
      v250.origin.CGFloat x = v164;
      v250.origin.CGFloat y = v165;
      v250.size.width = v166;
      v250.size.CGFloat height = v167;
      CGFloat MinX = CGRectGetMinX(v250);
      CGFloat v223 = v89;
      double v222 = v85;
      double v218 = floor(MinX * 0.0625) * 16.0;
      v251.origin.CGFloat x = v164;
      v251.origin.CGFloat y = v165;
      v251.size.width = v166;
      v251.size.CGFloat height = v167;
      double v170 = v84;
      double v171 = floor(CGRectGetMinY(v251) * 0.0625) * 16.0;
      v252.origin.CGFloat x = v164;
      v252.origin.CGFloat y = v165;
      v252.size.width = v166;
      v252.size.CGFloat height = v167;
      double v172 = ceil(CGRectGetMaxX(v252) * 0.0625) * 16.0;
      v253.origin.CGFloat x = v164;
      v253.origin.CGFloat y = v165;
      v253.size.width = v166;
      v253.size.CGFloat height = v167;
      CGFloat MaxY = CGRectGetMaxY(v253);
      double v89 = v223;
      double v174 = ceil(MaxY * 0.0625) * 16.0;
      if (v218 < 0.0) {
        double v99 = 0.0;
      }
      else {
        double v99 = v218;
      }
      if (v171 < 0.0) {
        double v98 = 0.0;
      }
      else {
        double v98 = v171;
      }
      double v175 = v222;
      if (v172 < v222) {
        double v175 = v172;
      }
      double v85 = v175 - v99;
      if (v174 >= v170) {
        double v174 = v170;
      }
      double v84 = v174 - v98;
    }
    uint64_t v176 = swift_allocObject();
    id v177 = objc_msgSend(v163, sel_moveContents);
    swift_release();
    swift_release();

    *(void *)(v176 + 16) = v177;
    *(double *)(v176 + 24) = v99;
    *(double *)(v176 + 32) = v98;
    uint64_t v178 = *(int *)(v161 + 48);
    uint64_t v179 = v225;
    (*(void (**)(char *, char *, uint64_t))&v211)(v162, v227, v225);
    v162[v178] = LOBYTE(v210);
    v180 = &v162[*(int *)(v179 + 40)];
    LOBYTE(v178) = *v180;
    v181 = v162;
    int v182 = *((_DWORD *)v180 + 1);
    char v183 = v180[8];
    int v184 = *((_DWORD *)v180 + 3);
    char v185 = v180[16];
    v201(v181, v179);
    *(unsigned char *)(v176 + 40) = v178;
    *(_DWORD *)(v176 + 44) = v182;
    *(unsigned char *)(v176 + 48) = v183;
    *(_DWORD *)(v176 + 52) = v184;
    *(unsigned char *)(v176 + 56) = v185;
    uint64_t v97 = v198;
    if (v198) {
      unint64_t v93 = (2 * (((33 * WORD1(v198)) ^ v198) & 0x7FFFLL)) | 1;
    }
    else {
      unint64_t v93 = 0;
    }
    unint64_t v94 = v176 | 0xA000000000000000;
    swift_release();
    uint64_t v95 = 0;
    int v96 = 0;
LABEL_75:
    int v186 = *(_DWORD *)v226;
    if (v93 >> 62 != 3 || (v96 & 0xFFFFFF) != 0 || v93 != 0xC000000000000000 || v95 | v94)
    {
      double v190 = v99 + v220.f64[0] - v196 + *(double *)(v226 + 40);
      double v191 = v98 + v220.f64[1] - v89 + *(double *)(v226 + 48);
      _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v189 = swift_allocObject();
      *(_OWORD *)(v189 + 16) = xmmword_2461B9DC0;
      *(double *)(v189 + 32) = v190;
      *(double *)(v189 + 40) = v191;
      *(double *)(v189 + 48) = v85;
      *(double *)(v189 + 56) = v84;
      *(void *)(v189 + 64) = v97;
      *(void *)(v189 + 72) = v94;
      *(void *)(v189 + 80) = v93;
      *(void *)(v189 + 88) = v95;
      *(unsigned char *)(v189 + 98) = BYTE2(v96);
      *(_WORD *)(v189 + 96) = v96;
      *(_DWORD *)(v189 + 100) = v186;
      *(double *)&long long v232 = v190;
      *((double *)&v232 + 1) = v191;
      *(double *)&long long v233 = v85;
      *((double *)&v233 + 1) = v84;
      *(void *)&long long v234 = v97;
      *((void *)&v234 + 1) = v94;
      *(void *)&long long v235 = v93;
      *((void *)&v235 + 1) = v95;
      BYTE2(v236) = BYTE2(v96);
      LOWORD(v236) = v96;
      DWORD1(v236) = v186;
      outlined copy of DisplayList.Item.Value(v94, v93);
      DisplayList.Item.features.getter((__int16 *)&v228);
      uint64_t v192 = v97;
      __int16 v188 = v228;
      *(double *)&long long v232 = v190;
      *((double *)&v232 + 1) = v191;
      *(double *)&long long v233 = v85;
      *((double *)&v233 + 1) = v84;
      *(void *)&long long v234 = v192;
      *((void *)&v234 + 1) = v94;
      *(void *)&long long v235 = v93;
      *((void *)&v235 + 1) = v95;
      BYTE2(v236) = BYTE2(v96);
      LOWORD(v236) = v96;
      DWORD1(v236) = v186;
      DisplayList.Item.properties.getter(&v228);
      char v187 = v228;
    }
    else
    {
      outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
      char v187 = 0;
      __int16 v188 = 0;
      uint64_t v189 = MEMORY[0x263F8EE78];
    }
    *(void *)&long long v232 = v189;
    WORD4(v232) = v188;
    BYTE10(v232) = v187;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    outlined consume of DisplayList.Item.Value(v94, v93);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v224 + 8))(v227, v221);
    return swift_release();
  }
  uint64_t result = outlined destroy of ObservationTracking._AccessList?(v137);
  __break(1u);
  return result;
}

uint64_t Canvas.init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)@<X0>(char a1@<W0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  char v13 = *a2;
  uint64_t v14 = (int *)type metadata accessor for Canvas();
  uint64_t v15 = a7 + v14[10];
  *(unsigned char *)uint64_t v15 = 0;
  *(_DWORD *)(v15 + 4) = 0;
  *(unsigned char *)(v15 + 8) = 1;
  *(_DWORD *)(v15 + 12) = 160;
  *(unsigned char *)(v15 + 16) = 3;
  *(unsigned char *)(a7 + v14[11]) = 0;
  *(unsigned char *)uint64_t v15 = v13;
  if (a1) {
    int v16 = 167;
  }
  else {
    int v16 = 165;
  }
  if (a1) {
    int v17 = 163;
  }
  else {
    int v17 = 161;
  }
  if ((a3 & 1) == 0) {
    int v16 = v17;
  }
  *(_DWORD *)(v15 + 12) = v16;
  uint64_t result = a6();
  uint64_t v19 = (void *)(a7 + v14[9]);
  *uint64_t v19 = a4;
  v19[1] = a5;
  return result;
}

uint64_t type metadata accessor for Canvas()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RasterizationOptions.colorSpace.getter()
{
  if ((*(unsigned char *)(v0 + 8) & 1) == 0) {
    return MEMORY[0x270F5AAA8](*(unsigned int *)(v0 + 4));
  }
  int v1 = *(_DWORD *)(v0 + 12);
  unsigned int v2 = (v1 << 25 >> 31) & 9;
  if ((v1 & 0x40) != 0) {
    int v3 = 10;
  }
  else {
    int v3 = 1;
  }
  if ((v1 & 0x40) != 0) {
    unsigned int v4 = 10;
  }
  else {
    unsigned int v4 = 2;
  }
  if (*(unsigned char *)v0 == 1) {
    unsigned int v4 = v3;
  }
  if (*(unsigned char *)v0) {
    return MEMORY[0x270F5AAA8](v4);
  }
  else {
    return MEMORY[0x270F5AAA8](v2);
  }
}

uint64_t CanvasDisplayList.symbols.getter()
{
  if (*(_DWORD *)(v0 + 28) == *MEMORY[0x263F288F8]) {
    return 0;
  }
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, MEMORY[0x263F8D488]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for SymbolRenderer()
{
  return self;
}

double EnvironmentValues.defaultBaselineOffset.getter(double (*a1)(uint64_t), double (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    double v5 = a2(v7, &v9);
  }
  swift_release_n();
  return v5;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayScaleKey>>);
    }
  }
}

uint64_t EnvironmentValues.displayScale.setter(void (*a1)(uint64_t *, uint64_t *, double), void (*a2)(uint64_t, uint64_t), double a3)
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a1(v3, &v10, a3);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a2(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t GraphicsContext.resolveSymbol<A>(id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 24);
  if (v5)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80);
    swift_retain();
    v9(v8, a3, a4);
    return swift_release();
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return result;
}

uint64_t SymbolRenderer.symbol<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v67 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v14);
  int v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a1;
  uint64_t v69 = a3;
  _convertToAnyHashable<A>(_:)();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v5 + 40);
  if (*(void *)(v17 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v73);
    if (v19)
    {
      uint64_t v20 = (uint64_t *)(*(void *)(v17 + 56) + 24 * v18);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = v20[2];
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of AnyHashable((uint64_t)v73);
      if (v21) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v21) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 0;
      }
      *a4 = v21;
      a4[1] = v25;
      a4[2] = v26;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v66 = v16;
  char v63 = (uint64_t *)(v5 + 40);
  uint64_t v64 = a4;
  uint64_t result = outlined destroy of AnyHashable((uint64_t)v73);
  uint64_t v62 = v5;
  uint64_t v27 = *(void *)(v5 + 16);
  uint64_t v70 = *(void *)(v27 + 16);
  if (!v70)
  {
LABEL_19:
    _convertToAnyHashable<A>(_:)();
    CGRect v35 = v63;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = *v35;
    *CGRect v35 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, 0, 0, (uint64_t)v73, isUniquelyReferenced_nonNull_native);
    *CGRect v35 = v71;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v73);
    uint64_t result = swift_endAccess();
    char v37 = v64;
    *uint64_t v64 = 0;
    v37[1] = 0;
    v37[2] = 0;
    return result;
  }
  uint64_t v28 = v10;
  unint64_t v29 = 0;
  uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  double v65 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  double v32 = (uint64_t (**)(char *, uint64_t))(v28 + 8);
  CGRect v33 = (__n128 **)(v27 + 72);
  while (1)
  {
    if (v29 >= *(void *)(v27 + 16))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v73[0] = (uint64_t)*(v33 - 2);
    ViewTraitCollection.tagValue<A>(for:)(a2, (uint64_t)v12);
    if ((*v30)(v12, 1, a2) != 1) {
      break;
    }
    uint64_t result = (*v32)(v12, v67);
LABEL_14:
    ++v29;
    v33 += 6;
    if (v70 == v29) {
      goto LABEL_19;
    }
  }
  CGRect v34 = v66;
  (*v31)(v66, v12, a2);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    uint64_t result = (*v65)(v34, a2);
    goto LABEL_14;
  }
  if (v29 >= *(void *)(v27 + 16)) {
    goto LABEL_28;
  }
  uint64_t v38 = v62;
  InputValue = (uint64_t *)AGGraphGetInputValue();
  uint64_t v40 = *InputValue;
  uint64_t v41 = InputValue[1];
  id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  uint64_t result = (uint64_t)objc_msgSend(v42, sel_setDefaultColorSpace_, *(unsigned int *)(v38 + 28));
  if (v29 >= *(void *)(v27 + 16))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (*((_DWORD *)v33 - 1) == *MEMORY[0x263F288F8])
  {
LABEL_25:
    id v52 = v42;
    _convertToAnyHashable<A>(_:)();
    uint64_t v53 = v63;
    swift_beginAccess();
    id v54 = v52;
    char v55 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = *v53;
    *uint64_t v53 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v52, v40, v41, (uint64_t)v73, v55);
    *uint64_t v53 = v71;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v73);
    swift_endAccess();

    uint64_t result = (*v65)(v66, a2);
    char v56 = v64;
    *uint64_t v64 = v52;
    v56[1] = v40;
    v56[2] = v41;
    return result;
  }
  uint64_t v61 = v41;
  uint64_t v60 = v40;
  uint64_t v70 = v27;
  uint64_t v43 = AGGraphGetInputValue();
  uint64_t v44 = *(void *)v43;
  int v59 = *(unsigned __int16 *)(v43 + 8);
  int v58 = *(unsigned __int8 *)(v43 + 10);
  long long v45 = (uint64_t *)AGGraphGetInputValue();
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 32) = xmmword_24619B520;
  *(void *)(v48 + 48) = 1065353216;
  *(void *)(v48 + 56) = 0x7FF8000000000000;
  v73[0] = v47;
  v73[1] = v46;
  type metadata accessor for GraphicsContext.Storage.Shared();
  uint64_t v67 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  id v49 = v42;
  swift_retain();
  *(void *)(v48 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v49, v73);
  uint64_t result = RBDisplayListGetState();
  *(void *)(v48 + 24) = result;
  *(unsigned char *)(v48 + 64) = 0;
  v73[0] = v48;
  if (v29 < *(void *)(v70 + 16))
  {
    CGFloat v50 = *v33;
    v72[0] = 0;
    int v51 = v59 | (v58 << 16);
    swift_bridgeObjectRetain();
    swift_retain();
    specialized DisplayList.GraphicsRenderer.render(at:do:)(v72, v50, (uint64_t)v50, v44, v51, (unint64_t *)v73);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v40 = v60;
    uint64_t v41 = v61;
    goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for GraphicsContext.Storage.Shared()
{
  return self;
}

uint64_t GraphicsContext.Storage.Shared.init(list:environment:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638B8]), sel_init);
  *(void *)(v2 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63890]), sel_init);
  *(void *)(v2 + 72) = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v7);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v7, v2 + 80, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  *(unsigned char *)(v2 + 240) = 2;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 248) = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = v5;
  *(_DWORD *)(v2 + 64) = objc_msgSend(a1, sel_defaultColorSpace);
  return v2;
}

double _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 0x7FFFF00FCFE00;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollAnchors : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v4, v1, v2, v3);

  return swift_bridgeObjectRelease();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = a4 & 1;
  uint64_t v9 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v4, a1, a2, a3, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL static ScrollAnchorStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  double v5 = *(double *)(a2 + 8);
  double v6 = *(double *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  if ((specialized static Dictionary<>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  if ((v4 & 1) == 0) {
    return (v7 & 1) == 0 && v2 == v5 && v3 == v6;
  }
  return (v7 & 1) != 0;
}

double key path getter for EnvironmentValues.scrollAnchors : EnvironmentValues@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v7);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v7);
  }
  swift_release_n();
  char v5 = v9;
  *(void *)a2 = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 24) = v5;
  return result;
}

uint64_t EnvironmentValues.scrollAnchors.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3, v2, v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v7 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  uint64_t v13 = specialized find1<A>(_:key:filter:)(v10, v21);
  if (!v13) {
    goto LABEL_11;
  }
  double v14 = *(double *)(v13 + 80);
  double v15 = *(double *)(v13 + 88);
  int v16 = *(unsigned __int8 *)(v13 + 96);
  uint64_t result = specialized static Dictionary<>.== infix(_:_:)(a2, *(void *)(v13 + 72));
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
  if (a5)
  {
    if (v16) {
      return result;
    }
LABEL_11:
    uint64_t v19 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 72) = a2;
    *(double *)(v20 + 80) = *(double *)&a3;
    *(double *)(v20 + 88) = *(double *)&a4;
    *(unsigned char *)(v20 + 96) = a5 & 1;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v19);
    return swift_release();
  }
  if (v16) {
    goto LABEL_11;
  }
  if (v14 != *(double *)&a3 || v15 != *(double *)&a4) {
    goto LABEL_11;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollAnchorStorage(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  double v5 = *(double *)(a2 + 8);
  double v6 = *(double *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  if ((specialized static Dictionary<>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  if ((v4 & 1) == 0) {
    return (v7 & 1) == 0 && v2 == v5 && v3 == v6;
  }
  return v7 != 0;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    float64x2_t v17 = *(float64x2_t *)(*(void *)(v3 + 56) + 16 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if (v15)
    {
      int32x2_t v16 = vmovn_s64(vceqq_f64(*(float64x2_t *)(*(void *)(a2 + 56) + 16 * result), v17));
      if (v16.i32[0] & v16.i32[1]) {
        continue;
      }
    }
    return 0;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    char v15 = 8 * v11;
    int32x2_t v16 = *(void *)(*(void *)(v3 + 56) + v15);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v16) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    char v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    int32x2_t v16 = *v15;
    float64x2_t v17 = v15[1];
    unint64_t v18 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    uint64_t v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_DWORD *)(*(void *)(a2 + 56) + 4 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey>, (uint64_t)&type metadata for EnvironmentValues.ScrollAnchorsKey, (uint64_t)&protocol witness table for EnvironmentValues.ScrollAnchorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollAnchorsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceTransform<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StrokeStyle(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static StrokeStyle.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

BOOL specialized static StrokeStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24))
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t type metadata accessor for OffsetShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.ignoresSafeArea(_:edges:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = a2;
  return View.modifier<A>(_:)(&v4, a3, &type metadata for _SafeAreaRegionsIgnoringLayout);
}

uint64_t static _OffsetEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  int v13 = *((_DWORD *)a2 + 2);
  int v14 = *((_DWORD *)a2 + 9);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition();
  int v10 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v16 = v4;
  int v17 = v13;
  uint64_t v18 = v5;
  uint64_t v19 = a2[3];
  int v20 = v6 | 8;
  int v21 = v14;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = a2[7];
  int v25 = v10;
  uint64_t v26 = *(uint64_t *)((char *)a2 + 68);
  uint64_t v27 = *(uint64_t *)((char *)a2 + 76);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition;
  if (!lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetPosition and conformance OffsetPosition);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in HashableWeakBox<A>()
{
  return swift_getWitnessTable();
}

uint64_t EnvironmentValues.dividerThickness.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    char v3 = v2;
    swift_release_n();
    uint64_t result = swift_release_n();
    if ((v3 & 1) == 0) {
      return result;
    }
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v13);
    swift_release_n();
    uint64_t result = swift_release_n();
    int v5 = v13;
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v14);
    char v8 = v7;
    uint64_t result = swift_release_n();
    if ((v8 & 1) == 0) {
      return result;
    }
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v9);
    uint64_t v10 = swift_retain_n();
    uint64_t v11 = specialized find1<A>(_:key:filter:)(v10, v12);
    if (v11) {
      int v5 = *(unsigned __int8 *)(v11 + 72);
    }
    else {
      int v5 = 3;
    }
    uint64_t result = swift_release_n();
  }
  if ((v5 - 7) >= 5) {
    return EnvironmentValues.pixelLength.getter();
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

double EdgeInsets.subscript.getter(char a1, double a2, double a3, double a4, double a5)
{
  switch(a1)
  {
    case 1:
      goto LABEL_3;
    case 2:
      double result = a4;
      break;
    case 3:
      double result = a5;
      break;
    default:
      a3 = a2;
LABEL_3:
      double result = a3;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for Semantics.DismissPopsInNavigationSplitViewRoots()
{
  return &type metadata for Semantics.DismissPopsInNavigationSplitViewRoots;
}

ValueMetadata *type metadata accessor for Text.Suffix()
{
  return &type metadata for Text.Suffix;
}

ValueMetadata *type metadata accessor for SidebarStyleContext()
{
  return &type metadata for SidebarStyleContext;
}

uint64_t TextScaleModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for MacInterfaceIdiom()
{
  return &type metadata for MacInterfaceIdiom;
}

uint64_t instantiation function for generic protocol witness table for AnyViewChild<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t AnyLayout.init<A>(_:)(uint64_t a1)
{
  return _AnyLayoutBox.__allocating_init(_:)(a1);
}

uint64_t _AnyLayoutBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 184) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 200), a1);
  return v2;
}

uint64_t type metadata accessor for _AnyLayoutBox()
{
  return __swift_instantiateGenericMetadata();
}

__n128 _ViewListInputs.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *MEMORY[0x263F288F8];
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = MEMORY[0x263F8EE88];
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

uint64_t type metadata completion function for InternalAnimationBox()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout;
  if (!lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout;
  if (!lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _FixedSizeLayout and conformance _FixedSizeLayout);
  }
  return result;
}

uint64_t type metadata completion function for ShapeStyledDisplayList()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TraitWritingModifier<A>.AddTrait()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>);
    }
  }
}

uint64_t _VariadicView_Children.init(_:contentSubgraph:transform:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t result = outlined init with take of ScrollStateRequest(a1, a4);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = v6;
  return result;
}

double Path.init(_:)@<D0>(void (*a1)(long long *)@<X0>, uint64_t a2@<X8>)
{
  long long v6 = 0u;
  long long v7 = 0u;
  char v8 = 6;
  a1(&v6);
  char v3 = v8;
  double result = *(double *)&v6;
  long long v5 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 32) = v3;
  return result;
}

uint64_t type metadata accessor for _PreferenceValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TextForegroundStyleModifier.__deallocating_deinit()
{
  return TextShadowModifier.__deallocating_deinit();
}

uint64_t static EventModifiers.shift.getter()
{
  return 2;
}

uint64_t one-time initialization function for v2()
{
  uint64_t result = swiftUI_v2_os_versions();
  static Semantics.int v2 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v2_os_versions()
{
  return 0x7E40901FFFFFFFFLL;
}

uint64_t one-time initialization function for v1()
{
  uint64_t result = swiftUI_v1_os_versions();
  static Semantics.uint64_t v1 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v1_os_versions()
{
  return 0x7E30901FFFFFFFFLL;
}

uint64_t AnyDynamicFontModifier.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _MaskEffect<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  return static _MaskEffect._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t EnvironmentValues.nearestScrollableAxes.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t assignWithTake for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VisionInterfaceIdiom()
{
  return &type metadata for VisionInterfaceIdiom;
}

ValueMetadata *type metadata accessor for Prominence()
{
  return &type metadata for Prominence;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStorage()
{
  return &type metadata for AccessibilityLabelStorage;
}

ValueMetadata *type metadata accessor for ContentListStyleContext()
{
  return &type metadata for ContentListStyleContext;
}

ValueMetadata *type metadata accessor for IsExpandedTraitKey()
{
  return &type metadata for IsExpandedTraitKey;
}

ValueMetadata *type metadata accessor for PreferenceValues.Entry()
{
  return &type metadata for PreferenceValues.Entry;
}

ValueMetadata *type metadata accessor for TransitionPhase()
{
  return &type metadata for TransitionPhase;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentFetch<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static AnyTransition.identity.getter()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }

  return swift_retain();
}

void one-time initialization function for normal()
{
  static GraphicsBlendMode.normal = 0;
  byte_26B0EB4A0 = 0;
}

void one-time initialization function for typeCache()
{
  static ViewDescriptor.typeCache = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

{
  static StyleContextDescriptor.typeCache = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

{
  static GestureDescriptor.typeCache = MEMORY[0x263F8EE80];
}

{
  static GestureModifierDescriptor.typeCache = MEMORY[0x263F8EE80];
}

void one-time initialization function for lastestAccessLists()
{
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for _ForegroundStyleModifier3()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for AnchorBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in BezierAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  double v5 = *a1;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 16))(a2, v2[4], v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(v4 + 16))(v3, v4, v5);
}

double protocol witness for VectorArithmetic.scale(by:) in conformance CGFloat(double a1)
{
  double result = *v1 * a1;
  *unint64_t v1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    unsigned __int8 v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned __int8 v13 = *v14;
    char v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance InterpolatedDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t EdgeInsets.subscript.setter(uint64_t result, double a2)
{
  switch((char)result)
  {
    case 1:
      ++v2;
      break;
    case 2:
      v2 += 2;
      break;
    case 3:
      v2 += 3;
      break;
    default:
      break;
  }
  double *v2 = a2;
  return result;
}

uint64_t EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

uint64_t specialized Gradient.init(colors:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v2 - 1;
  if (v2 <= 1)
  {
    if (v2)
    {
      uint64_t v19 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
      uint64_t v4 = v19;
      uint64_t v13 = *(void *)(a1 + 32);
      unint64_t v14 = *(void *)(v19 + 16);
      unint64_t v15 = *(void *)(v19 + 24);
      swift_retain();
      if (v14 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
        uint64_t v4 = v19;
      }
      *(void *)(v4 + 16) = v14 + 1;
      uint64_t v16 = v4 + 16 * v14;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    v18[1] = v18;
    uint64_t v19 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v4 = v19;
    uint64_t v5 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    v18[2] = a1;
    if (v5)
    {
      uint64_t v6 = 0;
      double v7 = 1.0 / (double)v3;
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = 16 * v8;
      do
      {
        uint64_t v10 = *(void *)(a1 + 32 + 8 * v6);
        uint64_t v19 = v4;
        unint64_t v11 = *(void *)(v4 + 24);
        swift_retain();
        if (v8 + v6 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v8 + v6 + 1, 1);
          uint64_t v4 = v19;
        }
        *(void *)(v4 + 16) = v8 + v6 + 1;
        uint64_t v12 = v4 + v9;
        *(void *)(v12 + 32) = v10;
        *(double *)(v12 + 40) = v7 * (double)v6;
        v9 += 16;
        ++v6;
      }
      while (v5 != v6);
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t initializeWithCopy for MatchedSharedFrame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance StaticLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t assignWithTake for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t one-time initialization function for v6()
{
  uint64_t result = swiftUI_v6_0_os_versions();
  static Semantics.uint64_t v6 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v6_0_os_versions()
{
  return 0x7E80000FFFFFFFFLL;
}

uint64_t dispatch thunk of AnyLocation.update()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t static HorizontalAlignment.trailing.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for trailing, (uint64_t)&static HorizontalAlignment.trailing);
}

uint64_t base witness table accessor for _AttributeBody in AnimatedShape<A>.Init()
{
  return swift_getWitnessTable();
}

BOOL GraphicsFilter.isIdentity.getter()
{
  BOOL v1 = 0;
  double v3 = *(double *)v0;
  uint64_t v2 = v0[1];
  switch(*((unsigned char *)v0 + 116))
  {
    case 0:
      return v3 <= 0.0;
    case 1:
      return v3 <= 0.0 || *((unsigned __int8 *)v0 + 113) << 8 == 512;
    case 4:
      return _ColorMatrix.isIdentity.getter();
    case 5:
      uint64_t v5 = HIDWORD(*(void *)&v3);
      return COERCE_FLOAT(*v0) == 1.0 && *(float *)&v5 == 1.0 && *(float *)&v2 == 1.0 && *((float *)&v2 + 1) == 1.0;
    case 6:
    case 8:
    case 0xA:
      return (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    case 7:
    case 9:
      return v3 == 1.0;
    case 0xB:
    case 0xD:
      return (v0[2] & 0x7FFFFFFFLL) == 0;
    default:
      return v1;
  }
}

BOOL _ColorMatrix.isIdentity.getter()
{
  return *v0 == 1.0
      && v0[1] == 0.0
      && v0[2] == 0.0
      && v0[3] == 0.0
      && v0[4] == 0.0
      && v0[5] == 0.0
      && v0[6] == 1.0
      && v0[7] == 0.0
      && v0[8] == 0.0
      && v0[9] == 0.0
      && v0[10] == 0.0
      && v0[11] == 0.0
      && v0[12] == 1.0
      && v0[13] == 0.0
      && v0[14] == 0.0
      && v0[15] == 0.0
      && v0[16] == 0.0
      && v0[17] == 0.0
      && v0[18] == 1.0
      && v0[19] == 0.0;
}

__n128 specialized DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6)
{
  unint64_t v10 = a2[3].n128_u64[0];
  unint64_t v11 = a2[3].n128_u64[1];
  unsigned __int8 v12 = a2[4].n128_u8[0];
  a2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  a2[5].n128_u64[0] = static Time.infinity;
  uint64_t v16 = a4;
  __int16 v17 = a5;
  char v18 = BYTE2(a5);
  DisplayList.GraphicsRenderer.render(list:in:)(&v16, a6);
  swift_beginAccess();
  unint64_t v13 = MEMORY[0x263F8EE80];
  a2[1].n128_u64[0] = MEMORY[0x263F8EE80];
  a2[1].n128_u64[1] = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  __n128 v15 = a2[1];
  __n128 result = a2[2];
  a2[1] = result;
  a2[2] = v15;
  a2[3].n128_u64[0] = v10;
  a2[3].n128_u64[1] = v11;
  a2[4].n128_u8[0] = v12;
  return result;
}

uint64_t DisplayList.GraphicsRenderer.render(list:in:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  RBDrawingStateGetIdentifier();
  CGRect v35 = a2;
  RBDrawingStateGetIdentifierNamespace2();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    double v7 = (Swift::UInt32 *)(v5 + 100);
    do
    {
      uint64_t v8 = *(void *)(v7 - 9);
      uint64_t v9 = *(void *)(v7 - 7);
      unint64_t v10 = *(void *)(v7 - 5);
      uint64_t v11 = *(void *)(v7 - 3);
      int v12 = *((unsigned __int16 *)v7 - 2) | (*((unsigned __int8 *)v7 - 2) << 16);
      Swift::UInt32 v13 = *v7;
      long long v33 = *(_OWORD *)(v7 - 13);
      long long v34 = *(_OWORD *)(v7 - 17);
      if (*v7)
      {
        uint64_t v32 = *(void *)(v7 - 3);
        int v30 = *(_DWORD *)(v3 + 52);
        int v31 = *(_DWORD *)(v3 + 48);
        uint64_t v14 = *(void *)(v3 + 56);
        char v15 = *(unsigned char *)(v3 + 64);
        *(_DWORD *)(v3 + 48) = v13;
        *(_DWORD *)(v3 + 52) = 0;
        *(unsigned char *)(v3 + 64) = 1;
        swift_beginAccess();
        uint64_t v16 = *(void *)(v3 + 88);
        if (v16 && *(void *)(v16 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v13), (v17 & 1) != 0))
        {
          swift_endAccess();
          outlined copy of DisplayList.Item.Value(v9, v10);
          RBUUIDInitFromHash();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v29 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v18 = swift_retain();
            *CGRect v35 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v18, v29, 1, 0);
            swift_release();
          }
          RBDrawingStateSetIdentifier2();
          uint64_t v11 = v32;
        }
        else
        {
          swift_endAccess();
          uint64_t v11 = v32;
          outlined copy of DisplayList.Item.Value(v9, v10);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v19 = RBDrawingStateInit();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v20 = swift_retain();
            uint64_t v21 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v20, v19, 1, 0);
            uint64_t v11 = v32;
            *CGRect v35 = v21;
            swift_release();
          }
          RBDrawingStateSetIdentifier();
        }
        long long v23 = v33;
        long long v22 = v34;
      }
      else
      {
        int v30 = *(_DWORD *)(v3 + 52) + 1;
        int v31 = *(_DWORD *)(v3 + 48);
        *(_DWORD *)(v3 + 52) = v30;
        uint64_t v14 = *(void *)(v3 + 56);
        char v15 = *(unsigned char *)(v3 + 64);
        *(unsigned char *)(v3 + 64) = 0;
        outlined copy of DisplayList.Item.Value(v9, v10);
        long long v23 = v33;
        long long v22 = v34;
      }
      v36[0] = v22;
      v36[1] = v23;
      uint64_t v37 = v8;
      uint64_t v38 = v9;
      unint64_t v39 = v10;
      uint64_t v40 = v11;
      __int16 v41 = v12;
      char v42 = BYTE2(v12);
      Swift::UInt32 v43 = v13;
      DisplayList.GraphicsRenderer.render(item:in:)((char *)v36, v35);
      outlined consume of DisplayList.Item.Value(v9, v10);
      char v24 = *(unsigned char *)(v3 + 64);
      if ((v24 & 0xC) != 0)
      {
        uint64_t v25 = *(void *)(v3 + 48);
        if ((*(unsigned char *)(v3 + 64) & 4) != 0) {
          *(void *)(v3 + 48) = *(void *)(v3 + 56);
        }
        if ((v24 & 8) != 0) {
          *(void *)(v3 + 56) = v25;
        }
      }
      if (v24)
      {
        *(_DWORD *)(v3 + 48) = v31;
        *(_DWORD *)(v3 + 52) = v30;
      }
      if ((v24 & 2) != 0) {
        *(void *)(v3 + 56) = v14;
      }
      v7 += 18;
      *(unsigned char *)(v3 + 64) = v15;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v26 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v27 = swift_retain();
    *CGRect v35 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v27, v26, 1, 0);
    swift_release();
  }
  return RBDrawingStateSetIdentifier2();
}

uint64_t DisplayList.GraphicsRenderer.render(item:in:)(char *a1, unint64_t *a2)
{
  uint64_t v4 = v2;
  double v7 = v341;
  uint64_t v363 = *MEMORY[0x263EF8340];
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v310 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  Swift::UInt32 v13 = (char *)&v310 - v12;
  long long v14 = *((_OWORD *)a1 + 3);
  v355[0] = *((_OWORD *)a1 + 2);
  v355[1] = v14;
  uint64_t v356 = *((void *)a1 + 8);
  CGSize v15 = (CGSize)*((_OWORD *)a1 + 1);
  CGPoint v353 = *(CGPoint *)a1;
  CGSize v354 = v15;
  outlined init with take of DisplayList.Item.Value((uint64_t)v355 + 8, (uint64_t)v357);
  uint64_t result = outlined init with take of DisplayList.Item.Value((uint64_t)v357, (uint64_t)&v358);
  unint64_t v17 = v359;
  switch(v359 >> 62)
  {
    case 1uLL:
      v335 = a2;
      v359 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v40 = HIDWORD(v17);
      uint64_t v41 = v358;
      *(void *)&long long v334 = v360;
      int v332 = v361;
      LODWORD(v333) = v362;
      double y = v353.y;
      double x = v353.x;
      CGSize v42 = v354;
      LODWORD(v3) = v353.y == 0.0 && v353.x == 0.0;
      outlined retain of DisplayList.Item((uint64_t)&v353);
      outlined copy of DisplayList.Effect(v41, v17, SBYTE4(v17));
      if ((v3 & 1) == 0) {
        GraphicsContext.translateBy(x:y:)(x, y);
      }
      if (BYTE4(v17) == 10)
      {
        unsigned int v328 = v3;
        outlined init with copy of AnyTrackedValue(v41 + 16, (uint64_t)v341);
        uint64_t v329 = v41;
        unint64_t v330 = v17;
        outlined consume of DisplayList.Effect(v41, v17, 10);
        uint64_t v43 = *(unsigned int *)(v4 + 48);
        uint64_t v44 = *(unsigned int *)(v4 + 52);
        uint64_t v46 = *(unsigned int *)(v4 + 56);
        uint64_t v45 = *(unsigned int *)(v4 + 60);
        swift_beginAccess();
        uint64_t v47 = *(void *)(v4 + 24);
        uint64_t v48 = *(void *)(v47 + 16);
        unint64_t v3 = v46 | (v45 << 32);
        unint64_t v331 = v43 | (v44 << 32);
        if (v48 && (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v43 | (v44 << 32), v3), (v50 & 1) != 0)) {
          outlined init with copy of AnyTrackedValue(*(void *)(v47 + 56) + 40 * v49, (uint64_t)v336);
        }
        else {
          memset(v336, 0, sizeof(v336));
        }
        swift_endAccess();
        outlined init with copy of AnyTrackedValue((uint64_t)v341, (uint64_t)&v350);
        if (*(void *)&v336[24])
        {
          outlined init with take of ScrollStateRequest((long long *)v336, (uint64_t)v338);
        }
        else
        {
          uint64_t v66 = *((void *)&v351 + 1);
          uint64_t v67 = v352;
          __swift_project_boxed_opaque_existential_1(&v350, *((uint64_t *)&v351 + 1));
          (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v67 + 32))(v338, v66, v67);
          outlined destroy of AnyTrackedValue?((uint64_t)v336, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator?, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v350);
        v346[0] = *(void *)(v4 + 72);
        uint64_t v68 = *((void *)&v338[1] + 1);
        uint64_t v69 = *(void *)&v338[2];
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v338, *((uint64_t *)&v338[1] + 1));
        char v70 = (*(uint64_t (**)(double **, unsigned char *, uint64_t *, uint64_t, uint64_t, CGFloat, CGFloat))(v69 + 8))(&v347, v341, v346, v68, v69, v42.width, v42.height);
        outlined consume of DisplayList.Effect(v329, v330, 10);
        uint64_t v41 = (uint64_t)v347;
        unint64_t v17 = v348;
        unint64_t v40 = v349;
        if ((v70 & 1) == 0) {
          *(void *)(v4 + 80) = *(void *)(v4 + 72);
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v338, (uint64_t)&v347);
        swift_beginAccess();
        specialized Dictionary.subscript.setter((uint64_t)&v347, v331, v3);
        swift_endAccess();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v341);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v338);
        LODWORD(v3) = v328;
      }
      else
      {
        outlined consume of DisplayList.Effect(v41, v17, SBYTE4(v17));
      }
      unint64_t v331 = v40;
      switch((char)v40)
      {
        case 1:
          unsigned int v328 = v3;
          LOBYTE(v3) = v17;
          uint64_t v181 = swift_projectBox();
          outlined init with copy of DisplayList.ArchiveIDs?(v181, (uint64_t)v13);
          swift_beginAccess();
          unint64_t v17 = v4;
          unint64_t v182 = *(void *)(v4 + 88);
          outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v13, (uint64_t)v10);
          uint64_t v19 = (double *)type metadata accessor for DisplayList.ArchiveIDs();
          uint64_t v4 = v41;
          uint64_t v20 = *(void *)(*((void *)v19 - 1) + 48);
          int v183 = ((uint64_t (*)(char *, uint64_t, double *))v20)(v10, 1, v19);
          uint64_t v329 = v4;
          unint64_t v330 = v182;
          if (v183 != 1) {
            goto LABEL_185;
          }
          outlined copy of DisplayList.Effect(v4, v3, 1);
          swift_bridgeObjectRetain();
          _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
          uint64_t v184 = 0;
          goto LABEL_186;
        case 3:
          outlined init with copy of AnyTrackedValue(v41 + 16, (uint64_t)v341);
          unsigned int v328 = v3;
          unint64_t v3 = v41;
          uint64_t v185 = *(void *)&v341[24];
          uint64_t v186 = *(void *)&v341[32];
          __swift_project_boxed_opaque_existential_1(v341, *(uint64_t *)&v341[24]);
          *(void *)&v338[0] = v334;
          WORD4(v338[0]) = v332;
          BYTE10(v338[0]) = (_BYTE)v333;
          char v187 = v17;
          unint64_t v17 = *v335;
          v333 = *(void (**)(_OWORD *, unint64_t, uint64_t, uint64_t, uint64_t, double, double))(v186 + 48);
          swift_retain();
          unint64_t v188 = v17;
          LOBYTE(v17) = v187;
          uint64_t v189 = v186;
          uint64_t v41 = v3;
          LOBYTE(v3) = v328;
          v333(v338, v188, v4, v185, v189, v42.width, v42.height);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v341);
          outlined consume of DisplayList.Effect(v41, v187, 3);
          break;
        case 4:
          unint64_t v166 = *v335;
          *(void *)&v338[0] = v166;
          float v167 = *(float *)(v166 + 48);
          swift_retain();
          if (v167 != (float)(v167 * *(float *)&v41))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v168 = RBDrawingStateInit();
              type metadata accessor for GraphicsContext.Storage();
              swift_allocObject();
              uint64_t v169 = swift_retain();
              uint64_t v170 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v169, v168, 1, 0);
              *(void *)&v338[0] = v170;
              swift_release();
              unint64_t v166 = v170;
            }
            *(float *)(v166 + 48) = v167 * *(float *)&v41;
          }
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5:
          unint64_t v190 = *v335;
          *(void *)&v338[0] = *v335;
          if (v17)
          {
            outlined copy of DisplayList.Effect(v41, v17, 5);
            outlined copy of DisplayList.Effect(v41, v17, 5);
            outlined copy of DisplayList.Effect(v41, v17, 5);
            swift_retain();
            self;
            if (swift_dynamicCastObjCClass() && *(_DWORD *)(v190 + 52))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v281 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                swift_allocObject();
                uint64_t v282 = swift_retain();
                uint64_t v283 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v282, v281, 1, 0);
                *(void *)&v338[0] = v283;
                swift_release();
                unint64_t v190 = v283;
              }
              *(_DWORD *)(v190 + 52) = 0;
            }
            outlined consume of DisplayList.Effect(v41, v17, 5);
            outlined consume of DisplayList.Effect(v41, v17, 5);
          }
          else
          {
            int v191 = *(_DWORD *)(v190 + 52);
            swift_retain();
            if (v191 != v41)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v192 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                swift_allocObject();
                uint64_t v193 = swift_retain();
                uint64_t v194 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v193, v192, 1, 0);
                *(void *)&v338[0] = v194;
                swift_release();
                unint64_t v190 = v194;
              }
              *(_DWORD *)(v190 + 52) = v41;
            }
          }
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
          outlined consume of DisplayList.Effect(v41, v17, 5);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 6:
          long long v158 = *(_OWORD *)(v41 + 32);
          v338[0] = *(_OWORD *)(v41 + 16);
          v338[1] = v158;
          LOBYTE(v338[2]) = *(unsigned char *)(v41 + 48);
          uint64_t v159 = *(unsigned __int8 *)(v41 + 49);
          int v160 = *(unsigned __int8 *)(v41 + 50);
          int v161 = *(_DWORD *)(v41 + 52);
          *(void *)v336 = *v335;
          _ZF = v160 == 0;
          uint64_t v162 = 256;
          if (_ZF) {
            uint64_t v162 = 0;
          }
          *(void *)v341 = v162 | v159;
          memset(&v341[8], 0, 33);
          outlined copy of DisplayList.Effect(v41, v17, 6);
          outlined retain of Path((uint64_t)v338, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          GraphicsContext.clip(to:opacity:style:options:)((uint64_t)v338, (uint64_t)v341, v161, 1.0);
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v336);
          outlined retain of Path((uint64_t)v338, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of DisplayList.Effect(v41, v17, 6);
          break;
        case 7:
          uint64_t v163 = *(void *)(v41 + 16);
          int v164 = *(unsigned __int16 *)(v41 + 24);
          int v165 = *(unsigned __int8 *)(v41 + 26);
          unsigned int v328 = *(_DWORD *)(v41 + 28);
          *(void *)&v338[0] = *v335;
          swift_retain();
          outlined copy of DisplayList.Effect(v41, v17, 7);
          unint64_t v330 = v17;
          swift_bridgeObjectRetain();
          swift_retain();
          LOBYTE(v17) = v330;
          specialized GraphicsContext.clipToLayer(opacity:options:content:)(v328, (uint64_t *)v338, v4, v163, v164 | (v165 << 16));
          swift_release();
          swift_bridgeObjectRelease();
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of DisplayList.Effect(v41, v17, 7);
          break;
        case 8:
          unsigned int v328 = v3;
          unint64_t v330 = v17;
          uint64_t v327 = v4;
          uint64_t v195 = v41;
          uint64_t v196 = *(void *)(v41 + 16);
          uint64_t v198 = *(void *)(v195 + 24);
          uint64_t v197 = *(void *)(v195 + 32);
          uint64_t v200 = *(void *)(v195 + 40);
          uint64_t v199 = *(void *)(v195 + 48);
          uint64_t v202 = *(void *)(v195 + 56);
          uint64_t v201 = *(void *)(v195 + 64);
          uint64_t v204 = *(void *)(v195 + 72);
          uint64_t v203 = *(void *)(v195 + 80);
          uint64_t v329 = v195;
          uint64_t v205 = *(unsigned __int8 *)(v195 + 88);
          *(void *)v336 = *v335;
          switch(v205)
          {
            case 1:
              *(void *)v341 = v196;
              *(void *)&v341[8] = v198;
              *(void *)&v341[16] = v197;
              *(void *)&v341[24] = v200;
              *(void *)&v341[32] = v199;
              *(void *)&v341[40] = v202;
              *(void *)&v341[48] = v201;
              *(void *)&v341[56] = v204;
              *(void *)&v341[64] = v203;
              outlined copy of DisplayList.Effect(v329, v330, 8);
              swift_retain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v303 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                swift_allocObject();
                uint64_t v304 = swift_retain();
                *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v304, v303, 1, 0);
                swift_release();
              }
              RBDrawingState.addProjectionTransform(_:)();
              break;
            case 2:
              outlined copy of DisplayList.Effect(v329, v330, 8);
              swift_retain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v305 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                swift_allocObject();
                uint64_t v306 = swift_retain();
                *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v306, v305, 1, 0);
                swift_release();
              }
              RBDrawingStateAddRotationStyle();
              break;
            case 3:
              uint64_t v325 = v204;
              uint64_t v326 = v196;
              uint64_t v324 = v201;
              outlined copy of DisplayList.Effect(v329, v330, 8);
              swift_retain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v307 = RBDrawingStateInit();
                type metadata accessor for GraphicsContext.Storage();
                swift_allocObject();
                uint64_t v308 = swift_retain();
                *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v308, v307, 1, 0);
                swift_release();
              }
              RBDrawingStateAddRotation3DStyle();
              break;
            default:
              *(void *)v341 = v196;
              *(void *)&v341[8] = v198;
              *(void *)&v341[16] = v197;
              *(void *)&v341[24] = v200;
              *(void *)&v341[32] = v199;
              *(void *)&v341[40] = v202;
              IsIdentitdouble y = CGAffineTransformIsIdentity((CGAffineTransform *)v341);
              outlined copy of DisplayList.Effect(v329, v330, 8);
              swift_retain();
              if (!IsIdentity)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v326 = RBDrawingStateInit();
                  type metadata accessor for GraphicsContext.Storage();
                  swift_allocObject();
                  uint64_t v207 = swift_retain();
                  *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v207, v326, 1, 0);
                  swift_release();
                }
                *(void *)v341 = v196;
                *(void *)&v341[8] = v198;
                *(void *)&v341[16] = v197;
                *(void *)&v341[24] = v200;
                *(void *)&v341[32] = v199;
                *(void *)&v341[40] = v202;
                RBDrawingStateConcatCTM();
              }
              break;
          }
          *(void *)&v338[0] = v334;
          WORD4(v338[0]) = v332;
          BYTE10(v338[0]) = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v338, v336);
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v41 = v329;
          LOBYTE(v17) = v330;
          uint64_t v287 = v329;
          char v288 = v330;
          char v289 = 8;
          goto LABEL_214;
        case 9:
          unsigned int v328 = v3;
          unint64_t v330 = v17;
          uint64_t v327 = v4;
          unint64_t v221 = *(void *)(v41 + 16);
          unint64_t v220 = *(void *)(v41 + 24);
          unint64_t v223 = *(void *)(v41 + 32);
          unint64_t v222 = *(void *)(v41 + 40);
          unint64_t v225 = *(void *)(v41 + 48);
          unint64_t v224 = *(void *)(v41 + 56);
          unint64_t v227 = *(void *)(v41 + 64);
          unint64_t v226 = *(void *)(v41 + 72);
          unint64_t v229 = *(void *)(v41 + 80);
          unint64_t v228 = *(void *)(v41 + 88);
          uint64_t v230 = *(void *)(v41 + 96);
          unint64_t v17 = *(void *)(v41 + 104);
          uint64_t v231 = *(void *)(v41 + 112);
          uint64_t v232 = *(void *)(v41 + 120);
          int v233 = *(_DWORD *)(v41 + 128);
          int v234 = *(unsigned __int8 *)(v41 + 132);
          *(void *)&long long v350 = *v335;
          unint64_t v322 = v228;
          unint64_t v323 = v225;
          uint64_t v325 = v227;
          uint64_t v326 = v226;
          uint64_t v324 = v224;
          if (v234 == 12)
          {
            unint64_t v311 = HIDWORD(v221);
            unint64_t v312 = HIDWORD(v220);
            unint64_t v313 = HIDWORD(v223);
            unint64_t v314 = HIDWORD(v222);
            unint64_t v315 = HIDWORD(v225);
            unint64_t v316 = HIDWORD(v224);
            unint64_t v318 = HIDWORD(v227);
            uint64_t v319 = HIDWORD(v226);
            id v320 = (id)HIDWORD(v229);
            v321 = (void *)HIDWORD(v228);
            uint64_t v235 = v327;
            unint64_t v317 = v229;
            int v236 = v222;
            int v237 = v220;
            swift_retain();
            uint64_t v329 = v41;
            outlined copy of DisplayList.Effect(v41, v330, 9);
            int v238 = v332 | (v333 << 16);
            swift_retain();
            specialized GraphicsContext.clipToLayer(opacity:options:content:)(0, (uint64_t *)&v350, v235, v334, v238);
            swift_release();
            swift_bridgeObjectRelease();
            *(_DWORD *)v341 = v221;
            *(_DWORD *)&v341[4] = v311;
            *(_DWORD *)&v341[8] = v237;
            *(_DWORD *)&v341[12] = v312;
            *(_DWORD *)&v341[16] = v223;
            *(_DWORD *)&v341[20] = v313;
            *(_DWORD *)&v341[24] = v236;
            *(_DWORD *)&v341[28] = v314;
            *(_DWORD *)&v341[32] = v323;
            *(_DWORD *)&v341[36] = v315;
            *(_DWORD *)&v341[40] = v324;
            *(_DWORD *)&v341[44] = v316;
            *(_DWORD *)&v341[48] = v325;
            *(_DWORD *)&v341[52] = v318;
            *(_DWORD *)&v341[56] = v326;
            *(_DWORD *)&v341[60] = v319;
            *(_DWORD *)&v341[64] = v317;
            *(_DWORD *)&v341[68] = v320;
            *(_DWORD *)&v341[72] = v322;
            *(_DWORD *)&v341[76] = v321;
            char v239 = (double *)v350;
            if (!swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v240 = RBDrawingStateInit();
              type metadata accessor for GraphicsContext.Storage();
              swift_allocObject();
              uint64_t v241 = swift_retain();
              uint64_t v242 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v241, v240, 1, 0);
              swift_release();
              char v239 = (double *)v242;
            }
            RBDrawingStateAddColorMatrixFilter();
            RBDrawingStateGetClipBoundingBox();
            CGFloat v244 = v243;
            CGFloat v246 = v245;
            CGFloat v248 = v247;
            CGFloat v250 = v249;
            swift_retain();
            v367.origin.double x = v244;
            v367.origin.double y = v246;
            v367.size.width = v248;
            v367.size.CGFloat height = v250;
            BOOL IsNull = CGRectIsNull(v367);
            LOBYTE(v17) = v330;
            if (IsNull)
            {
              uint64_t v252 = 0;
              uint64_t v253 = 0;
              uint64_t v254 = 0;
              uint64_t v255 = 0;
              unsigned __int8 v256 = 6;
            }
            else
            {
              unsigned __int8 v256 = 0;
              uint64_t v252 = *(void *)&v244;
              uint64_t v253 = *(void *)&v246;
              uint64_t v254 = *(void *)&v248;
              uint64_t v255 = *(void *)&v250;
            }
            *(void *)v336 = v252;
            *(void *)&v336[8] = v253;
            *(void *)&v336[16] = v254;
            *(void *)&v336[24] = v255;
            v336[32] = v256;
            memset(v341, 0, 73);
            *(void *)&v338[0] = 256;
            *(_OWORD *)((char *)v338 + 8) = 0u;
            *(_OWORD *)((char *)&v338[1] + 8) = 0u;
            BYTE8(v338[2]) = 0;
            GraphicsContext.draw(_:with:style:)((uint64_t)v336, (uint64_t)v341, (uint64_t)v338, v239);
            outlined consume of Path.Storage(v252, v253, v254, v255, v256);
            swift_release();
            swift_release();
            uint64_t v41 = v329;
          }
          else
          {
            *(void *)v341 = v221;
            *(void *)&v341[8] = v220;
            *(void *)&v341[16] = v223;
            *(void *)&v341[24] = v222;
            *(void *)&v341[32] = v225;
            *(void *)&v341[40] = v224;
            *(void *)&v341[48] = v227;
            *(void *)&v341[56] = v226;
            *(void *)&v341[64] = v229;
            *(void *)&v341[72] = v228;
            *(void *)&long long v342 = v230;
            *((void *)&v342 + 1) = v17;
            *(void *)&long long v343 = v231;
            *((void *)&v343 + 1) = v232;
            int v344 = v233;
            char v345 = v234;
            id v320 = (id)v223;
            v321 = (void *)v221;
            unint64_t v318 = v222;
            uint64_t v319 = v230;
            LODWORD(v316) = v234;
            unint64_t v315 = v220;
            unint64_t v317 = v17;
            uint64_t v290 = v231;
            unint64_t v291 = v228;
            uint64_t v292 = v229;
            int v293 = v233;
            outlined copy of DisplayList.Effect(v41, v330, 9);
            swift_retain();
            uint64_t v309 = v291;
            LODWORD(v291) = v315;
            outlined copy of GraphicsFilter(v321, v315, v320, v318, v323, v324, v325, v326, v292, v309, v319, v17, v290, v232, v293, SBYTE2(v293));
            GraphicsContext.addFilter(_:in:)((uint64_t)v341, 0.0, 0.0, v42.width, v42.height, v294, v295, v296, v297, v298, v299);
            *(void *)v341 = v334;
            *(_WORD *)&v341[8] = v332;
            v341[10] = (_BYTE)v333;
            DisplayList.GraphicsRenderer.render(list:in:)(v341, &v350);
            LOBYTE(v17) = v330;
            outlined consume of GraphicsFilter(v321, v291, v320, v318, v323, v324, v325, v326, v292, v322, v319, v317, v290, v232, v293, SBYTE2(v293));
            swift_bridgeObjectRelease();
            swift_release();
          }
          uint64_t v287 = v41;
          char v288 = v17;
          char v289 = 9;
          goto LABEL_214;
        case 10:
          outlined consume of DisplayList.Effect(v41, v17, 10);
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        case 11:
          unint64_t v171 = *(unsigned int *)(v41 + 24) | ((unint64_t)*(unsigned __int8 *)(v41 + 28) << 32);
          uint64_t v172 = *(unsigned __int8 *)(v41 + 29);
          int v173 = *(unsigned __int8 *)(v41 + 30);
          uint64_t v174 = *(void *)(v41 + 32);
          uint64_t v326 = *(void *)(v41 + 16);
          uint64_t v327 = v174;
          uint64_t v175 = v41;
          int v176 = *(_DWORD *)(v41 + 40);
          *(void *)&v338[0] = *v335;
          LODWORD(v325) = *(unsigned __int8 *)(v4 + 96);
          uint64_t v329 = v175;
          if ((v176 & 0xC) != 0)
          {
            uint64_t v177 = v326;
            *(void *)v341 = v326;
            *(_DWORD *)&v341[8] = v171;
            v341[14] = v173 != 0;
            *(_WORD *)&v341[12] = (v171 & 0xFF00000000 | (v172 << 40)) >> 32;
            outlined copy of DisplayList.Effect(v175, v17, 11);
            outlined copy of ContentTransition.Storage(v177, v171, v172);
            swift_retain();
            swift_retain();
            GraphicsContext.setTransition(_:)((uint64_t)v341);
            *(unsigned char *)(v4 + 96) = *(unsigned char *)(v4 + 96) & 1 | ((v176 & 4) != 0);
            if ((v176 & 4) != 0)
            {
              unsigned int v328 = v3;
              swift_retain();
              uint64_t v178 = RBDrawingStateBeginLayer();
              unint64_t v330 = v17;
              unint64_t v17 = v4;
              uint64_t v179 = v178;
              type metadata accessor for GraphicsContext.Storage();
              swift_allocObject();
              uint64_t v180 = swift_retain();
              *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v180, v179, 0, 0);
              *(void *)v341 = v334;
              *(_WORD *)&v341[8] = v332;
              v341[10] = (_BYTE)v333;
              swift_retain();
              DisplayList.GraphicsRenderer.render(list:in:)(v341, v336);
              swift_release();
              uint64_t v4 = v17;
              LOBYTE(v17) = v330;
              RBDrawingStateDrawLayer();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              outlined consume of ContentTransition.Storage(v326, v171, v172);
              LOBYTE(v3) = v328;
              swift_release();
              goto LABEL_199;
            }
          }
          else
          {
            outlined copy of DisplayList.Effect(v175, v17, 11);
            outlined copy of ContentTransition.Storage(v326, v171, v172);
            swift_retain();
            swift_retain();
          }
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
          outlined consume of ContentTransition.Storage(v326, v171, v172);
          swift_release();
          swift_bridgeObjectRelease();
LABEL_199:
          swift_release();
          *(unsigned char *)(v4 + 96) = v325;
          uint64_t v41 = v329;
          outlined consume of DisplayList.Effect(v329, v17, 11);
          break;
        case 15:
          uint64_t v257 = *(void *)(v41 + 16);
          uint64_t v258 = *(void *)(v41 + 24);
          uint64_t v259 = v4 + 104;
          uint64_t v260 = v41;
          int v261 = *(_DWORD *)(v41 + 32);
          swift_beginAccess();
          v262 = *(char **)(v4 + 104);
          uint64_t v329 = v260;
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v4 + 104) = v262;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v262 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v262 + 2) + 1, 1, v262);
            *(void *)uint64_t v259 = v262;
          }
          v264 = v335;
          unint64_t v266 = *((void *)v262 + 2);
          unint64_t v265 = *((void *)v262 + 3);
          if (v266 >= v265 >> 1)
          {
            v262 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v265 > 1), v266 + 1, 1, v262);
            *(void *)uint64_t v259 = v262;
          }
          *((void *)v262 + 2) = v266 + 1;
          v267 = &v262[20 * v266];
          *((void *)v267 + 4) = v257;
          *((void *)v267 + 5) = v258;
          *((_DWORD *)v267 + 12) = v261;
          swift_endAccess();
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v264);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          if (!*(void *)(*(void *)(v4 + 104) + 16)) {
            __break(1u);
          }
          specialized Array._customRemoveLast()((uint64_t)v338);
          uint64_t v41 = v329;
          if (BYTE4(v338[1]) == 1) {
            specialized Array.remove(at:)(*(void *)(*(void *)v259 + 16) - 1, (uint64_t)v338);
          }
          swift_endAccess();
          outlined consume of DisplayList.Effect(v41, v17, 15);
          break;
        case 18:
          unsigned int v328 = v3;
          char v208 = *(unsigned char *)(v41 + 36);
          *(void *)&v338[0] = *v335;
          uint64_t v329 = v41;
          unint64_t v330 = v17;
          outlined copy of DisplayList.Effect(v41, v17, 18);
          swift_retain();
          swift_retain();
          if ((v208 & 1) == 0) {
            RBUUIDInitFromHash();
          }
          uint64_t v284 = swift_retain();
          GraphicsContext._addAnimation(_:id:)(v284);
          swift_release();
          swift_retain();
          uint64_t v285 = RBDrawingStateBeginLayer();
          type metadata accessor for GraphicsContext.Storage();
          swift_allocObject();
          uint64_t v286 = swift_retain();
          *(void *)v336 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v286, v285, 0, 0);
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          swift_retain();
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v336);
          swift_release();
          RBDrawingStateDrawLayer();
          swift_release();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v41 = v329;
          LOBYTE(v17) = v330;
          uint64_t v287 = v329;
          char v288 = v330;
          char v289 = 18;
LABEL_214:
          outlined consume of DisplayList.Effect(v287, v288, v289);
          goto LABEL_215;
        case 19:
          if (!(v41 | v17)) {
            goto LABEL_69;
          }
          if (v41 ^ 1 | v17)
          {
            uint64_t v300 = *v335;
            unsigned int v301 = v332 | (v333 << 16);
            swift_retain();
            uint64_t v302 = v334;
            swift_bridgeObjectRetain();
            specialized GraphicsContext.drawLayer(flags:content:)(0, v300, v4, v302, v301);
            swift_release();
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_retain();
            char v209 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v329 = v41;
            if ((v209 & 1) == 0)
            {
              uint64_t v210 = RBDrawingStateInit();
              type metadata accessor for GraphicsContext.Storage();
              swift_allocObject();
              uint64_t v211 = swift_retain();
              GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v211, v210, 1, 0);
              swift_release();
            }
            unsigned int v328 = v3;
            RBDrawingStateGetCTM();
            uint64_t v212 = *(void *)v341;
            uint64_t v213 = *(void *)&v341[8];
            uint64_t v214 = *(void *)&v341[16];
            uint64_t v215 = *(void *)&v341[24];
            uint64_t v216 = *(void *)&v341[32];
            uint64_t v217 = *(void *)&v341[40];
            if (!CGAffineTransformIsIdentity((CGAffineTransform *)v341))
            {
              *(void *)v341 = 0x3FF0000000000000;
              *(void *)&v341[8] = 0;
              *(void *)&v341[16] = 0;
              *(void *)&v341[24] = 0x3FF0000000000000;
              *(void *)&v341[32] = 0;
              *(void *)&v341[40] = 0;
              RBDrawingStateSetCTM();
              *(void *)v341 = v212;
              *(void *)&v341[8] = v213;
              *(void *)&v341[16] = v214;
              *(void *)&v341[24] = v215;
              *(void *)&v341[32] = v216;
              *(void *)&v341[40] = v217;
              RBDrawingStateAddAffineTransformStyle();
            }
            swift_retain();
            uint64_t v218 = RBDrawingStateBeginLayer();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v219 = swift_retain();
            *(void *)&v338[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v219, v218, 0, 0);
            *(void *)v341 = v334;
            *(_WORD *)&v341[8] = v332;
            v341[10] = (_BYTE)v333;
            swift_retain();
            DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
            swift_release();
            RBDrawingStateDrawLayer();
            swift_release_n();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v41 = v329;
            LOBYTE(v3) = v328;
          }
          break;
        default:
LABEL_69:
          *(void *)v341 = v334;
          *(_WORD *)&v341[8] = v332;
          v341[10] = (_BYTE)v333;
          DisplayList.GraphicsRenderer.render(list:in:)(v341, v335);
          swift_bridgeObjectRelease();
          break;
      }
LABEL_216:
      if ((v3 & 1) == 0) {
        GraphicsContext.translateBy(x:y:)(-x, -y);
      }
      return outlined consume of DisplayList.Effect(v41, v17, v331);
    case 2uLL:
      v359 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v51 = v358;
      id v52 = (char **)(v4 + 104);
      uint64_t result = swift_beginAccess();
      if (!*(void *)(*(void *)(v4 + 104) + 16)) {
        return result;
      }
      swift_beginAccess();
      if (!*((void *)*v52 + 2))
      {
        __break(1u);
LABEL_221:
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1);
        void *v52 = a1;
        goto LABEL_61;
      }
      uint64_t v327 = v4;
      uint64_t v53 = a2;
      outlined retain of DisplayList.Item((uint64_t)&v353);
      specialized Array._customRemoveLast()((uint64_t)v336);
      if (v336[20])
      {
        specialized Array.remove(at:)(*((void *)*v52 + 2) - 1, (uint64_t)v336);
        LODWORD(v17) = *(_DWORD *)v336;
        LODWORD(v4) = *(_DWORD *)&v336[4];
        LODWORD(a2) = *(_DWORD *)&v336[8];
        LODWORD(v3) = *(_DWORD *)&v336[12];
        LODWORD(v7) = *(_DWORD *)&v336[16];
      }
      else
      {
        LODWORD(v3) = *(_DWORD *)&v336[12];
        LODWORD(v7) = *(_DWORD *)&v336[16];
        LODWORD(v4) = *(_DWORD *)&v336[4];
        LODWORD(a2) = *(_DWORD *)&v336[8];
        LODWORD(v17) = *(_DWORD *)v336;
      }
      swift_endAccess();
      uint64_t v54 = *(void *)(v51 + 16);
      if (v54)
      {
        unint64_t v55 = v51 + 36;
        while (1)
        {
          _ZF = *(_DWORD *)(v55 - 4) == v17 && *(_DWORD *)v55 == v4;
          BOOL v57 = _ZF && *(_DWORD *)(v55 + 4) == a2;
          BOOL v58 = v57 && *(_DWORD *)(v55 + 8) == v3;
          if (v58 && *(_DWORD *)(v55 + 12) == v7) {
            break;
          }
          v55 += 40;
          if (!--v54) {
            goto LABEL_58;
          }
        }
        uint64_t v60 = *(void *)(v55 + 20);
        LODWORD(v334) = *(unsigned __int16 *)(v55 + 28);
        LODWORD(v333) = *(unsigned __int8 *)(v55 + 30);
        swift_bridgeObjectRetain();
        outlined release of DisplayList.Item((uint64_t)&v353);
        CGPoint v61 = v353;
        GraphicsContext.translateBy(x:y:)(v353.x, v353.y);
        *(void *)&v338[0] = v60;
        WORD4(v338[0]) = v334;
        BYTE10(v338[0]) = (_BYTE)v333;
        DisplayList.GraphicsRenderer.render(list:in:)(v338, v53);
        swift_bridgeObjectRelease();
        GraphicsContext.translateBy(x:y:)(-v61.x, -v61.y);
      }
      else
      {
LABEL_58:
        outlined release of DisplayList.Item((uint64_t)&v353);
      }
      swift_beginAccess();
      a1 = *v52;
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      void *v52 = a1;
      if ((v62 & 1) == 0) {
        goto LABEL_221;
      }
LABEL_61:
      unint64_t v64 = *((void *)a1 + 2);
      unint64_t v63 = *((void *)a1 + 3);
      if (v64 >= v63 >> 1)
      {
        a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, a1);
        void *v52 = a1;
      }
      *((void *)a1 + 2) = v64 + 1;
      double v65 = &a1[20 * v64];
      *((_DWORD *)v65 + 8) = v17;
      *((_DWORD *)v65 + 9) = v4;
      *((_DWORD *)v65 + 10) = a2;
      *((_DWORD *)v65 + 11) = v3;
      *((_DWORD *)v65 + 12) = v7;
      return swift_endAccess();
    case 3uLL:
      return result;
    default:
      v359 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v18 = v358;
      switch(v358 >> 60)
      {
        case 1uLL:
          long long v334 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v95 = *a2;
          CGPoint v96 = v353;
          CGSize v97 = v354;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          v366.origin = v96;
          v366.size = v97;
          if (CGRectIsNull(v366))
          {
            uint64_t v98 = 0;
            uint64_t v99 = 0;
            uint64_t v100 = 0;
            uint64_t v101 = 0;
            unsigned __int8 v102 = 6;
          }
          else
          {
            unsigned __int8 v102 = 0;
            uint64_t v99 = *(void *)&v96.y;
            uint64_t v98 = *(void *)&v96.x;
            uint64_t v101 = *(void *)&v97.height;
            uint64_t v100 = *(void *)&v97.width;
          }
          *(void *)&long long v350 = v98;
          *((void *)&v350 + 1) = v99;
          *(void *)&long long v351 = v100;
          *((void *)&v351 + 1) = v101;
          LOBYTE(v352) = v102;
          *(_OWORD *)v341 = v334;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v341);
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v341, (uint64_t)v338);
          *(void *)v336 = 256;
          memset(&v336[8], 0, 32);
          char v337 = 0;
          GraphicsContext.draw(_:with:style:)((uint64_t)&v350, (uint64_t)v338, (uint64_t)v336, v95);
          outlined consume of Path.Storage(v98, v99, v100, v101, v102);
          goto LABEL_182;
        case 2uLL:
          long long v334 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          Swift::UInt32 v13 = *(char **)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v19 = (double *)*a2;
          v347 = (double *)*a2;
          uint64_t v20 = *((void *)v13 + 2);
          if (v20)
          {
            double y = v354.height;
            double x = v354.width;
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v82 = (uint64_t)&v13[120 * v20 - 24];
            do
            {
              if (v20 > *((void *)v13 + 2)) {
                goto LABEL_184;
              }
              --v20;
              int v83 = *(_DWORD *)(v82 + 48);
              char v84 = *(unsigned char *)(v82 + 52);
              *(_OWORD *)v341 = *(_OWORD *)(v82 - 64);
              *(_OWORD *)&v341[16] = *(_OWORD *)(v82 - 48);
              *(_OWORD *)&v341[32] = *(_OWORD *)(v82 - 32);
              *(_OWORD *)&v341[48] = *(_OWORD *)(v82 - 16);
              *(_OWORD *)&v341[64] = *(_OWORD *)v82;
              long long v342 = *(_OWORD *)(v82 + 16);
              long long v343 = *(_OWORD *)(v82 + 32);
              int v344 = v83;
              char v345 = v84;
              uint64_t v19 = (double *)&v347;
              GraphicsContext.addFilter(_:in:)((uint64_t)v341, 0.0, 0.0, x, y, v76, v77, v78, v79, v80, v81);
              v82 -= 120;
            }
            while (v20);
            swift_bridgeObjectRelease();
            uint64_t v19 = v347;
          }
          else
          {
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_retain();
          }
          CGPoint v85 = v353;
          CGSize v86 = v354;
          swift_retain();
          v365.origin = v85;
          v365.size = v86;
          BOOL v87 = CGRectIsNull(v365);
          if (v87) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = *(void *)&v85.x;
          }
          if (v87) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = *(void *)&v85.y;
          }
          *(void *)&long long v350 = v35;
          *((void *)&v350 + 1) = v36;
          if (v87) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = *(void *)&v86.width;
          }
          if (v87) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = *(void *)&v86.height;
          }
          *(void *)&long long v351 = v37;
          *((void *)&v351 + 1) = v38;
          if (v87) {
            unsigned __int8 v39 = 6;
          }
          else {
            unsigned __int8 v39 = 0;
          }
          LOBYTE(v352) = v39;
          *(_OWORD *)v341 = v334;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v341);
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v341, (uint64_t)v338);
          *(void *)v336 = 256;
          memset(&v336[8], 0, 32);
          char v337 = 0;
          GraphicsContext.draw(_:with:style:)((uint64_t)&v350, (uint64_t)v338, (uint64_t)v336, (uint64_t)v19);
          goto LABEL_93;
        case 3uLL:
          uint64_t v127 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          char v128 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          char v129 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x4C);
          char v130 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          char v131 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
          __int16 v132 = *(_WORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x72);
          uint64_t v133 = *a2;
          char v134 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          *(void *)v341 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          double v126 = *(void **)v341;
          v341[8] = v134;
          *(_OWORD *)&v341[16] = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          *(void *)&v341[32] = v127;
          v341[40] = v128;
          *(_OWORD *)&v341[44] = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
          v341[60] = v129;
          long long v135 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          *(_OWORD *)&v341[64] = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          long long v342 = v135;
          LOBYTE(v343) = v130;
          BYTE1(v343) = v131;
          WORD1(v343) = v132;
          CGPoint v136 = v353;
          CGSize v137 = v354;
          uint64_t v339 = 0;
          memset(v338, 0, sizeof(v338));
          char v340 = -1;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          outlined copy of GraphicsImage.Contents?(v126, v134);
          GraphicsContext.draw(_:in:style:shading:)((uint64_t)v341, 256, (uint64_t)v338, v133, v136.x, v136.y, v137.width, v137.height);
          outlined consume of GraphicsImage.Contents?(v126, v134);
          goto LABEL_182;
        case 4uLL:
          long long v138 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          *(_OWORD *)v336 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          *(_OWORD *)&v336[16] = v138;
          v336[32] = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v139 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v140 = *(unsigned __int8 *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          uint64_t v141 = a2;
          int v142 = *(unsigned __int8 *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
          CGPoint v143 = v353;
          CGSize v144 = v354;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          outlined retain of Path((uint64_t)v336, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          GraphicsContext.translateBy(x:y:)(v143.x, v143.y);
          uint64_t v145 = 256;
          if (!v142) {
            uint64_t v145 = 0;
          }
          *(void *)v341 = v145 | v140;
          memset(&v341[8], 0, 33);
          unint64_t v146 = *v141;
          v338[0] = 0uLL;
          v338[1] = v144;
          LOBYTE(v338[2]) = 0;
          (*(void (**)(unsigned char *, unsigned char *, unint64_t, _OWORD *))(*(void *)v139 + 80))(v336, v341, v146, v338);
          GraphicsContext.translateBy(x:y:)(-v143.x, -v143.y);
          swift_release();
          outlined retain of Path((uint64_t)v336, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          goto LABEL_182;
        case 5uLL:
          long long v103 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v350 = *(_OWORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v351 = v103;
          LOBYTE(v352) = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          int v104 = (uint64_t *)a2;
          uint64_t v105 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v106 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          uint64_t v107 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
          uint64_t v108 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          uint64_t v109 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
          uint64_t v110 = *(unsigned int *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          uint64_t v111 = *v104;
          v347 = (double *)*v104;
          CGPoint v112 = v353;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          outlined retain of DisplayList.Item((uint64_t)&v353);
          outlined retain of Path((uint64_t)&v350, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          if (v112.x != 0.0 || v112.y != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v335 = (unint64_t *)RBDrawingStateInit();
              type metadata accessor for GraphicsContext.Storage();
              swift_allocObject();
              uint64_t v118 = swift_retain();
              uint64_t v119 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v118, (uint64_t)v335, 1, 0);
              v347 = (double *)v119;
              swift_release();
              uint64_t v111 = v119;
            }
            RBDrawingStateTranslateCTM();
          }
          unint64_t v120 = v110 | ((unint64_t)*(unsigned int *)(v111 + 52) << 32);
          *(void *)v341 = v105;
          *(void *)&v341[8] = v106;
          *(void *)&v341[16] = v107;
          *(void *)&v341[24] = v108;
          *(void *)&v341[32] = v109;
          *(void *)&v341[40] = v120;
          *(void *)&v341[48] = 2;
          memset(&v341[56], 0, 24);
          *(void *)&long long v342 = 0x20000000;
          GraphicsContext.addFilter(_:options:)((uint64_t)v341, 0, v113, v114, v115, v116, v117);
          uint64_t v121 = (uint64_t)v347;
          __asm { FMOV            V0.4S, #1.0 }
          *(_OWORD *)v341 = _Q0;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v341);
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v341, (uint64_t)v338);
          *(void *)v336 = 256;
          memset(&v336[8], 0, 32);
          char v337 = 0;
          swift_retain();
          GraphicsContext.draw(_:with:style:)((uint64_t)&v350, (uint64_t)v338, (uint64_t)v336, v121);
          outlined release of DisplayList.Item((uint64_t)&v353);
          swift_release();
          outlined retain of Path((uint64_t)&v350, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          goto LABEL_105;
        case 6uLL:
          uint64_t v147 = outlined init with copy of AnyTrackedValue((v358 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v341);
          MEMORY[0x270FA5388](v147);
          int v148 = *(unsigned __int8 *)(v4 + 96);
          *(unsigned char *)(v4 + 96) = 0;
          if (v148) {
            char v149 = 0;
          }
          else {
            char v149 = 16;
          }
          outlined retain of DisplayList.Item((uint64_t)&v353);
          GraphicsContext.drawLayer(flags:content:)(v149, (void (*)(uint64_t *))partial apply for closure #1 in DisplayList.GraphicsRenderer.render(item:in:));
          *(unsigned char *)(v4 + 96) = v148;
          goto LABEL_114;
        case 7uLL:
          outlined init with copy of AnyTrackedValue((v358 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v341);
          CGPoint v88 = v353;
          CGSize v89 = v354;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          GraphicsContext.translateBy(x:y:)(v88.x, v88.y);
          int v90 = a2;
          uint64_t v91 = *(void *)&v341[24];
          uint64_t v92 = *(void *)&v341[32];
          __swift_project_boxed_opaque_existential_1(v341, *(uint64_t *)&v341[24]);
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, CGFloat, CGFloat))(v92 + 32))(*v90, v4, v91, v92, v89.width, v89.height);
          GraphicsContext.translateBy(x:y:)(-v88.x, -v88.y);
LABEL_114:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v341);
          goto LABEL_182;
        case 8uLL:
          unint64_t v330 = v17;
          v150 = *(void **)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v151 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          double v152 = *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          double v153 = *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v154 = v4;
          int v155 = *(unsigned __int8 *)(v4 + 96);
          *(unsigned char *)(v154 + 96) = 0;
          if (v155) {
            char v156 = 0;
          }
          else {
            char v156 = 16;
          }
          uint64_t v157 = *a2;
          outlined retain of DisplayList.Item((uint64_t)&v353);
          swift_retain();
          swift_retain();
          swift_retain();
          specialized GraphicsContext.drawLayer(flags:content:)(v156, v152, v153, v157, &v353.x, (void *)v154, v18, v330, v150, v151);
          swift_release();
          outlined release of DisplayList.Item((uint64_t)&v353);
          *(unsigned char *)(v154 + 96) = v155;
          swift_release();
          return swift_release();
        case 9uLL:
          uint64_t v71 = *(void *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          __int16 v72 = *(_WORD *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          char v73 = *(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
          double v74 = v353.x - *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          double v75 = v353.y - *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          if ((*(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x3C) & 0x80) != 0)
          {
            v268 = *(unint64_t **)(*a2 + 24);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            v335 = v268;
            uint64_t v269 = RBDrawingStateBeginLayer();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v270 = swift_retain();
            *(void *)&v338[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v270, v269, 0, 1);
            swift_retain();
            if (v74 != 0.0 || v75 != 0.0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v271 = RBDrawingStateInit();
                swift_allocObject();
                uint64_t v272 = swift_retain();
                *(void *)&v338[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v272, v271, 1, 0);
                swift_release();
              }
              RBDrawingStateTranslateCTM();
            }
            *(void *)v341 = v71;
            *(_WORD *)&v341[8] = v72;
            v341[10] = v73;
            DisplayList.GraphicsRenderer.render(list:in:)(v341, v338);
            swift_release();
            RBDrawingStateDrawLayer();
            swift_release();
            outlined release of DisplayList.Item((uint64_t)&v353);
          }
          else
          {
            outlined retain of DisplayList.Item((uint64_t)&v353);
            GraphicsContext.translateBy(x:y:)(v74, v75);
            *(void *)v341 = v71;
            *(_WORD *)&v341[8] = v72;
            v341[10] = v73;
            DisplayList.GraphicsRenderer.render(list:in:)(v341, a2);
            GraphicsContext.translateBy(x:y:)(-v74, -v75);
          }
          goto LABEL_182;
        case 0xAuLL:
          double v93 = v353.x - *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          double v94 = v353.y - *(double *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          if ((*(unsigned char *)((v358 & 0xFFFFFFFFFFFFFFFLL) + 0x34) & 0x80) != 0)
          {
            char v273 = *(unsigned char *)(v4 + 96);
            *(unsigned char *)(v4 + 96) = 0;
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_unknownObjectRetain();
            uint64_t v274 = RBDrawingStateBeginLayer();
            type metadata accessor for GraphicsContext.Storage();
            swift_allocObject();
            uint64_t v275 = swift_retain();
            GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v275, v274, 0, 1);
            swift_retain();
            if (v93 != 0.0 || v94 != 0.0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v276 = RBDrawingStateInit();
                swift_allocObject();
                uint64_t v277 = swift_retain();
                GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v277, v276, 1, 0);
                swift_release();
              }
              RBDrawingStateTranslateCTM();
            }
            RBDrawingStateDrawDisplayList2();
            swift_release();
            RBDrawingStateDrawLayer();
            swift_release();
            *(unsigned char *)(v4 + 96) = v273;
            outlined release of DisplayList.Item((uint64_t)&v353);
          }
          else
          {
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_unknownObjectRetain();
            GraphicsContext.translateBy(x:y:)(v93, v94);
            RBDrawingStateDrawDisplayList2();
            GraphicsContext.translateBy(x:y:)(-v93, -v94);
          }
          swift_unknownObjectRelease();
          goto LABEL_182;
        case 0xBuLL:
          return result;
        case 0xCuLL:
          goto LABEL_182;
        default:
          long long v334 = *(_OWORD *)(v358 + 20);
          Swift::UInt32 v13 = *(char **)(v358 + 40);
          uint64_t v19 = (double *)*a2;
          *(void *)&long long v350 = *a2;
          uint64_t v20 = *((void *)v13 + 2);
          if (v20)
          {
            double y = v354.height;
            double x = v354.width;
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v29 = (uint64_t)&v13[120 * v20 - 24];
            do
            {
              if (v20 > *((void *)v13 + 2))
              {
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                uint64_t v278 = v4;
                uint64_t v184 = *(void *)&v10[*((int *)v19 + 5)];
                outlined copy of DisplayList.Effect(v278, v3, 1);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs);
LABEL_186:
                v279 = v335;
                *(void *)(v17 + 88) = v184;
                swift_bridgeObjectRelease();
                Swift::Bool v280 = ((unsigned int (*)(char *, uint64_t, double *))v20)(v13, 1, v19) != 1;
                DisplayList.Index.updateArchive(entering:)(v280);
                *(void *)&v338[0] = v334;
                WORD4(v338[0]) = v332;
                BYTE10(v338[0]) = (_BYTE)v333;
                DisplayList.GraphicsRenderer.render(list:in:)(v338, v279);
                _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
                swift_bridgeObjectRelease();
                *(void *)(v17 + 88) = v330;
                swift_bridgeObjectRelease();
                uint64_t v41 = v329;
                outlined consume of DisplayList.Effect(v329, v3, 1);
                LOBYTE(v17) = v3;
LABEL_215:
                LOBYTE(v3) = v328;
                goto LABEL_216;
              }
              --v20;
              int v30 = *(_DWORD *)(v29 + 48);
              char v31 = *(unsigned char *)(v29 + 52);
              *(_OWORD *)v341 = *(_OWORD *)(v29 - 64);
              *(_OWORD *)&v341[16] = *(_OWORD *)(v29 - 48);
              *(_OWORD *)&v341[32] = *(_OWORD *)(v29 - 32);
              *(_OWORD *)&v341[48] = *(_OWORD *)(v29 - 16);
              *(_OWORD *)&v341[64] = *(_OWORD *)v29;
              long long v342 = *(_OWORD *)(v29 + 16);
              long long v343 = *(_OWORD *)(v29 + 32);
              int v344 = v30;
              char v345 = v31;
              uint64_t v19 = (double *)&v350;
              GraphicsContext.addFilter(_:in:)((uint64_t)v341, 0.0, 0.0, x, y, v23, v24, v25, v26, v27, v28);
              v29 -= 120;
            }
            while (v20);
            swift_bridgeObjectRelease();
            uint64_t v19 = (double *)v350;
          }
          else
          {
            outlined retain of DisplayList.Item((uint64_t)&v353);
            outlined retain of DisplayList.Item((uint64_t)&v353);
            swift_retain();
          }
          CGPoint v32 = v353;
          CGSize v33 = v354;
          swift_retain();
          v364.origin = v32;
          v364.size = v33;
          BOOL v34 = CGRectIsNull(v364);
          if (v34) {
            uint64_t v35 = 0;
          }
          else {
            uint64_t v35 = *(void *)&v32.x;
          }
          if (v34) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = *(void *)&v32.y;
          }
          *(void *)v336 = v35;
          *(void *)&v336[8] = v36;
          if (v34) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = *(void *)&v33.width;
          }
          if (v34) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = *(void *)&v33.height;
          }
          *(void *)&v336[16] = v37;
          *(void *)&v336[24] = v38;
          if (v34) {
            unsigned __int8 v39 = 6;
          }
          else {
            unsigned __int8 v39 = 0;
          }
          v336[32] = v39;
          *(_OWORD *)v341 = v334;
          memset(&v341[16], 0, 57);
          *(void *)&v338[0] = 256;
          *(_OWORD *)((char *)v338 + 8) = 0u;
          *(_OWORD *)((char *)&v338[1] + 8) = 0u;
          BYTE8(v338[2]) = 0;
          GraphicsContext.draw(_:with:style:)((uint64_t)v336, (uint64_t)v341, (uint64_t)v338, v19);
LABEL_93:
          outlined consume of Path.Storage(v35, v36, v37, v38, v39);
          swift_release();
          outlined release of DisplayList.Item((uint64_t)&v353);
LABEL_105:
          swift_release();
LABEL_182:
          uint64_t result = outlined release of DisplayList.Item((uint64_t)&v353);
          break;
      }
      return result;
  }
}

uint64_t outlined init with take of DisplayList.Item.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

void GraphicsContext.translateBy(x:y:)(double a1, double a2)
{
  unint64_t v3 = v2;
  if (a1 != 0.0 || a2 != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v5 = swift_retain();
      uint64_t *v3 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
  }
}

uint64_t outlined retain of DisplayList.Item(uint64_t a1)
{
  return a1;
}

void type metadata accessor for DisplayList.ArchiveIDs?()
{
  if (!lazy cache variable for type metadata for DisplayList.ArchiveIDs?)
  {
    type metadata accessor for DisplayList.ArchiveIDs();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?);
    }
  }
}

uint64_t specialized GraphicsContext.drawLayer(flags:content:)(char a1, double a2, double a3, uint64_t a4, double *a5, void *a6, uint64_t a7, unsigned int a8, void *a9, uint64_t a10)
{
  uint64_t v16 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v17 = swift_retain();
  uint64_t v22 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v17, v16, 0, (a1 & 0x20) == 0);
  swift_retain();
  closure #2 in DisplayList.GraphicsRenderer.render(item:in:)((uint64_t)&v22, a5, a6, a2, a3, a7, a8, a9, a10);
  swift_release();
  RBDrawingStateDrawLayer();
  return swift_release();
}

uint64_t outlined release of DisplayList.Item(uint64_t a1)
{
  return a1;
}

uint64_t closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t a1, double *a2, void *a3, double a4, double a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  GraphicsContext.translateBy(x:y:)(*a2, a2[1]);
  unint64_t v16 = a3[6];
  unint64_t v17 = a3[7];
  double v18 = fmax(round(GraphicsContext.userToDeviceScale.getter()), 1.0);
  swift_beginAccess();
  uint64_t v19 = a3[2];
  if (*(void *)(v19 + 16)
    && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, a7, v18), (v21 & 1) != 0))
  {
    id v22 = *(id *)(*(void *)(v19 + 56) + 8 * v20);
    swift_endAccess();
    swift_unknownObjectRetain();
  }
  else
  {
    swift_endAccess();
    id v22 = closure #1 in implicit closure #1 in closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(v18, a4, a5, a1, v16, v17, a7, a8, a9);
  }
  swift_beginAccess();
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = a3[4];
  a3[4] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v22, v16, v17, a7, isUniquelyReferenced_nonNull_native, v18);
  a3[4] = v25;
  swift_bridgeObjectRelease();
  swift_endAccess();
  RBDrawingStateDrawDisplayList();
  return swift_unknownObjectRelease();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, unint64_t a3, __int16 a4, char a5, double a6)
{
  double v7 = (void **)v6;
  long long v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a6);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    id v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a6);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  id v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a4, a1, v22, a6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, Swift::UInt16 a3, double a4)
{
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a3);
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  Swift::Int v11 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v11, a4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, double a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t result = a4 & ~v7;
  if ((*(void *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v9 = ~v7;
    do
    {
      uint64_t v10 = *(void *)(v5 + 48) + 32 * result;
      double v11 = *(double *)(v10 + 24);
      BOOL v16 = *(_DWORD *)v10 == a1
         && *(_DWORD *)(v10 + 4) == HIDWORD(a1)
         && *(_DWORD *)(v10 + 8) == a2
         && *(_DWORD *)(v10 + 12) == HIDWORD(a2)
         && *(unsigned __int16 *)(v10 + 16) == a3;
      if (v11 != a5) {
        BOOL v16 = 0;
      }
      if (v16) {
        break;
      }
      unint64_t result = (result + 1) & v9;
    }
    while (((*(void *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6, double a7)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = a6[6] + 32 * result;
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_WORD *)(v7 + 16) = a4;
  *(double *)(v7 + 24) = a7;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

double GraphicsContext.userToDeviceScale.getter()
{
  RBDrawingStateGetCTM();
  double v0 = v9 * v9 + v10 * v10;
  double v1 = v11 * v11 + v12 * v12;
  BOOL v2 = v1 == 1.0 && v0 == 1.0;
  double v3 = (sqrt(v0) + sqrt(v1)) * 0.5;
  if (v2) {
    double v4 = 1.0;
  }
  else {
    double v4 = v3;
  }
  id v5 = (id)RBDrawingStateGetDisplayList();
  objc_msgSend(v5, sel_deviceScale);
  double v7 = v6;

  return v7 * v4;
}

id closure #1 in implicit closure #1 in closure #2 in DisplayList.GraphicsRenderer.render(item:in:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v14, sel_setDefaultColorSpace_, RBDrawingStateGetDefaultColorSpace());
  objc_msgSend(v14, sel_setDeviceScale_, a1);
  RBDisplayListGetState();
  id v15 = (id)RBDrawingStateBeginCGContext();
  id v16 = objc_msgSend(objc_allocWithZone((Class)CoreGraphicsContext), sel_initWithCGContext_, v15);
  objc_msgSend(v16, sel_push);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v17 = static TextDrawingContext.shared;
  if (a8[27])
  {
    swift_retain();
    BOOL v18 = NSAttributedString.isDynamic.getter();
  }
  else
  {
    swift_retain();
    BOOL v18 = 0;
  }
  (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t, double, double, double, double, double, double))(*a8 + 288))(1, v18, v17, a9, 0.0, 0.0, a2, a3, a2, a3);
  swift_release();
  [v16 pop];

  RBDrawingStateEndCGContext();
  id v19 = objc_msgSend(v14, sel_moveContents);

  return v19;
}

uint64_t type metadata accessor for DisplayList.ArchiveIDs()
{
  uint64_t result = type metadata singleton initialization cache for DisplayList.ArchiveIDs;
  if (!type metadata singleton initialization cache for DisplayList.ArchiveIDs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GraphicsContext.identifier.setter()
{
  double v1 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *double v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v3, v2, 1, 0);
    swift_release();
  }

  return RBDrawingStateSetIdentifier();
}

uint64_t type metadata accessor for GraphicsContext.Storage()
{
  return self;
}

uint64_t GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = v4;
  *(_OWORD *)(v4 + 32) = xmmword_24619B520;
  *(void *)(v4 + 48) = 1065353216;
  *(void *)(v4 + 56) = 0x7FF8000000000000;
  uint64_t v10 = *(void *)(a1 + 16);
  int v11 = *(_DWORD *)(v10 + 64);
  if (v11 == RBDrawingStateGetDefaultColorSpace())
  {
    *(void *)(v5 + 16) = v10;
    swift_retain();
  }
  else
  {
    id v17 = (id)RBDrawingStateGetDisplayList();
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(a1 + 40);
    if (v12 == 1)
    {
      uint64_t v13 = *(void *)(v10 + 48);
      uint64_t v14 = *(void *)(v10 + 56);
      swift_retain();
      swift_retain();
    }
    v18[0] = v13;
    v18[1] = v14;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    outlined copy of EnvironmentValues?(v12);
    *(void *)(v5 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v17, v18);
  }
  *(void *)(v5 + 24) = a2;
  *(unsigned char *)(v5 + 64) = a3 & 1;
  if (a4)
  {
    swift_release();
  }
  else
  {
    *(_DWORD *)(v5 + 48) = *(_DWORD *)(a1 + 48);
    int v15 = *(_DWORD *)(a1 + 52);
    swift_release();
    *(_DWORD *)(v5 + 52) = v15;
  }
  return v5;
}

uint64_t EnvironmentValues.foregroundColor.getter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.defaultForegroundColor.getter((uint64_t (*)(void, uint64_t))EnvironmentValues.foregroundStyle.getter, a2);
}

uint64_t _Placement.init(proposedSize:aligning:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6 = *(unsigned char *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  char v8 = *(unsigned char *)(result + 24);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  *(double *)(a2 + 32) = a3;
  *(double *)(a2 + 40) = a4;
  *(double *)(a2 + 48) = a3 * a5;
  *(double *)(a2 + 56) = a4 * a6;
  return result;
}

void one-time initialization function for conditionalCache()
{
  static ViewDescriptor.conditionalCache = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

uint64_t static Text.+ infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  type metadata accessor for ConcatenatedTextStorage();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(unsigned char *)(v16 + 32) = a3 & 1;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  *(void *)(v16 + 56) = a6;
  a7 &= 1u;
  *(unsigned char *)(v16 + 64) = a7;
  *(void *)(v16 + 72) = a8;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(a5, a6, a7);
  swift_bridgeObjectRetain();
  return v16;
}

uint64_t type metadata accessor for ConcatenatedTextStorage()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in _BackgroundStyleModifier<A>.BackgroundInfo()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for Subview()
{
  return &type metadata for Subview;
}

ValueMetadata *type metadata accessor for AccessibilityIdentifierStorage()
{
  return &type metadata for AccessibilityIdentifierStorage;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKind.Builtin()
{
  return &type metadata for ContainerBackgroundKind.Builtin;
}

ValueMetadata *type metadata accessor for ScrollGeometryState()
{
  return &type metadata for ScrollGeometryState;
}

ValueMetadata *type metadata accessor for PadInterfaceIdiom()
{
  return &type metadata for PadInterfaceIdiom;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferenceBridgeKey.Value()
{
  return &type metadata for EnvironmentValues.PreferenceBridgeKey.Value;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.Value()
{
  return &type metadata for ArchivedViewInput.Value;
}

ValueMetadata *type metadata accessor for ViewSpacing()
{
  return &type metadata for ViewSpacing;
}

uint64_t static ScrollTargetRole.ContentKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t Gesture.truePreference<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for TruePreferenceWritingGestureModifier();
  uint64_t WitnessTable = swift_getWitnessTable();

  return Gesture.modifier<A>(_:)(WitnessTable, a1, v4, a2);
}

uint64_t type metadata accessor for TruePreferenceWritingGestureModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ObservedObject.Wrapper.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for MainActor();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v6 = static MainActor.shared.getter();
  uint64_t v7 = MEMORY[0x263F8F500];

  return Binding.init<A>(_:keyPath:isolation:)(a2, a1, v6, v7, a3);
}

unsigned char *storeEnumTagSinglePayload for Text.Scale(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t one-time initialization function for v5()
{
  uint64_t result = swiftUI_v5_0_os_versions();
  static Semantics.uint64_t v5 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v5_0_os_versions()
{
  return 0x7E70901FFFFFFFFLL;
}

uint64_t closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v7 = *(_DWORD *)(a2 + *(int *)(type metadata accessor for PreferenceValues.Value() + 28));
  uint64_t v8 = *a1;
  if (v8 != -1 && v7 != 0)
  {
    if (v8 && v7 != -1) {
      unsigned int v7 = merge32(_:_:)(v8, v7);
    }
    *a1 = v7;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v10(a3, a2, AssociatedTypeWitness);
}

uint64_t PreferencesInputs.init(hostKeys:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t specialized LeafLayoutComputer.updateValue()()
{
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  char v7 = *(unsigned char *)(Value + 41);
  char v13 = 1;
  char v12 = 1;
  char v11 = 1;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  uint64_t v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unsigned char v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;
  long long v25;
  long long v26;
  long long v27;
  char v28;
  long long v29;
  long long v30;
  long long v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  char v7 = *(unsigned char *)(Value + 41);
  char v13 = 1;
  char v12 = 1;
  char v11 = 1;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  uint64_t v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  unsigned char v22[16];
  long long *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  unsigned char v34[24];
  _OWORD v35[10];
  unsigned char v36[19];
  char v37;
  char v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  unsigned char v50[24];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  uint64_t v62;
  long long v63;
  long long v64;
  long long v65;
  char v66;
  long long v67;
  long long v68;
  long long v69;
  char v70;
  long long v71;
  long long v72;
  long long v73;
  char v74;

  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(_OWORD *)(Value + 48);
  uint64_t v3 = *(_OWORD *)Value;
  uint64_t v2 = *(_OWORD *)(Value + 16);
  void v35[2] = *(_OWORD *)(Value + 32);
  v35[3] = v1;
  v35[0] = v3;
  v35[1] = v2;
  uint64_t v4 = *(_OWORD *)(Value + 112);
  char v6 = *(_OWORD *)(Value + 64);
  uint64_t v5 = *(_OWORD *)(Value + 80);
  v35[6] = *(_OWORD *)(Value + 96);
  v35[7] = v4;
  v35[4] = v6;
  v35[5] = v5;
  uint64_t v8 = *(_OWORD *)(Value + 144);
  char v7 = *(_OWORD *)(Value + 160);
  double v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v36[15] = *(_DWORD *)(Value + 175);
  v35[9] = v8;
  *(_OWORD *)uint64_t v36 = v7;
  v35[8] = v9;
  uint64_t v10 = *(_OWORD *)(Value + 144);
  char v11 = *(_OWORD *)(Value + 112);
  char v32 = *(_OWORD *)(Value + 128);
  CGSize v33 = v10;
  char v12 = *(_OWORD *)(Value + 144);
  *(_OWORD *)BOOL v34 = *(_OWORD *)(Value + 160);
  char v13 = *(_OWORD *)(Value + 80);
  uint64_t v14 = *(_OWORD *)(Value + 48);
  char v28 = *(_OWORD *)(Value + 64);
  long long v29 = v13;
  uint64_t v15 = *(_OWORD *)(Value + 80);
  uint64_t v16 = *(_OWORD *)(Value + 112);
  long long v30 = *(_OWORD *)(Value + 96);
  long long v31 = v16;
  uint64_t v17 = *(_OWORD *)(Value + 16);
  char v24 = *(_OWORD *)Value;
  long long v25 = v17;
  uint64_t v18 = *(_OWORD *)(Value + 48);
  char v20 = *(_OWORD *)Value;
  char v19 = *(_OWORD *)(Value + 16);
  long long v26 = *(_OWORD *)(Value + 32);
  long long v27 = v18;
  uint64_t v48 = v32;
  unint64_t v49 = v12;
  *(_OWORD *)char v50 = *(_OWORD *)(Value + 160);
  uint64_t v44 = v28;
  uint64_t v45 = v15;
  uint64_t v46 = v30;
  uint64_t v47 = v11;
  unsigned __int8 v39 = 1;
  uint64_t v38 = 1;
  uint64_t v37 = 1;
  *(_DWORD *)&v34[15] = *(_DWORD *)(Value + 175);
  *(_DWORD *)&v50[15] = *(_DWORD *)(Value + 175);
  unint64_t v40 = v20;
  uint64_t v41 = v19;
  CGSize v42 = v26;
  uint64_t v43 = v14;
  int v59 = v32;
  uint64_t v60 = v12;
  CGPoint v61 = *(_OWORD *)v50;
  char v62 = *(void *)&v50[16];
  unint64_t v55 = v28;
  char v56 = v15;
  BOOL v57 = v30;
  BOOL v58 = v11;
  unint64_t v51 = v20;
  id v52 = v19;
  uint64_t v53 = v26;
  uint64_t v54 = v14;
  double v65 = 0u;
  unint64_t v64 = 0u;
  unint64_t v63 = 0u;
  uint64_t v66 = 1;
  uint64_t v67 = 0u;
  uint64_t v68 = 0u;
  uint64_t v69 = 0u;
  char v70 = 1;
  uint64_t v71 = 0u;
  __int16 v72 = 0u;
  char v73 = 0u;
  double v74 = 1;
  long long v23 = &v51;
  outlined retain of Image.Resolved((uint64_t)v35);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v22, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  int v59 = v32;
  uint64_t v60 = v33;
  CGPoint v61 = *(_OWORD *)v34;
  char v62 = *(void *)&v34[16];
  unint64_t v55 = v28;
  char v56 = v29;
  BOOL v57 = v30;
  BOOL v58 = v31;
  unint64_t v51 = v24;
  id v52 = v25;
  uint64_t v53 = v26;
  uint64_t v54 = v27;
  double v65 = 0u;
  unint64_t v64 = 0u;
  unint64_t v63 = 0u;
  uint64_t v66 = 1;
  uint64_t v67 = 0u;
  uint64_t v68 = 0u;
  uint64_t v69 = 0u;
  char v70 = 1;
  uint64_t v71 = 0u;
  __int16 v72 = 0u;
  char v73 = 0u;
  double v74 = 1;
  return outlined release of Image.Resolved((uint64_t)&v51);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  char v3;
  unsigned char v5[16];
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;

  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 8);
  uint64_t v3 = *(unsigned char *)(Value + 9);
  double v9 = 1;
  uint64_t v8 = 1;
  char v7 = 1;
  uint64_t v10 = v1;
  char v11 = v2;
  char v12 = v3;
  char v13 = 0u;
  uint64_t v14 = 0u;
  uint64_t v15 = 0u;
  uint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  char v19 = 0u;
  char v20 = 1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  char v6 = &v10;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v5, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v10 = v1;
  char v11 = v2;
  char v12 = v3;
  char v13 = 0u;
  uint64_t v14 = 0u;
  uint64_t v15 = 0u;
  uint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  char v19 = 0u;
  char v20 = 1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  return outlined release of LinearGradient((uint64_t)&v10);
}

{
  uint64_t Value;
  uint64_t v1;
  char v2;
  char v3;
  unsigned char v5[16];
  uint64_t *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;

  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(unsigned char *)(Value + 8);
  uint64_t v3 = *(unsigned char *)(Value + 9);
  double v9 = 1;
  uint64_t v8 = 1;
  char v7 = 1;
  uint64_t v10 = v1;
  char v11 = v2;
  char v12 = v3;
  char v13 = 0u;
  uint64_t v14 = 0u;
  uint64_t v15 = 0u;
  uint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  char v19 = 0u;
  char v20 = 1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  char v6 = &v10;
  swift_retain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v5, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v10 = v1;
  char v11 = v2;
  char v12 = v3;
  char v13 = 0u;
  uint64_t v14 = 0u;
  uint64_t v15 = 0u;
  uint64_t v16 = 1;
  uint64_t v17 = 0u;
  uint64_t v18 = 0u;
  char v19 = 0u;
  char v20 = 1;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  return outlined release of ViewTransform((uint64_t)&v10);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  void v9[6];
  char v10[16];
  uint64_t *v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  long long v22;
  long long v23;
  long long v24;
  char v25;
  long long v26;
  long long v27;
  long long v28;
  char v29;
  long long v30;
  long long v31;
  long long v32;
  char v33;

  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  v9[1] = v9;
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  uint64_t v5 = *(unsigned char *)(Value + 33);
  char v6 = *(unsigned char *)(Value + 34);
  uint64_t v14 = 1;
  char v13 = 1;
  char v12 = 1;
  char v7 = *(unsigned char *)(Value + 32);
  uint64_t v15 = v1;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  char v19 = v7;
  char v20 = v5;
  long long v21 = v6;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 0u;
  long long v25 = 1;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 0u;
  long long v29 = 1;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 0u;
  CGSize v33 = 1;
  char v11 = &v15;
  v9[4] = &v15;
  outlined copy of Path.Storage(v1, v2, v3, v4, v7);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v10, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v15 = v1;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  char v19 = v7;
  char v20 = v5;
  long long v21 = v6;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 0u;
  long long v25 = 1;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 0u;
  long long v29 = 1;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 0u;
  CGSize v33 = 1;
  return _s7SwiftUI4PathVWOrTm_0((uint64_t)&v15, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unsigned char v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;
  long long v25;
  long long v26;
  long long v27;
  char v28;
  long long v29;
  long long v30;
  long long v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  char v7 = *(unsigned char *)(Value + 41);
  char v13 = 1;
  char v12 = 1;
  char v11 = 1;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  uint64_t v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unsigned char v9[16];
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  char v24;
  long long v25;
  long long v26;
  long long v27;
  char v28;
  long long v29;
  long long v30;
  long long v31;
  char v32;

  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(void *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  char v7 = *(unsigned char *)(Value + 41);
  char v13 = 1;
  char v12 = 1;
  char v11 = 1;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  uint64_t v10 = &v14;
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  char v19 = v6;
  char v20 = v7;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = 1;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 1;
  return outlined release of LinearGradient((uint64_t)&v14);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  int v12;
  int v13;
  int *v14;
  uint64_t *v15;
  unsigned char v16[16];
  uint64_t *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  long long v36;
  long long v37;
  long long v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;
  char v43;
  long long v44;
  long long v45;
  long long v46;
  char v47;

  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = &v12;
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  uint64_t v4 = *(unsigned char *)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(unsigned char *)(Value + 40);
  char v7 = *(void *)(Value + 48);
  uint64_t v8 = *(unsigned __int8 *)(Value + 57);
  char v12 = *(unsigned __int8 *)(Value + 56);
  char v13 = v8;
  double v9 = *(unsigned char *)(Value + 58);
  uint64_t v10 = *(unsigned char *)(Value + 59);
  char v19 = v4;
  uint64_t v18 = v6;
  char v24 = v4;
  char v28 = v4;
  long long v22 = 1;
  long long v21 = 1;
  char v20 = 1;
  long long v23 = v6;
  long long v25 = v1;
  long long v26 = v2;
  long long v27 = v3;
  long long v29 = v5;
  long long v30 = v6;
  long long v31 = v7;
  char v32 = v12;
  CGSize v33 = v8;
  BOOL v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = 0u;
  uint64_t v37 = 0u;
  uint64_t v38 = 0u;
  unsigned __int8 v39 = 1;
  unint64_t v40 = 0u;
  uint64_t v41 = 0u;
  CGSize v42 = 0u;
  uint64_t v43 = 1;
  uint64_t v45 = 0u;
  uint64_t v46 = 0u;
  uint64_t v44 = 0u;
  uint64_t v47 = 1;
  uint64_t v17 = &v25;
  uint64_t v15 = &v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v16, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  long long v25 = v1;
  long long v26 = v2;
  long long v27 = v3;
  char v28 = v19;
  long long v29 = v5;
  long long v30 = v18;
  long long v31 = v7;
  char v32 = v12;
  CGSize v33 = v13;
  BOOL v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = 0u;
  uint64_t v37 = 0u;
  uint64_t v38 = 0u;
  unsigned __int8 v39 = 1;
  unint64_t v40 = 0u;
  uint64_t v41 = 0u;
  CGSize v42 = 0u;
  uint64_t v43 = 1;
  uint64_t v45 = 0u;
  uint64_t v46 = 0u;
  uint64_t v44 = 0u;
  uint64_t v47 = 1;
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)&v25);
}

uint64_t specialized static View.makeViewList(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for LinearGradient, (void (*)(void))type metadata accessor for LinearGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Circle, (void (*)(void))type metadata accessor for Circle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Rectangle, (void (*)(void))type metadata accessor for Rectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for RoundedRectangle, (void (*)(void))type metadata accessor for RoundedRectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;
  uint64_t v57;

  BOOL v57 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v15 = v53;
  int v14 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v15;
  *(_DWORD *)(v22 + 60) = v14;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = (char *)v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v15;
  int v43 = v14;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, (uint64_t *)&v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (uint64_t)&type metadata for Rectangle.AsymmetricalInset, (void (*)(void))type metadata accessor for Rectangle.AsymmetricalInset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;
  uint64_t v57;

  BOOL v57 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v15 = v53;
  int v14 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v15;
  *(_DWORD *)(v22 + 60) = v14;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = (char *)v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v15;
  int v43 = v14;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, (uint64_t *)&v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (uint64_t)&type metadata for CombinedContentShape, (void (*)(void))type metadata accessor for CombinedContentShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  char v12;
  char *v14;
  int v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  char v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  char v27;
  uint64_t v28;

  int v28 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for SummarySymbol, (uint64_t)&v22);
  long long v6 = v22;
  unsigned __int8 v7 = v23;
  unsigned int v8 = DWORD1(v23);
  long long v9 = *(_OWORD *)(a2 + 48);
  unint64_t v18 = *(_OWORD *)(a2 + 32);
  int v19 = v9;
  unint64_t v20 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  uint64_t v16 = *(_OWORD *)a2;
  uint64_t v17 = v10;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v22) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v15, (uint64_t)&v22, a1, (uint64_t)&v16, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  uint64_t v11 = *((void *)&v22 + 1);
  int v14 = (char *)v22;
  uint64_t v12 = v23;
  unint64_t v24 = v18;
  uint64_t v25 = v19;
  int v26 = v20;
  char v27 = v21;
  uint64_t v22 = v16;
  long long v23 = v17;
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    outlined retain of _ViewListInputs((uint64_t)&v22);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v22, a3);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v22);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v22, a3);
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  if ((v12 & 1) == 0)
  {
    LOBYTE(v15) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v6, *((uint64_t *)&v6 + 1), v7, v14, v11, (uint64_t)&type metadata for SummarySymbol, (void (*)(void))type metadata accessor for SummarySymbol.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v22);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Rectangle._Inset, (void (*)(void))type metadata accessor for Rectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  int v18;
  uint64_t v19;
  int ShouldRecordTree;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  int v25;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  char v32;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  int v44;
  uint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  char v55;
  uint64_t v56;

  char v56 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v37);
  long long v6 = *(_OWORD *)(a2 + 32);
  unsigned __int8 v7 = *(_OWORD *)(a2 + 64);
  long long v53 = *(_OWORD *)(a2 + 48);
  long long v54 = v7;
  unsigned int v8 = *(_OWORD *)(a2 + 16);
  char v50 = *(_OWORD *)a2;
  long long v10 = v37;
  long long v9 = v38;
  uint64_t v11 = v39;
  uint64_t v12 = v40;
  long long v55 = *(unsigned char *)(a2 + 80);
  long long v51 = v8;
  long long v52 = v6;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v37) = v11;
  uint64_t v29 = a1;
  char v34 = v10;
  uint64_t v35 = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v37, a1, (uint64_t)&v50, v10, v9, v11 | ((unint64_t)v12 << 32));
  int v13 = v36;
  char v27 = v38;
  int v28 = v37;
  int v32 = v39;
  int v14 = v50;
  int v15 = v51;
  uint64_t v16 = v52;
  uint64_t v17 = v53;
  unint64_t v18 = DWORD2(v50);
  int v19 = *((void *)&v54 + 1);
  uint64_t v30 = v55;
  int v31 = v54;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v22 = (id)AGSubgraphGetCurrent();
  if (!v22) {
    __break(1u);
  }
  long long v23 = v22;
  type metadata accessor for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>(0, &lazy cache variable for type metadata for MutableBox<[Unmanaged<DynamicViewList<AnyView>.Item>]>, (uint64_t (*)(uint64_t))type metadata accessor for [Unmanaged<DynamicViewList<AnyView>.Item>], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
  unint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = MEMORY[0x263F8EE78];
  LODWORD(v37) = v13;
  unint64_t v38 = v21;
  uint64_t v39 = v18;
  int v41 = v15;
  int v42 = v16;
  int v43 = v17;
  uint64_t v44 = v31;
  uint64_t v45 = v19;
  uint64_t v46 = v30;
  int v47 = v23;
  uint64_t v48 = v24;
  char v49 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  type metadata accessor for ViewBodyAccessor<SummarySymbol>(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList);
  lazy protocol witness table accessor for type DynamicViewList<AnyView> and conformance DynamicViewList<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)a3 = v25;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(void *)(a3 + 48) = v17;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 1;
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v32 & 1) == 0)
  {
    LOBYTE(v37) = v11;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v29, v34, v35, v11, v28, v27, (const char *)&type metadata for _TestApp.RootView, (void (*)(void))type metadata accessor for _TestApp.RootView.Type);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<AnyShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for AnyShape, (void (*)(void))type metadata accessor for AnyShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Ellipse, (void (*)(void))type metadata accessor for Ellipse.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Ellipse._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Ellipse._Inset, (void (*)(void))type metadata accessor for Ellipse._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Capsule, (void (*)(void))type metadata accessor for Capsule.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Capsule._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Capsule._Inset, (void (*)(void))type metadata accessor for Capsule._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Circle._Inset, (void (*)(void))type metadata accessor for Circle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for Path, (void (*)(void))type metadata accessor for Path.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for UnevenRoundedRectangle, (void (*)(void))type metadata accessor for UnevenRoundedRectangle.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for UnevenRoundedRectangle._Inset, (void (*)(void))type metadata accessor for UnevenRoundedRectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for ContainerRelativeShape, (void (*)(void))type metadata accessor for ContainerRelativeShape.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for ContainerRelativeShape._Inset, (void (*)(void))type metadata accessor for ContainerRelativeShape._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v7;
  unsigned __int8 v8;
  unsigned int v9;
  long long v10;
  long long v11;
  char v12;
  unint64_t v14;
  uint64_t v15;
  int v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  char v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  char v28;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v23);
  unsigned __int8 v7 = v23;
  unsigned int v8 = v24;
  long long v9 = DWORD1(v24);
  long long v10 = *(_OWORD *)(a2 + 48);
  int v19 = *(_OWORD *)(a2 + 32);
  unint64_t v20 = v10;
  uint64_t v21 = *(_OWORD *)(a2 + 64);
  uint64_t v22 = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(_OWORD *)(a2 + 16);
  uint64_t v17 = *(_OWORD *)a2;
  unint64_t v18 = v11;
  outlined retain of _ViewListInputs(a2);
  LOBYTE(v23) = v8;
  specialized static View.makeBody(view:inputs:fields:)(&v16, (uint64_t)&v23, a1, (uint64_t)&v17, v7, *((uint64_t *)&v7 + 1), v8 | ((unint64_t)v9 << 32));
  int v14 = *((void *)&v23 + 1);
  int v15 = v23;
  uint64_t v12 = v24;
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
  uint64_t v25 = v19;
  int v26 = v20;
  char v27 = v21;
  int v28 = v22;
  long long v23 = v17;
  unint64_t v24 = v18;
  if (AGSubgraphShouldRecordTree())
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    AGSubgraphBeginTreeElement();
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v23, a3);
    AGSubgraphEndTreeElement();
  }
  else
  {
    outlined retain of _ViewListInputs((uint64_t)&v23);
    specialized static ModifiedContent<>._makeViewList(view:inputs:)((uint64_t)&v23, a3);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  if ((v12 & 1) == 0)
  {
    LOBYTE(v16) = v8;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, *((uint64_t *)&v7 + 1), v8, v15, v14, (const char *)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol, (void (*)(void))type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol.Type);
  }
  outlined release of _ViewListInputs((uint64_t)&v23);
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for EllipticalGradient, (void (*)(void))type metadata accessor for EllipticalGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle._Inset, ForegroundStyle>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for RoundedRectangle._Inset, (void (*)(void))type metadata accessor for RoundedRectangle._Inset.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for AngularGradient, (void (*)(void))type metadata accessor for AngularGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int ShouldRecordTree;
  char v34;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  void v50[5];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;

  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v51);
  long long v6 = v51;
  unsigned __int8 v7 = v52;
  unsigned int v8 = DWORD1(v52);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v9;
  long long v55 = *(_OWORD *)(a2 + 64);
  char v56 = *(unsigned char *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v10;
  outlined retain of _ViewListInputs(a2);
  char v36 = v7;
  LOBYTE(v37) = v7;
  int v26 = a1;
  specialized static View.makeBody(view:inputs:fields:)(v50, (uint64_t)&v37, a1, (uint64_t)&v51, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  unint64_t v24 = v38;
  uint64_t v25 = v37;
  char v34 = v39;
  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  uint64_t v11 = v51;
  uint64_t v12 = v52;
  int v13 = HIDWORD(v52);
  int v31 = DWORD2(v52);
  int v32 = DWORD2(v51);
  int v14 = v53;
  int v15 = DWORD1(v53);
  uint64_t v16 = *((void *)&v53 + 1);
  uint64_t v29 = *((void *)&v54 + 1);
  uint64_t v30 = v54;
  uint64_t v17 = *((void *)&v55 + 1);
  char v27 = v56;
  int v28 = v55;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v18 = AGCreateWeakAttribute();
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(0, &lazy cache variable for type metadata for UnaryElements<TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for TypedUnaryViewGenerator<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryElements);
  v50[3] = v21;
  v50[4] = &protocol witness table for UnaryElements<A>;
  uint64_t v22 = swift_allocObject();
  v50[0] = v22;
  *(_DWORD *)(v22 + 16) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  *(void *)(v22 + 24) = v11;
  *(_DWORD *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v12;
  *(_DWORD *)(v22 + 48) = v31;
  *(_DWORD *)(v22 + 52) = v13;
  *(_DWORD *)(v22 + 56) = v14;
  *(_DWORD *)(v22 + 60) = v15;
  *(void *)(v22 + 64) = v16;
  uint64_t v37 = v11;
  LODWORD(v38) = v32;
  uint64_t v39 = v12;
  int v40 = v31;
  int v41 = v13;
  int v42 = v14;
  int v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v30;
  uint64_t v46 = v29;
  int v47 = v28;
  uint64_t v48 = v17;
  char v49 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)v50, &v37, 1, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (ShouldRecordTree) {
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    LOBYTE(v37) = v36;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v26, v6, *((uint64_t *)&v6 + 1), v36, v25, v24, (const char *)&type metadata for RadialGradient, (void (*)(void))type metadata accessor for RadialGradient.Type);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

double specialized static View.makeView(view:inputs:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int ShouldRecordTree;
  double result;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;

  uint64_t v4 = v3;
  int v72 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  int v32 = v35;
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  uint64_t v14 = v51;
  unint64_t v15 = v52;
  int v28 = HIDWORD(v52);
  int v29 = DWORD2(v52);
  int v16 = v53;
  int v30 = DWORD2(v51);
  uint64_t v17 = *((void *)&v53 + 1);
  int v18 = v54;
  int v19 = HIDWORD(v54);
  int v20 = DWORD1(v55);
  int v26 = v55;
  int v27 = DWORD2(v54);
  uint64_t v21 = DWORD2(v55);
  int v25 = HIDWORD(v55);
  uint64_t v22 = v56;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v30;
  int v37 = v15;
  uint64_t v38 = v29;
  int v39 = v28;
  int v41 = HIDWORD(v16);
  int v42 = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v27;
  int v45 = v19;
  int v46 = v26;
  int v47 = v20;
  int v48 = v21;
  int v49 = v25;
  int v50 = v22;
  int v57 = v14;
  LODWORD(v58) = v30;
  unint64_t v59 = v15;
  uint64_t v60 = v29;
  int v61 = v28;
  int v62 = HIDWORD(v16);
  int v63 = v17;
  int v64 = v18;
  uint64_t v65 = v27;
  uint64_t v66 = v19;
  int v67 = v26;
  int v68 = v20;
  int v69 = v21;
  int v70 = v25;
  int v71 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v32, (uint64_t)&v57, (uint64_t)&v33);
  int v40 = v16;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v57, (double *)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  long long v6;
  unsigned __int8 v7;
  unsigned int v8;
  long long v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int OffsetAttribute2;
  double result;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int ShouldRecordTree;
  uint64_t v32;
  double v33;
  _OWORD v34[2];
  long long v35;
  long long v36;
  long long v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  int v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  int v66;
  uint64_t v67;

  int v67 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v3, (uint64_t)&v61);
  long long v6 = v61;
  unint64_t v7 = v62;
  uint64_t v8 = DWORD1(v62);
  unsigned __int8 v9 = *(_OWORD *)(a2 + 48);
  int v57 = *(_OWORD *)(a2 + 32);
  unint64_t v58 = v9;
  unint64_t v59 = *(_OWORD *)(a2 + 64);
  uint64_t v60 = *(_DWORD *)(a2 + 80);
  unsigned int v10 = *(_OWORD *)(a2 + 16);
  long long v55 = *(_OWORD *)a2;
  long long v56 = v10;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v61) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v39, (uint64_t)&v61, a1, (uint64_t)&v55, v6, *((uint64_t *)&v6 + 1), v7 | ((unint64_t)v8 << 32));
  if ((v62 & 1) == 0)
  {
    long long v11 = v61;
    LOBYTE(v61) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v6, *((uint64_t *)&v6 + 1), v7, v11, *((unint64_t *)&v61 + 1));
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>();
  long long v12 = v55;
  uint64_t v13 = DWORD2(v55);
  uint64_t v14 = v56;
  unint64_t v15 = DWORD2(v56);
  int v16 = HIDWORD(v56);
  uint64_t v17 = *((void *)&v57 + 1);
  int v18 = v58;
  int v19 = DWORD2(v58);
  int v20 = HIDWORD(v58);
  int v28 = v59;
  int v29 = DWORD1(v57);
  int v26 = DWORD2(v59);
  int v27 = DWORD1(v59);
  int v25 = HIDWORD(v59);
  int v23 = v57;
  unint64_t v24 = v60;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v39 = v12;
  int v40 = v13;
  int v41 = v14;
  int v42 = v15;
  uint64_t v43 = v16;
  int v46 = v17;
  int v47 = v18;
  int v48 = v19;
  int v49 = v20;
  int v50 = v28;
  int v51 = v27;
  long long v52 = v26;
  long long v53 = v25;
  long long v54 = v24;
  uint64_t v44 = 0;
  int v45 = v29;
  *(void *)&int v61 = v12;
  DWORD2(v61) = v13;
  *(void *)&int v62 = v14;
  *((void *)&v62 + 1) = __PAIR64__(v16, v15);
  LODWORD(v63) = 0;
  DWORD1(v63) = v29;
  *((void *)&v63 + 1) = v17;
  *(void *)&int v64 = v18;
  *((void *)&v64 + 1) = __PAIR64__(v20, v19);
  *(void *)&uint64_t v65 = __PAIR64__(v27, v28);
  *((void *)&v65 + 1) = __PAIR64__(v25, v26);
  uint64_t v66 = v24;
  type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v63;
  unint64_t v36 = v64;
  int v37 = v65;
  uint64_t v38 = v66;
  v34[0] = v61;
  v34[1] = v62;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(OffsetAttribute2, (uint64_t)&v61, 0, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v35) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v32, v34);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v44 = v23;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v32, &v39);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v32;
  double result = v33;
  a3[1] = v33;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int ShouldRecordTree;
  int v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  int v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  unint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v53 = *(_OWORD *)(a2 + 32);
  long long v54 = v11;
  long long v55 = *(_OWORD *)(a2 + 64);
  long long v56 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  int v51 = *(_OWORD *)a2;
  long long v52 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  if ((v59 & 1) == 0)
  {
    uint64_t v13 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v13, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
  uint64_t v14 = v51;
  unint64_t v15 = DWORD2(v51);
  int v16 = v52;
  uint64_t v17 = DWORD2(v52);
  int v18 = HIDWORD(v52);
  int v19 = DWORD1(v53);
  int v31 = v53;
  int v20 = *((void *)&v53 + 1);
  uint64_t v21 = v54;
  uint64_t v22 = HIDWORD(v54);
  int v28 = v55;
  int v29 = DWORD2(v54);
  int v26 = DWORD2(v55);
  int v27 = DWORD1(v55);
  unint64_t v24 = v56;
  int v25 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  double v35 = v14;
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v41 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v29;
  int v45 = v22;
  int v46 = v28;
  int v47 = v27;
  int v48 = v26;
  int v49 = v25;
  int v50 = v24;
  int v57 = v14;
  LODWORD(v58) = v15;
  unint64_t v59 = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = 0;
  int v63 = v19;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v29;
  int v67 = v22;
  int v68 = v28;
  int v69 = v27;
  int v70 = v26;
  int v71 = v25;
  int v72 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)((uint64_t)&v57, (uint64_t)&v33);
  int v40 = v31;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v33, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v33;
  double result = v34;
  a3[1] = v34;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int ShouldRecordTree;
  int v32;
  uint64_t v34;
  double v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;

  uint64_t v4 = v3;
  uint64_t v74 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v58);
  unint64_t v7 = v58;
  uint64_t v8 = v59;
  unsigned __int8 v9 = v60;
  unsigned int v10 = HIDWORD(v60);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v54 = *(_OWORD *)(a2 + 32);
  long long v55 = v11;
  long long v56 = *(_OWORD *)(a2 + 64);
  int v57 = *(_DWORD *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v12;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v58) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v36, (uint64_t)&v58, a1, (uint64_t)&v52, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v13 = v36;
  if ((v60 & 1) == 0)
  {
    uint64_t v14 = v58;
    LOBYTE(v58) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v14, v59);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  unint64_t v15 = v52;
  int v16 = DWORD2(v52);
  uint64_t v17 = v53;
  int v18 = DWORD2(v53);
  int v19 = HIDWORD(v53);
  int v20 = DWORD1(v54);
  int v32 = v54;
  uint64_t v21 = *((void *)&v54 + 1);
  uint64_t v22 = v55;
  int v23 = HIDWORD(v55);
  int v29 = v56;
  int v30 = DWORD2(v55);
  int v27 = DWORD2(v56);
  int v28 = DWORD1(v56);
  int v25 = v57;
  int v26 = HIDWORD(v56);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v36 = v15;
  int v37 = v16;
  uint64_t v38 = v17;
  int v39 = v18;
  int v40 = v19;
  int v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  int v45 = v30;
  int v46 = v23;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  int v51 = v25;
  unint64_t v58 = v15;
  LODWORD(v59) = v16;
  uint64_t v60 = v17;
  int v61 = v18;
  int v62 = v19;
  int v63 = 0;
  int v64 = v20;
  uint64_t v65 = v21;
  uint64_t v66 = v22;
  int v67 = v30;
  int v68 = v23;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  int v73 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _ShapeView._makeView(view:inputs:)(v13, (uint64_t)&v58, (uint64_t)&v34);
  int v41 = v32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v34, &v36);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  *(void *)a3 = v34;
  double result = v35;
  a3[1] = v35;
  return result;
}

uint64_t specialized static View.makeBody(view:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x72477261656E694CLL;
    v16._object = (void *)0xEE00746E65696461;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x656C63726943;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x6C676E6174636552;
    v16._object = (void *)0xE900000000000065;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000024621DBE0;
    String.append(_:)(v15);
    v16._object = (void *)0x800000024621FE60;
    v16._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x72476C6169646152;
    v16._object = (void *)0xEE00746E65696461;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  long long v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._countAndFlagsBits = 0xD000000000000038;
    v17._object = (void *)0x800000024621DBE0;
    String.append(_:)(v17);
    v18._object = (void *)0x800000024621FDC0;
    v18._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0) {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    else {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    Swift::String v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(unsigned char *)(a2 + 16) = v16;
  }
  return result;
}

{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  long long v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._object = (void *)0x800000024621DBE0;
    v17._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000003BLL;
    v18._object = (void *)0x800000024621FDE0;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0) {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    else {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    Swift::String v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(unsigned char *)(a2 + 16) = v16;
  }
  return result;
}

{
  char v14;
  uint64_t result;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  long long v21;
  char v22;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v17._countAndFlagsBits = 0xD000000000000038;
    v17._object = (void *)0x800000024621DBE0;
    String.append(_:)(v17);
    v18._object = (void *)0x800000024621FD80;
    v18._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0x6C63206120736920;
    v19._object = (void *)0xEC0000002E737361;
    String.append(_:)(v19);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = a7 & 1;
    if ((a7 & 0x100000000) != 0) {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    else {
      uint64_t result = specialized project #1 <A><A1>(flags:) in closure #1 in BodyAccessor.makeBody(container:inputs:fields:)(&v20, (uint64_t)&v21, a5, a6, v14, a3, a4);
    }
    Swift::String v16 = v22;
    *a1 = v20;
    *(_OWORD *)a2 = v21;
    *(unsigned char *)(a2 + 16) = v16;
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x77656956746F6F52;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x6570616853796E41;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x657370696C6C45;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x656C7573706143;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 1752457552;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000024621DBE0;
    String.append(_:)(v15);
    v16._object = (void *)0x800000024621FE40;
    v16._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000024621DBE0;
    String.append(_:)(v15);
    v16._object = (void *)0x800000024621FE20;
    v16._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000024621DBE0;
    String.append(_:)(v15);
    v16._object = (void *)0x800000024621FE80;
    v16._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x6E6974616D696E41;
    v16._object = (void *)0xED00007478655467;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._countAndFlagsBits = 0xD000000000000038;
    v15._object = (void *)0x800000024621DBE0;
    String.append(_:)(v15);
    v16._object = (void *)0x800000024621FEA0;
    v16._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x7465736E495FLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x4772616C75676E41;
    v16._object = (void *)0xEF746E6569646172;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t vars8;

  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(70);
    v15._object = (void *)0x800000024621DBE0;
    v15._countAndFlagsBits = 0xD000000000000038;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0x646172476873654DLL;
    v16._object = (void *)0xEC000000746E6569;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x6C63206120736920;
    v17._object = (void *)0xEC0000002E737361;
    String.append(_:)(v17);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return specialized BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001);
  }
  return result;
}

uint64_t specialized BodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for LinearGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for LinearGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v12;
  int v13;
  uint64_t result;

  long long v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ShadowEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ShadowEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ShadowEffect>, MainThreadFlags>);
  }
  swift_retain();
  char v13 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  *a1 = v13;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RadialGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RadialGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, RadialGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RadialGradient>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for SafeAreaPaddingModifier);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_1(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for SafeAreaPaddingModifier);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_1(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ModifierBodyAccessor<SafeAreaPaddingModifier>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v12;
  int v13;
  uint64_t result;

  long long v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMonochromeEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMonochromeEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMonochromeEffect>, MainThreadFlags>);
  }
  swift_retain();
  char v13 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  *a1 = v13;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v12;
  int v13;
  uint64_t result;

  long long v12 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMultiplyEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v12, a3, a4, 0, (uint64_t)&type metadata for _ColorMultiplyEffect);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<EnvironmentalBodyAccessor<_ColorMultiplyEffect>, MainThreadFlags>);
  }
  swift_retain();
  char v13 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  *a1 = v13;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Rectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Rectangle._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _TestApp.RootView);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _TestApp.RootView);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_TestApp.RootView>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AnyShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AnyShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AnyShape>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Ellipse._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Ellipse._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Capsule._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Capsule._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Circle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Circle._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Path);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Path>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for Path);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<Path>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<Path>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<UnevenRoundedRectangle._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<ContainerRelativeShape._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingSummarySymbol);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingSummarySymbol>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for _IntelligenceSupport.AnimatingText);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>();
    type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<_IntelligenceSupport.AnimatingText>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for EllipticalGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for EllipticalGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<EllipticalGradient>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for RoundedRectangle._Inset);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<RoundedRectangle._Inset>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AngularGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for AngularGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, AngularGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<AngularGradient>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

{
  char v13;
  uint64_t result;

  char v13 = a7 & 1;
  if ((a7 & 0x100000000) != 0)
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for MeshGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, AsyncThreadFlags>);
  }
  else
  {
    outlined copy of DynamicPropertyCache.Fields.Layout();
    specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a5, a6, v13, a3, a4, 0, (uint64_t)&type metadata for MeshGradient);
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.destroy()();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>();
    lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(&lazy protocol witness table cache variable for type StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags> and conformance StaticBody<A, B>, (void (*)(uint64_t))type metadata accessor for StaticBody<ViewBodyAccessor<MeshGradient>, MainThreadFlags>);
  }
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

void type metadata accessor for _ShapeView<Rectangle, LinearGradient>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, LinearGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, LinearGradient>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticBody<ViewBodyAccessor<LinearGradient>, AsyncThreadFlags> and conformance StaticBody<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(uint64_t result, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v9 = v7;
  uint64_t v13 = result;
  if (a3)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg503_s7d5UI22_fgl5V9addj37_9container6inputs10baseOffsetyAA0cD5h65V0G0V_AA11_GraphValueVyxGAA01_M6InputsVzSitlFSi3tag_AC5linkstAI06iW29VXEfU_AA14LinearGradientV_TG5AF01_yZ0VyAF14LinearGradientVGAF01_Y6InputsVTf1cn_nTm(v18, a4, a5, (uint64_t)v21, a7);
      outlined consume of DynamicPropertyCache.Fields.Layout();
      project #1 <A><A1>(type:) in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(v13, v9, v19, a6);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = *(void *)(result + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      Swift::String v15 = (uint64_t *)(v13 + 48);
      do
      {
        uint64_t v16 = *(v15 - 1);
        uint64_t v17 = *v15;
        v15 += 4;
        int v20 = a4;
        (*(void (**)(uint64_t *, int *, uint64_t, uint64_t, uint64_t))(v16 + 8))(v7, &v20, v17 + a6, a5, a7);
        --v14;
      }
      while (v14);
      return outlined consume of DynamicPropertyCache.Fields.Layout();
    }
  }
  return result;
}

void type metadata accessor for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>()
{
  if (!lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>)
  {
    type metadata accessor for EnvironmentalBodyAccessor<VariableBlurEffect>(255, &lazy cache variable for type metadata for ViewBodyAccessor<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewBodyAccessor);
    lazy protocol witness table accessor for type ViewBodyAccessor<LinearGradient> and conformance ViewBodyAccessor<A>();
    unint64_t v0 = type metadata accessor for StaticBody();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticBody<ViewBodyAccessor<LinearGradient>, MainThreadFlags>);
    }
  }
}

uint64_t specialized static _ShapeView._makeView(view:inputs:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v13 + 16);
  int v18 = *MEMORY[0x263F288F8];
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = v22;
  *(unsigned char *)(v20 + 56) = 0;
  *(void *)(v19 + 16) = v20;
  int v30 = OffsetAttribute2;
  int v31 = v18;
  int v32 = v17;
  char v33 = 0;
  char v34 = v16 & 1;
  int v35 = v15;
  int v36 = v26;
  int v37 = v14;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyleResolver<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v23, 0, &v27);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v24)
  {
LABEL_18:
    int v25 = v28;
    uint64_t result = v29;
    goto LABEL_19;
  }
  if ((v16 & 2) == 0) {
    goto LABEL_18;
  }
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v28 | 0x80;
LABEL_19:
  *(void *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v25;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  int OffsetAttribute2;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v13 + 16);
  int v18 = *MEMORY[0x263F288F8];
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = v22;
  *(unsigned char *)(v20 + 56) = 0;
  *(void *)(v19 + 16) = v20;
  int v30 = OffsetAttribute2;
  int v31 = v18;
  int v32 = v17;
  char v33 = 0;
  char v34 = v16 & 1;
  int v35 = v15;
  int v36 = v26;
  int v37 = v14;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for ShapeStyleResolver<RadialGradient>, (uint64_t)&type metadata for RadialGradient, (uint64_t)&protocol witness table for RadialGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<RadialGradient> and conformance ShapeStyleResolver<A>();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v23, 0, &v27);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v24)
  {
LABEL_18:
    int v25 = v28;
    uint64_t result = v29;
    goto LABEL_19;
  }
  if ((v16 & 2) == 0) {
    goto LABEL_18;
  }
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, RadialGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v28 | 0x80;
LABEL_19:
  *(void *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v25;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<CombinedContentShape, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Ellipse, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Capsule, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Circle, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Path, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  long long v12;
  long long v13;
  long long v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _OWORD v23[5];
  int v24;
  uint64_t v25;

  int v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  uint64_t v13 = *(_OWORD *)(a2 + 64);
  int v14 = *(_OWORD *)(a2 + 16);
  v23[2] = *(_OWORD *)(a2 + 32);
  v23[3] = v12;
  int v15 = *(_DWORD *)(a2 + 36);
  v23[4] = v13;
  unsigned int v24 = *(_DWORD *)(a2 + 80);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v14;
  LOBYTE(v19) = 0;
  swift_beginAccess();
  int v16 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v19, 0x100000000);
  swift_endAccess();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v16, 0, &v20);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  int v17 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v17)
  {
LABEL_18:
    int v18 = v21;
    uint64_t result = v22;
    goto LABEL_19;
  }
  if ((v15 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v19 = v7;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v21 | 0x80;
LABEL_19:
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  int OffsetAttribute2;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v13 + 16);
  int v18 = *MEMORY[0x263F288F8];
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = v22;
  *(unsigned char *)(v20 + 56) = 0;
  *(void *)(v19 + 16) = v20;
  int v30 = OffsetAttribute2;
  int v31 = v18;
  int v32 = v17;
  char v33 = 0;
  char v34 = v16 & 1;
  int v35 = v15;
  int v36 = v26;
  int v37 = v14;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for ShapeStyleResolver<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v23, 0, &v27);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v24)
  {
LABEL_18:
    int v25 = v28;
    uint64_t result = v29;
    goto LABEL_19;
  }
  if ((v16 & 2) == 0) {
    goto LABEL_18;
  }
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, EllipticalGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v28 | 0x80;
LABEL_19:
  *(void *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v25;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  int OffsetAttribute2;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v13 + 16);
  int v18 = *MEMORY[0x263F288F8];
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = v22;
  *(unsigned char *)(v20 + 56) = 0;
  *(void *)(v19 + 16) = v20;
  int v30 = OffsetAttribute2;
  int v31 = v18;
  int v32 = v17;
  char v33 = 0;
  char v34 = v16 & 1;
  int v35 = v15;
  int v36 = v26;
  int v37 = v14;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for ShapeStyleResolver<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v23, 0, &v27);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v24)
  {
LABEL_18:
    int v25 = v28;
    uint64_t result = v29;
    goto LABEL_19;
  }
  if ((v16 & 2) == 0) {
    goto LABEL_18;
  }
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, AngularGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v28 | 0x80;
LABEL_19:
  *(void *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v25;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  ValueMetadata **v8;
  ValueMetadata **v9;
  uint64_t v10;
  int v11;
  int OffsetAttribute2;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_7:
    *(void *)a3 = MEMORY[0x263F8EE78];
    int v11 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v11;
    return result;
  }
  unsigned int v7 = result;
  uint64_t v8 = (ValueMetadata **)(v4 + 32);
  unsigned __int8 v9 = v8;
  uint64_t v10 = v5;
  while (*v9 != &type metadata for DisplayList.Key)
  {
    v9 += 2;
    if (!--v10)
    {
      while (*v8 != &type metadata for ViewRespondersKey)
      {
        v8 += 2;
        if (!--v5) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v13 + 16);
  int v18 = *MEMORY[0x263F288F8];
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = v22;
  *(unsigned char *)(v20 + 56) = 0;
  *(void *)(v19 + 16) = v20;
  int v30 = OffsetAttribute2;
  int v31 = v18;
  int v32 = v17;
  char v33 = 0;
  char v34 = v16 & 1;
  int v35 = v15;
  int v36 = v26;
  int v37 = v14;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for ShapeStyleResolver<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
  lazy protocol witness table accessor for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetFlags();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v7, a2, v23, 0, &v27);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v24 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC)
  {
    if (!dyld_program_sdk_at_least()) {
      goto LABEL_18;
    }
  }
  else if (static Semantics.forced < v24)
  {
LABEL_18:
    int v25 = v28;
    uint64_t result = v29;
    goto LABEL_19;
  }
  if ((v16 & 2) == 0) {
    goto LABEL_18;
  }
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>);
  lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(&lazy protocol witness table cache variable for type LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>> and conformance LeafLayoutComputer<A>, &lazy cache variable for type metadata for LeafLayoutComputer<_ShapeView<Rectangle, MeshGradient>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v25 = v28 | 0x80;
LABEL_19:
  *(void *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v25;
  *(_DWORD *)(a3 + 12) = result;
  return result;
}

void type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for LeafLayoutComputer();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type LeafLayoutComputer<_ShapeView<Rectangle, LinearGradient>> and conformance LeafLayoutComputer<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LeafLayoutComputer<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Font?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>;
  if (!lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for InterpolatedDisplayList<ResolvedStyledText>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, (uint64_t)&protocol witness table for ResolvedStyledText, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InterpolatedDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatedDisplayList<ResolvedStyledText> and conformance InterpolatedDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, LinearGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, LinearGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>)
  {
    _sSnySiGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for ShapeStyleResolver<LinearGradient>, (uint64_t)&type metadata for LinearGradient, (uint64_t)&protocol witness table for LinearGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<LinearGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, ForegroundStyle>);
    }
  }
}

uint64_t type metadata accessor for InterpolatedDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.clipped(antialiased:)(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  if (a1) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }

  return View.clipShape<A>(_:style:)(v6, v7, a2, (uint64_t)&type metadata for Rectangle, a3);
}

uint64_t static _MatchedGeometryEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v12 = *MEMORY[0x263F288F8];
  unsigned int v23 = *a1;
  *(void *)&long long v16 = v8;
  DWORD2(v16) = v9;
  uint64_t v17 = v10;
  long long v13 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v13;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v14 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(&v23, &v16, v12, a3, a4, (uint64_t)&type metadata for Rectangle, a5, v14);
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

uint64_t static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, int a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t, long long *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  void (*v137)(uint64_t *__return_ptr, uint64_t, long long *);
  uint64_t v138;
  long long v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  long long v147;
  long long v148;
  unsigned __int8 v149;
  unsigned int v150;
  unsigned __int8 v151;
  unsigned int v152;
  unsigned __int8 v153;
  unsigned int v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  _OWORD v159[2];
  long long v160;
  long long v161;
  long long v162;
  unsigned char v163[36];
  long long v164;
  long long v165;
  long long v166;
  void v167[4];

  int v127 = a3;
  v167[1] = *MEMORY[0x263EF8340];
  unsigned int v12 = *a1;
  *(_DWORD *)&v163[32] = *((_DWORD *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[2];
  *(_OWORD *)uint64_t v163 = a2[3];
  *(_OWORD *)&v163[16] = v13;
  long long v15 = *a2;
  int v161 = a2[1];
  uint64_t v162 = v14;
  int v160 = v15;
  uint64_t v16 = *(void *)(*(void *)v163 + 16);
  if (v16)
  {
    uint64_t v17 = (ValueMetadata **)(*(void *)v163 + 32);
    uint64_t v18 = v16 - 1;
    do
    {
      long long v19 = *v17;
      v17 += 2;
      BOOL v20 = v19 == &type metadata for DisplayList.Key;
    }
    while (v19 != &type metadata for DisplayList.Key && v18-- != 0);
  }
  else
  {
    BOOL v20 = 0;
  }
  *(void *)&uint64_t v139 = 1;
  uint64_t v128 = a8;
  uint64_t v129 = a6;
  closure #1 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(1);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  long long v22 = a2[2];
  int v165 = a2[1];
  unint64_t v166 = v22;
  int v164 = *a2;
  int v23 = DWORD1(v22);
  uint64_t v136 = a5;
  CGSize v137 = a4;
  if (v20 || (BYTE4(v22) & 0x20) != 0)
  {
    uint64_t v25 = v164;
    v167[0] = v164;
    outlined retain of _ViewInputs((uint64_t)&v160);
    outlined retain of _GraphInputs((uint64_t)&v164);
    outlined retain of ViewTransform((uint64_t)v167);
    uint64_t v26 = specialized find<A>(_:key:)(v25);
    if (!v26)
    {
      outlined release of ViewTransform((uint64_t)v167);
      outlined release of _GraphInputs((uint64_t)&v164);
      outlined release of _ViewInputs((uint64_t)&v160);
      unsigned int v24 = 0;
      uint64_t v126 = 0;
      *(void *)&uint64_t v139 = 1;
      goto LABEL_17;
    }
    unint64_t v27 = *(void *)(v26 + 72);
    swift_retain();
    outlined release of ViewTransform((uint64_t)v167);
    outlined release of _GraphInputs((uint64_t)&v164);
    uint64_t v28 = outlined release of _ViewInputs((uint64_t)&v160);
    if (v27)
    {
      unsigned int v29 = *MEMORY[0x263F288F8];
      CGSize v144 = 1;
      *(void *)&int v155 = __PAIR64__(OffsetAttribute2, v12);
      *((int32x2_t *)&v155 + 1) = vrev64_s32(*(int32x2_t *)((char *)&v165 + 8));
      LODWORD(v156) = *(_DWORD *)&v163[24];
      *(int32x2_t *)((char *)&v156 + 4) = vrev64_s32(*(int32x2_t *)&v163[12]);
      uint64_t v157 = v27;
      LOBYTE(v158) = 1;
      *(void *)((char *)&v158 + 4) = v29;
      BYTE12(v158) = 0;
      MEMORY[0x270FA5388](v28);
      CGPoint v112 = (uint64_t *)type metadata accessor for MatchedSharedFrame();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Attribute<(ViewFrame?, AnyOptionalAttribute)>();
      uint64_t v31 = v30;
      swift_retain();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v155, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v111, (uint64_t)v112, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
      uint64_t v126 = 0;
      swift_release();
      unsigned int v24 = v147;
      AGGraphSetFlags();
      swift_release();
      *(void *)&uint64_t v139 = 0;
      goto LABEL_17;
    }
    *(void *)&uint64_t v139 = 1;
  }
  unsigned int v24 = 0;
  uint64_t v126 = 0;
LABEL_17:
  LODWORD(v135) = DWORD2(v160);
  int v142 = v161;
  CGPoint v143 = v160;
  uint64_t v33 = *((void *)&v161 + 1);
  int v34 = v162;
  uint64_t v140 = *(void *)v163;
  uint64_t v141 = *((void *)&v162 + 1);
  LODWORD(v134) = *(_DWORD *)&v163[8];
  int v35 = *(_DWORD *)&v163[20];
  int v36 = *(_DWORD *)&v163[24];
  uint64_t v37 = *(void *)&v163[28];
  unsigned int v124 = *(_DWORD *)&v163[20];
  unsigned int v125 = v24;
  LODWORD(v138) = v23;
  LODWORD(v133) = *(_DWORD *)&v163[12];
  if ((v23 & 0x20) == 0 || v139)
  {
    LODWORD(v132) = *(_DWORD *)&v163[16];
    uint64_t v38 = a7;
    outlined retain of _ViewInputs((uint64_t)&v160);
    int v130 = 0;
    char v39 = 1;
    LODWORD(v40) = v35;
    int v41 = v23;
    int v42 = v135;
    goto LABEL_32;
  }
  uint64_t v123 = a7;
  int v119 = DWORD1(v162);
  int v43 = v166;
  unsigned int v44 = *MEMORY[0x263F288F8];
  *(void *)&int v155 = __PAIR64__(OffsetAttribute2, v24);
  *((void *)&v155 + 1) = __PAIR64__(*(unsigned int *)&v163[16], *(unsigned int *)&v163[24]);
  *(void *)&char v156 = __PAIR64__(v44, *(unsigned int *)&v163[12]);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs((uint64_t)&v160);
  lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame();
  int v45 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v132) = AGGraphCreateOffsetAttribute2();
  int v130 = v45;
  int v36 = AGGraphCreateOffsetAttribute2();
  int v117 = v43 | 0x18;
  uint64_t v46 = v165;
  swift_beginAccess();
  uint64_t v118 = v160;
  int v47 = DWORD2(v160);
  unsigned int v48 = DWORD2(v161);
  uint64_t v121 = *((void *)&v162 + 1);
  uint64_t v49 = v162;
  uint64_t v122 = v161;
  uint64_t v50 = *(void *)&v163[8];
  uint64_t v120 = *(void *)v163;
  *(void *)&long long v51 = *(void *)&v163[16];
  long long v116 = v51;
  *(void *)&long long v51 = *(void *)&v163[24];
  long long v115 = v51;
  uint64_t v157 = v162;
  long long v158 = *(_OWORD *)v163;
  v159[0] = *(_OWORD *)&v163[16];
  int v114 = *(_DWORD *)&v163[32];
  LODWORD(v159[1]) = *(_DWORD *)&v163[32];
  int v155 = v160;
  char v156 = v161;
  outlined retain of _ViewInputs((uint64_t)&v160);
  unsigned int v52 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v54 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v46 + 81) & 1) == 0
    && v116 == *(_DWORD *)(v46 + 32)
    && v115 == *(_DWORD *)(v46 + 36)
    && v54 == *(_DWORD *)(v46 + 40)
    && v47 == *(_DWORD *)(v46 + 44)
    && v52 == *(_DWORD *)(v46 + 48)
    && v48 == *(_DWORD *)(v46 + 52))
  {
    if ((*(unsigned char *)(v46 + 64) & 1) == 0)
    {
      LODWORD(v40) = *(_DWORD *)(v46 + 60);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(void *)&int v155 = v118;
  DWORD2(v155) = v47;
  *(void *)&char v156 = v122;
  *((void *)&v156 + 1) = __PAIR64__(v52, v48);
  *(void *)&uint64_t v157 = v49;
  *((void *)&v157 + 1) = v121;
  *(void *)&long long v158 = v120;
  *((void *)&v158 + 1) = v50;
  *(void *)&v159[0] = v116;
  *((void *)&v159[0] + 1) = v115;
  LODWORD(v159[1]) = v114;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v155, v54, (uint64_t)&v147);
  long long v55 = v148;
  uint64_t v56 = v149;
  unsigned __int8 v57 = v153;
  unint64_t v58 = v149 | ((unint64_t)v150 << 32);
  unint64_t v59 = v151 | ((unint64_t)v152 << 32);
  *(_OWORD *)(v46 + 32) = v147;
  *(_OWORD *)(v46 + 48) = v55;
  *(void *)(v46 + 64) = v58;
  *(void *)(v46 + 72) = v59;
  *(_WORD *)(v46 + 80) = v57;
  if (v56 == 1)
  {
LABEL_30:
    LODWORD(v40) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v46 + 60) = v40;
    *(unsigned char *)(v46 + 64) = 0;
    goto LABEL_31;
  }
  uint64_t v40 = HIDWORD(*((void *)&v55 + 1));
LABEL_31:
  uint64_t v38 = v123;
  int v42 = v135;
  int v60 = v119;
  int v34 = v117;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  char v39 = 0;
  int v41 = v60 | 2;
LABEL_32:
  *(void *)&int v155 = v143;
  DWORD2(v155) = v42;
  *(void *)&char v156 = v142;
  *((void *)&v156 + 1) = v33;
  *(void *)&uint64_t v157 = __PAIR64__(v41, v34);
  *((void *)&v157 + 1) = v141;
  *(void *)&long long v158 = v140;
  *((void *)&v158 + 1) = __PAIR64__(v133, v134);
  *(void *)&v159[0] = __PAIR64__(v40, v132);
  DWORD2(v159[0]) = v36;
  *(void *)((char *)v159 + 12) = v37;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v61 = swift_bridgeObjectRetain();
  v137(&v145, v61, &v155);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v62 = swift_release();
  if ((v39 & 1) == 0)
  {
    MEMORY[0x270FA5388](v62);
    CGPoint v112 = &v145;
    MEMORY[0x270FA5388](v63);
    AGGraphMutateAttribute();
  }
  char v64 = v139 | !v20;
  uint64_t v65 = v38;
  __int16 v66 = v138;
  if (v64) {
    goto LABEL_67;
  }
  *(void *)&int v155 = v145;
  DWORD2(v155) = v146;
  unint64_t v67 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
  if ((v67 & 0x100000000) != 0) {
    goto LABEL_67;
  }
  unsigned int v68 = v67;
  Swift::UInt32 v69 = ++lastIdentity;
  if ((v66 & 0x100) == 0)
  {
LABEL_37:
    uint64_t v70 = v165;
    swift_beginAccess();
    if ((v66 & 0x20) == 0)
    {
      *(void *)&uint64_t v139 = *(unsigned int *)&v163[16];
      unsigned int v85 = *(_DWORD *)&v163[24];
LABEL_63:
      swift_endAccess();
      uint64_t v100 = v164;
      *(void *)&uint64_t v147 = v164;
      outlined retain of _ViewInputs((uint64_t)&v160);
      outlined retain of _GraphInputs((uint64_t)&v164);
      outlined retain of ViewTransform((uint64_t)&v147);
      uint64_t v101 = specialized find<A>(_:key:)(v100);
      unsigned int v102 = OffsetAttribute2;
      if (v101) {
        char v103 = *(unsigned char *)(v101 + 72);
      }
      else {
        char v103 = 0;
      }
      unsigned int v104 = *(_DWORD *)&v163[12];
      outlined release of ViewTransform((uint64_t)&v147);
      outlined release of _GraphInputs((uint64_t)&v164);
      uint64_t v105 = outlined release of _ViewInputs((uint64_t)&v160);
      *(void *)&int v155 = __PAIR64__(v125, v69);
      *((void *)&v155 + 1) = __PAIR64__(v68, v102);
      *(void *)&char v156 = __PAIR64__(v85, v139);
      *((void *)&v156 + 1) = __PAIR64__(v124, v104);
      LODWORD(v157) = v127;
      BYTE4(v157) = v103;
      MEMORY[0x270FA5388](v105);
      uint64_t v106 = type metadata accessor for MatchedDisplayList();
      CGPoint v112 = (uint64_t *)v106;
      uint64_t WitnessTable = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v155, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v111, v106, MEMORY[0x263F8E628], v107, MEMORY[0x263F8E658], v108);
      LOBYTE(v155) = 0;
      PreferencesOutputs.subscript.setter(v154, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
LABEL_67:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      *uint64_t v65 = v145;
      v65[1] = v146;
      return result;
    }
    LODWORD(v136) = v69;
    uint64_t v123 = v65;
    int v72 = DWORD2(v160);
    CGSize v137 = (void (*)(uint64_t *__return_ptr, uint64_t, long long *))v161;
    long long v138 = v160;
    unsigned int v73 = DWORD2(v161);
    uint64_t v74 = v162;
    uint64_t v134 = *(void *)v163;
    uint64_t v135 = *((void *)&v162 + 1);
    uint64_t v75 = *(void *)&v163[8];
    *(void *)&long long v71 = *(void *)&v163[16];
    uint64_t v139 = v71;
    *(void *)&long long v71 = *(void *)&v163[24];
    long long v133 = v71;
    int v76 = *(_DWORD *)&v163[32];
    uint64_t v157 = v162;
    long long v158 = *(_OWORD *)v163;
    v159[0] = *(_OWORD *)&v163[16];
    LODWORD(v159[1]) = *(_DWORD *)&v163[32];
    int v155 = v160;
    char v156 = v161;
    outlined retain of _ViewInputs((uint64_t)&v160);
    unsigned int v77 = _ViewInputs.geometryTransaction()();
    uint64_t v78 = swift_getKeyPath();
    int v79 = specialized CachedEnvironment.attribute<A>(keyPath:)(v78);
    swift_release();
    if ((*(unsigned char *)(v70 + 81) & 1) == 0
      && v139 == *(_DWORD *)(v70 + 32)
      && v133 == *(_DWORD *)(v70 + 36)
      && v79 == *(_DWORD *)(v70 + 40)
      && v72 == *(_DWORD *)(v70 + 44)
      && v77 == *(_DWORD *)(v70 + 48)
      && v73 == *(_DWORD *)(v70 + 52))
    {
      if ((*(unsigned char *)(v70 + 64) & 1) == 0)
      {
        *(void *)&uint64_t v139 = *(unsigned int *)(v70 + 60);
        goto LABEL_51;
      }
    }
    else
    {
      *(void *)&int v155 = v138;
      DWORD2(v155) = v72;
      *(void *)&char v156 = v137;
      *((void *)&v156 + 1) = __PAIR64__(v77, v73);
      *(void *)&uint64_t v157 = v74;
      *((void *)&v157 + 1) = v135;
      *(void *)&long long v158 = v134;
      *((void *)&v158 + 1) = v75;
      *(void *)&v159[0] = v139;
      *((void *)&v159[0] + 1) = v133;
      LODWORD(v159[1]) = v76;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v155, v79, (uint64_t)&v147);
      long long v80 = v148;
      uint64_t v81 = v149;
      unsigned __int8 v82 = v153;
      unint64_t v83 = v149 | ((unint64_t)v150 << 32);
      unint64_t v84 = v151 | ((unint64_t)v152 << 32);
      *(_OWORD *)(v70 + 32) = v147;
      *(_OWORD *)(v70 + 48) = v80;
      *(void *)(v70 + 64) = v83;
      *(void *)(v70 + 72) = v84;
      *(_WORD *)(v70 + 80) = v82;
      if (v81 != 1)
      {
        *(void *)&uint64_t v139 = HIDWORD(*((void *)&v80 + 1));
LABEL_51:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v86 = DWORD2(v160);
        uint64_t v134 = v161;
        uint64_t v135 = v160;
        unsigned int v87 = DWORD2(v161);
        uint64_t v88 = v162;
        CGSize v137 = *(void (**)(uint64_t *__return_ptr, uint64_t, long long *))v163;
        long long v138 = *((void *)&v162 + 1);
        uint64_t v89 = *(void *)&v163[8];
        *(void *)&long long v90 = *(void *)&v163[16];
        long long v133 = v90;
        *(void *)&long long v90 = *(void *)&v163[24];
        long long v132 = v90;
        int v91 = *(_DWORD *)&v163[32];
        uint64_t v157 = v162;
        long long v158 = *(_OWORD *)v163;
        v159[0] = *(_OWORD *)&v163[16];
        LODWORD(v159[1]) = *(_DWORD *)&v163[32];
        int v155 = v160;
        char v156 = v161;
        outlined retain of _ViewInputs((uint64_t)&v160);
        unsigned int v92 = _ViewInputs.geometryTransaction()();
        uint64_t v93 = swift_getKeyPath();
        int v94 = specialized CachedEnvironment.attribute<A>(keyPath:)(v93);
        swift_release();
        if ((*(unsigned char *)(v70 + 81) & 1) == 0
          && v133 == *(_DWORD *)(v70 + 32)
          && v132 == *(_DWORD *)(v70 + 36)
          && v94 == *(_DWORD *)(v70 + 40)
          && v86 == *(_DWORD *)(v70 + 44)
          && v92 == *(_DWORD *)(v70 + 48)
          && v87 == *(_DWORD *)(v70 + 52))
        {
          uint64_t v65 = v123;
          Swift::UInt32 v69 = v136;
          if ((*(unsigned char *)(v70 + 72) & 1) == 0)
          {
            unsigned int v85 = *(_DWORD *)(v70 + 68);
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)&int v155 = v135;
          DWORD2(v155) = v86;
          *(void *)&char v156 = v134;
          *((void *)&v156 + 1) = __PAIR64__(v92, v87);
          *(void *)&uint64_t v157 = v88;
          *((void *)&v157 + 1) = v138;
          *(void *)&long long v158 = v137;
          *((void *)&v158 + 1) = v89;
          *(void *)&v159[0] = v133;
          *((void *)&v159[0] + 1) = v132;
          LODWORD(v159[1]) = v91;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v155, v94, (uint64_t)&v147);
          unsigned int v85 = v150;
          uint64_t v95 = v151;
          unsigned __int8 v96 = v153;
          unint64_t v97 = v149 | ((unint64_t)v150 << 32);
          unint64_t v98 = v151 | ((unint64_t)v152 << 32);
          long long v99 = v148;
          *(_OWORD *)(v70 + 32) = v147;
          *(_OWORD *)(v70 + 48) = v99;
          *(void *)(v70 + 64) = v97;
          *(void *)(v70 + 72) = v98;
          *(_WORD *)(v70 + 80) = v96;
          uint64_t v65 = v123;
          Swift::UInt32 v69 = v136;
          if (v95 != 1) {
            goto LABEL_62;
          }
        }
        unsigned int v85 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v70 + 68) = v85;
        *(unsigned char *)(v70 + 72) = 0;
LABEL_62:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_63;
      }
    }
    *(void *)&uint64_t v139 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v70 + 60) = v139;
    *(unsigned char *)(v70 + 64) = 0;
    goto LABEL_51;
  }
  outlined retain of _ViewInputs((uint64_t)&v160);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v160);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v147) = v69;
    uint64_t v110 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v147);
    v110(&v155, 0);
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _ViewInputs.makeRootMatchedGeometryScope()()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(_DWORD *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized find<A>(_:key:)(v1);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if (v8) {
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
  }
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 72);
  int v13 = *(_DWORD *)(v0 + 80);
  type metadata accessor for MatchedGeometryScope();
  uint64_t v14 = swift_allocObject();
  id v15 = (id)AGSubgraphGetCurrent();
  if (v15)
  {
    uint64_t v16 = MEMORY[0x263F8EE80];
    *(void *)(v14 + 112) = MEMORY[0x263F8EE78];
    *(void *)(v14 + 120) = v16;
    *(void *)(v14 + 16) = v15;
    *(void *)(v14 + 24) = v1;
    *(_DWORD *)(v14 + 32) = v2;
    *(void *)(v14 + 40) = v3;
    *(void *)(v14 + 48) = v4;
    *(void *)(v14 + 56) = v5;
    *(void *)(v14 + 64) = v6;
    *(void *)(v14 + 72) = v9;
    *(void *)(v14 + 80) = v10;
    *(void *)(v14 + 88) = v11;
    *(void *)(v14 + 96) = v12;
    *(_DWORD *)(v14 + 104) = v13;
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)v0, v14);
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized find<A>(_:key:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  unint64_t v4 = a2(0);

  return a3(a1, (1 << (v4 >> 4)) | (1 << (v4 >> 10)) | (1 << SBYTE2(v4)));
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(void))
{
  if (result)
  {
    uint64_t v7 = (void *)result;
    while (1)
    {
      while ((a2 & ~v7[7]) != 0)
      {
        uint64_t v7 = (void *)v7[5];
        if (!v7) {
          return 0;
        }
      }
      uint64_t v8 = v7[3];
      if (v8)
      {
        uint64_t result = a3(v8, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v9 = v7[2];
      if (v9 == a4(0)) {
        break;
      }
      uint64_t v7 = (void *)v7[4];
      if (!v7) {
        return 0;
      }
    }
    return (uint64_t)v7;
  }
  return result;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    uint64_t v7 = (void *)result;
    while (1)
    {
      while ((a2 & ~v7[7]) != 0)
      {
        uint64_t v7 = (void *)v7[5];
        if (!v7) {
          return 0;
        }
      }
      uint64_t v8 = v7[3];
      if (v8)
      {
        uint64_t result = a3(v8, a2);
        if (result) {
          return result;
        }
      }
      uint64_t v9 = v7[2];
      if (v9 == a4(0)) {
        break;
      }
      uint64_t v7 = (void *)v7[4];
      if (!v7) {
        return 0;
      }
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t type metadata accessor for MatchedGeometryScope()
{
  return self;
}

void type metadata accessor for TypedElement<BodyInput<_ViewModifier_Content<ViewListArchivedAnimation.Effect>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TypedElement();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for MatchedSharedFrame()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MatchedDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type MatchedFrame and conformance MatchedFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame;
  if (!lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedFrame and conformance MatchedFrame);
  }
  return result;
}

void type metadata accessor for Attribute<(ViewFrame?, AnyOptionalAttribute)>()
{
  if (!lazy cache variable for type metadata for Attribute<(ViewFrame?, AnyOptionalAttribute)>)
  {
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(ViewFrame?, AnyOptionalAttribute)>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<RoundedRectangle, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for TypedUnaryViewGenerator<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>(uint64_t a1)
{
}

uint64_t _ViewList_Group.edit(forID:since:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  uint64_t v9 = *v3 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  if (v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = v8;
  memset(v19, 0, 44);
  while (1)
  {
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v19, (uint64_t)&v20, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v21)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = 2;
      return result;
    }
    outlined init with take of ScrollStateRequest(&v20, (uint64_t)v19);
    uint64_t v12 = *((void *)&v19[1] + 1);
    uint64_t v13 = *(void *)&v19[2];
    __swift_project_boxed_opaque_existential_1(v19, *((uint64_t *)&v19[1] + 1));
    v17[0] = v4;
    v17[1] = v5;
    uint64_t v16 = v6;
    (*(void (**)(char *__return_ptr, void *, uint64_t *, uint64_t, uint64_t))(v13 + 56))(&v18, v17, &v16, v12, v13);
    char v14 = v18;
    if (v18 != 2)
    {
      swift_bridgeObjectRelease();
      *a3 = v14;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    if (v11 == v8) {
      goto LABEL_2;
    }
LABEL_3:
    if (v11 >= *(void *)(v7 + 16)) {
      break;
    }
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v9 + 48 * v11++, (uint64_t)v19);
  }
  __break(1u);
  return result;
}

uint64_t DynamicViewList.WrappedList.edit(forID:since:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v60 = *(void *)(a3 + 16);
  uint64_t v61 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)&v48 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v17);
  double v23 = MEMORY[0x270FA5388]((char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = (char *)&v48 - v24;
  int v26 = *a1;
  int v25 = a1[1];
  uint64_t v27 = *((void *)a1 + 1);
  uint64_t v28 = *a2;
  if (v28 < *(void *)&v5[*(int *)(a3 + 44)]) {
    goto LABEL_8;
  }
  int v54 = v19;
  uint64_t v55 = v22;
  uint64_t v58 = v27;
  int v57 = v25;
  int v59 = v26;
  uint64_t v56 = a4;
  uint64_t v29 = v20;
  uint64_t v30 = v21;
  (*(void (**)(char *, char *, uint64_t, double))(v21 + 16))(v15, &v5[*(int *)(a3 + 40)], v20, v23);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v31(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
LABEL_6:
    int v26 = v59;
    int v25 = v57;
LABEL_7:
    uint64_t v27 = v58;
    goto LABEL_8;
  }
  uint64_t v32 = v16;
  uint64_t v52 = v30;
  uint64_t v53 = v29;
  uint64_t v33 = v62;
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v51 = v16 + 32;
  v50(v62, v15, AssociatedTypeWitness);
  uint64_t v34 = *((void *)v5 + 5);
  uint64_t v35 = v34 + *(void *)(*(void *)v34 + 136);
  uint64_t v36 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v60 = v35;
  uint64_t v61 = v36;
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, AssociatedTypeWitness);
    goto LABEL_6;
  }
  uint64_t v49 = v32;
  int v25 = v57;
  int v64 = v59;
  int v65 = v57;
  uint64_t v66 = v58;
  int v40 = *(_DWORD *)(v34 + *(void *)(*(void *)v34 + 144));
  uint64_t v41 = v55;
  _ViewList_ID.explicitID<A>(owner:)(v40, AssociatedTypeWitness, v55);
  if (v31((char *)v41, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v41, v53);
    int v26 = v59;
    goto LABEL_7;
  }
  int v42 = v54;
  v50(v54, (char *)v41, AssociatedTypeWitness);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  unsigned int v44 = v56;
  if (v43)
  {
    int v45 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v45((uint64_t)v42, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v33, AssociatedTypeWitness);
    *unsigned int v44 = 1;
    return result;
  }
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v47 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v47((uint64_t)v42, AssociatedTypeWitness);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v33, AssociatedTypeWitness);
  int v26 = v59;
  uint64_t v27 = v58;
  if (v46)
  {
    *unsigned int v44 = 0;
    return result;
  }
LABEL_8:
  uint64_t v37 = *((void *)v5 + 3);
  uint64_t v38 = *((void *)v5 + 4);
  __swift_project_boxed_opaque_existential_1(v5, v37);
  int v64 = v26;
  int v65 = v25;
  uint64_t v66 = v27;
  uint64_t v63 = v28;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(v38 + 56))(&v64, &v63, v37, v38);
}

uint64_t protocol witness for ViewList.edit(forID:since:) in conformance ViewListSlice(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

uint64_t protocol witness for ViewList.edit(forID:since:) in conformance ForEachList<A, B, C>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  return ForEachList.edit(forID:since:)(a1, a2, a3);
}

uint64_t ForEachList.edit(forID:since:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  v7[0] = *a1;
  v7[1] = v3;
  uint64_t v6 = v4;
  return ForEachState.edit(forID:since:)((int *)v7, &v6, a3);
}

uint64_t ForEachState.edit(forID:since:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  int v45 = a3;
  uint64_t v7 = (void *)*v3;
  uint64_t v37 = v7;
  uint64_t v8 = v7[11];
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v37 - v10;
  uint64_t v41 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v12);
  int v40 = (char *)&v37 - v13;
  unsigned int v14 = *a1;
  unsigned int v43 = a1[1];
  unsigned int v44 = v14;
  uint64_t v42 = *((void *)a1 + 1);
  uint64_t v39 = *a2;
  id v15 = (char *)v4 + v7[20];
  swift_beginAccess();
  unint64_t v16 = v7[10];
  uint64_t v17 = v7[12];
  uint64_t v18 = v7[13];
  uint64_t v19 = v7[14];
  unint64_t v51 = v16;
  uint64_t v52 = v8;
  uint64_t v53 = v17;
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  uint64_t v20 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v15, 1, v20);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v22 = *(void *)&v15[*(int *)(v20 + 64)];
  unint64_t v51 = v16;
  uint64_t v52 = v8;
  uint64_t v53 = v17;
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  uint64_t result = type metadata accessor for ForEach.IDGenerator();
  if (v22)
  {
    unint64_t v51 = __PAIR64__(v43, v44);
    uint64_t v52 = v42;
    if ((*((unsigned char *)v4 + 124) & 1) == 0)
    {
      _ViewList_ID.explicitID<A>(owner:)(*((_DWORD *)v4 + 30), v8, (uint64_t)v11);
      uint64_t v23 = v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v11, 1, v8) == 1)
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v11, v9);
        goto LABEL_17;
      }
      uint64_t v24 = v40;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v40, v11, v8);
      uint64_t v25 = *v4;
      uint64_t v26 = v39;
      if (v39 >= *(void *)((char *)v4 + *(void *)(*v4 + 208)))
      {
        uint64_t v27 = (void *)((char *)v4 + *(void *)(*v4 + 200));
        swift_beginAccess();
        MEMORY[0x24C522390](v48, v24, *v27, v8, &type metadata for _ViewList_Edit, v19);
        char v28 = v48[0];
        if (LOBYTE(v48[0]) != 2)
        {
          swift_endAccess();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v8);
          *int v45 = v28;
          return result;
        }
        swift_endAccess();
        uint64_t v25 = *v4;
      }
      uint64_t v29 = (void *)((char *)v4 + *(void *)(v25 + 192));
      swift_beginAccess();
      uint64_t v30 = *v29;
      uint64_t v31 = v37[15];
      unint64_t v51 = v16;
      uint64_t v52 = v8;
      uint64_t v53 = v17;
      uint64_t v54 = v18;
      uint64_t v55 = v19;
      uint64_t v56 = v31;
      uint64_t v32 = type metadata accessor for ForEachState.Item();
      MEMORY[0x24C522390](v47, v24, v30, v8, v32, v19);
      uint64_t v33 = v47[0];
      if (!v47[0])
      {
        swift_endAccess();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v8);
        goto LABEL_17;
      }
      swift_endAccess();
      if (*(_DWORD *)(v33 + *(void *)(*(void *)v33 + 216)) != *(_DWORD *)((char *)v4 + *(void *)(*v4 + 232)))
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v8);
        uint64_t result = swift_release();
        goto LABEL_17;
      }
      outlined init with copy of _ViewListOutputs.Views(v33 + *(void *)(*(void *)v33 + 176), (uint64_t)&v51);
      if ((v56 & 1) == 0)
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v8);
        *int v45 = 2;
        return outlined destroy of _ViewListOutputs.Views((uint64_t)&v51);
      }
      uint64_t result = swift_release();
      if (*((unsigned char *)v4 + 124) != 1)
      {
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        Inputuint64_t Value = AGGraphGetInputValue();
        outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v48);
        uint64_t v35 = v49;
        uint64_t v36 = v50;
        __swift_project_boxed_opaque_existential_1(v48, v49);
        v47[0] = __PAIR64__(v43, v44);
        v47[1] = v42;
        uint64_t v46 = v26;
        (*(void (**)(void *, uint64_t *, uint64_t, uint64_t))(v36 + 56))(v47, &v46, v35, v36);
        swift_release();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v8);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      }
LABEL_22:
      __break(1u);
      return result;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_17:
  *int v45 = 2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for _ViewList_Edit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t _ViewList_ID.explicitID<A>(owner:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional();
  v9.n128_f64[0] = MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(*(void *)(v3 + 8) + 16);
  if (!v12) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2, v9);
  }
  uint64_t v20 = a3;
  uint64_t v13 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v19 = swift_bridgeObjectRetain();
  for (uint64_t i = (_DWORD *)(v19 + 48); *i != a1; i += 6)
  {
LABEL_3:
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      a3 = v20;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2, v9);
    }
  }
  uint64_t v21 = *((void *)i - 2);
  AnyHashable2.as<A>(type:)();
  uint64_t v15 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, a2) == 1)
  {
    (*v13)(v11, v7);
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v11, a2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, a2);
}

uint64_t View.transformTrait<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = type metadata accessor for TraitTransformerModifier();
  return View.modifier<A>(_:)(v7, a4, v5);
}

uint64_t type metadata accessor for TraitTransformerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SymbolRenderer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for Image.Resolved.UpdateData()
{
  return &type metadata for Image.Resolved.UpdateData;
}

ValueMetadata *type metadata accessor for SystemColorDefinitionType()
{
  return &type metadata for SystemColorDefinitionType;
}

uint64_t initializeWithCopy for SharedFrame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *static Semantics.v6_1.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v6_1, &static Semantics.v6_1, a1);
}

uint64_t _LayoutRoot.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t specialized Edge.Set.init(_:)(unsigned __int8 a1)
{
  unsigned int v1 = 1 << a1;
  if ((a1 & 0xF8) != 0) {
    unsigned int v1 = 0;
  }
  if (a1 <= 8u) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollPositionStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t static GestureMask.all.getter()
{
  return 3;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance GeometryReader<A>.Child()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t ViewRendererHost.performExternalUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock))
      {
        while (1)
        {
LABEL_21:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    a4 = ViewRendererHost.enclosingHosts.getter(a3, a4);
    uint64_t v7 = *(void *)(a4 + 16);
    if (!v7) {
      break;
    }
    uint64_t v8 = a1;
    swift_bridgeObjectRetain();
    __n128 v9 = (uint64_t *)(a4 + 40);
    while (1)
    {
      a3 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      a1 = *(void *)(a3 + 120);
      swift_unknownObjectRetain();
      unint64_t v11 = (void (*)(unsigned char *, void))((uint64_t (*)(unsigned char *, uint64_t, uint64_t))a1)(v19, ObjectType, a3);
      if (__OFADD__(*v12, 1)) {
        break;
      }
      ++*v12;
      v11(v19, 0);
      swift_unknownObjectRelease();
      v9 += 2;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        a1 = v8;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
  }
LABEL_11:
  ((void (*)(void))a1)();
  a3 = *(void *)(a4 + 16);
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = (uint64_t *)(a4 + 40);
    do
    {
      a1 = *v13;
      uint64_t v14 = swift_getObjectType();
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 104);
      swift_unknownObjectRetain();
      if (v15(v14, a1) < 1) {
        goto LABEL_21;
      }
      unint64_t v16 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a1 + 120))(v19, v14, a1);
      if (__OFSUB__(*v17, 1)) {
        goto LABEL_19;
      }
      --*v17;
      v16(v19, 0);
      swift_unknownObjectRelease();
      v13 += 2;
      --a3;
    }
    while (a3);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ViewRendererHost.enclosingHosts.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  (*(void (**)(void))(a2 + 16))();
  if (!swift_weakLoadStrong()) {
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  swift_release();
  if (!Strong)
  {
LABEL_16:
    type metadata accessor for _ContiguousArrayStorage<ViewRendererHost>();
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
    *(void *)(v10 + 32) = v3;
    *(void *)(v10 + 40) = a2;
    swift_unknownObjectRetain();
    return v10;
  }
  uint64_t v6 = swift_conformsToProtocol2();
  uint64_t v7 = v6 ? v6 : 0;
  if (!(v6 ? Strong : 0))
  {
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = ViewRendererHost.enclosingHosts.getter(ObjectType, v7);
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (void *)v10);
  }
  unint64_t v11 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  unint64_t v13 = v11 + 1;
  if (v11 >= v12 >> 1)
  {
    unint64_t v16 = (void *)v10;
    unint64_t v17 = *(void *)(v10 + 16);
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v11 + 1, 1, v16);
    unint64_t v11 = v17;
    uint64_t v10 = (uint64_t)v18;
  }
  *(void *)(v10 + 16) = v13;
  uint64_t v14 = v10 + 16 * v11;
  *(void *)(v14 + 32) = v3;
  *(void *)(v14 + 40) = a2;
  swift_release();
  return v10;
}

void type metadata accessor for _ContiguousArrayStorage<ViewRendererHost>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ViewRendererHost>)
  {
    type metadata accessor for PreferenceKey(255, &lazy cache variable for type metadata for ViewRendererHost);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ViewRendererHost>);
    }
  }
}

uint64_t Transaction.subscript.setter(uint64_t a1)
{
  specialized Transaction.subscript.setter(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t specialized Transaction.subscript.setter(uint64_t a1)
{
  Swift::Int v2 = type metadata accessor for TransactionPropertyKey();
  uint64_t WitnessTable = swift_getWitnessTable();

  return specialized PropertyList.subscript.setter(a1, v2, v2, WitnessTable);
}

uint64_t Transaction.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TransactionPropertyKey();
  uint64_t WitnessTable = swift_getWitnessTable();

  return PropertyList.subscript.getter(v3, a2, v3, WitnessTable);
}

uint64_t type metadata accessor for TransactionPropertyKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PreferenceBridge.__deallocating_deinit()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    PreferenceBridge.invalidate()();
  }
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t base witness table accessor for EncodingConfigurationProviding in AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

uint64_t base witness table accessor for DecodingConfigurationProviding in AttributeScopes.SwiftUIAttributes()
{
  return lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

uint64_t key path getter for EnvironmentValues.redactionReasons : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RedactionReasonsKey>, (uint64_t)&type metadata for RedactionReasonsKey, (uint64_t)&protocol witness table for RedactionReasonsKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

{
  return specialized closure #1 in PropertyList.subscript.getter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:), a2);
}

void AttributedStringTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v15 = *a3;
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str, v9);
  id v16 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v12);
  v19[0] = v14;
  v19[1] = v13;
  uint64_t v18 = v15;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v16, v19, &v18, a4, v17);
}

void closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4, id a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  id v13 = objc_msgSend(a5, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v14 = _NSRange.init<A, B>(_:in:)();
  id v16 = objc_msgSend(a5, sel_attributedSubstringFromRange_, v14, v15);
  (*(void (**)(void))(a12 + 48))();
}

uint64_t specialized Text.Storage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    uint64_t v29 = a2;
    uint64_t v30 = a3;
    uint64_t v28 = a4;
    unint64_t v12 = *(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, _UNKNOWN **))(*(void *)a5 + 80);
    uint64_t v13 = type metadata accessor for Text.ResolvedString(0);
    swift_retain();
    v12(a1, &v29, &v28, v13, &protocol witness table for Text.ResolvedString);
    return outlined consume of Text.Storage(a5, a6, 1);
  }
  if (a3)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, &v29);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>();
    BloomFilter.init(hashValue:)(v15);
    uint64_t v16 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v16, v29);
  }
  swift_release_n();
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  swift_bridgeObjectRetain();
  uint64_t v17 = String.init<A>(_:)();
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v19 = String.caseConvertedIfNeeded(_:)(&v29, v17, v18);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (!a3)
  {
    uint64_t v29 = a2;
    uint64_t v30 = 0;
    swift_retain();
    uint64_t v27 = specialized static ShouldRedactContentKey.value(in:)(&v29);
    swift_release();
    if ((v27 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  swift_retain_n();
  swift_retain_n();
  char v22 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a2);
  swift_release_n();
  swift_release_n();
  if (v22)
  {
LABEL_8:
    uint64_t v23 = String.count.getter();
    uint64_t v19 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v23);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v21 = v25;
  }
LABEL_9:
  type metadata accessor for Text.ResolvedString(0);
  v26._countAndFlagsBits = v19;
  v26._object = v21;
  String.append(_:)(v26);
  return swift_bridgeObjectRelease();
}

void LocalizedTextStorage.resolve<A>(into:in:with:)(uint64_t a1, long long *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  unsigned __int8 v9 = *(unsigned char *)(v5 + 32);
  long long v11 = *a2;
  uint64_t v10 = v6;
  LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(a1, (uint64_t *)&v11, &v10, *(void *)(v5 + 48), *(void *)(v5 + 56), *(void **)(v5 + 64), v7, v8, v9, *(void *)(v5 + 40), a4, a5);
}

void LocalizedStringKey.resolve<A>(into:in:options:table:bundle:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v86 = a8;
  uint64_t v85 = a7;
  uint64_t v82 = a1;
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v17 - 8);
  long long v80 = (void (*)(char *, uint64_t))((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  uint64_t v79 = (uint64_t)&v79 - v20;
  uint64_t v21 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Locale();
  uint64_t v89 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v79 - v27;
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  uint64_t v87 = *a3;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  uint64_t v88 = a12;
  unsigned int v31 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t v90 = a11;
  uint64_t v81 = a10;
  int v83 = a9;
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v31) {
      goto LABEL_7;
    }
LABEL_10:
    if (a6) {
      id v33 = a6;
    }
    else {
      id v33 = objc_msgSend(self, sel_mainBundle);
    }
    id v37 = a6;
    uint64_t v38 = (void *)MEMORY[0x24C522820](v85, v86);
    if (a5)
    {
      uint64_t v39 = (void *)MEMORY[0x24C522820](a4, a5);
      if (v29)
      {
LABEL_18:
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v28);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v39 = 0;
      if (v29) {
        goto LABEL_18;
      }
    }
    uint64_t v42 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v42, (uint64_t)v28);
LABEL_24:
    swift_release_n();
    swift_release_n();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    long long v80 = *(void (**)(char *, uint64_t))(v89 + 8);
    v80(v28, v84);
    unsigned int v44 = (void *)_LocalizeAttributedString(v33, v38, v39, isa);

    if (v83)
    {
      uint64_t v94 = v30;
      uint64_t v95 = v29;
      uint64_t v45 = v88;
      uint64_t v46 = v82;
      uint64_t v47 = v90;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v88 + 32))(&v93, v90, v88);
      long long v92 = v93;
      uint64_t v91 = v87;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v45);
      LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)((uint64_t)v44, &v94, &v92, &v91, (uint64_t)v23, v85, v86, 1, v81);
      LODWORD(v86) = v48;
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v23, type metadata accessor for Text.Style);
      swift_retain_n();
      if (v29)
      {
        swift_retain_n();
        id v49 = v44;
        uint64_t v50 = v79;
        specialized PropertyList.Tracker.value<A>(_:for:)(v30, v79);
      }
      else
      {
        id v60 = v44;
        uint64_t v50 = v79;
        specialized closure #1 in PropertyList.subscript.getter(v30, v79);
      }
      swift_release_n();
      swift_release_n();
      uint64_t v61 = v89;
      uint64_t v62 = v84;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v50, 0, 1, v84);
      uint64_t v63 = getVaList(_:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v50, 1, v62) == 1)
      {
        Class v64 = 0;
      }
      else
      {
        Class v64 = Locale._bridgeToObjectiveC()().super.isa;
        v80((char *)v50, v62);
      }
      id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F086A0]), sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v44, 0, v64, v63);

      uint64_t v94 = v30;
      uint64_t v95 = v29;
      *(void *)&long long v93 = v87;
      specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v65, v46, &v94, (uint64_t *)&v93, v86 & 1, v81, v90, v88);
    }
    else
    {
      uint64_t v94 = v30;
      uint64_t v95 = v29;
      *(void *)&long long v93 = v87;
      ResolvedTextContainer.append(_:in:with:)((uint64_t)v44, &v94, (uint64_t *)&v93, v90, v88);
    }
    return;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_10;
  }
LABEL_7:
  if (a6) {
    id v32 = a6;
  }
  else {
    id v32 = objc_msgSend(self, sel_mainBundle);
  }
  id v34 = a6;
  uint64_t v35 = (void *)MEMORY[0x24C522820](v85, v86);
  if (a5) {
    uint64_t v36 = (void *)MEMORY[0x24C522820](a4, a5);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v40 = v82;
  uint64_t v41 = v84;
  if (v29)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v25);
  }
  else
  {
    uint64_t v51 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v51, (uint64_t)v25);
  }
  swift_release_n();
  swift_release_n();
  Class v52 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v25, v41);
  uint64_t v53 = (void *)_LocalizeString(v32, v35, v36, v52);

  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  if (v83)
  {
    uint64_t v86 = v56;
    uint64_t v85 = v54;
    if (v29)
    {
      uint64_t v57 = v40;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v30, &v94);
      swift_release_n();
      swift_release_n();
      LOBYTE(v92) = v94 == 0;
      swift_retain_n();
      swift_retain_n();
      uint64_t v58 = v80;
      specialized PropertyList.Tracker.value<A>(_:for:)(v30, (uint64_t)v80);
    }
    else
    {
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v66);
      uint64_t v67 = v93;
      uint64_t v68 = swift_retain_n();
      uint64_t v69 = specialized find1<A>(_:key:filter:)(v68, v67);
      uint64_t v58 = v80;
      if (v69) {
        BOOL v70 = *(void *)(v69 + 72) == 0;
      }
      else {
        BOOL v70 = 1;
      }
      uint64_t v57 = v40;
      swift_release_n();
      LOBYTE(v92) = v70;
      uint64_t v71 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v71, (uint64_t)v58);
    }
    swift_release_n();
    swift_release_n();
    uint64_t v72 = (*(uint64_t (**)(void (*)(char *, uint64_t), void, uint64_t, uint64_t))(v89 + 56))(v58, 0, 1, v41);
    MEMORY[0x270FA5388](v72);
    uint64_t v73 = v88;
    *(&v79 - 6) = v90;
    *(&v79 - 5) = v73;
    *(&v79 - 4) = v30;
    *(&v79 - 3) = v29;
    uint64_t v78 = &v92;
    uint64_t v74 = v81;
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5((void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in LocalizedStringKey.resolve<A>(into:in:options:table:bundle:), (uint64_t)(&v79 - 8), v74);
    swift_bridgeObjectRelease();
    uint64_t v75 = String.init(format:locale:arguments:)();
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of Morphology?((uint64_t)v58, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
    uint64_t v94 = v30;
    uint64_t v95 = v29;
    *(void *)&long long v93 = v87;
    specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(v75, v77, v57, &v94, (uint64_t *)&v93, v92, v74, v90, v73);
  }
  else
  {
    uint64_t v94 = v54;
    uint64_t v95 = v56;
    *(void *)&long long v93 = v30;
    *((void *)&v93 + 1) = v29;
    *(void *)&long long v92 = v87;
    unint64_t v59 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v94, (uint64_t *)&v93, (uint64_t *)&v92, v90, MEMORY[0x263F8D310], v88, v59);
  }
  swift_bridgeObjectRelease();
}

uint64_t _LocalizeAttributedString(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  uint64_t v10 = _getBestLocalization(v9, a4);
  if (v10) {
    [v9 localizedAttributedStringForKey:v8 value:0 table:v7 localization:v10];
  }
  else {
  uint64_t v11 = [v9 localizedAttributedStringForKey:v8 value:0 table:v7];
  }

  return v11;
}

id _getBestLocalization(void *a1, void *a2)
{
  v21[1] = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = [MEMORY[0x263EFF960] currentLocale];
  if ([v4 isEqual:v5])
  {

LABEL_9:
    id v13 = 0;
    goto LABEL_10;
  }
  uint64_t v6 = [v4 languageIdentifier];

  if (!v6) {
    goto LABEL_9;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&_getBestLocalization_lock);
  id v7 = (void *)_getBestLocalization_cache;
  if (!_getBestLocalization_cache)
  {
    uint64_t v8 = [MEMORY[0x263F08968] weakToStrongObjectsMapTable];
    id v9 = (void *)_getBestLocalization_cache;
    _getBestLocalization_cache = v8;

    id v7 = (void *)_getBestLocalization_cache;
  }
  uint64_t v10 = [v7 objectForKey:v3];
  uint64_t v11 = [v4 localeIdentifier];
  unint64_t v12 = [v10 objectForKey:v11];

  os_unfair_lock_unlock((os_unfair_lock_t)&_getBestLocalization_lock);
  if (v12)
  {
    id v13 = v12;
  }
  else
  {
    Swift::Int v15 = [v3 localizations];
    uint64_t v16 = (void *)MEMORY[0x263F086E0];
    uint64_t v17 = [v4 languageIdentifier];
    v21[0] = v17;
    uint64_t v18 = [MEMORY[0x263EFF8C0] arrayWithObjects:v21 count:1];
    uint64_t v19 = [v16 preferredLocalizationsFromArray:v15 forPreferences:v18];

    id v13 = [v19 firstObject];
    os_unfair_lock_lock((os_unfair_lock_t)&_getBestLocalization_lock);
    if (!v10)
    {
      uint64_t v10 = objc_opt_new();
      [(id)_getBestLocalization_cache setObject:v10 forKey:v3];
    }
    uint64_t v20 = [v4 localeIdentifier];
    [v10 setObject:v13 forKeyedSubscript:v20];

    os_unfair_lock_unlock((os_unfair_lock_t)&_getBestLocalization_lock);
  }

LABEL_10:

  return v13;
}

uint64_t ResolvedTextContainer.append(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a3;
  v18[0] = *a2;
  v18[1] = v8;
  uint64_t v17 = v10;
  if (v8)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v9, &v16);
    swift_release_n();
    swift_release_n();
    uint64_t v11 = v16;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
    BloomFilter.init(hashValue:)(v12);
    uint64_t v13 = swift_retain_n();
    uint64_t v14 = specialized find1<A>(_:key:filter:)(v13, v16);
    if (v14) {
      uint64_t v11 = *(void *)(v14 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *, BOOL, uint64_t, uint64_t))(a5 + 48))(a1, v18, &v17, v11 == 0, a4, a5);
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(uint64_t)@<X5>, void *a6@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v9);
  uint64_t result = a5(a1);
  if (result) {
    uint64_t v11 = *(void *)(result + 72);
  }
  else {
    uint64_t v11 = 0;
  }
  *a6 = v11;
  return result;
}

uint64_t Text.Resolved.append(_:in:with:isUniqueSizeVariant:)(void *a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *a3;
  id v10 = objc_msgSend(a1, sel_length);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v4;
  v11[3] = v9;
  v11[4] = v7;
  v11[5] = v8;
  v11[6] = a1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in Text.Resolved.append(_:in:with:isUniqueSizeVariant:);
  *(void *)(v12 + 24) = v11;
  v21[4] = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  v21[5] = v12;
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 1107296256;
  void v21[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_28;
  uint64_t v13 = _Block_copy(v21);
  swift_retain();
  id v14 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttributesInRange_options_usingBlock_, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = type metadata accessor for Text.Resolved(0);
    uint64_t v17 = *(int *)(v16 + 20);
    if (!*(void *)(v4 + v17))
    {
      id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v14);
      uint64_t v19 = *(void **)(v4 + v17);
      *(void *)(v4 + v17) = v18;
    }
    __int16 v20 = word_26FA881C0;
    if ((a4 & 1) == 0) {
      __int16 v20 = 0;
    }
    *(_WORD *)(v4 + *(int *)(v16 + 32) + 32) |= v20;
    return swift_release();
  }
  return result;
}

__n128 protocol witness for ResolvedTextContainer.idiom.getter in conformance Text.Resolved@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(v2 + *(int *)(a1 + 28));
  *a2 = result;
  return result;
}

uint64_t LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)(uint64_t a1, uint64_t *a2, long long *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v34 = a8;
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  long long v33 = *a3;
  uint64_t v15 = *a4;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v14, &v35);
    swift_release_n();
    uint64_t v16 = swift_release_n();
    uint64_t v17 = v35;
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v18);
    uint64_t v19 = swift_retain_n();
    uint64_t v20 = specialized find1<A>(_:key:filter:)(v19, v35);
    if (v20) {
      uint64_t v17 = *(void *)(v20 + 72);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v16 = swift_release_n();
  }
  LOBYTE(v35) = v17 == 0;
  MEMORY[0x270FA5388](v16);
  v23[2] = v14;
  v23[3] = v13;
  long long v24 = v33;
  uint64_t v25 = &v35;
  uint64_t v26 = a1;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  char v29 = v34 & 1;
  uint64_t v30 = a9;
  uint64_t v31 = a5;
  uint64_t v32 = v15;
  swift_bridgeObjectRetain();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5((void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:), (uint64_t)v23, a9);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t specialized LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  uint64_t v16 = specialized LocalizedStringKey.getTextArguments()();
  if (*(void *)(v16 + 16))
  {
    id v17 = objc_msgSend(a1, sel_string);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v19;
    uint64_t v27 = v18;

    uint64_t v29 = v13;
    uint64_t v30 = v14;
    uint64_t v28 = v15;
    MEMORY[0x270FA5388](v20);
    v24[10] = a7;
    v24[11] = a8;
    v24[12] = a1;
    v24[13] = a2;
    v24[14] = v13;
    v24[15] = v14;
    v24[16] = v15;
    char v25 = a5 & 1;
    MEMORY[0x270FA5388](v21);
    v24[2] = a7;
    v24[3] = a8;
    v24[4] = a1;
    v24[5] = a2;
    v24[6] = v15;
    specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(v27, v26, &v29, (uint64_t)&v28, v16, (void (*)(uint64_t, uint64_t, unint64_t, unint64_t))partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), v22, (void (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, unint64_t, void *))partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:), (uint64_t)v24);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    uint64_t v28 = v15;
    return (*(uint64_t (**)(void *, uint64_t *, uint64_t *, void, uint64_t, uint64_t))(a8 + 48))(a1, &v29, &v28, a5 & 1, a7, a8);
  }
}

uint64_t specialized Text.ResolvedString.append(_:in:with:isUniqueSizeVariant:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  id v4 = objc_msgSend(a1, sel_string);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v22);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
    BloomFilter.init(hashValue:)(v8);
    uint64_t v9 = swift_retain_n();
    specialized find1<A>(_:key:filter:)(v9, v22);
  }
  swift_release_n();
  uint64_t v22 = v5;
  uint64_t v23 = v7;
  swift_bridgeObjectRetain();
  uint64_t v10 = String.init<A>(_:)();
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v12 = String.caseConvertedIfNeeded(_:)(&v22, v10, v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v22 = v3;
    uint64_t v23 = 0;
    swift_retain();
    uint64_t v21 = specialized static ShouldRedactContentKey.value(in:)(&v22);
    swift_release();
    if ((v21 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  swift_retain_n();
  swift_retain_n();
  char v15 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v3);
  swift_release_n();
  swift_release_n();
  if (v15)
  {
LABEL_6:
    uint64_t v16 = String.count.getter();
    uint64_t v12 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v16);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v14 = v18;
  }
LABEL_7:
  type metadata accessor for Text.ResolvedString(0);
  v19._countAndFlagsBits = v12;
  v19._object = v14;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, void *a4, int a5, int a6, uint64_t *a7, id a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = *a7;
  uint64_t v18 = a7[1];
  id v19 = objc_msgSend(a8, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  v33[1] = v21;
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v22 = _NSRange.init<A, B>(_:in:)();
  id v24 = objc_msgSend(a8, sel_attributesAtIndex_longestEffectiveRange_inRange_, v22, 0, v22, v23);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = Text.withInlinePresentationIntent(from:)(v25, a1, a2, a3 & 1, a4);
  uint64_t v28 = v27;
  LOBYTE(a1) = v29;
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  LOBYTE(a1) = a1 & 1;
  v34[0] = v17;
  v34[1] = v18;
  v33[0] = a10;
  Text.resolve<A>(into:in:with:)(a9, v34, v33, v26, v28, a1, v31, a11, a12);
  outlined consume of Text.Storage(v26, v28, a1);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>)
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(255, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>);
  }
  return result;
}

uint64_t Text.withInlinePresentationIntent(from:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  if (!*(void *)(a1 + 16))
  {
    long long v40 = 0u;
    long long v41 = 0u;
    goto LABEL_12;
  }
  id v10 = (id)*MEMORY[0x263F08158];
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    long long v40 = 0u;
    long long v41 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v40);

  if (!*((void *)&v41 + 1))
  {
LABEL_12:
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)&v40, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    return a2;
  }
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  if (v39)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    }
    unint64_t v15 = a5[2];
    unint64_t v14 = a5[3];
    if (v15 >= v14 >> 1) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, a5);
    }
    a5[2] = v15 + 1;
    uint64_t v16 = &a5[2 * v15];
    v16[4] = 0;
    *((unsigned char *)v16 + 40) = -32;
    if ((v39 & 2) == 0)
    {
LABEL_7:
      if ((v39 & 4) == 0) {
        goto LABEL_8;
      }
LABEL_25:
      type metadata accessor for MonospacedTextModifier();
      uint64_t v23 = swift_allocObject();
      *(unsigned char *)(v23 + 16) = 1;
      outlined copy of Text.Storage(a2, a3, a4 & 1);
      swift_bridgeObjectRetain();
      swift_retain();
      id v24 = a5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
      }
      unint64_t v25 = v24[2];
      unint64_t v26 = v24[3];
      unint64_t v27 = v25 + 1;
      if (v25 >= v26 >> 1)
      {
        unint64_t v38 = v25 + 1;
        int v34 = v24;
        unint64_t v35 = v24[2];
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v25 + 1, 1, v34);
        unint64_t v25 = v35;
        unint64_t v27 = v38;
        id v24 = v36;
      }
      v24[2] = v27;
      uint64_t v28 = &v24[2 * v25];
      v28[4] = v23;
      *((unsigned char *)v28 + 40) = -64;
      swift_release();
      outlined consume of Text.Storage(a2, a3, a4 & 1);
      swift_bridgeObjectRelease();
      a5 = v24;
      if ((v39 & 0x20) != 0) {
        goto LABEL_30;
      }
      return a2;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_7;
  }
  type metadata accessor for BoldTextModifier();
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = a5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v19 = v18[2];
  unint64_t v20 = v18[3];
  unint64_t v21 = v19 + 1;
  if (v19 >= v20 >> 1)
  {
    unint64_t v37 = v19 + 1;
    uint64_t v31 = v18;
    unint64_t v32 = v18[2];
    long long v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v19 + 1, 1, v31);
    unint64_t v19 = v32;
    unint64_t v21 = v37;
    uint64_t v18 = v33;
  }
  void v18[2] = v21;
  uint64_t v22 = &v18[2 * v19];
  v22[4] = v17;
  *((unsigned char *)v22 + 40) = -64;
  swift_release();
  outlined consume of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRelease();
  a5 = v18;
  if ((v39 & 4) != 0) {
    goto LABEL_25;
  }
LABEL_8:
  if ((v39 & 0x20) != 0)
  {
LABEL_30:
    char v29 = a4 & 1;
    uint64_t v30 = Text.strikethrough(_:color:)(1, 0, a2, a3, a4 & 1, a5);
    outlined consume of Text.Storage(a2, a3, v29);
    swift_bridgeObjectRelease();
    return v30;
  }
  return a2;
}

id NSAttributedString.init(swiftUIAttributedString:)(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v16);
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  Swift::Int v8 = (char *)&v16 - v7;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = *(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x98);
  id v10 = static CoreGlue2.shared;
  v9(a1);

  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.SwiftUIAttributes(0);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
  uint64_t v11 = NSAttributedString.init<A>(_:including:)();
  id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v13 = objc_msgSend(v12, sel_initWithAttributedString_, v11, v16);

  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(a1, v2);
  v14((uint64_t)v8, v2);
  return v13;
}

uint64_t type metadata accessor for AttributeScopes.SwiftUIAttributes(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for AttributeScopes.SwiftUIAttributes);
}

uint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KeyframeTrackContentBuilder.Conditional()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for PreferenceBinder<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in GeometryProxy.subscript.getter(long long *a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  int v3 = *((_DWORD *)a1 + 6);
  long long v5 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  int v7 = v3;
  return Anchor.in(_:)((uint64_t)&v5, v2);
}

uint64_t Anchor.in(_:)(uint64_t a1, uint64_t a2)
{
  Inputuint64_t Value = AGGraphGetInputValue();
  uint64_t v4 = *(void *)InputValue;
  double v5 = *(double *)(InputValue + 8);
  double v6 = *(double *)(InputValue + 16);
  double v7 = *(double *)(InputValue + 24);
  double v8 = *(double *)(InputValue + 32);
  uint64_t v9 = AGGraphGetInputValue();
  double v10 = *(double *)v9;
  double v11 = *(double *)(v9 + 8);
  double v12 = v7 - (*(double *)v9 - v5);
  swift_retain();
  v14[0] = v4;
  *(double *)&v14[1] = v10;
  *(double *)&_DWORD v14[2] = v11;
  *(double *)&v14[3] = v12;
  *(double *)&v14[4] = v8 - (v11 - v6);
  (*(void (**)(void *))(*(void *)a2 + 96))(v14);

  return swift_release();
}

uint64_t AnchorValueBox.convert(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  long long v11 = *(_OWORD *)(a1 + 1);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = v2 + *(void *)(*(void *)v2 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, v7, AssociatedTypeWitness);
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  char v18 = 2;
  uint64_t v12 = v4;
  long long v13 = v11;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_OWORD *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v16, &v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  return outlined destroy of CoordinateSpace((uint64_t)v16);
}

uint64_t CGRect.convert(from:transform:)(uint64_t a1, double *a2)
{
  return CGRect.convert(to:transform:)(a1, a2, 3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t one-time initialization function for v4()
{
  uint64_t result = swiftUI_v4_0_os_versions();
  static Semantics.uint64_t v4 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v4_0_os_versions()
{
  return 0x7E60901FFFFFFFFLL;
}

uint64_t one-time initialization function for v3()
{
  uint64_t result = swiftUI_v3_0_os_versions();
  static Semantics.int v3 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v3_0_os_versions()
{
  return 0x7E50901FFFFFFFFLL;
}

SwiftUI::LocalizedStringKey::StringInterpolation __swiftcall LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  int v3 = v2;
  void *v2 = 0;
  v2[1] = 0xE000000000000000;
  v2[3] = 0;
  if (interpolationCount + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  BOOL v5 = __OFADD__(literalCapacity, 2 * interpolationCount);
  literalCapacity += 2 * interpolationCount;
  if (v5)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  MEMORY[0x24C522950](literalCapacity);
  literalCapacitdouble y = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, interpolationCount & ~(interpolationCount >> 63), 0, MEMORY[0x263F8EE78]);
  v3[2] = literalCapacity;
LABEL_6:
  result.seed.nextID = v7;
  result.arguments._rawuint64_t Value = v6;
  result.key._object = (void *)interpolationCount;
  result.key._countAndFlagsBits = literalCapacity;
  return result;
}

uint64_t View.scrapeableAttachment(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for ScrapeableAttachmentViewModifier);
}

unsigned char *storeEnumTagSinglePayload for Text.WritingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *SwiftUI::LocalizedStringKey::StringInterpolation result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::LocalizedStringKey::StringInterpolation result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata completion function for _ShapeView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t EnvironmentValues.symbolVariants.setter(__int16 *a1)
{
  uint64_t v2 = *v1;
  __int16 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, __int16 a2)
{
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v11);
  if (!result || *(unsigned __int8 *)(result + 72) != a2) {
    goto LABEL_10;
  }
  int v8 = *(unsigned __int8 *)(result + 73);
  if (HIBYTE(a2) == 3)
  {
    if (v8 == 3) {
      return result;
    }
LABEL_10:
    uint64_t v10 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>();
    *(_WORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v10);
    return swift_release();
  }
  if (v8 == 3 || HIBYTE(a2) != v8) {
    goto LABEL_10;
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextJustificationKey>, (uint64_t)&type metadata for TextJustificationKey, (uint64_t)&protocol witness table for TextJustificationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v13);
  if (!result) {
    goto LABEL_11;
  }
  int v8 = *(_WORD *)(result + 72);
  if (a2 == 2)
  {
    if (v8 == 2) {
      return result;
    }
LABEL_11:
    uint64_t v12 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextJustificationKey>>();
    *(_WORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v12);
    return swift_release();
  }
  if (v8 == 2) {
    goto LABEL_11;
  }
  uint64_t v9 = v8 & 1;
  uint64_t v10 = ((a2 & 0x100) == 0) ^ ((unsigned __int16)(v8 & 0x100) >> 8);
  if (((a2 & 1) == 0) == v9 || v10 == 0) {
    goto LABEL_11;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SymbolVariantsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>, (uint64_t)&type metadata for SymbolVariantsKey, (uint64_t)&protocol witness table for SymbolVariantsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SymbolVariantsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeAreaRegions()
{
  return &type metadata for SafeAreaRegions;
}

uint64_t type metadata completion function for StrokeBorderShapeView()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for _StrokedShape();
    swift_getWitnessTable();
    type metadata accessor for _ShapeView();
    type metadata accessor for _BackgroundModifier();
    uint64_t v0 = type metadata accessor for ModifiedContent();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t type metadata completion function for StrokeShapeView()
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 _StrokedShape.init(shape:style:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  __n128 result = *(__n128 *)a2;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t static StrokeBorderShapeView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v20 = *(void *)a2;
  int v19 = *(_DWORD *)(a2 + 8);
  uint64_t v18 = *(void *)(a2 + 16);
  int v21 = *(_DWORD *)(a2 + 80);
  v32[1] = *a1;
  uint64_t v27 = a4;
  *(void *)&long long v28 = a5;
  type metadata accessor for StrokeBorderShapeView();
  type metadata accessor for _GraphValue();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = type metadata accessor for _StrokedShape();
  uint64_t v24 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = a4;
  uint64_t v9 = type metadata accessor for _ShapeView();
  uint64_t v10 = type metadata accessor for _BackgroundModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  long long v16 = *(_OWORD *)(a2 + 56);
  long long v17 = *(_OWORD *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StrokeBorderShapeView._makeView(view:inputs:), v11, v32);
  uint64_t v23 = v20;
  LODWORD(v24) = v19;
  uint64_t WitnessTable = v18;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  long long v28 = v17;
  long long v29 = v16;
  uint64_t v30 = v14;
  int v31 = v21;
  return static ModifiedContent<>._makeView(view:inputs:)(v32, &v23, v9, v10, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)&protocol witness table for _BackgroundModifier<A>, a6);
}

uint64_t closure #1 in static StrokeBorderShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t WitnessTable = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v10 = type metadata accessor for StrokeBorderShapeView();
  uint64_t v11 = a1 + *(int *)(v10 + 68);
  v15[2] = v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for _StrokedShape();
  uint64_t v18 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = a6;
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v15, v16, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
  return v17;
}

uint64_t type metadata accessor for StrokeBorderShapeView()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in static StrokeShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  _OWORD v13[2] = type metadata accessor for StrokeShapeView();
  uint64_t v15 = type metadata accessor for _StrokedShape();
  uint64_t v16 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = a6;
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  return v15;
}

uint64_t type metadata accessor for _StrokedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static StrokeShapeView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v20 = *(void *)(a2 + 16);
  int v21 = *(_DWORD *)(a2 + 80);
  v32[1] = *a1;
  uint64_t v27 = a4;
  *(void *)&long long v28 = a5;
  type metadata accessor for StrokeShapeView();
  type metadata accessor for _GraphValue();
  uint64_t v23 = type metadata accessor for _StrokedShape();
  uint64_t v24 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = a4;
  uint64_t v11 = type metadata accessor for _ShapeView();
  uint64_t v12 = type metadata accessor for _BackgroundModifier();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  long long v18 = *(_OWORD *)(a2 + 56);
  long long v19 = *(_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StrokeShapeView._makeView(view:inputs:), v13, v32);
  uint64_t v23 = v9;
  LODWORD(v24) = v10;
  uint64_t WitnessTable = v20;
  uint64_t v26 = v14;
  uint64_t v27 = v15;
  long long v28 = v19;
  long long v29 = v18;
  uint64_t v30 = v16;
  int v31 = v21;
  return static ModifiedContent<>._makeView(view:inputs:)(v32, &v23, v11, v12, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)&protocol witness table for _BackgroundModifier<A>, a6);
}

uint64_t type metadata accessor for StrokeShapeView()
{
  return swift_getGenericMetadata();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  MatchedFrame.value.getter(*a1, a1[2], (uint64_t)v2);
  return AGGraphSetOutputValue();
}

{
  uint64_t v2;
  uint64_t v3;

  unint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in ScrollTargetRole.SetLayout.value.getter;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

float64x2_t *MatchedFrame.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3 = HIDWORD(a2);
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  uint64_t Value = AGGraphGetValue();
  if (*(_DWORD *)(Value + 52) == a1 || (*(unsigned char *)(Value + 48) & 1) != 0)
  {
    Swift::Int v7 = (uint64_t *)AGGraphGetValue();
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    __n128 result = (float64x2_t *)AGGraphGetValue();
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v9;
    float64x2_t v11 = result[1];
    *(float64x2_t *)(a3 + 16) = *result;
    *(float64x2_t *)(a3 + 32) = v11;
    return result;
  }
  double v12 = *(double *)Value;
  double v13 = *(double *)(Value + 8);
  double v14 = *(double *)(Value + 16);
  double v15 = *(double *)(Value + 24);
  double v16 = *(double *)(Value + 32);
  double v17 = *(double *)(Value + 40);
  v56.f64[0] = *(float64_t *)Value;
  v56.f64[1] = v13;
  v57.f64[0] = v14;
  v57.f64[1] = v15;
  double v58 = v16;
  double v59 = v17;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  if ((*(_DWORD *)AGGraphGetValue() & 6) == 2)
  {
    float64_t v18 = v15;
    float64_t v45 = v14;
    if (*MEMORY[0x263F288F8] != v3)
    {
      uint64_t v19 = *(void *)AGGraphGetValue();
      uint64_t v20 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v20 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock))
        {
          __n128 result = (float64x2_t *)_assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      double v47 = v14;
      char v48 = 0;
      double v49 = v15;
      char v50 = 0;
      double v21 = (*(double (**)(double *))(*(void *)v19 + 120))(&v47);
      float64_t v23 = v22;
      double v24 = v15 - v22;
      uint64_t v25 = AGGraphGetValue();
      double v27 = *(double *)(v25 + 8);
      double v26 = *(double *)(v25 + 16);
      swift_release();
      v56.f64[0] = v12 + (v14 - v21) * v27;
      v56.f64[1] = v13 + v24 * v26;
      v57.f64[0] = v21;
      v57.f64[1] = v23;
      double v58 = v14;
      double v59 = v15;
      double v17 = v15;
      double v16 = v14;
      float64_t v18 = v23;
      float64_t v45 = v21;
    }
  }
  else
  {
    long long v28 = (double *)AGGraphGetValue();
    float64_t v18 = v28[1];
    double v16 = v28[2];
    double v17 = v28[3];
    float64_t v45 = *v28;
    v57.f64[0] = *v28;
    v57.f64[1] = v18;
    double v58 = v16;
    double v59 = v17;
  }
  if (*(unsigned char *)AGGraphGetValue())
  {
    uint64_t v31 = AGGraphGetValue();
    double v32 = *(double *)v31;
    double v33 = *(double *)(v31 + 8);
    double v34 = *(double *)(v31 + 16);
    double v35 = *(double *)(v31 + 24);
    double v36 = *(double *)(v31 + 32);
    uint64_t v37 = AGGraphGetValue();
    double v38 = *(double *)v37;
    double v39 = *(double *)(v37 + 8);
    double v40 = v35 - (*(double *)v37 - v33);
    uint64_t v54 = 0;
    memset(v53, 0, sizeof(v53));
    char v55 = 2;
    v52[0] = v32;
    v52[1] = v38;
    v52[2] = v39;
    v52[3] = v40;
    v52[4] = v36 - (v39 - v34);
    outlined init with copy of CoordinateSpace((uint64_t)v53, (uint64_t)&v47);
    char v51 = 3;
    swift_retain_n();
    specialized ViewTransform.convert(_:_:)((uint64_t)&v47, v52, (uint64_t)&v56);
    outlined destroy of ViewTransform.Conversion((uint64_t)&v47);
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v53);
    uint64_t v41 = AGGraphGetValue();
    uint64_t v42 = (float64x2_t *)AGGraphGetValue();
    float64x2_t v44 = vsubq_f64(v56, vmulq_f64(*(float64x2_t *)(v41 + 8), v57));
    float64x2_t v46 = v57;
    float64x2_t v43 = *v42;
    __n128 result = (float64x2_t *)swift_release();
    float64_t v30 = v46.f64[0];
    float64x2_t v29 = vaddq_f64(v44, v43);
    double v16 = v58;
    double v17 = v59;
    float64_t v18 = v46.f64[1];
  }
  else
  {
    __n128 result = (float64x2_t *)AGGraphGetValue();
    float64x2_t v29 = *result;
    float64_t v30 = v45;
  }
  *(float64x2_t *)a3 = v29;
  *(float64_t *)(a3 + 16) = v30;
  *(float64_t *)(a3 + 24) = v18;
  *(double *)(a3 + 32) = v16;
  *(double *)(a3 + 40) = v17;
  return result;
}

uint64_t closure #1 in static _MatchedGeometryEffect.makeView<A>(modifier:inputs:clipShape:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  v9[2] = v2;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v9[5];
}

uint64_t MatchedSharedFrame.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for Pair();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v34 - v11;
  double v13 = (void *)*((unsigned int *)v2 + 13);
  if (v13 == *MEMORY[0x263F288F8])
  {
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == v13) {
      __break(1u);
    }
    *((_DWORD *)v2 + 13) = CurrentAttribute;
    double v13 = (void *)CurrentAttribute;
  }
  uint64_t v37 = v10;
  uint64_t v38 = v8;
  double v39 = v7;
  uint64_t v40 = v5;
  uint64_t v41 = v4;
  int v15 = *((_DWORD *)v2 + 14);
  uint64_t v16 = *((void *)v2 + 2);
  int v17 = *((_DWORD *)v2 + 6);
  uint64_t v18 = *((void *)v2 + 4);
  char v19 = *((unsigned char *)v2 + 60);
  long long v36 = *v2;
  int v20 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v15 != v20)
  {
    char v21 = *((unsigned char *)v2 + 48);
    *((_DWORD *)v2 + 14) = v20;
    if ((v21 & 1) == 0)
    {
      MatchedGeometryScope.releaseFrame(index:owner:)(*((void *)v2 + 5), v13);
      *((void *)v2 + 5) = 0;
      *((unsigned char *)v2 + 48) = 1;
    }
    int v15 = v20;
  }
  if (v19)
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    char v54 = 1;
    int v55 = (int)v13;
  }
  else
  {
    uint64_t v35 = (uint64_t)v2 + 40;
    uint64_t v22 = *((void *)v2 + 5);
    char v23 = *((unsigned char *)v2 + 48);
    long long v51 = v36;
    *(void *)&long long v52 = v16;
    DWORD2(v52) = v17;
    *(void *)&long long v53 = v18;
    *((void *)&v53 + 1) = v22;
    char v54 = v23;
    int v55 = (int)v13;
    int v56 = v15;
    char v57 = v19;
    MatchedSharedFrame.modifier.getter((uint64_t)v12);
    uint64_t v24 = (uint64_t)v39;
    _MatchedGeometryEffect.qualifiedID.getter(v9, (uint64_t)v39);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v37 + 8);
    swift_retain();
    v25(v12, v9);
    uint64_t v26 = *((unsigned int *)v2 + 13);
    double v27 = (_OWORD *)*((void *)v2 + 1);
    uint64_t v28 = *((void *)v2 + 2);
    float64x2_t v29 = (void *)*((unsigned int *)v2 + 6);
    uint64_t v30 = *((unsigned int *)v2 + 1);
    unint64_t v31 = lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
    uint64_t v47 = v38;
    unint64_t v48 = v31;
    uint64_t v32 = v41;
    swift_getWitnessTable();
    LODWORD(v27) = MatchedGeometryScope.frame<A>(index:for:view:)(v49, v35, v24, v26 | (v30 << 32), v27, v28, v29);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v32);
    long long v42 = v49[0];
    long long v43 = v49[1];
    long long v44 = v49[2];
    char v45 = v50;
    int v46 = (int)v27;
  }
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for Pair()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SharedFrame.updateValue()()
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  if (one-time initialization token for infinity != -1) {
LABEL_89:
  }
    swift_once();
  double v2 = *(double *)&static Time.infinity;
  unint64_t v4 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v5 = v4 + 112;
  swift_beginAccess();
  if (v3 < 0)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v127 = v4;
  unint64_t v6 = *(void *)(v4 + 112);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v3 >= (unint64_t)v7) {
    goto LABEL_91;
  }
  uint64_t v126 = v4 + 112;
  *(void *)&long long v128 = v0;
  uint64_t v5 = v3 << 6;
  uint64_t v8 = *(void *)(v6 + (v3 << 6) + 80);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
LABEL_8:
    uint64_t v14 = v128;
    SharedFrame.removeListeners()();
    swift_release();
    *(void *)(v128 + 32) = 0;
    *(void *)(v14 + 40) = 0;
    *(_DWORD *)(v14 + 48) = 0;
    int v15 = *MEMORY[0x263F288F8];
    long long v138 = 0u;
    long long v139 = 0u;
    float64x2_t v137 = 0u;
    char v140 = 1;
    int v141 = v15;
LABEL_9:
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    return AGGraphSetOutputValue();
  }
  double v10 = -v2;
  type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
  uint64_t v0 = v11;
  uint64_t v12 = v8 + 36;
  uint64_t v13 = v9;
  while (1)
  {
    v12 += 28;
    if (*(unsigned char *)(AGGraphGetValue() + 24) == 1) {
      break;
    }
    if (!--v13) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = v128;
  uint64_t v18 = *(void *)(v128 + 32);
  uint64_t v122 = (uint64_t *)(v128 + 32);
  uint64_t v123 = v18;
  if (v18)
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v10 = *Value;
    }
  }
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  unint64_t v1 = (float64x2_t *)Attribute;
  int v125 = *MEMORY[0x263F288F8];
  uint64_t v124 = v0;
  if (Attribute == v125)
  {
    int v25 = 0;
LABEL_20:
    int v26 = v125;
    if (v3 >= v7) {
      goto LABEL_32;
    }
    goto LABEL_21;
  }
  uint64_t v22 = 0;
  uint64_t v23 = v8 + 44;
  while (*(_DWORD *)(v23 - 12) != Attribute)
  {
    uint64_t v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_89;
    }
    v23 += 28;
    ++v22;
    if (v24 == v9)
    {
      int v25 = Attribute;
      goto LABEL_20;
    }
  }
  if (v22 < v9)
  {
    int v31 = *(_DWORD *)(v128 + 40);
    BOOL v40 = v31 == *(_DWORD *)AGGraphGetValue() >> 1;
    int v26 = v125;
    if (!v40)
    {
      SharedFrame.removeListeners()();
      swift_release();
      uint64_t v123 = 0;
      uint64_t v32 = v122;
      *uint64_t v122 = 0;
      v32[1] = 0;
      *((_DWORD *)v32 + 4) = 0;
      unint64_t v6 = *(void *)v126;
      uint64_t v7 = *(void *)(*(void *)v126 + 16);
    }
    int v25 = (int)v1;
    if (v3 >= v7)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_21:
    if (*(void *)(*(void *)(v6 + v5 + 80) + 16) < 2uLL)
    {
      uint64_t v30 = 0;
      goto LABEL_42;
    }
    int v121 = v25;
    uint64_t v9 = v3 << 6;
    unint64_t v27 = v127;
    uint64_t v28 = MatchedGeometryScope.sourceViewIndex(frameIndex:)(v3);
    unint64_t v6 = *(void *)(v127 + 112);
    if (v29)
    {
LABEL_33:
      uint64_t v30 = 0;
      uint64_t v5 = v9;
      goto LABEL_41;
    }
    if (v3 < *(void *)(v6 + 16))
    {
      int v25 = v121;
      if (*(unsigned char *)(v6 + v5 + 92))
      {
        uint64_t v30 = 0;
        if (!v28)
        {
          while (1)
          {
LABEL_42:
            if (v3 >= *(void *)(v6 + 16)) {
              goto LABEL_92;
            }
            uint64_t v36 = *(void *)(v6 + v5 + 80);
            uint64_t v37 = *(void *)(v36 + 16);
            if (!v37)
            {
              SharedFrame.removeListeners()();
              swift_release();
              uint64_t v81 = v122;
              *uint64_t v122 = 0;
              v81[1] = 0;
              *((_DWORD *)v81 + 4) = 0;
              long long v138 = 0u;
              long long v139 = 0u;
              float64x2_t v137 = 0u;
              char v140 = 1;
              int v141 = v26;
              goto LABEL_9;
            }
            unint64_t v6 = *(unsigned int *)(v36 + 32);
            LODWORD(v127) = *(_DWORD *)(v36 + 36);
            int v38 = *(_DWORD *)(v36 + 44);
            double v33 = (void *)*(unsigned int *)(v36 + 48);
            int v39 = *(_DWORD *)(v36 + 56);
            LODWORD(v126) = *(_DWORD *)(v36 + 52);
            BOOL v40 = v1 != v26 && v25 == v6;
            char v41 = v40;
            LODWORD(v123) = v38;
            if (v37 == 1 || (v41 & 1) != 0)
            {
              unint64_t v1 = &v134;
              if (!v30) {
                goto LABEL_63;
              }
              goto LABEL_62;
            }
            uint64_t v9 = v30;
            int v121 = v39;
            AGGraphClearUpdate();
            uint64_t v17 = *(void *)AGGraphGetValue();
            swift_retain();
            AGGraphSetUpdate();
            uint64_t v42 = swift_retain();
            char v43 = specialized closure #1 in PropertyList.subscript.getter(v42);
            uint64_t v44 = swift_release();
            unint64_t v1 = &v134;
            if (v43)
            {
              v137.f64[0] = 0.0;
              MEMORY[0x270FA5388](v44);
              v116[2] = &v137;
              specialized Transaction.forEach<A>(keyType:_:)((uint64_t)partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter, (uint64_t)v116, (void *)v17);
              float64_t v45 = v137.f64[0];
              if (!*(void *)&v137.f64[0]) {
                goto LABEL_73;
              }
            }
            else
            {
              uint64_t v106 = swift_retain();
              uint64_t v107 = specialized find<A>(_:key:)(v106);
              if (!v107)
              {
                swift_release_n();
                uint64_t v17 = v128;
LABEL_76:
                if (!v9)
                {
LABEL_63:
                  *(void *)(v17 + 44) = AGCreateWeakAttribute();
                  *(_DWORD *)(v17 + 40) = *(_DWORD *)AGGraphGetValue() >> 1;
                  uint64_t v82 = AGGraphGetValue();
                  double v83 = *(double *)v82;
                  uint64_t v84 = *(void *)(v82 + 24);
                  float64x2_t v143 = 0uLL;
                  *(double *)CGSize v144 = v83;
                  long long v128 = *(_OWORD *)(v82 + 8);
                  *(_OWORD *)&v144[8] = v128;
                  uint64_t v145 = v84;
                  uint64_t v85 = AGGraphGetValue();
                  uint64_t v86 = *(void *)v85;
                  double v87 = *(double *)(v85 + 8);
                  double v88 = *(double *)(v85 + 16);
                  double v89 = *(double *)(v85 + 24);
                  double v90 = *(double *)(v85 + 32);
                  uint64_t v91 = AGGraphGetValue();
                  double v92 = *(double *)v91;
                  double v93 = *(double *)(v91 + 8);
                  double v94 = v89 - (*(double *)v91 - v87);
                  uint64_t v95 = AGGraphGetValue();
                  double v96 = *(double *)(v95 + 16) * *(double *)&v128 + 0.0;
                  v143.f64[0] = v83 * *(double *)(v95 + 8) + 0.0;
                  v143.f64[1] = v96;
                  float64x2_t v134 = 0u;
                  memset(v135, 0, sizeof(v135));
                  LOBYTE(v136) = 2;
                  *(void *)&long long v130 = v86;
                  *((double *)&v130 + 1) = v92;
                  *(double *)&long long v131 = v93;
                  *((double *)&v131 + 1) = v94;
                  double v132 = v90 - (v93 - v88);
                  outlined init with copy of CoordinateSpace((uint64_t)&v134, (uint64_t)&v137);
                  char v142 = 2;
                  swift_retain_n();
                  specialized ViewTransform.convert(_:_:)((uint64_t)&v137, (double *)&v130, (uint64_t)&v143);
                  outlined destroy of ViewTransform.Conversion((uint64_t)&v137);
                  swift_release();
                  outlined destroy of CoordinateSpace((uint64_t)&v134);
                  uint64_t v5 = *(void *)(v17 + 32);
                  if (!v5)
                  {
                    float64_t v98 = v143.f64[1];
                    float64_t v97 = v143.f64[0];
                    int v26 = v6;
                    float64x2_t v99 = *(float64x2_t *)v144;
                    goto LABEL_70;
                  }
                  float64x2_t v137 = v143;
                  long long v138 = *(_OWORD *)v144;
                  swift_retain();
                  LOBYTE(v134.f64[0]) = 0;
                  if (specialized AnimatorState.update(_:at:environment:)(&v137, v10))
                  {
                    swift_release();
                    *(void *)(v17 + 32) = 0;
                    SharedFrame.removeListeners()();
                    swift_release();
                    goto LABEL_69;
                  }
                  if (one-time initialization token for shared != -1) {
                    goto LABEL_95;
                  }
                  goto LABEL_68;
                }
LABEL_62:
                AGGraphClearUpdate();
                closure #4 in SharedFrame.updateValue()((void *)v17);
                AGGraphSetUpdate();
                goto LABEL_63;
              }
              float64_t v45 = *(double *)(v107 + 72);
              swift_retain();
              swift_release();
              if (v45 == 0.0)
              {
LABEL_73:
                swift_release();
                uint64_t v17 = v128;
                goto LABEL_76;
              }
            }
            unint64_t v119 = *(void *)&v45;
            uint64_t v3 = *(void *)(v128 + 8);
            unint64_t v27 = *(void *)(v128 + 16);
            swift_beginAccess();
            if ((v27 & 0x8000000000000000) != 0) {
              break;
            }
            uint64_t v46 = *(void *)(v3 + 112);
            if (v27 >= *(void *)(v46 + 16)) {
              goto LABEL_97;
            }
            unsigned int v120 = v9;
            if (*(void *)(*(void *)(v46 + (v27 << 6) + 80) + 16) >= 2uLL)
            {
              uint64_t v47 = AGGraphGetValue();
              double v48 = *(double *)v47;
              uint64_t v49 = *(void *)(v47 + 24);
              float64x2_t v143 = 0uLL;
              *(double *)CGSize v144 = v48;
              __n128 v118 = *(__n128 *)(v47 + 8);
              *(__n128 *)&v144[8] = v118;
              uint64_t v145 = v49;
              uint64_t v50 = AGGraphGetValue();
              uint64_t v51 = *(void *)v50;
              double v52 = *(double *)(v50 + 8);
              double v53 = *(double *)(v50 + 16);
              double v54 = *(double *)(v50 + 24);
              double v55 = *(double *)(v50 + 32);
              unint64_t v1 = &v134;
              uint64_t v56 = AGGraphGetValue();
              double v57 = *(double *)v56;
              double v58 = *(double *)(v56 + 8);
              double v59 = v54 - (*(double *)v56 - v52);
              uint64_t v60 = AGGraphGetValue();
              double v61 = *(double *)(v60 + 16) * v118.n128_f64[0] + 0.0;
              v143.f64[0] = v48 * *(double *)(v60 + 8) + 0.0;
              v143.f64[1] = v61;
              float64x2_t v134 = 0u;
              memset(v135, 0, sizeof(v135));
              LOBYTE(v136) = 2;
              *(void *)&long long v130 = v51;
              *((double *)&v130 + 1) = v57;
              *(double *)&long long v131 = v58;
              *((double *)&v131 + 1) = v59;
              double v132 = v55 - (v58 - v53);
              outlined init with copy of CoordinateSpace((uint64_t)&v134, (uint64_t)&v137);
              char v142 = 2;
              swift_retain_n();
              specialized ViewTransform.convert(_:_:)((uint64_t)&v137, (double *)&v130, (uint64_t)&v143);
              outlined destroy of ViewTransform.Conversion((uint64_t)&v137);
              swift_release();
              outlined destroy of CoordinateSpace((uint64_t)&v134);
              uint64_t v62 = AGGraphGetValue();
              double v63 = *(double *)v62;
              uint64_t v64 = *(void *)(v62 + 24);
              float64x2_t v134 = 0uLL;
              *(double *)uint64_t v135 = v63;
              __n128 v118 = *(__n128 *)(v62 + 8);
              *(__n128 *)&v135[8] = v118;
              uint64_t v136 = v64;
              uint64_t v65 = AGGraphGetValue();
              double v66 = *(double *)v65;
              double v67 = *(double *)(v65 + 8);
              double v68 = *(double *)(v65 + 16);
              double v69 = *(double *)(v65 + 24);
              double v70 = *(double *)(v65 + 32);
              uint64_t v71 = AGGraphGetValue();
              double v73 = *(double *)v71;
              double v72 = *(double *)(v71 + 8);
              double v74 = v69 - (*(double *)v71 - v67);
              uint64_t v75 = AGGraphGetValue();
              double v76 = *(double *)(v75 + 16) * v118.n128_f64[0] + 0.0;
              v134.f64[0] = v63 * *(double *)(v75 + 8) + 0.0;
              v134.f64[1] = v76;
              double v132 = 0.0;
              long long v130 = 0u;
              long long v131 = 0u;
              char v133 = 2;
              v129[0] = v66;
              v129[1] = v73;
              v129[2] = v72;
              v129[3] = v74;
              v129[4] = v70 - (v72 - v68);
              outlined init with copy of CoordinateSpace((uint64_t)&v130, (uint64_t)&v137);
              char v142 = 2;
              swift_retain_n();
              specialized ViewTransform.convert(_:_:)((uint64_t)&v137, v129, (uint64_t)&v134);
              outlined destroy of ViewTransform.Conversion((uint64_t)&v137);
              swift_release();
              outlined destroy of CoordinateSpace((uint64_t)&v130);
              float64x2_t v77 = vsubq_f64(*(float64x2_t *)v135, *(float64x2_t *)v144);
              float64x2_t v78 = vsubq_f64(v134, v143);
              if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v78), (int32x4_t)vceqzq_f64(v77))))))
              {
                __n128 v117 = (__n128)v78;
                __n128 v118 = (__n128)v77;
                uint64_t v79 = v128;
                double v10 = *(double *)AGGraphGetValue();
                unsigned int v80 = v120;
                if (*(void *)(v79 + 32))
                {
                  swift_retain();
                  LOBYTE(v137.f64[0]) = 0;
                  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v119, v117.n128_f64[0], v117.n128_f64[1], v118.n128_f64[0], v118.n128_f64[1], v10);
                  swift_release();
                }
                else
                {
                  type metadata accessor for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>();
                  swift_allocObject();
                  swift_retain();
                  uint64_t v109 = swift_retain();
                  uint64_t v110 = specialized AnimatorState.init(animation:interval:at:in:)(v109, v17, v117, v117.n128_f64[1], v118, v118.n128_f64[1], v10);
                  *uint64_t v122 = v110;
                }
                uint64_t v111 = swift_retain();
                uint64_t v112 = specialized find<A>(_:key:)(v111);
                if (v112)
                {
                  uint64_t v9 = *(void *)(v112 + 72);
                  swift_retain();
                  swift_release();
                  if (v9)
                  {
                    uint64_t v113 = v128;
                    uint64_t v114 = swift_retain();
                    MEMORY[0x24C522D60](v114);
                    if (*(void *)((*(void *)(v113 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v113 + 24) & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                      goto LABEL_82;
                    }
                    goto LABEL_104;
                  }
                  swift_release();
                  unsigned int v80 = v120;
                }
                else
                {
                  swift_release();
                  swift_release();
                }
                swift_release();
                swift_release();
                swift_release();
                int v26 = v125;
                unsigned int v108 = v80;
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                int v26 = v125;
                unsigned int v108 = v120;
              }
LABEL_86:
              uint64_t v17 = v128;
              if (!v108) {
                goto LABEL_63;
              }
              goto LABEL_62;
            }
LABEL_98:
            __break(1u);
LABEL_99:
            double v33 = specialized _ArrayBuffer._consumeAndCreateNew()(v33);
            *(void *)uint64_t v126 = v33;
LABEL_36:
            if (v3 >= v33[2])
            {
              __break(1u);
            }
            else
            {
              unint64_t v6 = v5;
              unint64_t v27 = (unint64_t)v33 + v5 + 80;
              specialized Array.remove(at:)(v119, (uint64_t)&v137);
              uint64_t v5 = v126;
              if (v3 < *(void *)(*(void *)v126 + 16))
              {
                specialized Array.replaceSubrange<A>(_:with:)(0, 0, *(uint64_t *)&v137.f64[0], *(uint64_t *)&v137.f64[1], v138, SDWORD2(v138));
                swift_endAccess();
                unint64_t v6 = v127;
                swift_release();
                swift_beginAccess();
                unint64_t v27 = *(void *)(v6 + 112);
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v6 + 112) = v27;
                if (isUniquelyReferenced_nonNull_native) {
                  goto LABEL_39;
                }
                goto LABEL_102;
              }
            }
            __break(1u);
LABEL_102:
            unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v27);
            *(void *)uint64_t v5 = v27;
LABEL_39:
            if (v3 >= *(void *)(v27 + 16))
            {
              __break(1u);
LABEL_104:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_82:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              uint64_t v115 = specialized Array._endMutation()();
              (*(void (**)(uint64_t))(*(void *)v9 + 88))(v115);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              unint64_t v1 = &v134;
              int v26 = v125;
              unsigned int v108 = v120;
              goto LABEL_86;
            }
            uint64_t v5 = v9;
            ++*(_DWORD *)(v27 + v9 + 88);
            swift_endAccess();
            swift_release();
            unint64_t v6 = *(void *)(v6 + 112);
            uint64_t v30 = v120;
LABEL_41:
            int v25 = v121;
          }
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
      }
      else
      {
        uint64_t v30 = v28 + 1 < *(void *)(*(void *)(v6 + v5 + 80) + 16);
        if (!v28) {
          goto LABEL_42;
        }
      }
      unint64_t v119 = v28;
      unsigned int v120 = v30;
      swift_beginAccess();
      double v33 = *(void **)(v127 + 112);
      swift_retain();
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v127 + 112) = v33;
      if ((v34 & 1) == 0) {
        goto LABEL_99;
      }
      goto LABEL_36;
    }
    goto LABEL_94;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  swift_once();
LABEL_68:
  swift_beginAccess();
  double v100 = *(double *)(v5 + 72);
  *(void *)&long long v130 = *(void *)(v5 + 80);
  uint64_t v101 = *(unsigned int *)(v5 + 120);
  unsigned __int8 v102 = *(unsigned char *)(v5 + 124);
  char v103 = *(void (**)(long long *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                     + 0x58);
  unsigned int v104 = static CoreGlue.shared;
  LOBYTE(v129[0]) = v102;
  v103(&v130, v101 | ((unint64_t)v102 << 32), v100);
  swift_release();

  int v26 = v125;
LABEL_69:
  float64_t v98 = v137.f64[1];
  float64_t v97 = v137.f64[0];
  float64x2_t v99 = v1[6];
  float64x2_t v143 = v137;
LABEL_70:
  v137.f64[0] = v97;
  v137.f64[1] = v98;
  float64x2_t v105 = v1[13];
  v1[6] = v99;
  v1[7] = v105;
  char v140 = 0;
  int v141 = v26;
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  AGGraphSetOutputValue();
  return swift_release();
}

void type metadata accessor for (ViewFrame?, AnyOptionalAttribute)()
{
  if (!lazy cache variable for type metadata for (ViewFrame?, AnyOptionalAttribute))
  {
    _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_0(255, &lazy cache variable for type metadata for ViewFrame?, (uint64_t)&type metadata for ViewFrame, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ViewFrame?, AnyOptionalAttribute));
    }
  }
}

uint64_t MatchedDisplayList.args.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

void type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)()
{
  if (!lazy cache variable for type metadata for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool));
    }
  }
}

uint64_t specialized ViewTransform.convert(_:_:)(uint64_t a1, double *a2, uint64_t a3)
{
  return specialized ViewTransform.convert(_:_:)(a1, a2, a3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

{
  return specialized ViewTransform.convert(_:_:)(a1, a2, a3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

{
  return specialized ViewTransform.convert(_:_:)(a1, a2, a3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

{
  return specialized ViewTransform.convert(_:_:)(a1, a2, a3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t specialized closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v21);
  if (v25 - 3 >= 2)
  {
    uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)v21);
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v21, v26);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v26, (uint64_t)v21);
    if (v23)
    {
      *(void *)&v16[0] = *(void *)&v21[0];
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      v16[0] = v21[0];
      v16[1] = v21[1];
      uint64_t v17 = v22;
    }
    char v18 = v11;
    outlined init with take of CoordinateSpace((uint64_t)v16, (uint64_t)v21);
    outlined destroy of CoordinateSpace.Name((uint64_t)v26);
    outlined init with take of CoordinateSpace((uint64_t)v21, (uint64_t)v20);
    outlined init with copy of ViewTransform.Conversion(a3, (uint64_t)v21);
    switch(v24)
    {
      case 1:
      case 3:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        if ((v14 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      case 4:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        if (specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v19))
        {
          outlined destroy of CoordinateSpace((uint64_t)v20);
          outlined destroy of CoordinateSpace((uint64_t)v19);
          outlined destroy of CoordinateSpace((uint64_t)v16);
LABEL_13:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v21);
          *a2 = 1;
          return result;
        }
        char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v19);
        if (v15)
        {
LABEL_10:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v21);
          *a4 = 1;
        }
        else
        {
LABEL_15:
          uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v21);
        }
        break;
      default:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v21, (uint64_t)v16);
        char v13 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v20, (uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v20);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        if ((v13 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_13;
    }
  }
  if (*a4 == 1) {
    return a6(a1);
  }
  return result;
}

void closure #1 in ViewTransform.convert(_:point:)partial apply(uint64_t a1)
{
}

void CGPoint.applyTransform(item:)(uint64_t a1)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v11);
  switch(v17)
  {
    case 1:
      double v3 = v1->f64[0];
      double v2 = v1->f64[1];
      if (v14)
      {
        if (v11.f64[0] == 1.0 && v11.f64[1] == 0.0 && *(double *)&v12 == 0.0 && *((double *)&v12 + 1) == 1.0)
        {
          double x = v3 - *(double *)&v13;
          double y = v2 - *((double *)&v13 + 1);
          goto LABEL_20;
        }
        *(float64x2_t *)&v18.a = v11;
        *(_OWORD *)&v18.c = v12;
        *(_OWORD *)&v18.tdouble x = v13;
        CGAffineTransformInvert(&v10, &v18);
        CGAffineTransform v18 = v10;
      }
      else
      {
        *(float64x2_t *)&v18.a = v11;
        *(_OWORD *)&v18.c = v12;
        *(_OWORD *)&v18.tdouble x = v13;
      }
      v21.double x = v3;
      v21.double y = v2;
      CGPoint v9 = CGPointApplyAffineTransform(v21, &v18);
      double y = v9.y;
      double x = v9.x;
      goto LABEL_20;
    case 2:
      *(_OWORD *)&v18.tdouble x = v13;
      long long v19 = v14;
      uint64_t v20 = v15;
      *(float64x2_t *)&v18.a = v11;
      *(_OWORD *)&v18.c = v12;
      double v7 = v1->f64[0];
      double v8 = v1->f64[1];
      if (v16) {
        double x = CGPoint.unapplying(_:)(&v18.a, v7, v8);
      }
      else {
        double x = CGPoint.applying(_:)((uint64_t)&v18, v7, v8);
      }
LABEL_20:
      v1->f64[0] = x;
      v1->f64[1] = y;
      break;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v11);
      break;
    case 4:
      outlined destroy of CoordinateSpace.Name((uint64_t)&v11);
      break;
    case 5:
      return;
    default:
      *uint64_t v1 = vaddq_f64(v11, *v1);
      break;
  }
}

unint64_t lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

uint64_t _MatchedGeometryEffect.qualifiedID.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  double v6 = MEMORY[0x270FA5388](a1);
  double v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v8, v2, v5, v6);
  uint64_t v12 = *(void *)(v2 + *(int *)(a1 + 36));
  return Pair.init(_:_:)((uint64_t)v8, (uint64_t)&v12, v5, (uint64_t)&type metadata for Namespace.ID, a2);
}

uint64_t Pair.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for Pair() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t MatchedGeometryScope.frame<A>(index:for:view:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, void *a7)
{
  uint64_t v8 = v7;
  long long v14 = a1;
  double v15 = MEMORY[0x270FA5388](a1);
  unint64_t v17 = (unint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, uint64_t, uint64_t, double))(v18 + 16))(v17, v19, v20, v15);
  AnyHashable.init<A>(_:)();
  if (*(unsigned char *)(a2 + 8))
  {
LABEL_8:
    double v52 = a5;
    a5 = (_OWORD *)(v8 + 120);
    swift_beginAccess();
    uint64_t v29 = *(void *)(v8 + 120);
    if (*(void *)(v29 + 16))
    {
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v56);
      if (v31)
      {
        unint64_t v17 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
        swift_endAccess();
        uint64_t v22 = 1;
        goto LABEL_24;
      }
    }
    uint64_t v50 = a4;
    uint64_t v51 = a6;
    swift_endAccess();
    unint64_t v21 = v8 + 112;
    swift_beginAccess();
    uint64_t v32 = *(void *)(v8 + 112);
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      HIDWORD(v49) = a7;
      swift_bridgeObjectRetain();
      unint64_t v17 = 0;
      a4 = 92;
      do
      {
        outlined init with copy of MatchedGeometryScope.Frame(v32 + a4 - 60, (uint64_t)v54);
        uint64_t v34 = *(void *)(v55 + 16);
        outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
        if (!v34)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v22 = *(void *)v21;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)unint64_t v21 = v22;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_19;
        }
        ++v17;
        a4 += 64;
      }
      while (v33 != v17);
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void *)(*(void *)v21 + 16);
      LODWORD(a7) = HIDWORD(v49);
    }
    else
    {
      unint64_t v17 = 0;
    }
    AGGraphClearUpdate();
    id v35 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #3 in MatchedGeometryScope.frame<A>(index:for:view:)(v8, v17, (uint64_t)v56);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    uint64_t v22 = 0;
    a6 = v51;
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)a2;
  uint64_t v22 = v8 + 112;
  swift_beginAccess();
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_44;
  }
  uint64_t v23 = *(void *)(v8 + 112);
  if (v21 >= *(void *)(v23 + 16)) {
    goto LABEL_45;
  }
  double v52 = v14;
  long long v14 = a7;
  a7 = (void *)a4;
  a4 = v21 << 6;
  outlined init with copy of AnyHashable(v23 + (v21 << 6) + 40, (uint64_t)v54);
  unint64_t v17 = MEMORY[0x24C523BA0](v54, v56);
  outlined destroy of AnyHashable((uint64_t)v54);
  if ((v17 & 1) == 0)
  {
    a4 = (uint64_t)a7;
    MatchedGeometryScope.releaseFrame(index:owner:)(v21, a7);
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
    LODWORD(a7) = v14;
    long long v14 = v52;
    goto LABEL_8;
  }
  if (v21 < *(void *)(*(void *)v22 + 16))
  {
    outlined init with copy of MatchedGeometryScope.Frame(*(void *)v22 + a4 + 32, (uint64_t)v54);
    type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
    uint64_t Value = AGGraphGetValue();
    char v25 = *(unsigned char *)(Value + 48);
    uint64_t v26 = *(unsigned int *)(Value + 52);
    long long v27 = *(_OWORD *)(Value + 16);
    uint64_t v28 = v52;
    _OWORD *v52 = *(_OWORD *)Value;
    v28[1] = v27;
    v28[2] = *(_OWORD *)(Value + 32);
    *((unsigned char *)v28 + 48) = v25;
LABEL_38:
    outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
    outlined destroy of AnyHashable((uint64_t)v56);
    return v26;
  }
  while (1)
  {
    __break(1u);
LABEL_48:
    uint64_t v22 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v22);
    *(void *)unint64_t v21 = v22;
LABEL_19:
    LODWORD(a7) = HIDWORD(v49);
    a6 = v51;
    if (v17 >= *(void *)(v22 + 16)) {
      break;
    }
    outlined assign with copy of AnyHashable((uint64_t)v56, v22 + a4 - 52);
    if (v17 >= *(void *)(*(void *)v21 + 16)) {
      goto LABEL_50;
    }
    *(unsigned char *)(*(void *)v21 + a4) = 0;
    uint64_t v37 = *(void *)v21;
    swift_endAccess();
    if (v17 >= *(void *)(v37 + 16)) {
      goto LABEL_51;
    }
    outlined init with copy of MatchedGeometryScope.Frame(v37 + a4 - 60, (uint64_t)v54);
    outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
    uint64_t v22 = 1;
    AGGraphMutateAttribute();
LABEL_23:
    outlined init with copy of AnyHashable((uint64_t)v56, (uint64_t)v54);
    swift_beginAccess();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = *(void *)a5;
    *(void *)a5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, (uint64_t)v54, v38);
    *(void *)a5 = v53;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v54);
    swift_endAccess();
    a4 = v50;
LABEL_24:
    a5 = (_OWORD *)(v8 + 112);
    swift_beginAccess();
    unint64_t v21 = *(void *)(v8 + 112);
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v8 + 112) = v21;
    if (v39)
    {
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v21 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v21);
      *(void *)a5 = v21;
      if ((v17 & 0x8000000000000000) != 0)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    if (v17 >= *(void *)(v21 + 16)) {
      goto LABEL_41;
    }
    uint64_t v8 = v17 << 6;
    v21 += (v17 << 6) + 80;
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, a4, (uint64_t)v52, a6, (int)a7);
    if (v17 >= *(void *)(*(void *)a5 + 16)) {
      goto LABEL_42;
    }
    ++*(_DWORD *)(*(void *)a5 + v8 + 88);
    unint64_t v21 = *(void *)a5;
    swift_endAccess();
    if (v22)
    {
      if (v17 >= *(void *)(v21 + 16)) {
        goto LABEL_46;
      }
      outlined init with copy of MatchedGeometryScope.Frame(v21 + v8 + 32, (uint64_t)v54);
      outlined destroy of MatchedGeometryScope.Frame((uint64_t)v54);
      uint64_t v40 = AGCreateWeakAttribute();
      if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
      {
        id v41 = (id)AGSubgraphGetCurrent();
        if (!v41) {
          goto LABEL_53;
        }
        uint64_t v42 = v41;
        id v43 = (id)AGSubgraphGetGraph();
      }
      else
      {
        id v43 = (id)AGGraphGetAttributeGraph();
      }
      uint64_t Context = AGGraphGetContext();
      if (!Context) {
        goto LABEL_52;
      }
      uint64_t v22 = Context;
      swift_retain();

      a4 = swift_allocObject();
      *(void *)(a4 + 16) = v40;
      unint64_t v21 = v22;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #4 in MatchedGeometryScope.frame<A>(index:for:view:), a4);
      swift_release();
      swift_release();
    }
    *(void *)a2 = v17;
    *(unsigned char *)(a2 + 8) = 0;
    if (v17 < *(void *)(*(void *)a5 + 16))
    {
      outlined init with copy of MatchedGeometryScope.Frame(*(void *)a5 + v8 + 32, (uint64_t)v54);
      type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
      uint64_t v45 = AGGraphGetValue();
      char v46 = *(unsigned char *)(v45 + 48);
      uint64_t v26 = *(unsigned int *)(v45 + 52);
      long long v47 = *(_OWORD *)(v45 + 16);
      _OWORD *v14 = *(_OWORD *)v45;
      v14[1] = v47;
      _DWORD v14[2] = *(_OWORD *)(v45 + 32);
      *((unsigned char *)v14 + 48) = v46;
      goto LABEL_38;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of MatchedGeometryScope.Frame(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for MatchedGeometryScope.Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t MatchedSharedFrame.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _MatchedGeometryEffect();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for _MatchedGeometryEffect()
{
  return __swift_instantiateGenericMetadata();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = *v6;
  int64_t v9 = *((void *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v13 > *((void *)v8 + 3) >> 1)
  {
    if (v9 <= v13) {
      int64_t v18 = v9 + v12;
    }
    else {
      int64_t v18 = v9;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v18, 1, v8);
    uint64_t v8 = result;
  }
  uint64_t v19 = v8 + 32;
  uint64_t v20 = &v8[28 * a1 + 32];
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v21 = *((void *)v8 + 2);
  BOOL v22 = __OFSUB__(v21, a2);
  uint64_t v23 = v21 - a2;
  if (v22) {
    goto LABEL_26;
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t result = v20 + 28;
    char v24 = &v19[28 * a2];
    if (v20 + 28 != v24 || result >= &v24[28 * v23]) {
      uint64_t result = (char *)memmove(result, v24, 28 * v23);
    }
    uint64_t v25 = *((void *)v8 + 2);
    BOOL v22 = __OFADD__(v25, v12);
    uint64_t v26 = v25 + v12;
    if (!v22)
    {
      *((void *)v8 + 2) = v26;
LABEL_20:
      *(_DWORD *)uint64_t v20 = a3;
      long long v27 = &v19[28 * a1];
      *((_DWORD *)v27 + 1) = HIDWORD(a3);
      *((void *)v27 + 1) = a4;
      *((void *)v27 + 2) = a5;
      *((_DWORD *)v27 + 6) = a6;
      *double v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in MatchedGeometryScope.frame<A>(index:for:view:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  swift_beginAccess();
  DWORD1(v19) = *(_DWORD *)(v6 + 16);
  *((void *)&v19 + 1) = a1;
  *(void *)&long long v20 = a2;
  uint64_t v7 = MEMORY[0x263F8EE78];
  memset(v21, 0, 20);
  *((void *)&v20 + 1) = MEMORY[0x263F8EE78];
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (ViewFrame?, AnyOptionalAttribute)();
  lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame();
  swift_retain();
  int v8 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_release();
  AGGraphSetFlags();
  outlined init with copy of AnyHashable(a3, (uint64_t)&v19 + 8);
  LODWORD(v19) = v8;
  *(void *)&unsigned char v21[16] = v7;
  *(_DWORD *)&v21[24] = 0;
  int64_t v9 = (void *)(a1 + 112);
  v21[28] = 0;
  swift_beginAccess();
  CGAffineTransform v10 = *(void **)(a1 + 112);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 112) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    CGAffineTransform v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    void *v9 = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    CGAffineTransform v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    void *v9 = v10;
  }
  void v10[2] = v13 + 1;
  long long v14 = &v10[8 * v13];
  long long v15 = v19;
  long long v16 = v20;
  long long v17 = *(_OWORD *)v21;
  *(_OWORD *)((char *)v14 + 77) = *(_OWORD *)&v21[13];
  v14[3] = v16;
  v14[4] = v17;
  _DWORD v14[2] = v15;
  return swift_endAccess();
}

unint64_t lazy protocol witness table accessor for type SharedFrame and conformance SharedFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame;
  if (!lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFrame and conformance SharedFrame);
  }
  return result;
}

uint64_t initializeWithCopy for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  int64_t v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  CGAffineTransform v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *(_OWORD *)((char *)v10 + 9);
  _OWORD *v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = v11;
  return a1;
}

uint64_t MatchedGeometryScope.sourceViewIndex(frameIndex:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v2 = result;
  unint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 112);
  if (*(void *)(v3 + 16) <= v2)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(void *)(v3 + (v2 << 6) + 80);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = v4 + 44;
  while (1)
  {
    v7 += 28;
    if ((*(unsigned char *)AGGraphGetValue() & 1) == 0)
    {
      type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
      if (*(unsigned char *)(AGGraphGetValue() + 24)) {
        break;
      }
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t closure #4 in SharedFrame.updateValue()(void *a1)
{
  uint64_t v3 = a1;
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  uint64_t result = swift_beginAccess();
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v5 + 112);
  if (v4 >= *(void *)(v7 + 16))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    *(void *)uint64_t v1 = result;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v7 + (v4 << 6);
  uint64_t v9 = *(void *)(v8 + 80);
  unint64_t v2 = *(void *)(v9 + 16);
  unint64_t v10 = v2 != 0;
  if (v2 == v10) {
    return result;
  }
  uint64_t v11 = v8 + 32;
  for (uint64_t i = v9 + 28 * (v2 != 0) + 44; ; i += 28)
  {
    if (v10 >= v2)
    {
      __break(1u);
      goto LABEL_15;
    }
    uint64_t result = AGGraphGetValue();
    if ((*(unsigned char *)result & 1) == 0)
    {
      uint64_t v1 = *(unsigned int *)(i - 8);
      type metadata accessor for (properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool)();
      uint64_t result = AGGraphGetValue();
      if (*(unsigned char *)(result + 24) == 1) {
        break;
      }
    }
    if (v2 == ++v10) {
      return result;
    }
  }
  outlined init with copy of AnyHashable(v11 + 8, (uint64_t)v16);
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(98);
  v13._countAndFlagsBits = 0xD000000000000032;
  v13._object = (void *)0x800000024621E2E0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = AnyHashable.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x800000024621E320;
  v15._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v15);
  specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  unint64_t v2 = v3[2];
  uint64_t v1 = v3[1] + 112;
  swift_beginAccess();
  uint64_t v3 = *(void **)v1;
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v1 = v3;
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
LABEL_11:
  if (v2 >= v3[2])
  {
LABEL_19:
    __break(1u);
    return result;
  }
  BYTE4(v3[8 * v2 + 11]) = 1;
  swift_endAccess();
  swift_release();
  outlined destroy of AnyHashable((uint64_t)v16);
  return swift_bridgeObjectRelease();
}

void SharedFrame.removeListeners()()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + 24);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (v7)
  {
    uint64_t v3 = v7;
    if (v7 >= 1)
    {
LABEL_4:
      for (uint64_t i = 0; i != v3; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = MEMORY[0x24C523D60](i, v2);
        }
        else
        {
          uint64_t v5 = *(void *)(v2 + 8 * i + 32);
          swift_retain();
        }
        (*(void (**)(void))(*(void *)v5 + 96))();
        swift_release();
      }
      goto LABEL_13;
    }
    __break(1u);
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
}

double CGRect.inset(by:layoutDirection:)(void (*a1)(uint64_t *__return_ptr, double), double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v12 = a6;
  v28.origin.double x = a6;
  v28.origin.double y = a7;
  v28.size.double width = a8;
  v28.size.double height = a9;
  if (!CGRectIsNull(v28))
  {
    double v26 = a4;
    v29.origin.double x = v12;
    v29.origin.double y = a7;
    v29.size.double width = a8;
    v29.size.double height = a9;
    CGRect v30 = CGRectStandardize(v29);
    double x = v30.origin.x;
    double y = v30.origin.y;
    double width = v30.size.width;
    double height = v30.size.height;
    double v22 = a5;
    if (a3 != a5)
    {
      a1(&v27, a5);
      if ((_BYTE)v27) {
        double v22 = a5;
      }
      else {
        double v22 = a3;
      }
    }
    double v12 = x + v22;
    double v23 = width - (a3 + a5);
    double v24 = height - (a2 + v26);
    v31.origin.double x = x + v22;
    v31.origin.double y = y + a2;
    v31.size.double width = v23;
    v31.size.double height = v24;
    if (CGRectGetWidth(v31) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
    v32.origin.double x = v12;
    v32.origin.double y = y + a2;
    v32.size.double width = v23;
    v32.size.double height = v24;
    if (CGRectGetHeight(v32) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
  }
  return v12;
}

int64x2_t one-time initialization function for invalidValue()
{
  int64x2_t result = vdupq_n_s64(0xFFF0000000000000);
  static CGSize.invaliduint64_t Value = (__int128)result;
  return result;
}

uint64_t type metadata accessor for _ChangedGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1)
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t specialized Gradient.init(stops:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = v2 == 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    double v4 = *(double *)(a1 + 56);
    if (v4 < *(double *)(a1 + 40))
    {
LABEL_10:
      static os_log_type_t.fault.getter();
      if (one-time initialization token for runtimeIssuesLog != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      uint64_t v5 = (double *)(a1 + 72);
      uint64_t v6 = v2 - 1;
      while (--v6)
      {
        double v7 = *v5;
        v5 += 2;
        BOOL v8 = v7 < v4;
        double v4 = v7;
        if (v8) {
          goto LABEL_10;
        }
      }
    }
  }
  return a1;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v6;

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v7);

    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  BOOL v3 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t vars8;

  BOOL v3 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

id specialized _NativeDictionary.copy()(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 32 * v16;
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    outlined init with take of Any(v23, (_OWORD *)(*(void *)(v5 + 56) + v19));
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<ColorCacheKey, NamedColorInfo>, (void (*)(void))lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v10 = -1;
  if (v9 < 64) {
    int64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v2 + 64);
  uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    double v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v12) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v8;
    if (!v27)
    {
      unint64_t v8 = v26 + 1;
      if (v26 + 1 >= v12) {
        goto LABEL_23;
      }
      uint64_t v27 = *(void *)(v6 + 8 * v8);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    uint64_t v11 = (v27 - 1) & v27;
    int64_t v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_9:
    unint64_t v15 = 32 * v14;
    unint64_t v16 = *(void *)(v2 + 48) + 32 * v14;
    uint64_t v17 = *(unsigned char *)(v16 + 1);
    int64_t v18 = *(unsigned char *)(v16 + 2);
    uint64_t v19 = *(void *)(v16 + 8);
    int64_t v20 = *(void *)(v16 + 16);
    unint64_t v21 = 8 * v14;
    int64_t v22 = *(void **)(*(void *)(v2 + 56) + v21);
    double v23 = *(void **)(v16 + 24);
    double v24 = *(void *)(v4 + 48) + v15;
    *(unsigned char *)double v24 = *(unsigned char *)v16;
    *(unsigned char *)(v24 + 1) = v17;
    *(unsigned char *)(v24 + 2) = v18;
    *(void *)(v24 + 8) = v19;
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v23;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    uint64_t v25 = v22;
    swift_bridgeObjectRetain();
    id result = v23;
  }
  CGRect v28 = v26 + 2;
  if (v28 >= v12) {
    goto LABEL_23;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    unint64_t v8 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v8 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v8);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<CFStringRef, Any>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      uint64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<RBSymbolAnimationOptionKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<CachedVectorImageContents.CacheKey, CGImageRef>, type metadata accessor for CGImageRef, (void (*)(void))lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      uint64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = v16;
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      uint64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      double v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    int64_t v18 = *(void *)v17;
    uint64_t v19 = *(unsigned char *)(v17 + 10);
    int64_t v20 = *(_WORD *)(v17 + 8);
    unint64_t v21 = *(_WORD *)(v17 + 11);
    LOBYTE(v17) = *(unsigned char *)(v17 + 13);
    int64_t v22 = 8 * v15;
    double v23 = *(void **)(*(void *)(v2 + 56) + v22);
    double v24 = *(void *)(v4 + 48) + v16;
    *(void *)double v24 = v18;
    *(_WORD *)(v24 + 8) = v20;
    *(unsigned char *)(v24 + 10) = v19;
    *(_WORD *)(v24 + 11) = v21;
    *(unsigned char *)(v24 + 13) = v17;
    *(void *)(*(void *)(v4 + 56) + v22) = v23;
    id result = v23;
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  double v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextAnimation>, (void (*)(uint64_t))type metadata accessor for AnyTextAnimation);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextEffect);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, AnyTextFilterEffect>, (void (*)(uint64_t))type metadata accessor for AnyTextFilterEffect);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyStateSnapshot>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyStateSnapshot);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, TextRenderSurface>, MEMORY[0x263F07508], (void (*)(uint64_t))type metadata accessor for TextRenderSurface, (void (*)(void))lazy protocol witness table accessor for type UUID and conformance UUID);
  double v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *double v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  uint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  double v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  double v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      int64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      int64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  int64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    int64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextAnimator>, (void (*)(uint64_t))type metadata accessor for TextAnimator);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, CAPresentationModifier>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      uint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  double v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;

  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  CGRect v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *CGRect v31 = v3;
    return result;
  }
  id result = (id)(v2 + 64);
  uint64_t v5 = v1 + 64;
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    id result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  unint64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v10 = -1;
  if (v9 < 64) {
    int64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    CGRect v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v12) {
      goto LABEL_26;
    }
    CGRect v29 = *(void *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      unint64_t v8 = v28 + 1;
      if (v28 + 1 >= v12) {
        goto LABEL_26;
      }
      CGRect v29 = *(void *)(v5 + 8 * v8);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v29 - 1) & v29;
    int64_t v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 16 * v14;
    unint64_t v16 = (void *)(*(void *)(v1 + 48) + 16 * v14);
    uint64_t v17 = v16[1];
    int64_t v18 = 48 * v14;
    uint64_t v19 = *(void *)(v1 + 56) + v18;
    unint64_t v21 = *(void **)v19;
    int64_t v20 = *(void *)(v19 + 8);
    int64_t v22 = *(_DWORD *)(v19 + 16);
    double v23 = *(void *)(v19 + 24);
    double v24 = *(void *)(v19 + 40);
    uint64_t v25 = (void *)(*(void *)(v3 + 48) + v15);
    double v26 = *(void *)(v19 + 32);
    *uint64_t v25 = *v16;
    v25[1] = v17;
    uint64_t v27 = *(void *)(v3 + 56) + v18;
    *(void *)uint64_t v27 = v21;
    *(void *)(v27 + 8) = v20;
    *(_DWORD *)(v27 + 16) = v22;
    *(void *)(v27 + 24) = v23;
    *(void *)(v27 + 32) = v26;
    *(void *)(v27 + 40) = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id result = v21;
  }
  CGRect v30 = v28 + 2;
  if (v30 >= v12) {
    goto LABEL_26;
  }
  CGRect v29 = *(void *)(v5 + 8 * v30);
  if (v29)
  {
    unint64_t v8 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v8 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    CGRect v29 = *(void *)(v5 + 8 * v8);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Void __swiftcall GraphicsContext.rotate(by:)(SwiftUI::Angle by)
{
  if (by.radians != 0.0)
  {
    uint64_t v2 = v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *(void *)uint64_t v2 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      swift_release();
    }
    uint64_t v7 = *(void *)(*(void *)v2 + 24);
    v4.n128_u64[0] = *(unint64_t *)&by.radians;
    MEMORY[0x270F5AC60](v7, v4);
  }
}

uint64_t instantiation function for generic protocol witness table for CachedView<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t base witness table accessor for _AttributeBody in LeafResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t (*specialized closure #1 in closure #1 in closure #1 in Attribute.init(value:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t static AnyTransition.asymmetric(insertion:removal:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  uint64_t v2 = *(uint64_t (**)(uint64_t *, void *, _UNKNOWN **))(*(void *)a1 + 80);
  swift_retain();
  uint64_t result = v2(&v5, &unk_26FA48240, &protocol witness table for AnyTransition.InsertionVisitor);
  uint64_t v4 = v6;
  if (v6)
  {
    swift_release();
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for FunctionalLocation()
{
  return __swift_instantiateGenericMetadata();
}

BOOL Path.init(_:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  double v11 = 0.0;
  if (result) {
    double v12 = 0.0;
  }
  else {
    double v12 = a2;
  }
  if (result) {
    double v13 = 0.0;
  }
  else {
    double v13 = a3;
  }
  if (result) {
    double v14 = 0.0;
  }
  else {
    double v14 = a4;
  }
  if (!result) {
    double v11 = a5;
  }
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result) {
    char v15 = 6;
  }
  else {
    char v15 = 0;
  }
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

void one-time initialization function for observerActions()
{
  observerActions._rawuint64_t Value = (void *)MEMORY[0x263F8EE78];
}

ValueMetadata *type metadata accessor for RedactionReasons()
{
  return &type metadata for RedactionReasons;
}

ValueMetadata *type metadata accessor for TextSelectionForbidden()
{
  return &type metadata for TextSelectionForbidden;
}

void *Path.addRelativeArc(center:radius:startAngle:delta:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, double a6)
{
  return specialized Path.withMutableBuffer(do:)(v6, a1, a2, a3, a4, a5, a6);
}

uint64_t closure #2 in ViewGraph.updateOutputsAsync(at:)(uint64_t a1, uint64_t *a2)
{
  ViewGraph.updateOutputs(async:)(1);
  type metadata accessor for (DisplayList, DisplayList.Version)();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v4 = *(void *)(WeakValue + 16);
    unint64_t v5 = *(unsigned __int16 *)(WeakValue + 8) | ((unint64_t)*(unsigned __int8 *)(WeakValue + 10) << 16);
    Weakuint64_t Value = swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  if (WeakValue) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (WeakValue) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (WeakValue) {
    uint64_t v8 = WeakValue;
  }
  *a2 = v8;
  a2[1] = v7;
  a2[2] = v6;

  return swift_bridgeObjectRelease();
}

uint64_t UpdateCycleDetector.init()@<X0>(uint64_t a1@<X8>)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v6 = Context;
    swift_retain();

    swift_beginAccess();
    int v7 = *(_DWORD *)(v6 + 64);
    uint64_t result = swift_release();
    *(_DWORD *)a1 = v7;
    *(void *)(a1 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPhaseState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[24]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t type metadata completion function for ModifierGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in TextChildQuery<A>()
{
  return swift_getWitnessTable();
}

void one-time initialization function for fill()
{
  static SymbolVariants.fill = 769;
}

void one-time initialization function for background()
{
  static SymbolVariants.background = 772;
}

uint64_t static Font.title.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title);
}

uint64_t DisplayList.ViewRenderer.__deallocating_deinit()
{
  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v0 + 40);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void specialized LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a7, void (*a8)(uint64_t, uint64_t, void, uint64_t, unint64_t, unint64_t, void *), uint64_t a9)
{
  long long v139 = a8;
  int v155 = a6;
  uint64_t v156 = a7;
  uint64_t v151 = a1;
  uint64_t v152 = a2;
  uint64_t v160 = *MEMORY[0x263EF8340];
  uint64_t v133 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  uint64_t v128 = *(void *)(v133 - 8);
  MEMORY[0x270FA5388](v133);
  uint64_t v126 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v132 = (uint64_t)&v111 - v13;
  MEMORY[0x270FA5388](v14);
  int v125 = (uint64_t (**)())((char *)&v111 - v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v124 = (uint64_t)&v111 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v123 = (uint64_t)&v111 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v122 = (uint64_t)&v111 - v21;
  MEMORY[0x270FA5388](v22);
  double v24 = (uint64_t (**)())((char *)&v111 - v23);
  uint64_t v127 = v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v141 = (uint64_t)&v111 - v27;
  uint64_t v135 = type metadata accessor for Locale();
  uint64_t v28 = *(void *)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  unsigned int v120 = (char *)&v111 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v140 = (uint64_t)&v111 - v31;
  uint64_t v148 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v148);
  uint64_t v147 = (uint64_t)&v111 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v146 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v145 = (uint64_t)&v111 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v149 = (uint64_t)&v111 - v36;
  uint64_t v154 = type metadata accessor for NSScanner.NumberRepresentation();
  uint64_t v37 = *(void *)(v154 - 8);
  MEMORY[0x270FA5388](v154);
  char v39 = (char *)&v111 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for CharacterSet();
  uint64_t v143 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  id v41 = (char *)&v111 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = *a3;
  unint64_t v137 = a3[1];
  if (*(void *)(a5 + 16))
  {
    type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>();
    uint64_t v42 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v42 = MEMORY[0x263F8EE80];
  }
  uint64_t v158 = v42;
  swift_bridgeObjectRetain_n();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a5, 1, &v158);
  uint64_t v142 = 0;
  uint64_t v136 = a9;
  swift_bridgeObjectRelease();
  uint64_t v150 = v158;
  id v43 = objc_allocWithZone(MEMORY[0x263F08B08]);
  uint64_t v44 = v152;
  swift_bridgeObjectRetain();
  uint64_t v45 = (void *)MEMORY[0x24C522820](v151, v44);
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v43, sel_initWithString_, v45);

  objc_msgSend(v46, sel_setCharactersToBeSkipped_, 0);
  uint64_t v158 = 0;
  unint64_t v159 = 0xE000000000000000;
  Character.write<A>(to:)();
  CharacterSet.init(charactersIn:)();
  swift_bridgeObjectRelease();
  long long v47 = (void (**)(char *, void, uint64_t))(v37 + 104);
  double v48 = (void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v119 = v28 + 16;
  unsigned int v153 = *MEMORY[0x263F07D68];
  uint64_t v118 = v28 + 32;
  uint64_t v134 = v28;
  long long v131 = (void (**)(uint64_t, uint64_t))(v28 + 8);
  do
  {
    unint64_t v51 = NSScanner.currentIndex.getter();
    uint64_t v52 = NSScanner.scanUpToCharacters(from:)();
    if (v53)
    {
      uint64_t v54 = v52;
      uint64_t v55 = v53;
      unint64_t v56 = NSScanner.currentIndex.getter();
      if (v56 >> 14 < v51 >> 14)
      {
        __break(1u);
LABEL_42:
        __break(1u);
      }
      v155(v54, v55, v51, v56);
      swift_bridgeObjectRelease();
    }
    unint64_t v57 = NSScanner.currentIndex.getter();
    Swift::String_optional v58 = NSScanner.scanCharacter()();
    if (v58.value._object)
    {
      if (v58.value._countAndFlagsBits == 12369903 && v58.value._object == (void *)0xA300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v59 & 1) == 0) {
          continue;
        }
      }
      uint64_t v60 = v154;
      (*v47)(v39, v153, v154);
      uint64_t v61 = NSScanner.scanInt(representation:)();
      char v63 = v62;
      (*v48)(v39, v60);
      if ((v63 & 1) == 0)
      {
        Swift::String_optional v64 = NSScanner.scanCharacter()();
        if (v64.value._object)
        {
          if (v64.value._countAndFlagsBits == 12369903 && v64.value._object == (void *)0xA300000000000000)
          {
            unint64_t v49 = swift_bridgeObjectRelease();
          }
          else
          {
            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unint64_t v49 = swift_bridgeObjectRelease();
            if ((v65 & 1) == 0) {
              continue;
            }
          }
          uint64_t v66 = v150;
          if (!*(void *)(v150 + 16)) {
            goto LABEL_6;
          }
          unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
          if ((v67 & 1) == 0) {
            goto LABEL_6;
          }
          uint64_t v68 = *(void *)(v66 + 56) + *(void *)(v146 + 72) * v49;
          uint64_t v69 = v145;
          outlined init with copy of LocalizedStringKey.FormatArgument(v68, v145, type metadata accessor for LocalizedStringKey.FormatArgument);
          uint64_t v70 = v149;
          outlined init with take of LocalizedStringKey.FormatArgument(v69, v149, type metadata accessor for LocalizedStringKey.FormatArgument);
          uint64_t v71 = v147;
          outlined init with copy of LocalizedStringKey.FormatArgument(v70, v147, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v70, type metadata accessor for LocalizedStringKey.FormatArgument);
            unint64_t v49 = _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v71, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
LABEL_6:
            MEMORY[0x270FA5388](v49);
            uint64_t v50 = v152;
            *(&v111 - 4) = v151;
            *(&v111 - 3) = v50;
            *(&v111 - 2) = v61;
            specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:));
            continue;
          }
          uint64_t v115 = v48;
          long long v116 = v47;
          __n128 v117 = v41;
          uint64_t v73 = *(void *)v71;
          uint64_t v72 = *(void *)(v71 + 8);
          unsigned int v74 = *(unsigned __int8 *)(v71 + 16);
          uint64_t v75 = *(void *)(v71 + 24);
          unint64_t v76 = NSScanner.currentIndex.getter();
          if (v76 >> 14 < v57 >> 14) {
            goto LABEL_42;
          }
          unint64_t v77 = v76;
          unsigned int v113 = v74;
          uint64_t v112 = v72;
          uint64_t v114 = v75;
          long long v130 = v24;
          uint64_t v78 = v138;
          unint64_t v79 = v137;
          uint64_t v158 = v138;
          unint64_t v159 = v137;
          swift_retain();
          swift_retain();
          unint64_t v129 = v77;
          String.subscript.getter();
          uint64_t v80 = Substring.distance(from:to:)();
          swift_bridgeObjectRelease();
          if (v80 == String.count.getter()) {
            goto LABEL_39;
          }
          swift_retain();
          swift_retain_n();
          if (v79)
          {
            uint64_t v81 = swift_retain();
            specialized PropertyList.Tracker.value<A>(_:for:)(v81, v140);
            swift_release_n();
            swift_release_n();
            swift_retain_n();
            swift_retain_n();
            specialized PropertyList.Tracker.value<A>(_:for:)(v78, v141);
            swift_release_n();
          }
          else
          {
            swift_retain();
            uint64_t v82 = v142;
            specialized closure #1 in PropertyList.subscript.getter(v78, v140);
            swift_release();
            swift_release_n();
            swift_retain_n();
            swift_retain();
            specialized closure #1 in PropertyList.subscript.getter(v78, v141);
            uint64_t v142 = v82;
            swift_release();
            swift_release();
          }
          uint64_t v83 = v134;
          swift_release_n();
          if (v57 >> 14)
          {
            uint64_t v95 = v120;
            uint64_t v96 = v135;
            (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v120, v140, v135);
            unint64_t v97 = (*(unsigned __int8 *)(v83 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
            float64_t v98 = (char *)swift_allocObject();
            uint64_t v99 = v83;
            uint64_t v100 = v152;
            *((void *)v98 + 2) = v151;
            *((void *)v98 + 3) = v100;
            unint64_t v101 = v129;
            *((void *)v98 + 4) = v57;
            *((void *)v98 + 5) = v101;
            (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v98[v97], v95, v96);
            unsigned __int8 v102 = v125;
            *int v125 = partial apply for closure #2 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:);
            v102[1] = (uint64_t (*)())v98;
            swift_storeEnumTagMultiPayload();
            uint64_t v94 = (uint64_t)v102;
            uint64_t v103 = (uint64_t)v102;
            uint64_t v104 = v132;
            outlined init with copy of LocalizedStringKey.FormatArgument(v103, v132, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            uint64_t v105 = v158;
            uint64_t v106 = v126;
            outlined init with copy of LocalizedStringKey.FormatArgument(v104, v126, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            swift_retain_n();
            swift_bridgeObjectRetain();
            uint64_t v107 = v142;
            specialized closure #1 in PropertyList.subscript.setter(&v158, v106);
            uint64_t v142 = v107;
            swift_release();
            _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v106, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            if (!v159)
            {
              uint64_t v93 = v132;
              goto LABEL_38;
            }
            uint64_t v108 = v158;
            swift_retain();
            swift_retain();
            specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v105, v108);
            uint64_t v93 = v132;
          }
          else
          {
            uint64_t v84 = v122;
            outlined init with copy of LocalizedStringKey.FormatArgument(v141, v122, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            unint64_t v85 = (*(unsigned __int8 *)(v128 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
            uint64_t v86 = swift_allocObject();
            outlined init with take of LocalizedStringKey.FormatArgument(v84, v86 + v85, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            uint64_t v87 = (uint64_t)v130;
            *long long v130 = partial apply for closure #1 in LocalizedStringKey.scan(string:in:options:textArgs:appendLiteral:appendText:);
            *(void *)(v87 + 8) = v86;
            swift_storeEnumTagMultiPayload();
            uint64_t v88 = v123;
            outlined init with copy of LocalizedStringKey.FormatArgument(v87, v123, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            uint64_t v89 = v158;
            uint64_t v90 = v124;
            outlined init with copy of LocalizedStringKey.FormatArgument(v88, v124, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            swift_retain_n();
            uint64_t v91 = v142;
            specialized closure #1 in PropertyList.subscript.setter(&v158, v90);
            uint64_t v142 = v91;
            swift_release();
            _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v90, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
            if (!v159)
            {
              uint64_t v93 = v88;
              uint64_t v94 = v87;
              goto LABEL_38;
            }
            uint64_t v92 = v158;
            swift_retain();
            swift_retain();
            specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v89, v92);
            uint64_t v93 = v88;
            uint64_t v94 = v87;
          }
          swift_release();
          swift_release();
LABEL_38:
          swift_release();
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v93, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v94, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v141, (uint64_t (*)(void))type metadata accessor for EnvironmentValues.CapitalizationContext);
          (*v131)(v140, v135);
LABEL_39:
          v157[0] = v158;
          v157[1] = v159;
          swift_retain();
          swift_retain();
          uint64_t v109 = v112;
          char v110 = v113;
          v139(v73, v112, v113, v114, v57, v129, v157);
          outlined consume of Text.Storage(v73, v109, v110);
          swift_release_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v149, type metadata accessor for LocalizedStringKey.FormatArgument);
          double v24 = v130;
          id v41 = v117;
          long long v47 = v116;
          double v48 = v115;
        }
      }
    }
  }
  while (!objc_msgSend(v46, sel_isAtEnd));
  (*(void (**)(char *, uint64_t))(v143 + 8))(v41, v144);
  swift_release();
}

uint64_t specialized LocalizedStringKey.getTextArguments()()
{
  uint64_t v25 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v25);
  unint64_t v1 = (char *)&v22 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Int, LocalizedStringKey.FormatArgument)();
  uint64_t v24 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = specialized _ArrayProtocol.filter(_:)(v10);
  swift_bridgeObjectRelease();
  int64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v26 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v13 = v26;
    uint64_t v14 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v15 = *(void *)(v3 + 72);
    uint64_t v22 = v11;
    uint64_t v23 = v15;
    while (1)
    {
      outlined init with copy of LocalizedStringKey.FormatArgument(v14, (uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument);
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v5, (uint64_t)v1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      if (swift_getEnumCaseMultiPayload() != 1) {
        break;
      }
      uint64_t v16 = (uint64_t)v9 + *(int *)(v24 + 48);
      uint64_t v17 = *((void *)v1 + 4);
      outlined consume of Text.Storage(*(void *)v1, *((void *)v1 + 1), v1[16]);
      swift_bridgeObjectRelease();
      void *v9 = v17;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v5, v16, type metadata accessor for LocalizedStringKey.FormatArgument);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v26;
      }
      unint64_t v20 = *(void *)(v13 + 16);
      unint64_t v19 = *(void *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v13 = v26;
      }
      *(void *)(v13 + 16) = v20 + 1;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v20, (uint64_t (*)(void))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
      v14 += v23;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    uint64_t result = _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v1, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg5(void (*a1)(long long *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v16;
    uint64_t v9 = *(void *)(type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      a1(v15, v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v16 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v13 + 1;
      outlined init with take of ScrollStateRequest(v15, v6 + 40 * v13 + 32);
      v10 += v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t partial apply for closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  LOBYTE(v4) = *(unsigned char *)(v2 + 80);
  return closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char **)(v2 + 48), *(void **)(v2 + 56), a2, *(void *)(v2 + 72), v4, *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104));
}

uint64_t closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X5>, void *a5@<X6>, void *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v134 = a4;
  id v128 = a5;
  uint64_t v157 = (char *)a3;
  uint64_t v133 = a6;
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v126 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v125 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v124 = (uint64_t)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v117 - v18;
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v20 - 8);
  unint64_t v129 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v127 = (uint64_t *)((char *)&v117 - v23);
  type metadata accessor for URL?(0, &lazy cache variable for type metadata for Morphology?, MEMORY[0x263F06070]);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v131 = (uint64_t)&v117 - v25;
  type metadata accessor for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>();
  uint64_t v27 = v26;
  long long v130 = *(void (***)(char *, void))(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = a1;
  outlined init with copy of LocalizedStringKey.FormatArgument(a1, (uint64_t)v32, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v32, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
    goto LABEL_10;
  }
  uint64_t v122 = (unsigned __int8 *)v13;
  uint64_t v34 = *(void *)v32;
  uint64_t v33 = *((void *)v32 + 1);
  uint64_t v35 = (void *)*((void *)v32 + 3);
  if (v32[16] != 1)
  {
    uint64_t v42 = *(void *)v32;
    char v43 = 0;
LABEL_9:
    outlined consume of Text.Storage(v42, v33, v43);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v123 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 4);
  type metadata accessor for AttributedStringTextStorage(0);
  uint64_t v37 = swift_dynamicCastClass();
  if (!v37)
  {
    uint64_t v42 = v34;
    uint64_t v33 = v123;
    char v43 = 1;
    goto LABEL_9;
  }
  uint64_t v120 = v36;
  uint64_t v121 = v35;
  uint64_t v118 = v37;
  uint64_t v38 = v37 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.FoundationAttributes();
  swift_retain_n();
  uint64_t v119 = v38;
  AttributedString.subscript.getter();
  swift_release();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MorphologyAttribute and conformance AttributeScopes.FoundationAttributes.MorphologyAttribute();
  uint64_t v39 = v131;
  ScopedAttributeContainer.subscript.getter();
  swift_release();
  v130[1](v29, v27);
  uint64_t v40 = type metadata accessor for Morphology();
  LODWORD(v38) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40);
  outlined destroy of Morphology?(v39, &lazy cache variable for type metadata for Morphology?, MEMORY[0x263F06070]);
  if (v38 == 1)
  {
    uint64_t v41 = v123;
    outlined consume of Text.Storage(v34, v123, 1);
    outlined consume of Text.Storage(v34, v41, 1);
    swift_bridgeObjectRelease();
    swift_release();
LABEL_10:
    uint64_t v44 = (uint64_t)v133;
    *(void *)&long long v138 = a2;
    *((void *)&v138 + 1) = v157;
    BOOL v45 = LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v146, (uint64_t *)&v138);
    *uint64_t v134 = (*v134 | v45) & 1;
    return outlined init with take of ScrollStateRequest(v146, v44);
  }
  uint64_t v131 = v34;
  uint64_t v47 = (uint64_t)v157;
  if (v157)
  {
    swift_retain_n();
    swift_retain_n();
    double v48 = (void (*)(void, void, void, void))v127;
    specialized PropertyList.Tracker.value<A>(_:for:)(a2, (uint64_t)v127);
    swift_release_n();
    swift_release_n();
    uint64_t v49 = v135;
  }
  else
  {
    uint64_t v50 = swift_retain_n();
    double v48 = (void (*)(void, void, void, void))v127;
    uint64_t v51 = v135;
    specialized closure #1 in PropertyList.subscript.getter(v50, (uint64_t)v127);
    uint64_t v49 = v51;
    swift_release_n();
  }
  uint64_t v52 = type metadata accessor for Locale();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v53;
  uint64_t v127 = *(void **)(v53 + 56);
  uint64_t v117 = v53 + 56;
  ((void (*)(void, void, uint64_t, uint64_t))v127)(v48, 0, 1, v52);
  swift_retain();
  swift_retain();
  uint64_t v55 = swift_bridgeObjectRetain();
  uint64_t v56 = v49;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18LocalizedStringKeyV14FormatArgumentVG_s7CVarArg_ps5NeverOTg503_s7d4UI18fgh61V25getArgumentsForInflection3for2in5idiom4with9includingSays7kl150_pG9arguments_Sb19isUniqueSizeVarianttSo012NSAttributedD0C_AA17EnvironmentValuesVAA17AnyInterfaceIdiomVSgAA4TextV14ResolveOptionsVAV5StyleVtFsAJ_pAC14iJ19VXEfU_sAJ_pA0_XEfU_AF17EnvironmentValuesVAF17AnyInterfaceIdiomVSgSbTf1cn_nTf4ngdn_n(v55, a2, v47, v134);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v130 = (void (**)(char *, void))getVaList(_:)();
  swift_bridgeObjectRelease();
  unint64_t v57 = *(uint64_t (**)(void, void, void))(v54 + 48);
  uint64_t v135 = v52;
  int v58 = v57(v48, 1, v52);
  id v59 = v128;
  Class isa = 0;
  if (v58 != 1)
  {
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(void (*)(void, void, void, void), uint64_t))(v54 + 8))(v48, v135);
  }
  id v61 = objc_allocWithZone(MEMORY[0x263F086A0]);
  char v62 = (void (**)(char *, void))objc_msgSend(v61, sel_initSwiftUIAttributedStringWithFormat_options_locale_arguments_, v59, 0, isa, v130);

  long long v130 = v62;
  id v63 = objc_msgSend(v62, sel_string);
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;

  *(void *)&v146[0] = v64;
  *((void *)&v146[0] + 1) = v66;
  *(void *)&long long v138 = 0;
  *((void *)&v138 + 1) = 0xE000000000000000;
  Character.write<A>(to:)();
  *(void *)&v137[0] = v120;
  v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  Character.write<A>(to:)();
  uint64_t v68 = (uint64_t)v129;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v127)(v129, 1, 1, v135);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v69 = StringProtocol.range<A>(of:options:range:locale:)();
  uint64_t v71 = v70;
  LOBYTE(v63) = v72;
  outlined destroy of Morphology?(v68, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v63)
  {
    *(void *)&long long v138 = a2;
    *((void *)&v138 + 1) = v157;
    BOOL v97 = LocalizedStringKey.FormatArgument.resolve(in:idiom:)((uint64_t)v146, (uint64_t *)&v138);
    uint64_t v98 = (uint64_t)v133;
    *uint64_t v134 = (*v134 | v97) & 1;
    outlined init with take of ScrollStateRequest(v146, v98);
    uint64_t v99 = v131;
    uint64_t v100 = v123;
    outlined consume of Text.Storage(v131, v123, 1);

    outlined consume of Text.Storage(v99, v100, 1);
    outlined consume of Text.Storage(v99, v100, 1);
    return swift_bridgeObjectRelease();
  }
  uint64_t v135 = v56;
  *(void *)&v146[0] = v69;
  *((void *)&v146[0] + 1) = v71;
  id v73 = v130;
  id v74 = objc_msgSend(v130, sel_string);
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v77 = v76;

  *(void *)&long long v138 = v75;
  *((void *)&v138 + 1) = v77;
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, &lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x263F8D2B0], MEMORY[0x263F8D2B8], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  uint64_t v78 = _NSRange.init<A, B>(_:in:)();
  id v80 = objc_msgSend(v73, sel_attributesAtIndex_longestEffectiveRange_inRange_, v78, 0, v78, v79);
  type metadata accessor for NSAttributedStringKey(0);
  uint64_t v82 = v81;
  uint64_t v83 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v132 = v82;
  unint64_t v129 = (char *)v83;
  uint64_t v84 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of LocalizedStringKey.FormatArgument(a10, (uint64_t)v19, type metadata accessor for Text.Style);
  uint64_t v85 = Text.withInlinePresentationIntent(from:)(v84, v131, v123, 1, v121);
  uint64_t v87 = v86;
  LOBYTE(v75) = v88;
  uint64_t v90 = v89;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v85, (uint64_t)v87, v75 & 1);
  uint64_t v91 = *(void *)(v90 + 16);
  if (v91)
  {
    char v92 = 0;
    uint64_t v93 = (unsigned __int8 *)(v90 + 16 * v91 + 24);
    while (v91 <= *(void *)(v90 + 16))
    {
      --v91;
      uint64_t v87 = (void *)*((void *)v93 - 1);
      unsigned __int8 v94 = *v93;
      v93 -= 16;
      v92 |= (v94 & 0xE0) == 128;
      *(void *)&v146[0] = a2;
      *((void *)&v146[0] + 1) = v157;
      outlined copy of Text.Modifier((uint64_t)v87, v94);
      Text.Modifier.modify(style:environment:)((uint64_t)v19, (uint64_t *)v146, (uint64_t)v87, v94);
      outlined consume of Text.Modifier((uint64_t)v87, v94);
      if (!v91) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_28:
    uint64_t v101 = *((void *)v19 + 8);
    *((void *)&v139 + 1) = MEMORY[0x263F8EF38];
    *(void *)&long long v138 = v101;
    outlined init with take of Any(&v138, v137);
    id v102 = v87;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v136 = v90;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v137, v102, isUniquelyReferenced_nonNull_native);
    uint64_t v145 = v136;

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  char v92 = 0;
LABEL_21:
  uint64_t v91 = (uint64_t)&v138;
  swift_bridgeObjectRelease();
  __int16 v147 = 0;
  memset(v146, 0, sizeof(v146));
  uint64_t v148 = MEMORY[0x263F8EE78];
  uint64_t v149 = MEMORY[0x263F8EE78];
  long long v150 = 0u;
  long long v151 = 0u;
  long long v153 = xmmword_24619B530;
  uint64_t v152 = 0;
  uint64_t v154 = MEMORY[0x263F8EE78];
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v95 = v124;
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v19, v124, type metadata accessor for Text.Style);
  *(void *)&long long v138 = a2;
  *((void *)&v138 + 1) = v157;
  *(void *)&v137[0] = a11;
  outlined copy of Text.Storage(v131, v123, 1);
  uint64_t v90 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #2 in closure #1 in LocalizedStringKey.getArgumentsForInflection(for:in:idiom:with:including:), v118, (uint64_t *)&v138, 1, (uint64_t *)v137, (uint64_t)v146);
  swift_release();
  _s7SwiftUI4TextV14ResolvedStringVWOhTm_0(v95, type metadata accessor for Text.Style);
  uint64_t v145 = v90;
  uint64_t v93 = v122;
  if ((v92 & 1) == 0) {
    goto LABEL_29;
  }
  if (one-time initialization token for kitTracking != -1) {
    swift_once();
  }
  uint64_t v87 = (void *)static NSAttributedStringKey.kitTracking;
  if ((v19[72] & 1) == 0) {
    goto LABEL_28;
  }
  id v96 = (id)static NSAttributedStringKey.kitTracking;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v96, &v138);

  _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)&v138, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_29:
  uint64_t v157 = v19;
  uint64_t v104 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  uint64_t v105 = (uint64_t)v125;
  (*(void (**)(char *, uint64_t, unsigned __int8 *))(v126 + 16))(v125, v119, v93);
  id v106 = NSAttributedString.init(swiftUIAttributedString:)(v105);
  Class v107 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v108 = v106;
  id v109 = objc_msgSend(v108, sel_length);

  objc_msgSend(v108, sel_addAttributes_range_, v107, 0, v109);
  char v110 = v133;
  *uint64_t v134 = (*v134 | HIBYTE(v147)) & 1;
  v110[3] = v104;
  v110[4] = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSMutableAttributedString and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);

  uint64_t v111 = v131;
  uint64_t v112 = v123;
  outlined consume of Text.Storage(v131, v123, 1);
  *char v110 = v108;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v111, v112, 1);
  outlined consume of Text.Storage(v111, v112, 1);
  long long v113 = *(_OWORD *)(v91 + 256);
  *(_OWORD *)(v91 + 96) = *(_OWORD *)(v91 + 240);
  *(_OWORD *)(v91 + 112) = v113;
  uint64_t v144 = v156;
  long long v114 = *(_OWORD *)(v91 + 192);
  long long v140 = *(_OWORD *)(v91 + 176);
  long long v141 = v114;
  long long v115 = *(_OWORD *)(v91 + 224);
  long long v142 = *(_OWORD *)(v91 + 208);
  long long v143 = v115;
  long long v116 = *(_OWORD *)(v91 + 160);
  long long v138 = *(_OWORD *)(v91 + 144);
  long long v139 = v116;
  outlined release of Text.ResolvedProperties(&v138);
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v157, type metadata accessor for Text.Style);
}

BOOL LocalizedStringKey.FormatArgument.resolve(in:idiom:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v79 = (uint64_t *)a1;
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v78 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v77 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v77 - v11;
  uint64_t v13 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a2;
  unint64_t v16 = a2[1];
  outlined init with copy of LocalizedStringKey.FormatArgument(v2, (uint64_t)v15, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v25 = *((void *)v15 + 4);
      outlined consume of Text.Storage(*(void *)v15, *((void *)v15 + 1), v15[16]);
      swift_bridgeObjectRelease();
      uint64_t v82 = 0;
      unint64_t v83 = 0xE000000000000000;
      Character.write<A>(to:)();
      uint64_t v80 = v25;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      Character.write<A>(to:)();
      uint64_t v27 = v82;
      unint64_t v28 = v83;
      uint64_t v29 = v79;
      v79[3] = MEMORY[0x263F8D310];
      v29[4] = lazy protocol witness table accessor for type String and conformance String();
      *uint64_t v29 = v27;
      v29[1] = v28;
      if (v16)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v82);
        swift_release_n();
        swift_release_n();
        uint64_t v30 = v82;
      }
      else
      {
        _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v36);
        uint64_t v37 = v80;
        uint64_t v38 = swift_retain_n();
        uint64_t v39 = specialized find1<A>(_:key:filter:)(v38, v37);
        if (v39) {
          uint64_t v30 = *(void *)(v39 + 72);
        }
        else {
          uint64_t v30 = 0;
        }
        swift_release_n();
      }
      return v30 == 0;
    case 2u:
      uint64_t v31 = v77;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v12, v15, v7);
      uint64_t v32 = v17;
      swift_retain_n();
      if (v16)
      {
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v17);
      }
      else
      {
        specialized closure #1 in PropertyList.subscript.getter(v17);
      }
      swift_release_n();
      swift_release_n();
      uint64_t v40 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v9, v12, v7);
      id v41 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v9);
      uint64_t v42 = v79;
      v79[3] = v40;
      v42[4] = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      *uint64_t v42 = (uint64_t)v41;
      if (v16)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v32, &v82);
        swift_release_n();
        swift_release_n();
        uint64_t v30 = v82;
        uint64_t v43 = v77;
      }
      else
      {
        _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v48);
        uint64_t v49 = v82;
        uint64_t v50 = swift_retain_n();
        uint64_t v51 = specialized find1<A>(_:key:filter:)(v50, v49);
        if (v51) {
          uint64_t v30 = *(void *)(v51 + 72);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v43 = v77;
        uint64_t v82 = v30;
        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v7);
      return v30 == 0;
    case 3u:
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v6, v15, v4);
      uint64_t v33 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      uint64_t v82 = v17;
      unint64_t v83 = v16;
      LocalizedStringResource.resolve(in:)(&v82, (uint64_t)v9);
      id v34 = NSAttributedString.init(swiftUIAttributedString:)((uint64_t)v9);
      uint64_t v35 = v79;
      v79[3] = v33;
      v35[4] = lazy protocol witness table accessor for type NSObject and conformance NSObject(&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      *uint64_t v35 = (uint64_t)v34;
      if (v16)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v82);
        swift_release_n();
        swift_release_n();
        uint64_t v30 = v82;
      }
      else
      {
        _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v44);
        uint64_t v45 = v82;
        uint64_t v46 = swift_retain_n();
        uint64_t v47 = specialized find1<A>(_:key:filter:)(v46, v45);
        if (v47) {
          uint64_t v30 = *(void *)(v47 + 72);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v82 = v30;
        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v78 + 8))(v6, v4);
      return v30 == 0;
    default:
      uint64_t v18 = (void *)*((void *)v15 + 5);
      outlined init with take of ScrollStateRequest((long long *)v15, (uint64_t)&v82);
      if (!v18)
      {
        outlined init with copy of AnyTrackedValue((uint64_t)&v82, (uint64_t)v79);
        if (!v16)
        {
          _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
          BloomFilter.init(hashValue:)(v72);
          uint64_t v73 = v80;
          uint64_t v74 = swift_retain_n();
          uint64_t v75 = specialized find1<A>(_:key:filter:)(v74, v73);
          if (v75) {
            uint64_t v30 = *(void *)(v75 + 72);
          }
          else {
            uint64_t v30 = 0;
          }
          swift_release_n();
          goto LABEL_48;
        }
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v80);
        swift_release_n();
LABEL_47:
        swift_release_n();
        uint64_t v30 = v80;
LABEL_48:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
        return v30 == 0;
      }
      swift_getObjectType();
      uint64_t v19 = swift_conformsToProtocol2();
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      if (v19) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v21)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v80 = v17;
        unint64_t v81 = v16;
        uint64_t v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 8);
        id v24 = v18;
        v23(&v80, ObjectType, v20);
      }
      else
      {
        id v52 = v18;
      }
      __swift_project_boxed_opaque_existential_1(&v82, v84);
      id v53 = objc_msgSend(v18, sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (v53)
      {
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        unint64_t v57 = v79;
        v79[3] = MEMORY[0x263F8D310];
        v57[4] = lazy protocol witness table accessor for type String and conformance String();
        *unint64_t v57 = v54;
        v57[1] = v56;
        if (v16)
        {
LABEL_31:
          swift_retain_n();
          swift_retain_n();
          specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v80);
          swift_unknownObjectRelease();

          swift_release_n();
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v80 = 0;
        unint64_t v81 = 0xE000000000000000;
        _StringGuts.grow(_:)(101);
        v58._object = (void *)0x800000024621EBA0;
        v58._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v58);
        id v59 = objc_msgSend(v18, sel_description);
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v62 = v61;

        v63._countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._countAndFlagsBits = 0xD000000000000022;
        v64._object = (void *)0x800000024621EBC0;
        String.append(_:)(v64);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
        _print_unlocked<A, B>(_:_:)();
        v65._countAndFlagsBits = 0xD000000000000027;
        v65._object = (void *)0x800000024621EBF0;
        String.append(_:)(v65);
        specialized static Log.externalWarning(_:)(v80, v81);
        swift_bridgeObjectRelease();
        uint64_t v66 = v79;
        v79[3] = MEMORY[0x263F8D310];
        v66[4] = lazy protocol witness table accessor for type String and conformance String();
        *uint64_t v66 = 0;
        v66[1] = 0xE000000000000000;
        if (v16) {
          goto LABEL_31;
        }
      }
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      BloomFilter.init(hashValue:)(v67);
      uint64_t v68 = v80;
      uint64_t v69 = swift_retain_n();
      uint64_t v70 = specialized find1<A>(_:key:filter:)(v69, v68);
      if (v70) {
        uint64_t v71 = *(void *)(v70 + 72);
      }
      else {
        uint64_t v71 = 0;
      }
      uint64_t v80 = v71;
      swift_unknownObjectRelease();

      goto LABEL_47;
  }
}

void type metadata accessor for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>()
{
  if (!lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>)
  {
    type metadata accessor for AttributeScopes.FoundationAttributes();
    unint64_t v0 = type metadata accessor for ScopedAttributeContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScopedAttributeContainer<AttributeScopes.FoundationAttributes>);
    }
  }
}

uint64_t type metadata accessor for AttributedStringTextStorage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for AttributedStringTextStorage);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(0, a5, a6, a7, MEMORY[0x263F8E0F8]);
    uint64_t v14 = (void *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    _DWORD v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v12) {
      memmove(v14 + 4, a4 + 4, 40 * v12);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v12 || v16 >= v17 + 40 * v12)
  {
    type metadata accessor for ScrollStateRequest(0, a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for [ScrollableCollection](uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v4 = type metadata accessor for Array();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _sSay7SwiftUI20ScrollableCollection_pGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (id *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for LocalizedStringKey.FormatArgument(0) - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    v22[1] = v1;
    uint64_t v15 = *(void *)(v10 + 72);
    unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = a1 + v23;
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v24 = v3;
    do
    {
      outlined init with copy of LocalizedStringKey.FormatArgument(v16, (uint64_t)v12, type metadata accessor for LocalizedStringKey.FormatArgument);
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
          uint64_t v18 = (uint64_t)v8;
          outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, (uint64_t)v8, type metadata accessor for LocalizedStringKey.FormatArgument);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          }
          uint64_t v17 = v25;
          unint64_t v20 = *(void *)(v25 + 16);
          unint64_t v19 = *(void *)(v25 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            uint64_t v17 = v25;
          }
          *(void *)(v17 + 16) = v20 + 1;
          uint64_t v21 = v17 + v23 + v20 * v15;
          uint64_t v8 = (char *)v18;
          outlined init with take of LocalizedStringKey.FormatArgument(v18, v21, type metadata accessor for LocalizedStringKey.FormatArgument);
          break;
        case 2u:
        case 3u:
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v5, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
          goto LABEL_4;
        default:

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
LABEL_4:
          _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v12, type metadata accessor for LocalizedStringKey.FormatArgument);
          break;
      }
      v16 += v15;
      --v14;
    }
    while (v14);
    return v25;
  }
  return result;
}

void destroy for LocalizedStringKey.FormatArgument(uint64_t a1)
{
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      uint64_t v2 = *(void **)(a1 + 40);

      break;
    case 1u:
      outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      swift_bridgeObjectRelease();
      break;
    case 2u:
      uint64_t v3 = type metadata accessor for AttributedString();
      goto LABEL_10;
    case 3u:
      uint64_t v3 = type metadata accessor for LocalizedStringResource();
LABEL_10:
      uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

uint64_t outlined init with copy of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for LocalizedStringKey.FormatArgument.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LocalizedStringKey.FormatArgument.Storage);
}

uint64_t type metadata accessor for EnvironmentValues.CapitalizationContext()
{
  uint64_t result = type metadata singleton initialization cache for EnvironmentValues.CapitalizationContext;
  if (!type metadata singleton initialization cache for EnvironmentValues.CapitalizationContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t initializeWithCopy for LocalizedStringKey.FormatArgument.Storage(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      char v11 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v10, v11);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
      *(unsigned char *)(a1 + 16) = v11;
      uint64_t v12 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v12;
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v7 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      break;
    case 3u:
      uint64_t v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      uint64_t v5 = *(void **)(a2 + 40);
      *(void *)(a1 + 40) = v5;
      id v6 = v5;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t outlined init with take of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for LocalizedStringKey.FormatArgument(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LocalizedStringKey.FormatArgument);
}

uint64_t initializeWithCopy for LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      char v11 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v10, v11);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
      *(unsigned char *)(a1 + 16) = v11;
      uint64_t v12 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v12;
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v7 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      break;
    case 3u:
      uint64_t v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      uint64_t v5 = *(void **)(a2 + 40);
      *(void *)(a1 + 40) = v5;
      id v6 = v5;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *initializeWithCopy for EnvironmentValues.CapitalizationContext(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, a5, a6, MEMORY[0x263F8E0F8]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  void v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (char *)v17 + v21;
  unint64_t v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for (Int, LocalizedStringKey.FormatArgument)()
{
  if (!lazy cache variable for type metadata for (Int, LocalizedStringKey.FormatArgument))
  {
    type metadata accessor for LocalizedStringKey.FormatArgument(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, LocalizedStringKey.FormatArgument));
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>)
  {
    type metadata accessor for LocalizedStringKey.FormatArgument(255);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>);
    }
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (Int, LocalizedStringKey.FormatArgument)();
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v55 = v3;
  uint64_t v56 = v8;
  char v17 = a2;
  uint64_t v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  unint64_t v54 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = a1 + v54;
  uint64_t v59 = *(void *)(v13 + 72);
  uint64_t v57 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of LocalizedStringKey.FormatArgument(v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
  uint64_t v63 = *v15;
  uint64_t v20 = v63;
  uint64_t v58 = v18;
  outlined init with take of LocalizedStringKey.FormatArgument(v18, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
  unint64_t v21 = (void *)*a3;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  uint64_t v24 = v21[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_23;
  }
  char v27 = v22;
  if (v21[3] >= v26)
  {
    if (v17)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v32 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(void *)(v32[6] + 8 * v23) = v20;
    uint64_t v33 = *(void *)(v56 + 72);
    outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v32[7] + v33 * v23, type metadata accessor for LocalizedStringKey.FormatArgument);
    uint64_t v34 = v32[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v36;
    uint64_t v37 = v16 - 1;
    if (!v37)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v38 = v57 + v59 + v54;
    while (1)
    {
      outlined init with copy of LocalizedStringKey.FormatArgument(v38, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (Int, LocalizedStringKey.FormatArgument));
      uint64_t v63 = *v15;
      uint64_t v39 = v63;
      outlined init with take of LocalizedStringKey.FormatArgument(v58, (uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
      uint64_t v40 = (void *)*a3;
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
      uint64_t v43 = v40[2];
      BOOL v44 = (v42 & 1) == 0;
      BOOL v35 = __OFADD__(v43, v44);
      uint64_t v45 = v43 + v44;
      if (v35) {
        break;
      }
      char v46 = v42;
      if (v40[3] < v45)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, 1);
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
        if ((v46 & 1) != (v47 & 1)) {
          goto LABEL_25;
        }
      }
      if (v46) {
        goto LABEL_10;
      }
      Swift::Int v48 = (void *)*a3;
      *(void *)(*a3 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      *(void *)(v48[6] + 8 * v41) = v39;
      outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v10, v48[7] + v33 * v41, type metadata accessor for LocalizedStringKey.FormatArgument);
      uint64_t v49 = v48[2];
      BOOL v35 = __OFADD__(v49, 1);
      uint64_t v50 = v49 + 1;
      if (v35) {
        goto LABEL_24;
      }
      char v48[2] = v50;
      v38 += v59;
      if (!--v37) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v17 & 1);
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v30 = (void *)swift_allocError();
    swift_willThrow();
    id v62 = v30;
    id v31 = v30;
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v10, type metadata accessor for LocalizedStringKey.FormatArgument);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v51._object = (void *)0x800000024621A6C0;
  v51._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)();
  v52._countAndFlagsBits = 39;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(uint64_t a1, uint64_t a2, char a3, void *a4, int a5, int a6, uint64_t *a7)
{
  return closure #2 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3 & 1, a4, a5, a6, a7, *(id *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 16), *(void *)(v7 + 24));
}

void partial apply for closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(int a1, int a2, int a3, int a4)
{
  closure #1 in LocalizedStringKey.resolveArguments<A>(from:into:in:options:isUniqueSizeVariant:)(a1, a2, a3, a4, *(id *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(unsigned char *)(v4 + 72), *(void *)(v4 + 16), *(void *)(v4 + 24));
}

ValueMetadata *type metadata accessor for _SymbolEffect.Identified()
{
  return &type metadata for _SymbolEffect.Identified;
}

BOOL static ScrollPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyViewChild<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t specialized UnaryPositionAwareLayoutComputer.updateValue()()
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

void type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>);
    }
  }
}

__n128 partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v3;
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(v2 + 185);
  long long v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  long long v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  long long v6 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  __n128 result = *(__n128 *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  __n128 result;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v3;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(v2 + 192);
  long long v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  long long v5 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  long long v6 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  __n128 result = *(__n128 *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  __n128 result;
  long long v8;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 169) = *(_OWORD *)(v2 + 169);
  long long v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  __n128 result = *(__n128 *)(v2 + 32);
  uint64_t v8 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  __n128 result;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 153) = *(_OWORD *)(v2 + 153);
  long long v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  __n128 result = *(__n128 *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  __n128 result;
  long long v8;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(v2 + 176);
  long long v4 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v6;
  __n128 result = *(__n128 *)(v2 + 32);
  uint64_t v8 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

uint64_t AnchorBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));

  return swift_deallocClassInstance();
}

uint64_t EnvironmentValues.backgroundMaterial.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *v1;
  swift_retain_n();
  outlined copy of Material?(v2, v3);
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3);
  swift_release();
  outlined consume of Material?(v2, v3);
  if (v1[1])
  {
    uint64_t v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Material?(v2, v3);
}

uint64_t destroy for _ShapeStyle_Pack.Style(uint64_t a1)
{
  outlined consume of _ShapeStyle_Pack.Fill(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255) {
    outlined consume of GraphicsBlendMode(*(void *)(a1 + 88), v2 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t Canvas.ChildEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  EnvironmentFetch.environment.getter(a1);
  uint64_t v2 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, 0, 255);
  swift_release();
  if (a1[1])
  {
    uint64_t v3 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v3);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  double v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = &v18[-v14];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a4, v13);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, a4);
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)v19, AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance EnvironmentFetch<A>()
{
  return EnvironmentFetch.value.getter();
}

uint64_t EnvironmentFetch.value.getter()
{
  EnvironmentFetch.environment.getter(&v1);
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentFetch.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2, __int16 a3)
{
  unint64_t v6 = HIDWORD(a2);
  Swift::UInt v7 = HIBYTE(a3);
  Hasher.init(_seed:)();
  outlined copy of Material.ID(a1, a2);
  Material.ID.hash(into:)((uint64_t)v10);
  Hasher._combine(_:)(v6);
  outlined consume of Material.ID(a1, a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v7);
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0xFFFFFFFF000000FFLL, a3, v8);
}

uint64_t _ShapeStyle_RenderedShape.render(material:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v6 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v8 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v9 = v1[5];
  unint64_t v12 = v1[6];
  uint64_t v11 = v1[7];
  uint64_t v13 = v1[8];
  uint64_t v14 = v1[9];
  uint64_t v15 = v1[10];
  uint64_t v16 = v1[11];
  unsigned int v17 = *((_DWORD *)v2 + 24);
  __int16 v18 = *((_WORD *)v2 + 50);
  uint64_t v19 = *(unsigned int *)(a1 + 12);
  long long v98 = *(_OWORD *)((char *)v2 + 102);
  long long v99 = *(_OWORD *)((char *)v2 + 118);
  __int16 v100 = *((_WORD *)v2 + 67);
  uint64_t v20 = v2[17];
  uint64_t v22 = v2[23];
  uint64_t v21 = v2[24];
  unint64_t v24 = v2[25];
  uint64_t v23 = v2[26];
  char v25 = *((unsigned char *)v2 + 218);
  __int16 v26 = *((_WORD *)v2 + 108);
  char v27 = *((unsigned char *)v2 + 219);
  int v28 = *((_DWORD *)v2 + 55);
  char v29 = *((unsigned char *)v2 + 224);
  uint64_t v70 = (void *)v6;
  uint64_t v71 = v5;
  uint64_t v84 = v6;
  uint64_t v85 = v5;
  uint64_t v73 = v8;
  uint64_t v74 = v7;
  uint64_t v86 = v8;
  uint64_t v87 = v7;
  int v62 = v10;
  uint64_t v63 = v9;
  uint64_t v88 = v10;
  uint64_t v89 = v9;
  unint64_t v64 = v12;
  uint64_t v65 = v11;
  unint64_t v90 = v12;
  uint64_t v91 = v11;
  uint64_t v60 = v14;
  uint64_t v61 = v13;
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  uint64_t v59 = v15;
  uint64_t v94 = v15;
  uint64_t v95 = v16;
  unsigned int v96 = v17;
  __int16 v97 = v18;
  uint64_t v101 = v20;
  uint64_t v102 = v2[18];
  long long v103 = *(_OWORD *)(v2 + 19);
  long long v104 = *(_OWORD *)(v2 + 21);
  uint64_t v105 = v22;
  uint64_t v106 = v21;
  uint64_t v66 = v21;
  unint64_t v68 = v24;
  unint64_t v107 = v24;
  uint64_t v108 = v23;
  char v110 = v25;
  __int16 v109 = v26;
  char v111 = v27;
  int v112 = v28;
  char v113 = v29;
  long long v114 = *(_OWORD *)((char *)v2 + 225);
  uint64_t v115 = *(uint64_t *)((char *)v2 + 241);
  _ShapeStyle_RenderedShape.bounds.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  v79[0] = v34;
  v79[1] = v36;
  uint64_t v69 = v22;
  v79[2] = v22;
  __int16 v80 = v18;
  char v81 = v29;
  uint64_t v82 = MEMORY[0x263F8EE78];
  char v83 = 0;
  specialized Material.ResolvedMaterial.visitLayers<A>(_:)((uint64_t)v79, v3, v4 | (v19 << 32));
  uint64_t v38 = *(void *)(v82 + 16);
  if (v38)
  {
    if (v38 == 1)
    {
      uint64_t v38 = *(void *)(v82 + 72);
      unint64_t v39 = *(void *)(v82 + 80);
      int v40 = *(unsigned __int16 *)(v82 + 96) | (*(unsigned __int8 *)(v82 + 98) << 16);
      int v41 = *(_DWORD *)(v82 + 100);
      uint64_t v77 = *(void *)(v82 + 88);
      outlined copy of DisplayList.Item.Value(v38, v39);
    }
    else
    {
      uint64_t v42 = swift_bridgeObjectRetain();
      DisplayList.init(_:)(v42, (uint64_t)&v84);
      int v41 = 0;
      uint64_t v38 = 0;
      uint64_t v77 = v84;
      int v40 = (unsigned __int16)v85 | (BYTE2(v85) << 16);
      unint64_t v39 = 0x4000001300000000;
    }
  }
  else
  {
    int v41 = 0;
    int v40 = 0;
    unint64_t v39 = 0xC000000000000000;
    uint64_t v77 = 0;
  }
  if ((v17 & 0xE00000) != 0 || v20)
  {
    int v67 = v41;
    outlined copy of DisplayList.Item.Value(v38, v39);
    _ShapeStyle_RenderedShape.render(color:)(1.0, 1.0, 1.0, 1.0);
    int v72 = v40;
    unint64_t v48 = v2[25];
    uint64_t v47 = v2[26];
    char v49 = *((unsigned char *)v2 + 218);
    __int16 v50 = *((_WORD *)v2 + 108);
    uint64_t v51 = v2[21];
    uint64_t v52 = v2[22];
    uint64_t v54 = v2[23];
    uint64_t v53 = v2[24];
    uint64_t v43 = swift_allocObject();
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = v51;
    uint64_t v87 = v52;
    uint64_t v88 = v54;
    uint64_t v89 = v53;
    unint64_t v90 = v48;
    uint64_t v91 = v47;
    BYTE2(v92) = v49;
    LOWORD(v92) = v50;
    HIDWORD(v92) = 0;
    outlined copy of DisplayList.Item.Value(v53, v48);
    DisplayList.init(_:)(&v84, v43 + 16);
    *(_DWORD *)(v43 + 28) = 0;
    if (v39 >> 62 != 3 || (v72 & 0xFFFFFF) != 0 || v39 != 0xC000000000000000 || v77 | v38)
    {
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
      *(void *)(v46 + 32) = v31;
      *(void *)(v46 + 40) = v33;
      *(void *)(v46 + 48) = v35;
      *(void *)(v46 + 56) = v37;
      *(void *)(v46 + 64) = v69;
      *(void *)(v46 + 72) = v38;
      *(void *)(v46 + 80) = v39;
      *(void *)(v46 + 88) = v77;
      *(unsigned char *)(v46 + 98) = BYTE2(v72);
      *(_WORD *)(v46 + 96) = v72;
      *(_DWORD *)(v46 + 100) = v67;
      uint64_t v84 = v31;
      uint64_t v85 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v37;
      uint64_t v88 = v69;
      uint64_t v89 = v38;
      unint64_t v90 = v39;
      uint64_t v91 = v77;
      BYTE2(v92) = BYTE2(v72);
      LOWORD(v92) = v72;
      HIDWORD(v92) = v67;
      outlined copy of DisplayList.Item.Value(v38, v39);
      DisplayList.Item.features.getter(&v78);
      __int16 v76 = v78;
      uint64_t v84 = v31;
      uint64_t v85 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v37;
      uint64_t v88 = v69;
      uint64_t v89 = v38;
      unint64_t v90 = v39;
      uint64_t v91 = v77;
      BYTE2(v92) = BYTE2(v72);
      LOWORD(v92) = v72;
      HIDWORD(v92) = v67;
      DisplayList.Item.properties.getter(&v78);
      outlined consume of DisplayList.Item.Value(v53, v48);
      outlined consume of DisplayList.Item.Value(v38, v39);
      uint64_t v57 = v38;
      __int16 v44 = v76;
      outlined consume of DisplayList.Item.Value(v57, v39);
      char v45 = v78;
    }
    else
    {
      outlined consume of DisplayList.Item.Value(v53, v48);
      outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
      __int16 v44 = 0;
      char v45 = 0;
      uint64_t v46 = MEMORY[0x263F8EE78];
    }
    uint64_t v56 = 0x700000000;
  }
  else
  {
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v70;
    *(void *)(v43 + 24) = v71;
    *(void *)(v43 + 32) = v73;
    *(void *)(v43 + 40) = v74;
    *(unsigned char *)(v43 + 48) = v62;
    *(unsigned char *)(v43 + 49) = BYTE1(v62) & 1;
    *(unsigned char *)(v43 + 50) = BYTE2(v62) & 1;
    *(_DWORD *)(v43 + 52) = 0;
    if (v39 >> 62 != 3 || (v40 & 0xFFFFFF) != 0 || v39 != 0xC000000000000000 || v77 | v38)
    {
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
      *(void *)(v46 + 32) = v31;
      *(void *)(v46 + 40) = v33;
      *(void *)(v46 + 48) = v35;
      *(void *)(v46 + 56) = v37;
      *(void *)(v46 + 64) = v69;
      *(void *)(v46 + 72) = v38;
      *(void *)(v46 + 80) = v39;
      *(void *)(v46 + 88) = v77;
      *(unsigned char *)(v46 + 98) = BYTE2(v40);
      *(_WORD *)(v46 + 96) = v40;
      *(_DWORD *)(v46 + 100) = v41;
      uint64_t v84 = v31;
      uint64_t v85 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v37;
      uint64_t v88 = v69;
      uint64_t v89 = v38;
      unint64_t v90 = v39;
      uint64_t v91 = v77;
      BYTE2(v92) = BYTE2(v40);
      LOWORD(v92) = v40;
      HIDWORD(v92) = v41;
      outlined copy of DisplayList.Item.Value(v38, v39);
      outlined copy of DisplayList.Item.Value(v38, v39);
      outlined copy of _ShapeStyle_RenderedShape.Shape(v70, v71, v73, v74, v62, v63, v64, v65, v61, v60, v59, v16, v17);
      DisplayList.Item.features.getter(&v78);
      __int16 v75 = v78;
      uint64_t v84 = v31;
      uint64_t v85 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v37;
      uint64_t v88 = v69;
      uint64_t v89 = v38;
      unint64_t v90 = v39;
      uint64_t v91 = v77;
      BYTE2(v92) = BYTE2(v40);
      LOWORD(v92) = v40;
      HIDWORD(v92) = v41;
      DisplayList.Item.properties.getter(&v78);
      outlined consume of DisplayList.Item.Value(v66, v68);
      outlined consume of DisplayList.Item.Value(v38, v39);
      uint64_t v55 = v38;
      __int16 v44 = v75;
      outlined consume of DisplayList.Item.Value(v55, v39);
      char v45 = v78;
    }
    else
    {
      outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
      outlined copy of _ShapeStyle_RenderedShape.Shape(v70, v71, v73, v74, v62, v63, v64, v65, v61, v60, v59, v16, v17);
      outlined consume of DisplayList.Item.Value(v66, v68);
      outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
      __int16 v44 = 0;
      char v45 = 0;
      uint64_t v46 = MEMORY[0x263F8EE78];
    }
    uint64_t v56 = 0x600000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  v2[24] = v43;
  v2[25] = v56 & 0xFFFFFFFFFFFFLL | 0x4000000000000000;
  v2[26] = v46;
  *((unsigned char *)v2 + 218) = v45;
  *((_WORD *)v2 + 108) = v44;
  if (v83 == 1 && (v2[31] & 2) == 0) {
    *((unsigned char *)v2 + 248) |= 2u;
  }
  return result;
}

uint64_t specialized Material.ResolvedMaterial.visitLayers<A>(_:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (a3 == 3)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      if (a2 > 6)
      {
        __int16 v15 = 256;
        uint64_t v4 = 7;
      }
      else
      {
        outlined copy of Material.ID(a2, 3u);
        __int16 v15 = 0;
      }
      outlined consume of Material.ID(v4, 3u);
      outlined consume of Material.ID(7, 3u);
      return specialized MaterialLayers.visit<A>(layer:)(v15 | BYTE4(a3) & 1u);
    }
  }
  else if (a3 == 2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      outlined copy of Material.ID(a2, 2u);
      uint64_t v25 = v4;
      uint64_t v6 = (char *)(v4 + 80);
      do
      {
        uint64_t v7 = *((void *)v6 - 6);
        uint64_t v8 = *((void *)v6 - 5);
        uint64_t v9 = *((void *)v6 - 4);
        uint64_t v10 = *((void *)v6 - 3);
        int v11 = *((_DWORD *)v6 - 4);
        uint64_t v12 = *((void *)v6 - 1);
        char v13 = *v6;
        v6 += 56;
        uint64_t v26 = v7;
        uint64_t v27 = v8;
        uint64_t v28 = v9;
        uint64_t v29 = v10;
        int v30 = v11;
        uint64_t v31 = v12;
        char v32 = v13;
        outlined copy of Material.Layer.Storage(v7, v8, v9);
        outlined copy of GraphicsBlendMode(v12, v13);
        specialized MaterialLayers.visit<A>(layer:)((float *)&v26);
        outlined consume of Material.Layer.Storage(v7, v8, v9);
        outlined consume of GraphicsBlendMode(v12, v13);
        --v5;
      }
      while (v5);
      return outlined consume of Material.ID(v25, 2u);
    }
    return result;
  }
  unint64_t v16 = HIDWORD(a3);
  outlined copy of Material.ID(a2, a3);
  if (one-time initialization token for _shared != -1) {
    swift_once();
  }
  unsigned int v17 = (os_unfair_lock_s *)(static CoreMaterialCache._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v17);
  uint64_t v26 = v4;
  LOBYTE(v27) = a3;
  HIDWORD(v27) = v16;
  uint64_t v18 = CoreMaterialCache.subscript.getter((uint64_t)&v26);
  outlined consume of Material.ID(v4, a3);
  os_unfair_lock_unlock(v17);
  swift_release();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = (char *)(v18 + 56);
    do
    {
      unint64_t v21 = *((void *)v20 - 3);
      float v22 = *((float *)v20 - 4);
      uint64_t v23 = *((void *)v20 - 1);
      char v24 = *v20;
      v20 += 32;
      outlined copy of DisplayList.Content.Value(v21);
      outlined copy of GraphicsBlendMode(v23, v24);
      specialized MaterialLayers.visit<A>(layer:)(v21, v23, v24, v22);
      outlined consume of DisplayList.Content.Value(v21);
      outlined consume of GraphicsBlendMode(v23, v24);
      --v19;
    }
    while (v19);
  }

  return swift_bridgeObjectRelease();
}

uint64_t CoreMaterialCache.subscript.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  uint64_t v6 = *v1;
  if (!*(void *)(v6 + 16))
  {
    unint64_t v7 = v4 | (v5 << 32);
LABEL_6:
    uint64_t v13 = v3;
    char v14 = v4;
    int v15 = v5;
    uint64_t v10 = specialized CoreMaterialCache.load(material:)(&v13);
    outlined copy of Material.ID(v3, v4);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v3, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined copy of Material.ID(*(void *)a1, v4);
  unint64_t v7 = v4 | (v5 << 32);
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v7);
  if ((v9 & 1) == 0)
  {
    outlined consume of Material.ID(v3, v4);
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(*(void *)(v6 + 56) + 8 * v8);
  swift_bridgeObjectRetain();
LABEL_7:
  outlined consume of Material.ID(v3, v4);
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Material.ID.hash(into:)((uint64_t)v7);
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0xFFFFFFFF000000FFLL, v5);
}

void Material.ID.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  switch(*(unsigned char *)(v1 + 8))
  {
    case 1:
      Hasher._combine(_:)(9uLL);
      uint64_t v6 = *(void (**)(uint64_t))(*v2 + 104);
      swift_retain();
      v6(a1);
      outlined consume of Material.ID((uint64_t)v2, 1u);
      break;
    case 2:
      Swift::UInt v7 = 10;
      goto LABEL_10;
    case 3:
      switch((unint64_t)v2)
      {
        case 1uLL:
          Swift::UInt v7 = 1;
          break;
        case 2uLL:
          Swift::UInt v7 = 2;
          break;
        case 3uLL:
          Swift::UInt v7 = 3;
          break;
        case 4uLL:
          Swift::UInt v7 = 4;
          break;
        case 5uLL:
          Swift::UInt v7 = 5;
          break;
        case 6uLL:
          Swift::UInt v7 = 6;
          break;
        case 7uLL:
          Swift::UInt v7 = 7;
          break;
        default:
          Swift::UInt v7 = 0;
          break;
      }
LABEL_10:
      Hasher._combine(_:)(v7);
      break;
    default:
      unint64_t v4 = (void *)v2[6];
      Hasher._combine(_:)(8uLL);
      id v5 = v4;
      String.hash(into:)();
      String.hash(into:)();
      if (v4)
      {
        Hasher._combine(_:)(1u);
        id v8 = v5;
        NSObject.hash(into:)();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    char v6 = a2;
    unint64_t v8 = HIDWORD(a2);
    uint64_t v9 = ~v4;
    do
    {
      uint64_t v10 = *(void *)(v3 + 48) + 16 * v5;
      char v11 = *(unsigned char *)(v10 + 8);
      int v12 = *(_DWORD *)(v10 + 12);
      uint64_t v16 = *(void *)v10;
      char v17 = v11;
      uint64_t v14 = a1;
      char v15 = v6;
      if (specialized static Material.ID.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v14) && v12 == v8) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v9;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t specialized MaterialLayers.visit<A>(layer:)(unint64_t a1, uint64_t a2, char a3, float a4)
{
  unint64_t v6 = a1;
  uint64_t v7 = a3 & 1;
  unint64_t v8 = a1 >> 60;
  if (((a1 >> 60) | 2) == 2) {
    *((unsigned char *)v36 + 40) = 1;
  }
  unint64_t v9 = *((unsigned __int16 *)v36 + 12);
  uint64_t v10 = *v36;
  uint64_t v11 = v36[1];
  uint64_t v12 = v36[2];
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = v10;
  uint64_t v52 = v11;
  uint64_t v53 = v12;
  uint64_t v54 = a1;
  unint64_t v55 = v9;
  uint64_t v56 = 0;
  unsigned __int8 v58 = 0;
  unsigned __int16 v57 = 0;
  int v59 = 0;
  if (a4 == 1.0)
  {
    outlined copy of DisplayList.Content.Value(a1);
    uint64_t v13 = 0;
    int v14 = 0;
  }
  else
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_2461B9DC0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 48) = v10;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v12;
    *(void *)(v13 + 72) = v6;
    *(void *)(v13 + 80) = v9;
    *(void *)(v13 + 88) = 0;
    *(unsigned char *)(v13 + 98) = 0;
    *(_WORD *)(v13 + 96) = 0;
    *(_DWORD *)(v13 + 100) = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = v10;
    uint64_t v40 = v11;
    uint64_t v41 = v12;
    unint64_t v42 = v6;
    unint64_t v43 = v9;
    uint64_t v44 = 0;
    char v46 = 0;
    __int16 v45 = 0;
    int v47 = 0;
    outlined copy of DisplayList.Content.Value(v6);
    outlined copy of DisplayList.Item.Value(v6, v9);
    DisplayList.Item.features.getter((__int16 *)&v48);
    int v15 = 0;
    int v16 = v48;
    if (v8 == 9) {
      int v15 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
    }
    unint64_t v9 = 0x4000000400000000;
    outlined consume of DisplayList.Content.Value(v6);
    unint64_t v6 = LODWORD(a4);
    int v14 = v16 | (v15 << 16);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = v10;
    uint64_t v52 = v11;
    uint64_t v53 = v12;
    uint64_t v54 = LODWORD(a4);
    unint64_t v55 = 0x4000000400000000;
    uint64_t v56 = v13;
    unsigned __int8 v58 = v15;
    unsigned __int16 v57 = v16;
    int v59 = 0;
  }
  outlined copy of GraphicsBlendMode(a2, v7);
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v17 = static GraphicsBlendMode.normal;
  char v18 = byte_26B0EB4A0;
  if (v7)
  {
    if (byte_26B0EB4A0)
    {
      swift_unknownObjectRetain();
      outlined consume of GraphicsBlendMode(a2, 1);
      outlined consume of GraphicsBlendMode(v17, 1);
      if (a2 == v17) {
        goto LABEL_20;
      }
LABEL_19:
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_2461B9DC0;
      *(void *)(v19 + 32) = 0;
      *(void *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = v10;
      *(void *)(v19 + 56) = v11;
      *(void *)(v19 + 64) = v12;
      *(void *)(v19 + 72) = v6;
      *(void *)(v19 + 80) = v9;
      *(void *)(v19 + 88) = v13;
      *(unsigned char *)(v19 + 98) = BYTE2(v14);
      *(_WORD *)(v19 + 96) = v14;
      *(_DWORD *)(v19 + 100) = 0;
      outlined copy of GraphicsBlendMode(a2, v7);
      outlined copy of DisplayList.Item.Value(v6, v9);
      DisplayList.Item.features.getter((__int16 *)&v48);
      unsigned __int16 v35 = v48;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = v10;
      uint64_t v40 = v11;
      uint64_t v41 = v12;
      unint64_t v42 = v6;
      unint64_t v43 = v9;
      uint64_t v44 = v13;
      char v46 = BYTE2(v14);
      __int16 v45 = v14;
      int v47 = 0;
      DisplayList.Item.properties.getter(&v48);
      outlined consume of DisplayList.Item.Value(v6, v9);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = v10;
      uint64_t v52 = v11;
      uint64_t v53 = v12;
      uint64_t v54 = a2;
      unint64_t v55 = v7 | 0x4000000500000000;
      uint64_t v56 = v19;
      unsigned __int16 v57 = v35;
      unsigned __int8 v58 = v48;
      int v59 = 0;
      *((unsigned char *)v36 + 40) = 1;
      goto LABEL_20;
    }
    swift_unknownObjectRetain();
LABEL_18:
    outlined copy of GraphicsBlendMode(v17, v18);
    outlined consume of GraphicsBlendMode(a2, v7);
    outlined consume of GraphicsBlendMode(v17, v18);
    outlined consume of GraphicsBlendMode(a2, v7);
    goto LABEL_19;
  }
  if (byte_26B0EB4A0) {
    goto LABEL_18;
  }
  outlined consume of GraphicsBlendMode(a2, 0);
  outlined consume of GraphicsBlendMode(v17, 0);
  if (a2 != v17) {
    goto LABEL_19;
  }
LABEL_20:
  LOBYTE(v37) = *((unsigned char *)v36 + 26);
  DisplayList.Item.canonicalize(options:)((char *)&v37);
  uint64_t v20 = v49;
  uint64_t v21 = v50;
  uint64_t v22 = v51;
  uint64_t v23 = v52;
  uint64_t v25 = v53;
  uint64_t v24 = v54;
  unint64_t v26 = v55;
  uint64_t v27 = v56;
  int v28 = v57 | (v58 << 16);
  int v29 = v59;
  int v30 = (void *)v36[4];
  outlined copy of DisplayList.Item.Value(v54, v55);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    int v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  uint64_t v33 = &v30[9 * v32];
  v33[4] = v20;
  v33[5] = v21;
  v33[6] = v22;
  v33[7] = v23;
  v33[8] = v25;
  v33[9] = v24;
  v33[10] = v26;
  v33[11] = v27;
  *((unsigned char *)v33 + 98) = BYTE2(v28);
  *((_WORD *)v33 + 48) = v28;
  *((_DWORD *)v33 + 25) = v29;
  uint64_t result = outlined consume of DisplayList.Item.Value(v24, v26);
  v36[4] = (uint64_t)v30;
  return result;
}

void _ShapeStyle_RenderedShape.bounds.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  unsigned int v3 = *(_DWORD *)(v0 + 96);
  if (((v3 >> 21) & 7) == 0)
  {
    uint64_t v4 = *(double **)v0;
    uint64_t v5 = *(void *)(v0 + 8);
    uint64_t v6 = *(void *)(v0 + 32);
    unint64_t v22 = *(void *)(v0 + 48);
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v21 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    switch((char)v6)
    {
      case 2:
        CGFloat x = v4[2];
        CGFloat y = v4[3];
        CGFloat width = v4[4];
        CGFloat height = v4[5];
        outlined copy of Path.Storage((uint64_t)v4, v5, v2, v1, 2u);
        goto LABEL_14;
      case 3:
      case 4:
        goto LABEL_16;
      case 5:
        if (*((unsigned char *)v4 + 16))
        {
          if (*((unsigned char *)v4 + 16) == 1)
          {
            outlined copy of Path.Storage((uint64_t)v4, v5, v2, v1, 5u);
            RBPathGetBoundingRect();
          }
          else
          {
            outlined copy of Path.Storage((uint64_t)v4, v5, v2, v1, 5u);
            double v14 = MEMORY[0x24C526C90](v4 + 3);
          }
          CGFloat x = v14;
          CGFloat y = v15;
          CGFloat width = v16;
          CGFloat height = v17;
          goto LABEL_14;
        }
        char v18 = (void *)*((void *)v4 + 3);
        if (v18)
        {
          uint64_t v19 = v18;
          outlined copy of Path.Storage((uint64_t)v4, v5, v2, v1, 5u);
          swift_retain();
          PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v19);
          CGFloat x = PathBoundingBox.origin.x;
          CGFloat y = PathBoundingBox.origin.y;
          CGFloat width = PathBoundingBox.size.width;
          CGFloat height = PathBoundingBox.size.height;

          outlined consume of _ShapeStyle_RenderedShape.Shape(v4, v5, v2, v1, v6, v23, v22, v21, v20, v7, v9, v8, v3);
LABEL_14:
          v25.origin.CGFloat x = x;
          v25.origin.CGFloat y = y;
          v25.size.CGFloat width = width;
          v25.size.CGFloat height = height;
          CGRectIsNull(v25);
          outlined consume of _ShapeStyle_RenderedShape.Shape(v4, v5, v2, v1, v6, v23, v22, v21, v20, v7, v9, v8, v3);
          return;
        }
        __break(1u);
LABEL_16:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        break;
      case 6:
        CGFloat x = *MEMORY[0x263F001A0];
        CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
        CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
        CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
        goto LABEL_14;
      default:
        CGFloat x = *(double *)v0;
        CGFloat y = *(double *)(v0 + 8);
        CGFloat width = *(double *)(v0 + 16);
        CGFloat height = *(double *)(v0 + 24);
        goto LABEL_14;
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v5 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v6 = a4 & ~v5;
  if ((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    char v7 = a2;
    unint64_t v19 = HIDWORD(a2);
    int v17 = HIBYTE(a3);
    int v18 = a3;
    uint64_t v8 = ~v5;
    do
    {
      uint64_t v9 = *(void *)(v4 + 48) + 24 * v6;
      uint64_t v10 = *(void *)v9;
      unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
      int v12 = *(_DWORD *)(v9 + 12);
      int v13 = *(unsigned __int8 *)(v9 + 16);
      int v14 = *(unsigned __int8 *)(v9 + 17);
      uint64_t v23 = v10;
      unsigned __int8 v24 = v11;
      uint64_t v21 = a1;
      char v22 = v7;
      outlined copy of Material.ID(v10, v11);
      if (specialized static Material.ID.== infix(_:_:)((uint64_t)&v23, (uint64_t)&v21) && v12 == v19)
      {
        outlined consume of Material.ID(v10, v11);
        if (v13 == v18 && v17 == v14) {
          return v6;
        }
      }
      else
      {
        outlined consume of Material.ID(v10, v11);
      }
      unint64_t v6 = (v6 + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t Material._apply(to:)(uint64_t result)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v4 = *(unsigned int *)(v1 + 12);
  uint64_t v6 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v5 != *(void *)(result + 16))
      {
        unint64_t v10 = *(void *)(result + 56);
        if (v3 == 1)
        {
          char v11 = *(unsigned char *)(result + 105);
          uint64_t v22 = *(void *)(result + 48);
          unint64_t v23 = v10;
          LOBYTE(v24) = v11;
          unint64_t v3 = *(void *)(*(void *)v2 + 80);
          outlined copy of Material.ID(v2, 1u);
          swift_retain();
          swift_retain();
          ((void (*)(uint64_t *__return_ptr, uint64_t *))v3)(&v20, &v22);
          swift_release();
          swift_release();
          outlined consume of Material.ID(v2, 1u);
          uint64_t v2 = v20;
          LODWORD(v3) = 2;
        }
        else
        {
          uint64_t v22 = *(void *)(result + 48);
          unint64_t v23 = v10;
          swift_retain();
          swift_retain();
          uint64_t v4 = specialized Material.ResolvedMaterial.Flags.init(environment:)(&v22) | v4;
          outlined copy of Material.ID(v2, v3);
        }
        uint64_t v22 = v2;
        unint64_t v23 = v3 | (unint64_t)(v4 << 32);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        char v28 = 3;
        int v29 = 1065353216;
        uint64_t v30 = 0;
        char v31 = -1;
        uint64_t v15 = MEMORY[0x263F8EE78];
        uint64_t v32 = MEMORY[0x263F8EE78];
        uint64_t v16 = *(void *)(v7 + 32);
        int v17 = *(unsigned __int8 *)(v7 + 40);
        if (v17 == 1) {
          uint64_t v15 = *(void *)(v7 + 32);
        }
        unsigned __int8 v21 = v6;
        if (v17 == 1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v16;
        }
        if (v17 == 1) {
          char v19 = 5;
        }
        else {
          char v19 = v17;
        }
        uint64_t v20 = v15;
        outlined copy of Material.ID(v2, v3);
        _ShapeStyle_Pack.subscript.setter(&v22, &v21, v5);
        outlined consume of _ShapeStyle_Shape.Result(v18, v19);
        uint64_t result = outlined consume of Material.ID(v2, v3);
        *(void *)(v7 + 32) = v20;
        char v9 = 1;
        goto LABEL_20;
      }
      break;
    case 2:
      type metadata accessor for MaterialView<Rectangle>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.BackgroundColorProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider, (uint64_t)&type metadata for Color.BackgroundColorProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorBox);
      uint64_t v8 = swift_allocObject();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
      *(void *)(v7 + 32) = v8;
      char v9 = 3;
LABEL_20:
      *(unsigned char *)(v7 + 40) = v9;
      break;
    case 3:
    case 5:
      return result;
    case 4:
      int v12 = (uint64_t *)(result + 48);
      uint64_t v13 = *(void *)(result + 48);
      outlined copy of Material.ID(*(void *)v1, *(unsigned char *)(v1 + 8));
      swift_retain();
      outlined copy of Material.ID(v2, v3);
      swift_retain();
      specialized closure #1 in PropertyList.subscript.setter(v12, v2, v3 | (v4 << 32));
      swift_release();
      outlined consume of Material.ID(v2, v3);
      if (v12[1])
      {
        uint64_t v14 = *v12;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v13, v14);
        swift_release();
        swift_release();
      }
      swift_release();
      uint64_t result = outlined consume of Material.ID(v2, v3);
      break;
    default:
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v7 + 32) = 0;
      *(unsigned char *)(v7 + 40) = 0;
      break;
  }
  return result;
}

BOOL specialized static Material.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void **)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  switch(v3)
  {
    case 1u:
      if (v5 != 1) {
        goto LABEL_70;
      }
      uint64_t v18 = *(uint64_t (**)(void *))(*v2 + 96);
      outlined copy of Material.ID(*(void *)a2, 1u);
      outlined copy of Material.ID((uint64_t)v2, 1u);
      char v19 = v18(v4);
      outlined consume of Material.ID((uint64_t)v2, 1u);
      uint64_t v20 = (uint64_t)v4;
      unsigned __int8 v21 = 1;
      goto LABEL_21;
    case 2u:
      if (v5 != 2) {
        goto LABEL_70;
      }
      outlined copy of Material.ID(*(void *)a2, 2u);
      outlined copy of Material.ID((uint64_t)v2, 2u);
      char v19 = specialized static Array<A>.== infix(_:_:)((uint64_t)v2, (uint64_t)v4);
      outlined consume of Material.ID((uint64_t)v2, 2u);
      uint64_t v20 = (uint64_t)v4;
      unsigned __int8 v21 = 2;
LABEL_21:
      outlined consume of Material.ID(v20, v21);
      return v19 & 1;
    case 3u:
      switch((unint64_t)v2)
      {
        case 1uLL:
          if (v5 != 3 || v4 != (void *)1) {
            goto LABEL_70;
          }
          uint64_t v28 = 1;
          outlined consume of Material.ID(1, 3u);
          outlined consume of Material.ID(1, 3u);
          return v28;
        case 2uLL:
          if (v5 != 3 || v4 != (void *)2) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(2, 3u);
          uint64_t v24 = 2;
          goto LABEL_77;
        case 3uLL:
          if (v5 != 3 || v4 != (void *)3) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(3, 3u);
          uint64_t v24 = 3;
          goto LABEL_77;
        case 4uLL:
          if (v5 != 3 || v4 != (void *)4) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(4, 3u);
          uint64_t v24 = 4;
          goto LABEL_77;
        case 5uLL:
          if (v5 != 3 || v4 != (void *)5) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(5, 3u);
          uint64_t v24 = 5;
          goto LABEL_77;
        case 6uLL:
          if (v5 != 3 || v4 != (void *)6) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(6, 3u);
          uint64_t v24 = 6;
          goto LABEL_77;
        case 7uLL:
          if (v5 != 3 || v4 != (void *)7) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(7, 3u);
          uint64_t v24 = 7;
          goto LABEL_77;
        default:
          if (v5 != 3 || v4 != 0) {
            goto LABEL_70;
          }
          outlined consume of Material.ID(0, 3u);
          uint64_t v24 = 0;
LABEL_77:
          outlined consume of Material.ID(v24, 3u);
          uint64_t v28 = 1;
          break;
      }
      return v28;
    default:
      if (*(unsigned char *)(a2 + 8))
      {
LABEL_70:
        outlined copy of Material.ID(*(void *)a2, *(unsigned char *)(a2 + 8));
        outlined copy of Material.ID((uint64_t)v2, v3);
        outlined consume of Material.ID((uint64_t)v2, v3);
        uint64_t v25 = (uint64_t)v4;
        unsigned __int8 v26 = v5;
        goto LABEL_71;
      }
      uint64_t v6 = v2[4];
      uint64_t v7 = v2[5];
      uint64_t v8 = (void *)v2[6];
      uint64_t v9 = v4[4];
      uint64_t v10 = v4[5];
      char v11 = (void *)v4[6];
      BOOL v12 = v2[2] == v4[2] && v2[3] == v4[3];
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_29;
      }
      BOOL v13 = v6 == v9 && v7 == v10;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_29;
      }
      if (v8)
      {
        if (v11)
        {
          type metadata accessor for NSBundle();
          id v14 = v8;
          id v15 = v11;
          id v16 = v14;
          outlined copy of Material.ID((uint64_t)v4, 0);
          outlined copy of Material.ID((uint64_t)v2, 0);
          char v17 = static NSObject.== infix(_:_:)();

          outlined consume of Material.ID((uint64_t)v2, 0);
          outlined consume of Material.ID((uint64_t)v4, 0);
          return (v17 & 1) != 0;
        }
LABEL_29:
        outlined copy of Material.ID((uint64_t)v4, 0);
        outlined copy of Material.ID((uint64_t)v2, 0);
        outlined consume of Material.ID((uint64_t)v2, 0);
        uint64_t v25 = (uint64_t)v4;
        unsigned __int8 v26 = 0;
LABEL_71:
        outlined consume of Material.ID(v25, v26);
        return 0;
      }
      outlined copy of Material.ID((uint64_t)v4, 0);
      outlined copy of Material.ID((uint64_t)v2, 0);
      outlined consume of Material.ID((uint64_t)v2, 0);
      outlined consume of Material.ID((uint64_t)v4, 0);
      return !v11;
  }
}

uint64_t outlined consume of Material.ID(uint64_t a1, unsigned __int8 a2)
{
  if (a2 == 2) {
    return swift_bridgeObjectRelease();
  }
  if (a2 <= 1u) {
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundMaterialKey>>);
    }
  }
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized OffsetShapeStyle._apply(to:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3;
  unint64_t v7 = HIDWORD(a3);
  uint64_t v8 = *(void *)result;
  uint64_t v9 = (void *)(result + 8);
  uint64_t v10 = *(void *)(result + 8);
  uint64_t v11 = *(void *)(result + 16);
  uint64_t v12 = a4;
  uint64_t v14 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      uint64_t v18 = v10 + a4;
      if (__OFADD__(v10, a4)) {
        goto LABEL_81;
      }
      uint64_t v19 = v11 + a4;
      if (__OFADD__(v11, a4)) {
        goto LABEL_82;
      }
      if (v19 < v18) {
        goto LABEL_83;
      }
      unsigned int v4 = *(void *)result;
      int v20 = *(unsigned __int8 *)(result + 40);
      if (v20 == 1) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = *(void *)(result + 32);
      }
      uint64_t v63 = v21;
      uint64_t v64 = result;
      if (v20 == 1) {
        char v22 = 5;
      }
      else {
        char v22 = *(unsigned char *)(result + 40);
      }
      unint64_t v23 = (void *)MEMORY[0x263F8EE78];
      if (v20 == 1) {
        uint64_t v6 = *(void *)(result + 32);
      }
      else {
        uint64_t v6 = MEMORY[0x263F8EE78];
      }
      int64_t v5 = *(void *)(v6 + 16);
      unsigned int v83 = *(void *)result;
      if (!v5) {
        goto LABEL_44;
      }
      char v59 = v22;
      uint64_t v61 = v18;
      uint64_t v62 = *(void *)result;
      uint64_t v60 = v11 + a4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_85;
      }
      goto LABEL_29;
    case 2:
      if (__OFADD__(a4, v8)) {
        goto LABEL_80;
      }
      *(void *)unint64_t result = a4 + v8;
      void *v9 = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 2;
      if (a3 == 1) {
        goto LABEL_10;
      }
      return SystemColorsStyle._apply(to:)(result);
    case 3:
      outlined copy of Material.ID(a2, a3);
      ForegroundMaterialStyle._apply(to:)(v14);
      if (*(unsigned char *)(v14 + 40) == 2)
      {
        uint64_t v16 = *(void *)(v14 + 32);
        type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<AnyShapeStyle>>, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v16;
        *(void *)(v17 + 24) = v12;
        unint64_t result = outlined consume of Material.ID(a2, v6);
        goto LABEL_42;
      }
      return outlined consume of Material.ID(a2, v6);
    case 4:
      if (__OFADD__(a4, v8)) {
        goto LABEL_79;
      }
      *(void *)unint64_t result = a4 + v8;
      void *v9 = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4;
      if (a3 != 1) {
        return result;
      }
      goto LABEL_10;
    case 5:
      if (v11 | v10 | v8)
      {
        type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<ForegroundMaterialStyle>, (uint64_t)&type metadata for ForegroundMaterialStyle, (uint64_t)&protocol witness table for ForegroundMaterialStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = a2;
        *(unsigned char *)(v17 + 24) = v6;
        *(_DWORD *)(v17 + 28) = v7;
        uint64_t v39 = *(void *)(v14 + 32);
        char v40 = *(unsigned char *)(v14 + 40);
        outlined copy of Material.ID(a2, v6);
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(v39, v40);
LABEL_42:
        *(void *)(v14 + 32) = v17;
        char v41 = 2;
      }
      else
      {
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v14 + 32) = 0;
        char v41 = 4;
      }
      *(unsigned char *)(v14 + 40) = v41;
      return result;
    default:
      if (__OFADD__(a4, v8))
      {
        while (1)
        {
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          while (1)
          {
            __break(1u);
LABEL_85:
            uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v6);
LABEL_29:
            unint64_t v24 = 0;
            uint64_t v25 = v6 + 32;
LABEL_33:
            unint64_t v26 = *(void *)(v6 + 16);
            if (v24 >= v26) {
              break;
            }
            long long v27 = (unsigned __int8 *)(v25 + 120 * v24);
            unsigned int v28 = *v27;
            if (v28 < v4) {
              goto LABEL_31;
            }
            if (v28 <= v4)
            {
              uint64_t v29 = v27[1];
              BOOL v30 = __OFADD__(v29, v12);
              uint64_t v31 = v29 + v12;
              if (v30) {
                goto LABEL_76;
              }
              if ((v31 & 0x8000000000000000) == 0)
              {
                v27[1] = v31;
LABEL_31:
                ++v24;
                goto LABEL_32;
              }
              unint64_t v32 = v26 - 1;
              uint64_t v33 = v26 - 1 - v24;
              if (v33 < 0)
              {
LABEL_86:
                unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
                return result;
              }
              uint64_t v34 = v25 + 120 * v24;
              uint64_t v81 = *(void *)(v34 + 96);
              char v69 = *(unsigned char *)(v34 + 88);
              uint64_t v65 = *(void *)(v34 + 72);
              uint64_t v67 = *(void *)(v34 + 80);
              uint64_t v77 = *(void *)(v34 + 56);
              uint64_t v79 = *(void *)(v34 + 64);
              uint64_t v35 = *(void *)(v34 + 32);
              uint64_t v73 = *(void *)(v34 + 40);
              uint64_t v75 = *(void *)(v34 + 48);
              uint64_t v36 = *(void *)(v34 + 16);
              uint64_t v37 = *(void *)(v34 + 24);
              uint64_t v38 = *(void *)(v34 + 8);
              unsigned __int8 v71 = *(unsigned char *)(v34 + 104);
              memmove(v27, v27 + 120, 120 * v33);
              *(void *)(v6 + 16) = v32;
              outlined consume of _ShapeStyle_Pack.Fill(v38, v36, v37, v35, v73, v75, v77, v79, v65, v67, v69);
              outlined consume of GraphicsBlendMode?(v81, v71);
              swift_bridgeObjectRelease();
              --v5;
              unsigned int v4 = v83;
LABEL_32:
              if ((uint64_t)v24 >= v5) {
                goto LABEL_43;
              }
              goto LABEL_33;
            }
LABEL_43:
            uint64_t v18 = v61;
            LOBYTE(v8) = v62;
            unint64_t v23 = (void *)MEMORY[0x263F8EE78];
            uint64_t v19 = v60;
            char v22 = v59;
LABEL_44:
            outlined consume of _ShapeStyle_Shape.Result(v63, v22);
            uint64_t v42 = v64;
            *(void *)(v64 + 32) = v6;
            *(unsigned char *)(v64 + 40) = 1;
            *(void *)uint64_t v64 = v8;
            *(void *)(v64 + 8) = v18;
            *(void *)(v64 + 16) = v19;
            *(unsigned char *)(v64 + 24) = 1;
            ForegroundMaterialStyle._apply(to:)(v64);
            uint64_t v43 = -v12;
            if (!__OFSUB__(0, v12))
            {
              int v44 = *(unsigned __int8 *)(v64 + 40);
              if (v44 == 1) {
                uint64_t v45 = 0;
              }
              else {
                uint64_t v45 = *(void *)(v64 + 32);
              }
              if (v44 == 1) {
                uint64_t v6 = 5;
              }
              else {
                uint64_t v6 = *(unsigned __int8 *)(v64 + 40);
              }
              if (v44 == 1) {
                char v46 = *(void **)(v64 + 32);
              }
              else {
                char v46 = v23;
              }
              uint64_t v47 = v46[2];
              if (!v47) {
                goto LABEL_69;
              }
              uint64_t v63 = v45;
              LOBYTE(v62) = v6;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                char v46 = specialized _ArrayBuffer._consumeAndCreateNew()(v46);
              }
              int64_t v5 = 0;
              unsigned __int16 v48 = v46 + 4;
              while (2)
              {
                unint64_t v49 = v46[2];
                if (v5 >= v49) {
                  goto LABEL_75;
                }
                uint64_t v50 = (unsigned __int8 *)&v48[15 * v5];
                unsigned int v51 = *v50;
                if (v51 >= v4)
                {
                  if (v51 > v4)
                  {
LABEL_68:
                    uint64_t v45 = v63;
                    uint64_t v42 = v64;
                    LOBYTE(v6) = v62;
LABEL_69:
                    unint64_t result = outlined consume of _ShapeStyle_Shape.Result(v45, v6);
                    *(void *)(v42 + 32) = v46;
                    *(unsigned char *)(v42 + 40) = 1;
                    return result;
                  }
                  uint64_t v52 = v50[1];
                  BOOL v30 = __OFADD__(v52, v43);
                  uint64_t v53 = v52 + v43;
                  if (v30) {
                    goto LABEL_77;
                  }
                  if (v53 < 0)
                  {
                    unint64_t v54 = v49 - 1;
                    uint64_t v55 = v49 - 1 - v5;
                    if (v55 < 0) {
                      goto LABEL_86;
                    }
                    uint64_t v56 = &v48[15 * v5];
                    uint64_t v82 = v56[12];
                    char v70 = *((unsigned char *)v56 + 88);
                    uint64_t v66 = v56[9];
                    uint64_t v68 = v56[10];
                    uint64_t v78 = v56[7];
                    uint64_t v80 = v56[8];
                    uint64_t v57 = v56[4];
                    uint64_t v74 = v56[5];
                    uint64_t v76 = v56[6];
                    uint64_t v6 = v56[2];
                    uint64_t v58 = v56[3];
                    uint64_t v12 = v56[1];
                    unsigned __int8 v72 = *((unsigned char *)v56 + 104);
                    memmove(v50, v50 + 120, 120 * v55);
                    void v46[2] = v54;
                    outlined consume of _ShapeStyle_Pack.Fill(v12, v6, v58, v57, v74, v76, v78, v80, v66, v68, v70);
                    outlined consume of GraphicsBlendMode?(v82, v72);
                    swift_bridgeObjectRelease();
                    --v47;
                    unsigned int v4 = v83;
                    goto LABEL_60;
                  }
                  v50[1] = v53;
                }
                ++v5;
LABEL_60:
                if (v5 >= v47) {
                  goto LABEL_68;
                }
                continue;
              }
            }
          }
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
        }
      }
      *(void *)unint64_t result = a4 + v8;
      void *v9 = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 0;
      if (a3 == 1)
      {
LABEL_10:
        id v15 = *(void (**)(uint64_t))(*(void *)a2 + 88);
        outlined copy of Material.ID(a2, 1u);
        v15(v14);
        return outlined consume of Material.ID(a2, 1u);
      }
      else
      {
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v14 + 32) = 0;
        *(unsigned char *)(v14 + 40) = 0;
      }
      return result;
  }
}

uint64_t ForegroundMaterialStyle._apply(to:)(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)v1;
  int v4 = *(unsigned __int8 *)(v1 + 8);
  if (v4 == 1)
  {
    int64_t v5 = *(void (**)(uint64_t))(*(void *)v3 + 88);
    outlined copy of Material.ID(*(void *)v1, 1u);
    v5(v2);
    return outlined consume of Material.ID(v3, 1u);
  }
  else
  {
    int v6 = *(_DWORD *)(v1 + 12);
    uint64_t v8 = *(void *)result;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v9 = *(void *)(result + 16);
    switch(*(unsigned char *)(result + 24))
    {
      case 1:
        if (v7 != v9)
        {
          if (v7 <= 4)
          {
            uint64_t v10 = *(void *)(result + 8);
            if (v10 > 4u)
            {
              __break(1u);
              return result;
            }
          }
          else
          {
            LOBYTE(v10) = 4;
          }
          uint64_t v11 = *(void *)(result + 32);
          int v12 = *(unsigned __int8 *)(result + 40);
          uint64_t v13 = *(void *)(result + 96);
          char v14 = *(unsigned char *)(result + 104);
          __int16 v15 = *(_WORD *)(result + 105);
          uint64_t v39 = *(void *)result;
          uint64_t v40 = v7;
          uint64_t v41 = v9;
          char v42 = 1;
          uint64_t v43 = v11;
          char v44 = v12;
          long long v16 = *(_OWORD *)(result + 64);
          long long v45 = *(_OWORD *)(result + 48);
          long long v46 = v16;
          long long v47 = *(_OWORD *)(result + 80);
          uint64_t v48 = v13;
          char v49 = v14;
          __int16 v50 = v15;
          unsigned __int8 v38 = v10;
          uint64_t v35 = v3;
          char v36 = v4;
          int v37 = v6;
          _ShapeStyle_Shape.resolveStyle(id:material:)(&v38, (uint64_t)&v35, (uint64_t)&v51);
          uint64_t v17 = v60;
          char v18 = v61;
          unsigned __int8 v19 = v63;
          unsigned __int8 v32 = v54;
          uint64_t v33 = (uint64_t)v53;
          uint64_t v30 = v56;
          uint64_t v31 = v55;
          uint64_t v28 = v58;
          uint64_t v29 = v57;
          uint64_t v26 = v59;
          uint64_t v20 = v62;
          unsigned __int8 v27 = v63;
          uint64_t v21 = MEMORY[0x263F8EE78];
          if (v12 == 1) {
            uint64_t v21 = v11;
          }
          LOBYTE(v35) = v8;
          if (v12 == 1) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = v11;
          }
          uint64_t v34 = v22;
          uint64_t v39 = v21;
          uint64_t v23 = (uint64_t)v51;
          unsigned __int8 v24 = v52;
          outlined copy of _ShapeStyle_Pack.Fill(v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61);
          outlined copy of GraphicsBlendMode?(v20, v19);
          swift_bridgeObjectRetain();
          _ShapeStyle_Pack.subscript.setter((uint64_t *)&v51, (unsigned __int8 *)&v35, v7);
          outlined consume of _ShapeStyle_Shape.Result(v34, v25);
          outlined consume of _ShapeStyle_Pack.Fill(v23, v24, v33, v32, v31, v30, v29, v28, v26, v17, v18);
          outlined consume of GraphicsBlendMode?(v20, v27);
          unint64_t result = swift_bridgeObjectRelease();
          *(void *)(v2 + 32) = v39;
          *(unsigned char *)(v2 + 40) = 1;
        }
        break;
      case 2:
        unint64_t result = SystemColorsStyle._apply(to:)(result);
        break;
      case 3:
      case 4:
      case 5:
        return result;
      default:
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v2 + 32) = 0;
        *(unsigned char *)(v2 + 40) = 0;
        break;
    }
  }
  return result;
}

double _ShapeStyle_Shape.resolveStyle(id:material:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v12;
  double result;
  uint64_t v14[2];
  char v15;
  uint64_t v16;

  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  uint64_t v9 = *(void *)(v3 + 56);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 105);
  v14[0] = *(void *)(v3 + 48);
  v14[1] = v9;
  if (v7 == 1)
  {
    __int16 v15 = 3;
    uint64_t v11 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v6 + 80);
    outlined copy of Material.ID(v6, 1u);
    swift_retain();
    swift_retain();
    v11(&v16, v14);
    swift_release();
    swift_release();
    outlined consume of Material.ID(v6, 1u);
    uint64_t v6 = v16;
    uint64_t v7 = 2;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v8 = specialized Material.ResolvedMaterial.Flags.init(environment:)(v14) | v8;
    outlined copy of Material.ID(v6, v7);
  }
  if (v8) {
    int v12 = 1065353216;
  }
  else {
    int v12 = 0;
  }
  *(void *)a3 = v12 & 0xC07FFFFFFFFFFFFFLL | (((v12 >> 23) & 0x7F) << 55);
  *(void *)(a3 + 8) = v12 | 0x3F80000000000000;
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v7 | (v8 << 32);
  *(void *)(a3 + 32) = v5 | (v10 << 8);
  unint64_t result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = 2;
  *(_DWORD *)(a3 + 84) = 1065353216;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 96) = -1;
  *(void *)(a3 + 104) = MEMORY[0x263F8EE78];
  return result;
}

uint64_t Material.resolve(in:role:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  int v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)v3;
  LODWORD(v7) = *(unsigned __int8 *)(v3 + 8);
  uint64_t v8 = *(_DWORD *)(v3 + 12);
  if (v7 == 1)
  {
    uint64_t v9 = *a2;
    uint64_t v11 = *a1;
    int v12 = v5;
    uint64_t v13 = v9;
    uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v6 + 80);
    outlined copy of Material.ID(v6, 1u);
    swift_retain();
    swift_retain();
    v7(&v14, &v11);
    swift_release();
    swift_release();
    unint64_t result = outlined consume of Material.ID(v6, 1u);
    uint64_t v6 = v14;
    LOBYTE(v7) = 2;
  }
  else
  {
    uint64_t v11 = *a1;
    int v12 = v5;
    swift_retain();
    swift_retain();
    v8 |= specialized Material.ResolvedMaterial.Flags.init(environment:)(&v11);
    unint64_t result = outlined copy of Material.ID(v6, v7);
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = (_BYTE)v7;
  *(_DWORD *)(a3 + 12) = v8;
  return result;
}

uint64_t specialized Material.ResolvedMaterial.Flags.init(environment:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v15);
    swift_release_n();
    swift_release_n();
    unsigned int v2 = v15;
    swift_retain_n();
    swift_retain_n();
    char v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (char *)&v15);
    swift_release_n();
    swift_release_n();
    int v4 = v15;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    BloomFilter.init(hashValue:)(v5);
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v14);
    if (v7) {
      unsigned int v2 = *(unsigned __int8 *)(v7 + 72);
    }
    else {
      unsigned int v2 = 0;
    }
    swift_release_n();
    uint64_t v8 = swift_retain_n();
    char v3 = specialized closure #1 in PropertyList.subscript.getter(v8);
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
    BloomFilter.init(hashValue:)(v9);
    uint64_t v10 = swift_retain_n();
    uint64_t v11 = specialized find1<A>(_:key:filter:)(v10, v14);
    if (v11) {
      int v4 = *(unsigned __int8 *)(v11 + 72);
    }
    else {
      int v4 = 0;
    }
    swift_release_n();
  }
  swift_release();
  swift_release();
  unsigned int v12 = v2 | 2;
  if ((v3 & 1) == 0) {
    unsigned int v12 = v2;
  }
  if (v4) {
    return v12 | 4;
  }
  else {
    return v12;
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityReduceTransparencyKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>);
    }
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 16 * result;
  *(void *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = a3;
  *(_DWORD *)(v5 + 12) = HIDWORD(a3);
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = a5[6] + 16 * result;
  *(void *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 10) = BYTE2(a3);
  *(_WORD *)(v5 + 8) = a3;
  *(unsigned char *)(v5 + 11) = BYTE3(a3);
  *(unsigned char *)(v5 + 12) = BYTE4(a3);
  *(unsigned char *)(v5 + 13) = BYTE5(a3) & 1;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [AnyMaterialLayer], (uint64_t)&type metadata for AnyMaterialLayer, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial()
{
  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial;
  if (!lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.ResolvedMaterial and conformance Material.ResolvedMaterial);
  }
  return result;
}

uint64_t type metadata accessor for AnimationListener()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in GestureFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 20);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  uint64_t v35 = a1;
  uint64_t v26 = v13;
  int v27 = v14;
  uint64_t v28 = v15;
  long long v18 = *(_OWORD *)(a2 + 5);
  long long v29 = *(_OWORD *)(a2 + 3);
  long long v30 = v18;
  long long v31 = *(_OWORD *)(a2 + 7);
  uint64_t v32 = a2[9];
  int v33 = v16;
  unsigned __int8 v24 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  uint64_t v25 = v17;
  (*(void (**)(long long *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(a7 + 16))(&v34, &v35, &v26, a3, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), v23, a6, a7);
  *a8 = v34;
  LOBYTE(a7) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a7) {
    __break(1u);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void, void))
{
  v4[5] = *MEMORY[0x263EF8340];
  a3(v4, *(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  AGGraphSetOutputValue();
  return swift_release();
}

void specialized GeometryEffectTransform.value.getter(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  double v57 = *(double *)(Value + 8);
  double v54 = *(double *)(Value + 16);
  double v50 = *(double *)(Value + 32);
  double v51 = *(double *)(Value + 24);
  int v4 = (double *)AGGraphGetValue();
  double v5 = *v4;
  double v6 = v4[1];
  BOOL v7 = (double *)AGGraphGetValue();
  double v9 = *v7;
  double v8 = v7[1];
  double v10 = v7[2];
  double v11 = v7[3];
  type metadata accessor for CGSize(0);
  unsigned int v12 = (double *)AGGraphGetValue();
  double v13 = *v12;
  double v14 = v12[1];
  if (v9 == 0.0)
  {
    uint64_t v15 = one-time initialization token for leastNonzeroScaleFactor;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    double v9 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  else
  {
    swift_retain();
  }
  double v16 = v10 * v13;
  double v17 = v11 * v14;
  if (v8 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    double v8 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  double v55 = v6 - v54;
  double v56 = v5 - v57;
  CGAffineTransformMakeTranslation(&t1, -v16, -v17);
  long long v58 = *(_OWORD *)&t1.a;
  long long v52 = *(_OWORD *)&t1.c;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeScale(&t1, v9, v8);
  long long v20 = *(_OWORD *)&t1.a;
  long long v21 = *(_OWORD *)&t1.c;
  long long v22 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.double a = v58;
  *(_OWORD *)&t1.double c = v52;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.double a = v20;
  *(_OWORD *)&t2.double c = v21;
  *(_OWORD *)&t2.tCGFloat x = v22;
  CGAffineTransformConcat(&v62, &t1, &t2);
  long long v59 = *(_OWORD *)&v62.a;
  long long v53 = *(_OWORD *)&v62.c;
  CGFloat v23 = v62.tx;
  CGFloat v24 = v62.ty;
  CGAffineTransformMakeTranslation(&t1, v16, v17);
  long long v25 = *(_OWORD *)&t1.a;
  long long v26 = *(_OWORD *)&t1.c;
  long long v27 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.double a = v59;
  *(_OWORD *)&t1.double c = v53;
  t1.tCGFloat x = v23;
  t1.tCGFloat y = v24;
  *(_OWORD *)&t2.double a = v25;
  *(_OWORD *)&t2.double c = v26;
  *(_OWORD *)&t2.tCGFloat x = v27;
  CGAffineTransformConcat(&v62, &t1, &t2);
  double a = v62.a;
  double b = v62.b;
  double c = v62.c;
  double d = v62.d;
  double v33 = v62.tx;
  CGFloat v32 = v62.ty;
  t1.double a = v62.a;
  t1.double b = v62.b;
  t1.double c = 0.0;
  t1.double d = v62.c;
  t1.tCGFloat x = v62.d;
  t1.tCGFloat y = 0.0;
  CGFloat v70 = v62.tx;
  CGFloat v71 = v62.ty;
  uint64_t v72 = 0x3FF0000000000000;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    uint64_t v34 = *(void *)AGGraphGetValue();
    t2.double a = -1.0;
    memset(&t2.b, 0, 24);
    *(_OWORD *)&t2.tCGFloat x = xmmword_2461BCA80;
    uint64_t v67 = v34;
    long long v68 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)(&t1.a, v61);
    ProjectionTransform.concatenating(_:)(&t2.a, &v62.a);
    double a = v62.a;
    double b = v62.b;
    double v35 = v62.c;
    double c = v62.d;
    double d = v62.tx;
    double v36 = v62.ty;
    double v33 = v63;
    double v60 = v64;
    double v37 = v65;
  }
  else
  {
    double v60 = v32;
    double v37 = 1.0;
    double v35 = 0.0;
    double v36 = 0.0;
  }
  double v38 = v51 - v56;
  double v39 = v50 - v55;
  if (v35 == 0.0 && v36 == 0.0 && v37 == 1.0)
  {
    if (a * d - b * c != 0.0)
    {
      if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
      {
        double v40 = v38 - v33;
        double v41 = v39 - v60;
LABEL_31:
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = v3;
        *(double *)(a1 + 24) = v40;
        *(double *)(a1 + 32) = v41;
        return;
      }
      goto LABEL_28;
    }
LABEL_23:
    _StringGuts.grow(_:)(28);
    v42._object = (void *)0x800000024621DC20;
    v42._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    double v41 = v50 - v55;
    double v40 = v51 - v56;
    goto LABEL_31;
  }
  if (v35 * (c * v60 - d * v33) + a * (d * v37 - v36 * v60) - b * (c * v37 - v36 * v33) == 0.0) {
    goto LABEL_23;
  }
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v43 = swift_allocObject();
  *(double *)(v43 + 32) = v51 - v56;
  *(double *)(v43 + 40) = v50 - v55;
  *(double *)(v43 + 48) = a;
  *(double *)(v43 + 56) = b;
  *(double *)(v43 + 64) = v35;
  *(double *)(v43 + 72) = c;
  *(double *)(v43 + 80) = d;
  *(double *)(v43 + 88) = v36;
  *(double *)(v43 + 96) = v33;
  *(double *)(v43 + 104) = v60;
  *(double *)(v43 + 112) = v37;
  uint64_t v44 = 1;
  *(unsigned char *)(v43 + 120) = 1;
  *(void *)(v43 + 16) = v3;
  if (!v3) {
    goto LABEL_30;
  }
  uint64_t v45 = *(void *)(v3 + 24);
  BOOL v46 = __OFADD__(v45, 1);
  uint64_t v44 = v45 + 1;
  if (!v46) {
    goto LABEL_30;
  }
  __break(1u);
LABEL_28:
  double v47 = v38;
  double v48 = v39;
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v43 = swift_allocObject();
  *(double *)(v43 + 32) = v47;
  *(double *)(v43 + 40) = v48;
  *(double *)(v43 + 48) = a;
  *(double *)(v43 + 56) = b;
  *(double *)(v43 + 64) = c;
  *(double *)(v43 + 72) = d;
  *(double *)(v43 + 80) = v33;
  *(double *)(v43 + 88) = v60;
  uint64_t v44 = 1;
  *(unsigned char *)(v43 + 96) = 1;
  *(void *)(v43 + 16) = v3;
  if (!v3 || (v49 = *(void *)(v3 + 24), v46 = __OFADD__(v49, 1), uint64_t v44 = v49 + 1, !v46))
  {
LABEL_30:
    *(void *)(v43 + 24) = v44;
    double v40 = 0.0;
    uint64_t v3 = v43;
    double v41 = 0.0;
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t Value;
  uint64_t v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  Swift::String v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  double v39;
  double v40;
  long long v41;
  float64x2_t v42;
  float64x2_t v43;
  int8x16_t v44;
  double v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51[9];
  int8x16_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  long long v59;
  uint64_t v60;
  uint64_t v61;
  long long v62;
  uint64_t v63;
  long long v64;

  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  int v4 = *(double *)(Value + 8);
  double v5 = *(double *)(Value + 16);
  double v39 = *(double *)(Value + 32);
  double v40 = *(double *)(Value + 24);
  double v6 = (double *)AGGraphGetValue();
  BOOL v7 = *v6 - v4;
  double v8 = v6[1] - v5;
  double v9 = AGGraphGetValue();
  double v41 = *(_OWORD *)v9;
  double v10 = *(void *)(v9 + 16);
  double v11 = *(void *)(v9 + 24);
  unsigned int v12 = *(double *)(v9 + 32);
  double v13 = *(double *)(v9 + 40);
  uint64_t v15 = *(void *)(v9 + 48);
  double v14 = *(double *)(v9 + 56);
  type metadata accessor for CGSize(0);
  double v16 = (double *)AGGraphGetValue();
  double v17 = *v16;
  long long v18 = v16[1];
  unsigned __int8 v19 = v12 * *v16;
  if (*v16 <= v18) {
    double v17 = v16[1];
  }
  long long v59 = v41;
  double v60 = v10;
  char v61 = v11;
  *(double *)&CGAffineTransform v62 = v19;
  *((double *)&v62 + 1) = v13 * v18;
  double v63 = v15;
  *(double *)&double v64 = v17 / v14;
  *((void *)&v64 + 1) = 0x7FF8000000000000;
  swift_retain();
  _Rotation3DEffect.Data.transform.getter((CGFloat *)v44.i64);
  double v37 = v44;
  long long v20 = v45;
  Swift::String v42 = v46;
  long long v22 = v47;
  long long v21 = v48;
  CGFloat v23 = v49;
  CGFloat v24 = v50;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    long long v25 = *(void *)AGGraphGetValue();
    long long v59 = 0xBFF0000000000000;
    double v60 = 0;
    char v61 = 0;
    CGAffineTransform v62 = xmmword_2461BCA80;
    double v63 = v25;
    double v64 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)((double *)v44.i64, v51);
    ProjectionTransform.concatenating(_:)((double *)&v59, (double *)v52.i64);
    long long v26 = v54;
    long long v20 = v53;
    long long v22 = v55;
    long long v21 = v56;
    CGFloat v23 = v57;
    CGFloat v24 = v58;
    long long v27 = (float64x2_t)vextq_s8(v52, v52, 8uLL);
  }
  else
  {
    long long v27 = (float64x2_t)vextq_s8(v37, v37, 8uLL);
    long long v26 = v42;
  }
  uint64_t v28 = v40 - v7;
  long long v29 = v39 - v8;
  uint64_t v43 = v26;
  double v38 = (int8x16_t)v27;
  if (v20 == 0.0 && v22 == 0.0 && v24 == 1.0)
  {
    long long v30 = vmulq_f64(v27, v26);
    if (vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), v30).f64[0] == 0.0)
    {
LABEL_16:
      _StringGuts.grow(_:)(28);
      v35._object = (void *)0x800000024621DC20;
      v35._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v35);
      _print_unlocked<A, B>(_:_:)();
      specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
      swift_bridgeObjectRelease();
LABEL_20:
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = v3;
      *(double *)(a1 + 24) = v28;
      *(double *)(a1 + 32) = v29;
      return;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v27, (float64x2_t)xmmword_2461C55F0), (int32x4_t)vceqq_f64(v26, (float64x2_t)xmmword_2461C55F0))))) & 1) == 0)
    {
      uint64_t v28 = v28 - v21;
      long long v29 = v29 - v23;
      goto LABEL_20;
    }
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
    long long v31 = swift_allocObject();
    *(double *)(v31 + 32) = v28;
    *(double *)(v31 + 40) = v29;
    *(int8x16_t *)(v31 + 48) = vextq_s8(v38, v38, 8uLL);
    *(float64x2_t *)(v31 + 64) = v43;
    *(double *)(v31 + 80) = v21;
    *(double *)(v31 + 88) = v23;
    CGFloat v32 = 1;
    *(unsigned char *)(v31 + 96) = 1;
    *(void *)(v31 + 16) = v3;
    if (!v3) {
      goto LABEL_19;
    }
    double v33 = *(void *)(v3 + 24);
    uint64_t v34 = __OFADD__(v33, 1);
    CGFloat v32 = v33 + 1;
    if (!v34) {
      goto LABEL_19;
    }
    __break(1u);
  }
  if (v20 * (v23 * v26.f64[0] - vmuld_lane_f64(v21, v26, 1))
     + vmuld_lane_f64(vmuld_lane_f64(v24, v26, 1) - v22 * v23, v27, 1)
     - (v24 * v26.f64[0] - v22 * v21) * v27.f64[0] == 0.0)
    goto LABEL_16;
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  long long v31 = swift_allocObject();
  *(double *)(v31 + 32) = v28;
  *(double *)(v31 + 40) = v29;
  *(int8x16_t *)(v31 + 48) = vextq_s8(v38, v38, 8uLL);
  *(double *)(v31 + 64) = v20;
  *(float64x2_t *)(v31 + 72) = v43;
  *(double *)(v31 + 88) = v22;
  *(double *)(v31 + 96) = v21;
  *(double *)(v31 + 104) = v23;
  *(double *)(v31 + 112) = v24;
  CGFloat v32 = 1;
  *(unsigned char *)(v31 + 120) = 1;
  *(void *)(v31 + 16) = v3;
  if (!v3 || (v36 = *(void *)(v3 + 24), v34 = __OFADD__(v36, 1), CGFloat v32 = v36 + 1, !v34))
  {
LABEL_19:
    *(void *)(v31 + 24) = v32;
    uint64_t v28 = 0.0;
    uint64_t v3 = v31;
    long long v29 = 0.0;
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t RootTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  if (MEMORY[0x24C527E00](v2 + 200))
  {
    uint64_t v3 = *(void *)(v2 + 208);
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for RootTransformProvider);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(v20, v5, v5, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
  }
  outlined init with copy of RootTransformProvider?((uint64_t)v20, (uint64_t)v17);
  uint64_t v6 = v18;
  if (v18)
  {
    uint64_t v7 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 8))(&v14, v6, v7);
    outlined destroy of RootTransformProvider?((uint64_t)v20);
    uint64_t v8 = v14;
    long long v12 = v16;
    long long v13 = v15;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    long long v11 = v12;
    long long v10 = v13;
  }
  else
  {
    outlined destroy of RootTransformProvider?((uint64_t)v20);
    uint64_t result = outlined destroy of RootTransformProvider?((uint64_t)v17);
    uint64_t v8 = 0;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
  }
  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v11;
  return result;
}

uint64_t outlined destroy of RootTransformProvider?(uint64_t a1)
{
  type metadata accessor for RootTransformProvider?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for RootTransformProvider?()
{
  if (!lazy cache variable for type metadata for RootTransformProvider?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for RootTransformProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RootTransformProvider?);
    }
  }
}

uint64_t outlined init with copy of RootTransformProvider?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RootTransformProvider?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for _AnyLinearGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t _SafeAreaInsetsModifier.Transform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)Value;
  double v6 = *(double *)(Value + 8);
  double v7 = *(double *)(Value + 16);
  double v8 = *(double *)(Value + 24);
  double v9 = *(double *)(Value + 32);
  long long v10 = (double *)AGGraphGetValue();
  double v11 = v10[1];
  double v12 = v8 - (*v10 - v6);
  double v13 = v9 - (v11 - v7);
  *(double *)(a1 + 8) = *v10;
  *(double *)(a1 + 16) = v11;
  uint64_t v14 = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  type metadata accessor for Element<SizedSpaceIDElement>();
  uint64_t v17 = swift_allocObject();
  *(double *)(v17 + 32) = v12;
  *(double *)(v17 + 40) = v13;
  *(void *)(v17 + 48) = v3;
  *(void *)(v17 + 56) = v15;
  *(void *)(v17 + 64) = v16;
  *(void *)(v17 + 16) = v5;
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v18 = *(void *)(v5 + 24);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_5:
    uint64_t v20 = 1;
  }
  *(void *)(v17 + 24) = v20;
  *(void *)a1 = v17;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;

  return swift_retain();
}

void type metadata accessor for Element<SizedSpaceIDElement>()
{
  if (!lazy cache variable for type metadata for Element<SizedSpaceIDElement>)
  {
    lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement();
    unint64_t v0 = type metadata accessor for Element();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Element<SizedSpaceIDElement>);
    }
  }
}

uint64_t type metadata accessor for Element()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement()
{
  unint64_t result = lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement;
  if (!lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement;
  if (!lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedSpaceIDElement and conformance SizedSpaceIDElement);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LinearGradient@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t key path getter for EnvironmentValues.typesettingConfiguration : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a2);
  swift_release();

  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for SecondaryChild<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t View.symbolVariant(_:)(__int16 *a1, uint64_t a2)
{
  __int16 v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_allocObject();
  *(_WORD *)(v5 + 16) = v3;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.symbolVariant(_:), v5, a2);
  swift_release();

  return swift_release();
}

uint64_t destructiveInjectEnumTag for TagValueTraitKey.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t getEnumTag for TagValueTraitKey.Value(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:reuseID:)(uint64_t a1, int a2, uint64_t a3)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 0, a3);
}

uint64_t View.fontWeight(_:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = a2 & 1;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontWeight(_:), v7, a3);
  swift_release();

  return swift_release();
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()()
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v4 = *(_OWORD *)(Value + 48);
  long long v6 = *(_OWORD *)Value;
  long long v5 = *(_OWORD *)(Value + 16);
  long long v43 = *(_OWORD *)(Value + 32);
  long long v44 = v4;
  long long v41 = v6;
  long long v42 = v5;
  long long v7 = *(_OWORD *)(Value + 112);
  long long v9 = *(_OWORD *)(Value + 64);
  long long v8 = *(_OWORD *)(Value + 80);
  long long v47 = *(_OWORD *)(Value + 96);
  long long v48 = v7;
  long long v45 = v9;
  long long v46 = v8;
  long long v11 = *(_OWORD *)(Value + 144);
  long long v10 = *(_OWORD *)(Value + 160);
  int v12 = *(_DWORD *)(Value + 175);
  long long v49 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v51[15] = v12;
  long long v50 = v11;
  *(_OWORD *)double v51 = v10;
  uint64_t v13 = *(void *)AGGraphGetValue();
  char v15 = v3 | v14;
  uint64_t v16 = *(void *)(v0 + 24);
  v36[8] = v49;
  v36[9] = v50;
  *(_OWORD *)double v37 = *(_OWORD *)v51;
  *(_DWORD *)&v37[15] = *(_DWORD *)&v51[15];
  v36[4] = v45;
  v36[5] = v46;
  v36[6] = v47;
  v36[7] = v48;
  v36[0] = v41;
  v36[1] = v42;
  _OWORD v36[2] = v43;
  v36[3] = v44;
  *(void *)&v37[24] = v13;
  v38[8] = v49;
  v38[9] = v50;
  v38[4] = v45;
  v38[5] = v46;
  v38[6] = v47;
  v38[7] = v48;
  v38[0] = v41;
  v38[1] = v42;
  v38[2] = v43;
  v38[3] = v44;
  v38[10] = *(_OWORD *)v37;
  v38[11] = *(_OWORD *)&v37[16];
  uint64_t v17 = (double *)AGGraphGetValue();
  double v18 = *v17;
  double v19 = v17[1];
  double v20 = v17[2];
  double v21 = v17[3];
  char v23 = v22 & 1;
  CGFloat v24 = (double *)AGGraphGetValue();
  double v25 = *v24;
  double v26 = v24[1];
  char v28 = v27 & 1;
  uint64_t v29 = AGGraphGetValue();
  uint64_t v30 = *(void *)(v29 + 32);
  long long v31 = *(_OWORD *)(v29 + 16);
  v39[0] = *(_OWORD *)v29;
  v39[1] = v31;
  uint64_t v40 = v30;
  char v33 = v32 & 1;
  outlined retain of Image.Resolved((uint64_t)&v41);
  outlined retain of Image.Resolved((uint64_t)&v41);
  swift_bridgeObjectRetain();
  outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v38, v15 & 1, v23, v28, (uint64_t)v39, v33, v16, v18, v19, v20, v21, v25, v26);
  outlined release of ViewTransform((uint64_t)v39);
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_2461BE2A0;
    *(void *)(v34 + 32) = v16;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)v36);
  return outlined release of Image.Resolved((uint64_t)&v41);
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  char v27;
  char v28;
  uint64_t v29;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  uint64_t v40 = *MEMORY[0x263EF8340];
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v31 = *(_OWORD *)Value;
  long long v4 = *(void *)(Value + 16);
  long long v5 = *(void *)(Value + 24);
  long long v6 = *(unsigned char *)(Value + 32);
  long long v7 = *(unsigned char *)(Value + 33);
  long long v8 = *(void *)AGGraphGetValue();
  long long v10 = v3 | v9;
  long long v11 = *(void *)(v0 + 24);
  char v32 = v31;
  char v33 = v4;
  uint64_t v34 = v5;
  double v35 = v6;
  double v36 = v7;
  double v37 = v8;
  int v12 = (double *)AGGraphGetValue();
  uint64_t v13 = *v12;
  char v14 = v12[1];
  char v15 = v12[2];
  uint64_t v16 = v12[3];
  double v18 = v17 & 1;
  double v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  char v23 = v22 & 1;
  CGFloat v24 = AGGraphGetValue();
  double v25 = *(void *)(v24 + 32);
  double v26 = *(_OWORD *)(v24 + 16);
  v38[0] = *(_OWORD *)v24;
  v38[1] = v26;
  double v39 = v25;
  char v28 = v27 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v38);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v32, v10 & 1, v18, v23, (uint64_t)v38, v28, v11, v13, v14, v15, v16, v20, v21);
  outlined release of ViewTransform((uint64_t)v38);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_2461BE2A0;
    *(void *)(v29 + 32) = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  char v27;
  char v28;
  __int16 v29;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  uint64_t v34 = *MEMORY[0x263EF8340];
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v4 = *(void *)Value;
  long long v5 = *(unsigned __int8 *)(Value + 8);
  long long v6 = *(unsigned __int8 *)(Value + 9);
  long long v7 = (uint64_t *)AGGraphGetValue();
  long long v9 = v3 | v8;
  long long v10 = *v7;
  long long v11 = *(void *)(v0 + 24);
  int v12 = (double *)AGGraphGetValue();
  uint64_t v13 = *v12;
  char v14 = v12[1];
  char v15 = v12[2];
  uint64_t v16 = v12[3];
  double v18 = v17 & 1;
  double v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  char v23 = v22 & 1;
  CGFloat v24 = AGGraphGetValue();
  double v25 = *(void *)(v24 + 32);
  double v26 = *(_OWORD *)(v24 + 16);
  v32[0] = *(_OWORD *)v24;
  v32[1] = v26;
  char v33 = v25;
  char v28 = v27 & 1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v32);
  if (v6) {
    uint64_t v29 = 256;
  }
  else {
    uint64_t v29 = 0;
  }
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v29 | v5, v10, v9 & 1, v18, v23, (uint64_t)v32, v28, v13, v14, v15, v16, v20, v21, v11);
  outlined release of ViewTransform((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  long long v28;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  char v33 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v4 = *(void *)Value;
  long long v5 = *(void *)(Value + 8);
  long long v6 = *(unsigned char *)(Value + 16);
  long long v7 = (uint64_t *)AGGraphGetValue();
  long long v9 = v3 | v8;
  long long v10 = *v7;
  long long v11 = *(void *)(v0 + 24);
  int v12 = (double *)AGGraphGetValue();
  uint64_t v13 = *v12;
  char v14 = v12[1];
  char v15 = v12[2];
  uint64_t v16 = v12[3];
  double v18 = v17 & 1;
  double v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  char v23 = v22 & 1;
  CGFloat v24 = AGGraphGetValue();
  double v26 = v25;
  char v27 = *(void *)(v24 + 32);
  char v28 = *(_OWORD *)(v24 + 16);
  v31[0] = *(_OWORD *)v24;
  v31[1] = v28;
  char v32 = v27;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v31);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v5, v6, v10, v9 & 1, v18, v23, (uint64_t)v31, v13, v14, v15, v16, v20, v21, v26 & 1, v11);
  outlined release of ViewTransform((uint64_t)v31);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_2461BE2A0;
    *(void *)(v30 + 32) = v11;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  char v27;
  char v28;
  __int16 v29;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  long long v5 = *(void *)Value;
  long long v6 = *(unsigned __int8 *)(Value + 8);
  long long v7 = *(unsigned __int8 *)(Value + 9);
  long long v8 = (uint64_t *)AGGraphGetValue();
  long long v10 = v4 | v9;
  long long v11 = *v8;
  int v12 = (double *)AGGraphGetValue();
  uint64_t v13 = *v12;
  char v14 = v12[1];
  char v15 = v12[2];
  uint64_t v16 = v12[3];
  double v18 = v17 & 1;
  double v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  char v23 = v22 & 1;
  CGFloat v24 = AGGraphGetValue();
  double v25 = *(void *)(v24 + 32);
  double v26 = *(_OWORD *)(v24 + 16);
  v32[0] = *(_OWORD *)v24;
  v32[1] = v26;
  char v33 = v25;
  char v28 = v27 & 1;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v32);
  if (v7) {
    uint64_t v29 = 256;
  }
  else {
    uint64_t v29 = 0;
  }
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v5, v29 | v6, v11, v10 & 1, v18, v23, (uint64_t)v32, v28, v13, v14, v15, v16, v20, v21, v1);
  outlined release of ViewTransform((uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *Value;
  char v3;
  char v4;
  int v5;
  int v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  char v17;
  double *v18;
  double v19;
  double v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  char v26;
  char v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  double v36 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  long long v4 = v3;
  char v33 = *Value;
  long long v5 = Value[1];
  long long v6 = Value[2];
  long long v7 = (uint64_t *)AGGraphGetValue();
  long long v9 = v4 | v8;
  long long v10 = *v7;
  long long v11 = (double *)AGGraphGetValue();
  int v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = v11[2];
  char v15 = v11[3];
  uint64_t v17 = v16 & 1;
  double v18 = (double *)AGGraphGetValue();
  double v19 = *v18;
  double v20 = v18[1];
  char v22 = v21 & 1;
  char v23 = AGGraphGetValue();
  CGFloat v24 = *(void *)(v23 + 32);
  double v25 = *(_OWORD *)(v23 + 16);
  v34[0] = *(_OWORD *)v23;
  v34[1] = v25;
  double v35 = v24;
  char v27 = v26 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v34);
  if (v5) {
    char v28 = 256;
  }
  else {
    char v28 = 0;
  }
  uint64_t v29 = v28 | v33;
  if (v6) {
    uint64_t v30 = 0x10000;
  }
  else {
    uint64_t v30 = 0;
  }
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v29 | v30, v10, v9 & 1, v17, v22, (uint64_t)v34, v27, v1, v12, v13, v14, v15, v19, v20);
  outlined release of ViewTransform((uint64_t)v34);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  double *v19;
  double v20;
  double v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  char v27;
  char v28;
  uint64_t v29;
  char v31;
  char v32;
  uint64_t v33;
  void v34[4];
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  long long v41 = *MEMORY[0x263EF8340];
  char v33 = *(void *)(v0 + 24);
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v4 = *(void *)Value;
  long long v5 = *(void *)(Value + 8);
  long long v6 = *(void *)(Value + 16);
  long long v7 = *(void *)(Value + 24);
  long long v8 = *(unsigned char *)(Value + 32);
  long long v9 = *(unsigned char *)(Value + 33);
  long long v10 = *(unsigned char *)(Value + 34);
  long long v11 = *(void *)AGGraphGetValue();
  char v32 = v3 | v12;
  v34[0] = v4;
  v34[1] = v5;
  uint64_t v34[2] = v6;
  v34[3] = v7;
  double v35 = v8;
  double v36 = v9;
  double v37 = v10;
  double v38 = v11;
  uint64_t v13 = (double *)AGGraphGetValue();
  char v14 = *v13;
  char v15 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v17 = v13[3];
  long long v31 = v18 & 1;
  double v19 = (double *)AGGraphGetValue();
  double v20 = *v19;
  double v21 = v19[1];
  char v23 = v22 & 1;
  CGFloat v24 = AGGraphGetValue();
  double v25 = *(void *)(v24 + 32);
  double v26 = *(_OWORD *)(v24 + 16);
  v39[0] = *(_OWORD *)v24;
  v39[1] = v26;
  uint64_t v40 = v25;
  char v28 = v27 & 1;
  outlined copy of Path.Storage(v4, v5, v6, v7, v8);
  outlined copy of Path.Storage(v4, v5, v6, v7, v8);
  outlined copy of Path.Storage(v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v34, v32 & 1, v31, v23, (uint64_t)v39, v28, v33, v14, v15, v16, v17, v20, v21);
  outlined release of ViewTransform((uint64_t)v39);
  outlined consume of Path.Storage(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_2461BE2A0;
    *(void *)(v29 + 32) = v33;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  outlined consume of Path.Storage(v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  return outlined consume of Path.Storage(v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  char v29;
  uint64_t v30;
  long long v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  long long v42 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  char v32 = *(_OWORD *)Value;
  long long v5 = *(void *)(Value + 16);
  long long v6 = *(void *)(Value + 24);
  long long v7 = *(unsigned char *)(Value + 32);
  long long v8 = *(unsigned char *)(Value + 33);
  long long v9 = *(unsigned char *)(Value + 34);
  long long v10 = *(void *)AGGraphGetValue();
  int v12 = v4 | v11;
  char v33 = v32;
  uint64_t v34 = v5;
  double v35 = v6;
  double v36 = v7;
  double v37 = v8;
  double v38 = v9;
  uint64_t v13 = v1;
  double v39 = v10;
  char v14 = (double *)AGGraphGetValue();
  char v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  double v18 = v14[3];
  double v20 = v19 & 1;
  double v21 = (double *)AGGraphGetValue();
  char v22 = *v21;
  char v23 = v21[1];
  double v25 = v24 & 1;
  double v26 = AGGraphGetValue();
  char v27 = *(void *)(v26 + 32);
  char v28 = *(_OWORD *)(v26 + 16);
  v40[0] = *(_OWORD *)v26;
  v40[1] = v28;
  long long v41 = v27;
  LOBYTE(v1) = v29 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v40);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v33, v12 & 1, v20, v25, (uint64_t)v40, v1, v13, v15, v16, v17, v18, v22, v23);
  outlined release of ViewTransform((uint64_t)v40);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_2461BE2A0;
    *(void *)(v30 + 32) = v13;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  char v29;
  char v30;
  uint64_t v31;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  long long v44 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  char v33 = *(_OWORD *)Value;
  long long v5 = *(void *)(Value + 16);
  long long v6 = *(void *)(Value + 24);
  long long v7 = *(unsigned char *)(Value + 32);
  long long v8 = *(void *)(Value + 40);
  long long v9 = *(unsigned char *)(Value + 48);
  long long v10 = *(unsigned char *)(Value + 49);
  long long v11 = *(void *)AGGraphGetValue();
  uint64_t v13 = v4 | v12;
  uint64_t v34 = v33;
  double v35 = v5;
  double v36 = v6;
  double v37 = v7;
  double v38 = v8;
  double v39 = v9;
  uint64_t v40 = v10;
  long long v41 = v11;
  char v14 = (double *)AGGraphGetValue();
  char v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  double v18 = v14[3];
  double v20 = v19 & 1;
  double v21 = (double *)AGGraphGetValue();
  char v22 = *v21;
  char v23 = v21[1];
  double v25 = v24 & 1;
  double v26 = AGGraphGetValue();
  char v27 = *(void *)(v26 + 32);
  char v28 = *(_OWORD *)(v26 + 16);
  v42[0] = *(_OWORD *)v26;
  v42[1] = v28;
  long long v43 = v27;
  uint64_t v30 = v29 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v42);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)&v34, v13 & 1, v20, v25, (uint64_t)v42, v30, v1, v15, v16, v17, v18, v22, v23);
  outlined release of ViewTransform((uint64_t)v42);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  double v5;
  double v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  char v11;
  char v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  char v20;
  double *v21;
  double v22;
  double v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  char v29;
  char v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  double v38 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  long long v5 = *(double *)Value;
  long long v6 = *(double *)(Value + 8);
  long long v7 = *(unsigned __int8 *)(Value + 16);
  long long v8 = *(unsigned __int8 *)(Value + 17);
  long long v9 = *(unsigned __int8 *)(Value + 18);
  long long v10 = (uint64_t *)AGGraphGetValue();
  int v12 = v4 | v11;
  uint64_t v13 = *v10;
  char v14 = (double *)AGGraphGetValue();
  char v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  double v18 = v14[3];
  double v20 = v19 & 1;
  double v21 = (double *)AGGraphGetValue();
  char v22 = *v21;
  char v23 = v21[1];
  double v25 = v24 & 1;
  double v26 = AGGraphGetValue();
  char v27 = *(void *)(v26 + 32);
  char v28 = *(_OWORD *)(v26 + 16);
  v36[0] = *(_OWORD *)v26;
  v36[1] = v28;
  double v37 = v27;
  uint64_t v30 = v29 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v36);
  if (v8) {
    long long v31 = 256;
  }
  else {
    long long v31 = 0;
  }
  char v32 = v31 | v7;
  if (v9) {
    char v33 = 0x10000;
  }
  else {
    char v33 = 0;
  }
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v32 | v33, v13, v12 & 1, v20, v25, (uint64_t)v36, v30, v1, v5, v6, v15, v16, v17, v18, v22, v23);
  outlined release of ViewTransform((uint64_t)v36);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_2461BE2A0;
    *(void *)(v34 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  double *v22;
  double v23;
  double v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  char v30;
  uint64_t v31;
  void v33[2];
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;

  long long v41 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  long long v5 = *(void *)Value;
  long long v6 = *(void *)(Value + 8);
  long long v7 = *(unsigned char *)(Value + 16);
  long long v8 = *(void *)(Value + 24);
  long long v9 = *(unsigned char *)(Value + 32);
  long long v10 = *(unsigned char *)(Value + 33);
  long long v11 = *(void *)AGGraphGetValue();
  uint64_t v13 = v4 | v12;
  v33[0] = v5;
  v33[1] = v6;
  uint64_t v34 = v7;
  double v35 = v8;
  double v36 = v9;
  double v37 = v10;
  char v14 = v1;
  double v38 = v11;
  char v15 = (double *)AGGraphGetValue();
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  double v18 = v15[2];
  double v19 = v15[3];
  double v21 = v20 & 1;
  char v22 = (double *)AGGraphGetValue();
  char v23 = *v22;
  CGFloat v24 = v22[1];
  double v26 = v25 & 1;
  char v27 = AGGraphGetValue();
  char v28 = *(void *)(v27 + 32);
  uint64_t v29 = *(_OWORD *)(v27 + 16);
  v39[0] = *(_OWORD *)v27;
  v39[1] = v29;
  uint64_t v40 = v28;
  LOBYTE(v1) = v30 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v39);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v33, v13 & 1, v21, v26, (uint64_t)v39, v1, v14, v16, v17, v18, v19, v23, v24);
  outlined release of ViewTransform((uint64_t)v39);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v14;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Value;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double *v20;
  double v21;
  double v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  char v28;
  char v29;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  long long v42 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
  uint64_t Value = AGGraphGetValue();
  long long v4 = v3;
  long long v5 = *(void *)Value;
  char v32 = *(_OWORD *)(Value + 8);
  long long v6 = *(void *)(Value + 24);
  long long v7 = *(void *)(Value + 32);
  long long v8 = *(unsigned char *)(Value + 40);
  long long v9 = *(unsigned char *)(Value + 41);
  long long v10 = *(void *)AGGraphGetValue();
  int v12 = v4 | v11;
  char v33 = v5;
  uint64_t v34 = v32;
  double v35 = v6;
  double v36 = v7;
  double v37 = v8;
  double v38 = v9;
  double v39 = v10;
  uint64_t v13 = (double *)AGGraphGetValue();
  char v14 = *v13;
  char v15 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v17 = v13[3];
  double v19 = v18 & 1;
  double v20 = (double *)AGGraphGetValue();
  double v21 = *v20;
  char v22 = v20[1];
  CGFloat v24 = v23 & 1;
  double v25 = AGGraphGetValue();
  double v26 = *(void *)(v25 + 32);
  char v27 = *(_OWORD *)(v25 + 16);
  v40[0] = *(_OWORD *)v25;
  v40[1] = v27;
  long long v41 = v26;
  uint64_t v29 = v28 & 1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v40);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(&v33, v12 & 1, v19, v24, (uint64_t)v40, v29, v1, v14, v15, v16, v17, v21, v22);
  outlined release of ViewTransform((uint64_t)v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    long long v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  char v21;
  double *v22;
  double v23;
  double v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  char v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void v38[3];
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;

  long long v50 = *MEMORY[0x263EF8340];
  double v36 = *(void *)(v0 + 24);
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  long long v4 = *(void *)(Value + 16);
  uint64_t v34 = *(void *)(Value + 8);
  double v35 = *(void *)Value;
  long long v5 = *(unsigned char *)(Value + 24);
  long long v6 = *(void *)(Value + 32);
  long long v7 = *(unsigned char *)(Value + 40);
  long long v8 = *(void *)(Value + 48);
  long long v9 = *(unsigned char *)(Value + 56);
  long long v10 = *(unsigned char *)(Value + 57);
  long long v11 = *(unsigned char *)(Value + 58);
  int v12 = *(unsigned char *)(Value + 59);
  uint64_t v13 = *(void *)AGGraphGetValue();
  double v37 = v3 | v14;
  v38[0] = v35;
  v38[1] = v34;
  v38[2] = v4;
  double v39 = v5;
  uint64_t v40 = v6;
  long long v41 = v7;
  long long v42 = v8;
  long long v43 = v9;
  long long v44 = v10;
  long long v45 = v11;
  long long v46 = v12;
  long long v47 = v13;
  char v15 = (double *)AGGraphGetValue();
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  double v18 = v15[2];
  double v19 = v15[3];
  double v21 = v20 & 1;
  char v22 = (double *)AGGraphGetValue();
  char v23 = *v22;
  CGFloat v24 = v22[1];
  double v26 = v25 & 1;
  char v27 = AGGraphGetValue();
  char v28 = *(void *)(v27 + 32);
  uint64_t v29 = *(_OWORD *)(v27 + 16);
  v48[0] = *(_OWORD *)v27;
  v48[1] = v29;
  long long v49 = v28;
  long long v31 = v30 & 1;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v48);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)((uint64_t)v38, v37 & 1, v21, v26, (uint64_t)v48, v31, v36, v16, v17, v18, v19, v23, v24);
  outlined release of ViewTransform((uint64_t)v48);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    char v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_2461BE2A0;
    *(void *)(v33 + 32) = v36;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(long long *a1, char a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v16 = *(void *)&a13;
  uint64_t v17 = *(void *)&a12;
  long long v20 = a1[9];
  long long v65 = a1[8];
  long long v66 = v20;
  long long v21 = a1[11];
  long long v67 = a1[10];
  long long v68 = v21;
  long long v22 = a1[5];
  long long v61 = a1[4];
  long long v62 = v22;
  long long v23 = a1[7];
  long long v63 = a1[6];
  long long v64 = v23;
  long long v24 = a1[1];
  long long v57 = *a1;
  long long v58 = v24;
  long long v25 = a1[3];
  long long v59 = a1[2];
  long long v60 = v25;
  uint64_t v26 = *(void *)(v13 + 208);
  uint64_t v27 = *(void *)(v13 + 216);
  uint64_t v28 = *(void *)(v13 + 224);
  double v29 = *(double *)(v13 + 232);
  double v30 = *(double *)(v13 + 240);
  double v41 = v30;
  double v42 = v29;
  if ((a6 & 1) == 0 && (a4 & 1) == 0)
  {
    double v31 = a8;
    double v32 = a9;
    swift_retain();
    int v33 = 0;
    uint64_t v17 = v27;
    uint64_t v16 = v28;
    uint64_t v34 = v26;
    if ((a3 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v31 = a8;
  double v32 = a9;
  uint64_t v34 = *(void *)a5;
  double v35 = *(double *)(a5 + 24);
  double v36 = *(double *)(a5 + 32);
  double v37 = *(double *)(a5 + 8);
  double v38 = *(double *)(a5 + 16);
  *(void *)(v13 + 208) = *(void *)a5;
  double v29 = v35 - (a12 - v37);
  double v30 = v36 - (a13 - v38);
  *(double *)(v13 + 232) = v29;
  *(double *)(v13 + 240) = v30;
  *(double *)(v13 + 216) = a12;
  *(double *)(v13 + 224) = a13;
  outlined retain of ViewTransform(a5);
  int v33 = 4;
  if (a3)
  {
LABEL_6:
    *(double *)uint64_t v13 = v31;
    *(double *)(v13 + 8) = v32;
    v33 |= 2u;
  }
LABEL_7:
  if ((a2 & 1) != 0
    || (outlined init with take of ShapeStyledResponderData<Image.Resolved>?(v13 + 16, (uint64_t)v44),
        outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v44, (uint64_t)&v45),
        _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOg((uint64_t)&v45) == 1))
  {
    outlined init with take of ShapeStyledResponderData<Image.Resolved>?(v13 + 16, (uint64_t)v44);
    outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
    outlined release of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v44);
    long long v53 = v65;
    long long v54 = v66;
    long long v55 = v67;
    long long v56 = v68;
    long long v49 = v61;
    long long v50 = v62;
    long long v51 = v63;
    long long v52 = v64;
    long long v45 = v57;
    long long v46 = v58;
    long long v47 = v59;
    long long v48 = v60;
    _ViewInputs.base.modify(&v45, v39);
    outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)&v45, v13 + 16);
    LOBYTE(v33) = v33 | 1;
  }
  else if (!v33)
  {
    return swift_release();
  }
  char v43 = v33;
  *(void *)&long long v45 = v26;
  *((void *)&v45 + 1) = v27;
  *(void *)&long long v46 = v28;
  *((double *)&v46 + 1) = v42;
  *(double *)&long long v47 = v41;
  v44[0] = v34;
  v44[1] = v17;
  v44[2] = v16;
  *(double *)&v44[3] = v29;
  *(double *)&v44[4] = v30;
  outlined retain of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a7, &v43, (uint64_t *)&v45, v44);
  swift_release();
  outlined release of ShapeStyledResponderData<Image.Resolved>((uint64_t)a1);
  return swift_release();
}

uint64_t specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  unint64_t v144 = __PAIR64__(a3, a1);
  uint64_t v9 = MEMORY[0x263F8EE78];
  v164[1] = *MEMORY[0x263EF8340];
  uint64_t v145 = MEMORY[0x263F8EE78];
  int v10 = *MEMORY[0x263F288F8];
  LODWORD(v146) = 0;
  HIDWORD(v146) = *MEMORY[0x263F288F8];
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v147 = v11;
  int v148 = *(_DWORD *)(a2 + 56);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_36;
  }
  int v13 = a6;
  char v15 = (ValueMetadata **)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 16);
  while (*v15 != &type metadata for DisplayList.Key)
  {
    v15 += 2;
    if (!--v16) {
      goto LABEL_36;
    }
  }
  unint64_t v128 = HIDWORD(a6);
  unint64_t v131 = HIDWORD(a5);
  unsigned int v134 = a5;
  Swift::UInt32 v137 = ++lastIdentity;
  long long v17 = *(_OWORD *)(a2 + 32);
  long long v162 = *(_OWORD *)(a2 + 16);
  long long v163 = v17;
  long long v161 = *(_OWORD *)a2;
  char v18 = BYTE4(v17);
  if ((WORD2(v17) & 0x100) != 0)
  {
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    uint64_t result = AGWeakAttributeGetAttribute();
    if (result == v10)
    {
      __break(1u);
      return result;
    }
    LODWORD(v149) = v137;
    uint64_t v106 = (void (*)(unsigned char *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v149);
    v106(v156, 0);
  }
  uint64_t v140 = v11;
  long long v142 = a7;
  int v19 = *(_DWORD *)(a2 + 72);
  swift_retain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v21 = v162;
  long long v22 = (unsigned int *)(v162 + 16);
  swift_beginAccess();
  int v125 = OffsetAttribute2;
  if ((v18 & 0x20) != 0)
  {
    uint64_t v113 = a4;
    uint64_t v122 = *(void *)a2;
    int v24 = *(_DWORD *)(a2 + 8);
    int v25 = *(_DWORD *)(a2 + 24);
    uint64_t v26 = *(void *)(a2 + 32);
    uint64_t v116 = *(void *)(a2 + 40);
    uint64_t v118 = *(void *)(a2 + 16);
    uint64_t v114 = *(void *)(a2 + 48);
    uint64_t v27 = *(void *)(a2 + 56);
    uint64_t v109 = *(void *)(a2 + 72);
    uint64_t v111 = *(void *)(a2 + 64);
    int v107 = *(_DWORD *)(a2 + 80);
    long long v28 = *(_OWORD *)(a2 + 48);
    long long v157 = *(_OWORD *)(a2 + 32);
    long long v158 = v28;
    long long v159 = *(_OWORD *)(a2 + 64);
    int v160 = *(_DWORD *)(a2 + 80);
    long long v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v156 = *(_OWORD *)a2;
    *(_OWORD *)&v156[16] = v29;
    outlined retain of _ViewInputs(a2);
    int v30 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v32 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v21 + 81) & 1) == 0
      && v111 == *(_DWORD *)(v21 + 32)
      && v109 == *(_DWORD *)(v21 + 36)
      && v32 == *(_DWORD *)(v21 + 40)
      && v24 == *(_DWORD *)(v21 + 44)
      && v30 == *(_DWORD *)(v21 + 48)
      && v25 == *(_DWORD *)(v21 + 52))
    {
      if ((*(unsigned char *)(v21 + 72) & 1) == 0)
      {
        int v33 = *(_DWORD *)(v21 + 68);
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)uint64_t v156 = v122;
      *(_DWORD *)&v156[8] = v24;
      *(void *)&v156[16] = v118;
      *(_DWORD *)&v156[24] = v25;
      *(_DWORD *)&v156[28] = v30;
      *(void *)&long long v157 = v26;
      *((void *)&v157 + 1) = v116;
      *(void *)&long long v158 = v114;
      *((void *)&v158 + 1) = v27;
      *(void *)&long long v159 = v111;
      *((void *)&v159 + 1) = v109;
      int v160 = v107;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v156, v32, (uint64_t)&v149);
      int v33 = v152;
      uint64_t v34 = v153;
      unsigned __int8 v35 = v155;
      unint64_t v36 = v151 | ((unint64_t)v152 << 32);
      unint64_t v37 = v153 | ((unint64_t)v154 << 32);
      long long v38 = v150;
      *(_OWORD *)(v21 + 32) = v149;
      *(_OWORD *)(v21 + 48) = v38;
      *(void *)(v21 + 64) = v36;
      *(void *)(v21 + 72) = v37;
      *(_WORD *)(v21 + 80) = v35;
      if (v34 != 1) {
        goto LABEL_20;
      }
    }
    int v33 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v21 + 68) = v33;
    *(unsigned char *)(v21 + 72) = 0;
LABEL_20:
    int v121 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v39 = *(_DWORD *)(a2 + 8);
    uint64_t v40 = *(void *)(a2 + 16);
    int v41 = *(_DWORD *)(a2 + 24);
    uint64_t v42 = *(void *)(a2 + 32);
    uint64_t v117 = *(void *)(a2 + 40);
    uint64_t v119 = *(void *)a2;
    uint64_t v115 = *(void *)(a2 + 48);
    uint64_t v43 = *(void *)(a2 + 56);
    uint64_t v110 = *(void *)(a2 + 72);
    uint64_t v112 = *(void *)(a2 + 64);
    int v108 = *(_DWORD *)(a2 + 80);
    long long v44 = *(_OWORD *)(a2 + 48);
    long long v157 = *(_OWORD *)(a2 + 32);
    long long v158 = v44;
    long long v159 = *(_OWORD *)(a2 + 64);
    int v160 = *(_DWORD *)(a2 + 80);
    long long v45 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v156 = *(_OWORD *)a2;
    *(_OWORD *)&v156[16] = v45;
    outlined retain of _ViewInputs(a2);
    int v46 = _ViewInputs.geometryTransaction()();
    uint64_t v47 = swift_getKeyPath();
    int v48 = specialized CachedEnvironment.attribute<A>(keyPath:)(v47);
    swift_release();
    int v49 = v41;
    a4 = v113;
    if ((*(unsigned char *)(v21 + 81) & 1) == 0
      && v112 == *(_DWORD *)(v21 + 32)
      && v110 == *(_DWORD *)(v21 + 36)
      && v48 == *(_DWORD *)(v21 + 40)
      && v39 == *(_DWORD *)(v21 + 44)
      && v46 == *(_DWORD *)(v21 + 48)
      && v49 == *(_DWORD *)(v21 + 52))
    {
      if ((*(unsigned char *)(v21 + 64) & 1) == 0)
      {
        LODWORD(v23) = *(_DWORD *)(v21 + 60);
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)uint64_t v156 = v119;
      *(_DWORD *)&v156[8] = v39;
      *(void *)&v156[16] = v40;
      *(_DWORD *)&v156[24] = v49;
      *(_DWORD *)&v156[28] = v46;
      *(void *)&long long v157 = v42;
      *((void *)&v157 + 1) = v117;
      *(void *)&long long v158 = v115;
      *((void *)&v158 + 1) = v43;
      *(void *)&long long v159 = v112;
      *((void *)&v159 + 1) = v110;
      int v160 = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v156, v48, (uint64_t)&v149);
      long long v50 = v150;
      uint64_t v51 = v151;
      unsigned __int8 v52 = v155;
      unint64_t v53 = v151 | ((unint64_t)v152 << 32);
      unint64_t v54 = v153 | ((unint64_t)v154 << 32);
      *(_OWORD *)(v21 + 32) = v149;
      *(_OWORD *)(v21 + 48) = v50;
      *(void *)(v21 + 64) = v53;
      *(void *)(v21 + 72) = v54;
      *(_WORD *)(v21 + 80) = v52;
      if (v51 != 1)
      {
        uint64_t v23 = HIDWORD(*((void *)&v50 + 1));
LABEL_31:
        long long v22 = (unsigned int *)(v21 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_32;
      }
    }
    LODWORD(v23) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v21 + 60) = v23;
    *(unsigned char *)(v21 + 64) = 0;
    goto LABEL_31;
  }
  int v121 = v19;
  LODWORD(v23) = *(_DWORD *)(a2 + 64);
LABEL_32:
  int v55 = v13;
  swift_endAccess();
  unsigned int v56 = *v22;
  uint64_t v57 = v161;
  v164[0] = v161;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined retain of ViewTransform((uint64_t)v164);
  uint64_t v58 = specialized find<A>(_:key:)(v57);
  uint64_t v59 = a4;
  if (v58) {
    char v60 = *(unsigned char *)(v58 + 72);
  }
  else {
    char v60 = 0;
  }
  unsigned int v61 = *(_DWORD *)(a2 + 68);
  unsigned int v62 = *(_DWORD *)(a2 + 60);
  unsigned int v63 = *(_DWORD *)(a2 + 76);
  outlined release of ViewTransform((uint64_t)v164);
  outlined release of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs(a2);
  *(void *)uint64_t v156 = v59;
  *(_DWORD *)&v156[8] = v137;
  *(void *)&v156[12] = v144;
  *(_DWORD *)&v156[20] = v125;
  *(_DWORD *)&v156[24] = v121;
  *(_DWORD *)&v156[28] = v23;
  *(void *)&long long v157 = __PAIR64__(v62, v61);
  *((void *)&v157 + 1) = __PAIR64__(v63, v56);
  LOBYTE(v158) = v60;
  *(void *)((char *)&v158 + 4) = __PAIR64__(v131, v134);
  HIDWORD(v158) = v55;
  LODWORD(v159) = v128;
  WORD2(v159) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for ShapeStyledDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
  lazy protocol witness table accessor for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>();
  unsigned int v64 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v156[0] = 0;
  PreferencesOutputs.subscript.setter(v64, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  uint64_t v11 = v140;
  a7 = v142;
  uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_36:
  uint64_t v65 = *(void *)(a2 + 16);
  int v66 = *(_DWORD *)(a2 + 36);
  swift_beginAccess();
  if ((v66 & 0x20) != 0)
  {
    uint64_t v141 = v11;
    long long v143 = a7;
    int v68 = *(_DWORD *)(a2 + 8);
    uint64_t v135 = *(void *)(a2 + 16);
    uint64_t v138 = *(void *)a2;
    int v69 = *(_DWORD *)(a2 + 24);
    uint64_t v70 = *(void *)(a2 + 32);
    uint64_t v71 = *(void *)(a2 + 48);
    uint64_t v133 = *(void *)(a2 + 40);
    uint64_t v72 = *(void *)(a2 + 56);
    uint64_t v126 = *(void *)(a2 + 72);
    uint64_t v129 = *(void *)(a2 + 64);
    int v123 = *(_DWORD *)(a2 + 80);
    long long v73 = *(_OWORD *)(a2 + 48);
    long long v157 = *(_OWORD *)(a2 + 32);
    long long v158 = v73;
    long long v159 = *(_OWORD *)(a2 + 64);
    int v160 = *(_DWORD *)(a2 + 80);
    long long v74 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v156 = *(_OWORD *)a2;
    *(_OWORD *)&v156[16] = v74;
    outlined retain of _ViewInputs(a2);
    int v75 = _ViewInputs.geometryTransaction()();
    uint64_t v76 = swift_getKeyPath();
    int v77 = specialized CachedEnvironment.attribute<A>(keyPath:)(v76);
    swift_release();
    if ((*(unsigned char *)(v65 + 81) & 1) == 0
      && v129 == *(_DWORD *)(v65 + 32)
      && v126 == *(_DWORD *)(v65 + 36)
      && v77 == *(_DWORD *)(v65 + 40)
      && v68 == *(_DWORD *)(v65 + 44)
      && v75 == *(_DWORD *)(v65 + 48)
      && v69 == *(_DWORD *)(v65 + 52))
    {
      if ((*(unsigned char *)(v65 + 72) & 1) == 0)
      {
        unsigned int v78 = *(_DWORD *)(v65 + 68);
LABEL_49:
        unsigned int v132 = v78;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v84 = *(_DWORD *)(a2 + 8);
        uint64_t v136 = *(void *)(a2 + 16);
        uint64_t v139 = *(void *)a2;
        int v85 = *(_DWORD *)(a2 + 24);
        uint64_t v86 = *(void *)(a2 + 32);
        uint64_t v87 = *(void *)(a2 + 48);
        uint64_t v130 = *(void *)(a2 + 40);
        uint64_t v88 = *(void *)(a2 + 56);
        uint64_t v124 = *(void *)(a2 + 72);
        uint64_t v127 = *(void *)(a2 + 64);
        int v120 = *(_DWORD *)(a2 + 80);
        long long v89 = *(_OWORD *)(a2 + 48);
        long long v157 = *(_OWORD *)(a2 + 32);
        long long v158 = v89;
        long long v159 = *(_OWORD *)(a2 + 64);
        int v160 = *(_DWORD *)(a2 + 80);
        long long v90 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v156 = *(_OWORD *)a2;
        *(_OWORD *)&v156[16] = v90;
        outlined retain of _ViewInputs(a2);
        int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v65 + 81) & 1) == 0
          && v127 == *(_DWORD *)(v65 + 32)
          && v124 == *(_DWORD *)(v65 + 36)
          && v93 == *(_DWORD *)(v65 + 40)
          && v84 == *(_DWORD *)(v65 + 44)
          && v91 == *(_DWORD *)(v65 + 48)
          && v85 == *(_DWORD *)(v65 + 52))
        {
          uint64_t v11 = v141;
          a7 = v143;
          uint64_t v9 = MEMORY[0x263F8EE78];
          if ((*(unsigned char *)(v65 + 64) & 1) == 0)
          {
            LODWORD(v67) = *(_DWORD *)(v65 + 60);
LABEL_61:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)uint64_t v156 = v139;
          *(_DWORD *)&v156[8] = v84;
          *(void *)&v156[16] = v136;
          *(_DWORD *)&v156[24] = v85;
          *(_DWORD *)&v156[28] = v91;
          *(void *)&long long v157 = v86;
          *((void *)&v157 + 1) = v130;
          *(void *)&long long v158 = v87;
          *((void *)&v158 + 1) = v88;
          *(void *)&long long v159 = v127;
          *((void *)&v159 + 1) = v124;
          int v160 = v120;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v156, v93, (uint64_t)&v149);
          long long v94 = v150;
          uint64_t v95 = v151;
          unsigned __int8 v96 = v155;
          unint64_t v97 = v151 | ((unint64_t)v152 << 32);
          unint64_t v98 = v153 | ((unint64_t)v154 << 32);
          *(_OWORD *)(v65 + 32) = v149;
          *(_OWORD *)(v65 + 48) = v94;
          *(void *)(v65 + 64) = v97;
          *(void *)(v65 + 72) = v98;
          *(_WORD *)(v65 + 80) = v96;
          uint64_t v11 = v141;
          a7 = v143;
          uint64_t v9 = MEMORY[0x263F8EE78];
          if (v95 != 1)
          {
            uint64_t v67 = HIDWORD(*((void *)&v94 + 1));
            goto LABEL_61;
          }
        }
        LODWORD(v67) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v65 + 60) = v67;
        *(unsigned char *)(v65 + 64) = 0;
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)uint64_t v156 = v138;
      *(_DWORD *)&v156[8] = v68;
      *(void *)&v156[16] = v135;
      *(_DWORD *)&v156[24] = v69;
      *(_DWORD *)&v156[28] = v75;
      *(void *)&long long v157 = v70;
      *((void *)&v157 + 1) = v133;
      *(void *)&long long v158 = v71;
      *((void *)&v158 + 1) = v72;
      *(void *)&long long v159 = v129;
      *((void *)&v159 + 1) = v126;
      int v160 = v123;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(v156, v77, (uint64_t)&v149);
      unsigned int v78 = v152;
      uint64_t v79 = v153;
      unsigned __int8 v80 = v155;
      unint64_t v81 = v151 | ((unint64_t)v152 << 32);
      unint64_t v82 = v153 | ((unint64_t)v154 << 32);
      long long v83 = v150;
      *(_OWORD *)(v65 + 32) = v149;
      *(_OWORD *)(v65 + 48) = v83;
      *(void *)(v65 + 64) = v81;
      *(void *)(v65 + 72) = v82;
      *(_WORD *)(v65 + 80) = v80;
      if (v79 != 1) {
        goto LABEL_49;
      }
    }
    unsigned int v78 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v65 + 68) = v78;
    *(unsigned char *)(v65 + 72) = 0;
    goto LABEL_49;
  }
  unsigned int v132 = *(_DWORD *)(a2 + 72);
  LODWORD(v67) = *(_DWORD *)(a2 + 64);
LABEL_62:
  swift_endAccess();
  int v99 = *(_DWORD *)(a2 + 60);
  type metadata accessor for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>();
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 48) = 0;
  *(void *)(v100 + 40) = 0;
  _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOi0_(v156);
  outlined init with take of ShapeStyledResponderData<Image.Resolved>?((uint64_t)v156, v100 + 56);
  *(_OWORD *)(v100 + 248) = 0u;
  *(_OWORD *)(v100 + 264) = 0u;
  *(void *)(v100 + 280) = 0;
  *(void *)(v100 + 288) = v9;
  *(void *)(v100 + 24) = 0;
  *(_OWORD *)(v100 + 296) = 0u;
  *(_OWORD *)(v100 + 312) = 0u;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v101 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v101 + 200);
  uint64_t v102 = *(void *)(v101 + 208);
  swift_release();
  swift_beginAccess();
  *(void *)(v100 + 24) = v102;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  if (v12)
  {
    long long v103 = (ValueMetadata **)(v11 + 32);
    while (*v103 != &type metadata for ViewRespondersKey)
    {
      v103 += 2;
      if (!--v12) {
        goto LABEL_68;
      }
    }
    *(void *)&long long v149 = v144;
    *((void *)&v149 + 1) = __PAIR64__(v67, v132);
    LODWORD(v150) = v99;
    *((void *)&v150 + 1) = v100;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v147);
    type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for ShapeStyledResponderFilter<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>();
    swift_retain();
    unsigned int v104 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v149) = 0;
    PreferencesOutputs.subscript.setter(v104, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v147);
  }
LABEL_68:
  uint64_t result = swift_release();
  *a7 = v145;
  a7[1] = v146;
  return result;
}

uint64_t outlined init with take of ShapeStyledResponderData<Image.Resolved>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ShapeStyledResponderData<Image.Resolved>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ShapeStyledResponderData<Image.Resolved>?()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>?)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<Image.Resolved> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

double _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<Image.Resolved> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>()
{
  if (!lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledResponderData<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderData);
    unint64_t v0 = type metadata accessor for LeafViewResponder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafViewResponder<ShapeStyledResponderData<Image.Resolved>>);
    }
  }
}

uint64_t outlined retain of ShapeStyledResponderData<Image.Resolved>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  long long v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  id v6 = v5;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ShapeStyledResponderData<Image.Resolved>?(uint64_t a1)
{
  outlined consume of ShapeStyledResponderData<Image.Resolved>?(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void **)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184));
  return a1;
}

void outlined consume of ShapeStyledResponderData<Image.Resolved>?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  if (a24)
  {
    outlined consume of GraphicsImage.Contents?(a1, a2);
    outlined consume of AccessibilityImageLabel?(a14, a15, a16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
}

uint64_t _s7SwiftUI24ShapeStyledResponderDataVyAA5ImageVAAE8ResolvedVGSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 184);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t StyledTextResponder.__deallocating_deinit()
{
  StyledTextResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t StyledTextResponder.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  long long v1 = *(_OWORD *)(v0 + 224);
  v6[4] = *(_OWORD *)(v0 + 208);
  v6[5] = v1;
  long long v2 = *(_OWORD *)(v0 + 256);
  v6[6] = *(_OWORD *)(v0 + 240);
  v6[7] = v2;
  long long v3 = *(_OWORD *)(v0 + 160);
  v6[0] = *(_OWORD *)(v0 + 144);
  v6[1] = v3;
  long long v4 = *(_OWORD *)(v0 + 192);
  _OWORD v6[2] = *(_OWORD *)(v0 + 176);
  v6[3] = v4;
  outlined release of ContentResponderHelper<ShapeStyledResponderData<StyledTextContentView>>((uint64_t)v6);

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

Swift::Void __swiftcall StyledTextResponderFilter.updateValue()()
{
  uint64_t v1 = *v0;
  StyledTextResponder.update()();
  _s10Foundation3URLVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for AnyGesture<()>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_2461BE2A0;
    *(void *)(v2 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall StyledTextResponder.update()()
{
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  char v6 = *(unsigned char *)(Value + 16);
  long long v7 = (uint64_t *)AGGraphGetValue();
  char v9 = v3 | v8;
  uint64_t v10 = *v7;
  uint64_t v11 = (double *)AGGraphGetValue();
  double v12 = *v11;
  double v13 = v11[1];
  double v14 = v11[2];
  double v15 = v11[3];
  char v17 = v16 & 1;
  char v18 = (double *)AGGraphGetValue();
  double v19 = *v18;
  double v20 = v18[1];
  char v22 = v21 & 1;
  uint64_t v23 = AGGraphGetValue();
  char v25 = v24;
  uint64_t v26 = *(void *)(v23 + 32);
  long long v27 = *(_OWORD *)(v23 + 16);
  v28[0] = *(_OWORD *)v23;
  v28[1] = v27;
  uint64_t v29 = v26;
  swift_beginAccess();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v28);
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v5, v6, v10, v9 & 1, v17, v22, (uint64_t)v28, v12, v13, v14, v15, v19, v20, v25 & 1, v0);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  outlined release of ViewTransform((uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15, uint64_t a16)
{
  uint64_t v20 = *(void *)&a14;
  uint64_t v21 = *(void *)&a13;
  uint64_t v24 = *(void *)(v16 + 48);
  uint64_t v25 = *(void *)(v16 + 56);
  uint64_t v26 = *(void *)(v16 + 64);
  uint64_t v27 = *(void *)(v16 + 72);
  uint64_t v28 = *(void *)(v16 + 80);
  if ((a15 & 1) == 0 && (a7 & 1) == 0)
  {
    swift_retain();
    int v29 = 0;
    double v30 = *(double *)&v28;
    double v31 = *(double *)&v27;
    uint64_t v21 = v25;
    uint64_t v20 = v26;
    uint64_t v32 = v24;
    if ((a6 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v32 = *(void *)a8;
  double v33 = *(double *)(a8 + 24);
  double v34 = *(double *)(a8 + 32);
  double v35 = *(double *)(a8 + 8);
  double v36 = *(double *)(a8 + 16);
  *(void *)(v16 + 48) = *(void *)a8;
  double v31 = v33 - (a13 - v35);
  double v30 = v34 - (a14 - v36);
  *(double *)(v16 + 72) = v31;
  *(double *)(v16 + 80) = v30;
  *(double *)(v16 + 56) = a13;
  *(double *)(v16 + 64) = a14;
  outlined retain of ViewTransform(a8);
  int v29 = 4;
  if (a6)
  {
LABEL_6:
    *(double *)uint64_t v16 = a9;
    *(double *)(v16 + 8) = a10;
    v29 |= 2u;
  }
LABEL_7:
  uint64_t v37 = *(void *)(v16 + 16);
  if ((a5 & 1) != 0 || !v37)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined consume of ShapeStyledResponderData<StyledTextContentView>?(v37);
    *(void *)(v16 + 16) = a1;
    *(void *)(v16 + 24) = a2;
    *(void *)(v16 + 32) = a3 & 1;
    *(void *)(v16 + 40) = a4;
    LOBYTE(v29) = v29 | 1;
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v44[0] = v29;
    v43[0] = v24;
    v43[1] = v25;
    v43[2] = v26;
    v43[3] = v27;
    v43[4] = v28;
    v42[0] = v32;
    v42[1] = v21;
    v42[2] = v20;
    *(double *)&v42[3] = v31;
    *(double *)&v42[4] = v30;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a16, v44, v43, v42);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t outlined consume of ShapeStyledResponderData<StyledTextContentView>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized LeafResponderFilter.updateValue()()
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  specialized LeafResponderFilter.responder.getter();
  uint64_t Value = (float *)AGGraphGetValue();
  float v1 = Value[2];
  float v25 = Value[1];
  float v26 = *Value;
  float v2 = Value[3];
  char v4 = v3 & 1;
  uint64_t v5 = (double *)AGGraphGetValue();
  double v6 = *v5;
  double v7 = v5[1];
  double v8 = v5[2];
  double v9 = v5[3];
  char v11 = v10 & 1;
  double v12 = (double *)AGGraphGetValue();
  double v13 = *v12;
  double v14 = v12[1];
  char v16 = v15 & 1;
  uint64_t v17 = AGGraphGetValue();
  uint64_t v18 = *(void *)(v17 + 32);
  long long v19 = *(_OWORD *)(v17 + 16);
  v27[0] = *(_OWORD *)v17;
  v27[1] = v19;
  uint64_t v28 = v18;
  char v21 = v20 & 1;
  outlined retain of ViewTransform((uint64_t)v27);
  uint64_t v22 = specialized LeafResponderFilter.responder.getter();
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v4, v11, v16, (uint64_t)v27, v21, v22, v26, v25, v1, v2, v6, v7, v8, v9, v13, v14);
  swift_release();
  swift_release();
  outlined release of ViewTransform((uint64_t)v27);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2461BE2A0;
    *(void *)(v24 + 32) = specialized LeafResponderFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  char v0;
  char v1;
  double *Value;
  double v3;
  double v4;
  double v5;
  double v6;
  char v7;
  char v8;
  double *v9;
  double v10;
  double v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  specialized LeafResponderFilter.responder.getter();
  AGGraphGetValue();
  float v1 = v0 & 1;
  uint64_t Value = (double *)AGGraphGetValue();
  char v3 = *Value;
  char v4 = Value[1];
  uint64_t v5 = Value[2];
  double v6 = Value[3];
  double v8 = v7 & 1;
  double v9 = (double *)AGGraphGetValue();
  char v10 = *v9;
  char v11 = v9[1];
  double v13 = v12 & 1;
  double v14 = AGGraphGetValue();
  char v15 = *(void *)(v14 + 32);
  char v16 = *(_OWORD *)(v14 + 16);
  v22[0] = *(_OWORD *)v14;
  v22[1] = v16;
  uint64_t v23 = v15;
  uint64_t v18 = v17 & 1;
  outlined retain of ViewTransform((uint64_t)v22);
  long long v19 = specialized LeafResponderFilter.responder.getter();
  specialized ContentResponderHelper.update(data:size:position:transform:parent:)(v1, v8, v13, (uint64_t)v22, v18, v19, v3, v4, v5, v6, v10, v11);
  swift_release();
  swift_release();
  outlined release of ViewTransform((uint64_t)v22);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    char v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2A0;
    *(void *)(v21 + 32) = specialized LeafResponderFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized LeafResponderFilter.responder.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, (unint64_t *)&lazy cache variable for type metadata for LeafViewResponder<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(unsigned char *)(v1 + 72) = 1;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    uint64_t v2 = MEMORY[0x263F8EE78];
    *(void *)(v1 + 112) = 0;
    *(void *)(v1 + 120) = v2;
    *(void *)(v1 + 24) = 0;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    uint64_t v3 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x24C527E00](v3 + 200);
    uint64_t v4 = *(void *)(v3 + 208);
    swift_release();
    swift_beginAccess();
    *(void *)(v1 + 24) = v4;
    swift_unknownObjectWeakAssign();
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for LeafViewResponder<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafViewResponder);
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0;
    *(unsigned char *)(v1 + 56) = 1;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    uint64_t v2 = MEMORY[0x263F8EE78];
    *(void *)(v1 + 96) = 0;
    *(void *)(v1 + 104) = v2;
    *(void *)(v1 + 24) = 0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    swift_unknownObjectWeakInit();
    swift_weakInit();
    swift_retain();
    uint64_t v3 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    MEMORY[0x24C527E00](v3 + 200);
    uint64_t v4 = *(void *)(v3 + 208);
    swift_release();
    swift_beginAccess();
    *(void *)(v1 + 24) = v4;
    swift_unknownObjectWeakAssign();
    swift_release();
    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t ShapeStyledResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v51 = *(char **)(a1 + 24);
  uint64_t v50 = type metadata accessor for ShapeStyledResponderData();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v55 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v56 = TupleTypeMetadata2;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  double v7 = (char *)&v42 - v6;
  uint64_t v8 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  double v13 = (char *)&v42 - v12;
  uint64_t v54 = v14;
  uint64_t v15 = *(int *)(v14 + 48);
  LODWORD(v52) = *(_DWORD *)(v1 + 4);
  int v45 = *(_DWORD *)(v1 + 8);
  int v46 = *(_DWORD *)(v1 + 12);
  int v47 = *(_DWORD *)(v1 + 16);
  uint64_t v43 = v1;
  uint64_t v49 = *(void *)(v1 + 24);
  uint64_t Value = AGGraphGetValue();
  char v18 = v17;
  uint64_t v19 = *(void *)(v2 - 8);
  char v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v13, Value, v2);
  v13[v15] = v18 & 1;
  char v21 = (uint64_t *)AGGraphGetValue();
  LOBYTE(v15) = v18 | v22;
  uint64_t v44 = *v21;
  uint64_t v23 = v44;
  unsigned __int8 v52 = v13;
  v20(v10, (uint64_t)v13, v2);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v7, v10, v2);
  *(void *)&v7[*(int *)(type metadata accessor for ShapeStyledResponderData() + 36)] = v23;
  uint64_t v24 = v56;
  LODWORD(v15) = v15 & 1;
  v7[*(int *)(v56 + 48)] = v15;
  uint64_t v25 = *(int *)(v24 + 48);
  uint64_t v26 = v50;
  uint64_t v27 = *(void *)(v50 - 8);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  uint64_t v29 = (uint64_t)v48;
  uint64_t v51 = v7;
  v28(v48, v7, v50);
  *(unsigned char *)(v29 + v25) = v15;
  double v30 = (long long *)AGGraphGetValue();
  int v45 = v31 & 1;
  long long v32 = v30[1];
  v58[0] = *v30;
  v58[1] = v32;
  double v33 = (float64x2_t *)AGGraphGetValue();
  LODWORD(v10) = v34 & 1;
  float64x2_t v57 = *v33;
  uint64_t v35 = AGGraphGetValue();
  LODWORD(v20) = v36 & 1;
  uint64_t v59 = *(void *)v35;
  long long v37 = *(_OWORD *)(v35 + 24);
  long long v60 = *(_OWORD *)(v35 + 8);
  long long v61 = v37;
  uint64_t v38 = v49;
  uint64_t v39 = type metadata accessor for ContentResponderHelper();
  swift_bridgeObjectRetain();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)(v29, v15, v58, v45, &v57, (int)v10, &v59, (int)v20, v38, v39);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for Attribute<DisplayList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_2461BE2A0;
    *(void *)(v40 + 32) = *(void *)(v43 + 24);
    uint64_t v59 = v40;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v55 + 8))(v51, v56);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
}

uint64_t destroy for ShapeStyledResponderData(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t specialized ContentResponderHelper.update(data:size:position:transform:parent:)(char a1, char a2, char a3, uint64_t a4, char a5, uint64_t a6, float a7, float a8, float a9, float a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v21 = *(void *)&a15;
  uint64_t v20 = *(void *)&a16;
  uint64_t v22 = *(void *)(v16 + 40);
  uint64_t v23 = *(void *)(v16 + 48);
  uint64_t v24 = *(void *)(v16 + 56);
  double v25 = *(double *)(v16 + 64);
  double v26 = *(double *)(v16 + 72);
  uint64_t v41 = *(void *)&v26;
  uint64_t v42 = *(void *)&v25;
  if ((a5 & 1) == 0 && (a3 & 1) == 0)
  {
    double v27 = a11;
    double v28 = a12;
    swift_retain();
    int v29 = 0;
    uint64_t v21 = v23;
    uint64_t v20 = v24;
    uint64_t v30 = v22;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  double v27 = a11;
  double v28 = a12;
  uint64_t v30 = *(void *)a4;
  double v31 = *(double *)(a4 + 24);
  double v32 = *(double *)(a4 + 32);
  double v33 = *(double *)(a4 + 8);
  double v34 = *(double *)(a4 + 16);
  *(void *)(v16 + 40) = *(void *)a4;
  double v25 = v31 - (a15 - v33);
  double v26 = v32 - (a16 - v34);
  *(double *)(v16 + 64) = v25;
  *(double *)(v16 + 72) = v26;
  *(double *)(v16 + 48) = a15;
  *(double *)(v16 + 56) = a16;
  outlined retain of ViewTransform(a4);
  int v29 = 4;
  if (a2)
  {
LABEL_6:
    *(double *)uint64_t v16 = v27;
    *(double *)(v16 + 8) = v28;
    v29 |= 2u;
  }
LABEL_7:
  if ((a1 & 1) != 0 || *(unsigned char *)(v16 + 32) == 1)
  {
    v35.i64[0] = LODWORD(a7);
    v35.i64[1] = LODWORD(a9);
    *(int8x16_t *)(v16 + 16) = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(LODWORD(a10), LODWORD(a8)), 0x20uLL), v35);
    *(unsigned char *)(v16 + 32) = 0;
    LOBYTE(v29) = v29 | 1;
LABEL_10:
    char v45 = v29;
    v44[0] = v22;
    v44[1] = v23;
    v44[2] = v24;
    v44[3] = v42;
    v44[4] = v41;
    v43[0] = v30;
    v43[1] = v21;
    v43[2] = v20;
    *(double *)&v43[3] = v25;
    *(double *)&v43[4] = v26;
    swift_retain();
    ContentPathObservers.notifyPathChanged(for:changes:transform:)(a6, &v45, v44, v43);
    swift_release();
    goto LABEL_11;
  }
  if (v29) {
    goto LABEL_10;
  }
LABEL_11:

  return swift_release();
}

uint64_t ContentResponderHelper.update(data:size:position:transform:parent:)(uint64_t a1, int a2, long long *a3, int a4, float64x2_t *a5, int a6, void *a7, int a8, uint64_t a9, uint64_t a10)
{
  LODWORD(v52) = a8;
  uint64_t v43 = a7;
  int v45 = a6;
  uint64_t v42 = a5;
  LODWORD(v53) = a4;
  uint64_t v50 = a3;
  uint64_t v13 = *(void *)(a10 + 16);
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v44 = (char *)&v42 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v47 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.n128_f64[0] = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v22 = *(void *)(v13 - 8);
  uint64_t v23 = a1;
  uint64_t v24 = a10;
  int v46 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  v46((char *)&v42 - v20, v23, v13, v19);
  uint64_t v25 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v55 = v21;
  int v51 = a2;
  v21[v25] = a2;
  double v26 = (char *)v10 + *(int *)(a10 + 40);
  uint64_t v27 = *(void *)v26;
  long long v28 = *(_OWORD *)(v26 + 24);
  long long v49 = *(_OWORD *)(v26 + 8);
  long long v48 = v28;
  if (v52 & 1) != 0 || (v45)
  {
    uint64_t v30 = v43;
    *(void *)double v26 = *v43;
    float64x2_t v31 = *v42;
    *(float64x2_t *)(v26 + 24) = vsubq_f64(*(float64x2_t *)(v30 + 3), vsubq_f64(*v42, *(float64x2_t *)(v30 + 1)));
    *(float64x2_t *)(v26 + 8) = v31;
    int v29 = 4;
  }
  else
  {
    int v29 = 0;
  }
  long long v52 = *v50;
  swift_retain();
  if (v53)
  {
    _OWORD *v10 = v52;
    v29 |= 2u;
  }
  uint64_t v57 = TupleTypeMetadata2;
  uint64_t v54 = v27;
  if (v51)
  {
    double v32 = *(void (**)(char *, uint64_t))(v14 + 8);
LABEL_11:
    uint64_t v38 = (char *)v10 + *(int *)(v24 + 36);
    v32(v38, v58);
    uint64_t v39 = v47;
    uint64_t v40 = v55;
    ((void (*)(char *, char *, uint64_t))v46)(v47, v55, v13);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v38, v39, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v38, 0, 1, v13);
    LOBYTE(v29) = v29 | 1;
    goto LABEL_12;
  }
  *(void *)&long long v52 = a10;
  uint64_t v33 = *(int *)(a10 + 36);
  uint64_t v53 = v10;
  double v34 = (char *)v10 + v33;
  int8x16_t v35 = v44;
  uint64_t v36 = v58;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v44, v34, v58);
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v35, 1, v13);
  double v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v35, v36);
  if (v37 == 1)
  {
    char v10 = v53;
    uint64_t v24 = v52;
    goto LABEL_11;
  }
  uint64_t v40 = v55;
  if (!v29)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
    return swift_release();
  }
LABEL_12:
  v65[0] = v29;
  uint64_t v62 = v54;
  long long v63 = v49;
  long long v64 = v48;
  uint64_t v59 = *(void *)v26;
  long long v60 = *(_OWORD *)(v26 + 8);
  long long v61 = *(_OWORD *)(v26 + 24);
  swift_retain();
  ContentPathObservers.notifyPathChanged(for:changes:transform:)(a9, v65, &v62, &v59);
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v57);
  return swift_release();
}

uint64_t ContentPathObservers.notifyPathChanged(for:changes:transform:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4)
{
  char v26 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  uint64_t v12 = a4[2];
  uint64_t v13 = a4[3];
  uint64_t v14 = a4[4];
  uint64_t v15 = (void *)*v4;
  *uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v16 = v15[2];
  if (v16)
  {
    uint64_t v17 = (void **)v4;
    uint64_t v18 = (uint64_t)(v15 + 4);
    do
    {
      outlined init with copy of ContentPathObservers.Observer(v18, (uint64_t)v32);
      char v31 = 1;
      if (MEMORY[0x24C527E00](v32))
      {
        uint64_t v19 = v33;
        uint64_t ObjectType = swift_getObjectType();
        char v30 = v26;
        v29[0] = v5;
        v29[1] = v6;
        v29[2] = v7;
        v29[3] = v8;
        v29[4] = v9;
        v28[0] = v10;
        v28[1] = v11;
        _OWORD v28[2] = v12;
        v28[3] = v13;
        v28[4] = v14;
        uint64_t v21 = *(void (**)(uint64_t, char *, void *, void *, char *, uint64_t, uint64_t))(v19 + 16);
        swift_retain();
        swift_retain();
        v21(a1, &v30, v29, v28, &v31, ObjectType, v19);
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        if ((v31 & 1) == 0)
        {
          outlined init with copy of ContentPathObservers.Observer((uint64_t)v32, (uint64_t)v29);
          uint64_t v22 = *v17;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, (unint64_t)v22);
          }
          unint64_t v24 = v22[2];
          unint64_t v23 = v22[3];
          if (v24 >= v23 >> 1) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, (unint64_t)v22);
          }
          void v22[2] = v24 + 1;
          outlined init with take of ContentPathObservers.Observer((uint64_t)v29, (uint64_t)&v22[2 * v24 + 4]);
          *uint64_t v17 = v22;
        }
      }
      outlined destroy of weak GestureGraphDelegate?((uint64_t)v32);
      v18 += 16;
      --v16;
    }
    while (v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for ShapeStyledResponderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BackgroundStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = v6 + 1;
  char v9 = 8 * (v6 + 1);
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

uint64_t getEnumTagSinglePayload for Pair(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t Signpost.traceInterval<A>(object:_:_:closure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(void)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  LODWORD(v55) = a4;
  uint64_t v49 = a3;
  uint64_t v48 = a2;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v54 = (char *)v45 - v19;
  uint64_t v20 = v8[1];
  int v21 = *((unsigned __int8 *)v8 + 16);
  LODWORD(v19) = *((unsigned __int8 *)v8 + 17);
  char v22 = *((unsigned char *)v8 + 18);
  uint64_t v53 = *v8;
  uint64_t v56 = v53;
  uint64_t v51 = v20;
  uint64_t v57 = v20;
  int v50 = v21;
  char v58 = v21;
  int v52 = v19;
  char v59 = v19;
  char v60 = v22;
  if ((Signpost.isEnabled.getter() & 1) == 0) {
    return a6();
  }
  v45[1] = a8;
  v45[2] = a7;
  int v46 = a6;
  uint64_t v47 = v15;
  unint64_t v23 = (void (**)(char *, uint64_t, uint64_t))&lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
  if (a1)
  {
    uint64_t v24 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    id v25 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
  }
  else
  {
    static OSSignpostID.exclusive.getter();
  }
  LOBYTE(v27) = static os_signpost_type_t.begin.getter();
  uint64_t v28 = a5();
  if (one-time initialization token for _signpostLog != -1) {
    goto LABEL_36;
  }
LABEL_9:
  uint64_t v29 = v47;
  if ((v52 & 1) == 0)
  {
    uint64_t v33 = (4 * v53) | v27 | 0x14110000u;
    uint64_t v34 = v47 + 16;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v17, v54, v14);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    unint64_t v35 = 0;
    uint64_t v36 = v28 + 32;
    unint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v34 + 8);
    long long v55 = xmmword_2461BE2B0;
    while (1)
    {
      uint64_t inited = swift_initStackObject();
      uint64_t v27 = inited;
      *(_OWORD *)(inited + 16) = v55;
      uint64_t v38 = (_OWORD *)(inited + 32);
      unint64_t v39 = *(void *)(v28 + 16);
      if (v35 == v39)
      {
        *(void *)(inited + 64) = 0;
        *uint64_t v38 = 0u;
        *(_OWORD *)(inited + 48) = 0u;
      }
      else
      {
        if (v35 >= v39)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_once();
          goto LABEL_9;
        }
        outlined init with copy of AnyTrackedValue(v36 + 40 * v35++, (uint64_t)v38);
      }
      uint64_t v40 = (_OWORD *)(v27 + 72);
      unint64_t v41 = *(void *)(v28 + 16);
      if (v35 == v41)
      {
        *(void *)(v27 + 104) = 0;
        *uint64_t v40 = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
      }
      else
      {
        if (v35 >= v41) {
          goto LABEL_34;
        }
        outlined init with copy of AnyTrackedValue(v36 + 40 * v35++, (uint64_t)v40);
      }
      unint64_t v42 = *(void *)(v28 + 16);
      if (v35 == v42)
      {
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        *(_OWORD *)(v27 + 128) = 0u;
      }
      else
      {
        if (v35 >= v42) {
          goto LABEL_35;
        }
        outlined init with copy of AnyTrackedValue(v36 + 40 * v35++, v27 + 112);
      }
      specialized withKDebugValues(_:_:closure:)(v33, v27, v33, (uint64_t)v17);
      outlined init with copy of CVarArg?(v27 + 112, (uint64_t)&v56);
      swift_bridgeObjectRelease();
      if (!v61)
      {
        swift_bridgeObjectRelease();
        _ss7CVarArg_pSgWOhTm_0((uint64_t)&v56, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        uint64_t v29 = v47;
        uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v17, v14);
        char v31 = v54;
        ((void (*)(uint64_t))v46)(v44);
        goto LABEL_29;
      }
      _ss7CVarArg_pSgWOhTm_0((uint64_t)&v56, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
      if (one-time initialization token for continuation != -1) {
        swift_once();
      }
      uint64_t v43 = __swift_project_value_buffer(v14, (uint64_t)static OSSignpostID.continuation);
      (*v23)(v17, v43, v14);
    }
  }
  char v30 = v23[318];
  char v68 = v27;
  int v66 = v30;
  uint64_t v67 = &dword_245728000;
  uint64_t v56 = v53;
  uint64_t v57 = v51;
  char v58 = v50;
  uint64_t v63 = v48;
  uint64_t v64 = v49;
  char v65 = v55;
  uint64_t v62 = v28;
  char v31 = v54;
  specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
  uint64_t v32 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v46)(v32);
LABEL_29:
  static os_signpost_type_t.end.getter();
  if (v52)
  {
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    OSSignpostID.rawValue.getter();
    kdebug_trace();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v14);
}

uint64_t Signpost.isEnabled.getter()
{
  if (*(unsigned char *)(v0 + 18) != 3) {
    return 0;
  }
  if (*(unsigned char *)(v0 + 17))
  {
    static os_signpost_type_t.event.getter();
    uint64_t result = kdebug_is_enabled();
    if (result)
    {
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      return OS_os_log.signpostsEnabled.getter() & 1;
    }
  }
  else
  {
    static os_signpost_type_t.event.getter();
    return kdebug_is_enabled();
  }
  return result;
}

ValueMetadata *type metadata accessor for CUIDesignLibraryCacheKey.Props()
{
  return &type metadata for CUIDesignLibraryCacheKey.Props;
}

ValueMetadata *type metadata accessor for AnyStyleContextType()
{
  return &type metadata for AnyStyleContextType;
}

void PreferenceKeys.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

ValueMetadata *type metadata accessor for _BackdropEffectPlaceholder()
{
  return &type metadata for _BackdropEffectPlaceholder;
}

uint64_t HitTestBindingFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  _sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  uint64_t Value = (int64_t *)AGGraphGetValue();
  if (v3)
  {
    int64_t v4 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v4);
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2461BE2A0;
    *(void *)(v6 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>)
  {
    type metadata accessor for PlaceholderContentView<OpacityTransition>(255, &lazy cache variable for type metadata for PlaceholderContentView<OpacityTransition>, (uint64_t)&type metadata for OpacityTransition, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OpacityTransition>, OpacityRendererEffect>);
    }
  }
}

Swift::Void __swiftcall OpacityResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  *(void *)(v1 + 216) = *(void *)AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) != *MEMORY[0x263F288F8])
  {
    type metadata accessor for [ViewResponder](0);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    char v4 = v3;
    uint64_t v5 = *Value;
    swift_bridgeObjectRetain();
    if (v5)
    {
      if (v4)
      {
        int64_t v6 = swift_bridgeObjectRetain();
        MultiViewResponder.children.setter(v6);
      }
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for [ViewResponder](0);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for PlaceholderContentView<OpacityTransition>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2461BE2A0;
    *(void *)(v7 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t GestureFilter.updateValue()()
{
  GestureFilter.responder.getter();
  type metadata accessor for [ViewResponder](0);
  uint64_t Value = (int64_t *)AGGraphGetValue();
  if (v1)
  {
    int64_t v2 = *Value;
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter(v2);
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_2461BE2A0;
    *(void *)(v4 + 32) = GestureFilter.responder.getter();
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MultiViewResponder.children.setter(int64_t a1)
{
  int64_t v2 = v1;
  uint64_t v4 = v1 + 5;
  swift_beginAccess();
  unint64_t v5 = v1[5];
  if (v5 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!((unint64_t)a1 >> 62))
    {
LABEL_3:
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_4:
        char v8 = 0;
        int64_t v9 = a1;
        a1 = 0;
        unint64_t v10 = 0;
        unint64_t v48 = v9 & 0xC000000000000001;
        int64_t v44 = v9;
        uint64_t v45 = v7;
        int64_t v41 = v9 + 32;
        uint64_t v42 = v9 & 0xFFFFFFFFFFFFFF8;
        uint64_t v50 = -v6;
        int v46 = v2;
        while (1)
        {
          while (1)
          {
            char v43 = v8;
            uint64_t v11 = a1 - v10 + 0x7FFFFFFFFFFFFFFFLL;
            int64_t v47 = v7 + a1 - v10;
            uint64_t v12 = 8 * a1 + 32;
LABEL_8:
            if (v48)
            {
              uint64_t v13 = MEMORY[0x24C523D60](v10, v44);
              if (a1 == v11) {
                goto LABEL_66;
              }
            }
            else
            {
              if (v10 >= *(void *)(v42 + 16)) {
                goto LABEL_68;
              }
              uint64_t v13 = *(void *)(v41 + 8 * v10);
              swift_retain();
              if (a1 == v11)
              {
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
            }
            unint64_t v49 = v10 + 1;
            swift_beginAccess();
            uint64_t Strong = swift_weakLoadStrong();
            if (!Strong) {
              goto LABEL_29;
            }
            uint64_t v15 = (void *)Strong;
            uint64_t result = swift_release();
            if (v15 != v2) {
              goto LABEL_29;
            }
            if (v6 < a1) {
              goto LABEL_67;
            }
            if (a1 != v6) {
              break;
            }
            a1 = v6;
LABEL_29:
            swift_weakLoadStrong();
            swift_retain();
            swift_release();
            swift_weakAssign();
            swift_release();
            swift_beginAccess();
            uint64_t v22 = swift_retain();
            MEMORY[0x24C522D60](v22);
            uint64_t v7 = v45;
            if (*(void *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2[5] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            if (a1 >= v6) {
              goto LABEL_6;
            }
            swift_beginAccess();
            uint64_t v23 = *v4;
            if ((*v4 & 0xC000000000000001) != 0)
            {
              uint64_t v24 = MEMORY[0x24C523D60](a1, *v4);
              uint64_t v23 = *v4;
              if ((*v4 & 0xC000000000000001) != 0) {
                goto LABEL_54;
              }
LABEL_36:
              if ((v6 & 0x8000000000000000) == 0)
              {
                if ((unint64_t)v6 < *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  uint64_t v25 = *(void *)(v23 + 8 * v6 + 32);
                  swift_retain();
                  goto LABEL_39;
                }
                goto LABEL_72;
              }
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            if (a1 < 0) {
              goto LABEL_69;
            }
            if ((unint64_t)a1 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_70;
            }
            uint64_t v24 = *(void *)(v23 + 8 * a1 + 32);
            swift_retain();
            if ((v23 & 0xC000000000000001) == 0) {
              goto LABEL_36;
            }
LABEL_54:
            uint64_t v25 = MEMORY[0x24C523D60](v6, v23);
            uint64_t v23 = *v4;
LABEL_39:
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *uint64_t v4 = v23;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
            {
              uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
              *uint64_t v4 = v23;
            }
            *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20) = v25;
            swift_release();
            specialized Array._endMutation()();
            uint64_t v27 = *v4;
            int v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *uint64_t v4 = v27;
            if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
            {
              uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
              *uint64_t v4 = v27;
            }
            if (v6 < 0) {
              goto LABEL_73;
            }
            if ((unint64_t)v6 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_74:
              __break(1u);
              goto LABEL_75;
            }
            *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v24;
            swift_release();
            specialized Array._endMutation()();
            swift_endAccess();
            uint64_t v7 = v45;
LABEL_6:
            swift_release();
            ++v6;
            ++a1;
            unint64_t v10 = v49;
            --v50;
            char v8 = 1;
            if (v49 == v7)
            {
LABEL_55:
              uint64_t result = swift_bridgeObjectRelease();
              if (a1 < v6) {
                goto LABEL_58;
              }
              return (*(uint64_t (**)(uint64_t))(*v2 + 296))(result);
            }
          }
          uint64_t v17 = 0;
          int64_t v2 = (void *)(v50 + a1);
          while (1)
          {
            unint64_t v18 = a1 + v17;
            if (a1 + v17 >= v6)
            {
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            uint64_t result = swift_beginAccess();
            uint64_t v19 = *v4;
            if ((*v4 & 0xC000000000000001) == 0)
            {
              if ((v18 & 0x8000000000000000) != 0) {
                goto LABEL_62;
              }
              if (v18 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_63;
              }
              uint64_t v20 = *(void *)(v19 + v12 + 8 * v17);
              uint64_t result = swift_endAccess();
              if (v20 == v13) {
                break;
              }
              goto LABEL_23;
            }
            uint64_t v21 = MEMORY[0x24C523D60](a1 + v17);
            swift_endAccess();
            uint64_t result = swift_unknownObjectRelease();
            if (v21 == v13) {
              break;
            }
LABEL_23:
            ++v17;
            if (!(void *)((char *)v2 + v17))
            {
              int64_t v2 = v46;
              goto LABEL_29;
            }
          }
          if (!v17)
          {
            swift_release();
            ++a1;
            v12 += 8;
            int64_t v2 = v46;
            ++v10;
            if (a1 == v47)
            {
              uint64_t result = swift_bridgeObjectRelease();
              a1 = v47;
              if (v47 < v6)
              {
LABEL_58:
                if (v6 < a1) {
                  goto LABEL_100;
                }
                BOOL v29 = a1 < v6;
                if (a1 != v6) {
                  goto LABEL_82;
                }
LABEL_79:
                swift_beginAccess();
                specialized Array.replaceSubrange<A>(_:with:)(a1, v6);
                uint64_t result = swift_endAccess();
                return (*(uint64_t (**)(uint64_t))(*v2 + 296))(result);
              }
LABEL_64:
              if ((v43 & 1) == 0) {
                return result;
              }
              return (*(uint64_t (**)(uint64_t))(*v2 + 296))(result);
            }
            goto LABEL_8;
          }
          swift_beginAccess();
          specialized MutableCollection.swapAt(_:_:)(a1, a1 + v17, specialized _ArrayBuffer._consumeAndCreateNew());
          swift_endAccess();
          swift_release();
          ++a1;
          char v8 = 1;
          uint64_t v7 = v45;
          int64_t v2 = v46;
          ++v10;
          if (v49 == v45) {
            goto LABEL_55;
          }
        }
      }
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!((unint64_t)a1 >> 62)) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_4;
  }
LABEL_77:
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 <= 0) {
    return result;
  }
  a1 = 0;
  BOOL v29 = v6 > 0;
LABEL_82:
  if (!v29) {
    goto LABEL_101;
  }
  unint64_t v30 = a1;
  while (1)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v31 = *v4;
    if ((*v4 & 0xC000000000000001) != 0)
    {
      uint64_t v32 = (void *)MEMORY[0x24C523D60](v30);
      goto LABEL_91;
    }
    if ((v30 & 0x8000000000000000) != 0) {
      break;
    }
    if (v30 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_99;
    }
    uint64_t v32 = *(void **)(v31 + 8 * v30 + 32);
    swift_retain();
LABEL_91:
    swift_endAccess();
    swift_beginAccess();
    uint64_t v33 = swift_weakLoadStrong();
    if (v33)
    {
      uint64_t v34 = (void *)v33;
      swift_release();
      if (v34 == v2)
      {
        if (swift_weakLoadStrong())
        {
          swift_release();
          swift_beginAccess();
          if (MEMORY[0x24C527E00](v32 + 2))
          {
            uint64_t v35 = v32[3];
            uint64_t ObjectType = swift_getObjectType();
            unint64_t v37 = type metadata accessor for EventGraphHost();
            (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v35 + 16))(v51, v37, v37, ObjectType, v35);
            swift_unknownObjectRelease();
            if (v51[0])
            {
              uint64_t v38 = v51[1];
              uint64_t v39 = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v38);
              swift_unknownObjectRelease();
              uint64_t v40 = EventBindingManager.willRemoveResponder(_:)((uint64_t)v32);
              (*(void (**)(uint64_t))(*v32 + 120))(v40);
              swift_release();
            }
          }
        }
        swift_weakAssign();
      }
    }
    ++v30;
    swift_release();
    if (v6 == v30) {
      goto LABEL_79;
    }
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DefaultLayoutViewResponder.childrenDidChange()()
{
  char v1 = *(void (**)(uint64_t))(v0 + 200);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v1);
  }
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 80) = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    do
    {
      outlined init with copy of ContentPathObservers.Observer(v5, (uint64_t)v8);
      if (MEMORY[0x24C527E00](v8))
      {
        uint64_t v6 = v9;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(v0, ObjectType, v6);
        swift_unknownObjectRelease();
      }
      outlined destroy of ContentPathObservers.Observer((uint64_t)v8);
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t GestureFilter.responder.getter()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 104);
  }
  else
  {
    uint64_t v1 = closure #1 in GestureFilter.responder.getter(v0);
    *(void *)(v0 + 104) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in GestureFilter.responder.getter(uint64_t a1)
{
  id v2 = *(id *)(a1 + 96);
  AGGraphClearUpdate();
  id v3 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in GestureFilter.responder.getter(a1, &v5);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v5;
}

id closure #1 in closure #1 in GestureFilter.responder.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for GestureResponder();
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  int v9 = *(_DWORD *)(a1 + 88);
  type metadata accessor for GestureFilter();
  uint64_t v12 = v4;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v15 = *(_OWORD *)(a1 + 32);
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  long long v18 = *(_OWORD *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 80);
  int v20 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id result = GestureResponder.__allocating_init(modifier:inputs:)(v3, (uint64_t)&v12);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for GestureResponder()
{
  return __swift_instantiateGenericMetadata();
}

id GestureResponder.__allocating_init(modifier:inputs:)(int a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  id v5 = specialized GestureResponder.init(modifier:inputs:)(a1, a2, v4);
  swift_release();
  return v5;
}

void type metadata accessor for PlaceholderContentView<OpacityTransition>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static SafeAreaRegions.keyboard.getter()
{
  return 2;
}

SwiftUI::Spacing __swiftcall LayoutComputer.spacing()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    return (SwiftUI::Spacing)(*(uint64_t (**)(void))(*(void *)v1 + 112))();
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock)) {
    return (SwiftUI::Spacing)(*(uint64_t (**)(void))(*(void *)v1 + 112))();
  }
  result.minima._rawuint64_t Value = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DelayedPreferenceChild<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(long long *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

__n128 ForEach<>.init(_:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v19[0] = a1;
  v19[1] = a2;
  uint64_t v18 = 0;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a5;
  v12[3] = a6;
  v12[4] = a3;
  v12[5] = a4;
  _sSnySiGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
  uint64_t v14 = v13;
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  ForEach.init(_:idGenerator:content:)((uint64_t)v19, &v18, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C), (uint64_t)v12, v14, (uint64_t)v20);
  uint64_t v15 = v21;
  __n128 result = (__n128)v20[1];
  long long v17 = v20[2];
  *(_OWORD *)a7 = v20[0];
  *(__n128 *)(a7 + 16) = result;
  *(_OWORD *)(a7 + 32) = v17;
  *(void *)(a7 + 48) = v15;
  return result;
}

uint64_t ForEach<>.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v20[1] = a6;
  _OWORD v20[2] = a7;
  uint64_t v14 = *(void *)(a5 - 8);
  double v15 = MEMORY[0x270FA5388](a1);
  long long v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v18, v15);
  uint64_t v21 = a2;
  ForEach.init(_:idGenerator:content:)((uint64_t)v17, &v21, a3, a4, a5, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
}

uint64_t ForEach<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x270FA5388](a1);
  int v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a10;
  uint64_t KeyPath = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)((uint64_t)v20, &KeyPath, v23, v24, a4, a9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
}

uint64_t ForEach.init(_:idGenerator:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a2;
  uint64_t v12 = (int *)type metadata accessor for ForEach();
  *(void *)(a6 + v12[17]) = 0;
  uint64_t v13 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a6, a1, a5);
  *(void *)(a6 + v12[16]) = v11;
  uint64_t v14 = (void *)(a6 + v12[15]);
  void *v14 = a3;
  v14[1] = a4;
  uint64_t v15 = one-time initialization token for v6;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  unsigned int v16 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v16) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v17 = 0;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v17 = AGMakeUniqueID();
LABEL_10:
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a5);
  *(void *)(a6 + v12[18]) = v17;
  return result;
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PartialRangeUpTo<Int>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetVySiGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA011ColorSchemeE033_0E72AB1FBE33AED1E73FF06F3DA3A071LLVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_2(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TypedElement<DynamicStackOrientation>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_3(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVySi_GMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_5(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_6(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_7(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

void one-time initialization function for edgeBelowText()
{
  static Spacing.Category.edgeBelowText = (uint64_t)&unk_26FA7F3D0;
}

void one-time initialization function for edgeAboveText()
{
  static Spacing.Category.edgeAboveText = (uint64_t)&unk_26FA7F3B0;
}

CGColorSpaceRef one-time initialization function for srgb(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x263F002D8], (CGColorSpaceRef *)&static Color.Resolved.srgb);
}

CGColorSpaceRef one-time initialization function for srgbExtended(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x263F00238], (CGColorSpaceRef *)&static Color.Resolved.srgbExtended);
}

unint64_t lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout;
  if (!lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout;
  if (!lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutPriorityLayout and conformance LayoutPriorityLayout);
  }
  return result;
}

void static ScrollGeometry.size(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(double *)(a1 + 64) = a2;
  *(double *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a2;
  *(double *)(a1 + 104) = a3;
}

uint64_t getEnumTagSinglePayload for ScrapeableContent.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x77 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t instantiation function for generic protocol witness table for ObjectLocation<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t OptionalEdgeInsets.adding(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 24);
  double v4 = *(double *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 40);
  double v6 = *(double *)(a1 + 48);
  int v7 = *(unsigned __int8 *)(a1 + 56);
  double v8 = *(double *)v2;
  char v9 = *(unsigned char *)(v2 + 8);
  double v10 = *(double *)(v2 + 48);
  char v11 = *(unsigned char *)(v2 + 56);
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if (*(unsigned char *)(v2 + 8)) {
      double v8 = -0.0;
    }
    double v8 = *(double *)a1 + v8;
    char v9 = 0;
  }
  double v12 = *(double *)(v2 + 16);
  if (*(unsigned char *)(v2 + 24)) {
    double v12 = -0.0;
  }
  double v13 = *(double *)(a1 + 16) + v12;
  *(double *)&uint64_t result = v13;
  char v15 = v3 & *(unsigned char *)(v2 + 24);
  if (v3) {
    double v16 = *(double *)(v2 + 16);
  }
  else {
    double v16 = v13;
  }
  double v17 = *(double *)(v2 + 32);
  if (*(unsigned char *)(v2 + 40)) {
    double v17 = -0.0;
  }
  double v18 = v4 + v17;
  char v19 = v5 & *(unsigned char *)(v2 + 40);
  if (v5) {
    double v20 = *(double *)(v2 + 32);
  }
  else {
    double v20 = v18;
  }
  double v21 = *(double *)(v2 + 48);
  if (*(unsigned char *)(v2 + 56)) {
    double v21 = -0.0;
  }
  *(double *)a2 = v8;
  *(unsigned char *)(a2 + 8) = v9;
  double v22 = v6 + v21;
  char v23 = v7 & v11;
  *(double *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 24) = v15;
  *(double *)(a2 + 32) = v20;
  *(unsigned char *)(a2 + 40) = v19;
  if (v7) {
    double v24 = v10;
  }
  else {
    double v24 = v22;
  }
  *(double *)(a2 + 48) = v24;
  *(unsigned char *)(a2 + 56) = v23;
  return result;
}

uint64_t GraphicsContext.draw(_:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a2 == 0.0
    && a3 == 0.0
    && (a4 / *(double *)(a1 + 8) == 1.0 ? (BOOL v5 = a5 / *(double *)(a1 + 16) == 1.0) : (BOOL v5 = 0), v5))
  {
    return RBDrawingStateDrawDisplayList2();
  }
  else
  {
    RBDrawingStateInit();
    RBDrawingStateTranslateCTM();
    RBDrawingStateScaleCTM();
    RBDrawingStateDrawDisplayList2();
    return RBDrawingStateDestroy();
  }
}

uint64_t static Update.dispatchImmediately<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2 = specialized static Update.begin()();
  uint64_t v3 = static Update.dispatchDepth;
  static Update.dispatchDepth = static Update.depth;
  a1(v2);
  static Update.dispatchDepth = v3;

  return static Update.end()();
}

void static AccessibilityTraits.isMathEquation.getter(void *a1@<X8>)
{
  *a1 = 0x20000000;
}

void static RedactionReasons.placeholder.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t type metadata completion function for ViewLayoutEngine()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata completion function for TagValueTraitKey.Value()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t CoreViewSetTransform(uint64_t result, void *a2, long long *a3)
{
  if (result == 2)
  {
    long long v4 = a3[1];
    long long v5 = *a3;
    long long v6 = v4;
    long long v7 = a3[2];
    return [a2 setAffineTransform:&v5];
  }
  else if (!result)
  {
    long long v3 = a3[1];
    long long v5 = *a3;
    long long v6 = v3;
    long long v7 = a3[2];
    return [a2 setTransform:&v5];
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)()
{
  return implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)();
}

uint64_t View.layoutValue<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _LayoutTrait();
  swift_getWitnessTable();

  return View._trait<A>(_:_:)(v5, a2, a3);
}

uint64_t LayoutSubview.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _LayoutTrait();
  uint64_t WitnessTable = swift_getWitnessTable();
  return LayoutProxy.subscript.getter(v2, v2, WitnessTable, a1);
}

uint64_t type metadata accessor for _LayoutTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LayoutProxy.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  double v12 = (char *)&v20 - v11;
  uint64_t v13 = 0;
  if (*(_DWORD *)(v4 + 8) != *MEMORY[0x263F288F8])
  {
    type metadata accessor for ViewList();
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v24);
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 40))(&v23, v15, v16);
    uint64_t v13 = v23;
    uint64_t v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  v24[0] = v13;
  MEMORY[0x270FA5388](v10);
  *(&v20 - 4) = a2;
  *(&v20 - 3) = a3;
  *(&v20 - 2) = a1;
  type metadata accessor for ViewTraitCollection?();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in LayoutProxy.subscript.getter, (uint64_t)(&v20 - 6), MEMORY[0x263F8E628], AssociatedTypeWitness, v17, (uint64_t)v12);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v12, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v21);
}

void type metadata accessor for ViewTraitCollection?()
{
  if (!lazy cache variable for type metadata for ViewTraitCollection?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewTraitCollection?);
    }
  }
}

uint64_t type metadata completion function for ValueTransactionSeed()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for _SafeAreaInsetsModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 8);
  if (result != 1)
  {
    return swift_release();
  }
  return result;
}

uint64_t ScrollPrefetchState.init(deadline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AGMakeUniqueID();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = a1;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundProminence()
{
  return &type metadata for BackgroundProminence;
}

ValueMetadata *type metadata accessor for PhysicalButtonEvent.ButtonType()
{
  return &type metadata for PhysicalButtonEvent.ButtonType;
}

ValueMetadata *type metadata accessor for SafeAreaInsets()
{
  return &type metadata for SafeAreaInsets;
}

unint64_t lazy protocol witness table accessor for type Font and conformance Font()
{
  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

uint64_t static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  void (*v23)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  long long v57;
  long long v58;
  uint64_t v59;

  char v59 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  if (AGTypeGetKind() - 2 >= 4)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 16);
    int v12 = *(_DWORD *)(a2 + 8);
    uint64_t v13 = *(void *)a2;
    static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v51);
    uint64_t v14 = v51;
    uint64_t v15 = v52;
    char v16 = v53;
    int v17 = HIDWORD(v53);
    uint64_t v51 = v13;
    LODWORD(v52) = v12;
    uint64_t v54 = *(_OWORD *)(a2 + 24);
    uint64_t v53 = v11;
    long long v55 = v10;
    uint64_t v56 = v9;
    uint64_t v57 = *(_OWORD *)(a2 + 56);
    char v58 = *(_OWORD *)(a2 + 72);
    uint64_t v30 = v17;
    uint64_t v31 = v8;
    uint64_t v39 = v8;
    uint64_t v35 = v15;
    uint64_t v36 = v14;
    uint64_t v40 = v14;
    int64_t v41 = v15;
    uint64_t v34 = v16;
    LOBYTE(v42) = v16;
    HIDWORD(v42) = v17;
    uint64_t v18 = type metadata accessor for ModifierBodyAccessor();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    BodyAccessor.makeBody(container:inputs:fields:)(&v38, (uint64_t)&v48, (uint64_t)&v39, (uint64_t)&v51, (uint64_t)&v40, v18, WitnessTable);
    uint64_t v28 = v48;
    uint64_t v29 = v49;
    char v20 = v50;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v40 = v51;
    LODWORD(v41) = v52;
    uint64_t v42 = v53;
    char v43 = v54;
    int64_t v44 = v55;
    uint64_t v45 = v56;
    int v46 = v57;
    int64_t v47 = v58;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v23 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(&v48, &v38, &v40, a3, a4, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    double v24 = v48;
    uint64_t v25 = v49;
    if ((v20 & 1) == 0)
    {
      unint64_t v48 = v28;
      unint64_t v49 = v29;
      uint64_t v39 = v31;
      uint64_t v40 = v36;
      int64_t v41 = v35;
      LOBYTE(v42) = v34;
      HIDWORD(v42) = v30;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v39, &v40, a5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *a6 = v24;
    a6[1] = v25;
  }
  return result;
}

{
  return static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  LODWORD(v28) = *a1;
  int v14 = v28;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  long long v25 = *(_OWORD *)(a2 + 7);
  long long v26 = *(_OWORD *)(a2 + 5);
  uint64_t v20 = a2[9];
  uint64_t v21 = a2[10];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:), a6, v37);
  uint64_t v28 = v15;
  int v29 = v16;
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  long long v33 = v26;
  long long v34 = v25;
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a5;
  *(void *)(v22 + 24) = a6;
  *(void *)(v22 + 32) = a7;
  *(void *)(v22 + 40) = a8;
  *(_DWORD *)(v22 + 48) = v14;
  *(void *)(v22 + 56) = a3;
  *(void *)(v22 + 64) = a4;
  uint64_t v23 = *(void (**)(_DWORD *, uint64_t *, uint64_t (*)(uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v23(v37, &v28, partial apply for closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:), v22, a6, a8);
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.dynamicTypeSize.setter(&v2);
}

void one-time initialization function for edgeRightText()
{
  static Spacing.Category.edgeRightText = (uint64_t)&unk_26FA7F3F0;
}

void one-time initialization function for edgeLeftText()
{
  static Spacing.Category.edgeLeftText = (uint64_t)&unk_26FA7F370;
}

uint64_t _GraphInputs.environment.setter(int a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v5;
  int v7 = *(_DWORD *)(v1 + 32);
  if ((v7 & 0x20) == 0) {
    *(_DWORD *)(v1 + 32) = v7 | 0x20;
  }
  return result;
}

uint64_t type metadata completion function for LeafLayoutEngine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(void *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t storeEnumTagSinglePayload for EveryMinuteTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245B8FEC4);
}

uint64_t destroy for AppearanceEffect(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    if (v2 == 1) {
      return result;
    }
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 24))
  {
    return swift_release();
  }
  return result;
}

uint64_t static Font.caption2.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for caption2);
}

uint64_t one-time initialization function for v2_1()
{
  uint64_t result = swiftUI_v2_1_os_versions();
  static Semantics.v2_1 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v2_1_os_versions()
{
  return 0x7E41015FFFFFFFFLL;
}

uint64_t Text.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6)
{
  double v12 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v12);
  if (swift_dynamicCast())
  {
    uint64_t v16 = v27[1];
    swift_retain();
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    }
    unint64_t v18 = a5[2];
    unint64_t v17 = a5[3];
    if (v18 >= v17 >> 1) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, a5);
    }
    char v19 = 0;
    a5[2] = v18 + 1;
    uint64_t v20 = &a5[2 * v18];
    v20[4] = v16;
    uint64_t v21 = v20 + 4;
  }
  else
  {
    type metadata accessor for TextForegroundStyleModifier();
    uint64_t v22 = specialized TextForegroundStyleModifier.__allocating_init<A>(_:)(a1, a6);
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    }
    unint64_t v24 = a5[2];
    unint64_t v23 = a5[3];
    if (v24 >= v23 >> 1) {
      a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, a5);
    }
    a5[2] = v24 + 1;
    long long v25 = &a5[2 * v24];
    v25[4] = v22;
    uint64_t v21 = v25 + 4;
    char v19 = -64;
  }
  *((unsigned char *)v21 + 8) = v19;
  swift_release();
  return a2;
}

uint64_t specialized TextForegroundStyleModifier.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized TextForegroundStyleModifier.init<A>(_:)(a1, v4, a2);
  swift_release();
  return v5;
}

uint64_t specialized TextForegroundStyleModifier.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = MEMORY[0x270FA5388](a1);
  int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_retain();
  *(void *)(a2 + 16) = AnyShapeStyle.init<A>(_:)((uint64_t)v7, a3);
  return a2;
}

uint64_t type metadata accessor for TextForegroundStyleModifier()
{
  return self;
}

void one-time initialization function for swiftUIOptions()
{
  static NSStringDrawingOptions.swiftUIOptions = static NSStringDrawingOptions.disableUILabelCompatibility | 1;
}

void one-time initialization function for textBaseline()
{
  static Spacing.Category.textBaseline = (uint64_t)&unk_26FA7F390;
}

void one-time initialization function for textToText()
{
  static Spacing.Category.textToText = (uint64_t)&unk_26FA7F350;
}

CGColorSpaceRef one-time initialization function for displayP3(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x263F001E8], (CGColorSpaceRef *)&static Color.Resolved.displayP3);
}

CGColorSpaceRef one-time initialization function for srgbExtendedLinear(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x263F00230], (CGColorSpaceRef *)&static Color.Resolved.srgbExtendedLinear);
}

CGColorSpaceRef one-time initialization function for srgbLinear(uint64_t a1)
{
  return one-time initialization function for srgb(a1, MEMORY[0x263F002C8], (CGColorSpaceRef *)&static Color.Resolved.srgbLinear);
}

uint64_t base witness table accessor for _AttributeBody in ApplyTransitionModifier<A>.Child()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for ViewInputFlag.Input : ViewInput in BothFeatures<A, B>()
{
  return &protocol witness table for BothFeatures<A, B>;
}

uint64_t UpdateCycleDetector.dispatch(label:isDebug:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  AGGraphClearUpdate();
  int v7 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v4 + 4) == v7)
  {
    int v8 = *(_DWORD *)(v4 + 8);
    if (v8 && (int v9 = v8 - 1, (*(_DWORD *)(v4 + 8) = v9) != 0))
    {
      return 1;
    }
    else if (*(unsigned char *)(v4 + 12))
    {
      return 0;
    }
    else
    {
      if ((a3 & 1) == 0)
      {
        _StringGuts.grow(_:)(44);
        uint64_t v13 = a1(v11, v12);
        unint64_t v15 = v14;
        swift_bridgeObjectRelease();
        v16._object = (void *)0x800000024621E040;
        v16._countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v16);
        specialized static Log.externalWarning(_:)(v13, v15);
        swift_bridgeObjectRelease();
      }
      uint64_t result = 0;
      *(unsigned char *)(v4 + 12) = 1;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 4) = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return 1;
  }
  return result;
}

uint64_t Binding.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  swift_retain();
  uint64_t result = swift_release();
  *a3 = a1;
  return result;
}

uint64_t AnyTransition.FirstVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnyTransition.SecondVisitor();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v7, a2);
  *(void *)&v12[*(int *)(v8 + 36)] = 0;
  AnyTransition.visitBase<A>(applying:)((uint64_t)v12, *v2, v8, (uint64_t)&protocol witness table for AnyTransition.SecondVisitor<A>);
  uint64_t v13 = *(void *)&v12[*(int *)(v8 + 36)];
  unint64_t v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  v14(v12, v8);
  uint64_t result = swift_release();
  v2[1] = v13;
  return result;
}

uint64_t AnyTransition.InsertionVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnyTransition.RemovalVisitor();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v7, a2);
  *(void *)&v12[*(int *)(v8 + 36)] = 0;
  AnyTransition.visitBase<A>(applying:)((uint64_t)v12, *v2, v8, (uint64_t)&protocol witness table for AnyTransition.RemovalVisitor<A>);
  uint64_t v13 = *(void *)&v12[*(int *)(v8 + 36)];
  unint64_t v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  v14(v12, v8);
  uint64_t result = swift_release();
  v2[1] = v13;
  return result;
}

uint64_t AnyTransition.visitBase<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a1, a3, a4);
}

uint64_t type metadata accessor for AnyTransition.RemovalVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyTransition.SecondVisitor()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ParagraphTypesetting()
{
  return &type metadata for ParagraphTypesetting;
}

uint64_t GraphicsContext.transform.setter()
{
  uint64_t v1 = v0;
  RBDrawingStateGetCTM();
  uint64_t result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v3 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v4 = swift_retain();
      *uint64_t v1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v4, v3, 1, 0);
      swift_release();
    }
    return RBDrawingStateSetCTM();
  }
  return result;
}

uint64_t initializeWithCopy for PlaceholderInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v6 = *(void **)(a2 + 112);
  uint64_t v5 = *(void **)(a2 + 120);
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v5;
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  uint64_t v16 = a2 + 144;
  uint64_t v17 = a1 + 144;
  uint64_t v8 = *(void *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  id v10 = v5;
  swift_retain();
  swift_retain();
  if (v8)
  {
    uint64_t v11 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = v8;
    *(void *)(a1 + 176) = v11;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(v17, v16, v8);
  }
  else
  {
    long long v12 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(_OWORD *)(v17 + 16) = v12;
    *(void *)(v17 + 32) = *(void *)(v16 + 32);
  }
  uint64_t v13 = *(void **)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 212);
  swift_retain();
  id v14 = v13;
  return a1;
}

uint64_t type metadata completion function for _AnimationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of AnyShapeStyleBox.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of ResponderNode.nextResponder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t type metadata accessor for PlatformViewDefinition()
{
  return self;
}

uint64_t type metadata accessor for EventBindingBridge()
{
  return self;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _VariadicView_Children()
{
  return lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_VariadicView_Children> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_VariadicView_Children>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t)&type metadata for _VariadicView_Children, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _ViewList_Node.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  outlined init with copy of _ViewList_Node(v4, (uint64_t)&v17);
  switch(v20)
  {
    case 1:
      outlined destroy of _ViewList_Node((uint64_t)&v17);
      uint64_t v11 = 0;
      break;
    case 2:
      v13[0] = v17;
      uint64_t v16 = v8;
      uint64_t v11 = _ViewList_Group.firstOffset<A>(forID:style:)(a1, &v16, a3, a4);
      goto LABEL_5;
    case 3:
      LODWORD(v13[0]) = v17;
      v13[1] = *((void *)&v17 + 1);
      _OWORD v13[2] = v18;
      LOBYTE(v14) = v19;
      uint64_t v16 = v8;
      uint64_t v11 = _ViewList_Section.firstOffset<A>(forID:style:)(a1, (unint64_t *)&v16, a3, a4);
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      outlined init with take of ScrollStateRequest(&v17, (uint64_t)v13);
      uint64_t v9 = v14;
      uint64_t v10 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      uint64_t v16 = v8;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(a1, &v16, a3, a4, v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      break;
  }
  return v11;
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ModifiedViewList<A>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ModifiedViewList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t ModifiedViewList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  uint64_t v13 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v13, a4, a5, v10, v11);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ForEachList<A, B, C>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return ForEachList.firstOffset<A>(forID:style:)(a1, a2, *(void *)v5, *(unsigned int *)(v5 + 8), a5[2], a5[3], a5[4], a3, a5[5], a5[6], a5[7], a4);
}

uint64_t ForEachList.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v13 = *a2;
  return ForEachState.firstOffset<A>(forID:style:)(a1, &v13, a8, a12);
}

uint64_t ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  unint64_t v9 = *a2;
  uint64_t v10 = ForEachState.matchingStrategy<A>(for:)(a3, a3);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 1;
  unint64_t v19 = v9;
  uint64_t v20 = 0;
  MEMORY[0x270FA5388](v10);
  _OWORD v13[2] = a3;
  void v13[3] = a4;
  char v14 = v11;
  uint64_t v15 = a1;
  uint64_t v16 = v4;
  long long v17 = &v20;
  uint64_t v18 = &v22;
  ForEachState.forEachItem(from:style:do:)(&v21, &v19, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in ForEachState.firstOffset<A>(forID:style:), (uint64_t)v13);
  return v22;
}

uint64_t ForEachState.matchingStrategy<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  uint64_t v6 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 272));
  swift_beginAccess();
  uint64_t v7 = *v6;
  v21[0] = a2;
  uint64_t v8 = v4[10];
  uint64_t v9 = v4[11];
  uint64_t v10 = v4[12];
  uint64_t v11 = v4[13];
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  long long v20 = *((_OWORD *)v5 + 7);
  long long v28 = v20;
  uint64_t v12 = type metadata accessor for ForEachState.IDTypeMatchingStrategy();
  MEMORY[0x24C522390](&v22, v21, v7, MEMORY[0x263F8D1F0], v12, MEMORY[0x263F8D1F8]);
  uint64_t v13 = v22;
  if (v22 != 4) {
    goto LABEL_27;
  }
  swift_endAccess();
  uint64_t v14 = v2 + *(void *)(*(void *)v2 + 160);
  swift_beginAccess();
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  *(void *)&long long v28 = v20;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  if (result != 1)
  {
    uint64_t v17 = *(void *)(v14 + *(int *)(v15 + 64));
    uint64_t v24 = v8;
    uint64_t v25 = v9;
    uint64_t v26 = v10;
    uint64_t v27 = v11;
    *(void *)&long long v28 = v20;
    type metadata accessor for ForEach.IDGenerator();
    if (!v17) {
      goto LABEL_25;
    }
    if (v9 == a2)
    {
      uint64_t v13 = 0;
      goto LABEL_26;
    }
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    unsigned int v18 = static Semantics.v6;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC)
    {
      if (!dyld_program_sdk_at_least()) {
        goto LABEL_16;
      }
    }
    else if (static Semantics.forced < v18)
    {
LABEL_16:
      if (byte_26B0F44FC == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      if (static Semantics.forced >= static Semantics.v6)
      {
LABEL_20:
        if (swift_conformsToProtocol2()) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = 0;
        }
        if (!v19) {
          goto LABEL_25;
        }
        uint64_t v13 = 2;
LABEL_26:
        char v23 = v13;
        uint64_t v22 = a2;
        swift_beginAccess();
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
LABEL_27:
        swift_endAccess();
        return v13;
      }
LABEL_25:
      uint64_t v13 = 3;
      goto LABEL_26;
    }
    if (v9 == MEMORY[0x263F8DB68])
    {
      uint64_t v13 = 1;
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for ForEachState.IDTypeMatchingStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _VariadicView_Children@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SubviewsCollection@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SubviewsCollectionSlice@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

unint64_t lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child;
  if (!lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child);
  }
  return result;
}

uint64_t specialized static ForEach<>._makeViewList(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[1] = *MEMORY[0x263EF8340];
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState);
  swift_allocObject();
  unsigned int v6 = specialized ForEachState.init(inputs:)(a2);
  LODWORD(v14[0]) = a1;
  *((void *)&v14[0] + 1) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init and conformance ForEachState<A, B, C>.Info.Init, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  v6[28] = Attribute.init<A>(body:value:flags:update:)();
  *((unsigned char *)v6 + 116) = 0;
  long long v7 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v7;
  _DWORD v14[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)&v14[0];
  v15[0] = *(void *)&v14[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  outlined retain of ViewTransform((uint64_t)v15);
  if (!specialized find<A>(_:key:)(v8) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  outlined release of ViewTransform((uint64_t)v15);
  outlined release of _GraphInputs((uint64_t)v14);
  if (static WeakAttribute.== infix(_:_:)())
  {
    if (one-time initialization token for evictByDefault != -1) {
      swift_once();
    }
    if (static ForEachEvictionInput.evictByDefault != 1) {
      goto LABEL_14;
    }
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v9 = (id)AGSubgraphGetCurrent();
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = v9;
    id v11 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v11 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    swift_beginAccess();
    swift_release();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor and conformance ForEachState<A, B, C>.Evictor, &lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphSetFlags();
LABEL_14:
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(0, &lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init, &lazy cache variable for type metadata for ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    int v12 = Attribute.init<A>(body:value:flags:update:)();
    v6[30] = v12;
    *((unsigned char *)v6 + 124) = 0;
    uint64_t result = swift_release();
    *(_DWORD *)a3 = v12;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 1;
    *(void *)(a3 + 48) = *(void *)(a2 + 48);
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 1;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _DWORD *v6;
  int v7;
  long long v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  int v13;
  uint64_t result;
  _OWORD v15[3];
  void v16[2];

  v16[1] = *MEMORY[0x263EF8340];
  type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(0, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState);
  swift_allocObject();
  unsigned int v6 = specialized ForEachState.init(inputs:)(a2);
  LODWORD(v15[0]) = a1;
  *((void *)&v15[0] + 1) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain();
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(0, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(0, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  lazy protocol witness table accessor for type ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info.Init and conformance ForEachState<A, B, C>.Info.Init, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  long long v7 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v6[28] = v7;
  *((unsigned char *)v6 + 116) = 0;
  uint64_t v8 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v8;
  void v15[2] = *(_OWORD *)(a2 + 32);
  id v9 = *(void *)&v15[0];
  v16[0] = *(void *)&v15[0];
  outlined retain of _GraphInputs((uint64_t)v15);
  outlined retain of ViewTransform((uint64_t)v16);
  if (!specialized find<A>(_:key:)(v9) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  outlined release of ViewTransform((uint64_t)v16);
  outlined release of _GraphInputs((uint64_t)v15);
  if (static WeakAttribute.== infix(_:_:)())
  {
    if (one-time initialization token for evictByDefault != -1) {
      swift_once();
    }
    if (static ForEachEvictionInput.evictByDefault != 1) {
      goto LABEL_14;
    }
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    uint64_t v10 = (id)AGSubgraphGetCurrent();
    if (!v10) {
      goto LABEL_16;
    }
    id v11 = v10;
    int v12 = (id)AGSubgraphGetGraph();
  }
  else
  {
    int v12 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    swift_beginAccess();
    swift_release();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(0, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    lazy protocol witness table accessor for type ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Evictor and conformance ForEachState<A, B, C>.Evictor, &lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    AGGraphSetFlags();
LABEL_14:
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(0, &lazy cache variable for type metadata for ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    lazy protocol witness table accessor for type ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init and conformance ForEachList<A, B, C>.Init, &lazy cache variable for type metadata for ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    uint64_t v13 = Attribute.init<A>(body:value:flags:update:)();
    v6[30] = v13;
    *((unsigned char *)v6 + 124) = 0;
    uint64_t result = swift_release();
    *(_DWORD *)a3 = v13;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 1;
    *(void *)(a3 + 48) = *(void *)(a2 + 48);
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 1;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _DWORD *v6;
  long long v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  uint64_t result;
  _OWORD v14[3];
  void v15[2];

  v15[1] = *MEMORY[0x263EF8340];
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState);
  swift_allocObject();
  unsigned int v6 = specialized ForEachState.init(inputs:)(a2);
  LODWORD(v14[0]) = a1;
  *((void *)&v14[0] + 1) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init and conformance ForEachState<A, B, C>.Info.Init, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info.Init);
  v6[28] = Attribute.init<A>(body:value:flags:update:)();
  *((unsigned char *)v6 + 116) = 0;
  long long v7 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v7;
  _DWORD v14[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)&v14[0];
  v15[0] = *(void *)&v14[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  outlined retain of ViewTransform((uint64_t)v15);
  if (!specialized find<A>(_:key:)(v8) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  outlined release of ViewTransform((uint64_t)v15);
  outlined release of _GraphInputs((uint64_t)v14);
  if (static WeakAttribute.== infix(_:_:)())
  {
    if (one-time initialization token for evictByDefault != -1) {
      swift_once();
    }
    if (static ForEachEvictionInput.evictByDefault != 1) {
      goto LABEL_14;
    }
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v9 = (id)AGSubgraphGetCurrent();
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = v9;
    id v11 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v11 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    swift_beginAccess();
    swift_release();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor and conformance ForEachState<A, B, C>.Evictor, &lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Evictor, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Evictor);
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphSetFlags();
LABEL_14:
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(0, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    lazy protocol witness table accessor for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init(&lazy protocol witness table cache variable for type ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init and conformance ForEachList<A, B, C>.Init, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Init, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList.Init);
    int v12 = Attribute.init<A>(body:value:flags:update:)();
    v6[30] = v12;
    *((unsigned char *)v6 + 124) = 0;
    uint64_t result = swift_release();
    *(_DWORD *)a3 = v12;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 1;
    *(void *)(a3 + 48) = *(void *)(a2 + 48);
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a3 + 64) = 1;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v9[0] = &type metadata for _VariadicView_Children;
    v9[1] = MEMORY[0x263F8DB68];
    v9[2] = &type metadata for _VariadicView_Children.Element;
    v9[3] = v6;
    v9[4] = MEMORY[0x263F8DB70];
    v9[5] = &protocol witness table for _VariadicView_Children.Element;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ForEachList<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Init and conformance ForEachList<A, B, C>.Init(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

void type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for Slice<_VariadicView_Children>(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    v9[0] = v6;
    v9[1] = &type metadata for Subview.ID;
    v9[2] = &type metadata for Subview;
    v9[3] = lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    v9[4] = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v9[5] = &protocol witness table for Subview;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void static ForEach<>._makeViewList(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  int v10 = *a1;
  uint64_t v11 = *(void *)a2;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  unsigned int v15 = *(_DWORD *)(a2 + 28);
  unsigned int v17 = *(_DWORD *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  int v21 = *(_DWORD *)(a2 + 64);
  uint64_t v22 = *(uint64_t **)(a2 + 72);
  char v23 = *(unsigned char *)(a2 + 80);
  LODWORD(v90) = v10;
  LODWORD(v95) = v10;
  long long v94 = (void *)v11;
  int v99 = (void *)v11;
  LODWORD(v88) = v12;
  LODWORD(v100) = v12;
  uint64_t v93 = v13;
  uint64_t v101 = v13;
  LODWORD(v87) = v14;
  unint64_t v102 = __PAIR64__(v15, v14);
  unint64_t v103 = __PAIR64__(v16, v17);
  unsigned int v86 = v16;
  uint64_t v92 = v18;
  uint64_t v104 = v18;
  uint64_t v105 = v19;
  uint64_t v91 = v19;
  uint64_t v85 = v20;
  uint64_t v106 = v20;
  int v84 = v21;
  int v107 = v21;
  long long v89 = v22;
  int v108 = v22;
  char v109 = v23;
  static ForEach<>.makeForEachViewList(view:inputs:)((int *)&v95, (uint64_t)&v99, a3, a5, (uint64_t)v110);
  if (BYTE8(v111) != 0xFF)
  {
    long long v45 = v110[1];
    long long v46 = v112;
    *(_OWORD *)(a9 + 32) = v111;
    *(_OWORD *)(a9 + 48) = v46;
    *(unsigned char *)(a9 + 64) = v113;
    *(_OWORD *)a9 = v110[0];
    *(_OWORD *)(a9 + 16) = v45;
    return;
  }
  unsigned __int8 v80 = (_DWORD *)a9;
  outlined destroy of _ViewListOutputs?((uint64_t)v110);
  uint64_t v83 = a3;
  int v99 = (void *)a3;
  uint64_t v100 = a4;
  uint64_t v82 = a4;
  uint64_t v81 = a5;
  uint64_t v101 = a5;
  unint64_t v102 = a6;
  unint64_t v30 = a6;
  unint64_t v31 = a7;
  unint64_t v103 = a7;
  uint64_t v104 = a8;
  uint64_t v32 = a8;
  type metadata accessor for ForEachState();
  int v99 = v94;
  LODWORD(v100) = v88;
  uint64_t v101 = v93;
  unint64_t v102 = __PAIR64__(v15, v87);
  unint64_t v103 = __PAIR64__(v86, v17);
  uint64_t v104 = v92;
  uint64_t v105 = v91;
  uint64_t v106 = v85;
  int v107 = v84;
  int v108 = v89;
  char v109 = v23;
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v33 = ForEachState.init(inputs:)((uint64_t *)&v99);
  long long v89 = &v79;
  LODWORD(v110[0]) = v90;
  *((void *)&v110[0] + 1) = v33;
  MEMORY[0x270FA5388](v33);
  uint64_t v34 = v83;
  uint64_t v35 = v82;
  int v99 = (void *)v83;
  uint64_t v100 = v82;
  uint64_t v36 = v81;
  uint64_t v101 = v81;
  unint64_t v102 = v30;
  unint64_t v103 = v31;
  uint64_t v104 = v32;
  v76[2] = type metadata accessor for ForEachState.Info();
  int v99 = (void *)v34;
  uint64_t v100 = v35;
  uint64_t v101 = v36;
  unint64_t v102 = v30;
  unint64_t v88 = v30;
  unint64_t v87 = v31;
  unint64_t v103 = v31;
  uint64_t v104 = v32;
  uint64_t v37 = v32;
  uint64_t v77 = type metadata accessor for ForEachState.Info.Init();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v110, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v76, v77, MEMORY[0x263F8E628], v38, MEMORY[0x263F8E658], v39);
  uint64_t v90 = 0;
  swift_release();
  LODWORD(v38) = v99;
  *((_DWORD *)v33 + 28) = v99;
  long long v89 = v33;
  *((unsigned char *)v33 + 116) = 0;
  uint64_t v40 = (uint64_t)v94;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v41 = specialized find<A>(_:key:)(v40);
  uint64_t v42 = v83;
  unsigned int v86 = v38;
  uint64_t v79 = v37;
  if (v41)
  {
    char v43 = (uint64_t *)(v41 + 72);
    int64_t v44 = (int *)(v41 + 76);
  }
  else
  {
    char v43 = &static ForEachEvictionInput.defaultValue;
    int64_t v44 = (int *)&static ForEachEvictionInput.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  int v47 = *v44;
  int v48 = *(_DWORD *)v43;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  uint64_t v49 = static WeakAttribute.== infix(_:_:)();
  if (v49)
  {
    if (one-time initialization token for evictByDefault != -1) {
      uint64_t v49 = swift_once();
    }
    if (static ForEachEvictionInput.evictByDefault != 1)
    {
      unint64_t v61 = v87;
      unint64_t v60 = v88;
      uint64_t v62 = v79;
      char v65 = v89;
      goto LABEL_18;
    }
  }
  uint64_t v50 = v42;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v51 = (id)AGSubgraphGetCurrent();
    int v52 = v89;
    if (!v51) {
      goto LABEL_20;
    }
    uint64_t v53 = v51;
    id v54 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v54 = (id)AGGraphGetAttributeGraph();
    int v52 = v89;
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v56 = Context;
    swift_retain();

    swift_beginAccess();
    int v57 = *(_DWORD *)(v56 + 64);
    uint64_t v58 = swift_release();
    long long v94 = v76;
    uint64_t v95 = v52;
    int v96 = v48;
    int v97 = v47;
    int v98 = v57;
    MEMORY[0x270FA5388](v58);
    int v99 = (void *)v50;
    uint64_t v100 = v82;
    uint64_t v59 = v81;
    unint64_t v60 = v88;
    uint64_t v101 = v81;
    unint64_t v102 = v88;
    unint64_t v61 = v87;
    uint64_t v62 = v79;
    unint64_t v103 = v87;
    uint64_t v104 = v79;
    uint64_t v74 = type metadata accessor for ForEachState.Evictor();
    uint64_t v75 = swift_getWitnessTable();
    type metadata accessor for _ViewListOutputs?(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F28898]);
    uint64_t v64 = v63;
    swift_retain();
    uint64_t v36 = v59;
    char v65 = v52;
    uint64_t v42 = v50;
    uint64_t v66 = v90;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v95, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v76[-4], v74, MEMORY[0x263F8E628], v64, MEMORY[0x263F8E658], v67);
    uint64_t v90 = v66;
    swift_release();
    uint64_t v49 = AGGraphSetFlags();
LABEL_18:
    uint64_t v95 = (uint64_t *)v86;
    MEMORY[0x270FA5388](v49);
    int v99 = (void *)v42;
    uint64_t v100 = v68;
    uint64_t v101 = v36;
    unint64_t v102 = v60;
    unint64_t v103 = v61;
    uint64_t v104 = v62;
    uint64_t v69 = type metadata accessor for ForEachList.Init();
    uint64_t v74 = v69;
    uint64_t v75 = swift_getWitnessTable();
    type metadata accessor for Attribute<ViewList>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v95, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)&v76[-4], v69, MEMORY[0x263F8E628], v70, MEMORY[0x263F8E658], v71);
    int v72 = (int)v99;
    *((_DWORD *)v65 + 30) = v99;
    *((unsigned char *)v65 + 124) = 0;
    swift_release();
    long long v73 = v80;
    *unsigned __int8 v80 = v72;
    *((void *)v73 + 1) = 0;
    *((unsigned char *)v73 + 40) = 1;
    *((void *)v73 + 6) = v91;
    *((void *)v73 + 7) = 0;
    *((unsigned char *)v73 + 64) = 1;
    return;
  }
  __break(1u);
LABEL_20:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of _ViewListOutputs?(uint64_t a1)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for _ViewListOutputs?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ForEachState()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ForEachState.Evictor()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ForEachState.Info.Init()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ForEachList.Init()
{
  return swift_getGenericMetadata();
}

double static ForEach<>.makeForEachViewList(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v16 = a3;
  int v6 = *a1;
  long long v7 = *(_OWORD *)(a2 + 48);
  void v22[2] = *(_OWORD *)(a2 + 32);
  v22[3] = v7;
  v22[4] = *(_OWORD *)(a2 + 64);
  char v23 = *(unsigned char *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v8;
  int v21 = v6;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v16 = type metadata accessor for ForEachSubviewCollection();
  unsigned int v17 = &type metadata for Subview.ID;
  uint64_t v18 = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v9 = swift_dynamicCast();
  if (v9)
  {
    MEMORY[0x270FA5388](v9);
    int v21 = v10;
    uint64_t v11 = (void (*)(uint64_t))partial apply for closure #1 in static ForEach<>.makeForEachViewList(view:inputs:);
LABEL_5:
    _GraphValue.subscript.getter(v11, (uint64_t)&type metadata for AnyView, &v16);
    specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)v22, a5);
    return result;
  }
  int v21 = v6;
  uint64_t v16 = type metadata accessor for ForEachSectionCollection();
  unsigned int v17 = &type metadata for SectionConfiguration.ID;
  uint64_t v18 = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v12 = swift_dynamicCast();
  if (v12)
  {
    MEMORY[0x270FA5388](v12);
    int v21 = v13;
    uint64_t v11 = (void (*)(uint64_t))partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:);
    goto LABEL_5;
  }
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 255;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID;
  if (!lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID;
  if (!lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID);
  }
  return result;
}

uint64_t type metadata accessor for ForEachSubviewCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ForEachSectionCollection()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID;
  if (!lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID;
  if (!lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration.ID and conformance SectionConfiguration.ID);
  }
  return result;
}

uint64_t *ForEachState.init(inputs:)(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v16 = *a1;
  int v15 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  long long v21 = *(_OWORD *)(a1 + 5);
  uint64_t v20 = a1[7];
  int v19 = *((_DWORD *)a1 + 16);
  uint64_t v18 = a1[9];
  char v17 = *((unsigned char *)a1 + 80);
  *((_DWORD *)v1 + 28) = 0;
  *((unsigned char *)v1 + 116) = 1;
  *((_DWORD *)v1 + 30) = 0;
  *((unsigned char *)v1 + 124) = 1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(v3 + 160);
  uint64_t v6 = type metadata accessor for ForEach();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 168);
  *(void *)uint64_t v9 = 0;
  *(_WORD *)(v9 + 8) = 256;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 176)) = MEMORY[0x263F8EE78];
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 184)) = 2;
  uint64_t v10 = *(void *)(*v1 + 192);
  type metadata accessor for ForEachState.Item();
  *(uint64_t *)((char *)v1 + v10) = Dictionary.init()();
  uint64_t v11 = *(void *)(*v1 + 200);
  *(uint64_t *)((char *)v1 + v11) = Dictionary.init()();
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 208)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 216)) = -1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 224)) = 0;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 + 232)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 240)) = 0;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 + 248)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 256)) = 0;
  uint64_t v12 = *(void *)(*v1 + 264);
  *(uint64_t *)((char *)v1 + v12) = Set.init()();
  uint64_t v13 = *(void *)(*v1 + 272);
  type metadata accessor for ForEachState.IDTypeMatchingStrategy();
  *(uint64_t *)((char *)v1 + v13) = Dictionary.init()();
  v1[2] = v16;
  *((_DWORD *)v1 + 6) = v15;
  v1[4] = v4;
  v1[5] = v7;
  v1[6] = v8;
  *(_OWORD *)(v1 + 7) = v21;
  v1[9] = v20;
  *((_DWORD *)v1 + 20) = v19;
  v1[11] = v18;
  *((unsigned char *)v1 + 96) = v17;
  unint64_t result = (uint64_t *)(id)AGSubgraphGetCurrent();
  if (result)
  {
    v1[13] = (uint64_t)result;
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ForEachState.IDTypeMatchingStrategy()
{
  return swift_getGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type ForEachList<Slice<SubviewsCollection>, Subview.ID, Subview>.Init and conformance ForEachList<A, B, C>.Init(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id specialized ForEachState.init(inputs:)(uint64_t a1)
{
  *(_DWORD *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 116) = 1;
  *(_DWORD *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 124) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 233) = 0u;
  *(unsigned char *)(v1 + 249) = 1;
  *(void *)(v1 + 256) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 264) = 2;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 272) = MEMORY[0x263F8EE80];
  *(void *)(v1 + 280) = v2;
  *(_OWORD *)(v1 + 288) = xmmword_2461FD290;
  *(void *)(v1 + 304) = 0;
  *(_DWORD *)(v1 + 312) = 0;
  *(unsigned char *)(v1 + 316) = 0;
  *(_DWORD *)(v1 + 320) = 0;
  *(unsigned char *)(v1 + 324) = 0;
  *(void *)(v1 + 328) = MEMORY[0x263F8EE88];
  *(void *)(v1 + 336) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v1 + 96) = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v4;
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v1 + 104) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  id result;

  *(_DWORD *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 116) = 1;
  *(_DWORD *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 124) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 217) = 0u;
  *(unsigned char *)(v1 + 233) = 1;
  *(void *)(v1 + 240) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 248) = 2;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 256) = MEMORY[0x263F8EE80];
  *(void *)(v1 + 264) = v2;
  *(_OWORD *)(v1 + 272) = xmmword_2461FD290;
  *(void *)(v1 + 288) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(unsigned char *)(v1 + 300) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(unsigned char *)(v1 + 308) = 0;
  *(void *)(v1 + 312) = MEMORY[0x263F8EE88];
  *(void *)(v1 + 320) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v1 + 96) = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v4;
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v1 + 104) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  id result;

  *(_DWORD *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 116) = 1;
  *(_DWORD *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 124) = 1;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_WORD *)(v1 + 192) = 256;
  *(void *)(v1 + 200) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 208) = 2;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 216) = MEMORY[0x263F8EE80];
  *(void *)(v1 + 224) = v2;
  *(_OWORD *)(v1 + 232) = xmmword_2461FD290;
  *(void *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 256) = 0;
  *(unsigned char *)(v1 + 260) = 0;
  *(_DWORD *)(v1 + 264) = 0;
  *(unsigned char *)(v1 + 268) = 0;
  *(void *)(v1 + 272) = MEMORY[0x263F8EE88];
  *(void *)(v1 + 280) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v1 + 96) = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v4;
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v1 + 104) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of Slice<SubviewsCollection>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>)
  {
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<SubviewsCollection> and conformance <> Slice<A>);
  }
  return result;
}

void type metadata accessor for Slice<SubviewsCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Subview and conformance Subview()
{
  unint64_t result = lazy protocol witness table cache variable for type Subview and conformance Subview;
  if (!lazy protocol witness table cache variable for type Subview and conformance Subview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview and conformance Subview);
  }
  return result;
}

void type metadata accessor for Slice<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for ForEachChild()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ViewTraitCollection.isSectionFooter.getter()
{
  return ViewTraitCollection.isSectioned.getter((uint64_t (*)(void, uint64_t))specialized ViewTraitCollection.value<A>(for:defaultValue:));
}

uint64_t type metadata completion function for AccessibilityNullableOptionSet()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL ValueCycleDetector.dispatch(value:label:isDebug:)(char *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v6 = v5;
  AGGraphClearUpdate();
  uint64_t v11 = *(void *)(a5 + 16);
  int v12 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v6 + 4) != v12)
  {
    *(_DWORD *)(v6 + 4) = v12;
    uint64_t v13 = v6 + *(int *)(a5 + 44);
    uint64_t v14 = type metadata accessor for Stack3();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    Stack3.init()(v11, v13);
  }
  uint64_t v15 = type metadata accessor for Stack3();
  char v16 = Stack3.contains(_:)(a1, v15);
  if (v16)
  {
    if ((*(unsigned char *)(v6 + 8) & 1) == 0)
    {
      if ((a4 & 1) == 0)
      {
        _StringGuts.grow(_:)(39);
        uint64_t v19 = a2(v17, v18);
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
        v22._object = (void *)0x800000024621E070;
        v22._countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v22);
        specialized static Log.externalWarning(_:)(v19, v21);
        swift_bridgeObjectRelease();
      }
      *(unsigned char *)(v6 + 8) = 1;
    }
  }
  else
  {
    Stack3.push(_:)((uint64_t)a1, v15);
  }
  return (v16 & 1) == 0;
}

uint64_t type metadata accessor for Stack3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ValueCycleDetector.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v4 = (id)AGSubgraphGetCurrent();
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = v4;
    id v6 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v6 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v8 = Context;
    swift_retain();

    swift_beginAccess();
    int v9 = *(_DWORD *)(v8 + 64);
    swift_release();
    *(_DWORD *)a2 = v9;
    *(_DWORD *)(a2 + 4) = -1;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v10 = type metadata accessor for ValueCycleDetector();
    return Stack3.init()(a1, a2 + *(int *)(v10 + 44));
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ValueCycleDetector()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Stack3.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v5 = a2 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v6 = a2 + *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v8(a2, 1, 1, a1);
  v8(v5, 1, 1, a1);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v6, 1, 1, a1);
}

uint64_t Stack3.contains(_:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v177 = a1;
  uint64_t v173 = a2;
  uint64_t v143 = *(void *)(a2 - 8);
  uint64_t v170 = v143;
  MEMORY[0x270FA5388](a1);
  unint64_t v166 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v168 = (char *)&v139 - v6;
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v176 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v169 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  float v167 = (char *)&v139 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v146 = (char *)&v139 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v154 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v142 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v163 = (char *)&v139 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v156 = (char *)&v139 - v20;
  uint64_t v160 = *(void *)(v15 - 8);
  uint64_t v21 = v160;
  MEMORY[0x270FA5388](v22);
  uint64_t v141 = (char *)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v145 = (char *)&v139 - v25;
  MEMORY[0x270FA5388](v26);
  unint64_t v144 = (char *)&v139 - v27;
  MEMORY[0x270FA5388](v28);
  int v148 = (char *)&v139 - v29;
  MEMORY[0x270FA5388](v30);
  int v165 = (char *)&v139 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v139 - v33;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  MEMORY[0x270FA5388](TupleTypeMetadata3);
  uint64_t v147 = (char *)&v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  long long v162 = (char *)&v139 - v38;
  double v40 = MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v139 - v41;
  uint64_t v44 = *(int *)(v43 + 48);
  long long v45 = (char *)&v139 + v44 - v41;
  uint64_t v151 = v43;
  uint64_t v46 = *(int *)(v43 + 64);
  int v47 = (char *)&v139 + v46 - v41;
  uint64_t v48 = v3;
  uint64_t v49 = v3 + v44;
  uint64_t v50 = v48 + v46;
  uint64_t v161 = v21;
  id v51 = *(void (**)(char *, double))(v21 + 16);
  uint64_t v171 = v48;
  v51((char *)&v139 - v41, v40);
  long long v158 = v45;
  ((void (*)(char *, uint64_t, uint64_t))v51)(v45, v49, v15);
  long long v157 = v47;
  ((void (*)(char *, uint64_t, uint64_t))v51)(v47, v50, v15);
  uint64_t v52 = v176;
  uint64_t v53 = *(char **)(v176 + 16);
  uint64_t v172 = v176 + 16;
  uint64_t v174 = v53;
  ((void (*)(char *, char *, uint64_t))v53)(v34, v177, v8);
  uint64_t v54 = v52;
  long long v55 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
  uint64_t v150 = v52 + 56;
  long long v149 = v55;
  v55(v34, 0, 1, v8);
  uint64_t v56 = v156;
  int v57 = &v156[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v51)(v156, v42, v15);
  ((void (*)(char *, char *, uint64_t))v51)(v57, v34, v15);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  unsigned int v59 = v58(v56, 1, v8);
  unsigned __int8 v153 = (void (*)(void))v51;
  uint64_t v164 = v54 + 48;
  unsigned int v152 = v58;
  uint64_t v159 = v8;
  if (v59 != 1)
  {
    ((void (*)(char *, char *, uint64_t))v51)(v165, v56, v15);
    if (v58(v57, 1, v8) != 1)
    {
      uint64_t v67 = v176;
      uint64_t v68 = v146;
      (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v146, v57, v8);
      uint64_t v69 = v173;
      LODWORD(v155) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v70 = *(void (**)(char *, uint64_t))(v67 + 8);
      v70(v68, v8);
      uint64_t v71 = v34;
      unint64_t v61 = *(void (**)(char *, uint64_t))(v160 + 8);
      v61(v71, v15);
      v70(v165, v8);
      uint64_t v62 = v69;
      v61(v56, v15);
      goto LABEL_8;
    }
    uint64_t v63 = v34;
    unint64_t v61 = *(void (**)(char *, uint64_t))(v160 + 8);
    v61(v63, v15);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v165, v8);
LABEL_6:
    uint64_t v62 = v173;
    uint64_t v64 = v177;
    uint64_t v65 = v171;
    uint64_t v66 = v168;
    (*(void (**)(char *, uint64_t))(v154 + 8))(v56, TupleTypeMetadata2);
    LODWORD(v155) = 0;
    goto LABEL_9;
  }
  unint64_t v60 = v34;
  unint64_t v61 = *(void (**)(char *, uint64_t))(v160 + 8);
  v61(v60, v15);
  if (v58(v57, 1, v8) != 1) {
    goto LABEL_6;
  }
  v61(v56, v15);
  LODWORD(v155) = 1;
  uint64_t v62 = v173;
LABEL_8:
  uint64_t v64 = v177;
  uint64_t v65 = v171;
  uint64_t v66 = v168;
LABEL_9:
  int v72 = (char *)(v161 + 8);
  v61(v157, v15);
  v61(v158, v15);
  int v165 = (char *)v61;
  long long v158 = v72;
  v61(v42, v15);
  uint64_t v73 = v170;
  uint64_t v160 = *(void *)(v170 + 16);
  uint64_t v161 = v170 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v160)(v66, v65, v62);
  uint64_t v74 = v167;
  uint64_t v75 = v159;
  uint64_t v76 = v174;
  ((void (*)(char *, char *, uint64_t))v174)(v167, v64, v159);
  if ((v155 & 1) == 0)
  {
    uint64_t v80 = *(int *)(v151 + 48);
    uint64_t v81 = &v66[v80];
    uint64_t v82 = *(int *)(v151 + 64);
    uint64_t v83 = &v66[v82];
    int v84 = &v162[v80];
    uint64_t v85 = &v162[v82];
    unsigned int v86 = v153;
    v153();
    ((void (*)(char *, char *, uint64_t))v86)(v84, v81, v15);
    unsigned __int8 v155 = v85;
    ((void (*)(char *, char *, uint64_t))v86)(v85, v83, v15);
    unint64_t v87 = v148;
    ((void (*)(char *, char *, uint64_t))v76)(v148, v74, v75);
    v149(v87, 0, 1, v75);
    unint64_t v88 = v163;
    long long v89 = &v163[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v86)(v163, v84, v15);
    uint64_t v140 = v89;
    long long v157 = (char *)v15;
    ((void (*)(char *, char *, uint64_t))v86)(v89, v87, v15);
    uint64_t v90 = v88;
    uint64_t v91 = v152;
    unsigned int v92 = v152(v90, 1, v75);
    uint64_t v156 = v84;
    if (v92 == 1)
    {
      uint64_t v93 = v87;
      long long v94 = v165;
      ((void (*)(char *, char *))v165)(v93, v157);
      uint64_t v95 = v167;
      float v167 = *(char **)(v176 + 8);
      ((void (*)(char *, uint64_t))v167)(v95, v75);
      unsigned int v78 = *(void (**)(char *, uint64_t))(v170 + 8);
      v78(v168, v173);
      if (v91(v140, 1, v75) == 1)
      {
        int v96 = v157;
        ((void (*)(char *, char *))v94)(v163, v157);
        ((void (*)(char *, char *))v94)(v155, v96);
        ((void (*)(char *, char *))v94)(v156, v96);
        ((void (*)(char *, char *))v94)(v162, v96);
        uint64_t v79 = v166;
        uint64_t v77 = (void (*)(char *, uint64_t))v167;
        uint64_t v62 = v173;
        goto LABEL_14;
      }
      uint64_t v168 = (char *)v78;
      char v109 = v166;
      uint64_t v110 = v75;
      unint64_t v103 = v94;
      uint64_t v107 = v173;
      int v108 = v174;
      long long v111 = v163;
      uint64_t v104 = v157;
    }
    else
    {
      int v99 = v144;
      uint64_t v100 = v163;
      ((void (*)(char *, char *, char *))v86)(v144, v163, v157);
      uint64_t v101 = v140;
      unsigned int v102 = v91(v140, 1, v75);
      unint64_t v103 = v165;
      if (v102 != 1)
      {
        uint64_t v112 = v176;
        char v113 = v146;
        (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v146, v101, v75);
        uint64_t v62 = v173;
        LODWORD(v140) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v114 = *(void (**)(char *, uint64_t))(v112 + 8);
        v114(v113, v75);
        uint64_t v104 = v157;
        ((void (*)(char *, char *))v103)(v148, v157);
        v114(v167, v75);
        uint64_t v115 = v168;
        uint64_t v168 = *(char **)(v170 + 8);
        v170 += 8;
        ((void (*)(char *, uint64_t))v168)(v115, v62);
        float v167 = (char *)v114;
        v114(v99, v75);
        ((void (*)(char *, char *))v103)(v100, v104);
        ((void (*)(char *, char *))v103)(v155, v104);
        ((void (*)(char *, char *))v103)(v156, v104);
        ((void (*)(char *, char *))v103)(v162, v104);
        ((void (*)(char *, uint64_t, uint64_t))v160)(v166, v171, v62);
        uint64_t v116 = v169;
        ((void (*)(char *, char *, uint64_t))v174)(v169, v177, v75);
        if (v140)
        {
          uint64_t v79 = v166;
          unsigned int v78 = (void (*)(char *, uint64_t))v168;
          ((void (*)(char *, uint64_t))v167)(v116, v75);
          goto LABEL_15;
        }
        char v109 = v166;
        uint64_t v110 = v75;
LABEL_23:
        uint64_t v117 = *(int *)(v151 + 48);
        uint64_t v118 = v109;
        uint64_t v119 = &v109[v117];
        uint64_t v120 = *(int *)(v151 + 64);
        int v121 = &v109[v120];
        uint64_t v122 = &v147[v117];
        int v123 = &v147[v120];
        uint64_t v124 = v153;
        v153();
        uint64_t v177 = v122;
        ((void (*)(char *, char *, char *))v124)(v122, v119, v104);
        ((void (*)(char *, char *, char *))v124)(v123, v121, v104);
        int v125 = v145;
        ((void (*)(char *, char *, uint64_t))v174)(v145, v169, v110);
        uint64_t v126 = v124;
        v149(v125, 0, 1, v110);
        uint64_t v127 = &v142[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v174 = v123;
        unint64_t v128 = v142;
        v124();
        ((void (*)(char *, char *, char *))v124)(v127, v125, v104);
        uint64_t v129 = v152;
        if (v152(v128, 1, v110) == 1)
        {
          ((void (*)(char *, char *))v165)(v125, v104);
          ((void (*)(char *, uint64_t))v167)(v169, v110);
          ((void (*)(char *, uint64_t))v168)(v118, v173);
          if (v129(v127, 1, v110) == 1)
          {
            uint64_t v130 = v165;
            ((void (*)(char *, char *))v165)(v128, v104);
            char v98 = 1;
            ((void (*)(char *, char *))v130)(v174, v104);
LABEL_31:
            ((void (*)(char *, char *))v130)(v177, v104);
            ((void (*)(char *, char *))v130)(v147, v104);
            return v98 & 1;
          }
        }
        else
        {
          unint64_t v131 = v141;
          ((void (*)(char *, char *, char *))v126)(v141, v128, v104);
          unsigned int v132 = v129(v127, 1, v110);
          uint64_t v133 = v173;
          unsigned int v134 = v128;
          if (v132 != 1)
          {
            uint64_t v136 = v146;
            (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v146, v127, v110);
            char v98 = dispatch thunk of static Equatable.== infix(_:_:)();
            Swift::UInt32 v137 = (void (*)(char *, uint64_t))v167;
            ((void (*)(char *, uint64_t))v167)(v136, v110);
            uint64_t v130 = v165;
            ((void (*)(char *, char *))v165)(v145, v104);
            v137(v169, v110);
            ((void (*)(char *, uint64_t))v168)(v166, v133);
            v137(v141, v110);
            ((void (*)(char *, char *))v130)(v128, v104);
            ((void (*)(char *, char *))v130)(v174, v104);
            goto LABEL_31;
          }
          ((void (*)(char *, char *))v165)(v125, v104);
          uint64_t v135 = (void (*)(char *, uint64_t))v167;
          ((void (*)(char *, uint64_t))v167)(v169, v110);
          ((void (*)(char *, uint64_t))v168)(v166, v133);
          v135(v131, v110);
          unint64_t v128 = v134;
        }
        (*(void (**)(char *, uint64_t))(v154 + 8))(v128, TupleTypeMetadata2);
        char v98 = 0;
        uint64_t v130 = v165;
        ((void (*)(char *, char *))v165)(v174, v104);
        goto LABEL_31;
      }
      uint64_t v104 = v157;
      ((void (*)(char *, char *))v165)(v148, v157);
      uint64_t v105 = *(void (**)(char *, uint64_t))(v176 + 8);
      v105(v167, v75);
      uint64_t v106 = v168;
      uint64_t v107 = v173;
      uint64_t v168 = *(char **)(v170 + 8);
      ((void (*)(char *, uint64_t))v168)(v106, v173);
      float v167 = (char *)v105;
      v105(v144, v75);
      int v108 = v76;
      char v109 = v166;
      uint64_t v110 = v75;
      long long v111 = v100;
    }
    (*(void (**)(char *, uint64_t))(v154 + 8))(v111, TupleTypeMetadata2);
    ((void (*)(char *, char *))v103)(v155, v104);
    ((void (*)(char *, char *))v103)(v156, v104);
    ((void (*)(char *, char *))v103)(v162, v104);
    ((void (*)(char *, uint64_t, uint64_t))v160)(v109, v171, v107);
    ((void (*)(char *, char *, uint64_t))v108)(v169, v177, v110);
    goto LABEL_23;
  }
  uint64_t v77 = *(void (**)(char *, uint64_t))(v176 + 8);
  v77(v74, v75);
  unsigned int v78 = *(void (**)(char *, uint64_t))(v73 + 8);
  v78(v66, v62);
  uint64_t v79 = v166;
LABEL_14:
  ((void (*)(char *, uint64_t, uint64_t))v160)(v79, v171, v62);
  int v97 = v169;
  ((void (*)(char *, char *, uint64_t))v174)(v169, v177, v75);
  v77(v97, v75);
LABEL_15:
  v78(v79, v62);
  char v98 = 1;
  return v98 & 1;
}

uint64_t Stack3.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v30 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v32 = (char *)&v27 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v27 - v10;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v12 = *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v33 = v2;
  uint64_t v13 = v2 + v12;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v11, v2 + v12, v4);
  uint64_t v14 = *(void *)(v3 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v15 = v34(v11, 1, v3);
  uint64_t v29 = v5;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v11, v4);
  if (v15 == 1)
  {
    uint64_t v17 = v13;
    uint64_t v18 = v3;
  }
  else
  {
    uint64_t v28 = v13;
    uint64_t v19 = v32;
    uint64_t v20 = v33;
    TupleTypeMetadata3 = v33 + *(int *)(TupleTypeMetadata3 + 48);
    ((void (*)(char *))v35)(v32);
    int v21 = v34(v19, 1, v3);
    v16(v19, v4);
    uint64_t v18 = v3;
    if (v21 == 1)
    {
      uint64_t v17 = TupleTypeMetadata3;
    }
    else
    {
      uint64_t v17 = v20;
      uint64_t v22 = v30;
      v35(v30, v17, v4);
      int v23 = v34(v22, 1, v3);
      v16(v22, v4);
      if (v23 != 1)
      {
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 24);
        uint64_t v25 = TupleTypeMetadata3;
        v24(v28, TupleTypeMetadata3, v4);
        v24(v25, v17, v4);
      }
    }
  }
  v16((char *)v17, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17, v36, v18);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v18);
}

ValueMetadata *type metadata accessor for ViewFrame()
{
  return &type metadata for ViewFrame;
}

void one-time initialization function for standard()
{
  static Image.Headroom.standardouble d = 0x3FF0000000000000;
}

{
  static Text.Sizing.standardouble d = 0;
  qword_26B0F0F48 = MEMORY[0x263F8EE78];
}

ValueMetadata *type metadata accessor for MatchedGeometryProperties()
{
  return &type metadata for MatchedGeometryProperties;
}

ValueMetadata *type metadata accessor for AccessibilityVisibility()
{
  return &type metadata for AccessibilityVisibility;
}

uint64_t base witness table accessor for _AttributeBody in PreferenceBinder<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for _ViewList_ID()
{
  return &type metadata for _ViewList_ID;
}

uint64_t ContainerValues.subscript.setter(uint64_t a1)
{
  specialized ContainerValues.subscript.setter(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t specialized ContainerValues.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v9 - v4, a1, v3);
  uint64_t v7 = type metadata accessor for ContainerValueViewTraitKey();
  swift_getWitnessTable();
  return ViewTraitCollection.subscript.setter((uint64_t)v5, v7, v7);
}

uint64_t ContainerValues.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ContainerValueViewTraitKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  return ViewTraitCollection.subscript.getter(v2, WitnessTable, a1);
}

uint64_t type metadata accessor for ContainerValueViewTraitKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _threadTransactionID();
  *a1 = result;
  return result;
}

uint64_t View.padding(_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  v6[0] = 15;
  double v7 = a2;
  double v8 = a3;
  double v9 = a4;
  double v10 = a5;
  char v11 = 0;
  return View.modifier<A>(_:)(v6, a1, &type metadata for _PaddingLayout);
}

uint64_t getEnumTagSinglePayload for _TraitWritingModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        char v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

uint64_t ScrollStateEnqueueRequests.init(phaseState:scrollable:inputs:outputs:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a3;
  uint64_t v9 = a3[3];
  uint64_t v10 = *a4;
  int v11 = *MEMORY[0x263F288F8];
  if (AGGraphGetCurrentAttribute() == v11)
  {
    id v12 = (id)AGSubgraphGetCurrent();
    if (!v12) {
      goto LABEL_25;
    }
    uint64_t v13 = v12;
    id v14 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v14 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v16 = Context;
    swift_retain();

    swift_beginAccess();
    int v17 = *(_DWORD *)(v16 + 64);
    swift_release();
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest)?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<[ObjectIdentifier : ScrollStateRequest]>, (uint64_t (*)(uint64_t))type metadata accessor for [ObjectIdentifier : ScrollStateRequest], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for MutableBox);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v18;
    uint64_t v19 = *(void *)(v10 + 16);
    int v20 = v11;
    if (v19)
    {
      int v21 = (ValueMetadata **)(v10 + 48);
      while (*(v21 - 2) != &type metadata for UpdateScrollStateRequestKey)
      {
        v21 += 3;
        if (!--v19)
        {
          int v20 = v11;
          goto LABEL_12;
        }
      }
      int v20 = *(_DWORD *)v21;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v22 = specialized find<A>(_:key:)(v8);
    int v34 = v17;
    int v32 = v20;
    if (v22)
    {
      int v23 = (int *)(v22 + 72);
    }
    else
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      int v23 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
    }
    int v24 = a1;
    int v25 = a2;
    int v26 = *v23;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = specialized find<A>(_:key:)(v8);
    if (v27)
    {
      unsigned int v28 = *(unsigned __int8 *)(v27 + 76);
      uint64_t v29 = *(unsigned int *)(v27 + 72);
      swift_release();
      if (v28 <= 0xFEuLL)
      {
        unint64_t v30 = v29 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v28 << 32);
        if ((v30 & 0x100000000) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_release_n();
          uint64_t result = swift_release_n();
          int v11 = v30;
LABEL_23:
          *(_DWORD *)a5 = v24;
          *(_DWORD *)(a5 + 4) = v25;
          *(void *)(a5 + 8) = v9;
          *(_DWORD *)(a5 + 16) = v32;
          *(_DWORD *)(a5 + 20) = v26;
          *(_DWORD *)(a5 + 24) = v11;
          *(_DWORD *)(a5 + 28) = v34;
          *(void *)(a5 + 32) = 0xFFFFFFFFLL;
          *(unsigned char *)(a5 + 40) = 0;
          *(void *)(a5 + 44) = 0xFFFFFFFF00000000;
          *(_WORD *)(a5 + 52) = 0;
          *(void *)(a5 + 56) = v33;
          return result;
        }
      }
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t result = swift_release_n();
    goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10) {
    goto LABEL_21;
  }
  type metadata accessor for ScrollStateRequest(0, a3);
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  BOOL v15 = __OFADD__(v14, v10);
  uint64_t v16 = v14 + v10;
  if (!v15)
  {
    *(void *)(v5 + 16) = v16;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall ScrollStateEnqueueRequests.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 44))
  {
    *(_DWORD *)(v0 + 44) = v2;
    *(void *)(v0 + 32) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 40) = 0;
    uint64_t v3 = *(void *)(v0 + 56);
    swift_beginAccess();
    *(void *)(v3 + 16) = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
  }
  uint64_t v62 = (void *)MEMORY[0x263F8EE78];
  if (*(_DWORD *)(v1 + 20) == *MEMORY[0x263F288F8])
  {
    memset(v55, 0, sizeof(v55));
    outlined init with take of ScrollStateRequest?((uint64_t)v55, (uint64_t)v60);
    int v51 = 0;
    unint64_t v4 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_14;
  }
  type metadata accessor for ScrollStateRequest?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D8F0]);
  uint64_t Value = AGGraphGetValue();
  char v7 = v6;
  outlined init with copy of ScrollStateRequest?(Value, (uint64_t)v60);
  unsigned __int8 v61 = v7 & 1;
  outlined init with take of ScrollStateRequest?((uint64_t)v60, (uint64_t)v55);
  int v8 = v61;
  v55[40] = v61;
  outlined init with take of ScrollStateRequest?((uint64_t)v55, (uint64_t)v60);
  unint64_t v4 = (void *)MEMORY[0x263F8EE78];
  if (v8 != 1) {
    goto LABEL_13;
  }
  outlined init with copy of ScrollStateRequest?((uint64_t)v60, (uint64_t)&v52);
  if (!v53)
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v52, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
LABEL_13:
    int v51 = 0;
    goto LABEL_14;
  }
  outlined init with take of ScrollStateRequest(&v52, (uint64_t)v55);
  uint64_t v9 = *(unsigned int *)(v1 + 4);
  uint64_t v10 = *(void *)&v55[24];
  uint64_t v11 = *(void *)&v55[32];
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v55, *(uint64_t *)&v55[24]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v10, v11);
  outlined init with copy of AnyTrackedValue((uint64_t)v55, (uint64_t)&v52);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v62 = v4;
  }
  unint64_t v14 = v4[2];
  unint64_t v13 = v4[3];
  if (v14 >= v13 >> 1) {
    uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v4);
  }
  uint64_t v15 = v53;
  uint64_t v16 = v54;
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v52, v53);
  double v18 = MEMORY[0x270FA5388](v17);
  int v20 = &v50[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v21 + 16))(v20, v18);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, (uint64_t)v20, (uint64_t *)&v62, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  int v51 = 1;
  unint64_t v4 = v62;
LABEL_14:
  uint64_t updated = ScrollStateEnqueueRequests.adjustedUpdateRequests()();
  int v24 = updated;
  char v25 = v23;
  if (v4[2]) {
    goto LABEL_15;
  }
  if ((v23 & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v29 = updated[2];
  if (v29)
  {
    uint64_t v30 = (uint64_t)(updated + 4);
    do
    {
      outlined init with copy of AnyTrackedValue(v30, (uint64_t)v55);
      uint64_t v31 = *(unsigned int *)(v1 + 4);
      uint64_t v32 = *(void *)&v55[24];
      uint64_t v33 = *(void *)&v55[32];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v55, *(uint64_t *)&v55[24]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v31, v32, v33);
      outlined init with copy of AnyTrackedValue((uint64_t)v55, (uint64_t)&v52);
      int v34 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        int v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        uint64_t v62 = v34;
      }
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1) {
        uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v34);
      }
      uint64_t v37 = v53;
      uint64_t v38 = v54;
      uint64_t v39 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v52, v53);
      double v40 = MEMORY[0x270FA5388](v39);
      uint64_t v42 = &v50[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *, double))(v43 + 16))(v42, v40);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, (uint64_t)v42, (uint64_t *)&v62, v37, v38);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      v30 += 40;
      --v29;
    }
    while (v29);
LABEL_15:
    if (v25) {
      goto LABEL_16;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    char v27 = v51;
    goto LABEL_38;
  }
LABEL_16:
  if (AGGraphGetOutputValue())
  {
    uint64_t v26 = v24[2];
    swift_bridgeObjectRelease();
    char v27 = v51;
    if (v26) {
      char v28 = v51;
    }
    else {
      char v28 = 1;
    }
    if (v26) {
      char v27 = 1;
    }
    if (v28)
    {
LABEL_38:
      uint64_t v44 = (uint64_t)v62;
      if (v62[2] && (v27 & 1) != 0) {
        goto LABEL_40;
      }
      goto LABEL_41;
    }
LABEL_37:
    char v27 = specialized UpdateCycleDetector.dispatch(label:isDebug:)(1, v1 + 28);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v44 = (uint64_t)v62;
  if (v62[2])
  {
LABEL_40:
    char v45 = *(unsigned char *)(v1 + 40);
    char v46 = *(unsigned char *)(v1 + 52);
    char v47 = *(unsigned char *)(v1 + 53);
    uint64_t v48 = *(void *)(v1 + 56);
    long long v49 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)long long v55 = *(_OWORD *)v1;
    *(_OWORD *)&v55[16] = v49;
    *(void *)&v55[32] = *(void *)(v1 + 32);
    v55[40] = v45;
    uint64_t v56 = *(void *)(v1 + 44);
    char v57 = v46;
    char v58 = v47;
    uint64_t v59 = v48;
    swift_retain();
    ScrollStateEnqueueRequests.enqueueRequests(_:)(v44);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ScrollStateRequest?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    return;
  }
LABEL_41:
  outlined destroy of ScrollStateRequest?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
  swift_bridgeObjectRelease();
}

uint64_t outlined init with take of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(void **a1, uint64_t a2)
{
  outlined init with copy of UpdateScrollStateRequest(a2, (uint64_t)v11);
  uint64_t v3 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *a1 = v3;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    *a1 = v3;
  }
  uint64_t v9 = &type metadata for UpdateScrollStateRequest;
  uint64_t v10 = &protocol witness table for UpdateScrollStateRequest;
  *(void *)&long long v8 = swift_allocObject();
  outlined init with copy of UpdateScrollStateRequest((uint64_t)v11, v8 + 16);
  v3[2] = v6 + 1;
  outlined init with take of ScrollStateRequest(&v8, (uint64_t)&v3[5 * v6 + 4]);
  return outlined destroy of UpdateScrollStateRequest((uint64_t)v11);
}

uint64_t ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1)
{
  long long v3 = v1[1];
  long long v98 = *v1;
  long long v99 = v3;
  long long v4 = v1[3];
  long long v100 = v1[2];
  long long v101 = v4;
  AGGraphClearUpdate();
  int v5 = *(unsigned __int8 *)AGGraphGetValue();
  AGGraphSetUpdate();
  unint64_t v87 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = MEMORY[0x263F8EE80];
    int v9 = v5 | 4;
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v7, (uint64_t)&v94);
      uint64_t v11 = v96;
      uint64_t v12 = v97;
      __swift_project_boxed_opaque_existential_1(&v94, v96);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v88, v11, v12);
      if (v89)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v96;
        uint64_t v14 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
        outlined init with copy of AnyTrackedValue((uint64_t)&v94, (uint64_t)&v91);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v90[0] = v8;
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        uint64_t v19 = *(void *)(v8 + 16);
        BOOL v20 = (v17 & 1) == 0;
        uint64_t v21 = v19 + v20;
        if (__OFADD__(v19, v20)) {
          goto LABEL_73;
        }
        char v22 = v17;
        if (*(void *)(v8 + 24) >= v21)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          if ((v22 & 1) != (v24 & 1)) {
            goto LABEL_77;
          }
          unint64_t v18 = v23;
        }
        unint64_t v87 = *(void *)&v90[0];
        if ((v22 & 1) == 0)
        {
          *(void *)(*(void *)&v90[0] + 8 * (v18 >> 6) + 64) |= 1 << v18;
          *(void *)(*(void *)(v87 + 48) + 8 * v18) = v15;
          outlined init with take of ScrollStateRequest(&v91, *(void *)(v87 + 56) + 40 * v18);
          uint64_t v43 = *(void *)(v87 + 16);
          BOOL v44 = __OFADD__(v43, 1);
          uint64_t v45 = v43 + 1;
          if (v44) {
            goto LABEL_74;
          }
LABEL_29:
          *(void *)(v87 + 16) = v45;
          goto LABEL_4;
        }
      }
      else
      {
        if (v9 == 4) {
          goto LABEL_5;
        }
        uint64_t v25 = v96;
        uint64_t v26 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
        if (*(void *)(v87 + 16))
        {
          unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
          if (v29)
          {
            outlined init with copy of AnyTrackedValue(*(void *)(v87 + 56) + 40 * v28, (uint64_t)v90);
            outlined init with take of ScrollStateRequest(v90, (uint64_t)&v91);
            uint64_t v30 = v96;
            uint64_t v31 = v97;
            __swift_project_boxed_opaque_existential_1(&v94, v96);
            outlined init with copy of AnyTrackedValue((uint64_t)&v91, (uint64_t)v90);
            LOBYTE(v30) = ScrollStateRequest.overrides(_:)((uint64_t)v90, v30, v31);
            outlined destroy of ScrollStateRequest?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
            if ((v30 & 1) == 0) {
              goto LABEL_5;
            }
          }
        }
        uint64_t v32 = v96;
        uint64_t v33 = v97;
        __swift_project_boxed_opaque_existential_1(&v94, v96);
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
        outlined init with copy of AnyTrackedValue((uint64_t)&v94, (uint64_t)&v91);
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v90[0] = v87;
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        uint64_t v37 = *(void *)(v87 + 16);
        BOOL v38 = (v36 & 1) == 0;
        uint64_t v39 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_75;
        }
        char v40 = v36;
        if (*(void *)(v87 + 24) >= v39)
        {
          if ((v35 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, v35);
          unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
          if ((v40 & 1) != (v42 & 1)) {
            goto LABEL_77;
          }
          unint64_t v18 = v41;
        }
        unint64_t v87 = *(void *)&v90[0];
        if ((v40 & 1) == 0)
        {
          *(void *)(*(void *)&v90[0] + 8 * (v18 >> 6) + 64) |= 1 << v18;
          *(void *)(*(void *)(v87 + 48) + 8 * v18) = v34;
          outlined init with take of ScrollStateRequest(&v91, *(void *)(v87 + 56) + 40 * v18);
          uint64_t v46 = *(void *)(v87 + 16);
          BOOL v44 = __OFADD__(v46, 1);
          uint64_t v45 = v46 + 1;
          if (v44) {
            goto LABEL_76;
          }
          goto LABEL_29;
        }
      }
      uint64_t v10 = *(void *)(v87 + 56) + 40 * v18;
      __swift_destroy_boxed_opaque_existential_1(v10);
      outlined init with take of ScrollStateRequest(&v91, v10);
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  unint64_t v85 = v87 + 64;
  uint64_t v47 = 1 << *(unsigned char *)(v87 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  unint64_t v49 = v48 & *(void *)(v87 + 64);
  unint64_t v50 = (unint64_t)(v47 + 63) >> 6;
  unint64_t v82 = v50 - 1;
  unint64_t v51 = 0;
  int64_t v86 = v50;
  uint64_t v83 = swift_bridgeObjectRetain() + 104;
  unint64_t v84 = v50 - 5;
  while (1)
  {
    if (v49)
    {
      unint64_t v53 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      unint64_t v54 = v53 | (v51 << 6);
      goto LABEL_38;
    }
    int64_t v56 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v56 >= v86)
    {
      unint64_t v58 = v51;
    }
    else
    {
      unint64_t v57 = *(void *)(v85 + 8 * v56);
      if (v57) {
        goto LABEL_42;
      }
      unint64_t v58 = v51 + 1;
      if ((uint64_t)(v51 + 2) < v86)
      {
        unint64_t v57 = *(void *)(v85 + 8 * (v51 + 2));
        if (v57)
        {
          int64_t v56 = v51 + 2;
          goto LABEL_42;
        }
        unint64_t v58 = v51 + 2;
        if ((uint64_t)(v51 + 3) < v86)
        {
          unint64_t v57 = *(void *)(v85 + 8 * (v51 + 3));
          if (v57)
          {
            int64_t v56 = v51 + 3;
LABEL_42:
            unint64_t v49 = (v57 - 1) & v57;
            unint64_t v54 = __clz(__rbit64(v57)) + (v56 << 6);
            unint64_t v51 = v56;
LABEL_38:
            uint64_t v55 = *(void *)(v87 + 56);
            *(void *)&long long v91 = *(void *)(*(void *)(v87 + 48) + 8 * v54);
            outlined init with copy of AnyTrackedValue(v55 + 40 * v54, (uint64_t)&v91 + 8);
            goto LABEL_45;
          }
          int64_t v56 = v51 + 4;
          unint64_t v58 = v51 + 3;
          if ((uint64_t)(v51 + 4) < v86)
          {
            unint64_t v57 = *(void *)(v85 + 8 * v56);
            if (v57) {
              goto LABEL_42;
            }
            while (v84 != v51)
            {
              unint64_t v57 = *(void *)(v83 + 8 * v51++);
              if (v57)
              {
                int64_t v56 = v51 + 4;
                goto LABEL_42;
              }
            }
            unint64_t v58 = v82;
          }
        }
      }
    }
    unint64_t v49 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    unint64_t v51 = v58;
    long long v91 = 0u;
LABEL_45:
    outlined init with take of (key: ObjectIdentifier, value: ScrollStateRequest)?((uint64_t)&v91, (uint64_t)&v94);
    if (!v97)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t v59 = v94;
    outlined init with take of ScrollStateRequest(&v95, (uint64_t)&v91);
    uint64_t v60 = *((void *)&v92 + 1);
    uint64_t v61 = v93;
    __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61))
    {
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = 0;
      uint64_t v63 = (uint64_t *)(v62 + 16);
      type metadata accessor for TransactionPropertyKey<AnimationKey>(0, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.DisabledPageScrollAnimationKey>);
      BloomFilter.init(hashValue:)(v64);
      uint64_t v65 = specialized find1<A>(_:key:filter:)(0, *(uint64_t *)&v90[0]);
      if (v65 && *(unsigned char *)(v65 + 72) == 1)
      {
        swift_beginAccess();
        uint64_t v66 = swift_retain();
        uint64_t v67 = specialized find<A>(_:key:)(v66);
        if (!v67 || *(void *)(v67 + 72))
        {
          uint64_t v68 = *v63;
          type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
          *(void *)(swift_allocObject() + 72) = 0;
          type metadata accessor for TransactionPropertyKey<AnimationKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
          unint64_t v69 = v51;
          Swift::Int v71 = v70;
          swift_retain();
          Swift::Int v72 = v71;
          unint64_t v51 = v69;
          *(SwiftUI::BloomFilter *)uint64_t v63 = PropertyList.Element.init(keyType:before:after:)(v72, 0, v68);
          swift_release();
        }
        swift_endAccess();
        swift_release();
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&v91, (uint64_t)v90);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v90, v59);
      swift_endAccess();
      uint64_t v73 = swift_allocObject();
      *(void *)(v73 + 16) = v62;
      long long v74 = v99;
      *(_OWORD *)(v73 + 24) = v98;
      *(_OWORD *)(v73 + 40) = v74;
      long long v75 = v101;
      *(_OWORD *)(v73 + 56) = v100;
      *(_OWORD *)(v73 + 72) = v75;
      *(void *)(v73 + 88) = v59;
      swift_retain();
      outlined retain of ScrollStateEnqueueRequests((uint64_t)&v98);
      specialized static Update.begin()();
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = partial apply for closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:);
      *(void *)(v76 + 24) = v73;
      uint64_t v77 = one-time initialization token for actions;
      swift_retain();
      if (v77 != -1) {
        swift_once();
      }
      unsigned int v78 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
      }
      unint64_t v80 = v78[2];
      unint64_t v79 = v78[3];
      if (v80 >= v79 >> 1) {
        unsigned int v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v80 + 1, 1, v78);
      }
      v78[2] = v80 + 1;
      long long v52 = &v78[2 * v80];
      v52[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      double v52[5] = v76;
      static Update.actions = v78;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release();
      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: ScrollStateRequest)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest)?(0, &lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest), MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *ScrollStateEnqueueRequests.adjustedUpdateRequests()()
{
  int v1 = *(unsigned __int8 *)AGGraphGetValue();
  int v2 = *MEMORY[0x263F288F8];
  if (*(_DWORD *)(v0 + 16) == *MEMORY[0x263F288F8])
  {
    uint64_t v3 = 0;
  }
  else
  {
    type metadata accessor for ScrollStateRequest?(0, &lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D488]);
    AGGraphGetValue();
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  if (v3) {
    uint64_t v4 = (void *)v3;
  }
  else {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  if (!v4[2] && *(_DWORD *)(v0 + 24) != v2)
  {
    type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)v20);
    if (*(unsigned __int8 *)(v0 + 52) == v1)
    {
      outlined destroy of UpdateScrollStateRequest?((uint64_t)v20, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    }
    else
    {
      outlined init with copy of Binding<ScrollPosition>((uint64_t)v20, (uint64_t)&v9);
      outlined init with copy of Binding<ScrollPosition>((uint64_t)&v9, (uint64_t)v14);
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 104))(1);
        outlined init with copy of ScrollPosition((uint64_t)&v11, (uint64_t)v12);
      }
      else
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v10 + 120))(v12);
      }
      outlined destroy of UpdateScrollStateRequest?((uint64_t)&v9, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
      outlined destroy of ScrollPosition.Storage((uint64_t)v12);
      *(void *)uint64_t v12 = 1;
      memset(&v12[8], 0, 48);
      *(_WORD *)&v12[56] = 1280;
      long long v18 = *(_OWORD *)&v12[48];
      long long v19 = v13;
      long long v16 = *(_OWORD *)&v12[16];
      long long v17 = *(_OWORD *)&v12[32];
      long long v15 = *(_OWORD *)v12;
      outlined init with copy of PositionedByUserScrollStateRequest((uint64_t)v14, (uint64_t)&v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v7 = v4[2];
      unint64_t v6 = v4[3];
      if (v7 >= v6 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
      }
      *(void *)&v12[24] = &type metadata for PositionedByUserScrollStateRequest;
      *(void *)&unsigned char v12[32] = &protocol witness table for PositionedByUserScrollStateRequest;
      *(void *)uint64_t v12 = swift_allocObject();
      outlined init with copy of PositionedByUserScrollStateRequest((uint64_t)&v9, *(void *)v12 + 16);
      v4[2] = v7 + 1;
      outlined init with take of ScrollStateRequest((long long *)v12, (uint64_t)&v4[5 * v7 + 4]);
      outlined destroy of PositionedByUserScrollStateRequest((uint64_t)&v9);
      outlined destroy of PositionedByUserScrollStateRequest((uint64_t)v14);
      outlined destroy of UpdateScrollStateRequest?((uint64_t)v20, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    }
  }
  *(unsigned char *)(v0 + 52) = v1;
  return v4;
}

void protocol witness for ScrollStateRequest.kind.getter in conformance UpdateScrollStateRequest(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 184);
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t specialized UpdateCycleDetector.dispatch(label:isDebug:)(char a1, uint64_t a2)
{
  AGGraphClearUpdate();
  int v4 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(a2 + 4) != v4)
  {
    *(_DWORD *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 8) = 2;
    return 1;
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    int v6 = v5 - 1;
    *(_DWORD *)(a2 + 8) = v6;
    if (v6) {
      return 1;
    }
  }
  if (*(unsigned char *)(a2 + 12)) {
    return 0;
  }
  if ((a1 & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x800000024621E040;
    v8._countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v8);
    specialized static Log.externalWarning(_:)(0x6F546C6C6F726353, 0xE800000000000000);
    swift_bridgeObjectRelease();
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 12) = 1;
  return result;
}

void type metadata accessor for (key: ObjectIdentifier, value: ScrollStateRequest)()
{
  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: ScrollStateRequest));
    }
  }
}

uint64_t specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v15[0] = AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]);
  lazy protocol witness table accessor for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor();
  int v4 = Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, 0xFF00000000uLL, (uint64_t)v13);
  swift_release();
  int v5 = *MEMORY[0x263F288F8];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v5, (uint64_t)v12);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v4, (uint64_t)v11);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, OffsetAttribute2, (uint64_t)v10);
  swift_release();
  int v6 = *(_DWORD *)(a2 + 28);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  v15[0] = OffsetAttribute2;
  v15[1] = v4;
  void v15[2] = v6;
  outlined init with copy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v15, (uint64_t)v14);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ScrollStateRequest?();
  lazy protocol witness table accessor for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest();
  int v7 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v14);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a2, v7, (uint64_t)v9);
  swift_release();
  return outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v15);
}

Swift::Void __swiftcall _GraphInputs.resetScrollPosition(kind:)(SwiftUI::ScrollStateInputKind kind)
{
  char v2 = *(unsigned char *)kind;
  swift_retain();
  if (v2)
  {
    specialized closure #1 in PropertyList.subscript.setter(v1, 0xFF00000000uLL, (uint64_t)v8);
    swift_release();
    int v3 = *MEMORY[0x263F288F8];
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v3, (uint64_t)v7);
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v1, 0xFF00000000uLL, (uint64_t)v6);
    swift_release();
    int v4 = *MEMORY[0x263F288F8];
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v1, v4, (uint64_t)v5);
  }
  swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPositionKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPositionKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPositionKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionKey);
}

Swift::Void __swiftcall ScrollPositionBindingModifier.MakeRequest.updateValue()()
{
  uint64_t v1 = v0;
  v47[10] = *MEMORY[0x263EF8340];
  AGGraphClearUpdate();
  outlined init with copy of ScrollPositionBindingModifier.MakeRequest(v0, (uint64_t)&v31);
  uint64_t v2 = *(void *)AGGraphGetValue();
  swift_retain();
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)&v31);
  AGGraphSetUpdate();
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**((void **)&v31 + 1) + 104))(1);
    outlined init with copy of ScrollPosition((uint64_t)&v32, (uint64_t)v47);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(**((void **)&v31 + 1) + 120))(v47);
  }
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  swift_release();
  outlined init with copy of ScrollPosition((uint64_t)v47, (uint64_t)v45);
  int v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined init with copy of Binding<ScrollPosition>(v1 + 16, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v45, (uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v6);
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v46, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v6);
  if (!(void)v35)
  {
    Swift::String v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
    outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v8);
    if (!(void)v40)
    {
      outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
      BOOL v7 = 1;
      goto LABEL_17;
    }
LABEL_14:
    _s7SwiftUI18ScrollStateRequest_pSgWOhTm_0((uint64_t)&v31, (uint64_t (*)(void))type metadata accessor for (ScrollPosition?, ScrollPosition?));
    BOOL v7 = 0;
    goto LABEL_17;
  }
  outlined init with copy of Binding<ScrollPosition>((uint64_t)&v31, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
  if (!(void)v40)
  {
    uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
    outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v9);
    outlined destroy of ScrollPosition((uint64_t)v30);
    goto LABEL_14;
  }
  _OWORD v28[2] = v38;
  v28[3] = v39;
  long long v29 = v40;
  v28[0] = v36;
  v28[1] = v37;
  BOOL v7 = (specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)v30, (uint64_t)v28) & 1) != 0
    && project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(v30[8], v29);
  outlined destroy of ScrollPosition((uint64_t)v28);
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  outlined destroy of Binding<ScrollPosition>((uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
  outlined destroy of Binding<ScrollPosition>((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v10);
  outlined destroy of ScrollPosition((uint64_t)v30);
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, v10);
LABEL_17:
  type metadata accessor for ScrollStateRequest?();
  uint64_t OutputValue = AGGraphGetOutputValue();
  if (!((OutputValue == 0) | v5 & 1) && !v7)
  {
    uint64_t v12 = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(v12, (uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]);
    uint64_t v13 = AGGraphGetValue();
    uint64_t v14 = v2;
    uint64_t v15 = *(void *)v13;
    uint64_t v16 = *(void *)(v13 + 8);
    char v17 = *(unsigned char *)(v13 + 16);
    uint64_t v18 = *(void *)(AGGraphGetValue() + 8);
    outlined init with copy of ScrollPosition((uint64_t)v47, (uint64_t)v46);
    v30[3] = &type metadata for ScrollToScrollStateRequest;
    v30[4] = &protocol witness table for ScrollToScrollStateRequest;
    long long v19 = (_OWORD *)swift_allocObject();
    v30[0] = v19;
    *((void *)&v44 + 1) = 0;
    outlined init with copy of Binding<ScrollPosition>((uint64_t)v45, (uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    *(void *)&long long v37 = v15;
    *((void *)&v37 + 1) = v16;
    LOBYTE(v38) = v17;
    *((void *)&v38 + 1) = v18;
    outlined init with copy of ScrollPosition((uint64_t)v46, (uint64_t)&v39);
    *(void *)&long long v44 = v14;
    swift_retain();
    outlined destroy of ScrollPosition((uint64_t)v46);
    outlined destroy of Binding<ScrollPosition>((uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    *((void *)&v44 + 1) = 0;
    long long v20 = v42;
    v19[11] = v41;
    v19[12] = v20;
    long long v21 = v38;
    v19[7] = v37;
    v19[8] = v21;
    long long v22 = v40;
    v19[9] = v39;
    v19[10] = v22;
    long long v23 = v34;
    _OWORD v19[3] = v33;
    v19[4] = v23;
    long long v24 = v36;
    v19[5] = v35;
    v19[6] = v24;
    long long v25 = v32;
    v19[1] = v31;
    void v19[2] = v25;
    long long v26 = v44;
    v19[13] = v43;
    v19[14] = v26;
    AGGraphSetOutputValue();
    uint64_t v27 = (long long *)v30;
LABEL_22:
    _s7SwiftUI18ScrollStateRequest_pSgWOhTm_0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ScrollStateRequest?);
    goto LABEL_23;
  }
  if ((OutputValue == 0 || v7) | v5 & 1)
  {
    *(void *)&long long v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    AGGraphSetOutputValue();
    uint64_t v27 = &v31;
    goto LABEL_22;
  }
LABEL_23:
  $defer #1 () in ScrollPositionBindingModifier.MakeRequest.updateValue()(v1);
  swift_release();
  outlined destroy of ScrollPosition((uint64_t)v47);
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, uint64_t))
{
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, a3, (uint64_t)&type metadata for ScrollPosition, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of Binding<ScrollPosition>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, a2, (uint64_t)&type metadata for ScrollPosition, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of ScrollStateRequest?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ScrollStateRequest?(0, a2, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI18ScrollStateRequest_pSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ScrollStateRequest?()
{
  if (!lazy cache variable for type metadata for ScrollStateRequest?)
  {
    type metadata accessor for ScrollStateRequest();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?);
    }
  }
}

uint64_t $defer #1 () in ScrollPositionBindingModifier.MakeRequest.updateValue()(uint64_t a1)
{
  outlined init with copy of ScrollPositionBindingModifier.MakeRequest(a1, (uint64_t)v7);
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)&v4, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  outlined destroy of ScrollPositionBindingModifier.MakeRequest((uint64_t)v7);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 104))(1);
    outlined init with copy of ScrollPosition((uint64_t)&v6, (uint64_t)v8);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*(void *)v5 + 120))(v8);
  }
  outlined destroy of Binding<ScrollPosition>((uint64_t)&v4, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  return outlined assign with take of Binding<ScrollPosition>((uint64_t)v8, a1 + 16, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, MEMORY[0x263F8D8F0]);
}

uint64_t outlined destroy of ScrollPositionBindingModifier.MakeRequest(uint64_t a1)
{
  if (*(void *)(a1 + 80) && !*(unsigned char *)(a1 + 73)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return a1;
}

uint64_t outlined init with copy of ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 80);
  if (v6)
  {
    if (*(unsigned char *)(a2 + 73))
    {
      long long v7 = v5[1];
      *uint64_t v4 = *v5;
      v4[1] = v7;
      v4[2] = v5[2];
      *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v5 + 42);
    }
    else
    {
      long long v10 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v10;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v4, v5);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(unsigned char *)(a1 + 73) = 0;
      uint64_t v6 = *(void *)(a2 + 80);
    }
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = v11;
  }
  else
  {
    long long v8 = v5[3];
    v4[2] = v5[2];
    v4[3] = v8;
    v4[4] = v5[4];
    long long v9 = v5[1];
    *uint64_t v4 = *v5;
    v4[1] = v9;
  }
  return a1;
}

uint64_t outlined assign with take of Binding<ScrollPosition>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, uint64_t))
{
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, a3, (uint64_t)&type metadata for ScrollPosition, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t _GraphInputs.updateScrollStateRequest.setter(int a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollStateRequestKey>, (uint64_t)&type metadata for _GraphInputs.ScrollStateRequestKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollStateRequestKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPositionAnchorKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), (unint64_t *)&lazy cache variable for type metadata for TypedElement<_ViewInputs.ScrapeableParentID>, (uint64_t)&type metadata for _ViewInputs.ScrapeableParentID, (uint64_t)&protocol witness table for _ViewInputs.ScrapeableParentID);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.ContentScrollPositionAnchorKey>, (uint64_t)&type metadata for _GraphInputs.ContentScrollPositionAnchorKey, (uint64_t)&protocol witness table for _GraphInputs.ContentScrollPositionAnchorKey);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), (unint64_t *)&lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPhaseStateKey>, (uint64_t)&type metadata for _GraphInputs.ScrollPhaseStateKey, (uint64_t)&protocol witness table for _GraphInputs.ScrollPhaseStateKey);
}

Swift::Void __swiftcall _GraphInputs.convertScrollStateInputsToContent()()
{
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    unint64_t v3 = *(unsigned int *)(v2 + 72) | ((unint64_t)*(unsigned __int8 *)(v2 + 76) << 32);
  }
  else {
    unint64_t v3 = 0xFF00000000;
  }
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v3, (uint64_t)v9);
  swift_release();
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = (int *)(v5 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v6 = &static _GraphInputs.ScrollPositionAnchorKey.defaultValue;
  }
  int v7 = *v6;
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v7, (uint64_t)v8);
  swift_release();
}

uint64_t _ViewInputs.scrapeableParentID.setter(int *a1)
{
  int v2 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, (uint64_t)&v4);
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a4(*a1);
  if (!result || *(_DWORD *)(result + 72) != a2)
  {
    uint64_t v13 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(_DWORD *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v13);
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(255, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x263F288C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>);
  }
  return result;
}

uint64_t static ScrollPhaseStateConfigurationModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(void *__return_ptr, uint64_t, Swift::UInt *)@<X2>, void *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  int v13 = *(_DWORD *)(a1 + 80);
  LOBYTE(v26) = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v14 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (!v16 || (Swift::UInt value = v3, v14 != *(_DWORD *)(v16 + 72)))
  {
    type metadata accessor for TypedElement<_GraphInputs.ScrollPhaseStateKey>();
    *(_DWORD *)(swift_allocObject() + 72) = v14;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.ScrollPhaseStateKey, 0, v3).value;
  }
  swift_release();
  Swift::UInt v26 = value;
  LODWORD(v27) = v4;
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  uint64_t v31 = v9;
  uint64_t v32 = v8;
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  uint64_t v35 = v12;
  int v36 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_bridgeObjectRetain();
  a2(v25, v18, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v19 = *(void *)(v8 + 16);
  if (v19)
  {
    uint64_t v20 = 32;
    while (*(ValueMetadata **)(v8 + v20) != &type metadata for ScrollPhasePreferenceKey)
    {
      v20 += 16;
      if (!--v19) {
        goto LABEL_8;
      }
    }
    LODWORD(v26) = v14;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, (unint64_t *)&lazy cache variable for type metadata for [ScrollPhaseState], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type ScrollPhaseProvider and conformance ScrollPhaseProvider();
    swift_bridgeObjectRetain();
    unsigned int v22 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v26) = 0;
    PreferencesOutputs.subscript.setter(v22, &type metadata for ScrollPhasePreferenceKey, (uint64_t)&protocol witness table for ScrollPhasePreferenceKey);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  *a3 = v25[0];
  a3[1] = v25[1];
  return result;
}

uint64_t _GraphInputs.scrollPhaseState.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = &static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

void type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for ScrollPhaseState);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for TypedElement<_GraphInputs.ScrollPhaseStateKey>()
{
  if (!lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPhaseStateKey>)
  {
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_GraphInputs.ScrollPhaseStateKey>);
    }
  }
}

void type metadata accessor for (ScrollPosition?, ScrollPosition?)()
{
  if (!lazy cache variable for type metadata for (ScrollPosition?, ScrollPosition?))
  {
    _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ScrollPosition?, (uint64_t)&type metadata for ScrollPosition, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrollPosition?, ScrollPosition?));
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollPhaseProvider and conformance ScrollPhaseProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider;
  if (!lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhaseProvider and conformance ScrollPhaseProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor;
  if (!lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPositionBindingModifier.AdjustedAnchor and conformance ScrollPositionBindingModifier.AdjustedAnchor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest;
  if (!lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPositionBindingModifier.MakeRequest and conformance ScrollPositionBindingModifier.MakeRequest);
  }
  return result;
}

unint64_t type metadata accessor for ScrollStateRequest()
{
  unint64_t result = lazy cache variable for type metadata for ScrollStateRequest;
  if (!lazy cache variable for type metadata for ScrollStateRequest)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
  }
  return result;
}

void static AccessibilityTraits.isModal.getter(void *a1@<X8>)
{
  *a1 = 0x4000;
}

ValueMetadata *type metadata accessor for EmptyAnimatableData()
{
  return &type metadata for EmptyAnimatableData;
}

uint64_t static VerticalAlignment.bottom.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for bottom, (uint64_t)&static VerticalAlignment.bottom);
}

uint64_t static Binding.constant(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConstantLocation();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - v15;
  char v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v17(v8, a1, a2, v14);
  CodableRawRepresentable.init(_:)((uint64_t)v8, a2, (uint64_t)v16);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v8, a1, a2);
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, v9);
  uint64_t v18 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  return Binding.init(value:location:)((uint64_t)v8, v18, a3);
}

uint64_t CodableRawRepresentable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t type metadata accessor for ConstantLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyTransition.SecondVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  v15[0] = *(void *)(a2 + 16);
  v15[1] = a3;
  void v15[2] = v8;
  void v15[3] = a4;
  uint64_t v9 = type metadata accessor for CombiningTransition();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v15 - v10;
  Transition.combined<A>(with:)(a1, v15[0], a3, (uint64_t)v15 - v10);
  swift_getWitnessTable();
  uint64_t v12 = AnyTransition.init<A>(_:)((uint64_t)v11);
  uint64_t v13 = *(int *)(a2 + 36);
  uint64_t result = swift_release();
  *(void *)(v4 + v13) = v12;
  return result;
}

uint64_t static AnyTransition.modifier<A>(active:identity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = type metadata accessor for ModifierTransition();
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v16(v11, a1, a3, v13);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v8, a2, a3);
  char v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v17(v15, v11, a3);
  v17(&v15[*(int *)(v12 + 36)], v8, a3);
  swift_getWitnessTable();
  return AnyTransition.init<A>(_:)((uint64_t)v15);
}

uint64_t AnyTransition.RemovalVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v27[1] = a4;
  uint64_t v29 = a1;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v28 = v10;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v30 = v11;
  uint64_t v31 = v18;
  uint64_t v32 = v17;
  uint64_t v33 = v19;
  uint64_t v20 = type metadata accessor for AsymmetricTransition();
  double v21 = MEMORY[0x270FA5388](v20);
  long long v23 = (char *)v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v5, v11, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, a3);
  AsymmetricTransition.init(insertion:removal:)((uint64_t)v15, (uint64_t)v9, v11, a3, (uint64_t)v23);
  swift_getWitnessTable();
  uint64_t v24 = AnyTransition.init<A>(_:)((uint64_t)v23);
  uint64_t v25 = *(int *)(v28 + 36);
  uint64_t result = swift_release();
  *(void *)(v5 + v25) = v24;
  return result;
}

uint64_t Transition.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v9 + 16))(v12, v4, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a3);
  uint64_t v13 = (void *)(a4 + *(int *)(type metadata accessor for FilteredTransition() + 36));
  *uint64_t v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t AnyTransition.FilterVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FilteredTransition();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v10 - v6;
  Transition.transaction(_:)(*v3, v3[1], a2, (uint64_t)&v10 - v6);
  swift_getWitnessTable();
  uint64_t v8 = AnyTransition.init<A>(_:)((uint64_t)v7);
  uint64_t result = swift_release();
  v3[2] = v8;
  return result;
}

uint64_t type metadata accessor for FilteredTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyTransition.init<A>(_:)(uint64_t a1)
{
  return FontBox.__allocating_init(_:)(a1);
}

uint64_t FontBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 120) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 136), a1);
  return v2;
}

uint64_t AsymmetricTransition.init(insertion:removal:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for AsymmetricTransition();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for AsymmetricTransition()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ModifierTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Transition.combined<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return CombiningTransition.init(transition1:transition2:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t CombiningTransition.init(transition1:transition2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for CombiningTransition();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for CombiningTransition()
{
  return swift_getGenericMetadata();
}

uint64_t View.transaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return View.modifier<A>(_:)(v4, a3, &type metadata for _TransactionModifier);
}

uint64_t CanvasDisplayList.init(identity:view:position:containerPosition:size:transform:environment:symbols:lastBounds:isFlattened:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, char a14)
{
  *(_DWORD *)a9 = *a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  *(_DWORD *)(a9 + 28) = a8;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v19 = swift_allocObject();
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v21 = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = v21;
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(result + 40) = v21;
  *(void *)(result + 48) = v22;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(v19 + 16) = result;
  *(void *)(a9 + 32) = v19;
  *(double *)(a9 + 40) = a10;
  *(double *)(a9 + 48) = a11;
  *(double *)(a9 + 56) = a12;
  *(double *)(a9 + 64) = a13;
  *(unsigned char *)(a9 + 72) = a14;
  return result;
}

id static Canvas._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned __int8 v153 = a3;
  uint64_t v181 = *MEMORY[0x263EF8340];
  unsigned int v152 = *a1;
  long long v6 = a2[3];
  long long v175 = a2[2];
  long long v176 = v6;
  long long v177 = a2[4];
  int v178 = *((_DWORD *)a2 + 20);
  long long v7 = a2[1];
  long long v173 = *a2;
  long long v174 = v7;
  uint64_t v156 = MEMORY[0x263F8EE78];
  int v8 = *MEMORY[0x263F288F8];
  LODWORD(v157) = 0;
  HIDWORD(v157) = v8;
  int v159 = DWORD2(v6);
  uint64_t v158 = v6;
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v154 = a4;
  uint64_t v150 = v6;
  if (!v9)
  {
LABEL_5:
    uint64_t v12 = 0;
    goto LABEL_49;
  }
  uint64_t v10 = (ValueMetadata **)(v176 + 32);
  uint64_t v11 = v9;
  while (*v10 != &type metadata for DisplayList.Key)
  {
    v10 += 2;
    if (!--v11) {
      goto LABEL_5;
    }
  }
  LODWORD(v139) = v8;
  uint64_t v13 = v173;
  uint64_t v14 = v174;
  LODWORD(v141) = DWORD2(v173);
  LODWORD(v142) = HIDWORD(v174);
  LODWORD(v143) = DWORD2(v174);
  LODWORD(v147) = DWORD1(v175);
  LODWORD(v146) = v175;
  uint64_t v15 = *((void *)&v175 + 1);
  outlined retain of _ViewInputs((uint64_t)&v173);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized find<A>(_:key:)(v13);
  uint64_t v151 = a5;
  if (v16) {
    LODWORD(v148) = *(unsigned __int8 *)(v16 + 72);
  }
  else {
    LODWORD(v148) = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  outlined release of _ViewInputs((uint64_t)&v173);
  *(void *)&long long v145 = v14 + 16;
  uint64_t v17 = swift_beginAccess();
  LODWORD(v160) = *(_DWORD *)(v14 + 16);
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = v153;
  *(void *)&long long v149 = v13;
  uint64_t v140 = v15;
  uint64_t v19 = v154;
  uint64_t v133 = type metadata accessor for Canvas.ChildEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  uint64_t v22 = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v160, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v132, v133, MEMORY[0x263F8E628], v20, MEMORY[0x263F8E658], v21);
  uint64_t v138 = 0;
  LODWORD(v144) = v168;
  if (v18 == &type metadata for EmptyView)
  {
    LODWORD(v146) = v139;
  }
  else
  {
    Swift::UInt32 v137 = &v135;
    MEMORY[0x270FA5388](v22);
    uint64_t v133 = (uint64_t)v18;
    uint64_t WitnessTable = v19;
    LODWORD(v160) = v152;
    type metadata accessor for Canvas();
    type metadata accessor for _GraphValue();
    uint64_t v23 = v149;
    swift_retain();
    swift_retain();
    uint64_t v24 = v140;
    swift_bridgeObjectRetain();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static Canvas._makeView(view:inputs:), (uint64_t)v18, &v168);
    int v25 = v168;
    uint64_t v26 = v24;
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    v179[0] = v25;
    *(void *)&long long v160 = v23;
    DWORD2(v160) = v141;
    *(void *)&long long v161 = v14;
    *((void *)&v161 + 1) = __PAIR64__(v142, v143);
    *(void *)&v162[0] = __PAIR64__(v147, v146);
    LODWORD(v136) = v25;
    unsigned int v27 = v147;
    v162[1] = 0uLL;
    *((void *)&v162[0] + 1) = v24;
    int v28 = v139;
    LODWORD(v162[2]) = v139;
    *((void *)&v162[2] + 1) = MEMORY[0x263F8EE88];
    LOBYTE(v163) = 0;
    uint64_t v29 = v154;
    (*(void (**)(void *__return_ptr, _DWORD *, long long *, ValueMetadata *, uint64_t))(v154 + 32))(v172, v179, &v160, v18, v154);
    uint64_t v30 = v29;
    uint64_t v31 = v149;
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v136, v18, v30);
    *(void *)&long long v160 = v31;
    DWORD2(v160) = v141;
    *(void *)&long long v141 = v14;
    *(void *)&long long v161 = v14;
    *((void *)&v161 + 1) = __PAIR64__(v142, v143);
    int v32 = v146;
    *(void *)&v162[0] = __PAIR64__(v27, v146);
    v162[1] = 0uLL;
    *((void *)&v162[0] + 1) = v26;
    LODWORD(v162[2]) = v28;
    *((void *)&v162[2] + 1) = MEMORY[0x263F8EE88];
    LOBYTE(v163) = 0;
    LODWORD(v142) = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v160);
    uint64_t v33 = specialized static ViewGraph.current.getter();
    v170[1] = v176;
    v170[2] = v177;
    long long v169 = v174;
    v170[0] = v175;
    int v171 = v178;
    long long v168 = v173;
    LODWORD(v170[2]) = *(_DWORD *)(v33 + 248);
    DWORD1(v170[2]) = v170[2];
    uint64_t v180 = 0;
    memset(v179, 0, sizeof(v179));
    outlined retain of _ViewInputs((uint64_t)&v173);
    HIDWORD(v170[1]) = specialized GraphHost.intern<A>(_:for:id:)((uint64_t)v179, (Swift::UInt)&type metadata for ViewTransform, 0);
    LODWORD(v170[0]) = v32 | 0xC;
    uint64_t v34 = MEMORY[0x263F8EE78];
    int v35 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x263F8EE78], (Swift::UInt)&type metadata for PreferenceKeys, 0);
    outlined release of LinearGradient((uint64_t)&v158);
    *(void *)&v170[1] = v34;
    DWORD2(v170[1]) = v35;
    specialized PreferencesInputs.add<A>(_:)();
    DWORD1(v170[0]) = v27 | 0x22;
    uint64_t v143 = v33;
    LODWORD(v137) = v27 | 0x22;
    if (v148)
    {
      uint64_t v36 = v169;
      uint64_t v14 = v141;
    }
    else
    {
      uint64_t v37 = swift_retain();
      uint64_t v38 = specialized find<A>(_:key:)(v37);
      if (!v38 || *(unsigned char *)(v38 + 72) != 1)
      {
        type metadata accessor for TypedElement<UsingGraphicsRenderer>();
        *(unsigned char *)(swift_allocObject() + 72) = 1;
        *(SwiftUI::BloomFilter *)&long long v168 = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for UsingGraphicsRenderer, 0, v31);
      }
      swift_release();
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(v34);
      _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
      uint64_t v36 = swift_allocObject();
      *(_DWORD *)(v36 + 16) = v144;
      *(void *)(v36 + 24) = v34;
      *(_OWORD *)(v36 + 32) = 0u;
      *(_OWORD *)(v36 + 48) = 0u;
      *(_OWORD *)(v36 + 64) = 0u;
      *(_WORD *)(v36 + 80) = 256;
      *(void *)(v36 + 88) = v39;
      uint64_t v14 = v141;
      swift_release();
      *(void *)&long long v169 = v36;
      if ((v146 & 0x20) == 0) {
        LODWORD(v170[0]) = v146 | 0x2C;
      }
    }
    uint64_t v40 = v168;
    uint64_t v41 = *((void *)&v169 + 1);
    int v42 = DWORD2(v168);
    unsigned int v43 = v170[0];
    uint64_t v44 = *((void *)&v170[0] + 1);
    uint64_t v45 = *(void *)&v170[1];
    long long v141 = *(_OWORD *)((char *)&v170[1] + 8);
    uint64_t v46 = *((void *)&v170[2] + 1);
    LODWORD(v146) = v171;
    id result = (id)AGSubgraphGetCurrent();
    if (!result)
    {
      __break(1u);
      goto LABEL_87;
    }
    LODWORD(v160) = v142;
    *((void *)&v160 + 1) = v40;
    uint64_t v135 = v44;
    uint64_t v136 = v40;
    LODWORD(v161) = v42;
    *((void *)&v161 + 1) = v36;
    *(void *)&v162[0] = v41;
    *((void *)&v162[0] + 1) = __PAIR64__(v137, v43);
    *(void *)&v162[1] = v44;
    *((void *)&v162[1] + 1) = v45;
    v162[2] = v141;
    uint64_t v163 = v46;
    id v165 = result;
    uint64_t v166 = MEMORY[0x263F8EE80];
    int v164 = v146;
    int v167 = 0;
    *(void *)&long long v142 = result;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LODWORD(v146) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v172);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  Swift::UInt32 v48 = ++lastIdentity;
  a5 = v151;
  char v49 = v147;
  if ((v147 & 0x100) == 0) {
    goto LABEL_23;
  }
  outlined retain of _ViewInputs((uint64_t)&v173);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v173);
  id result = (id)AGWeakAttributeGetAttribute();
  if (result == v139)
  {
LABEL_87:
    __break(1u);
    return result;
  }
  LODWORD(v168) = v48;
  uint64_t v127 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
  _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v168);
  v127(&v160, 0);
LABEL_23:
  v155[0] = v48;
  swift_beginAccess();
  if ((v49 & 0x20) != 0)
  {
    uint64_t v143 = v173;
    *(void *)&long long v142 = v174;
    int v54 = DWORD2(v173);
    unsigned int v55 = DWORD2(v174);
    *(void *)&long long v141 = *((void *)&v175 + 1);
    uint64_t v56 = v175;
    uint64_t v57 = *((void *)&v176 + 1);
    uint64_t v139 = v176;
    *(void *)&long long v50 = v177;
    long long v149 = v50;
    *(void *)&long long v50 = *((void *)&v177 + 1);
    long long v147 = v50;
    v162[0] = v175;
    v162[1] = v176;
    v162[2] = v177;
    LODWORD(v140) = v178;
    LODWORD(v163) = v178;
    long long v160 = v173;
    long long v161 = v174;
    outlined retain of _ViewInputs((uint64_t)&v173);
    unsigned int v58 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v60 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v14 + 81) & 1) == 0
      && v149 == *(_DWORD *)(v14 + 32)
      && v147 == *(_DWORD *)(v14 + 36)
      && v60 == *(_DWORD *)(v14 + 40)
      && v54 == *(_DWORD *)(v14 + 44)
      && v58 == *(_DWORD *)(v14 + 48)
      && v55 == *(_DWORD *)(v14 + 52))
    {
      if ((*(unsigned char *)(v14 + 64) & 1) == 0)
      {
        uint64_t v140 = *(unsigned int *)(v14 + 60);
        goto LABEL_36;
      }
    }
    else
    {
      *(void *)&long long v160 = v143;
      DWORD2(v160) = v54;
      *(void *)&long long v161 = v142;
      *((void *)&v161 + 1) = __PAIR64__(v58, v55);
      *(void *)&v162[0] = v56;
      *((void *)&v162[0] + 1) = v141;
      *(void *)&v162[1] = v139;
      *((void *)&v162[1] + 1) = v57;
      *(void *)&v162[2] = v149;
      *((void *)&v162[2] + 1) = v147;
      LODWORD(v163) = v140;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v60, (uint64_t)&v168);
      long long v61 = v169;
      uint64_t v62 = LOBYTE(v170[0]);
      unsigned __int8 v63 = v170[1];
      unint64_t v64 = LOBYTE(v170[0]) | ((unint64_t)DWORD1(v170[0]) << 32);
      unint64_t v65 = BYTE8(v170[0]) | ((unint64_t)HIDWORD(v170[0]) << 32);
      *(_OWORD *)(v14 + 32) = v168;
      *(_OWORD *)(v14 + 48) = v61;
      *(void *)(v14 + 64) = v64;
      *(void *)(v14 + 72) = v65;
      *(_WORD *)(v14 + 80) = v63;
      if (v62 != 1)
      {
        uint64_t v140 = HIDWORD(*((void *)&v61 + 1));
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v139 = v173;
        *(void *)&long long v149 = v174;
        int v66 = DWORD2(v173);
        unsigned int v67 = DWORD2(v174);
        *(void *)&long long v147 = *((void *)&v175 + 1);
        uint64_t v68 = v175;
        uint64_t v69 = *((void *)&v176 + 1);
        uint64_t v143 = v176;
        *(void *)&long long v70 = *((void *)&v177 + 1);
        *(void *)&long long v71 = v177;
        long long v141 = v70;
        long long v142 = v71;
        int v72 = v178;
        v162[0] = v175;
        v162[1] = v176;
        v162[2] = v177;
        LODWORD(v163) = v178;
        long long v160 = v173;
        long long v161 = v174;
        outlined retain of _ViewInputs((uint64_t)&v173);
        unsigned int v73 = _ViewInputs.geometryTransaction()();
        uint64_t v74 = swift_getKeyPath();
        int v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
        swift_release();
        if ((*(unsigned char *)(v14 + 81) & 1) == 0
          && v142 == *(_DWORD *)(v14 + 32)
          && v141 == *(_DWORD *)(v14 + 36)
          && v75 == *(_DWORD *)(v14 + 40)
          && v66 == *(_DWORD *)(v14 + 44)
          && v73 == *(_DWORD *)(v14 + 48)
          && v67 == *(_DWORD *)(v14 + 52))
        {
          a5 = v151;
          int v53 = v146;
          if ((*(unsigned char *)(v14 + 80) & 1) == 0)
          {
            int OffsetAttribute2 = *(_DWORD *)(v14 + 76);
            goto LABEL_47;
          }
        }
        else
        {
          *(void *)&long long v160 = v139;
          DWORD2(v160) = v66;
          *(void *)&long long v161 = v149;
          *((void *)&v161 + 1) = __PAIR64__(v73, v67);
          *(void *)&v162[0] = v68;
          *((void *)&v162[0] + 1) = v147;
          *(void *)&v162[1] = v143;
          *((void *)&v162[1] + 1) = v69;
          *(void *)&v162[2] = v142;
          *((void *)&v162[2] + 1) = v141;
          LODWORD(v163) = v72;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v75, (uint64_t)&v168);
          int OffsetAttribute2 = HIDWORD(v170[0]);
          int v76 = LOBYTE(v170[1]);
          unint64_t v77 = LOBYTE(v170[0]) | ((unint64_t)DWORD1(v170[0]) << 32);
          unint64_t v78 = BYTE8(v170[0]) | ((unint64_t)HIDWORD(v170[0]) << 32);
          long long v79 = v169;
          *(_OWORD *)(v14 + 32) = v168;
          *(_OWORD *)(v14 + 48) = v79;
          *(void *)(v14 + 64) = v77;
          *(void *)(v14 + 72) = v78;
          *(_WORD *)(v14 + 80) = v76;
          a5 = v151;
          int v53 = v146;
          if (v76 != 1) {
            goto LABEL_47;
          }
        }
        int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v14 + 76) = OffsetAttribute2;
        *(unsigned char *)(v14 + 80) = 0;
LABEL_47:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v51 = v140;
        goto LABEL_48;
      }
    }
    uint64_t v140 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v14 + 60) = v140;
    *(unsigned char *)(v14 + 64) = 0;
    goto LABEL_36;
  }
  int v51 = v177;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v53 = v146;
LABEL_48:
  swift_endAccess();
  double v80 = *MEMORY[0x263F00190];
  double v81 = *(double *)(MEMORY[0x263F00190] + 8);
  double v82 = *(double *)(MEMORY[0x263F00190] + 16);
  double v83 = *(double *)(MEMORY[0x263F00190] + 24);
  uint64_t v129 = v153;
  uint64_t v84 = CanvasDisplayList.init(identity:view:position:containerPosition:size:transform:environment:symbols:lastBounds:isFlattened:)(v155, v152, v51, SDWORD1(v177), OffsetAttribute2, SHIDWORD(v176), v144, v53, (uint64_t)&v160, v80, v81, v82, v83, v148);
  long long v168 = v160;
  long long v169 = v161;
  *(void *)&v170[0] = *(void *)&v162[0];
  *(_OWORD *)((char *)v170 + 8) = *(_OWORD *)((char *)v162 + 8);
  *(_OWORD *)((char *)&v170[1] + 8) = *(_OWORD *)((char *)&v162[1] + 8);
  BYTE8(v170[2]) = BYTE8(v162[2]);
  MEMORY[0x270FA5388](v84);
  uint64_t v130 = type metadata accessor for CanvasDisplayList();
  uint64_t v131 = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
  uint64_t v12 = v138;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v168, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v128, v130, MEMORY[0x263F8E628], v85, MEMORY[0x263F8E658], v86);
  swift_release();
  LOBYTE(v160) = 0;
  PreferencesOutputs.subscript.setter(LODWORD(v172[0]), &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
LABEL_49:
  uint64_t v87 = v174;
  char v88 = BYTE4(v175);
  swift_beginAccess();
  uint64_t v146 = v12;
  if ((v88 & 0x20) != 0)
  {
    uint64_t v151 = a5;
    *(void *)&long long v147 = v173;
    uint64_t v144 = v174;
    int v92 = DWORD2(v173);
    unsigned int v93 = DWORD2(v174);
    uint64_t v94 = v175;
    uint64_t v148 = v176;
    *(void *)&long long v149 = *((void *)&v175 + 1);
    uint64_t v95 = *((void *)&v176 + 1);
    *(void *)&long long v89 = v177;
    long long v145 = v89;
    *(void *)&long long v89 = *((void *)&v177 + 1);
    long long v142 = v89;
    int v96 = v178;
    v162[0] = v175;
    v162[1] = v176;
    v162[2] = v177;
    LODWORD(v163) = v178;
    long long v160 = v173;
    long long v161 = v174;
    outlined retain of _ViewInputs((uint64_t)&v173);
    unsigned int v97 = _ViewInputs.geometryTransaction()();
    uint64_t v98 = swift_getKeyPath();
    uint64_t v143 = v87 + 16;
    int v99 = specialized CachedEnvironment.attribute<A>(keyPath:)(v98);
    swift_release();
    if ((*(unsigned char *)(v87 + 81) & 1) == 0
      && v145 == *(_DWORD *)(v87 + 32)
      && v142 == *(_DWORD *)(v87 + 36)
      && v99 == *(_DWORD *)(v87 + 40)
      && v92 == *(_DWORD *)(v87 + 44)
      && v97 == *(_DWORD *)(v87 + 48)
      && v93 == *(_DWORD *)(v87 + 52))
    {
      if ((*(unsigned char *)(v87 + 72) & 1) == 0)
      {
        *(void *)&long long v145 = *(unsigned int *)(v87 + 68);
LABEL_62:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v144 = v173;
        int v105 = DWORD2(v173);
        unsigned int v106 = DWORD2(v174);
        uint64_t v148 = *((void *)&v175 + 1);
        uint64_t v107 = v175;
        *(void *)&long long v149 = v174;
        uint64_t v108 = *((void *)&v176 + 1);
        *(void *)&long long v147 = v176;
        *(void *)&long long v109 = *((void *)&v177 + 1);
        *(void *)&long long v110 = v177;
        long long v141 = v109;
        long long v142 = v110;
        int v111 = v178;
        v162[0] = v175;
        v162[1] = v176;
        v162[2] = v177;
        LODWORD(v163) = v178;
        long long v160 = v173;
        long long v161 = v174;
        outlined retain of _ViewInputs((uint64_t)&v173);
        unsigned int v112 = _ViewInputs.geometryTransaction()();
        uint64_t v113 = swift_getKeyPath();
        int v114 = specialized CachedEnvironment.attribute<A>(keyPath:)(v113);
        swift_release();
        if ((*(unsigned char *)(v87 + 81) & 1) == 0
          && v142 == *(_DWORD *)(v87 + 32)
          && v141 == *(_DWORD *)(v87 + 36)
          && v114 == *(_DWORD *)(v87 + 40)
          && v105 == *(_DWORD *)(v87 + 44)
          && v112 == *(_DWORD *)(v87 + 48)
          && v106 == *(_DWORD *)(v87 + 52))
        {
          a5 = v151;
          if ((*(unsigned char *)(v87 + 64) & 1) == 0)
          {
            LODWORD(v91) = *(_DWORD *)(v87 + 60);
LABEL_74:
            int v90 = v145;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)&long long v160 = v144;
          DWORD2(v160) = v105;
          *(void *)&long long v161 = v149;
          *((void *)&v161 + 1) = __PAIR64__(v112, v106);
          *(void *)&v162[0] = v107;
          *((void *)&v162[0] + 1) = v148;
          *(void *)&v162[1] = v147;
          *((void *)&v162[1] + 1) = v108;
          *(void *)&v162[2] = v142;
          *((void *)&v162[2] + 1) = v141;
          LODWORD(v163) = v111;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v114, (uint64_t)&v168);
          long long v115 = v169;
          uint64_t v116 = LOBYTE(v170[0]);
          unsigned __int8 v117 = v170[1];
          unint64_t v118 = LOBYTE(v170[0]) | ((unint64_t)DWORD1(v170[0]) << 32);
          unint64_t v119 = BYTE8(v170[0]) | ((unint64_t)HIDWORD(v170[0]) << 32);
          *(_OWORD *)(v87 + 32) = v168;
          *(_OWORD *)(v87 + 48) = v115;
          *(void *)(v87 + 64) = v118;
          *(void *)(v87 + 72) = v119;
          *(_WORD *)(v87 + 80) = v117;
          a5 = v151;
          if (v116 != 1)
          {
            uint64_t v91 = HIDWORD(*((void *)&v115 + 1));
            goto LABEL_74;
          }
        }
        LODWORD(v91) = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v87 + 60) = v91;
        *(unsigned char *)(v87 + 64) = 0;
        goto LABEL_74;
      }
    }
    else
    {
      *(void *)&long long v160 = v147;
      DWORD2(v160) = v92;
      *(void *)&long long v161 = v144;
      *((void *)&v161 + 1) = __PAIR64__(v97, v93);
      *(void *)&v162[0] = v94;
      *((void *)&v162[0] + 1) = v149;
      *(void *)&v162[1] = v148;
      *((void *)&v162[1] + 1) = v95;
      *(void *)&v162[2] = v145;
      *((void *)&v162[2] + 1) = v142;
      LODWORD(v163) = v96;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v160, v99, (uint64_t)&v168);
      uint64_t v100 = BYTE8(v170[0]);
      unsigned __int8 v101 = v170[1];
      *(void *)&long long v145 = DWORD1(v170[0]);
      unint64_t v102 = LOBYTE(v170[0]) | ((unint64_t)DWORD1(v170[0]) << 32);
      unint64_t v103 = BYTE8(v170[0]) | ((unint64_t)HIDWORD(v170[0]) << 32);
      long long v104 = v169;
      *(_OWORD *)(v87 + 32) = v168;
      *(_OWORD *)(v87 + 48) = v104;
      *(void *)(v87 + 64) = v102;
      *(void *)(v87 + 72) = v103;
      *(_WORD *)(v87 + 80) = v101;
      if (v100 != 1) {
        goto LABEL_62;
      }
    }
    *(void *)&long long v145 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v87 + 68) = v145;
    *(unsigned char *)(v87 + 72) = 0;
    goto LABEL_62;
  }
  int v90 = DWORD2(v177);
  LODWORD(v91) = v177;
LABEL_75:
  swift_endAccess();
  int v120 = HIDWORD(v176);
  type metadata accessor for Canvas();
  uint64_t v121 = LeafResponderFilter.init(data:size:position:transform:)(v152, v90, v91, v120, (uint64_t)&v160);
  if (v9)
  {
    uint64_t v122 = (ValueMetadata **)(v150 + 32);
    while (*v122 != &type metadata for ViewRespondersKey)
    {
      v122 += 2;
      if (!--v9) {
        goto LABEL_81;
      }
    }
    MEMORY[0x270FA5388](v121);
    uint64_t v123 = type metadata accessor for LeafResponderFilter();
    uint64_t v130 = v123;
    uint64_t v131 = swift_getWitnessTable();
    outlined retain of LinearGradient((uint64_t)&v158);
    _sSay7SwiftUI13ViewResponderCGMaTm_2(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x263F28898]);
    uint64_t v125 = v124;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v160, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v128, v123, MEMORY[0x263F8E628], v125, MEMORY[0x263F8E658], v126);
    swift_release();
    LOBYTE(v160) = 0;
    PreferencesOutputs.subscript.setter(v168, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v158);
  }
LABEL_81:
  id result = (id)swift_release();
  *a5 = v156;
  a5[1] = v157;
  return result;
}

void type metadata accessor for Attribute<EnvironmentValues>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

Swift::Void __swiftcall ViewGraph.instantiateOutputs()()
{
  uint64_t v1 = v0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  swift_beginAccess();
  id v2 = *(id *)(v0 + 32);
  AGGraphClearUpdate();
  id v3 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in ViewGraph.instantiateOutputs()(v1, &v24);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v4 = v24;
  int v6 = v25;
  int v5 = v26;
  uint64_t v19 = v24;
  int v20 = v25;
  int v21 = v26;
  uint64_t v16 = partial apply for specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:);
  uint64_t v17 = &v18;
  AGGraphMutateAttribute();
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 361))
  {
    unint64_t v22 = v4;
    int v23 = v6;
    unint64_t v7 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
    if ((v7 & 0x100000000) == 0)
    {
      unsigned int v8 = v7;
      id v9 = *(id *)(v1 + 32);
      AGGraphClearUpdate();
      id v10 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      unint64_t v22 = __PAIR64__(*(_DWORD *)(v1 + 44), v8);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for (DisplayList, DisplayList.Version)();
      lazy protocol witness table accessor for type RootDisplayList and conformance RootDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      *(void *)(v1 + 340) = AGCreateWeakAttribute();
    }
  }
  char v11 = *(unsigned char *)(v1 + 361);
  if ((v11 & 4) != 0)
  {
    unint64_t v22 = v4;
    int v23 = v6;
    PreferencesOutputs.subscript.getter((uint64_t)&type metadata for ViewRespondersKey);
    *(void *)(v1 + 324) = AGCreateWeakAttribute();
    char v11 = *(unsigned char *)(v1 + 361);
  }
  if ((v11 & 0x10) != 0) {
    *(void *)(v1 + 332) = AGCreateWeakAttribute();
  }
  unint64_t v22 = v4;
  int v23 = v6;
  PreferencesOutputs.subscript.getter((uint64_t)&type metadata for HostPreferencesKey);
  uint64_t v12 = AGCreateWeakAttribute();
  swift_beginAccess();
  *(void *)(v1 + 132) = v12;
  uint64_t v13 = v4;
  int v14 = v6;
  int v15 = v5;
  ViewGraph.makePreferenceOutlets(outputs:)(&v13);
  swift_bridgeObjectRelease();
}

uint64_t ViewGraph.makePreferenceOutlets(outputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    uint64_t v4 = *(void *)(v3 + 40);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      int v6 = (void **)(v23 + 432);
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t v8 = v4 + 32;
      id v9 = (unsigned int *)(v1 + 48);
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v10 = 0;
      while (v10 < *(void *)(v4 + 16))
      {
        if (v7)
        {
          uint64_t v12 = *(void *)(v8 + 16 * v10);
          uint64_t v13 = v9;
          uint64_t v14 = v7;
          while (*((void *)v13 - 2) != v12)
          {
            v13 += 6;
            if (!--v14) {
              goto LABEL_5;
            }
          }
          long long v24 = *(_OWORD *)(v8 + 16 * v10);
          unsigned int v15 = *v13;
          swift_beginAccess();
          if ((*(unsigned char *)(v23 + 41) & 1) == 0) {
            PreferenceBridge.addValue(_:for:)(v15, v12);
          }
          swift_beginAccess();
          uint64_t v16 = *v6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *int v6 = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
            *int v6 = v16;
          }
          unint64_t v19 = v16[2];
          unint64_t v18 = v16[3];
          long long v20 = v24;
          if (v19 >= v18 >> 1)
          {
            int v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
            long long v20 = v24;
            uint64_t v16 = v21;
            *int v6 = v21;
          }
          _OWORD v16[2] = v19 + 1;
          char v11 = &v16[3 * v19];
          *((_OWORD *)v11 + 2) = v20;
          *((_DWORD *)v11 + 12) = v15;
          uint64_t result = swift_endAccess();
          uint64_t v8 = v4 + 32;
        }
LABEL_5:
        if (++v10 == v5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_19:
      swift_beginAccess();
      if ((*(unsigned char *)(v23 + 41) & 1) == 0
        && (PreferencesOutputs.subscript.getter((uint64_t)&type metadata for HostPreferencesKey) & 0x100000000) == 0)
      {
        uint64_t v22 = AGCreateWeakAttribute();
        PreferenceBridge.addHostValues(_:for:)(v22, *(_DWORD *)(v23 + 56));
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in ViewGraph.instantiateOutputs()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void (*v28)(void *__return_ptr, uint64_t, uint64_t *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  void (*v38)(uint64_t **, void *, uint64_t *, uint64_t);
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55[10];
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  void v71[8];
  uint64_t v72;
  int v73;
  uint64_t v74;
  long long v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;

  swift_beginAccess();
  int v4 = *(_DWORD *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 112);
  int v7 = *(_DWORD *)(a1 + 264);
  int v8 = *(_DWORD *)(a1 + 268);
  int v9 = *(_DWORD *)(a1 + 244);
  int v10 = *(_DWORD *)(a1 + 248);
  int v11 = *(_DWORD *)(a1 + 56);
  int v12 = *MEMORY[0x263F288F8];
  int v72 = *(void *)(a1 + 72);
  unsigned int v73 = v4;
  uint64_t v74 = v5;
  *(_OWORD *)unsigned int v55 = *(_OWORD *)(a1 + 96);
  int v75 = *(_OWORD *)v55;
  int v76 = v6;
  unint64_t v77 = MEMORY[0x263F8EE78];
  unint64_t v78 = v11;
  long long v79 = v9;
  double v80 = v7;
  double v81 = v10;
  double v82 = v8;
  double v83 = v12;
  uint64_t v84 = v12;
  swift_beginAccess();
  char v13 = *(unsigned char *)(a1 + 361);
  if ((v13 & 0x10) != 0)
  {
    int v14 = *(_DWORD *)(a1 + 272);
    HIDWORD(v75) = v55[3] | 0x22;
    uint64_t v84 = v14;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)((uint64_t)&type metadata for HostPreferencesKey, (uint64_t)&protocol witness table for HostPreferencesKey);
  if (v13) {
    specialized PreferencesInputs.add<A>(_:)();
  }
  if ((v13 & 4) != 0) {
    PreferenceKeys.add(_:)((uint64_t)&type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
  }
  if (swift_weakLoadStrong())
  {
    PreferenceBridge.wrapInputs(_:)((uint64_t)&v72);
    swift_release();
  }
  swift_beginAccess();
  if ((static _ViewDebug.isInitialized & 1) == 0)
  {
    unsigned int v15 = getenv("SWIFTUI_VIEW_DEBUG");
    if (v15)
    {
      int v16 = atoi(v15);
      swift_beginAccess();
      static _ViewDebug.properties = v16;
    }
    static _ViewDebug.isInitializedouble d = 1;
  }
  swift_beginAccess();
  if (static _ViewDebug.properties) {
    AGSubgraphSetShouldRecordTree();
  }
  __int16 v17 = WORD6(v75);
  if ((BYTE12(v75) & 0x20) != 0) {
    _ViewInputs.makeRootMatchedGeometryScope()();
  }
  if ((v17 & 0x100) != 0)
  {
    AGTypeGetSignature();
    specialized _GraphInputs.pushScope<A>(id:)(v58, v59, (void *)v60);
  }
  MEMORY[0x270FA5388](*(unsigned int *)(a1 + 260));
  MEMORY[0x270FA5388](v18);
  AGGraphMutateAttribute();
  unint64_t v19 = (uint64_t *)(a1 + 216);
  uint64_t result = swift_beginAccess();
  int v21 = *(_DWORD *)(a1 + 228);
  if (v21)
  {
    uint64_t v22 = *v19;
    if (!*v19)
    {
      __break(1u);
      goto LABEL_35;
    }
    int v23 = 0;
    int v24 = v21 - 1;
    do
    {
      uint64_t v27 = v22 + v23;
      if (v24) {
        v23 += *(_DWORD *)(v27 + 8);
      }
      else {
        int v23 = 0;
      }
      int v25 = v24 | v23;
      uint64_t v26 = *(void *)v27;
      unsigned int v58 = v27;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 112))(&v58, &v72, a1);
      --v24;
    }
    while (v25);
  }
  int v28 = *(void (**)(void *__return_ptr, uint64_t, uint64_t *))(a1 + 184);
  uint64_t v29 = *(unsigned int *)(a1 + 236);
  uint64_t v30 = v72;
  uint64_t v31 = v74;
  int v32 = v76;
  uint64_t v33 = v77;
  unsigned int v58 = v72;
  int v51 = v75;
  long long v52 = v73;
  LODWORD(v59) = v73;
  int v60 = v74;
  long long v61 = v75;
  char v49 = DWORD2(v75);
  long long v50 = DWORD1(v75);
  uint64_t v47 = v78;
  Swift::UInt32 v48 = HIDWORD(v75);
  uint64_t v62 = v76;
  unsigned __int8 v63 = v77;
  unint64_t v64 = v78;
  unint64_t v65 = v79;
  uint64_t v45 = v80;
  uint64_t v46 = v79;
  int v66 = v80;
  unsigned int v67 = v81;
  unsigned int v43 = v82;
  uint64_t v44 = v81;
  uint64_t v68 = v82;
  uint64_t v69 = v83;
  uint64_t v41 = v84;
  int v42 = v83;
  long long v70 = v84;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(v71, v29, &v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v54 = v31;
  swift_release();
  uint64_t result = swift_release();
  int v53 = a1;
  uint64_t v34 = *(_DWORD *)(a1 + 228);
  if (!v34)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a2 = v71[0];
    a2[1] = v71[1];
    return result;
  }
  uint64_t v40 = *v19;
  if (*v19)
  {
    int v35 = 0;
    uint64_t v36 = v34 - 1;
    do
    {
      unint64_t v39 = (uint64_t *)(v40 + v35);
      if (v36) {
        v35 += *((_DWORD *)v39 + 2);
      }
      else {
        int v35 = 0;
      }
      uint64_t v56 = v36 | v35;
      uint64_t v37 = *v39;
      uint64_t v57 = v39;
      unsigned int v58 = v30;
      LODWORD(v59) = v52;
      int v60 = v54;
      *(void *)&long long v61 = __PAIR64__(v50, v51);
      *((void *)&v61 + 1) = __PAIR64__(v48, v49);
      uint64_t v62 = v32;
      unsigned __int8 v63 = v33;
      unint64_t v64 = v47;
      unint64_t v65 = v46;
      int v66 = v45;
      unsigned int v67 = v44;
      uint64_t v68 = v43;
      uint64_t v69 = v42;
      long long v70 = v41;
      uint64_t v38 = *(void (**)(uint64_t **, void *, uint64_t *, uint64_t))(v37 + 120);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(&v57, v71, &v58, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      --v36;
    }
    while (v56);
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t static ViewGraphFeatureBuffer._VTable.modifyViewOutputs(elt:outputs:inputs:graph:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v10 = a3[2];
  int v11 = *((_DWORD *)a3 + 20);
  uint64_t v15 = *a1;
  uint64_t v12 = *(void *)(v4 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v13 = *(_OWORD *)(a3 + 5);
  long long v18 = *(_OWORD *)(a3 + 3);
  long long v19 = v13;
  long long v20 = *(_OWORD *)(a3 + 7);
  uint64_t v21 = a3[9];
  int v22 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)(v4 + 176) + 16))(a2, &v15, a4, v12);
}

uint64_t static ViewGraphFeatureBuffer._VTable.modifyViewInputs(elt:inputs:graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 176) + 8))(a2, a3, v6);
}

void specialized PreferencesInputs.add<A>(_:)()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2)
  {
    uint64_t v3 = (ValueMetadata **)(v1 + 4);
    uint64_t v4 = *(void *)(*(void *)v0 + 16);
    while (*v3 != &type metadata for DisplayList.Key)
    {
      v3 += 2;
      if (!--v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, v1);
    }
    unint64_t v6 = v1[2];
    unint64_t v5 = v1[3];
    if (v6 >= v5 >> 1) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v1);
    }
    v1[2] = v6 + 1;
    int v7 = &v1[2 * v6];
    v7[4] = &type metadata for DisplayList.Key;
    _OWORD v7[5] = &protocol witness table for DisplayList.Key;
    *(void *)uint64_t v0 = v1;
  }
}

uint64_t partial apply for closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)(a1, a2, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 36), *(_DWORD *)(v3 + 40), *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  long long v10 = *a2;
  long long v75 = a2[1];
  long long v11 = a2[1];
  long long v74 = *a2;
  long long v12 = a2[3];
  long long v76 = a2[2];
  long long v13 = a2[2];
  long long v77 = a2[3];
  long long v78 = a2[4];
  long long v70 = v13;
  long long v71 = v12;
  long long v72 = a2[4];
  v69[0] = v10;
  int v79 = *((_DWORD *)a2 + 20);
  uint64_t v14 = v74;
  uint64_t v15 = v75;
  int v29 = DWORD2(v74);
  uint64_t v30 = *((void *)&v75 + 1);
  int v16 = DWORD1(v76);
  int v73 = *((_DWORD *)a2 + 20);
  v69[1] = v11;
  *(void *)((char *)&v72 + 4) = __PAIR64__(a4, a3);
  int v32 = HIDWORD(v78);
  int v33 = v79;
  int v17 = DWORD2(v77);
  int v31 = HIDWORD(v77);
  uint64_t v18 = *((void *)&v76 + 1);
  uint64_t v19 = v77;
  LODWORD(v72) = a3;
  int v34 = v76 | 0x18;
  LODWORD(v70) = v76 | 0x18;
  uint64_t v20 = swift_allocObject();
  long long v21 = a2[3];
  *(_OWORD *)(v20 + 72) = a2[2];
  *(_OWORD *)(v20 + 88) = v21;
  *(_OWORD *)(v20 + 104) = a2[4];
  long long v22 = a2[1];
  *(_OWORD *)(v20 + 40) = *a2;
  *(void *)(v20 + 16) = a6;
  *(void *)(v20 + 24) = a7;
  *(void *)(v20 + 32) = v69;
  int v23 = *((_DWORD *)a2 + 20);
  *(_OWORD *)(v20 + 56) = v22;
  *(_DWORD *)(v20 + 120) = v23;
  *(_DWORD *)(v20 + 124) = a1;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs((uint64_t)&v74);
  outlined retain of _ViewInputs((uint64_t)&v74);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v54 = v14;
  int v55 = v29;
  uint64_t v56 = v15;
  uint64_t v57 = v30;
  uint64_t v60 = v18;
  uint64_t v61 = v19;
  int v59 = v16;
  int v62 = v17;
  int v63 = v31;
  unsigned int v64 = a3;
  unsigned int v65 = a3;
  unsigned int v66 = a4;
  int v67 = v32;
  int v68 = v33;
  int v38 = a5;
  uint64_t v39 = v14;
  int v40 = v29;
  uint64_t v41 = v15;
  uint64_t v42 = v30;
  int v43 = 0;
  int v44 = v16;
  uint64_t v45 = v18;
  uint64_t v46 = v19;
  int v47 = v17;
  int v48 = v31;
  unsigned int v49 = a3;
  unsigned int v50 = a3;
  unsigned int v51 = a4;
  int v52 = v32;
  int v53 = v33;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  static _SafeAreaInsetsModifier._makeView(modifier:inputs:body:)(&v38, (uint64_t)&v39, (void (*)(uint64_t, uint64_t *))partial apply for specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v58 = v34;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a8, &v54);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static _SafeAreaInsetsModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  int v43 = *a1;
  uint64_t v60 = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 28);
  int v8 = *(_DWORD *)(a2 + 32);
  int v7 = *(_DWORD *)(a2 + 36);
  uint64_t v44 = *(void *)(a2 + 40);
  uint64_t v51 = *(void *)(a2 + 48);
  int v9 = *(_DWORD *)(a2 + 60);
  int v50 = *(_DWORD *)(a2 + 56);
  int v10 = *(_DWORD *)(a2 + 68);
  int v47 = *(_DWORD *)(a2 + 64);
  int v11 = *(_DWORD *)(a2 + 76);
  int v52 = *(_DWORD *)(a2 + 72);
  int v12 = *(_DWORD *)(a2 + 80);
  uint64_t v45 = AGMakeUniqueID();
  swift_beginAccess();
  int v53 = v3;
  int v54 = v9;
  int v48 = v6;
  int v49 = v10;
  int v58 = v7;
  int v59 = v5;
  int v56 = v8;
  int v57 = v12;
  int v55 = v11;
  if ((v7 & 0x20) != 0)
  {
    uint64_t v68 = v60;
    int v69 = v3;
    uint64_t v71 = v4;
    int v72 = v5;
    int v73 = v6;
    int v74 = v8;
    int v75 = v7;
    uint64_t v76 = v44;
    uint64_t v77 = v51;
    int v78 = v50;
    int v79 = v9;
    int v80 = v47;
    int v81 = v10;
    int v82 = v52;
    int v83 = v11;
    int v84 = v12;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    int v19 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v21 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    uint64_t v13 = v44;
    if ((*(unsigned char *)(v4 + 81) & 1) == 0
      && v47 == *(_DWORD *)(v4 + 32)
      && v52 == *(_DWORD *)(v4 + 36)
      && v21 == *(_DWORD *)(v4 + 40)
      && v53 == *(_DWORD *)(v4 + 44)
      && v19 == *(_DWORD *)(v4 + 48)
      && v59 == *(_DWORD *)(v4 + 52))
    {
      uint64_t v22 = v60;
      uint64_t v23 = v51;
      int v24 = v10;
      int v25 = v50;
      if ((*(unsigned char *)(v4 + 64) & 1) == 0)
      {
        LODWORD(v16) = *(_DWORD *)(v4 + 60);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v22 = v60;
      uint64_t v68 = v60;
      int v69 = v53;
      uint64_t v71 = v4;
      int v72 = v59;
      int v73 = v19;
      int v74 = v8;
      int v75 = v7;
      uint64_t v76 = v44;
      uint64_t v77 = v51;
      uint64_t v23 = v51;
      int v24 = v10;
      int v25 = v50;
      int v78 = v50;
      int v79 = v54;
      int v80 = v47;
      int v81 = v10;
      int v82 = v52;
      int v83 = v55;
      int v84 = v57;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v68, v21, (uint64_t)&v61);
      long long v26 = v62;
      uint64_t v27 = v63;
      unsigned __int8 v28 = v67;
      unint64_t v29 = v63 | ((unint64_t)v64 << 32);
      unint64_t v30 = v65 | ((unint64_t)v66 << 32);
      *(_OWORD *)(v4 + 32) = v61;
      *(_OWORD *)(v4 + 48) = v26;
      *(void *)(v4 + 64) = v29;
      *(void *)(v4 + 72) = v30;
      *(_WORD *)(v4 + 80) = v28;
      if (v27 != 1)
      {
        uint64_t v16 = HIDWORD(*((void *)&v26 + 1));
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v68 = v22;
        int v69 = v53;
        uint64_t v71 = v4;
        int v72 = v59;
        int v73 = v48;
        int v74 = v56;
        int v75 = v7;
        uint64_t v76 = v44;
        uint64_t v77 = v23;
        int v78 = v25;
        int v79 = v54;
        int v80 = v47;
        int v81 = v24;
        int v82 = v52;
        int v83 = v55;
        int v84 = v57;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v31 = _ViewInputs.geometryTransaction()();
        uint64_t v32 = swift_getKeyPath();
        int v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(v32);
        int v15 = v47;
        swift_release();
        if ((*(unsigned char *)(v4 + 81) & 1) == 0
          && v47 == *(_DWORD *)(v4 + 32)
          && v52 == *(_DWORD *)(v4 + 36)
          && v33 == *(_DWORD *)(v4 + 40)
          && v53 == *(_DWORD *)(v4 + 44)
          && v31 == *(_DWORD *)(v4 + 48)
          && v59 == *(_DWORD *)(v4 + 52))
        {
          int v17 = v50;
          int v18 = v43;
          if ((*(unsigned char *)(v4 + 72) & 1) == 0)
          {
            int OffsetAttribute2 = *(_DWORD *)(v4 + 68);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v68 = v22;
          int v69 = v53;
          uint64_t v71 = v4;
          int v72 = v59;
          int v73 = v31;
          int v74 = v56;
          int v75 = v58;
          uint64_t v76 = v44;
          uint64_t v77 = v23;
          int v17 = v50;
          int v78 = v50;
          int v79 = v54;
          int v80 = v47;
          int v81 = v10;
          int v82 = v52;
          int v83 = v55;
          int v84 = v57;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v68, v33, (uint64_t)&v61);
          int OffsetAttribute2 = v64;
          uint64_t v34 = v65;
          unsigned __int8 v35 = v67;
          unint64_t v36 = v63 | ((unint64_t)v64 << 32);
          unint64_t v37 = v65 | ((unint64_t)v66 << 32);
          long long v38 = v62;
          *(_OWORD *)(v4 + 32) = v61;
          *(_OWORD *)(v4 + 48) = v38;
          *(void *)(v4 + 64) = v36;
          *(void *)(v4 + 72) = v37;
          *(_WORD *)(v4 + 80) = v35;
          int v18 = v43;
          if (v34 != 1) {
            goto LABEL_25;
          }
        }
        int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v4 + 68) = OffsetAttribute2;
        *(unsigned char *)(v4 + 72) = 0;
LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_26;
      }
    }
    LODWORD(v16) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 60) = v16;
    *(unsigned char *)(v4 + 64) = 0;
    goto LABEL_14;
  }
  swift_retain();
  swift_retain();
  uint64_t v13 = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int OffsetAttribute2 = v52;
  int v15 = v47;
  LODWORD(v16) = v47;
  int v17 = v50;
  int v18 = v43;
LABEL_26:
  swift_endAccess();
  uint64_t v68 = v45;
  int v69 = v54;
  int v70 = v16;
  LODWORD(v71) = OffsetAttribute2;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform();
  int v39 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v68 = v45;
  int v69 = v18;
  int v70 = v55;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets();
  int v40 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v68 = v60;
  int v69 = v53;
  uint64_t v71 = v4;
  int v72 = v59;
  int v73 = v48;
  int v74 = v56 | 4;
  int v75 = v58;
  uint64_t v76 = v13;
  uint64_t v77 = v51;
  int v78 = v17;
  int v79 = v39;
  int v80 = v15;
  int v81 = v49;
  int v82 = v52;
  int v83 = v40;
  int v84 = v57;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v41 = swift_bridgeObjectRetain();
  a3(v41, &v68);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t partial apply for specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)(a1, v2 + 40, *(unsigned int *)(v2 + 124), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[2];
  int v9 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 7);
  int v22 = *((_DWORD *)a1 + 9);
  int v23 = *((_DWORD *)a1 + 2);
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  uint64_t v20 = a1[7];
  int v13 = *((_DWORD *)a1 + 19);
  int v21 = *((_DWORD *)a1 + 20);
  uint64_t v19 = *(void *)(a2 + 64);
  int v14 = *(_DWORD *)(a2 + 72);
  int v24 = *((_DWORD *)a1 + 8) | 0x18;
  _GraphValue.init(_:)(a3, &v42);
  int v27 = v42;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v42 = v7;
  int v43 = v23;
  uint64_t v44 = v8;
  int v45 = v9;
  int v46 = v10;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  *(void *)&long long v16 = v20;
  *((void *)&v16 + 1) = v19;
  long long v51 = v16;
  int v48 = v22;
  int v52 = v14;
  int v53 = v13;
  int v54 = v21;
  int v28 = v27;
  uint64_t v29 = v7;
  int v30 = v23;
  uint64_t v31 = v8;
  int v32 = v9;
  int v33 = v10;
  int v34 = 0;
  int v35 = v22;
  uint64_t v36 = v11;
  uint64_t v37 = v12;
  long long v38 = v16;
  int v39 = v14;
  int v40 = v13;
  int v41 = v21;
  int v17 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17(&v28, &v29, a4, a5);
  int v47 = v24;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a6, (uint64_t)&v42);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

unint64_t lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform()
{
  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform;
  if (!lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets()
{
  unint64_t result = lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets;
  if (!lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootDisplayList and conformance RootDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type RootDisplayList and conformance RootDisplayList;
  if (!lazy protocol witness table cache variable for type RootDisplayList and conformance RootDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootDisplayList and conformance RootDisplayList);
  }
  return result;
}

uint64_t PreferenceBridge.wrapInputs(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  swift_retain();
  swift_release();
  *(void *)a1 = v3;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (unint64_t i = 0; i != v5; ++i)
    {
      if (i >= *(void *)(v4 + 16)) {
        __break(1u);
      }
      uint64_t v7 = *(void **)(a1 + 48);
      uint64_t v8 = v7[2];
      if (v8)
      {
        int v9 = v7 + 4;
        uint64_t v10 = v7[2];
        while (*v9 != *(void *)(v4 + 32 + 16 * i))
        {
          v9 += 2;
          if (!--v10) {
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        long long v16 = *(_OWORD *)(v4 + 32 + 16 * i);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, v7);
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        long long v13 = v16;
        if (v12 >= v11 >> 1)
        {
          int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v7);
          long long v13 = v16;
          uint64_t v7 = v14;
        }
        _OWORD v7[2] = v12 + 1;
        *(_OWORD *)&v7[2 * v12 + 4] = v13;
        *(void *)(a1 + 48) = v7;
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type MergePreferenceKeys and conformance MergePreferenceKeys();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MergePreferenceKeys and conformance MergePreferenceKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MergePreferenceKeys and conformance MergePreferenceKeys;
  if (!lazy protocol witness table cache variable for type MergePreferenceKeys and conformance MergePreferenceKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergePreferenceKeys and conformance MergePreferenceKeys);
  }
  return result;
}

uint64_t PreferenceBridge.addValue(_:for:)(unsigned int a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 72);
    unint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      unint64_t v8 = 0;
      for (uint64_t i = v6 + 48; *(void *)(i - 16) != a2; i += 24)
      {
        if (v7 == ++v8) {
          return swift_release();
        }
      }
      if (v8 >= v7)
      {
        __break(1u);
        return result;
      }
      uint64_t Attribute = AGWeakAttributeGetAttribute();
      if (Attribute != *MEMORY[0x263F288F8])
      {
        MEMORY[0x270FA5388](Attribute);
        uint64_t v11 = type metadata accessor for PreferenceCombiner();
        MEMORY[0x270FA5388](v11);
        AGGraphMutateAttribute();
        GraphHost.graphInvalidation(from:)(a1);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance ImageRendererHostViewGraph(uint64_t a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)a1, 1, (uint64_t)&v3);
  uint64_t result = swift_release();
  *(_DWORD *)(a1 + 36) |= 1u;
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2, uint64_t a3)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), (unint64_t *)&lazy cache variable for type metadata for TypedElement<UsingGraphicsRenderer>, (uint64_t)&type metadata for UsingGraphicsRenderer, (uint64_t)&protocol witness table for UsingGraphicsRenderer);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<PreferTextLayoutManagerInput>, (uint64_t)&type metadata for PreferTextLayoutManagerInput, (uint64_t)&protocol witness table for PreferTextLayoutManagerInput);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, specialized find<A>(_:key:), &lazy cache variable for type metadata for TypedElement<_GraphInputs.HasWidgetMetadataKey>, (uint64_t)&type metadata for _GraphInputs.HasWidgetMetadataKey, (uint64_t)&protocol witness table for _GraphInputs.HasWidgetMetadataKey);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a4(*a1);
  if (!result || *(unsigned char *)(result + 72) != (a2 & 1))
  {
    uint64_t v13 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = a2 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v13);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for Canvas.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols;
  if (!lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasSymbols and conformance CanvasSymbols);
  }
  return result;
}

void type metadata accessor for TypedElement<UsingGraphicsRenderer>()
{
  if (!lazy cache variable for type metadata for TypedElement<UsingGraphicsRenderer>)
  {
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<UsingGraphicsRenderer>);
    }
  }
}

uint64_t PreferenceBridge.addHostValues(_:for:)(uint64_t a1, unsigned int a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t Attribute = AGWeakAttributeGetAttribute();
    if (Attribute != *MEMORY[0x263F288F8])
    {
      MEMORY[0x270FA5388](Attribute);
      MEMORY[0x270FA5388](v5);
      AGGraphMutateAttribute();
      GraphHost.graphInvalidation(from:)(a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t AnyTransition.animation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  v8[0] = partial apply for closure #1 in AnyTransition.animation(_:);
  v8[1] = v4;
  uint64_t v9 = 0;
  uint64_t v5 = *(uint64_t (**)(void *, void *, _UNKNOWN **))(*(void *)a2 + 80);
  swift_retain();
  swift_retain();
  uint64_t result = v5(v8, &unk_26FA480E0, &protocol witness table for AnyTransition.FilterVisitor);
  uint64_t v7 = v9;
  if (v9)
  {
    swift_release();
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Bool __swiftcall Array.merge(with:)(Swift::OpaquePointer with)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = MEMORY[0x24C522E60](*v2, v3);
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Array.append<A>(contentsOf:)();
  return v4 != MEMORY[0x24C522E60](*v2, v3);
}

uint64_t getEnumTagSinglePayload for SubscriptionLifetime.Connection(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  uint64_t v7 = *(void *)(result - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v13 >= a2)
  {
LABEL_24:
    if (v13)
    {
      if (v8 >= v10)
      {
        int v22 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
        return v22(a1, v8, result);
      }
      else
      {
        int v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
        return v21(((((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8) & ~v12);
      }
    }
    return 0;
  }
  unint64_t v14 = ((*(void *)(v9 + 64) + ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v15 = v14 & 0xFFFFFFF8;
  if ((v14 & 0xFFFFFFF8) != 0) {
    unsigned int v16 = 2;
  }
  else {
    unsigned int v16 = a2 - v13 + 1;
  }
  if (v16 >= 0x10000) {
    LODWORD(v17) = 4;
  }
  else {
    LODWORD(v17) = 2;
  }
  if (v16 < 0x100) {
    LODWORD(v17) = 1;
  }
  if (v16 >= 2) {
    uint64_t v17 = v17;
  }
  else {
    uint64_t v17 = 0;
  }
  switch(v17)
  {
    case 1:
      int v18 = *((unsigned __int8 *)a1 + v14);
      if (!v18) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 2:
      int v18 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!v18) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v18 = *(int *)((char *)a1 + v14);
      if (!v18) {
        goto LABEL_24;
      }
LABEL_21:
      unsigned int v19 = v18 - 1;
      if (v15)
      {
        unsigned int v19 = 0;
        int v20 = *a1;
      }
      else
      {
        int v20 = 0;
      }
      uint64_t result = v13 + (v20 | v19) + 1;
      break;
    default:
      goto LABEL_24;
  }
  return result;
}

uint64_t View.monospacedDigit()(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)closure #1 in View.monospacedDigit(), 0, a1);

  return swift_release();
}

uint64_t instantiation function for generic protocol witness table for ViewListTransition<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for ObjectCache.Item()
{
  swift_getTupleTypeMetadata3();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t StaticIf<>.init(_:then:else:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  uint64_t v8 = type metadata accessor for StaticIf();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CachedView<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

double OptionalEdgeInsets.in(edges:)(unsigned __int8 a1)
{
  if (byte_26FA5B5A8 - 9 < 0xEF) {
    goto LABEL_5;
  }
  int v2 = 1 << byte_26FA5B5A8;
  if (byte_26FA5B5A8 < 0) {
    int v2 = 0;
  }
  double result = 0.0;
  if ((v2 & ~a1) == 0)
  {
LABEL_5:
    switch(byte_26FA5B5A8)
    {
      case 1:
      case 2:
      case 3:
        double result = 0.0;
        break;
      default:
        double result = *(double *)v1;
        if (*(unsigned char *)(v1 + 8)) {
          double result = 0.0;
        }
        break;
    }
  }
  if (byte_26FA5B5A9 - 9 <= 0xEE) {
    goto LABEL_14;
  }
  int v4 = 1 << byte_26FA5B5A9;
  if (byte_26FA5B5A9 < 0) {
    int v4 = 0;
  }
  if ((v4 & ~a1) == 0)
  {
LABEL_14:
    switch(byte_26FA5B5A9)
    {
      case 1:
      case 2:
      case 3:
        break;
      default:
        double result = *(double *)v1;
        if (*(unsigned char *)(v1 + 8)) {
          double result = 0.0;
        }
        break;
    }
  }
  if (byte_26FA5B5AA - 9 <= 0xEE) {
    goto LABEL_21;
  }
  int v5 = 1 << byte_26FA5B5AA;
  if (byte_26FA5B5AA < 0) {
    int v5 = 0;
  }
  if ((v5 & ~a1) == 0)
  {
LABEL_21:
    switch(byte_26FA5B5AA)
    {
      case 1:
      case 2:
      case 3:
        break;
      default:
        double result = *(double *)v1;
        if (*(unsigned char *)(v1 + 8)) {
          double result = 0.0;
        }
        break;
    }
  }
  if (byte_26FA5B5AB - 9 <= 0xEE) {
    goto LABEL_28;
  }
  int v6 = 1 << byte_26FA5B5AB;
  if (byte_26FA5B5AB < 0) {
    int v6 = 0;
  }
  if ((v6 & ~a1) == 0)
  {
LABEL_28:
    switch(byte_26FA5B5AB)
    {
      case 1:
      case 2:
      case 3:
        return result;
      default:
        double result = *(double *)v1;
        if (*(unsigned char *)(v1 + 8)) {
          double result = 0.0;
        }
        break;
    }
  }
  return result;
}

uint64_t GraphHost.Data.$hostPreferenceKeys.getter()
{
  return *(unsigned int *)(v0 + 40);
}

id GraphHost.Data.globalSubgraph.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t static EventModifiers.control.getter()
{
  return 4;
}

uint64_t specialized DynamicViewList.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)Value + 80))();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 112);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 40);
    if (*(void *)(v5 + 32) == v3)
    {
      swift_beginAccess();
      if (*(_DWORD *)(v5 + 24))
      {
        if (AGSubgraphIsValid())
        {
          uint64_t v42 = v6;
          uint64_t v16 = v5;
          goto LABEL_37;
        }
      }
    }
    swift_beginAccess();
    int v7 = *(_DWORD *)(v5 + 24);
    if (v7)
    {
      uint64_t v8 = *(void **)(v5 + 16);
      IsValidouble d = AGSubgraphIsValid();
      swift_retain();
      if (IsValid)
      {
        id v10 = v8;
        AGSubgraphApply();

        AGSubgraphRemoveChild();
        int v7 = *(_DWORD *)(v5 + 24);
      }
      *(_DWORD *)(v5 + 24) = v7 - 1;
      if (v7 == 1)
      {
        uint64_t v11 = *(void *)(v5 + 64);
        swift_beginAccess();
        uint64_t v12 = *(void *)(v11 + 16);
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          unint64_t v14 = 0;
          uint64_t v15 = v12 + 32;
          while (*(void *)(v15 + 8 * v14) != v5)
          {
            if (v13 == ++v14) {
              goto LABEL_18;
            }
          }
          swift_beginAccess();
          specialized Array.remove(at:)(v14);
          swift_endAccess();
        }
LABEL_18:
        uint64_t v17 = AGSubgraphIsValid();
        if (v17)
        {
          MEMORY[0x270FA5388](v17);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) = -1;
      swift_retain();
    }
    swift_release_n();
    *(void *)(v0 + 112) = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v18 = *(void *)(v0 + 104);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + 16);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v16 = *(void *)(v19 + 32);
    uint64_t v21 = *(void *)(v16 + 32);
    swift_retain();
    if (v21 == v4)
    {
      uint64_t v42 = v6;
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v22 = v20 - 1;
    if (v22)
    {
      uint64_t v23 = 0;
      while (1)
      {
        if ((unint64_t)(v23 + 1) >= *(void *)(v19 + 16))
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v16 = *(void *)(v19 + 8 * v23 + 40);
        uint64_t v24 = *(void *)(v16 + 32);
        swift_retain();
        if (v24 == v4) {
          break;
        }
        swift_release();
        if (v22 == ++v23) {
          goto LABEL_28;
        }
      }
      uint64_t v42 = v6;
      swift_bridgeObjectRelease();
LABEL_35:
      swift_beginAccess();
      ++*(_DWORD *)(v16 + 24);
      int v32 = *(void **)(v16 + 16);
      AGSubgraphAddChild();
      id v33 = v32;
      AGSubgraphApply();

LABEL_36:
      *(void *)(v1 + 112) = v16;
LABEL_37:
      int v34 = *(void **)(v1 + 96);
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      uint64_t v35 = AGGraphGetValue();
      type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>.WrappedList, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.WrappedList);
      uint64_t v44 = v36;
      int v45 = &protocol witness table for DynamicViewList<A>.WrappedList;
      uint64_t v37 = swift_allocObject();
      v43[0] = v37;
      outlined init with copy of AnyTrackedValue(v35, v37 + 16);
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x263F288F8])
      {
        id v38 = (id)AGGraphGetAttributeGraph();
        swift_bridgeObjectRetain();
        id v41 = v34;
        swift_retain();
        swift_retain_n();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t Counter = AGGraphGetCounter();

        *(unsigned char *)(v37 + 72) = v5 == 0;
        *(void *)(v37 + 56) = v16;
        *(void *)(v37 + 64) = v42;
        *(void *)(v37 + 80) = Counter;
        AGGraphSetOutputValue();
        swift_release_n();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }
LABEL_28:
    swift_bridgeObjectRelease();
  }
  if (AGSubgraphIsValid())
  {
    id v25 = (id)AGSubgraphGetGraph();
    long long v26 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v27 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    uint64_t v28 = specialized closure #1 in DynamicViewList.updateValue()((unsigned int *)v1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      int v30 = CurrentAttribute;
      uint64_t v42 = v6;
      uint64_t v31 = AGMakeUniqueID();
      type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for DynamicViewList<AnyView>.Item, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewList.Item);
      swift_allocObject();
      swift_retain();
      uint64_t v16 = specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(v4, v30, v28, v31, BYTE4(v28) & 1, v26, v18);
      goto LABEL_36;
    }
    goto LABEL_42;
  }
  uint64_t v44 = &type metadata for EmptyViewList;
  int v45 = &protocol witness table for EmptyViewList;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized DynamicViewContainer.updateValue()();
}

uint64_t *specialized DynamicViewContainer.updateValue()()
{
  uint64_t v1 = v0;
  v24[4] = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)Value + 80))();
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for DynamicViewContainer<AnyView>.Value, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyView and conformance AnyView, (uint64_t)&type metadata for AnyView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DynamicViewContainer.Value);
  double result = (uint64_t *)AGGraphGetOutputValue();
  if (!result)
  {
    uint64_t v23 = v3;
    uint64_t v22 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = *result;
  if (*result == v3) {
    return result;
  }
  uint64_t v23 = v3;
  uint64_t v6 = (void *)result[3];
  uint64_t v7 = *(void *)(v1 + 96);
  int v8 = *(_DWORD *)(v1 + 108);
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    int v10 = *MEMORY[0x263F288F8];
    uint64_t v11 = v7 + 48;
    id v12 = v6;
    swift_bridgeObjectRetain();
    do
    {
      v11 += 24;
      AGGraphSetIndirectAttribute();
      --v9;
    }
    while (v9);
    if (v8 == v10) {
      goto LABEL_8;
    }
  }
  else
  {
    id v21 = v6;
    swift_bridgeObjectRetain();
    if (v8 == *MEMORY[0x263F288F8]) {
      goto LABEL_8;
    }
  }
  AGGraphSetIndirectAttribute();
LABEL_8:
  uint64_t v13 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v13);
  id v14 = v6;
  AGSubgraphApply();

  AGSubgraphInvalidate();
  uint64_t v22 = v5;
LABEL_10:
  uint64_t v15 = *(void **)(v1 + 112);
  id v16 = (id)AGSubgraphGetGraph();
  uint64_t v17 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v15;
  AGGraphClearUpdate();
  id v19 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  specialized closure #2 in DynamicViewContainer.updateValue()((unsigned int *)v1, v23, 0, 1, v17, (uint64_t)v24);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v20 = (void *)v24[3];
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (uint64_t *)outlined consume of DynamicViewContainer<AnyView>.Value?(v22);
}

uint64_t AnyViewStorage.childType.getter()
{
  return *(void *)(*(void *)v0 + 128);
}

uint64_t specialized DynamicViewList.Item.init(type:owner:list:id:isUnary:subgraph:allItems:)(uint64_t a1, int a2, int a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  *(_DWORD *)(v7 + 48) = a2;
  *(_DWORD *)(v7 + 52) = a3;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a4;
  *(unsigned char *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a7;
  *(_DWORD *)(v7 + 24) = 1;
  int v10 = (void *)(a7 + 16);
  *(void *)(v7 + 16) = a6;
  swift_beginAccess();
  uint64_t v11 = *(void **)(a7 + 16);
  swift_retain();
  id v12 = a6;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a7 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    void *v10 = v11;
  }
  unint64_t v15 = v11[2];
  unint64_t v14 = v11[3];
  if (v15 >= v14 >> 1)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v11);
    void *v10 = v11;
  }
  v11[2] = v15 + 1;
  v11[v15 + 4] = v7;
  swift_endAccess();
  swift_release();
  swift_release();

  return v7;
}

uint64_t specialized closure #1 in DynamicViewList.updateValue()(unsigned int *a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t *);
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  long long v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  void v45[8];
  char v46;

  uint64_t v2 = *((void *)a1 + 3);
  int v30 = a1[9];
  uint64_t v31 = a1[8];
  uint64_t v28 = a1[11];
  uint64_t v29 = a1[10];
  uint64_t v22 = *((void *)a1 + 6);
  uint64_t v23 = *((void *)a1 + 1);
  id v27 = *((void *)a1 + 8);
  long long v26 = a1[18];
  uint64_t v3 = *((void *)a1 + 10);
  uint64_t v24 = a1[4];
  id v25 = *((unsigned char *)a1 + 88);
  swift_beginAccess();
  int v4 = *(_DWORD *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v20 = *(_OWORD *)(v2 + 48);
  id v21 = *(_OWORD *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 72);
  char v8 = *(unsigned char *)(v2 + 80);
  char v9 = *(unsigned char *)(v2 + 81);
  uint64_t v10 = *(void *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v5;
  *(_OWORD *)(v11 + 32) = v21;
  *(_OWORD *)(v11 + 48) = v20;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v7;
  *(unsigned char *)(v11 + 80) = v8;
  *(unsigned char *)(v11 + 81) = v9;
  *(void *)(v11 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)AGGraphGetValue();
  int v32 = v23;
  id v33 = v24;
  int v34 = v11;
  uint64_t v35 = v31;
  uint64_t v36 = v30;
  uint64_t v37 = v29;
  id v38 = v28;
  int v39 = v22;
  int v40 = 0;
  id v41 = v27;
  uint64_t v42 = v26;
  int v43 = v3;
  uint64_t v44 = v25;
  unint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)v13 + 96);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v45, v12, &v32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v32 = v23;
  id v33 = v24;
  int v34 = v11;
  uint64_t v35 = v31;
  uint64_t v36 = v30;
  uint64_t v37 = v29;
  id v38 = v28;
  int v39 = v22;
  int v40 = 0;
  id v41 = v27;
  uint64_t v42 = v26;
  int v43 = v3;
  uint64_t v44 = v25;
  unint64_t v15 = _ViewListOutputs.makeAttribute(inputs:)(&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  id v16 = v45[7];
  uint64_t v17 = v46;
  outlined destroy of _ViewListOutputs((uint64_t)v45);
  id v18 = 0x100000000;
  if (v17 & 1 | (v16 != 1)) {
    id v18 = 0;
  }
  return v18 | v15;
}

uint64_t AnyViewStorage.makeChildViewList(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = v3;
  uint64_t v42 = a3;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v3;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  int v10 = *(_DWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  char v12 = *(unsigned char *)(a2 + 80);
  uint64_t v55 = *(void *)a2;
  int v56 = v7;
  uint64_t v57 = v8;
  long long v58 = *(_OWORD *)(a2 + 24);
  uint64_t v59 = v9;
  long long v60 = *(_OWORD *)(a2 + 48);
  int v61 = v10;
  uint64_t v62 = v11;
  char v63 = v12;
  uint64_t v13 = *(void *)(v6 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v14 = swift_bridgeObjectRetain();
  if ((WORD6(v58) & 0x100) != 0)
  {
    AGTypeGetSignature();
    uint64_t v14 = specialized _GraphInputs.pushScope<A>(id:)(v45, v46, (void *)v47);
  }
  LODWORD(v45) = a1;
  MEMORY[0x270FA5388](v14);
  uint64_t v35 = v13;
  uint64_t v41 = v15;
  uint64_t v36 = type metadata accessor for AnyViewChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  uint64_t v17 = MEMORY[0x263F8E628];
  uint64_t v18 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v34, v36, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v19);
  uint64_t v20 = v44;
  MEMORY[0x270FA5388]((char *)v4 + *(void *)(*v4 + 144));
  uint64_t WitnessTable = v13;
  int v38 = v20;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v21, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)&v35, v13, v17, MEMORY[0x263F8D4F8], v18, v22);
  _GraphValue.init(_:)(v20, &v44);
  uint64_t v23 = v44;
  uint64_t v24 = v55;
  int v40 = v56;
  uint64_t v25 = v57;
  long long v26 = v58;
  uint64_t v27 = v59;
  uint64_t v28 = *((void *)&v60 + 1);
  uint64_t v39 = v60;
  int v29 = v61;
  uint64_t v30 = v62;
  char v31 = v63;
  LODWORD(v20) = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v20) {
    AGSubgraphBeginTreeElement();
  }
  v43[0] = v23;
  uint64_t v45 = v24;
  LODWORD(v46) = v40;
  uint64_t v47 = v25;
  long long v48 = v26;
  uint64_t v49 = v27;
  uint64_t v50 = v39;
  uint64_t v51 = v28;
  int v52 = v29;
  uint64_t v53 = v30;
  char v54 = v31;
  uint64_t v32 = v41;
  (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(v41 + 32))(v43, &v45, v13, v41);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v23, v13, v32);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for AnyViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of DynamicViewContainer<AnyView>.Value?(uint64_t result)
{
  if (result) {
    return MEMORY[0x270F9A828]();
  }
  return result;
}

void *initializeWithCopy for DynamicViewContainer.Value(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, AssociatedTypeWitness))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
    uint64_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = (void *)(((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *(void **)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = v16;
  id v17 = v16;
  return a1;
}

id specialized closure #2 in DynamicViewContainer.updateValue()@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  int v23;
  uint64_t v24;
  unsigned int v25;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t vars8;

  uint64_t v6 = a1;
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 6);
  int v29 = *((void *)a1 + 7);
  uint64_t v30 = *((void *)a1 + 1);
  uint64_t v32 = a1[4];
  id v33 = a1[22];
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  char v31 = *((_OWORD *)a1 + 4);
  uint64_t v11 = *((void *)a1 + 10);
  swift_beginAccess();
  int v12 = *(_DWORD *)(v7 + 16);
  uint64_t v13 = *(void *)(v7 + 24);
  uint64_t v27 = *(_OWORD *)(v7 + 48);
  uint64_t v28 = *(_OWORD *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 64);
  uint64_t v15 = *(void *)(v7 + 72);
  char v16 = *(unsigned char *)(v7 + 80);
  char v17 = *(unsigned char *)(v7 + 81);
  uint64_t v18 = *(void *)(v7 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v13;
  *(_OWORD *)(v19 + 32) = v28;
  *(_OWORD *)(v19 + 48) = v27;
  *(void *)(v19 + 64) = v14;
  *(void *)(v19 + 72) = v15;
  *(unsigned char *)(v19 + 80) = v16;
  *(unsigned char *)(v19 + 81) = v17;
  *(void *)(v19 + 88) = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = *v6;
  uint64_t v21 = *(void *)AGGraphGetValue();
  uint64_t v39 = v30;
  int v40 = v32;
  uint64_t v41 = v19;
  uint64_t v42 = v9;
  int v43 = v10;
  unsigned int v44 = v8;
  uint64_t v45 = v29;
  uint64_t v46 = v31;
  uint64_t v47 = v11;
  long long v48 = v33;
  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v21 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(&v49, v20, &v39);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v23 = v50;
  uint64_t v24 = *((void *)v6 + 12);
  uint64_t v25 = v6[26];
  LODWORD(v6) = v6[27];
  uint64_t v39 = v24;
  int v40 = v25;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v49);
  if (v6 != *MEMORY[0x263F288F8] && v23 != *MEMORY[0x263F288F8]) {
    AGGraphSetIndirectAttribute();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(unsigned char *)(a6 + 16) = a4 & 1;
  *(void *)a6 = a2;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 24) = a5;

  return a5;
}

uint64_t AnyViewStorage.makeChildView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = v3;
  uint64_t v48 = a3;
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v3;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v11 = *(_DWORD *)(a2 + 80);
  uint64_t v84 = *(void *)a2;
  int v85 = v7;
  long long v87 = *(_OWORD *)(a2 + 24);
  uint64_t v86 = v8;
  uint64_t v88 = v9;
  uint64_t v89 = v10;
  long long v90 = *(_OWORD *)(a2 + 56);
  uint64_t v91 = *(void *)(a2 + 72);
  int v92 = v11;
  uint64_t v12 = *(void *)(v6 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  if ((WORD6(v87) & 0x100) != 0)
  {
    AGTypeGetSignature();
    uint64_t v13 = specialized _GraphInputs.pushScope<A>(id:)(v68, v69, (void *)v70);
  }
  LODWORD(v68) = a1;
  MEMORY[0x270FA5388](v13);
  uint64_t v33 = v12;
  uint64_t v47 = v14;
  uint64_t v34 = type metadata accessor for AnyViewChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  uint64_t v16 = MEMORY[0x263F8E628];
  uint64_t v17 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v32, v34, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v18);
  uint64_t v19 = v53;
  MEMORY[0x270FA5388]((char *)v4 + *(void *)(*v4 + 144));
  uint64_t WitnessTable = v12;
  int v36 = v19;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v20, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)&v33, v12, v16, MEMORY[0x263F8D4F8], v17, v21);
  uint64_t v49 = v12;
  _GraphValue.init(_:)(v19, v52);
  int v50 = v52[0];
  uint64_t v22 = v84;
  uint64_t v23 = v86;
  unsigned int v41 = DWORD1(v87);
  int v42 = v87;
  int v43 = HIDWORD(v87);
  int v46 = DWORD2(v87);
  int v44 = v85;
  uint64_t v24 = v88;
  uint64_t v25 = v89;
  int v26 = DWORD1(v90);
  int v27 = HIDWORD(v90);
  int v39 = DWORD2(v90);
  int v40 = v90;
  int v28 = v91;
  int v37 = v92;
  int v38 = HIDWORD(v91);
  LODWORD(v16) = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v45 = v16;
  if (v16) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v68 = v22;
  LODWORD(v69) = v44;
  uint64_t v70 = v23;
  int v71 = v42;
  unsigned int v72 = v41;
  int v74 = v43;
  uint64_t v75 = v24;
  uint64_t v76 = v25;
  int v77 = v40;
  int v78 = v26;
  int v79 = v39;
  int v80 = v27;
  int v81 = v28;
  int v82 = v38;
  int v83 = v37;
  int v51 = v50;
  uint64_t v53 = v22;
  int v54 = v44;
  uint64_t v55 = v23;
  int v56 = v42;
  uint64_t v57 = v41;
  int v58 = v43;
  uint64_t v59 = v24;
  uint64_t v60 = v25;
  int v61 = v40;
  int v62 = v26;
  int v63 = v39;
  int v64 = v27;
  int v65 = v28;
  int v66 = v38;
  int v67 = v37;
  int v29 = *(void (**)(int *, uint64_t *))(v47 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = v48;
  v29(&v51, &v53);
  int v73 = v46;
  if (v45)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v30, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Canvas<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t type metadata accessor for ObjcColor()
{
  return self;
}

double static MinimumScaleFactorKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MinimumScaleFactorKey.defaultValue);
}

uint64_t type metadata accessor for DynamicContainer.ItemInfo()
{
  return self;
}

uint64_t ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)@<X0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D4>, double a4@<D5>)
{
  if (*(void *)(v4 + 216))
  {
    swift_beginAccess();
    uint64_t v8 = *(void *)(v4 + 416);
    uint64_t v9 = *(void *)(v8 + 16);
    double v10 = a4;
    double v11 = a3;
    if (v9)
    {
      uint64_t v12 = (double *)(v8 + 56);
      while (*(v12 - 1) != a3 || *v12 != a4)
      {
        v12 += 11;
        if (!--v9)
        {
          double v10 = a4;
          double v11 = a3;
          goto LABEL_23;
        }
      }
      double v15 = *(v12 - 3);
      double v16 = *(v12 - 2);
      swift_beginAccess();
      if ((~*(void *)&v16 & 0x7FF0000000000000) != 0) {
        double v17 = v16;
      }
      else {
        double v17 = a4;
      }
      if ((~*(void *)&v15 & 0x7FF0000000000000) != 0) {
        double v18 = v15;
      }
      else {
        double v18 = a3;
      }
      if (*(unsigned char *)(v4 + 97)) {
        double v10 = v17;
      }
      else {
        double v10 = a4;
      }
      if (*(unsigned char *)(v4 + 97)) {
        double v11 = a3;
      }
      else {
        double v11 = v18;
      }
    }
LABEL_23:
    swift_beginAccess();
    if (*(unsigned char *)(v4 + 97)) {
      double v19 = v11;
    }
    else {
      double v19 = v10;
    }
    if (*(unsigned char *)(v4 + 97)) {
      double v20 = v10;
    }
    else {
      double v20 = v11;
    }
    unsigned int v21 = *(unsigned __int8 *)(v4 + 97) ^ 1;
    double v22 = *(double *)(v4 + 48);
    uint64_t v94 = a2;
    double v88 = v11;
    double v89 = a4;
    double v87 = v10;
    if (v22 >= 1.0) {
      goto LABEL_44;
    }
    double v23 = v22 > COERCE_DOUBLE(1) ? *(double *)(v4 + 48) : COERCE_DOUBLE(1);
    ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 0, (uint64_t)&v100, 1.0, v20, INFINITY);
    int v24 = LOBYTE(v102);
    double v25 = v103;
    double v26 = v104;
    int v27 = BYTE1(v111);
    swift_bridgeObjectRelease();
    double v28 = v24 ? v25 : v26;
    double v29 = v24 ? v26 : v25;
    if (v27 == 1 || (v28 <= v20 ? (BOOL v30 = v29 > v19) : (BOOL v30 = 1), v30))
    {
      ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 0, (uint64_t)&v100, v23, v20, INFINITY);
      int v63 = LOBYTE(v102);
      double v64 = v103;
      double v65 = v104;
      int v66 = BYTE1(v111);
      swift_bridgeObjectRelease();
      if (v63) {
        double v67 = v64;
      }
      else {
        double v67 = v65;
      }
      if (v63) {
        double v68 = v65;
      }
      else {
        double v68 = v64;
      }
      if (v66 != 1 && v67 <= v20 && v68 <= v19)
      {
        double v98 = a3;
        double v69 = 1.0;
        double v70 = v23;
        do
        {
          double v71 = v69 + (v69 - v70) * -0.5;
          ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 0, (uint64_t)&v100, v71, v20, INFINITY);
          int v72 = LOBYTE(v102);
          double v73 = v103;
          double v74 = v104;
          char v75 = BYTE1(v111);
          swift_bridgeObjectRelease();
          if (v72) {
            double v76 = v73;
          }
          else {
            double v76 = v74;
          }
          if ((v75 & 1) == 0)
          {
            double v77 = v72 ? v74 : v73;
            BOOL v78 = v77 > v19;
            double v79 = v77 > v19 ? v23 : v69 + (v69 - v70) * -0.5;
            double v80 = v78 ? v70 : v69 + (v69 - v70) * -0.5;
            double v81 = v78 ? v69 + (v69 - v70) * -0.5 : v69;
            if (v76 <= v20)
            {
              double v23 = v79;
              double v70 = v80;
              double v71 = v81;
            }
          }
          double v69 = v71;
        }
        while (v71 - v70 >= 0.01);
        double v32 = v19;
        ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 0, (uint64_t)&v100, v23, v20, v19);
        a3 = v98;
LABEL_46:
        double v96 = v101;
        double v97 = v100;
        char v90 = LOBYTE(v102);
        char v33 = BYTE1(v102);
        double v95 = v103;
        double v34 = v105;
        double v99 = v104;
        double v36 = v106;
        double v35 = v107;
        double v38 = v108;
        double v37 = v109;
        double v39 = v110;
        char v40 = LOBYTE(v111);
        char v41 = BYTE1(v111);
        char v42 = BYTE2(v111);
        double v44 = v112;
        uint64_t v43 = v113;
        double v45 = v114;
        if (ResolvedStyledText.TextLayoutManager.minorAxisIsFlexible.getter())
        {
          ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 1, (uint64_t)&v100, v34, v20, v32);
          swift_bridgeObjectRelease();
          double v96 = v101;
          double v97 = v100;
          char v47 = LOBYTE(v102);
          char v33 = BYTE1(v102);
          double v95 = v103;
          double v34 = v105;
          double v99 = v104;
          double v48 = v106;
          double v35 = v107;
          double v49 = v108;
          double v37 = v109;
          double v39 = v110;
          char v40 = LOBYTE(v111);
          char v41 = BYTE1(v111);
          char v42 = BYTE2(v111);
          double v44 = v112;
          uint64_t v43 = v113;
          double v45 = v114;
          char v50 = a1;
        }
        else
        {
          char v50 = a1;
          char v47 = v90;
          double v48 = v36;
          double v49 = v38;
        }
        double v51 = 0.0;
        double v52 = v49 + 0.0;
        if (v50)
        {
          char v86 = v40;
          double v91 = v49;
          double v93 = v48;
          double v53 = v35;
          char v54 = v47;
          double v55 = a3;
          char v56 = *(unsigned char *)(v4 + 97);
          swift_beginAccess();
          ResolvedStyledText.TextLayoutManager.drawingMargins.getter();
          double v58 = v57;
          double v60 = v59;
          ResolvedStyledText.TextLayoutManager.drawingMargins.getter();
          if (v56)
          {
            double v51 = v58 + 0.0;
            double v52 = v52 + v62;
          }
          else
          {
            double v51 = v60 + 0.0;
            double v52 = v52 + v61;
          }
          a3 = v55;
          char v47 = v54;
          double v49 = v91;
          double v48 = v93;
          double v35 = v53;
          char v40 = v86;
        }
        int v82 = *(unsigned __int8 *)(v4 + 42);
        if (*(unsigned char *)(v4 + 97))
        {
          if (!*(unsigned char *)(v4 + 42))
          {
            double v84 = 0.0;
            goto LABEL_98;
          }
          if (v82 != 1)
          {
            double v84 = v87 - v89;
            goto LABEL_98;
          }
          double v83 = v87 - v89;
LABEL_91:
          double v84 = v83 * 0.5;
LABEL_98:
          double v100 = v51 - v84;
          double v101 = v52;
          double v102 = v97;
          double v103 = v96;
          LOBYTE(v104) = v47;
          BYTE1(v104) = v33;
          double v105 = v95;
          double v106 = v99;
          double v107 = v34;
          double v108 = v48;
          double v109 = v35;
          double v110 = v49;
          double v111 = v37;
          double v112 = v39;
          LOBYTE(v113) = v40;
          BYTE1(v113) = v41;
          BYTE2(v113) = v42;
          double v114 = v44;
          uint64_t v115 = v43;
          double v116 = v45;
          _ViewInputs.base.modify(&v100, v46);
          uint64_t v14 = v94;
          return outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v100, v14);
        }
        if (*(unsigned char *)(v4 + 42))
        {
          if (v82 == 1)
          {
            double v83 = v88 - a3;
            goto LABEL_91;
          }
          double v84 = 0.0;
          if (*(unsigned char *)(v4 + 43)) {
            goto LABEL_98;
          }
        }
        else
        {
          double v84 = 0.0;
          if ((*(unsigned char *)(v4 + 43) & 1) == 0) {
            goto LABEL_98;
          }
        }
        double v84 = v88 - a3;
        goto LABEL_98;
      }
      double v31 = v23;
    }
    else
    {
LABEL_44:
      double v31 = 1.0;
    }
    double v32 = v19;
    ResolvedStyledText.TextLayoutManager.computeMetrics(scale:requestedSize:minorAxisIsFlexible:)(v21, 0, (uint64_t)&v100, v31, v20, v19);
    goto LABEL_46;
  }
  _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOi0_((uint64_t)&v100);
  uint64_t v14 = a2;
  return outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v100, v14);
}

uint64_t ResolvedStyledText.TextLayoutManager.drawingMargins.getter()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 344))
  {
    if (*(void *)(v0 + 216))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)v17);
      long long v5 = v17[0];
      long long v6 = v17[1];
      double v8 = v18;
      double v7 = v19;
      double v9 = v20;
      double v10 = v21;
    }
    else
    {
      long long v5 = 0uLL;
      double v8 = 0.0;
      double v7 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      long long v6 = 0uLL;
    }
    *(_OWORD *)(v0 + 280) = v5;
    *(_OWORD *)(v0 + 296) = v6;
    *(double *)(v0 + 312) = v8;
    *(double *)(v0 + 320) = v7;
    *(double *)(v0 + 328) = v9;
    *(double *)(v0 + 336) = v10;
    *(unsigned char *)(v0 + 344) = 0;
  }
  else
  {
    double v9 = *(double *)(v0 + 328);
    double v10 = *(double *)(v0 + 336);
    double v8 = *(double *)(v0 + 312);
    double v7 = *(double *)(v0 + 320);
  }
  swift_beginAccess();
  double v11 = v8
      + ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80))+ *(double *)(v0 + 224);
  double v12 = v7 + *(double *)(v0 + 232);
  double v13 = v9 + *(double *)(v0 + 240);
  double v14 = v10 + *(double *)(v0 + 248);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E218], v1);
  double v15 = *(double *)(v0 + 112);
  double v24 = v12;
  double v25 = v11;
  double v22 = v14;
  double v23 = v13;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t VariableBlurEffect.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int v48 = a3;
  *(void *)&long long v47 = a2;
  type metadata accessor for Text.Style?();
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v46 = v10;
  uint64_t v11 = type metadata accessor for ImageResolutionContext();
  double v12 = (int *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  double v14 = &v41[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  double v49 = &v41[-v16];
  uint64_t v18 = *a1;
  uint64_t v17 = a1[1];
  uint64_t v19 = type metadata accessor for Text.Style(0);
  double v20 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v10, 1, 1, v19);
  int v21 = *MEMORY[0x263F288F8];
  _DWORD v14[2] = 0;
  uint64_t v22 = (uint64_t)v14 + v12[8];
  v20((unsigned char *)v22, 1, 1, v19);
  uint64_t v23 = v12[9];
  *(_DWORD *)((char *)v14 + v23) = v21;
  *((unsigned char *)v14 + v12[10]) = 8;
  *((unsigned char *)v14 + v12[11]) = 3;
  *((unsigned char *)v14 + v12[12]) = 1;
  void *v14 = v18;
  v14[1] = v17;
  swift_retain();
  swift_retain();
  outlined assign with take of Text.Style?((uint64_t)v46, v22);
  *(_DWORD *)((char *)v14 + v23) = v21;
  double v24 = v49;
  outlined init with take of ImageResolutionContext((uint64_t)v14, (uint64_t)v49);
  (*(void (**)(id *__return_ptr, unsigned char *))(*(void *)v47 + 80))(&v50, v24);
  id v25 = v50;
  uint64_t v26 = v51;
  long long v47 = v52;
  uint64_t v46 = (unsigned char *)v53;
  uint64_t v27 = v54;
  uint64_t v28 = v55;
  uint64_t v29 = v56;
  LODWORD(v17) = v57;
  long long v45 = v58;
  uint64_t v44 = v59;
  uint64_t v43 = v60;
  int v30 = v61;
  int v31 = v62;
  int v32 = v63;
  int v42 = v64;
  outlined copy of GraphicsImage.Contents?(v50, v51);
  outlined release of Image.Resolved((uint64_t)&v50);
  *((void *)&v34 + 1) = v29;
  *(void *)&long long v34 = v28;
  uint64_t v33 = v34 >> 32;
  uint64_t v35 = 0x100000000;
  if (!v17) {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v35 & 0xFFFFFFFF00000000 | HIDWORD(v29);
  *(double *)a4 = a5;
  *(unsigned char *)(a4 + 8) = v48;
  if (v31) {
    int v37 = 256;
  }
  else {
    int v37 = 0;
  }
  *(unsigned char *)(a4 + 9) = 0;
  *(void *)(a4 + 16) = v25;
  *(void *)(a4 + 24) = v26;
  *(_OWORD *)(a4 + 32) = v47;
  *(void *)(a4 + 48) = v46;
  *(void *)(a4 + 56) = v27 | (v28 << 32);
  int v38 = v37 | v30 | (v32 << 16) | (v42 << 24);
  *(void *)(a4 + 64) = v33;
  *(void *)(a4 + 72) = v36;
  *(_OWORD *)(a4 + 80) = v45;
  uint64_t v39 = v43;
  *(void *)(a4 + 96) = v44;
  *(void *)(a4 + 104) = v39;
  *(_DWORD *)(a4 + 112) = v38;
  return outlined destroy of ImageResolutionContext((uint64_t)v49);
}

uint64_t Text._resolveText(in:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  double v10 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = &v20[-v12];
  if (a4)
  {
    uint64_t v16 = a1;
    uint64_t v14 = *a1;
    uint64_t v15 = v16[1];
    Text.Style.init()((uint64_t)&v20[-v12]);
    uint64_t v17 = &v13[v10[5]];
    uint64_t v18 = (uint64_t *)&v13[v10[6]];
    *uint64_t v18 = 0;
    v18[1] = 0xE000000000000000;
    v13[v10[7]] = 0;
    *uint64_t v17 = 0;
    v17[1] = 0;
    specialized Text.resolve<A>(into:in:with:)((uint64_t)v13, v14, v15, 0, a2, a3, 1, a5);
    a2 = *v18;
    swift_bridgeObjectRetain();
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v13, type metadata accessor for Text.ResolvedString);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a2;
}

uint64_t Text.resolveString(in:with:idiom:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = &v28[-v16];
  if (a6)
  {
    uint64_t v19 = *a3;
    uint64_t v18 = a3[1];
    uint64_t v20 = *a2;
    uint64_t v23 = a1;
    uint64_t v21 = *a1;
    uint64_t v22 = v23[1];
    Text.Style.init()((uint64_t)&v28[-v16]);
    double v24 = &v17[v14[5]];
    uint64_t v25 = a7;
    uint64_t v26 = (uint64_t *)&v17[v14[6]];
    *uint64_t v26 = 0;
    v26[1] = 0xE000000000000000;
    v17[v14[7]] = 0;
    *double v24 = v19;
    v24[1] = v18;
    specialized Text.resolve<A>(into:in:with:)((uint64_t)v17, v21, v22, v20, a4, a5, 1, v25);
    a4 = *v26;
    swift_bridgeObjectRetain();
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v17, type metadata accessor for Text.ResolvedString);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a4;
}

uint64_t specialized Text.resolve<A>(into:in:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v30 = a4;
  int v14 = a7 & 1;
  uint64_t v15 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = &v26[-v19];
  outlined init with copy of ResolvableStringResolutionContext(a1, (uint64_t)&v26[-v19], type metadata accessor for Text.Style);
  uint64_t v21 = *(void *)(a8 + 16);
  if (v21)
  {
    int v27 = v14;
    uint64_t v28 = a5;
    uint64_t v29 = a6;
    swift_bridgeObjectRetain();
    uint64_t v22 = (unsigned __int8 *)(a8 + 16 * v21 + 24);
    do
    {
      --v21;
      uint64_t v23 = *((void *)v22 - 1);
      unsigned __int8 v24 = *v22;
      v22 -= 16;
      v31[0] = a2;
      v31[1] = a3;
      outlined copy of Text.Modifier(v23, v24);
      Text.Modifier.modify(style:environment:)(a1, v31, v23, v24);
      outlined consume of Text.Modifier(v23, v24);
    }
    while (v21);
    swift_bridgeObjectRelease();
    specialized Text.Storage.resolve<A>(into:in:with:)(a1, a2, a3, v30, v28, v29, v27);
    outlined init with copy of ResolvableStringResolutionContext((uint64_t)v20, (uint64_t)v17, type metadata accessor for Text.Style);
    outlined assign with take of Text.Style((uint64_t)v17, a1);
  }
  else
  {
    specialized Text.Storage.resolve<A>(into:in:with:)(a1, a2, a3, v30, a5, a6, v14);
  }
  return outlined destroy of Text.ResolvedString((uint64_t)v20, type metadata accessor for Text.Style);
}

uint64_t ConcatenatedTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2[1];
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(v5 + 16);
  uint64_t v13 = *(void *)(v5 + 24);
  char v14 = *(unsigned char *)(v5 + 32);
  uint64_t v15 = *(void *)(v5 + 40);
  uint64_t v22 = *a2;
  uint64_t v9 = v22;
  uint64_t v23 = v10;
  uint64_t v21 = v11;
  Text.resolve<A>(into:in:with:)(a1, &v22, &v21, v12, v13, v14, v15, a4, a5);
  uint64_t v16 = *(void *)(v5 + 48);
  uint64_t v17 = *(void *)(v5 + 56);
  char v18 = *(unsigned char *)(v5 + 64);
  uint64_t v19 = *(void *)(v5 + 72);
  uint64_t v22 = v9;
  uint64_t v23 = v10;
  uint64_t v21 = v11;
  return Text.resolve<A>(into:in:with:)(a1, &v22, &v21, v16, v17, v18, v19, a4, a5);
}

uint64_t Text.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a5;
  int v42 = a6 & 1;
  uint64_t v15 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v41 = (uint64_t)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v21 = *a2;
  uint64_t v22 = a2[1];
  uint64_t v23 = a7;
  uint64_t v24 = *a3;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, double))(a9 + 8);
  uint64_t v45 = a9;
  v25(a8, a9, v18);
  uint64_t v26 = *(void *)(a7 + 16);
  if (v26)
  {
    uint64_t v37 = v24;
    uint64_t v39 = a4;
    char v40 = v20;
    uint64_t v44 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v45 + 24);
    swift_bridgeObjectRetain();
    uint64_t v38 = v23;
    int v27 = (unsigned __int8 *)(v23 + 16 * v26 + 24);
    do
    {
      --v26;
      uint64_t v28 = *((void *)v27 - 1);
      unsigned __int8 v29 = *v27;
      v27 -= 16;
      v48[0] = v21;
      v48[1] = v22;
      outlined copy of Text.Modifier(v28, v29);
      uint64_t v30 = a8;
      int v31 = (void (*)(uint64_t *, void))v44(&v46, a8, v45);
      Text.Modifier.modify(style:environment:)(v32, v48, v28, v29);
      v31(&v46, 0);
      a8 = v30;
      outlined consume of Text.Modifier(v28, v29);
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v46 = v21;
    uint64_t v47 = v22;
    v48[0] = v37;
    uint64_t v33 = v45;
    Text.Storage.resolve<A>(into:in:with:)(a1, &v46, v48, v39, v43, v42, v30, v45);
    uint64_t v20 = v40;
    uint64_t v34 = v41;
    outlined init with copy of Text.Style((uint64_t)v40, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v34, a8, v33);
  }
  else
  {
    uint64_t v46 = v21;
    uint64_t v47 = v22;
    v48[0] = v24;
    Text.Storage.resolve<A>(into:in:with:)(a1, &v46, v48, a4, v43, v42, a8, v45);
  }
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v20, type metadata accessor for Text.Style);
}

uint64_t protocol witness for ResolvedTextContainer.style.getter in conformance Text.Resolved@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI4TextV5StyleVWOcTm_0(v1, a1, type metadata accessor for Text.Style);
}

uint64_t Text.Storage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v15 = *a3;
  if (a6)
  {
    uint64_t v21 = *a2;
    uint64_t v22 = v13;
    v20[0] = v15;
    double v18 = *(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t))(*(void *)a4 + 80);
    swift_retain();
    v18(a1, &v21, v20, a7, a8);
    return outlined consume of Text.Storage(a4, a5, 1);
  }
  else
  {
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    v20[0] = v14;
    v20[1] = v13;
    uint64_t v19 = v15;
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    return ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v21, v20, &v19, a7, MEMORY[0x263F8D310], a8, v16);
  }
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  lazy protocol witness table accessor for type String and conformance String();
  v1._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
}

SwiftUI::Spacing __swiftcall ResolvedStyledText.StringDrawing.spacing()()
{
  uint64_t v2 = v0;
  if (*(unsigned char *)(v1 + 344))
  {
    if (*(void *)(v1 + 216))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)&v25);
      double v3 = *((double *)&v25 + 1);
      double v4 = *(double *)&v25;
      double v5 = *((double *)&v26 + 1);
      double v6 = *(double *)&v26;
      double v8 = *((double *)&v27 + 1);
      double v7 = *(double *)&v27;
      double v10 = *((double *)&v28 + 1);
      double v9 = *(double *)&v28;
    }
    else
    {
      double v7 = 0.0;
      double v8 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      double v5 = 0.0;
      double v6 = 0.0;
      double v3 = 0.0;
      double v4 = 0.0;
    }
    *(double *)(v1 + 280) = v4;
    *(double *)(v1 + 288) = v3;
    *(double *)(v1 + 296) = v6;
    *(double *)(v1 + 304) = v5;
    double v21 = v8;
    double v22 = v7;
    *(double *)(v1 + 312) = v7;
    *(double *)(v1 + 320) = v8;
    double v23 = v10;
    double v24 = v9;
    *(double *)(v1 + 328) = v9;
    *(double *)(v1 + 336) = v10;
    *(unsigned char *)(v1 + 344) = 0;
  }
  else
  {
    double v23 = *(double *)(v1 + 336);
    double v24 = *(double *)(v1 + 328);
    double v5 = *(double *)(v1 + 304);
    double v21 = *(double *)(v1 + 320);
    double v22 = *(double *)(v1 + 312);
    double v3 = *(double *)(v1 + 288);
    double v6 = *(double *)(v1 + 296);
    double v4 = *(double *)(v1 + 280);
  }
  swift_beginAccess();
  double v11 = *(double *)(v1 + 168);
  double v12 = *(double *)(v1 + 176);
  double v14 = *(double *)(v1 + 184);
  double v13 = *(double *)(v1 + 192);
  swift_beginAccess();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v15 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v15, (uint64_t)v36, INFINITY, INFINITY, v11, v12, v14, v13);
  swift_endAccess();
  swift_release();
  v35[0] = v4;
  v35[1] = v3;
  void v35[2] = v6;
  v35[3] = v5;
  v35[4] = v22;
  v35[5] = v21;
  v35[6] = v24;
  v35[7] = v23;
  swift_beginAccess();
  long long v16 = *(_OWORD *)(v1 + 128);
  long long v31 = *(_OWORD *)(v1 + 112);
  long long v32 = v16;
  long long v33 = *(_OWORD *)(v1 + 144);
  char v34 = *(unsigned char *)(v1 + 160);
  long long v17 = *(_OWORD *)(v1 + 64);
  long long v27 = *(_OWORD *)(v1 + 48);
  long long v28 = v17;
  long long v18 = *(_OWORD *)(v1 + 96);
  long long v29 = *(_OWORD *)(v1 + 80);
  long long v30 = v18;
  long long v19 = *(_OWORD *)(v1 + 32);
  long long v25 = *(_OWORD *)(v1 + 16);
  long long v26 = v19;
  return (SwiftUI::Spacing)static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(v35, v36, (uint64_t)&v25, v2);
}

uint64_t NSAttributedString.maxFontMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  double v37 = 0.0;
  double v35 = 0.0;
  char v36 = 1;
  long long v33 = 0u;
  long long v34 = 0u;
  id v4 = objc_msgSend(v1, sel_string);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t aBlock = v5;
  uint64_t v28 = v7;
  if (one-time initialization token for oversizedScalars != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for CharacterSet();
  __swift_project_value_buffer(v8, (uint64_t)static NSAttributedString.oversizedScalars);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v11 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    char v12 = dyld_program_sdk_at_least();
  }
  else {
    char v12 = static Semantics.forced >= v11;
  }
  char v13 = v10 & 1;
  if (one-time initialization token for kitFont != -1) {
    swift_once();
  }
  uint64_t v14 = static NSAttributedStringKey.kitFont;
  id v15 = objc_msgSend(v2, sel_length);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = &v39;
  *(void *)(v16 + 24) = &v38;
  *(void *)(v16 + 32) = &v37;
  *(void *)(v16 + 40) = &v35;
  *(unsigned char *)(v16 + 48) = v13 ^ 1;
  *(unsigned char *)(v16 + 49) = v12;
  *(void *)(v16 + 56) = &v33;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in NSAttributedString.maxFontMetrics.getter;
  *(void *)(v17 + 24) = v16;
  long long v31 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v32 = v17;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v28 = 1107296256;
  long long v29 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  long long v30 = &block_descriptor_13;
  long long v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateAttribute_inRange_options_usingBlock_, v14, 0, v15, 0x100000, v18);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v38;
    uint64_t v21 = v39;
    if (v36) {
      double v23 = 0.0;
    }
    else {
      double v23 = v35;
    }
    double v24 = -v37;
    long long v26 = v33;
    long long v25 = v34;
    uint64_t result = swift_release();
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(double *)(a1 + 16) = v24;
    *(double *)(a1 + 24) = v23;
    *(_OWORD *)(a1 + 32) = v26;
    *(_OWORD *)(a1 + 48) = v25;
  }
  return result;
}

uint64_t static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  id v50 = a4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = a1[1];
  double v49 = *a1;
  double v13 = a1[2];
  double v12 = a1[3];
  long long v14 = *(_OWORD *)(a3 + 112);
  long long v58 = *(_OWORD *)(a3 + 96);
  long long v59 = v14;
  long long v60 = *(_OWORD *)(a3 + 128);
  char v61 = *(unsigned char *)(a3 + 144);
  long long v15 = *(_OWORD *)(a3 + 48);
  v57[2] = *(_OWORD *)(a3 + 32);
  v57[3] = v15;
  long long v16 = *(_OWORD *)(a3 + 80);
  v57[4] = *(_OWORD *)(a3 + 64);
  v57[5] = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  v57[0] = *(_OWORD *)a3;
  v57[1] = v17;
  closure #1 in static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(&v56, &v55, v51, &v54, &v53, &v52, (uint64_t)v57);
  char v18 = v56;
  char v19 = v55;
  uint64_t v46 = v51[0];
  double v47 = v54;
  uint64_t v20 = v52;
  uint64_t v45 = v53;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  double v48 = v11;
  double v21 = v11 - v13;
  unsigned int v22 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    int v23 = dyld_program_sdk_at_least();
  }
  else {
    int v23 = static Semantics.forced >= v22;
  }
  if (v23) {
    double v24 = *(double *)&v58;
  }
  else {
    double v24 = 4.0;
  }
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8E218], v7);
  double v54 = v21 * 0.1;
  specialized FloatingPoint.round(_:toMultipleOf:)(v10, v24);
  double v25 = v54;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  int v26 = BYTE8(v58);
  unint64_t v27 = v59;
  outlined retain of TextLayoutProperties((uint64_t)v57);
  if (one-time initialization token for uniformLineHeight != -1) {
    swift_once();
  }
  if (v26 != static Text.Sizing.uniformLineHeight)
  {
    double v30 = v12;
    outlined release of TextLayoutProperties((uint64_t)v57);
    goto LABEL_17;
  }
  uint64_t v28 = qword_26B0ECAE0;
  swift_bridgeObjectRetain();
  char v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  outlined release of TextLayoutProperties((uint64_t)v57);
  double v30 = v12;
  double v31 = v12;
  if ((v29 & 1) == 0) {
LABEL_17:
  }
    double v31 = 0.0;
  double v32 = a2[1];
  double v34 = a2[3];
  double v33 = a2[4];
  uint64_t v35 = v58;
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BE290;
  if (one-time initialization token for textToText != -1) {
    swift_once();
  }
  uint64_t v37 = static Spacing.Category.textToText;
  *(void *)(inited + 32) = static Spacing.Category.textToText;
  *(unsigned char *)(inited + 40) = v18;
  double v38 = v31 * 0.5 - v13;
  double v39 = v49;
  double v40 = v48 + v31 * 0.5;
  *(double *)(inited + 48) = v40;
  *(double *)(inited + 56) = v38;
  *(double *)(inited + 64) = v30 - v31;
  double v41 = v21 + v25 - v39;
  *(void *)(inited + 72) = v35;
  *(unsigned char *)(inited + 80) = 2;
  if (v41 <= v25 + v38) {
    double v41 = v25 + v38;
  }
  *(void *)(inited + 88) = v37;
  *(unsigned char *)(inited + 96) = v19;
  *(double *)(inited + 104) = v40;
  *(double *)(inited + 112) = v38;
  *(double *)(inited + 120) = v30 - v31;
  *(void *)(inited + 128) = v35;
  *(unsigned char *)(inited + 136) = 1;
  *(void *)(inited + 144) = v20;
  *(unsigned char *)(inited + 152) = v19;
  *(double *)(inited + 160) = -(v32 - v33);
  *(void *)(inited + 176) = 0;
  *(void *)(inited + 184) = 0;
  *(void *)(inited + 168) = 0;
  *(unsigned char *)(inited + 192) = 0;
  *(void *)(inited + 200) = v45;
  *(unsigned char *)(inited + 208) = v18;
  *(double *)(inited + 216) = -v34;
  *(void *)(inited + 224) = 0;
  *(void *)(inited + 232) = 0;
  *(unsigned char *)(inited + 248) = 0;
  *(void *)(inited + 240) = 0;
  *(void *)(inited + 256) = v46;
  *(unsigned char *)(inited + 264) = v18;
  *(double *)(inited + 272) = v21 + v25 - v40;
  *(void *)(inited + 280) = 0;
  *(void *)(inited + 288) = 0;
  *(unsigned char *)(inited + 304) = 0;
  *(void *)(inited + 296) = 0;
  *(double *)(inited + 312) = v47;
  *(unsigned char *)(inited + 320) = v19;
  *(double *)(inited + 328) = v41;
  *(void *)(inited + 336) = 0;
  *(void *)(inited + 344) = 0;
  *(unsigned char *)(inited + 360) = 0;
  *(void *)(inited + 352) = 0;
  unint64_t v42 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  *id v50 = v42;
  return result;
}

unsigned char *closure #1 in static Spacing.textSpacing(maxFontMetrics:idealMetrics:layoutProperties:)(unsigned char *result, unsigned char *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t a7)
{
  if (*(unsigned char *)(a7 + 81))
  {
    *uint64_t result = 3;
    *a2 = 1;
    if (one-time initialization token for edgeRightText != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    *a3 = static Spacing.Category.edgeRightText;
    if (one-time initialization token for edgeLeftText != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    *a4 = static Spacing.Category.edgeLeftText;
    if (one-time initialization token for rightTextBaseline != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    *a5 = static Spacing.Category.rightTextBaseline;
    if (one-time initialization token for leftTextBaseline != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    uint64_t v11 = static Spacing.Category.leftTextBaseline;
  }
  else
  {
    *uint64_t result = 0;
    *a2 = 2;
    if (one-time initialization token for edgeAboveText != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    *a3 = static Spacing.Category.edgeAboveText;
    if (one-time initialization token for edgeBelowText != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    *a4 = static Spacing.Category.edgeBelowText;
    if (one-time initialization token for textBaseline != -1) {
      uint64_t result = (unsigned char *)swift_once();
    }
    uint64_t v11 = static Spacing.Category.textBaseline;
    *a5 = static Spacing.Category.textBaseline;
  }
  *a6 = v11;
  return result;
}

uint64_t ResolvedTextContainer.append<A>(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v14 = *a3;
  v22[0] = *a2;
  v22[1] = v12;
  uint64_t v21 = v14;
  if (v12)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v13, &v20);
    swift_release_n();
    swift_release_n();
    uint64_t v15 = v20;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
    BloomFilter.init(hashValue:)(v16);
    uint64_t v17 = swift_retain_n();
    uint64_t v18 = specialized find1<A>(_:key:filter:)(v17, v20);
    if (v18) {
      uint64_t v15 = *(void *)(v18 + 72);
    }
    else {
      uint64_t v15 = 0;
    }
    swift_release_n();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(a1, v22, &v21, v15 == 0, a5, a7, a4, a6);
}

void Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t a5)
{
  int v31 = a4;
  uint64_t v9 = type metadata accessor for Text.Resolved(0);
  char v10 = (int *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v32 = *a3;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v18 + 16))(&v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a5, v14);
  uint64_t v19 = String.init<A>(_:)();
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v21 = String.caseConvertedIfNeeded(_:)(&v35, v19, v20);
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = v33;
  _s7SwiftUI4TextV5StyleVWOcTm_0(v33, (uint64_t)v12, type metadata accessor for Text.Resolved);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v21;
  *(void *)(v25 + 24) = v23;
  uint64_t v26 = v24 + v10[10];
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  LODWORD(a1) = v12[v10[8]];
  uint64_t v34 = v32;
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:), v25, &v35, a1, &v34, v26);
  swift_release();
  outlined destroy of Text.Resolved((uint64_t)v12, type metadata accessor for Text.Resolved);
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  Text.Resolved.append(_:with:in:)(v21, v23, v27, &v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(v24 + v10[7]);
  if (v28)
  {
    if (objc_msgSend(v28, sel_isEmptyOrTerminatedByParagraphSeparator))
    {

      *(void *)(v26 + 128) = 0;
    }
    __int16 v29 = word_26FA78350;
    if ((v31 & 1) == 0) {
      __int16 v29 = 0;
    }
    *(_WORD *)(v26 + 32) |= v29;
  }
  else
  {
    __break(1u);
  }
}

uint64_t AttachmentTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a4;
  uint64_t v36 = a1;
  type metadata accessor for Text.Style?();
  MEMORY[0x270FA5388](v8 - 8);
  double v41 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ImageResolutionContext();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  uint64_t v37 = a5;
  double v38 = (char *)&v36 - v15;
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v39 = *a3;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  swift_retain();
  uint64_t v19 = v41;
  v18(v42, a5);
  uint64_t v20 = type metadata accessor for Text.Style(0);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v19, 0, 1, v20);
  LODWORD(v19) = *MEMORY[0x263F288F8];
  _OWORD v13[2] = 0;
  uint64_t v22 = (char *)v13 + v11[8];
  v21(v22, 1, 1, v20);
  uint64_t v24 = v40;
  uint64_t v23 = (uint64_t)v41;
  uint64_t v25 = v11[9];
  *(_DWORD *)((char *)v13 + v25) = v19;
  *((unsigned char *)v13 + v11[10]) = 8;
  *((unsigned char *)v13 + v11[11]) = 3;
  uint64_t v26 = v11[12];
  uint64_t v27 = v36;
  *((unsigned char *)v13 + v26) = 1;
  *uint64_t v13 = v16;
  v13[1] = v17;
  uint64_t v28 = (uint64_t)v22;
  uint64_t v29 = v37;
  uint64_t v30 = (uint64_t)v38;
  outlined assign with take of Text.Style?(v23, v28);
  *(_DWORD *)((char *)v13 + v25) = v19;
  uint64_t v31 = (uint64_t)v13;
  uint64_t v32 = v42;
  outlined init with take of ImageResolutionContext(v31, v30);
  uint64_t v33 = v16;
  *(void *)&v47[0] = v16;
  *((void *)&v47[0] + 1) = v17;
  uint64_t v34 = v39;
  *(void *)&v45[0] = v39;
  if (AttachmentTextStorage.resolveAndWriteAuxiliaryMetadataIfNeeded<A>(into:context:environment:options:)(v27, v30, v47, (uint64_t *)v45, v32, v29))return outlined destroy of ImageResolutionContext(v30); {
  (*(void (**)(long long *__return_ptr, uint64_t))(**(void **)(v24 + 16) + 80))(v47, v30);
  }
  v45[9] = v47[9];
  *(_OWORD *)uint64_t v46 = v48[0];
  v45[4] = v47[4];
  void v45[5] = v47[5];
  v45[6] = v47[6];
  *(_DWORD *)&v46[15] = *(_DWORD *)((char *)v48 + 15);
  v45[7] = v47[7];
  unsigned char v45[8] = v47[8];
  v45[0] = v47[0];
  v45[1] = v47[1];
  v45[2] = v47[2];
  void v45[3] = v47[3];
  v44[0] = v33;
  v44[1] = v17;
  uint64_t v43 = v34;
  (*(void (**)(_OWORD *, void *, uint64_t *, uint64_t, uint64_t))(v29 + 56))(v45, v44, &v43, v32, v29);
  outlined destroy of ImageResolutionContext(v30);
  return outlined release of Image.Resolved((uint64_t)v47);
}

void type metadata accessor for Text.Style?()
{
  if (!lazy cache variable for type metadata for Text.Style?)
  {
    type metadata accessor for Text.Style(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?);
    }
  }
}

unint64_t Text.Resolved.append(_:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v99 = type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v99);
  uint64_t v100 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = *(_OWORD *)(a1 + 144);
  v141[7] = *(_OWORD *)(a1 + 128);
  v141[8] = v9;
  v141[9] = *(_OWORD *)(a1 + 160);
  *(_DWORD *)((char *)&v141[9] + 15) = *(_DWORD *)(a1 + 175);
  long long v10 = *(_OWORD *)(a1 + 80);
  v141[3] = *(_OWORD *)(a1 + 64);
  v141[4] = v10;
  long long v11 = *(_OWORD *)(a1 + 112);
  v141[5] = *(_OWORD *)(a1 + 96);
  v141[6] = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  long long v140 = *(_OWORD *)a1;
  v141[0] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  v141[1] = *(_OWORD *)(a1 + 32);
  v141[2] = v13;
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = *a3;
  *(void *)&v124[0] = 12369903;
  uint64_t v17 = MEMORY[0x24C522990](v124, 3);
  uint64_t v19 = v18;
  *(void *)&v124[0] = v14;
  *((void *)&v124[0] + 1) = v15;
  uint64_t v20 = type metadata accessor for Text.Resolved(0);
  int v21 = *(unsigned __int8 *)(v4 + *(int *)(v20 + 24));
  uint64_t v104 = v16;
  *(void *)&long long v122 = v16;
  uint64_t v22 = v4 + *(int *)(v20 + 32);
  uint64_t v105 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)(0, 0, (uint64_t *)v124, v21, (uint64_t *)&v122, v22);
  if (!v15)
  {
    v124[0] = (unint64_t)v14;
    swift_retain();
    char v25 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)v124);
    swift_release();
    if (v25) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v26 = (void *)*((void *)&v141[9] + 1);
    LODWORD(v106) = LOWORD(v141[10]);
    unsigned int v108 = BYTE2(v141[10]);
    *(void *)&long long v98 = v140;
    LODWORD(v101) = BYTE8(v140);
    uint64_t v27 = *(void *)&v141[1];
    LODWORD(v90) = BYTE8(v141[1]);
    uint64_t v107 = *(void *)((char *)&v141[2] + 4);
    long long v91 = v141[4];
    long long v92 = v141[3];
    LODWORD(v89) = LOBYTE(v141[5]);
    LODWORD(v88) = BYTE1(v141[5]);
    int v87 = BYTE2(v141[5]);
    int v86 = BYTE3(v141[5]);
    long long v85 = v141[0];
    long long v138 = v140;
    v139[0] = v141[0];
    *(_OWORD *)((char *)v139 + 12) = *(_OWORD *)((char *)v141 + 12);
    char v137 = BYTE12(v141[2]);
    long long v134 = *(_OWORD *)((char *)&v141[5] + 13);
    long long v135 = *(_OWORD *)((char *)&v141[6] + 13);
    *(_OWORD *)uint64_t v136 = *(_OWORD *)((char *)&v141[7] + 13);
    *(_OWORD *)&v136[11] = *(_OWORD *)((char *)&v141[8] + 8);
    long long v131 = *(_OWORD *)((char *)&v141[2] + 13);
    long long v132 = *(_OWORD *)((char *)&v141[3] + 13);
    long long v133 = *(_OWORD *)((char *)&v141[4] + 13);
    LODWORD(v93) = BYTE12(v141[2]);
    uint64_t v96 = v4;
    uint64_t v97 = v22;
    uint64_t v94 = v17;
    uint64_t v95 = v19;
    if (BYTE12(v141[2]))
    {
      unint64_t v28 = *(void *)((char *)&v141[1] + 12);
      outlined retain of Image.Resolved((uint64_t)&v140);
      unint64_t v29 = v28;
      char v30 = (char)v101;
      char v31 = (char)v93;
      long long v33 = v91;
      long long v32 = v92;
      char v34 = v90;
      char v35 = v89;
      char v37 = v87;
      char v36 = v88;
      char v38 = v86;
      long long v39 = v85;
      goto LABEL_18;
    }
    id v103 = (id)*((void *)&v141[9] + 1);
    *(void *)&long long v122 = *(void *)(v4 + 16);
    *(void *)&v124[0] = v14;
    *((void *)&v124[0] + 1) = v15;
    *(void *)&long long v109 = v104;
    outlined retain of Image.Resolved((uint64_t)&v140);
    unint64_t result = Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)((uint64_t *)v124, (uint64_t *)&v109, v22, 1);
    uint64_t v107 = v41;
    if (v42)
    {
      __break(1u);
      return result;
    }
    char v137 = 0;
    unint64_t v102 = result;
    if (v101 == 2)
    {
      uint64_t v43 = *(void **)(v98 + 32);
      uint64_t v44 = *(void **)(v98 + 48);
      id v45 = *(id *)(v98 + 16);
      outlined copy of Image.Location(v43);
      id v46 = v44;
      id v47 = v45;
      outlined copy of Image.Location(v43);
      id v106 = v46;
      __int16 v48 = (unsigned __int16)objc_msgSend(v47, sel_styleMask);
      *(void *)&long long v122 = v43;
      outlined copy of Image.Location(v43);
      _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v48, (void **)&v122, (uint64_t)v124);

      outlined consume of Image.Location(v43);
      uint64_t v22 = v97;
      id v49 = v106;

      outlined consume of Image.Location(v43);
      uint64_t v26 = *(void **)&v124[0];
      LODWORD(v106) = WORD4(v124[0]);
      int v50 = BYTE10(v124[0]);
      if ((v108 & 2) == 0)
      {
LABEL_13:
        unsigned int v51 = v50 & 0xFFFFFFFD;
        goto LABEL_14;
      }
    }
    else
    {
      LODWORD(v106) = v101 != 255;

      int v50 = 0;
      uint64_t v26 = 0;
      if ((v108 & 2) == 0) {
        goto LABEL_13;
      }
    }
    unsigned int v51 = v50 | 2;
LABEL_14:
    unsigned int v108 = v51;
    unint64_t v29 = v102;
    char v31 = (char)v93;
    long long v33 = v91;
    long long v32 = v92;
    char v34 = v90;
    char v35 = v89;
    char v37 = v87;
    char v36 = v88;
    char v38 = v86;
    long long v39 = v85;
    __int16 v52 = *(_WORD *)(v22 + 32);
    char v30 = (char)v101;
    if ((v52 & 1) == 0 && *(float *)&v102 == -1.0 && *((float *)&v102 + 1) == -1.0) {
      *(_WORD *)(v22 + 32) = v52 | 1;
    }
LABEL_18:
    char v53 = BYTE8(v141[8]);
    uint64_t v54 = *((void *)&v141[5] + 1);
    uint64_t v55 = *((void *)&v141[6] + 1);
    *(void *)&v124[0] = v98;
    BYTE8(v124[0]) = v30;
    v124[1] = v39;
    *(void *)&v125[0] = v27;
    BYTE8(v125[0]) = v34;
    unint64_t v102 = v29;
    *(void *)((char *)v125 + 12) = v29;
    *(void *)((char *)&v125[1] + 4) = v107;
    BYTE12(v125[1]) = v31;
    v125[2] = v32;
    v125[3] = v33;
    LOBYTE(v126) = v35;
    BYTE1(v126) = v36;
    BYTE2(v126) = v37;
    BYTE3(v126) = v38;
    *((void *)&v126 + 1) = *((void *)&v141[5] + 1);
    *(void *)&long long v92 = *(void *)&v141[6];
    long long v127 = v141[6];
    long long v98 = v141[7];
    long long v128 = v141[7];
    *(void *)&long long v129 = *(void *)&v141[8];
    WORD4(v129) = WORD4(v141[8]);
    HIDWORD(v129) = HIDWORD(v141[8]);
    v130[0] = v141[9];
    id v103 = v26;
    *(void *)&v130[8] = v26;
    *(_WORD *)&v130[16] = (_WORD)v106;
    v130[18] = v108;
    *(_OWORD *)&v123[112] = v141[7];
    *(_OWORD *)&v123[128] = v129;
    *(_OWORD *)&v123[144] = *(_OWORD *)v130;
    *(_DWORD *)&v123[159] = *(_DWORD *)&v130[15];
    *(_OWORD *)&v123[80] = v126;
    *(_OWORD *)&v123[96] = v141[6];
    *(_OWORD *)&v123[48] = v32;
    *(_OWORD *)&v123[64] = v33;
    long long v122 = v124[0];
    *(_OWORD *)uint64_t v123 = v39;
    *(_OWORD *)&v123[16] = v125[0];
    *(_OWORD *)&v123[32] = v125[1];
    Class v93 = (Class)type metadata accessor for SwiftUITextAttachment();
    id v56 = objc_allocWithZone(v93);
    outlined retain of Image.Resolved((uint64_t)v124);
    id v57 = SwiftUITextAttachment.init(image:)(&v122);
    if ((v104 & 1) == 0 || (v53 & 1) != 0 || (v55 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
LABEL_28:
      id v101 = v57;
      uint64_t v73 = v105;
      if (v15)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v75 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
      }
      else
      {
        uint64_t v77 = swift_retain_n();
        uint64_t v75 = specialized closure #1 in PropertyList.subscript.getter(v77, (uint64_t)&v121);
      }
      uint64_t v76 = v74;
      swift_release_n();
      swift_release_n();
      if (v75)
      {
        long long v122 = v138;
        *(_OWORD *)uint64_t v123 = v139[0];
        *(_OWORD *)&v123[12] = *(_OWORD *)((char *)v139 + 12);
        *(_OWORD *)&v123[93] = v134;
        *(_OWORD *)&v123[109] = v135;
        *(_OWORD *)&v123[125] = *(_OWORD *)v136;
        *(_OWORD *)&v123[136] = *(_OWORD *)&v136[11];
        *(_OWORD *)&v123[45] = v131;
        *(void *)&v123[28] = v102;
        *(void *)&v123[36] = v107;
        v123[44] = v137;
        *(_OWORD *)&v123[61] = v132;
        *(_OWORD *)&v123[77] = v133;
        *(void *)&v123[152] = v103;
        *(_WORD *)&v123[160] = (_WORD)v106;
        v123[162] = v108;
        long long v117 = *(_OWORD *)&v123[112];
        long long v118 = *(_OWORD *)&v123[128];
        *(_OWORD *)unint64_t v119 = *(_OWORD *)&v123[144];
        *(_DWORD *)&v119[15] = *(_DWORD *)&v123[159];
        long long v113 = *(_OWORD *)&v123[48];
        long long v114 = *(_OWORD *)&v123[64];
        long long v115 = *(_OWORD *)&v123[80];
        long long v116 = *(_OWORD *)&v123[96];
        long long v109 = v138;
        long long v110 = *(_OWORD *)v123;
        long long v111 = *(_OWORD *)&v123[16];
        long long v112 = *(_OWORD *)&v123[32];
        BOOL v78 = *(void (**)(id, long long *, uint64_t, uint64_t))(v76 + 16);
        outlined retain of Image.Resolved((uint64_t)&v122);
        v78(v101, &v109, v75, v76);
        outlined release of Image.Resolved((uint64_t)&v122);
      }
      if (one-time initialization token for kitAttachment != -1) {
        swift_once();
      }
      double v79 = (void *)static NSAttributedStringKey.kitAttachment;
      *((void *)&v110 + 1) = v93;
      double v80 = v101;
      *(void *)&long long v109 = v101;
      outlined init with take of Any(&v109, &v122);
      id v81 = v80;
      id v82 = v79;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v120 = v73;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v122, v82, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v120;

      swift_bridgeObjectRelease();
      long long v122 = v138;
      *(_OWORD *)uint64_t v123 = v139[0];
      *(_OWORD *)&v123[12] = *(_OWORD *)((char *)v139 + 12);
      *(_OWORD *)&v123[93] = v134;
      *(_OWORD *)&v123[109] = v135;
      *(_OWORD *)&v123[125] = *(_OWORD *)v136;
      *(_OWORD *)&v123[136] = *(_OWORD *)&v136[11];
      *(_OWORD *)&v123[45] = v131;
      *(_OWORD *)&v123[61] = v132;
      *(void *)&v123[28] = v102;
      *(void *)&v123[36] = v107;
      v123[44] = v137;
      *(_OWORD *)&v123[77] = v133;
      *(void *)&v123[152] = v103;
      *(_WORD *)&v123[160] = (_WORD)v106;
      v123[162] = v108;
      outlined release of Image.Resolved((uint64_t)&v122);
      uint64_t v22 = v97;
      uint64_t v17 = v94;
      uint64_t v19 = v95;
      goto LABEL_36;
    }
    *(void *)&long long v91 = v54;
    if (v55 < 0)
    {
      type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
      uint64_t v63 = swift_allocObject();
      uint64_t v58 = v92;
      uint64_t v88 = v63;
      *(void *)(v63 + 16) = v54;
      *(void *)(v63 + 24) = v58;
      outlined copy of AccessibilityImageLabel(v54, v58, v55);
      uint64_t v64 = 0;
      uint64_t v65 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v58 = v92;
      if ((v55 & 1) == 0)
      {
        outlined copy of AccessibilityImageLabel?(v54, v92, v55);
        outlined copy of Text.Storage(v54, v58, 0);
        id v59 = v57;
        uint64_t v60 = v54;
        char v61 = v57;
        uint64_t v62 = v58;
LABEL_27:
        int v72 = (void *)MEMORY[0x24C522820](v60, v62);
        swift_bridgeObjectRelease();
        objc_msgSend(v61, sel_setAccessibilityLabel_, v72);

        outlined consume of AccessibilityImageLabel?(v91, v92, v55);
        id v57 = v61;
        goto LABEL_28;
      }
      uint64_t v65 = v98;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v54, v58, 1);
      uint64_t v88 = v54;
      uint64_t v64 = v58;
    }
    uint64_t v89 = v65;
    uint64_t v90 = v55;
    outlined copy of AccessibilityImageLabel?(v54, v58, v55);
    id v66 = v57;
    uint64_t v67 = v100;
    Text.Style.init()(v100);
    uint64_t v68 = v99;
    double v69 = (void *)(v67 + *(int *)(v99 + 20));
    char v61 = v57;
    double v70 = (uint64_t *)(v67 + *(int *)(v99 + 24));
    *double v70 = 0;
    v70[1] = 0xE000000000000000;
    *(unsigned char *)(v67 + *(int *)(v68 + 28)) = 0;
    *double v69 = 0;
    v69[1] = 0;
    uint64_t v71 = v88;
    specialized Text.resolve<A>(into:in:with:)(v67, v14, v15, v104, v88, v64, 1, v65);
    uint64_t v60 = *v70;
    uint64_t v62 = v70[1];
    swift_bridgeObjectRetain();
    outlined destroy of Text.Resolved(v67, type metadata accessor for Text.ResolvedString);
    outlined consume of Text.Storage(v71, v64, 1);
    swift_bridgeObjectRelease();
    uint64_t v55 = v90;
    goto LABEL_27;
  }
  swift_retain_n();
  swift_retain_n();
  char v23 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v14);
  swift_release_n();
  swift_release_n();
  if ((v23 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v24 = v105;
LABEL_36:
  *(void *)&v124[0] = v14;
  *((void *)&v124[0] + 1) = v15;
  Text.Resolved.append(_:with:in:)(v17, v19, v24, (uint64_t *)v124);
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  __int16 v84 = *(_WORD *)(v22 + 32);
  if ((v84 & 2) == 0) {
    *(_WORD *)(v22 + 32) = v84 | 2;
  }
  return result;
}

uint64_t type metadata accessor for Text.ResolvedString(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.ResolvedString);
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>);
    }
  }
}

uint64_t type metadata accessor for SwiftUITextAttachment()
{
  return self;
}

id SwiftUITextAttachment.init(image:)(long long *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v4 = a1[9];
  long long v33 = a1[8];
  long long v34 = v4;
  v35[0] = a1[10];
  *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)((char *)a1 + 175);
  long long v5 = a1[5];
  long long v29 = a1[4];
  long long v30 = v5;
  long long v6 = a1[7];
  long long v31 = a1[6];
  long long v32 = v6;
  long long v7 = a1[1];
  long long v26 = *a1;
  long long v27 = v7;
  long long v8 = a1[3];
  *(_OWORD *)unint64_t v28 = a1[2];
  *(_OWORD *)&unsigned char v28[16] = v8;
  long long v9 = (void *)v26;
  int v10 = BYTE8(v26);
  uint64_t v11 = *(void *)v28;
  char v12 = v28[8];
  char v13 = v31;
  char v14 = BYTE1(v31);
  __int16 v15 = WORD1(v31);
  uint64_t v16 = &v1[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_graphicsImage];
  *(void *)uint64_t v16 = v26;
  unsigned __int8 v16[8] = v10;
  *((_OWORD *)v16 + 1) = v27;
  *((void *)v16 + 4) = v11;
  unsigned char v16[40] = v12;
  *(_OWORD *)(v16 + 44) = *(_OWORD *)&v28[12];
  v16[60] = BYTE12(v8);
  long long v17 = v30;
  *((_OWORD *)v16 + 4) = v29;
  *((_OWORD *)v16 + 5) = v17;
  v16[96] = v13;
  v16[97] = v14;
  *((_WORD *)v16 + 49) = v15;
  if (v10 == 2)
  {
    if ((void)v34)
    {
      uint64_t v19 = *(void *)(v34 + 48);
      uint64_t v18 = *(void *)(v34 + 56);
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    outlined copy of GraphicsImage.Contents?(v9, 2);
    uint64_t v22 = v1;
    outlined release of Image.Resolved((uint64_t)&v26);
    char v23 = &v22[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin];
    *(void *)char v23 = v19;
    *((void *)v23 + 1) = v18;
  }
  else
  {
    outlined copy of GraphicsImage.Contents?(v9, v10);
    uint64_t v20 = v1;
    outlined release of Image.Resolved((uint64_t)&v26);
    int v21 = &v20[OBJC_IVAR____TtC7SwiftUI21SwiftUITextAttachment_alignmentOrigin];
    *(void *)int v21 = 0;
    *((void *)v21 + 1) = 0;
  }

  v25.receiver = v1;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, sel_initWithData_ofType_, 0, 0);
}

uint64_t (*protocol witness for DebuggableGesturePhase.phase.modify in conformance EventListenerPhase<A>.Value())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for ResolvedTextContainer.style.setter in conformance Text.Resolved(uint64_t a1)
{
  return outlined assign with take of Text.Style(a1, v1, type metadata accessor for Text.Style);
}

uint64_t outlined init with copy of Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double ResolvedStyledText.TextLayoutManager.sizeThatFits(_:)(uint64_t a1)
{
  double v2 = *(double *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 97)) {
    double v6 = v4;
  }
  else {
    double v6 = v2;
  }
  if (*(unsigned char *)(v1 + 97)) {
    char v7 = v5;
  }
  else {
    char v7 = v3;
  }
  if (*(unsigned char *)(v1 + 97)) {
    double v8 = v2;
  }
  else {
    double v8 = v4;
  }
  if (*(unsigned char *)(v1 + 97)) {
    char v9 = v3;
  }
  else {
    char v9 = v5;
  }
  double v10 = v6;
  double v11 = v8;
  if (v9) {
    double v11 = INFINITY;
  }
  if (v7)
  {
    double v10 = INFINITY;
    int v12 = 256;
  }
  else
  {
    int v12 = 0;
  }
  specialized ResolvedStyledText.TextLayoutManager.metrics(in:layoutMargins:)(v12 | *(unsigned __int8 *)(v1 + 97) ^ 1, (uint64_t)&v14, v10, v11);
  return v14;
}

uint64_t ResolvedStyledText.TextLayoutManager.minorAxisIsFlexible.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1 && (uint64_t)objc_msgSend(*(id *)(v0 + 216), sel_length) >= 1)
  {
    if (one-time initialization token for updateSchedule != -1) {
      swift_once();
    }
    uint64_t v2 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v1, sel_length);
    if (objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v2, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v4);
      return *(unsigned char *)(v0 + 256) & 1;
    }
    memset(v4, 0, sizeof(v4));
    outlined destroy of Any?((uint64_t)v4);
  }
  return 0;
}

uint64_t one-time initialization function for v2_3()
{
  uint64_t result = swiftUI_v2_3_os_versions();
  static Semantics.v2_3 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v2_3_os_versions()
{
  return 0x7E50301FFFFFFFFLL;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HyphenationFactorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t one-time initialization function for introduced(uint64_t a1)
{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2, &static Semantics.v2, &static _SemanticFeature_v2.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v5, &static Semantics.v5, &static _SemanticFeature_v5.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v3, &static Semantics.v3, &static _SemanticFeature_v3.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v6, &static Semantics.v6, &static _SemanticFeature_v6.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v4, &static Semantics.v4, &static _SemanticFeature_v4.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2_1, &static Semantics.v2_1, &static _SemanticFeature_v2_1.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v2_3, &static Semantics.v2_3, &static _SemanticFeature_v2_3.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v6, &static Semantics.v6, &static Semantics.DismissPopsInNavigationSplitViewRoots.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v4_4, &static Semantics.v4_4, &static _SemanticFeature_v4_4.introduced);
}

{
  return one-time initialization function for introduced(a1, one-time initialization token for v5_2, &static Semantics.v5_2, &static _SemanticFeature_v5_2.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for v6_1, &static Semantics.v6_1, &static _SemanticFeature_v6_1.introduced);
}

{
  return one-time initialization function for introduced(a1, &one-time initialization token for firstRelease, &static Semantics.firstRelease, &static EnabledFeature.introduced);
}

uint64_t destroy for Image.ImageViewChild(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t instantiation function for generic protocol witness table for Font.ModifierProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t static Alignment.bottomTrailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottomTrailing, (uint64_t)&static Alignment.bottomTrailing);
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in AttributeInvalidatingSubscriber<A>()
{
  return swift_getWitnessTable();
}

unsigned __int8 *AccessibilityNullableOptionSet<>.init(adding:)@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  *a2 = v3;
  a2[1] = v3;
  return result;
}

uint64_t base witness table accessor for Sequence in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in CountingIndexCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t LanguageAwareLineHeightRatioTextModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AnyLayout()
{
  return &type metadata for AnyLayout;
}

ValueMetadata *type metadata accessor for Gradient.Stop()
{
  return &type metadata for Gradient.Stop;
}

double static Font.Weight.thin.getter()
{
  return -0.6;
}

ValueMetadata *type metadata accessor for _ProposedSize()
{
  return &type metadata for _ProposedSize;
}

ValueMetadata *type metadata accessor for IsCancellableGestureKey()
{
  return &type metadata for IsCancellableGestureKey;
}

uint64_t type metadata completion function for ImageProviderBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall _CustomHoverEffectInputs.removeContextFromEnvironment()()
{
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment();
  int v1 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_WORD *)(v4 + 80) = 256;
  *(void *)(v4 + 88) = v3;
  swift_release();
  *(void *)(v0 + 16) = v4;
  int v5 = *(_DWORD *)(v0 + 32);
  if ((v5 & 0x20) == 0) {
    *(_DWORD *)(v0 + 32) = v5 | 0x20;
  }
}

unint64_t lazy protocol witness table accessor for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment;
  if (!lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClearCustomHoverEffectContextFromEnvironment and conformance ClearCustomHoverEffectContextFromEnvironment);
  }
  return result;
}

void one-time initialization function for latestTriggers()
{
  static ObservationRegistrar.latestTriggers = MEMORY[0x263F8EE78];
}

uint64_t type metadata completion function for _ClipEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t type metadata completion function for LinkDestination()
{
  uint64_t result = type metadata accessor for LinkDestination.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LinkDestination.Configuration(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LinkDestination.Configuration);
}

void storeEnumTagSinglePayload for Pair(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            char v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t EnvironmentValues.explicitPreferredColorScheme.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>, (uint64_t)&type metadata for ExplicitPreferredColorSchemeKey, (uint64_t)&protocol witness table for ExplicitPreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EventBindingManager.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  outlined destroy of weak GestureGraphDelegate?(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int one-time initialization function for hostingViewCoordinateSpace()
{
  Swift::Int result = AGMakeUniqueID();
  hostingViewCoordinateSpace.value.Swift::UInt value = result;
  return result;
}

uint64_t static Text.Sizing.standard.getter@<X0>(void *a1@<X0>, unsigned char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *(unsigned char *)a4 = *a2;
  *(void *)(a4 + 8) = v7;

  return swift_bridgeObjectRetain();
}

void *static SymbolVariants.circle.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for circle, &static SymbolVariants.circle, (char *)&static SymbolVariants.circle + 1, a1);
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)Swift::Int result = v2;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollPositionBindingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static ScrollPositionBindingModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextSuffixModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static TextSuffixModifier._makeInputs(modifier:inputs:));
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t *, long long *))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v23 = *(_OWORD *)(a2 + 48);
  long long v24 = v8;
  char v25 = *(unsigned char *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  *(_OWORD *)unint64_t v22 = v9;
  *(_OWORD *)&v22[16] = v7;
  LODWORD(v12) = a1;
  outlined retain of _ViewListInputs(a2);
  a5(&v12, &v21);
  uint64_t v12 = v21;
  int v13 = DWORD2(v21);
  uint64_t v14 = *(void *)v22;
  long long v15 = *(_OWORD *)&v22[8];
  uint64_t v16 = *(void *)&v22[24];
  long long v17 = v23;
  int v18 = v24;
  uint64_t v19 = *((void *)&v24 + 1);
  char v20 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static TextSuffixModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ResolvedOptionalTextFilter(0);
  MEMORY[0x270FA5388](v4);
  long long v6 = (_DWORD *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v40 = *a1;
  int v45 = v40;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for Text?(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, MEMORY[0x263F8D8F0]);
  lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText();
  int v38 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v7 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v8 = *(_DWORD *)(v7 + 16);
  int v39 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (v11) {
    *(void *)&long long v12 = *(void *)(v11 + 72);
  }
  else {
    long long v12 = 0uLL;
  }
  long long v37 = v12;
  swift_release();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    int v36 = *(unsigned __int8 *)(v14 + 72);
    char v15 = *(unsigned char *)(v14 + 73);
  }
  else
  {
    int v36 = 0;
    char v15 = 2;
  }
  swift_release();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized find<A>(_:key:)(v9);
  if (v16)
  {
    uint64_t v18 = *(void *)(v16 + 72);
    long long v17 = *(_UNKNOWN ***)(v16 + 80);
    swift_release();
    if (v18)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_12;
    }
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>();
  uint64_t v18 = v19;
  long long v17 = &protocol witness table for InterfaceIdiomBox<A>;
LABEL_12:
  *long long v6 = v38;
  v6[1] = v8;
  char v20 = (char *)v6 + *(int *)(v4 + 24);
  uint64_t v21 = type metadata accessor for ResolvedTextHelper(0);
  *(void *)&v20[*(int *)(v21 + 56)] = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)char v20 = v39;
  *(void *)(v20 + 4) = v37;
  *((_WORD *)v20 + 6) = 257;
  v20[14] = v36;
  v20[15] = v15;
  *((_WORD *)v20 + 8) = 64;
  v20[18] = 0;
  *((void *)v20 + 3) = v18;
  *((void *)v20 + 4) = v17;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v22 = swift_allocObject();
  type metadata accessor for Text?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  uint64_t v24 = MEMORY[0x263F8EE80];
  uint64_t v25 = MEMORY[0x263F8EE78];
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v24;
  *(void *)(v23 + 48) = v25;
  *(unsigned char *)(v23 + 56) = 0;
  *(void *)(v22 + 16) = v23;
  *((void *)v20 + 5) = v22;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *(void *)&v20[*(int *)(v21 + 60)] = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText?();
  lazy protocol witness table accessor for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter();
  int v26 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ResolvedOptionalTextFilter((uint64_t)v6);
  int v43 = v40;
  int v44 = v26;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter();
  int v27 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v28 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v29 = *(_DWORD *)(v28 + 16);
  int v41 = v27;
  int v42 = v29;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  type metadata accessor for Text?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v30;
  *(void *)(v32 + 24) = v25;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_WORD *)(v32 + 80) = 256;
  *(void *)(v32 + 88) = v31;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v32;
  int v34 = *(_DWORD *)(a2 + 32);
  if ((v34 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v34 | 0x20;
  }
  return result;
}

void type metadata accessor for Text?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  TextSuffixModifier.ResolvedTextSuffixFilter.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return outlined consume of ResolvedTextSuffix(v1[0], (uint64_t)v1[1], v2, v3, v4, v5);
}

uint64_t TextSuffixModifier.ResolvedTextSuffixFilter.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  unint64_t v5 = (unint64_t)Value[2] >> 62;
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = Value[2] & 1;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v3, v4, v6);
      outlined consume of Text.Storage(v3, v4, v6);
      swift_bridgeObjectRelease();
      TextSuffixModifier.ResolvedTextSuffixFilter.line.getter((uint64_t)&v18);
      if (v19 != 255)
      {
        long long v14 = v18;
        long long v16 = v20;
        uint64_t v7 = v19 & 1;
        uint64_t v8 = v21;
        type metadata accessor for ResolvedStyledText?();
        if (*(void *)AGGraphGetValue()) {
          uint64_t result = swift_bridgeObjectRetain();
        }
        else {
          uint64_t result = MEMORY[0x263F8EE78];
        }
        uint64_t v11 = v8 | 0x4000000000000000;
        *(_OWORD *)a1 = v14;
        *(void *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 24) = v16;
        goto LABEL_8;
      }
    }
LABEL_7:
    uint64_t result = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v11 = 0x8000000000000000;
    *(void *)(a1 + 32) = 0;
LABEL_8:
    *(void *)(a1 + 40) = v11;
    goto LABEL_9;
  }
  uint64_t v10 = Value[2] & 1;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v3, v4, v10);
  outlined consume of Text.Storage(v3, v4, v10);
  swift_bridgeObjectRelease();
  TextSuffixModifier.ResolvedTextSuffixFilter.line.getter((uint64_t)&v18);
  if (v19 == 255) {
    goto LABEL_7;
  }
  long long v15 = v18;
  long long v17 = v20;
  uint64_t v12 = v19 & 1;
  uint64_t v13 = v21;
  type metadata accessor for ResolvedStyledText?();
  if (*(void *)AGGraphGetValue()) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  *(_OWORD *)a1 = v15;
  *(void *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 24) = v17;
  *(void *)(a1 + 40) = v13;
LABEL_9:
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t *TextSuffixModifier.ResolvedTextSuffixFilter.line.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedStyledText?();
  uint64_t result = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v14 = 0;
    char v15 = 1;
    uint64_t v16 = 0;
    char v17 = 1;
    uint64_t v4 = *(double (**)(uint64_t *))(*(void *)v3 + 224);
    swift_retain();
    v5.n128_u64[0] = v4(&v14);
    v7.n128_f64[0] = v6;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, double, double, __n128, __n128, double, double))(*(void *)v3 + 296))(&v14, 1, 0.0, 0.0, v5, v7, v5.n128_f64[0], v6);
    if (v14)
    {
      if (*(void *)(v14 + 16) == 1)
      {
        uint64_t v8 = *(void **)(v14 + 32);
        uint64_t v9 = *(void *)(v14 + 40);
        uint64_t v10 = *(unsigned __int8 *)(v14 + 48);
        uint64_t v11 = *(void *)(v14 + 56);
        uint64_t v12 = *(void *)(v14 + 64);
        int v13 = *(_DWORD *)(v14 + 72);
        outlined copy of Text.Layout.Line.Line(v8, v9, *(unsigned char *)(v14 + 48));
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t *)swift_release();
        *(void *)a1 = v8;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = v12;
        *(_DWORD *)(a1 + 40) = v13;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t result = (uint64_t *)swift_release();
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 255;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

void type metadata accessor for ResolvedStyledText?()
{
  if (!lazy cache variable for type metadata for ResolvedStyledText?)
  {
    type metadata accessor for ResolvedStyledText();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResolvedStyledText?);
    }
  }
}

uint64_t outlined destroy of ResolvedOptionalTextFilter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvedOptionalTextFilter(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Void __swiftcall ResolvedOptionalTextFilter.updateValue()()
{
  v100[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v90 = *(void *)(v1 - 8);
  uint64_t v91 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v89 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Update = type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  MEMORY[0x270FA5388](Update);
  uint64_t v4 = (uint64_t *)((char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  __n128 v7 = (char *)&v81 - v6;
  _sypSgMaTm_3(0, &lazy cache variable for type metadata for Text?, (uint64_t)&type metadata for Text, MEMORY[0x263F8D8F0]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v10 = v9;
  uint64_t v11 = *Value;
  uint64_t v12 = (void *)Value[1];
  uint64_t v14 = Value[2];
  int v13 = (void *)Value[3];
  uint64_t v96 = v0;
  uint64_t v97 = v13;
  char v15 = (uint64_t *)AGGraphGetValue();
  char v17 = v16;
  uint64_t v18 = *v15;
  uint64_t v98 = v15[1];
  _s10Foundation4DateVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for ResolvedStyledText?, v19, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedStyledText, MEMORY[0x263F8D8F0]);
  uint64_t v92 = v20;
  uint64_t OutputValue = AGGraphGetOutputValue();
  uint64_t v95 = v18;
  uint64_t v93 = v14;
  if (!OutputValue)
  {
    outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
    swift_retain();
    goto LABEL_20;
  }
  uint64_t v22 = type metadata accessor for ResolvedOptionalTextFilter(0);
  uint64_t v23 = (void *)(v96 + *(int *)(v22 + 24));
  if (v10)
  {
    uint64_t v41 = v23[9];
    if (v41)
    {
      if (v97)
      {
        int v43 = (void *)v23[6];
        uint64_t v42 = v23[7];
        uint64_t v85 = v23[8];
        int v86 = (void *)v42;
        uint64_t v87 = v41;
        if (v85)
        {
          if (v14)
          {
            __int16 v84 = v7;
            int v44 = (uint64_t (**)(uint64_t))(*v43 + 96);
            double v83 = *v44;
            uint64_t v88 = v12;
            id v82 = v44;
            uint64_t v45 = v42;
            uint64_t v46 = v97;
            outlined copy of Text?(v11, (uint64_t)v12, v93, (uint64_t)v97);
            swift_retain();
            swift_retain();
            char v47 = v85;
            outlined copy of Text?((uint64_t)v43, v45, v85, v87);
            uint64_t v48 = (uint64_t)v88;
            outlined copy of Text?(v11, (uint64_t)v88, v93, (uint64_t)v46);
            swift_retain();
            swift_retain();
            uint64_t v49 = (uint64_t)v86;
            outlined copy of Text?((uint64_t)v43, (uint64_t)v86, v47, v87);
            outlined copy of Text.Storage((uint64_t)v43, v49, 1);
            outlined copy of Text.Storage(v11, v48, 1);
            char v50 = v83(v11);
            uint64_t v14 = v93;
            LOBYTE(v49) = v50;
            outlined consume of Text.Storage(v11, v48, 1);
            outlined consume of Text.Storage((uint64_t)v43, (uint64_t)v86, 1);
            char v51 = 1;
            if (v49) {
              goto LABEL_44;
            }
            goto LABEL_27;
          }
        }
        else if ((v14 & 1) == 0)
        {
          __int16 v84 = v7;
          if (v43 == (void *)v11 && (void *)v42 == v12)
          {
            outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
            swift_retain();
            swift_retain();
            char v47 = v85;
            uint64_t v75 = v87;
            outlined copy of Text?(v11, (uint64_t)v12, v85, v87);
            outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
            swift_retain();
            swift_retain();
            outlined copy of Text?(v11, (uint64_t)v12, v47, v75);
            uint64_t v48 = (uint64_t)v12;
            goto LABEL_44;
          }
          uint64_t v76 = v42;
          int v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v88 = v12;
          LODWORD(v83) = v77;
          outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
          swift_retain();
          swift_retain();
          uint64_t v78 = v76;
          char v47 = v85;
          uint64_t v79 = v87;
          outlined copy of Text?((uint64_t)v43, v78, v85, v87);
          uint64_t v48 = (uint64_t)v88;
          outlined copy of Text?(v11, (uint64_t)v88, v14, (uint64_t)v97);
          swift_retain();
          swift_retain();
          outlined copy of Text?((uint64_t)v43, (uint64_t)v86, v47, v79);
          char v51 = 0;
          if (v83)
          {
LABEL_44:
            LODWORD(v83) = v47 & 1;
            LODWORD(v82) = specialized static Array<A>.== infix(_:_:)(v87, (uint64_t)v97);
            outlined consume of Text.Storage(v11, v48, v14 & 1);
            swift_bridgeObjectRelease();
            uint64_t v80 = (uint64_t)v86;
            outlined consume of Text?((uint64_t)v43, (uint64_t)v86, v85, v87);
            outlined consume of Text.Storage((uint64_t)v43, v80, (char)v83);
            swift_bridgeObjectRelease();
            uint64_t v12 = (void *)v48;
            uint64_t v25 = v84;
            if (v82) {
              goto LABEL_5;
            }
LABEL_28:
            uint64_t v18 = v95;
            swift_release();
            swift_release();
            goto LABEL_29;
          }
LABEL_27:
          outlined consume of Text.Storage(v11, v48, v51);
          swift_bridgeObjectRelease();
          uint64_t v59 = (uint64_t)v43;
          uint64_t v60 = (uint64_t)v43;
          uint64_t v61 = (uint64_t)v86;
          outlined consume of Text?(v59, (uint64_t)v86, v47, v87);
          outlined consume of Text.Storage(v60, v61, v47 & 1);
          swift_bridgeObjectRelease();
          uint64_t v12 = (void *)v48;
          goto LABEL_28;
        }
        char v53 = v85;
        LODWORD(v84) = (v85 & 1) == 0;
        uint64_t v54 = (uint64_t)v43;
        uint64_t v55 = v42;
        id v56 = v97;
        outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
        swift_retain();
        uint64_t v57 = v41;
        swift_retain();
        outlined copy of Text?(v54, v55, v53, v41);
        outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v56);
        swift_retain();
        char v47 = v53;
        swift_retain();
        uint64_t v58 = v55;
        int v43 = (void *)v54;
        outlined copy of Text?(v54, v58, v53, v57);
        char v51 = (char)v84;
        uint64_t v48 = (uint64_t)v12;
        goto LABEL_27;
      }
    }
    else
    {
      if (!v97)
      {
        uint64_t v24 = v7;
        swift_retain();
        swift_retain();
        goto LABEL_4;
      }
      outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
    }
    swift_retain();
    uint64_t v18 = v95;
LABEL_20:
    swift_retain();
LABEL_29:
    v100[0] = v18;
    v100[1] = v98;
    uint64_t v22 = type metadata accessor for ResolvedOptionalTextFilter(0);
    v100[0] = (uint64_t)ResolvedTextHelper.resolve(_:with:sizeFitting:)(v11, v12, v14, v97, v100, 0);
    AGGraphSetOutputValue();
    swift_release();
    goto LABEL_30;
  }
  uint64_t v24 = v7;
  swift_retain();
  swift_retain();
  outlined copy of Text?(v11, (uint64_t)v12, v14, (uint64_t)v97);
LABEL_4:
  swift_retain();
  swift_retain();
  uint64_t v25 = v24;
LABEL_5:
  if (v17)
  {
    uint64_t v26 = swift_retain();
    char v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v26);
    swift_release();
    if (v27) {
      goto LABEL_28;
    }
  }
  uint64_t v87 = v11;
  uint64_t v88 = v12;
  uint64_t v28 = (void *)((char *)v23 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v28, (uint64_t)v25, type metadata accessor for ResolvedTextHelper.NextUpdate);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      swift_release();
      swift_release();
      uint64_t v11 = v87;
      uint64_t v12 = v88;
      goto LABEL_30;
    }
    _s10Foundation4DateVSgWOhTm_0((uint64_t)v28, type metadata accessor for ResolvedTextHelper.NextUpdate);
    double v30 = *(double *)v25;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    uint64_t v32 = (char *)v25 + *(int *)(v31 + 48);
    char v33 = *((unsigned char *)v25 + *(int *)(v31 + 64));
    uint64_t v35 = (uint64_t)v89;
    uint64_t v34 = v90;
    int v36 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
    int v86 = v23;
    uint64_t v37 = v14;
    uint64_t v38 = v91;
    v36(v89, v32, v91);
    double v99 = v30;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v99, v35, v33, (double *)v100);
    swift_release();
    uint64_t v39 = v38;
    uint64_t v14 = v37;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v39);
    double v40 = *(double *)v100;
    *uint64_t v28 = v100[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    double v40 = *(double *)v25;
  }
  double v52 = *(double *)AGGraphGetValue();
  uint64_t v18 = v95;
  swift_release();
  swift_release();
  uint64_t v11 = v87;
  uint64_t v12 = v88;
  if (v52 >= v40) {
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v62 = (uint64_t)v12;
  type metadata accessor for ResolvedOptionalTextFilter(0);
  uint64_t v63 = v96 + *(int *)(v22 + 24);
  uint64_t v64 = (void *)(v63 + *(int *)(type metadata accessor for ResolvedTextHelper(0) + 56));
  _s7SwiftUI33ResolvableStringResolutionContextVWOcTm_1((uint64_t)v64, (uint64_t)v4, type metadata accessor for ResolvedTextHelper.NextUpdate);
  int v65 = swift_getEnumCaseMultiPayload();
  if (v65)
  {
    if (v65 != 1) {
      goto LABEL_38;
    }
    _s10Foundation4DateVSgWOhTm_0((uint64_t)v64, type metadata accessor for ResolvedTextHelper.NextUpdate);
    double v66 = *(double *)v4;
    type metadata accessor for (lastTime: Time, lastDate: Date, reduceFrequency: Bool, resolved: ResolvedStyledText)();
    char v68 = *((unsigned char *)v4 + *(int *)(v67 + 64));
    uint64_t v70 = (uint64_t)v89;
    uint64_t v69 = v90;
    uint64_t v71 = v91;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, (char *)v4 + *(int *)(v67 + 48), v91);
    double v99 = v66;
    ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&v99, v70, v68, (double *)v100);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
    double v72 = *(double *)v100;
    *uint64_t v64 = v100[0];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    double v72 = *(double *)v4;
  }
  if (*(double *)AGGraphGetValue() < v72)
  {
    uint64_t v73 = specialized static ViewGraph.current.getter();
    swift_beginAccess();
    double v74 = *(double *)(v73 + 376);
    if (v72 < v74) {
      double v74 = v72;
    }
    *(double *)(v73 + 376) = v74;
    swift_release();
  }
LABEL_38:
  swift_release();
  swift_release();
  outlined consume of Text?(v11, v62, v93, (uint64_t)v97);
}

double Image.RenderingModeProvider.resolve(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v5);
  __n128 v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  char v10 = (long long *)&v26[-v9];
  uint64_t v11 = *v2;
  unsigned __int8 v12 = *((unsigned char *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v7);
  v29[0] = *v7;
  LOBYTE(v28) = v12;
  if ((EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v28) & 1) == 0)
  {
    uint64_t v13 = *(int *)(v5 + 32);
    if (*((unsigned char *)v7 + v13) == 8) {
      *((unsigned char *)v7 + v13) = 1;
    }
  }
  outlined init with take of ImageResolutionContext((uint64_t)v7, (uint64_t)v10);
  (*(void (**)(_OWORD *__return_ptr, long long *))(*(void *)v11 + 80))(v29, v10);
  if (BYTE8(v29[0]) != 2)
  {
    __int16 v14 = BYTE8(v29[0]) != 255;
    long long v28 = *v10;
    unsigned __int8 v27 = v12;
    __int16 v15 = EnvironmentValues.imageIsTemplate(renderingMode:)(&v27);
    uint64_t v16 = 0x3F8000003F800000;
    if ((v15 & 1) == 0) {
      uint64_t v16 = 0;
    }
    *(void *)&v30[12] = v16;
    *(void *)&v30[20] = v16;
    v30[28] = (v15 & 1) == 0;
    char v17 = v37[18] & 2;
    __int16 v18 = v14 & v15;

    *(void *)&v37[8] = 0;
    *(_WORD *)&v37[16] = v18;
    v37[18] = v17;
  }
  outlined destroy of ImageResolutionContext((uint64_t)v10);
  long long v19 = v36;
  long long v20 = *(_OWORD *)v37;
  long long v21 = v34;
  *(_OWORD *)(a2 + 128) = v35;
  *(_OWORD *)(a2 + 144) = v19;
  *(_OWORD *)(a2 + 160) = v20;
  *(_DWORD *)(a2 + 175) = *(_DWORD *)&v37[15];
  long long v22 = v32;
  *(_OWORD *)(a2 + 64) = v31;
  *(_OWORD *)(a2 + 80) = v22;
  *(_OWORD *)(a2 + 96) = v33;
  *(_OWORD *)(a2 + 112) = v21;
  long long v23 = v29[1];
  *(_OWORD *)a2 = v29[0];
  *(_OWORD *)(a2 + 16) = v23;
  double result = *(double *)v30;
  long long v25 = *(_OWORD *)&v30[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v30;
  *(_OWORD *)(a2 + 48) = v25;
  return result;
}

void Image.CGImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  __n128 v7 = (CGImage *)*(id *)v2;
  double Width = (double)(uint64_t)CGImageGetWidth(v7);
  double Height = (double)(uint64_t)CGImageGetHeight(v7);
  char v10 = *(unsigned char *)(v2 + 16);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v37 = *a1;
  uint64_t v38 = v12;
  LOBYTE(v34) = 2;
  char v13 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v34);
  uint64_t v37 = v5;
  if (v13) {
    uint64_t v14 = 0x3F8000003F800000;
  }
  else {
    uint64_t v14 = 0;
  }
  char v15 = v13 ^ 1;
  LOBYTE(v38) = 0;
  uint64_t v39 = v6;
  double v40 = Width;
  double v41 = Height;
  char v42 = v10;
  uint64_t v43 = v14;
  uint64_t v44 = v14;
  char v45 = (v13 ^ 1) & 1;
  long long v46 = 0u;
  long long v47 = 0u;
  int v48 = 50397442;
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v37, (unsigned __int8 *)&v34);
  char v31 = v34;
  if (!v12)
  {
    uint64_t v37 = v11;
    uint64_t v38 = 0;
    swift_retain();
    char v22 = specialized static ShouldRedactContentKey.value(in:)(&v37);
    swift_release();
    if (v22) {
      goto LABEL_6;
    }
LABEL_10:
    char v21 = 0;
    goto LABEL_11;
  }
  swift_retain_n();
  swift_retain_n();
  char v16 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v11);
  swift_release_n();
  swift_release_n();
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = swift_allocObject();
  uint64_t v17 = one-time initialization token for foreground;
  swift_retain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v37 = v11;
  uint64_t v38 = v12;
  *(float *)(v5 + 16) = (*(float (**)(uint64_t *))(*(void *)static Color.foreground + 104))(&v37);
  *(_DWORD *)(v5 + 20) = v18;
  *(_DWORD *)(v5 + 24) = v20;
  *(float *)(v5 + 28) = v19 * 0.16;
  swift_release();
  swift_release();

  char v21 = 4;
LABEL_11:
  uint64_t v37 = v5;
  LOBYTE(v38) = v21;
  uint64_t v39 = v6;
  double v40 = Width;
  double v41 = Height;
  char v42 = v10;
  uint64_t v43 = v14;
  uint64_t v44 = v14;
  char v45 = v15 & 1;
  long long v46 = 0u;
  long long v47 = 0u;
  LOWORD(v48) = 258;
  BYTE2(v48) = 1;
  HIBYTE(v48) = v31;
  uint64_t v23 = *(void *)(v3 + 24);
  uint64_t v24 = *(void *)(v3 + 32);
  uint64_t v25 = *(void *)(v3 + 40);
  uint64_t v26 = *(void *)(v3 + 48);
  uint64_t v27 = v25 & 1;
  if (v26) {
    uint64_t v28 = *(void *)(v3 + 24);
  }
  else {
    uint64_t v28 = 0;
  }
  if (v26) {
    uint64_t v29 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v29 = 0;
  }
  if (!v26) {
    uint64_t v27 = 0x1FFFFFFFELL;
  }
  char v30 = *(unsigned char *)(v3 + 56);
  *(void *)&long long v34 = v28;
  *((void *)&v34 + 1) = v29;
  uint64_t v35 = v27;
  uint64_t v36 = v26;
  unsigned __int8 v33 = 3;
  outlined copy of Text?(v23, v24, v25, v26);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v37, v30, &v34, 0, &v33, 0.0, 1, a2);
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t EnvironmentValues.imageIsTemplate(renderingMode:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (v2 != 2) {
    return (v2 & 1) == 0;
  }
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v10);
    swift_release_n();
    swift_release_n();
    int v4 = v10;
  }
  else
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v6);
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find1<A>(_:key:filter:)(v7, v9);
    if (v8) {
      int v4 = *(unsigned __int8 *)(v8 + 72);
    }
    else {
      int v4 = 1;
    }
    swift_release_n();
  }
  return v4 ^ 1u;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultRenderingModeKey>>);
    }
  }
}

uint64_t type metadata accessor for ResolvedOptionalTextFilter(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedOptionalTextFilter);
}

unint64_t lazy protocol witness table accessor for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter;
  if (!lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter)
  {
    type metadata accessor for ResolvedOptionalTextFilter(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedOptionalTextFilter and conformance ResolvedOptionalTextFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.ChildEnvironment and conformance TextSuffixModifier.ChildEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.ResolvedTextSuffixFilter and conformance TextSuffixModifier.ResolvedTextSuffixFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText;
  if (!lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSuffixModifier.OptionalText and conformance TextSuffixModifier.OptionalText);
  }
  return result;
}

void ResolvedStyledText.TextLayoutManager.layoutValue(in:with:applyingMarginOffsets:)(char a1@<W0>, void *a2@<X8>, double a3@<D4>, double a4@<D5>)
{
  uint64_t v9 = (void *)MEMORY[0x24C526EA0]();
  closure #1 in ResolvedStyledText.TextLayoutManager.layoutValue(in:with:applyingMarginOffsets:)(v4, a1, a2, a3, a4);
}

uint64_t closure #1 in ResolvedStyledText.TextLayoutManager.layoutValue(in:with:applyingMarginOffsets:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>, double a4@<D4>, double a5@<D5>)
{
  ResolvedStyledText.TextLayoutManager.prepareLayoutManager(in:with:applyingMarginOffsets:)(a2, (uint64_t)&v39, a4, a5);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)&v39, (uint64_t)v52);
  outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?((uint64_t)v52, (uint64_t)v53);
  uint64_t result = _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg((uint64_t)v53);
  if (result == 1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  double v11 = *(double *)v53;
  double v10 = *(double *)&v53[1];
  char v27 = v55;
  char v12 = v56;
  long long v31 = v57;
  long long v32 = v54;
  long long v29 = v59;
  long long v30 = v58;
  uint64_t v13 = v60;
  uint64_t v14 = v61;
  char v15 = v62;
  char v16 = v63;
  char v17 = v64;
  long long v28 = v65;
  uint64_t v26 = v66;
  if (one-time initialization token for lineFragmentPadding != -1) {
    swift_once();
  }
  double v18 = v11 + *(double *)&static ResolvedStyledText.TextLayoutManager.lineFragmentPadding;
  swift_beginAccess();
  uint64_t v19 = *(unsigned __int8 *)(a1 + 136);
  if (v19 != 2)
  {
    if (v19)
    {
      if (*(unsigned char *)(a1 + 43)) {
        goto LABEL_9;
      }
    }
    else if ((*(unsigned char *)(a1 + 43) & 1) == 0)
    {
LABEL_9:
      uint64_t v22 = 1;
LABEL_12:
      long long v20 = *(_OWORD *)(a1 + 144);
      if (a4 == INFINITY) {
        double v21 = 1.79769313e308;
      }
      else {
        double v21 = a4;
      }
      if (a5 == INFINITY) {
        double v23 = 1.79769313e308;
      }
      else {
        double v23 = a5;
      }
      goto LABEL_18;
    }
    uint64_t v22 = 3;
    goto LABEL_12;
  }
  long long v20 = 0uLL;
  double v21 = 0.0;
  uint64_t v22 = 4;
  double v23 = 0.0;
LABEL_18:
  long long v39 = v32;
  char v40 = v27;
  char v41 = v12;
  long long v42 = v31;
  long long v43 = v30;
  long long v44 = v29;
  uint64_t v45 = v13;
  uint64_t v46 = v14;
  char v47 = v15;
  char v48 = v16;
  char v49 = v17;
  long long v50 = v28;
  uint64_t v51 = v26;
  *(double *)&long long v33 = v21;
  *((double *)&v33 + 1) = v23;
  uint64_t v34 = v22;
  long long v35 = v20;
  ResolvedStyledText.TextLayoutManager.ensureAndCollectTextLayout(origin:metrics:shape:)((uint64_t)&v39, &v33, (uint64_t)&v36, v18, v10);
  uint64_t result = (uint64_t)outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(v52);
  uint64_t v24 = v37;
  uint64_t v25 = v38;
  *a3 = v36;
  a3[1] = v24;
  a3[2] = v25;
  return result;
}

uint64_t outlined init with take of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?()
{
  if (!lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?)
  {
    type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?);
    }
  }
}

uint64_t *outlined release of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t *a1)
{
  return a1;
}

uint64_t _sSo7CGPointV_7SwiftUI18ResolvedStyledTextC0F13LayoutManagerC7Metrics33_B6B30FF60BE9B7CF80B161CEF951DAD7LLVtSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined consume of (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = a15;
  if (a15 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultRenderingModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics)()
{
  if (!lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics))
  {
    type metadata accessor for CGPoint(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGPoint, ResolvedStyledText.TextLayoutManager.Metrics));
    }
  }
}

uint64_t type metadata completion function for OptionalAnchorBox()
{
  return type metadata completion function for ArrayAnchorBox();
}

void type metadata accessor for StyleContextTypeBox<NoStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextTypeBox<NoStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextTypeBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextTypeBox<NoStyleContext>);
    }
  }
}

uint64_t static _ViewListOutputs.groupViewList<A, B>(parent:footer:inputs:body:)@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void (*a4)(_OWORD *__return_ptr, uint64_t, long long *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  unsigned int v68 = *a1;
  uint64_t v9 = *(void *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  int v78 = *(_DWORD *)(a3 + 8);
  unint64_t v79 = *(void *)(a3 + 24);
  int v80 = *(_DWORD *)(a3 + 32);
  int v83 = *(_DWORD *)(a3 + 36);
  uint64_t v11 = *(void *)(a3 + 40);
  uint64_t v71 = *(void *)(a3 + 48);
  unint64_t v12 = *(void *)(a3 + 56);
  int v13 = *(_DWORD *)(a3 + 64);
  uint64_t v14 = *(void *)(a3 + 72);
  char v15 = *(unsigned char *)(a3 + 80);
  if ((v12 & 0x1000) != 0) {
    unint64_t v16 = *(void *)(a3 + 56);
  }
  else {
    unint64_t v16 = v12 & 0xFFFFFFFFFFFFFEF7;
  }
  unint64_t v76 = v16;
  if ((v12 & 4) != 0)
  {
    LODWORD(v108) = *(_DWORD *)(a3 + 64);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionedTrait and conformance SectionedTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v17 = Attribute.init<A>(body:value:flags:update:)();
    if (v14)
    {
      *(void *)&long long v108 = v14;
      BYTE8(v108) = v15 & 1;
      int v20 = v17;
      specialized Set._Variant.insert(_:)(&v93, (uint64_t)&type metadata for IsSectionedTraitKey);
      int v17 = v20;
      uint64_t v18 = v108;
      char v19 = BYTE8(v108);
    }
    else
    {
      uint64_t v18 = 0;
      char v19 = v15;
    }
    unint64_t v16 = v76;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    int v17 = v13;
    uint64_t v18 = v14;
    char v19 = v15;
  }
  *(void *)&long long v108 = v9;
  DWORD2(v108) = v78;
  uint64_t v109 = v10;
  unint64_t v110 = v79;
  int v111 = v80;
  int v112 = v83;
  uint64_t v113 = v11;
  uint64_t v114 = v71;
  unint64_t v115 = v16;
  int v116 = v17;
  uint64_t v117 = v18;
  char v118 = v19;
  int v81 = v17;
  uint64_t v64 = v14;
  int v62 = v13;
  char v84 = v19;
  if ((v12 & 8) != 0)
  {
    uint64_t v23 = v16;
    if ((v16 & 0x10) == 0)
    {
      uint64_t v23 = v16 | 0x10;
      unint64_t v115 = v16 | 0x10;
    }
    unint64_t v66 = v23;
    LODWORD(v93) = v17;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionHeaderTrait and conformance SectionHeaderTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v22 = Attribute.init<A>(body:value:flags:update:)();
    int v116 = v22;
    if (v18)
    {
      uint64_t v93 = v18;
      LOBYTE(v94) = v19 & 1;
      specialized Set._Variant.insert(_:)((uint64_t *)v105, (uint64_t)&type metadata for IsSectionHeaderTraitKey);
      uint64_t v21 = v93;
      char v19 = v94;
      uint64_t v117 = v93;
      char v118 = v94;
    }
    else
    {
      uint64_t v21 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v21 = v18;
    int v22 = v81;
    unint64_t v66 = v16;
  }
  uint64_t v73 = v10;
  uint64_t v74 = v9;
  uint64_t v72 = v11;
  unint64_t v77 = v12;
  char v63 = v15;
  uint64_t v75 = v18;
  if ((v12 & 0x20) != 0)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v29 = *((void *)&static StyleContextInput.defaultValue + 1);
    uint64_t v28 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v108, v28, v29);
    swift_release();
    uint64_t v26 = v108;
    uint64_t v27 = v109;
    int v54 = DWORD2(v108);
    unint64_t v55 = v110;
    int v56 = v111;
    int v25 = v112;
    uint64_t v11 = v113;
    uint64_t v24 = v114;
    unint64_t v66 = v115;
    int v22 = v116;
    uint64_t v21 = v117;
    char v19 = v118;
  }
  else
  {
    uint64_t v24 = v71;
    int v25 = v83;
    int v56 = v80;
    int v54 = v78;
    unint64_t v55 = v79;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
  }
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v58 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v91[0]) = v68;
  uint64_t v93 = v26;
  int v94 = v54;
  uint64_t v95 = v27;
  unint64_t v96 = v55;
  int v97 = v56;
  int v98 = v25;
  uint64_t v99 = v11;
  uint64_t v100 = v24;
  unint64_t v101 = v66;
  int v102 = v22;
  uint64_t v103 = v21;
  char v104 = v19;
  (*(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(v105, v91, &v93, a5, a7);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v68, a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v119[2] = v105[2];
  long long v120 = v106;
  char v121 = v107;
  v119[0] = v105[0];
  v119[1] = v105[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v31 = v120;
  if ((v77 & 4) != 0)
  {
    LODWORD(v108) = v81;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait();
    int v37 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v33 = v73;
    uint64_t v32 = v74;
    uint64_t v34 = v72;
    char v36 = v84;
    if (v75)
    {
      *(void *)&long long v108 = v75;
      BYTE8(v108) = v84 & 1;
      int v38 = v37;
      specialized Set._Variant.insert(_:)(&v93, (uint64_t)&type metadata for DepthTraitKey);
      int v37 = v38;
      uint64_t v35 = v108;
      char v36 = BYTE8(v108);
    }
    else
    {
      uint64_t v35 = 0;
    }
  }
  else
  {
    uint64_t v33 = v73;
    uint64_t v32 = v74;
    uint64_t v34 = v72;
    uint64_t v35 = v75;
    char v36 = v84;
    int v37 = v81;
  }
  int v82 = v37;
  char v85 = v36;
  *(void *)&long long v108 = v32;
  DWORD2(v108) = v78;
  uint64_t v109 = v33;
  unint64_t v110 = v79;
  int v111 = v80;
  int v112 = v83;
  uint64_t v113 = v34;
  uint64_t v114 = v31;
  unint64_t v39 = v76;
  unint64_t v115 = v76;
  int v116 = v37;
  uint64_t v117 = v35;
  char v118 = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v40 = swift_bridgeObjectRetain();
  a4(v105, v40, &v108);
  char v41 = v85;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)&long long v108 = v32;
  DWORD2(v108) = v78;
  uint64_t v109 = v33;
  unint64_t v110 = v79;
  int v111 = v80;
  int v112 = v83;
  uint64_t v113 = v34;
  uint64_t v70 = v106;
  uint64_t v114 = v106;
  unint64_t v115 = v76;
  int v116 = v82;
  uint64_t v117 = v35;
  char v118 = v85;
  if ((v77 & 8) != 0)
  {
    if ((v76 & 8) != 0)
    {
      unint64_t v39 = v76 & 0xFFFFFFFFFFFFFFF7;
      unint64_t v115 = v76 & 0xFFFFFFFFFFFFFFF7;
    }
    unint64_t v76 = v39;
    LODWORD(v93) = v82;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type SectionFooterTrait and conformance SectionFooterTrait();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v82 = Attribute.init<A>(body:value:flags:update:)();
    int v116 = v82;
    if (v35)
    {
      uint64_t v93 = v35;
      LOBYTE(v94) = v85 & 1;
      specialized Set._Variant.insert(_:)((uint64_t *)v88, (uint64_t)&type metadata for IsSectionFooterTraitKey);
      uint64_t v42 = v93;
      char v41 = v94;
      uint64_t v117 = v93;
      char v118 = v94;
    }
    else
    {
      uint64_t v42 = 0;
      char v41 = v85;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = v35;
  }
  int v43 = v83;
  unsigned int v44 = HIDWORD(v79);
  int v45 = v80;
  int v46 = v78;
  unsigned int v47 = v79;
  if ((v77 & 0x40) != 0)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v49 = *((void *)&static StyleContextInput.defaultValue + 1);
    uint64_t v48 = static StyleContextInput.defaultValue;
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v108, v48, v49);
    swift_release();
    uint64_t v32 = v108;
    int v46 = DWORD2(v108);
    uint64_t v33 = v109;
    unsigned int v47 = v110;
    unsigned int v44 = HIDWORD(v110);
    int v45 = v111;
    int v43 = v112;
    uint64_t v34 = v113;
    uint64_t v70 = v114;
    unint64_t v76 = v115;
    int v82 = v116;
    uint64_t v42 = v117;
    char v41 = v118;
  }
  int v67 = v46;
  _GraphValue.init(_:)(a2, &v87);
  uint64_t v50 = v87;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v58) {
    AGSubgraphBeginTreeElement();
  }
  int v86 = v50;
  uint64_t v93 = v32;
  int v94 = v67;
  uint64_t v95 = v33;
  unint64_t v96 = __PAIR64__(v44, v47);
  int v97 = v45;
  int v98 = v43;
  uint64_t v99 = v34;
  uint64_t v100 = v70;
  unint64_t v101 = v76;
  int v102 = v82;
  uint64_t v103 = v42;
  char v104 = v41;
  (*(void (**)(_OWORD *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a9 + 32))(v88, &v86, &v93, a6, a9);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v50, a6, a9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v91[2] = v88[2];
  v91[3] = v89;
  char v92 = v90;
  v91[0] = v88[0];
  v91[1] = v88[1];
  uint64_t v51 = v89;
  type metadata accessor for _ContiguousArrayStorage<_ViewListOutputs>();
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_2461BE2B0;
  outlined init with copy of _ViewListOutputs((uint64_t)v119, v52 + 32);
  outlined init with copy of _ViewListOutputs((uint64_t)v105, v52 + 104);
  outlined init with copy of _ViewListOutputs((uint64_t)v91, v52 + 176);
  *(void *)&long long v108 = v74;
  DWORD2(v108) = v78;
  uint64_t v109 = v73;
  unint64_t v110 = v79;
  int v111 = v80;
  int v112 = v83;
  uint64_t v113 = v72;
  if ((v77 & 0x100) != 0)
  {
    uint64_t v114 = v71;
    unint64_t v115 = v77;
    int v116 = v62;
    uint64_t v117 = v64;
    char v118 = v63;
    static _ViewListOutputs.sectionListOutputs(_:inputs:)(v52, (uint64_t)&v108, a8);
  }
  else
  {
    uint64_t v114 = v51;
    unint64_t v115 = v77;
    int v116 = v62;
    uint64_t v117 = v64;
    char v118 = v63;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    static _ViewListOutputs.concat(_:inputs:)(v52, &v108, a8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  swift_bridgeObjectRelease();
  outlined destroy of _ViewListOutputs((uint64_t)v91);
  outlined destroy of _ViewListOutputs((uint64_t)v105);
  outlined destroy of _ViewListOutputs((uint64_t)v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _GraphInputs.pushStyleContext<A>(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain();
  if (!specialized find<A>(_:key:)(v2) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_release();
  AnyStyleContextType.pushing<A>(_:)(v6);
  uint64_t v3 = v6[0];
  uint64_t v4 = v6[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3, v4);
  return swift_release();
}

uint64_t specialized static StyleContextWriter._makeInputs(modifier:inputs:)(uint64_t *a1)
{
  uint64_t v2 = swift_retain();
  if (!specialized find<A>(_:key:)(v2) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_release();
  AnyStyleContextType.pushing<A>(_:)(v6);
  uint64_t v3 = v6[0];
  uint64_t v4 = v6[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v3, v4);
  return swift_release();
}

BOOL protocol witness for static AnyStyleContextTypeBox.isEqual(to:) in conformance StyleContextTypeBox<A>()
{
  return static StyleContextTypeBox.isEqual(to:)();
}

BOOL static StyleContextTypeBox.isEqual(to:)()
{
  return swift_dynamicCastMetatype() != 0;
}

uint64_t AnyStyleContextType.pushing<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 8) + 32))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static AnyStyleContextTypeBox.pushing<A>(_:) in conformance StyleContextTypeBox<A>()
{
  return static StyleContextTypeBox.pushing<A>(_:)();
}

uint64_t static StyleContextTypeBox.pushing<A>(_:)()
{
  return type metadata accessor for StyleContextTypeBox();
}

uint64_t type metadata accessor for StyleContextTypeBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TupleStyleContext()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _ContiguousArrayStorage<_ViewListOutputs>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SectionedTrait and conformance SectionedTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait;
  if (!lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionedTrait and conformance SectionedTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DepthTrait and conformance DepthTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait;
  if (!lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DepthTrait and conformance DepthTrait);
  }
  return result;
}

double CGSize.unapply(_:)(char a1, double a2, double a3)
{
  switch(a1)
  {
    case 4:
    case 5:
    case 6:
    case 7:
      double result = a3;
      break;
    default:
      return result;
  }
  return result;
}

BOOL Rectangle.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  double v11 = 0.0;
  if (result) {
    double v12 = 0.0;
  }
  else {
    double v12 = a2;
  }
  if (result) {
    double v13 = 0.0;
  }
  else {
    double v13 = a3;
  }
  if (result) {
    double v14 = 0.0;
  }
  else {
    double v14 = a4;
  }
  if (!result) {
    double v11 = a5;
  }
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result) {
    char v15 = 6;
  }
  else {
    char v15 = 0;
  }
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

uint64_t PreferenceValues.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t storeEnumTagSinglePayload for Font.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)BOOL result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SecondaryChild<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MakeSection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t one-time initialization function for update()
{
  uint64_t result = AGGraphRegisterNamedTraceEvent();
  static AGNamedTraceEventID.update = result;
  return result;
}

uint64_t static Anchor<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a2) & 1;
}

uint64_t AnchorValueBox.isEqual(to:)()
{
  uint64_t v1 = (void *)*v0;
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v3 = (char *)v0 + v1[18];
    uint64_t v4 = result + *(void *)(*(void *)result + 144);
    uint64_t v6 = v1[16];
    uint64_t v5 = v1[17];
    uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 40);
    swift_retain();
    LOBYTE(v3) = v7(v3, v4, v6, v5);
    swift_release();
    return v3 & 1;
  }
  return result;
}

BOOL protocol witness for static AnchorProtocol.valueIsEqual(lhs:rhs:) in conformance CGRect(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t _ViewOutputs.setIndirectDependency(_:)()
{
  uint64_t v1 = *v0;
  int v2 = *((_DWORD *)v0 + 3);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    int v4 = *MEMORY[0x263F288F8];
    swift_bridgeObjectRetain();
    uint64_t v5 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v5 += 24;
      --v3;
    }
    while (v3);
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 == v4) {
      return result;
    }
  }
  else if (v2 == *MEMORY[0x263F288F8])
  {
    return result;
  }

  return AGGraphSetIndirectDependency();
}

uint64_t Gesture.cancellable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Gesture.truePreference<A>(_:)(a1, a2);
}

double one-time initialization function for root()
{
  qword_26B0E99B8 = 0;
  double result = 0.0;
  static CoordinateSpace.root = 0u;
  unk_26B0E99A8 = 0u;
  byte_26B0E99C0 = 2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ScrollTargetRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t EnvironmentValues.font.setter(uint64_t a1)
{
  return EnvironmentValues.font.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

double EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionStyleContext()
{
  return &type metadata for AccessibilityQuickActionStyleContext;
}

ValueMetadata *type metadata accessor for SwipeActionsStyleContext()
{
  return &type metadata for SwipeActionsStyleContext;
}

ValueMetadata *type metadata accessor for AccessibilityLayoutRole()
{
  return &type metadata for AccessibilityLayoutRole;
}

ValueMetadata *type metadata accessor for LocalCoordinateSpace()
{
  return &type metadata for LocalCoordinateSpace;
}

ValueMetadata *type metadata accessor for EllipticalGradient()
{
  return &type metadata for EllipticalGradient;
}

ValueMetadata *type metadata accessor for TintPlacement()
{
  return &type metadata for TintPlacement;
}

ValueMetadata *type metadata accessor for ToggleState()
{
  return &type metadata for ToggleState;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.TrackingAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.KerningAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.CustomContainerAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.FontModifiersAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.EncapsulationAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute;
}

ValueMetadata *type metadata accessor for TypesettingLanguageAwareLineHeightRatio()
{
  return &type metadata for TypesettingLanguageAwareLineHeightRatio;
}

uint64_t static Color.yellow.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for yellow);
}

uint64_t static Color.indigo.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for indigo);
}

void protocol witness for Hashable.hash(into:) in conformance _ViewList_ID.Canonical(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt32 v4 = *(_DWORD *)(v2 + 4);
  uint64_t v5 = *(void *)(v2 + 8);
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    unsigned int v6 = *(void (**)(uint64_t))(*(void *)v5 + 112);
    swift_retain();
    v6(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void *Path.addRoundedRect(in:cornerRadii:style:transform:)(char *a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  char v20 = *a1;
  double result = (void *)CGRectIsNull(*(CGRect *)&a3);
  if ((result & 1) == 0)
  {
    return specialized Path.withMutableBuffer(do:)(v10, a2, v20, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnimatedShape<A>.Init(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t PropertyList.Tracker.invalidateValue<A>(for:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 16));
  uint64_t v9 = *(void *)(v8 + 24);
  if (a2)
  {
    if (v9 != *(void *)(a2 + 64)) {
      goto LABEL_22;
    }
    if (!a3)
    {
      if (!v9) {
        goto LABEL_22;
      }
      char v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    if (v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = a3 == 0;
    }
    if (v11) {
      goto LABEL_22;
    }
  }
  if (v9 == *(void *)(a3 + 64)) {
    goto LABEL_22;
  }
  char v10 = 0;
LABEL_12:
  specialized Dictionary._Variant.removeValue(forKey:)(a4, (uint64_t)&v19);
  if (v20)
  {
    outlined init with take of ScrollStateRequest(&v19, (uint64_t)v21);
    outlined init with copy of AnyTrackedValue((uint64_t)v21, (uint64_t)&v19);
    double v12 = *(void **)(v8 + 48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v8 + 48) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      *(void *)(v8 + 48) = v12;
    }
    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    unint64_t v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
      unint64_t v16 = v15 + 1;
      double v12 = v18;
      *(void *)(v8 + 48) = v18;
    }
    _OWORD v12[2] = v16;
    outlined init with take of ScrollStateRequest(&v19, (uint64_t)&v12[5 * v15 + 4]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of AnyTrackedValue?((uint64_t)&v19);
  }
  move(_:to:)(v8 + 40, v8 + 48);
  if (v10) {
    *(void *)(v8 + 24) = 0;
  }
  else {
    *(void *)(v8 + 24) = *(void *)(a3 + 64);
  }
LABEL_22:
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 16));
  return swift_release();
}

uint64_t outlined destroy of AnyTrackedValue?(uint64_t a1)
{
  type metadata accessor for AnyTrackedValue?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyTrackedValue?()
{
  if (!lazy cache variable for type metadata for AnyTrackedValue?)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue?);
    }
  }
}

uint64_t one-time initialization function for traceHost()
{
  type metadata accessor for Update.TraceHost();
  uint64_t result = swift_allocObject();
  static Update.traceHost = result;
  return result;
}

uint64_t type metadata accessor for Update.TraceHost()
{
  return self;
}

uint64_t one-time initialization function for shared(uint64_t a1)
{
  return one-time initialization function for shared(a1, (uint64_t (*)(void))_initializeCoreGlue2, (void (*)(void))type metadata accessor for CoreGlue2, (uint64_t *)&static CoreGlue2.shared);
}

{
  return one-time initialization function for shared(a1, (uint64_t (*)(void))_initializeCoreGlue, (void (*)(void))type metadata accessor for CoreGlue, (uint64_t *)&static CoreGlue.shared);
}

uint64_t static ScrollGeometryPreferenceKey.defaultValue.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

__n128 GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, char *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  char v10 = *(unsigned char *)(a1 + 8);
  char v11 = *(unsigned char *)(a4 + 32);
  char v12 = *a6;
  *(void *)a7 = *(void *)a1;
  *(unsigned char *)(a7 + 8) = v10;
  uint64_t v13 = 0x3F8000003F800000;
  if ((a3 & 1) == 0) {
    uint64_t v13 = 0;
  }
  *(double *)(a7 + 16) = a8;
  *(double *)(a7 + 24) = a9;
  *(double *)(a7 + 32) = a10;
  *(unsigned char *)(a7 + 40) = a2;
  *(void *)(a7 + 44) = v13;
  *(void *)(a7 + 52) = v13;
  *(unsigned char *)(a7 + 60) = (a3 & 1) == 0;
  __n128 result = *(__n128 *)a4;
  long long v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)a4;
  *(_OWORD *)(a7 + 80) = v15;
  *(unsigned char *)(a7 + 96) = v11;
  *(unsigned char *)(a7 + 97) = a5;
  *(unsigned char *)(a7 + 98) = v12;
  *(unsigned char *)(a7 + 99) = 3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _BackgroundStyleModifier<A>.BackgroundInfo(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for _PreferenceWritingModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _MovableLockBroadcast(uint64_t a1)
{
  return pthread_cond_broadcast((pthread_cond_t *)(a1 + 160));
}

uint64_t _PositionAwarePlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = result;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  a7[6] = a6;
  return result;
}

void (*AtomicBox.wrappedValue.modify(os_unfair_lock_s **a1))(os_unfair_lock_s **a1)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  os_unfair_lock_lock(v2 + 4);
  return AtomicBox.wrappedValue.modifyspecialized ;
}

ValueMetadata *type metadata accessor for TintShapeStyle()
{
  return &type metadata for TintShapeStyle;
}

uint64_t instantiation function for generic protocol witness table for EnvironmentalViewChild<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void ResolvedVectorGlyph.resolvedRenderingMode.getter(char *a1@<X8>)
{
  int v3 = *v1;
  int v4 = objc_msgSend(v3, sel_renderingMode);
  char v5 = 8;
  if (v4 > 127)
  {
    switch(v4)
    {
      case 128:
        char v5 = 5;
        break;
      case 129:
        char v5 = 6;
        break;
      case 130:
        char v5 = 7;
        break;
    }
  }
  else
  {
    char v5 = 0;
    switch(v4)
    {
      case 0:
        id v6 = objc_msgSend(v3, sel_glyph);
        if (v6)
        {
          uint64_t v7 = v6;
          id v8 = objc_msgSend(v6, sel_preferredRenderingMode);

          if (v8 == (id)2) {
            char v5 = 1;
          }
          else {
            char v5 = 8;
          }
          if (v8 == (id)3) {
            char v5 = 2;
          }
        }
        else
        {
          char v5 = 4;
        }
        break;
      case 2:
        char v5 = 1;
        break;
      case 3:
        char v5 = 2;
        break;
      case 4:
        char v5 = 3;
        break;
      default:
        break;
    }
  }
  *a1 = v5;
}

uint64_t outlined release of _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 104);
  long long v12 = *(_OWORD *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  outlined consume of _ShapeStyle_LayerID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of _ShapeStyle_Pack.Style?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return a1;
}

uint64_t destroy for _ShapeStyle_InterpolatorGroup.Layer(uint64_t a1)
{
  outlined consume of _ShapeStyle_LayerID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if (*(void *)(a1 + 128))
  {
    outlined consume of _ShapeStyle_Pack.Fill(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
    int v2 = *(unsigned __int8 *)(a1 + 120);
    if (v2 != 255) {
      outlined consume of GraphicsBlendMode(*(void *)(a1 + 112), v2 & 1);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t specialized _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = a2;
  char v11 = a2;
  uint64_t v495 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(uint64_t *)a1;
  int v13 = *(unsigned __int8 *)(a1 + 29);
  unint64_t v14 = *a3;
  uint64_t v15 = *a4;
  *(void *)&aBlock[0] = *a4;
  unint64_t v364 = v14;
  v471[0] = v14;
  _ShapeStyle_Pack.Slice.init(pack:name:)((uint64_t *)aBlock, v471, (uint64_t)&v452);
  unsigned int v16 = dword_2461DA004[v11];
  char v369 = v13;
  if (v13) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v16 | 0x20;
  }
  uint64_t v18 = (void *)(isEscapingClosureAtFileLocation + 104);
  uint64_t v389 = isEscapingClosureAtFileLocation;
  uint64_t v19 = isEscapingClosureAtFileLocation + 120;
  uint64_t v361 = v15;
  swift_bridgeObjectRetain();
  id v357 = (id)v12;
  v375 = objc_msgSend((id)v12, sel_beginUpdateWithRenderingMode_position_size_flags_, 255, isEscapingClosureAtFileLocation + 104, isEscapingClosureAtFileLocation + 120, v17);
  RBSymbolUpdateNextTime();
  uint64_t v451 = 0x3FF0000000000000;
  int v450 = 1065353216;
  uint64_t v366 = *((void *)&v453 + 1) >> 1;
  uint64_t v367 = v453;
  uint64_t v21 = (*((void *)&v453 + 1) >> 1) - v453;
  if (__OFSUB__(*((void *)&v453 + 1) >> 1, (void)v453)) {
    goto LABEL_351;
  }
  uint64_t v22 = v454 + v21;
  if (__OFADD__(v454, v21)) {
    goto LABEL_352;
  }
  CGFloat Width = v20;
  uint64_t v365 = *((void *)&v452 + 1);
  uint64_t v372 = v454 + v21;
  uint64_t v373 = v454;
  char v23 = v369;
  if (v22 == v454) {
    char v23 = 1;
  }
  uint64_t v362 = 80;
  uint64_t v405 = a5;
  if ((v23 & 1) == 0)
  {
    uint64_t v24 = (CGImage *)(id)RBSymbolUpdateTemplateImage();
    if (v24)
    {
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)v24;
      CGFloat Width = (double)(uint64_t)CGImageGetWidth(v24);
      CGFloat Height = (double)(uint64_t)CGImageGetHeight((CGImageRef)isEscapingClosureAtFileLocation);
      *(void *)&v446[16] = v451;
      uint64_t v18 = (void *)(v10 | 0x3F80000000000000);
      uint64_t v17 = v389;
      *(void *)&v446[8] = *(void *)v389;
      *(void *)v446 = *(void *)(v389 + 8);
      uint64_t v445 = *(void *)(v389 + 16);
      uint64_t v15 = *(void *)(v389 + 32);
      uint64_t v444 = *(void *)(v389 + 24);
      uint64_t v25 = *(void *)(v389 + 40);
      unint64_t v6 = *(void *)(v389 + 48);
      a5 = *(void *)(v389 + 56);
      long long v443 = *(_OWORD *)(v389 + 64);
      uint64_t v10 = *(void *)(v389 + 80);
      uint64_t v19 = *(void *)(v389 + 88);
      uint64_t v12 = *(unsigned int *)(v389 + 96);
      id v433 = (id)isEscapingClosureAtFileLocation;
      outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)&v446[8], *(uint64_t *)v446, v445, v444, v15, v25, v6, a5, v443, *((uint64_t *)&v443 + 1), v10, v19, v12);
      *(void *)uint64_t v389 = isEscapingClosureAtFileLocation;
      *(void *)(v389 + 8) = 0;
      *(void *)(v389 + 16) = *(void *)&v446[16];
      *(CGFloat *)(v389 + 24) = Width;
      *(CGFloat *)(v389 + 32) = Height;
      *(void *)(v389 + 40) = v18;
      *(_OWORD *)(v389 + 48) = xmmword_2461D9D20;
      *(_OWORD *)(v389 + 64) = 0u;
      *(_OWORD *)(v389 + 80) = 0u;
      *(_DWORD *)(v389 + 96) = 54591746;
      uint64_t v26 = -v373;
      if (v367 > -v373 || v366 <= v26) {
        goto LABEL_354;
      }
      uint64_t v27 = v365 + 120 * (int)v26;
      long long v29 = *(_OWORD *)(v27 + 32);
      long long v28 = *(_OWORD *)(v27 + 48);
      long long v30 = *(_OWORD *)(v27 + 16);
      aBlock[0] = *(_OWORD *)v27;
      aBlock[1] = v30;
      long long v482 = v29;
      long long v483 = v28;
      long long v31 = *(_OWORD *)(v27 + 64);
      long long v32 = *(_OWORD *)(v27 + 80);
      long long v33 = *(_OWORD *)(v27 + 96);
      uint64_t v18 = *(void **)(v27 + 112);
      *(void *)&long long v487 = v18;
      long long v485 = v32;
      long long v486 = v33;
      long long v484 = v31;
      uint64_t v444 = *((void *)&aBlock[0] + 1);
      *(_OWORD *)v446 = aBlock[1];
      uint64_t v19 = *((void *)&v482 + 1);
      *(void *)&v446[16] = v482;
      a5 = *((void *)&v483 + 1);
      unint64_t v6 = v483;
      uint64_t v17 = *((void *)&v31 + 1);
      uint64_t v15 = v31;
      uint64_t v445 = v32;
      uint64_t v10 = BYTE8(v32);
      LODWORD(Width) = HIDWORD(v32);
      uint64_t v12 = *(uint64_t *)&v33;
      *(void *)&long long v443 = BYTE8(v33);
      LODWORD(Height) = v450;
      uint64_t isEscapingClosureAtFileLocation = v18[2];
      outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
      if (isEscapingClosureAtFileLocation)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_356;
        }
        while (1)
        {
          unint64_t v34 = v18[2];
          unint64_t v35 = isEscapingClosureAtFileLocation - 1;
          if (isEscapingClosureAtFileLocation - 1 >= v34) {
            unint64_t v35 = v18[2];
          }
          if (v35 > 1)
          {
            unint64_t v349 = v35 + 1;
            uint64_t v350 = v349 & 1;
            if ((v349 & 1) == 0) {
              uint64_t v350 = 2;
            }
            unint64_t v36 = v349 - v350;
            long long v351 = (float *)(v18 + 19);
            unint64_t v352 = v36;
            do
            {
              float v353 = *(float *)&Height * *v351;
              *(v351 - 18) = *(float *)&Height * *(v351 - 18);
              *long long v351 = v353;
              v351 += 36;
              v352 -= 2;
            }
            while (v352);
          }
          else
          {
            unint64_t v36 = 0;
          }
          uint64_t v354 = v362 + 72 * v36;
          while (v36 < v34)
          {
            ++v36;
            *(float *)((char *)v18 + v354) = *(float *)&Height * *(float *)((char *)v18 + v354);
            v354 += 72;
            if (isEscapingClosureAtFileLocation == v36) {
              goto LABEL_342;
            }
          }
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        }
      }
LABEL_342:
      *(float *)&unsigned int v355 = *(float *)&Width * *(float *)&Height;
      long long v469 = v364;
      char v470 = 0;
      *(void *)v471 = v444;
      *(_OWORD *)&v471[8] = *(_OWORD *)v446;
      *(void *)&v471[24] = *(void *)&v446[16];
      *(void *)&long long v472 = v19;
      *((void *)&v472 + 1) = v6;
      uint64_t v473 = a5;
      uint64_t v474 = v15;
      uint64_t v475 = v17;
      uint64_t v476 = v445;
      unint64_t v477 = v10 | ((unint64_t)v355 << 32);
      uint64_t v478 = v12;
      uint64_t v479 = v443;
      v480 = v18;
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v469, (long long *)v471, v389);
      *(void *)v471 = v444;
      *(_OWORD *)&v471[8] = *(_OWORD *)v446;
      *(void *)&v471[24] = *(void *)&v446[16];
      *(void *)&long long v472 = v19;
      *((void *)&v472 + 1) = v6;
      uint64_t v473 = a5;
      uint64_t v474 = v15;
      uint64_t v475 = v17;
      uint64_t v476 = v445;
      LOBYTE(v477) = v10;
      HIDWORD(v477) = v355;
      uint64_t v478 = v12;
      LOBYTE(v479) = v443;
      v480 = v18;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)v471);
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v389);

      outlined consume of _ShapeStyle_Pack.Fill(v444, v446[0], *(uint64_t *)&v446[8], v446[16], v19, v6, a5, v15, v17, v445, v10);
      outlined consume of GraphicsBlendMode?(v12, v443);
      swift_bridgeObjectRelease();
      objc_msgSend(v357, sel_endUpdate_, v375);
      goto LABEL_343;
    }
  }
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
  uint64_t v363 = *(void *)&Width & 0x7FF0000000000000;
  uint64_t v10 = (uint64_t)v375;
  uint64_t updated = RBSymbolUpdateGroupCount();
  if ((MEMORY[0x24C526DB0](v375) & 0x1000) != 0 || updated != 1 || RBSymbolUpdateGroupSize() != 1)
  {
    aBlock[0] = v452;
    aBlock[1] = v453;
    LOBYTE(v482) = v454;
    *(double *)&uint64_t v12 = COERCE_DOUBLE(aBlock);
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
    if (_ShapeStyle_Pack.Slice.allColors.getter())
    {
      uint64_t v17 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
      uint64_t State = RBDisplayListGetState();
      uint64_t v18 = v375;
      uint64_t v10 = swift_allocObject();
      long long v38 = v453;
      *(_OWORD *)(v10 + 16) = v452;
      *(_OWORD *)(v10 + 32) = v38;
      *(unsigned char *)(v10 + 48) = v454;
      unint64_t v6 = v15;
      *(void *)(v10 + 56) = v15;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:);
      *(void *)(v19 + 24) = v10;
      *(void *)&long long v482 = partial apply for thunk for @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor);
      *((void *)&v482 + 1) = v19;
      *(void *)&aBlock[0] = MEMORY[0x263EF8330];
      *((void *)&aBlock[0] + 1) = 1107296256;
      *(void *)&aBlock[1] = thunk for @escaping @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor);
      *((void *)&aBlock[1] + 1) = &block_descriptor_11;
      *(double *)&uint64_t v12 = COERCE_DOUBLE(_Block_copy(aBlock));
      uint64_t v15 = *((void *)&v482 + 1);
      swift_bridgeObjectRetain();
      outlined retain of _ShapeStyle_Pack.Slice((uint64_t)&v452);
      swift_retain();
      swift_release();
      MEMORY[0x24C526D00](v375, State, v12);
      _Block_release((const void *)v12);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        goto LABEL_355;
      }
      *(void *)v471 = 0;
      *(void *)&v471[8] = 0;
      v471[16] = 3;
      long long v485 = 0u;
      long long v486 = 0u;
      long long v483 = 0u;
      long long v484 = 0u;
      long long v482 = 0u;
      memset(aBlock, 0, sizeof(aBlock));
      _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)v471, aBlock, v389);
      long long v39 = *(_OWORD *)(v389 + 208);
      long long v492 = *(_OWORD *)(v389 + 192);
      long long v493 = v39;
      *(_OWORD *)v494 = *(_OWORD *)(v389 + 224);
      *(_OWORD *)&v494[9] = *(_OWORD *)(v389 + 233);
      long long v40 = *(_OWORD *)(v389 + 144);
      long long v488 = *(_OWORD *)(v389 + 128);
      long long v489 = v40;
      long long v41 = *(_OWORD *)(v389 + 176);
      long long v490 = *(_OWORD *)(v389 + 160);
      long long v491 = v41;
      long long v42 = *(_OWORD *)(v389 + 80);
      long long v484 = *(_OWORD *)(v389 + 64);
      long long v485 = v42;
      long long v43 = *(_OWORD *)(v389 + 112);
      long long v486 = *(_OWORD *)(v389 + 96);
      long long v487 = v43;
      long long v44 = *(_OWORD *)(v389 + 16);
      aBlock[0] = *(_OWORD *)v389;
      aBlock[1] = v44;
      long long v45 = *(_OWORD *)(v389 + 48);
      long long v482 = *(_OWORD *)(v389 + 32);
      long long v483 = v45;
      double v46 = *((double *)&v489 + 1);
      double v47 = *(double *)&v490;
      uint64_t v48 = *((void *)&v491 + 1);
      long long v49 = v492;
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      id v50 = objc_msgSend((id)v17, sel_moveContents);
      objc_msgSend(v50, sel_boundingRect);
      double x = v496.origin.x;
      double y = v496.origin.y;
      double v53 = v496.size.width;
      double v54 = v496.size.height;
      BOOL IsNull = CGRectIsNull(v496);
      double v56 = 0.0;
      if (IsNull) {
        double v57 = 0.0;
      }
      else {
        double v57 = x;
      }
      if (IsNull) {
        double v58 = 0.0;
      }
      else {
        double v58 = y;
      }
      if (IsNull) {
        double v59 = 0.0;
      }
      else {
        double v59 = v53;
      }
      if (!IsNull) {
        double v56 = v54;
      }
      uint64_t v60 = WORD2(v486);
      CGRect v497 = CGRectIntegral(*(CGRect *)(&v56 - 3));
      double v61 = v497.origin.x;
      double v62 = v497.origin.y;
      CGFloat v63 = v497.size.width;
      CGFloat v64 = v497.size.height;
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = v50;
      *(double *)(v65 + 24) = v61;
      *(double *)(v65 + 32) = v62;
      *(unsigned char *)(v65 + 40) = 0;
      *(_DWORD *)(v65 + 44) = 0;
      *(unsigned char *)(v65 + 48) = 1;
      *(_DWORD *)(v65 + 52) = 160;
      *(unsigned char *)(v65 + 56) = 3;
      outlined release of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      outlined consume of DisplayList.Item.Value(v49, *((unint64_t *)&v49 + 1));
      *(double *)(v389 + 152) = v46 + v61;
      *(double *)(v389 + 160) = v47 + v62;
      *(CGFloat *)(v389 + 168) = v63;
      *(CGFloat *)(v389 + 176) = v64;
      *(void *)(v389 + 184) = v48;
      *(void *)(v389 + 192) = v65 | 0xA000000000000000;
      *(void *)(v389 + 200) = v60;
      *(void *)(v389 + 208) = 0;
      *(unsigned char *)(v389 + 218) = 0;
      *(_WORD *)(v389 + 216) = 0;
      *(_DWORD *)(v389 + 220) = 0;
      if (v363 != 0x7FF0000000000000 && (v494[24] & 1) == 0) {
        *(unsigned char *)(v389 + 248) = v494[24] | 1;
      }
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v389);

      objc_msgSend(v357, sel_endUpdate_, v375);
      outlined release of _ShapeStyle_Pack.Slice((uint64_t)&v452);
      unint64_t v66 = partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:);
      return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v66);
    }
    if (updated < 0) {
      goto LABEL_353;
    }
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
    if (!updated) {
      goto LABEL_334;
    }
  }
  v368 = 0;
  uint64_t v67 = 0;
  CGSize v370 = *(CGSize *)(MEMORY[0x263F001A0] + 16);
  CGPoint v371 = (CGPoint)*MEMORY[0x263F001A0];
  uint64_t v387 = a5 + 16;
  uint64_t v358 = v15 + 33;
  uint64_t v68 = updated;
  while (2)
  {
    if (v67 == v68) {
      goto LABEL_349;
    }
    *(void *)&long long v380 = v67;
    uint64_t v69 = RBSymbolUpdateGroupSize();
    if (v69 < 0) {
      goto LABEL_350;
    }
    if (!v69) {
      goto LABEL_41;
    }
    uint64_t v70 = 0;
    uint64_t v379 = v69;
    while (2)
    {
      if (v70 == v69)
      {
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      uint64_t v18 = (void *)v380;
      *(void *)&aBlock[0] = v10;
      *((void *)&aBlock[0] + 1) = v380;
      *(void *)&aBlock[1] = v70;
      uint64_t v12 = v70;
      RBSymbolUpdateLayerDrawingOpacity();
      float v72 = v71;
      *(void *)&aBlock[0] = v10;
      *((void *)&aBlock[0] + 1) = v380;
      *((void *)&v380 + 1) = v12;
      *(void *)&aBlock[1] = v12;
      switch(RBSymbolUpdateLayerStyle())
      {
        case 0u:
          uint64_t v73 = v372;
          uint64_t v74 = v373;
          if (v372 == v373) {
            goto LABEL_47;
          }
          uint64_t v75 = 0;
          goto LABEL_60;
        case 5u:
          uint64_t v73 = v372;
          uint64_t v74 = v373;
          if (v372 == v373) {
            goto LABEL_47;
          }
          uint64_t v75 = 1;
          goto LABEL_60;
        case 6u:
          uint64_t v73 = v372;
          uint64_t v74 = v373;
          if (v372 == v373) {
            goto LABEL_47;
          }
          uint64_t v75 = 2;
          goto LABEL_60;
        case 7u:
          uint64_t v73 = v372;
          uint64_t v74 = v373;
          if (v372 == v373) {
            goto LABEL_47;
          }
          uint64_t v75 = 3;
          goto LABEL_60;
        case 8u:
          uint64_t v73 = v372;
          uint64_t v74 = v373;
          if (v372 == v373) {
            goto LABEL_47;
          }
          uint64_t v75 = 4;
LABEL_60:
          if (v73 < v74) {
            goto LABEL_346;
          }
          uint64_t v76 = v372 + ~v373;
          if (v76 >= v75) {
            uint64_t v76 = v75;
          }
          uint64_t v77 = v76 - v74;
          if (v77 < v367 || v77 >= v366) {
            goto LABEL_347;
          }
          uint64_t v78 = v365 + 120 * v77;
          long long v80 = *(_OWORD *)(v78 + 32);
          long long v79 = *(_OWORD *)(v78 + 48);
          long long v81 = *(_OWORD *)(v78 + 16);
          aBlock[0] = *(_OWORD *)v78;
          aBlock[1] = v81;
          long long v482 = v80;
          long long v483 = v79;
          long long v82 = *(_OWORD *)(v78 + 64);
          long long v83 = *(_OWORD *)(v78 + 80);
          long long v84 = *(_OWORD *)(v78 + 96);
          *(void *)&long long v487 = *(void *)(v78 + 112);
          char v85 = (void *)v487;
          long long v485 = v83;
          long long v486 = v84;
          long long v484 = v82;
          long long v398 = *(long long *)((char *)aBlock + 8);
          v404 = (void *)*((void *)&aBlock[1] + 1);
          uint64_t v402 = *((void *)&v482 + 1);
          v403 = (void *)v482;
          uint64_t v401 = v483;
          uint64_t v399 = v82;
          uint64_t v400 = *((void *)&v483 + 1);
          uint64_t v395 = v83;
          uint64_t v396 = *((void *)&v82 + 1);
          unsigned int v378 = BYTE8(v83);
          LODWORD(Width) = HIDWORD(v83);
          uint64_t v397 = v84;
          unsigned int v377 = BYTE8(v84);
          *(void *)&CGFloat v394 = v364 | (v75 << 16);
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
          CGFloat v392 = 0.0;
          char v393 = 0;
          uint64_t v10 = v85[2];
          if (v10) {
            goto LABEL_66;
          }
          goto LABEL_96;
        case 9u:
          *(void *)&aBlock[0] = v10;
          *((void *)&aBlock[0] + 1) = v380;
          *(void *)&aBlock[1] = v12;
          id v89 = (id)RBSymbolUpdateLayerColorName();
          if (!v89)
          {
            uint64_t v10 = (uint64_t)v375;
            goto LABEL_47;
          }
          char v90 = v89;
          CGFloat v394 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
          uint64_t v390 = v91;

          uint64_t v92 = *(void *)(v361 + 16);
          if (!v92) {
            goto LABEL_293;
          }
          uint64_t v93 = 0;
          uint64_t v94 = v358;
          break;
        default:
          goto LABEL_47;
      }
      while (1)
      {
        unsigned int v95 = *(unsigned __int8 *)(v94 - 1);
        if (v95 == 2 && *(unsigned char *)v94 == 0)
        {
          long long v308 = *(_OWORD *)(v94 + 47);
          long long v309 = *(_OWORD *)(v94 + 31);
          long long v310 = *(_OWORD *)(v94 + 15);
          aBlock[0] = *(_OWORD *)(v94 - 1);
          aBlock[1] = v310;
          long long v482 = v309;
          long long v483 = v308;
          uint64_t v311 = *(void *)(v94 + 111);
          long long v312 = *(_OWORD *)(v94 + 95);
          long long v313 = *(_OWORD *)(v94 + 79);
          long long v314 = *(_OWORD *)(v94 + 63);
LABEL_292:
          long long v484 = v314;
          long long v485 = v313;
          long long v486 = v312;
          *(void *)&long long v443 = v311;
          *(void *)&long long v487 = v311;
          *(void *)v446 = *((void *)&aBlock[0] + 1);
          *(_OWORD *)&v446[8] = aBlock[1];
          uint64_t v320 = *((void *)&v482 + 1);
          id v433 = (id)v482;
          uint64_t v321 = *((void *)&v483 + 1);
          uint64_t v15 = v483;
          uint64_t v322 = *((void *)&v314 + 1);
          uint64_t v17 = v314;
          uint64_t v323 = v313;
          LODWORD(v444) = BYTE8(v313);
          uint64_t v441 = v312;
          unsigned __int8 v437 = BYTE8(v312);
          swift_bridgeObjectRetain();
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)aBlock);
          goto LABEL_296;
        }
        BOOL v97 = *(unsigned char *)v94 && v95 == 2;
        if (v95 > 2 || v97) {
          break;
        }
        ++v93;
        v94 += 120;
        if (v92 == v93) {
          goto LABEL_293;
        }
      }
      if (v93)
      {
        int v316 = *(unsigned __int8 *)(v94 - 121);
        uint64_t v315 = v94 - 121;
        if (v316 == 2)
        {
          long long v318 = *(_OWORD *)(v315 + 32);
          long long v317 = *(_OWORD *)(v315 + 48);
          long long v319 = *(_OWORD *)(v315 + 16);
          aBlock[0] = *(_OWORD *)v315;
          aBlock[1] = v319;
          long long v482 = v318;
          long long v483 = v317;
          uint64_t v311 = *(void *)(v315 + 112);
          long long v313 = *(_OWORD *)(v315 + 80);
          long long v312 = *(_OWORD *)(v315 + 96);
          long long v314 = *(_OWORD *)(v315 + 64);
          goto LABEL_292;
        }
      }
LABEL_293:
      uint64_t v324 = one-time initialization token for clear;
      swift_bridgeObjectRetain_n();
      if (v324 != -1) {
        swift_once();
      }
      uint64_t v325 = qword_268EEF188;
      unsigned __int8 v326 = byte_268EEF190;
      uint64_t v327 = qword_268EEF198;
      LODWORD(v444) = byte_268EEF180;
      uint64_t v323 = *((void *)&xmmword_268EEF170 + 1);
      uint64_t v322 = xmmword_268EEF170;
      *(_OWORD *)v446 = static _ShapeStyle_Pack.Style.clear;
      id v433 = (id)*((void *)&xmmword_268EEF140 + 1);
      *(void *)&v446[16] = xmmword_268EEF140;
      uint64_t v320 = qword_268EEF150;
      uint64_t v15 = qword_268EEF158;
      uint64_t v17 = *((void *)&xmmword_268EEF160 + 1);
      uint64_t v321 = xmmword_268EEF160;
      outlined copy of _ShapeStyle_Pack.Fill((id)static _ShapeStyle_Pack.Style.clear, BYTE8(static _ShapeStyle_Pack.Style.clear), (void *)xmmword_268EEF140, *((void **)&xmmword_268EEF140 + 1), qword_268EEF150, qword_268EEF158, xmmword_268EEF160, *((uint64_t *)&xmmword_268EEF160 + 1), xmmword_268EEF170, *((uint64_t *)&xmmword_268EEF170 + 1), byte_268EEF180);
      uint64_t v441 = v325;
      unsigned __int8 v437 = v326;
      outlined copy of GraphicsBlendMode?(v325, v326);
      *(void *)&long long v443 = v327;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_296:
      uint64_t v19 = v444;
      uint64_t v445 = v323;
      uint64_t v432 = v322;
      uint64_t v18 = *(void **)v446;
      unint64_t v6 = *(void *)&v446[8];
      outlined copy of _ShapeStyle_Pack.Fill(*(id *)v446, v446[8], *(void **)&v446[16], v433, v320, v15, v321, v17, v322, v323, v444);
      outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v15, v321, v17, v322, v323, v444);
      outlined consume of GraphicsBlendMode?(v441, v437);
      swift_bridgeObjectRelease();
      if (v444 == 6)
      {
        uint64_t v19 = v322;
        uint64_t v328 = v15;
        uint64_t v15 = v321;
        LODWORD(Width) = *(_DWORD *)v446;
        LODWORD(Height) = *(_DWORD *)&v446[4];
        float v329 = *(float *)&v446[8];
        float v330 = *(float *)&v446[12];
        if (v394 == -2.31584178e77 && v390 == 0x800000024621F720)
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v322, v445, 6);
          swift_bridgeObjectRelease();
          a5 = v405;
LABEL_312:
          uint64_t v12 = v390;
          goto LABEL_313;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v322, v445, 6);
          swift_bridgeObjectRelease();
LABEL_311:
          a5 = v405;
          goto LABEL_312;
        }
        if (*(void *)&v394 == 0x6574696877 && v390 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v322, v445, 6);
          swift_bridgeObjectRelease();
          LODWORD(Width) = 1.0;
          LODWORD(Height) = 1.0;
          float v329 = 1.0;
          float v330 = 1.0;
          goto LABEL_311;
        }
        if (*(void *)&v394 == 0x6B63616C62 && v390 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v322, v445, 6);
          swift_bridgeObjectRelease();
          float v330 = 1.0;
          LODWORD(Width) = 0;
          LODWORD(Height) = 0;
          float v329 = 0.0;
          goto LABEL_311;
        }
        aBlock[0] = *(_OWORD *)v446;
        LOWORD(aBlock[1]) = *(_WORD *)&v446[16] & 0x101;
        BYTE2(aBlock[1]) = v446[18] & 1;
        uint64_t v18 = v433;
        *((void *)&aBlock[1] + 1) = v433;
        ResolvedMulticolorStyle.environment.getter((uint64_t *)v471);
        uint64_t v335 = *(void *)v471;
        unint64_t v6 = *(void *)&v471[8];
        if (one-time initialization token for namedTypes != -1)
        {
          uint64_t v348 = *(void *)v471;
          swift_once();
          uint64_t v335 = v348;
        }
        uint64_t v336 = static SystemColorType.namedTypes;
        uint64_t v12 = v390;
        uint64_t v444 = v335;
        if (*(void *)(static SystemColorType.namedTypes + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v337 = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)&v394, v390);
          if (v338)
          {
            *(void *)&long long v443 = v328;
            char v339 = *(unsigned char *)(*(void *)(v336 + 56) + v337);
            swift_bridgeObjectRelease();
            *(void *)&aBlock[0] = v444;
            *((void *)&aBlock[0] + 1) = v6;
            EnvironmentValues.systemColorDefinition.getter();
            LOBYTE(v469) = v339;
            *(void *)&aBlock[0] = v444;
            *((void *)&aBlock[0] + 1) = v6;
            LODWORD(Width) = (*(float (**)(long long *, long long *))(v340 + 8))(&v469, aBlock);
            LODWORD(Height) = v341;
            float v329 = v342;
            float v330 = v343;
            swift_release();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);
            swift_bridgeObjectRelease();
            uint64_t v12 = v390;
            a5 = v405;
            goto LABEL_313;
          }
          swift_bridgeObjectRelease();
          uint64_t v335 = v444;
        }
        if (v433)
        {
          *(void *)&aBlock[0] = v335;
          *((void *)&aBlock[0] + 1) = v6;
          outlined copy of _ShapeStyle_Pack.Fill(*(id *)v446, v446[8], *(void **)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);
          *(void *)&long long v443 = v6;
          swift_bridgeObjectRetain();
          id v344 = Color.NamedColor.resolveCGColor(in:)((uint64_t *)aBlock, *(uint64_t *)&v394, v390, v433);
          swift_bridgeObjectRelease();
          if (v344)
          {
            id v345 = v344;
            unint64_t v425 = specialized Color.Resolved.init(failableCGColor:)(v345);
            uint64_t v438 = v346;
            char v442 = v347;
            outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);

            swift_release();
            swift_release();
            outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);
            swift_bridgeObjectRelease();
            LODWORD(Width) = 0;
            LODWORD(Height) = 0;
            float v329 = 0.0;
            float v330 = 0.0;
            if ((v442 & 1) == 0)
            {
              LODWORD(Height) = HIDWORD(v425);
              LODWORD(Width) = v425;
              float v330 = *((float *)&v438 + 1);
              float v329 = *(float *)&v438;
            }
            goto LABEL_311;
          }
          outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);
          uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
        }
        else
        {
          uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
        }
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v328, v321, v17, v432, v445, 6);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined consume of _ShapeStyle_Pack.Fill(*(uint64_t *)v446, v446[8], *(uint64_t *)&v446[16], v433, v320, v15, v321, v17, v322, v323, v444);
        swift_bridgeObjectRelease();
        uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
        uint64_t v12 = v390;
      }
      uint64_t v10 = (uint64_t)v375;
      *(void *)&aBlock[0] = v375;
      *(long long *)((char *)aBlock + 8) = v380;
      id v331 = (id)RBSymbolUpdateLayerDefaultColor();
      a5 = v405;
      if (!v331) {
        goto LABEL_287;
      }
      unint64_t v332 = specialized Color.Resolved.init(failableCGColor:)(v331);
      LODWORD(Width) = 0;
      LODWORD(Height) = 0;
      float v329 = 0.0;
      float v330 = 0.0;
      if ((v334 & 1) == 0)
      {
        LODWORD(Height) = HIDWORD(v332);
        LODWORD(Width) = v332;
        float v330 = *((float *)&v333 + 1);
        float v329 = *(float *)&v333;
      }
LABEL_313:
      uint64_t v396 = 0;
      uint64_t v397 = 0;
      v404 = 0;
      v403 = 0;
      uint64_t v402 = 0;
      uint64_t v401 = 0;
      uint64_t v399 = 0;
      uint64_t v400 = 0;
      uint64_t v395 = 0;
      unsigned int v378 = 0;
      *(void *)&long long v398 = LODWORD(Width) | ((unint64_t)LODWORD(Height) << 32);
      *((void *)&v398 + 1) = LODWORD(v329) | ((unint64_t)LODWORD(v330) << 32);
      unsigned int v377 = 255;
      LODWORD(Width) = 1.0;
      char v393 = 2;
      CGFloat v392 = *(double *)&v12;
      char v85 = (void *)MEMORY[0x263F8EE78];
      uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v10)
      {
LABEL_66:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v85 = specialized _ArrayBuffer._consumeAndCreateNew()(v85);
        }
        unint64_t v86 = v85[2];
        unint64_t v87 = v10 - 1;
        if (v86 < v10 - 1) {
          unint64_t v87 = v85[2];
        }
        if (v87 > 1)
        {
          unint64_t v99 = v87 + 1;
          uint64_t v100 = v99 & 1;
          if ((v99 & 1) == 0) {
            uint64_t v100 = 2;
          }
          unint64_t v88 = v99 - v100;
          unint64_t v101 = (float *)(v85 + 19);
          unint64_t v102 = v88;
          do
          {
            float v103 = v72 * *v101;
            *(v101 - 18) = v72 * *(v101 - 18);
            *unint64_t v101 = v103;
            v101 += 36;
            v102 -= 2;
          }
          while (v102);
        }
        else
        {
          unint64_t v88 = 0;
        }
        uint64_t v104 = 72 * v88 + 80;
        do
        {
          if (v88 >= v86)
          {
            __break(1u);
            goto LABEL_333;
          }
          ++v88;
          *(float *)((char *)v85 + v104) = v72 * *(float *)((char *)v85 + v104);
          v104 += 72;
        }
        while (v10 != v88);
      }
LABEL_96:
      v391 = v85;
      float v374 = v72 * *(float *)&Width;
      if (!*(void *)a5)
      {
        outlined consume of _ShapeStyle_LayerID(*(uint64_t *)&v394, *(uint64_t *)&v392, v393);
        if (v369) {
          goto LABEL_264;
        }
        goto LABEL_263;
      }
      unint64_t v388 = v378 | ((unint64_t)COERCE_UNSIGNED_INT(v72 * *(float *)&Width) << 32);
      outlined copy of _ShapeStyle_Pack.Fill((id)v398, BYTE8(v398), v404, v403, v402, v401, v400, v399, v396, v395, v378);
      outlined copy of GraphicsBlendMode?(v397, v377);
      swift_bridgeObjectRetain();
      swift_retain();
      while (1)
      {
        v455.origin.double x = v394;
        v455.origin.double y = v392;
        LOBYTE(v455.size.width) = v393;
        long long v456 = v398;
        uint64_t v457 = (uint64_t)v404;
        v458 = v403;
        uint64_t v459 = v402;
        unint64_t v460 = v401;
        unint64_t v461 = v400;
        uint64_t v462 = v399;
        uint64_t v463 = v396;
        uint64_t v464 = v395;
        unint64_t v465 = v388;
        uint64_t v466 = v397;
        uint64_t v467 = v377;
        v468 = v85;
        _ShapeStyle_InterpolatorGroup.addLayer(id:style:)((uint64_t)&v455, (uint64_t)&v456, &v469);
        outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v469, v471);
        outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult((long long *)v471, aBlock);
        int v112 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg((uint64_t)aBlock);
        uint64_t v113 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_((uint64_t)aBlock);
        if (v112 != 1) {
          break;
        }
        *(_OWORD *)v446 = *(_OWORD *)v113;
        uint64_t v114 = *(void **)(v113 + 24);
        uint64_t v445 = *(void *)(v113 + 16);
        unint64_t v115 = *(void **)(v113 + 40);
        uint64_t v444 = *(void *)(v113 + 32);
        uint64_t v116 = *(void *)(v113 + 48);
        *(void *)&long long v443 = *(void *)(v113 + 56);
        uint64_t v117 = *(void *)(v113 + 72);
        uint64_t v439 = *(void *)(v113 + 64);
        uint64_t v118 = *(void *)(v113 + 80);
        uint64_t v119 = *(void *)(v113 + 88);
        uint64_t v120 = *(void *)(v113 + 96);
        uint64_t v121 = *(void *)(v113 + 104);
        uint64_t v122 = *(void *)(v113 + 112);
        int v123 = *(_DWORD *)(v113 + 120);
        uint64_t v424 = *(void *)v389;
        uint64_t v423 = *(void *)(v389 + 8);
        uint64_t v422 = *(void *)(v389 + 16);
        uint64_t v421 = *(void *)(v389 + 24);
        uint64_t v420 = *(void *)(v389 + 32);
        uint64_t v419 = *(void *)(v389 + 40);
        uint64_t v418 = *(void *)(v389 + 48);
        uint64_t v417 = *(void *)(v389 + 56);
        uint64_t v416 = *(void *)(v389 + 64);
        uint64_t v415 = *(void *)(v389 + 72);
        uint64_t v414 = *(void *)(v389 + 80);
        uint64_t v413 = *(void *)(v389 + 88);
        int v412 = *(_DWORD *)(v389 + 96);
        *(_OWORD *)(v389 + 64) = 0u;
        *(_OWORD *)(v389 + 80) = 0u;
        *(_OWORD *)(v389 + 32) = 0u;
        *(_OWORD *)(v389 + 48) = 0u;
        *(_OWORD *)uint64_t v389 = 0u;
        *(_OWORD *)(v389 + 16) = 0u;
        *(_DWORD *)(v389 + 96) = 0x800000;
        *(_DWORD *)(v389 + 144) = v123;
        *(void *)(v389 + 136) = v122;
        swift_retain_n();
        swift_release();
        id v433 = v115;
        if (v121)
        {
          long long v456 = *(_OWORD *)v446;
          uint64_t v457 = v445;
          v458 = v114;
          uint64_t v459 = v444;
          unint64_t v460 = (unint64_t)v115;
          unint64_t v461 = v116;
          uint64_t v462 = v443;
          uint64_t v463 = v439;
          uint64_t v464 = v117;
          LOBYTE(v465) = v118;
          HIDWORD(v465) = HIDWORD(v118);
          uint64_t v466 = v119;
          LOBYTE(v467) = v120;
          v468 = (void *)v121;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v456);
        }
        uint64_t v407 = v121;
        unsigned __int8 v408 = v120;
        uint64_t v409 = v119;
        char v410 = v118;
        uint64_t v411 = v117;
        float v124 = *(float *)(v389 + 244);
        unsigned __int8 v426 = v114;
        a5 = v405;
        if (v124 == 0.0) {
          goto LABEL_105;
        }
        double v126 = *(double *)(v389 + 104);
        double v125 = *(double *)(v389 + 112);
        CGFloat v127 = *(double *)(v389 + 120);
        CGFloat v128 = *(double *)(v389 + 128);
        v498.origin.double x = v126;
        v498.origin.double y = v125;
        v498.size.CGFloat width = v127;
        v498.size.CGFloat height = v128;
        if (CGRectIsEmpty(v498))
        {
LABEL_105:
          outlined consume of DisplayList.Item.Value(*(void *)(v389 + 192), *(void *)(v389 + 200));
          *(_OWORD *)(v389 + 192) = xmmword_2461B9DE0;
          *(void *)(v389 + 208) = 0;
          *(unsigned char *)(v389 + 218) = 0;
          *(_WORD *)(v389 + 216) = 0;
          uint64_t v129 = *(void *)(v389 + 136);
          if (v129)
          {
            uint64_t v130 = *(unsigned int *)(v389 + 144) | 0x4000001100000000;
            *(void *)(v389 + 192) = v129;
            *(void *)(v389 + 200) = v130;
            *(void *)(v389 + 208) = MEMORY[0x263F8EE78];
            LOBYTE(v456) = *(unsigned char *)(v389 + 224);
            DisplayList.Item.canonicalize(options:)((char *)&v456);
            *(void *)(v389 + 136) = 0;
            *(_DWORD *)(v389 + 144) = 0;
            uint64_t v131 = *(void *)(v389 + 192);
            unint64_t v132 = *(void *)(v389 + 200);
            uint64_t v133 = *(void *)(v389 + 208);
            uint64_t v134 = *(unsigned __int16 *)(v389 + 216) | (*(unsigned __int8 *)(v389 + 218) << 16);
          }
          else
          {
            uint64_t v134 = 0;
            uint64_t v133 = 0;
            uint64_t v131 = 0;
            unint64_t v132 = 0xC000000000000000;
          }
          double v136 = *(double *)(v389 + 152);
          double v135 = *(double *)(v389 + 160);
          CGFloat Height = *(double *)(v389 + 168);
          CGFloat Width = *(double *)(v389 + 176);
          uint64_t v406 = *(void *)(v389 + 184);
          uint64_t v137 = *(unsigned int *)(v389 + 220);
          outlined copy of DisplayList.Item.Value(v131, v132);
          if (one-time initialization token for normal != -1) {
            swift_once();
          }
          uint64_t v138 = static GraphicsBlendMode.normal;
          char v139 = byte_26B0EB4A0;
          uint64_t v140 = *(void *)(v389 + 232);
          char v141 = *(unsigned char *)(v389 + 240);
          *(void *)(v389 + 232) = static GraphicsBlendMode.normal;
          *(unsigned char *)(v389 + 240) = v139;
          outlined copy of GraphicsBlendMode(v138, v139);
          outlined consume of GraphicsBlendMode(v140, v141);
          uint64_t v429 = v131;
          unint64_t v434 = v132;
          uint64_t v427 = v133;
          *(void *)&v446[16] = v134;
          outlined consume of DisplayList.Item.Value(v131, v132);
          *(_DWORD *)(v389 + 244) = 1065353216;
          *(unsigned char *)(v389 + 248) = 0;
          *(_OWORD *)(v389 + 192) = xmmword_2461B9DE0;
          *(void *)(v389 + 208) = 0;
          *(unsigned char *)(v389 + 218) = 0;
          *(_WORD *)(v389 + 216) = 0;
          double v126 = *(double *)(v389 + 104);
          double v125 = *(double *)(v389 + 112);
          CGFloat v127 = *(double *)(v389 + 120);
          CGFloat v128 = *(double *)(v389 + 128);
          uint64_t v142 = (uint64_t)v433;
          goto LABEL_111;
        }
        char v428 = *(unsigned char *)(v389 + 224);
        LOBYTE(v456) = v428;
        DisplayList.Item.canonicalize(options:)((char *)&v456);
        uint64_t v153 = *(void *)(v389 + 136);
        if (v153)
        {
          uint64_t v154 = *(unsigned int *)(v389 + 144);
          unint64_t v155 = *(void *)(v389 + 200);
          uint64_t v156 = *(void *)(v389 + 208);
          int v157 = *(unsigned __int16 *)(v389 + 216) | (*(unsigned __int8 *)(v389 + 218) << 16);
          uint64_t v158 = *(void *)(v389 + 168);
          int v159 = *(void **)(v389 + 176);
          uint64_t v160 = *(void *)(v389 + 184);
          unint64_t v161 = *(void *)(v389 + 192);
          if (v155 >> 62 != 3 || (v157 & 0xFFFFFF) != 0 || v155 != 0xC000000000000000 || v156 | v161)
          {
            uint64_t v447 = *(unsigned int *)(v389 + 144);
            _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
            uint64_t v164 = swift_allocObject();
            *(_OWORD *)(v164 + 16) = xmmword_2461B9DC0;
            *(void *)(v164 + 32) = 0;
            *(void *)(v164 + 40) = 0;
            *(void *)(v164 + 48) = v158;
            *(void *)(v164 + 56) = v159;
            *(void *)(v164 + 64) = v160;
            *(void *)(v164 + 72) = v161;
            *(void *)(v164 + 80) = v155;
            *(void *)(v164 + 88) = v156;
            *(unsigned char *)(v164 + 98) = BYTE2(v157);
            *(_WORD *)(v164 + 96) = v157;
            *(_DWORD *)(v164 + 100) = 0;
            long long v456 = 0uLL;
            uint64_t v457 = v158;
            v458 = v159;
            uint64_t v459 = v160;
            unint64_t v460 = v161;
            unint64_t v461 = v155;
            uint64_t v462 = v156;
            BYTE2(v463) = BYTE2(v157);
            LOWORD(v463) = v157;
            HIDWORD(v463) = 0;
            swift_retain();
            outlined copy of DisplayList.Item.Value(v161, v155);
            DisplayList.Item.features.getter((__int16 *)&v455);
            __int16 x_low = LOWORD(v455.origin.x);
            char v162 = 0;
            uint64_t v154 = v447;
            switch(v155 >> 62)
            {
              case 1uLL:
                switch(BYTE4(v155))
                {
                  case 2u:
                    char v165 = v161;
                    outlined copy of DisplayList.Effect(v161, v155, 2);
                    break;
                  case 7u:
                    char v165 = *(unsigned char *)(v161 + 26);
                    outlined copy of DisplayList.Item.Value(v161, v155);
                    outlined consume of DisplayList.Effect(v161, v155, 7);
                    swift_bridgeObjectRelease();
                    break;
                  case 0x11u:
                    (*(void (**)(long long *__return_ptr))(*(void *)v161 + 120))(&v456);
                    outlined copy of DisplayList.Item.Value(v161, v155);
                    outlined consume of DisplayList.Effect(v161, v155, 17);
                    swift_bridgeObjectRelease();
                    char v165 = v456;
                    break;
                  default:
                    outlined copy of DisplayList.Effect(v161, v155, SBYTE4(v155));
                    swift_bridgeObjectRetain();
                    outlined consume of DisplayList.Effect(v161, v155, SBYTE4(v155));
                    swift_bridgeObjectRelease();
                    char v165 = 0;
                    break;
                }
                char v162 = v165 | BYTE2(v157);
                uint64_t v154 = v447;
                break;
              case 2uLL:
                uint64_t v166 = *(void *)(v161 + 16);
                if (!v166) {
                  goto LABEL_135;
                }
                if (v166 == 1)
                {
                  uint64_t v167 = 0;
                  char v162 = 0;
                }
                else
                {
                  char v168 = 0;
                  char v169 = 0;
                  uint64_t v167 = v166 & 0x7FFFFFFFFFFFFFFELL;
                  uint64_t v170 = (char *)(v161 + 106);
                  uint64_t v171 = v166 & 0x7FFFFFFFFFFFFFFELL;
                  do
                  {
                    char v172 = *(v170 - 40);
                    char v173 = *v170;
                    v170 += 80;
                    v168 |= v172;
                    v169 |= v173;
                    v171 -= 2;
                  }
                  while (v171);
                  char v162 = v169 | v168;
                  if (v166 == v167) {
                    break;
                  }
                }
                uint64_t v174 = v166 - v167;
                long long v175 = (char *)(v161 + 40 * v167 + 66);
                do
                {
                  char v176 = *v175;
                  v175 += 40;
                  v162 |= v176;
                  --v174;
                }
                while (v174);
                break;
              case 3uLL:
                break;
              default:
                if (v161 >> 60 == 9) {
                  char v162 = *(unsigned char *)((v161 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
                }
                else {
LABEL_135:
                }
                  char v162 = 0;
                break;
            }
          }
          else
          {
            swift_retain();
            char v162 = 0;
            __int16 x_low = 0;
            uint64_t v164 = MEMORY[0x263F8EE78];
          }
          *(void *)(v389 + 192) = v153;
          *(void *)(v389 + 200) = v154 | 0x4000001100000000;
          *(void *)(v389 + 208) = v164;
          *(unsigned char *)(v389 + 218) = v162;
          *(_WORD *)(v389 + 216) = x_low;
          LOBYTE(v456) = v428;
          DisplayList.Item.canonicalize(options:)((char *)&v456);
          outlined consume of DisplayList.Item.Value(v161, v155);
          swift_release();
          *(void *)(v389 + 136) = 0;
          *(_DWORD *)(v389 + 144) = 0;
          a5 = v405;
        }
        char v177 = *(unsigned char *)(v389 + 248);
        unint64_t v178 = *(void *)(v389 + 192);
        unint64_t v179 = *(void *)(v389 + 200);
        uint64_t v180 = *(void *)(v389 + 208);
        uint64_t v448 = *(unsigned __int16 *)(v389 + 216) | (*(unsigned __int8 *)(v389 + 218) << 16);
        if (v177)
        {
          unint64_t v181 = v179 >> 62;
          if (v179 >> 62 == 3 && (v448 & 0xFFFFFF) == 0 && v179 == 0xC000000000000000 && !(v180 | v178))
          {
            unint64_t v179 = 0xC000000000000000;
LABEL_192:
            uint64_t v448 = 0;
            *(unsigned char *)(v389 + 248) = v177 & 0xFE;
            goto LABEL_193;
          }
          unint64_t v384 = *(unsigned __int16 *)(v389 + 100);
          char v386 = *(unsigned char *)(v389 + 248);
          double v430 = v128;
          double v435 = v127;
          v455.CGPoint origin = v371;
          v455.CGSize size = v370;
          double v182 = *(double *)(v389 + 160);
          uint64_t v183 = *(void *)(v389 + 168);
          uint64_t v184 = *(void **)(v389 + 176);
          uint64_t v185 = *(void *)(v389 + 184);
          int v186 = *(_DWORD *)(v389 + 220);
          double v382 = *(double *)(v389 + 152);
          *(double *)&long long v456 = v382;
          double v376 = v182;
          *((double *)&v456 + 1) = v182;
          uint64_t v457 = v183;
          v458 = v184;
          uint64_t v459 = v185;
          unint64_t v460 = v178;
          unint64_t v461 = v179;
          uint64_t v462 = v180;
          BYTE2(v463) = BYTE2(v448);
          LOWORD(v463) = v448;
          HIDWORD(v463) = v186;
          DisplayList.Item.addExtent(to:)(&v455.origin.x);
          CGPoint origin = v455.origin;
          CGSize size = v455.size;
          BOOL v189 = CGRectIsNull(v455);
          double v190 = 0.0;
          if (v189) {
            double v191 = 0.0;
          }
          else {
            double v191 = origin.x;
          }
          if (v189) {
            double v192 = 0.0;
          }
          else {
            double v192 = origin.y;
          }
          if (v189) {
            double v193 = 0.0;
          }
          else {
            double v193 = size.width;
          }
          if (!v189) {
            double v190 = size.height;
          }
          CGRect v499 = CGRectIntegral(*(CGRect *)(&v190 - 3));
          double v194 = v499.origin.x;
          double v195 = v499.origin.y;
          *(CGRect *)(v389 + 152) = v499;
          if (v181 == 3 && (v448 & 0xFFFFFF) == 0 && v179 == 0xC000000000000000 && !(v180 | v178))
          {
            unint64_t v196 = 0xC000000000000000;
            LOBYTE(v197) = 0;
            uint64_t v198 = MEMORY[0x263F8EE78];
            CGFloat v127 = v435;
            CGFloat v128 = v430;
            __int16 v199 = 0;
            double v200 = v382;
LABEL_191:
            uint64_t v216 = swift_allocObject();
            *(void *)(v216 + 16) = v198;
            *(_WORD *)(v216 + 24) = v199;
            *(unsigned char *)(v216 + 26) = v197;
            *(double *)(v216 + 32) = v194 - v200;
            *(double *)(v216 + 40) = v195 - v376;
            *(unsigned char *)(v216 + 48) = 0;
            *(_DWORD *)(v216 + 52) = 0;
            *(unsigned char *)(v216 + 56) = 1;
            *(_DWORD *)(v216 + 60) = 161;
            *(unsigned char *)(v216 + 64) = 3;
            outlined consume of DisplayList.Item.Value(v178, v196);
            uint64_t v180 = 0;
            unint64_t v178 = v216 | 0x9000000000000000;
            unint64_t v179 = v384;
            *(void *)(v389 + 192) = v216 | 0x9000000000000000;
            *(void *)(v389 + 200) = v384;
            *(void *)(v389 + 208) = 0;
            *(unsigned char *)(v389 + 218) = 0;
            *(_WORD *)(v389 + 216) = 0;
            char v177 = v386;
            goto LABEL_192;
          }
          _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          uint64_t v201 = swift_allocObject();
          unint64_t v202 = v179;
          uint64_t v198 = v201;
          *(_OWORD *)(v201 + 16) = xmmword_2461B9DC0;
          *(void *)(v201 + 32) = 0;
          *(void *)(v201 + 40) = 0;
          *(void *)(v201 + 48) = v183;
          *(void *)(v201 + 56) = v184;
          *(void *)(v201 + 64) = v185;
          *(void *)(v201 + 72) = v178;
          *(void *)(v201 + 80) = v202;
          *(void *)(v201 + 88) = v180;
          *(unsigned char *)(v201 + 98) = BYTE2(v448);
          *(_WORD *)(v201 + 96) = v448;
          *(_DWORD *)(v201 + 100) = 0;
          long long v456 = 0uLL;
          uint64_t v457 = v183;
          v458 = v184;
          uint64_t v459 = v185;
          unint64_t v460 = v178;
          unint64_t v461 = v202;
          uint64_t v462 = v180;
          BYTE2(v463) = BYTE2(v448);
          LOWORD(v463) = v448;
          HIDWORD(v463) = 0;
          unint64_t v196 = v202;
          outlined copy of DisplayList.Item.Value(v178, v202);
          DisplayList.Item.features.getter(&v449);
          __int16 v199 = v449;
          LOBYTE(v197) = 0;
          CGFloat v127 = v435;
          CGFloat v128 = v430;
          double v200 = v382;
          switch((int)v181)
          {
            case 1:
              __int16 v360 = v449;
              switch(BYTE4(v196))
              {
                case 2u:
                  outlined copy of DisplayList.Effect(v178, v196, 2);
                  int v204 = v178;
                  break;
                case 7u:
                  int v204 = *(unsigned __int8 *)(v178 + 26);
                  int v203 = v448;
                  outlined copy of DisplayList.Item.Value(v178, v196);
                  outlined consume of DisplayList.Effect(v178, v196, 7);
                  swift_bridgeObjectRelease();
                  goto LABEL_190;
                case 0x11u:
                  (*(void (**)(long long *__return_ptr))(*(void *)v178 + 120))(&v456);
                  int v203 = v448;
                  outlined copy of DisplayList.Item.Value(v178, v196);
                  outlined consume of DisplayList.Effect(v178, v196, 17);
                  swift_bridgeObjectRelease();
                  int v204 = v456;
LABEL_190:
                  unsigned int v197 = v204 | ((v203 & 0xFF0000u) >> 16);
                  __int16 v199 = v360;
                  goto LABEL_191;
                default:
                  outlined copy of DisplayList.Effect(v178, v196, SBYTE4(v196));
                  swift_bridgeObjectRetain();
                  outlined consume of DisplayList.Effect(v178, v196, SBYTE4(v196));
                  swift_bridgeObjectRelease();
                  int v204 = 0;
                  break;
              }
              int v203 = v448;
              goto LABEL_190;
            case 2:
              uint64_t v205 = *(void *)(v178 + 16);
              if (!v205) {
                goto LABEL_179;
              }
              if (v205 == 1)
              {
                uint64_t v206 = 0;
                unsigned int v197 = 0;
              }
              else
              {
                int v207 = 0;
                int v208 = 0;
                uint64_t v206 = v205 & 0x7FFFFFFFFFFFFFFELL;
                char v209 = (unsigned __int8 *)(v178 + 106);
                uint64_t v210 = v205 & 0x7FFFFFFFFFFFFFFELL;
                do
                {
                  int v211 = *(v209 - 40);
                  int v212 = *v209;
                  v209 += 80;
                  v207 |= v211;
                  v208 |= v212;
                  v210 -= 2;
                }
                while (v210);
                unsigned int v197 = v208 | v207;
                if (v205 == v206) {
                  goto LABEL_191;
                }
              }
              uint64_t v213 = v205 - v206;
              uint64_t v214 = (unsigned __int8 *)(v178 + 40 * v206 + 66);
              do
              {
                int v215 = *v214;
                v214 += 40;
                v197 |= v215;
                --v213;
              }
              while (v213);
              goto LABEL_191;
            case 3:
              goto LABEL_191;
            default:
              if (v178 >> 60 == 9) {
                LOBYTE(v197) = *(unsigned char *)((v178 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
              }
              else {
LABEL_179:
              }
                LOBYTE(v197) = 0;
              goto LABEL_191;
          }
        }
LABEL_193:
        uint64_t v142 = (uint64_t)v433;
        uint64_t v217 = *(void *)(v389 + 232);
        uint64_t v431 = *(unsigned __int8 *)(v389 + 240);
        if ((v431 & 1) != 0 || *(void *)(v389 + 232))
        {
          uint64_t v218 = *(void *)(v389 + 168);
          uint64_t v219 = *(void **)(v389 + 176);
          uint64_t v220 = *(void *)(v389 + 184);
          unint64_t v221 = v179 >> 62;
          unint64_t v436 = v179;
          if (v179 >> 62 == 3 && (v448 & 0xFFFFFF) == 0 && v179 == 0xC000000000000000 && !(v180 | v178))
          {
            outlined copy of GraphicsBlendMode(v217, v431);
            char v222 = 0;
            __int16 v223 = 0;
            uint64_t v224 = MEMORY[0x263F8EE78];
LABEL_222:
            *(_WORD *)(v389 + 216) = v223;
            *(void *)(v389 + 192) = v217;
            *(void *)(v389 + 200) = v431 | 0x4000000500000000;
            *(void *)(v389 + 208) = v224;
            *(unsigned char *)(v389 + 218) = v222;
            LOBYTE(v456) = v428;
            DisplayList.Item.canonicalize(options:)((char *)&v456);
            outlined consume of DisplayList.Item.Value(v178, v436);
            unint64_t v178 = *(void *)(v389 + 192);
            unint64_t v179 = *(void *)(v389 + 200);
            uint64_t v180 = *(void *)(v389 + 208);
            uint64_t v448 = *(unsigned __int16 *)(v389 + 216) | (*(unsigned __int8 *)(v389 + 218) << 16);
            uint64_t v142 = (uint64_t)v433;
            goto LABEL_223;
          }
          _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          unint64_t v225 = v179;
          uint64_t v224 = swift_allocObject();
          *(_OWORD *)(v224 + 16) = xmmword_2461B9DC0;
          *(void *)(v224 + 32) = 0;
          *(void *)(v224 + 40) = 0;
          *(void *)(v224 + 48) = v218;
          *(void *)(v224 + 56) = v219;
          *(void *)(v224 + 64) = v220;
          *(void *)(v224 + 72) = v178;
          *(void *)(v224 + 80) = v225;
          *(void *)(v224 + 88) = v180;
          *(unsigned char *)(v224 + 98) = BYTE2(v448);
          *(_WORD *)(v224 + 96) = v448;
          *(_DWORD *)(v224 + 100) = 0;
          long long v456 = 0uLL;
          uint64_t v457 = v218;
          v458 = v219;
          uint64_t v459 = v220;
          unint64_t v460 = v178;
          unint64_t v461 = v225;
          uint64_t v462 = v180;
          BYTE2(v463) = BYTE2(v448);
          LOWORD(v463) = v448;
          HIDWORD(v463) = 0;
          outlined copy of GraphicsBlendMode(v217, v431);
          outlined copy of DisplayList.Item.Value(v178, v225);
          DisplayList.Item.features.getter((__int16 *)&v455);
          __int16 v223 = LOWORD(v455.origin.x);
          char v222 = 0;
          switch((int)v221)
          {
            case 1:
              switch(BYTE4(v436))
              {
                case 2u:
                  char v227 = v178;
                  outlined copy of DisplayList.Effect(v178, v436, 2);
                  break;
                case 7u:
                  char v227 = *(unsigned char *)(v178 + 26);
                  char v226 = BYTE2(v448);
                  outlined copy of DisplayList.Item.Value(v178, v436);
                  outlined consume of DisplayList.Effect(v178, v436, 7);
                  swift_bridgeObjectRelease();
                  goto LABEL_221;
                case 0x11u:
                  (*(void (**)(long long *__return_ptr))(*(void *)v178 + 120))(&v456);
                  char v226 = BYTE2(v448);
                  outlined copy of DisplayList.Item.Value(v178, v436);
                  outlined consume of DisplayList.Effect(v178, v436, 17);
                  swift_bridgeObjectRelease();
                  char v227 = v456;
LABEL_221:
                  char v222 = v227 | v226;
                  goto LABEL_222;
                default:
                  outlined copy of DisplayList.Effect(v178, v436, SBYTE4(v436));
                  swift_bridgeObjectRetain();
                  outlined consume of DisplayList.Effect(v178, v436, SBYTE4(v436));
                  swift_bridgeObjectRelease();
                  char v227 = 0;
                  break;
              }
              char v226 = BYTE2(v448);
              goto LABEL_221;
            case 2:
              uint64_t v228 = *(void *)(v178 + 16);
              if (!v228) {
                goto LABEL_210;
              }
              if (v228 == 1)
              {
                uint64_t v229 = 0;
                char v222 = 0;
              }
              else
              {
                char v230 = 0;
                char v231 = 0;
                uint64_t v229 = v228 & 0x7FFFFFFFFFFFFFFELL;
                uint64_t v232 = (char *)(v178 + 106);
                uint64_t v233 = v228 & 0x7FFFFFFFFFFFFFFELL;
                do
                {
                  char v234 = *(v232 - 40);
                  char v235 = *v232;
                  v232 += 80;
                  v230 |= v234;
                  v231 |= v235;
                  v233 -= 2;
                }
                while (v233);
                char v222 = v231 | v230;
                if (v228 == v229) {
                  goto LABEL_222;
                }
              }
              uint64_t v236 = v228 - v229;
              int v237 = (char *)(v178 + 40 * v229 + 66);
              do
              {
                char v238 = *v237;
                v237 += 40;
                v222 |= v238;
                --v236;
              }
              while (v236);
              goto LABEL_222;
            case 3:
              goto LABEL_222;
            default:
              if (v178 >> 60 == 9) {
                char v222 = *(unsigned char *)((v178 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
              }
              else {
LABEL_210:
              }
                char v222 = 0;
              goto LABEL_222;
          }
        }
LABEL_223:
        if (v124 != 1.0)
        {
          uint64_t v240 = *(void *)(v389 + 168);
          uint64_t v241 = *(void **)(v389 + 176);
          uint64_t v242 = *(void *)(v389 + 184);
          unint64_t v243 = v179 >> 62;
          if (v179 >> 62 == 3
            && ((v448 & 0xFFFFFF) == 0 ? (BOOL v244 = v179 == 0xC000000000000000) : (BOOL v244 = 0),
                v244 ? (BOOL v245 = (v180 | v178) == 0) : (BOOL v245 = 0),
                v245))
          {
            unint64_t v249 = v179;
            char v251 = 0;
            __int16 v250 = 0;
            uint64_t v248 = MEMORY[0x263F8EE78];
          }
          else
          {
            _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
            uint64_t v246 = swift_allocObject();
            unint64_t v247 = v179;
            uint64_t v248 = v246;
            *(_OWORD *)(v246 + 16) = xmmword_2461B9DC0;
            *(void *)(v246 + 32) = 0;
            *(void *)(v246 + 40) = 0;
            *(void *)(v246 + 48) = v240;
            *(void *)(v246 + 56) = v241;
            *(void *)(v246 + 64) = v242;
            *(void *)(v246 + 72) = v178;
            *(void *)(v246 + 80) = v247;
            *(void *)(v246 + 88) = v180;
            *(unsigned char *)(v246 + 98) = BYTE2(v448);
            *(_WORD *)(v246 + 96) = v448;
            *(_DWORD *)(v246 + 100) = 0;
            long long v456 = 0uLL;
            uint64_t v457 = v240;
            v458 = v241;
            uint64_t v459 = v242;
            unint64_t v460 = v178;
            unint64_t v461 = v247;
            uint64_t v462 = v180;
            BYTE2(v463) = BYTE2(v448);
            LOWORD(v463) = v448;
            HIDWORD(v463) = 0;
            unint64_t v249 = v247;
            outlined copy of DisplayList.Item.Value(v178, v247);
            DisplayList.Item.features.getter((__int16 *)&v455);
            __int16 v250 = LOWORD(v455.origin.x);
            char v251 = 0;
            switch((int)v243)
            {
              case 1:
                switch(BYTE4(v249))
                {
                  case 2u:
                    char v253 = v178;
                    outlined copy of DisplayList.Effect(v178, v249, 2);
                    goto LABEL_254;
                  case 7u:
                    char v253 = *(unsigned char *)(v178 + 26);
                    char v252 = BYTE2(v448);
                    outlined copy of DisplayList.Item.Value(v178, v249);
                    outlined consume of DisplayList.Effect(v178, v249, 7);
                    swift_bridgeObjectRelease();
                    break;
                  case 0x11u:
                    (*(void (**)(long long *__return_ptr))(*(void *)v178 + 120))(&v456);
                    char v252 = BYTE2(v448);
                    outlined copy of DisplayList.Item.Value(v178, v249);
                    outlined consume of DisplayList.Effect(v178, v249, 17);
                    swift_bridgeObjectRelease();
                    char v253 = v456;
                    break;
                  default:
                    outlined copy of DisplayList.Effect(v178, v249, SBYTE4(v249));
                    swift_bridgeObjectRetain();
                    outlined consume of DisplayList.Effect(v178, v249, SBYTE4(v249));
                    swift_bridgeObjectRelease();
                    char v253 = 0;
LABEL_254:
                    char v252 = BYTE2(v448);
                    break;
                }
                char v251 = v253 | v252;
                break;
              case 2:
                uint64_t v254 = *(void *)(v178 + 16);
                if (!v254) {
                  goto LABEL_244;
                }
                if (v254 == 1)
                {
                  uint64_t v255 = 0;
                  char v251 = 0;
                }
                else
                {
                  char v256 = 0;
                  char v257 = 0;
                  uint64_t v255 = v254 & 0x7FFFFFFFFFFFFFFELL;
                  uint64_t v258 = (char *)(v178 + 106);
                  uint64_t v259 = v254 & 0x7FFFFFFFFFFFFFFELL;
                  do
                  {
                    char v260 = *(v258 - 40);
                    char v261 = *v258;
                    v258 += 80;
                    v256 |= v260;
                    v257 |= v261;
                    v259 -= 2;
                  }
                  while (v259);
                  char v251 = v257 | v256;
                  if (v254 == v255) {
                    break;
                  }
                }
                uint64_t v262 = v254 - v255;
                v263 = (char *)(v178 + 40 * v255 + 66);
                do
                {
                  char v264 = *v263;
                  v263 += 40;
                  v251 |= v264;
                  --v262;
                }
                while (v262);
                break;
              case 3:
                break;
              default:
                if (v178 >> 60 == 9) {
                  char v251 = *(unsigned char *)((v178 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
                }
                else {
LABEL_244:
                }
                  char v251 = 0;
                break;
            }
          }
          *(_WORD *)(v389 + 216) = v250;
          *(void *)(v389 + 192) = LODWORD(v124);
          *(void *)(v389 + 200) = 0x4000000400000000;
          *(void *)(v389 + 208) = v248;
          *(unsigned char *)(v389 + 218) = v251;
          LOBYTE(v456) = v428;
          DisplayList.Item.canonicalize(options:)((char *)&v456);
          outlined consume of DisplayList.Item.Value(v178, v249);
          unint64_t v178 = *(void *)(v389 + 192);
          unint64_t v179 = *(void *)(v389 + 200);
          uint64_t v180 = *(void *)(v389 + 208);
          uint64_t v239 = *(unsigned __int16 *)(v389 + 216) | (*(unsigned __int8 *)(v389 + 218) << 16);
          uint64_t v142 = (uint64_t)v433;
          goto LABEL_257;
        }
        uint64_t v239 = v448;
LABEL_257:
        double v136 = *(double *)(v389 + 152);
        double v135 = *(double *)(v389 + 160);
        CGFloat Height = *(double *)(v389 + 168);
        CGFloat Width = *(double *)(v389 + 176);
        uint64_t v406 = *(void *)(v389 + 184);
        uint64_t v137 = *(unsigned int *)(v389 + 220);
        outlined copy of DisplayList.Item.Value(v178, v179);
        if (one-time initialization token for normal != -1) {
          swift_once();
        }
        uint64_t v265 = static GraphicsBlendMode.normal;
        char v266 = byte_26B0EB4A0;
        *(void *)(v389 + 232) = static GraphicsBlendMode.normal;
        *(unsigned char *)(v389 + 240) = v266;
        outlined copy of GraphicsBlendMode(v265, v266);
        outlined consume of GraphicsBlendMode(v217, v431);
        uint64_t v429 = v178;
        unint64_t v434 = v179;
        uint64_t v427 = v180;
        *(void *)&v446[16] = v239;
        outlined consume of DisplayList.Item.Value(v178, v179);
        *(_DWORD *)(v389 + 244) = 1065353216;
        *(unsigned char *)(v389 + 248) = 0;
        *(_OWORD *)(v389 + 192) = xmmword_2461B9DE0;
        *(void *)(v389 + 208) = 0;
        *(unsigned char *)(v389 + 218) = 0;
        *(_WORD *)(v389 + 216) = 0;
LABEL_111:
        *(double *)(v389 + 152) = v126;
        *(double *)(v389 + 160) = v125;
        *(CGFloat *)(v389 + 168) = v127;
        *(CGFloat *)(v389 + 176) = v128;
        uint64_t v144 = *(uint64_t *)(a5 + 8);
        uint64_t v143 = *(uint64_t *)(a5 + 16);
        uint64_t v146 = *(void *)(a5 + 24);
        uint64_t v145 = *(void *)(a5 + 32);
        uint64_t v147 = *(void *)(a5 + 72);
        unint64_t v148 = *(void *)(a5 + 56);
        if (v147 >> 30)
        {
          if (v147 >> 30 == 1)
          {
            uint64_t v383 = *(void *)(a5 + 40);
            uint64_t v385 = *(void *)(a5 + 48);
            uint64_t v381 = *(void *)(a5 + 64);
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v144, v143, v146, v145, v383, v385, v148, v381, *(void *)(a5 + 72));
            outlined copy of DisplayList.Item.Value(v429, v434);
            long long v149 = (void *)v144;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v144 + 16) + 1, 1, (void *)v144);
            }
            unint64_t v151 = v149[2];
            unint64_t v150 = v149[3];
            if (v151 >= v150 >> 1) {
              long long v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v150 > 1), v151 + 1, 1, v149);
            }
            v149[2] = v151 + 1;
            unsigned int v152 = (double *)&v149[9 * v151];
            v152[4] = v136 - v126;
            v152[5] = v135 - v125;
            v152[6] = Height;
            v152[7] = Width;
            *((void *)v152 + 8) = v406;
            *((void *)v152 + 9) = v429;
            *((void *)v152 + 10) = v434;
            *((void *)v152 + 11) = v427;
            *((unsigned char *)v152 + 98) = v446[18];
            *((_WORD *)v152 + 48) = *(_WORD *)&v446[16];
            *((_DWORD *)v152 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v429, v434);
            outlined consume of _ShapeStyle_RenderedLayers.Layers(v144, v143, v146, v145, v383, v385, v148, v381, v147);
            a5 = v405;
            *(void *)(v405 + 8) = v149;
            *(_OWORD *)uint64_t v387 = 0u;
            *(_OWORD *)(v387 + 16) = 0u;
            *(_OWORD *)(v387 + 32) = 0u;
            uint64_t v111 = 0x40000000;
            *(void *)(v387 + 48) = 0;
            uint64_t v142 = (uint64_t)v433;
          }
          else
          {
            *(double *)(a5 + 8) = v136;
            *(double *)(a5 + 16) = v135;
            uint64_t v111 = *(_DWORD *)&v446[16] & 0xFFFFFF | (unint64_t)(v137 << 32);
            *(CGFloat *)(a5 + 24) = Height;
            *(CGFloat *)(a5 + 32) = Width;
            *(void *)(a5 + 40) = v406;
            *(void *)(a5 + 48) = v429;
            *(void *)(a5 + 56) = v434;
            *(void *)(a5 + 64) = v427;
          }
        }
        else
        {
          double v105 = *(double *)&v144 - v126;
          double v106 = *(double *)&v143 - v125;
          uint64_t v107 = *(void *)(a5 + 48);
          uint64_t v108 = *(void *)(a5 + 40);
          uint64_t v109 = *(void *)(a5 + 64);
          _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          uint64_t v110 = swift_allocObject();
          *(_OWORD *)(v110 + 16) = xmmword_2461BDD50;
          *(double *)(v110 + 32) = v105;
          *(double *)(v110 + 40) = v106;
          *(void *)(v110 + 48) = v146;
          *(void *)(v110 + 56) = v145;
          *(void *)(v110 + 64) = v108;
          *(void *)(v110 + 72) = v107;
          *(void *)(v110 + 80) = v148;
          *(void *)(v110 + 88) = v109;
          *(unsigned char *)(v110 + 98) = BYTE2(v147);
          *(_WORD *)(v110 + 96) = v147;
          *(_DWORD *)(v110 + 100) = 0;
          *(double *)(v110 + 104) = v136 - v126;
          *(double *)(v110 + 112) = v135 - v125;
          *(CGFloat *)(v110 + 120) = Height;
          *(CGFloat *)(v110 + 128) = Width;
          *(void *)(v110 + 136) = v406;
          *(void *)(v110 + 144) = v429;
          *(void *)(v110 + 152) = v434;
          *(void *)(v110 + 160) = v427;
          *(unsigned char *)(v110 + 170) = v446[18];
          *(_WORD *)(v110 + 168) = *(_WORD *)&v446[16];
          *(_DWORD *)(v110 + 172) = 0;
          *(void *)(a5 + 8) = v110;
          *(_OWORD *)uint64_t v387 = 0u;
          *(_OWORD *)(v387 + 16) = 0u;
          *(_OWORD *)(v387 + 32) = 0u;
          uint64_t v111 = 0x40000000;
          *(void *)(v387 + 48) = 0;
        }
        *(void *)(a5 + 72) = v111;
        outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)v389, *(void *)(v389 + 8), *(void *)(v389 + 16), *(void *)(v389 + 24), *(void *)(v389 + 32), *(void *)(v389 + 40), *(void *)(v389 + 48), *(void *)(v389 + 56), *(void *)(v389 + 64), *(void *)(v389 + 72), *(void *)(v389 + 80), *(void *)(v389 + 88), *(_DWORD *)(v389 + 96));
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?(*(uint64_t *)v446, v446[8], v445, v426, v444, v142, v116, v443, v439, v411, v410, v409, v408, v407);
        *(void *)uint64_t v389 = v424;
        *(void *)(v389 + 8) = v423;
        *(void *)(v389 + 16) = v422;
        *(void *)(v389 + 24) = v421;
        *(void *)(v389 + 32) = v420;
        *(void *)(v389 + 40) = v419;
        *(void *)(v389 + 48) = v418;
        *(void *)(v389 + 56) = v417;
        *(void *)(v389 + 64) = v416;
        *(void *)(v389 + 72) = v415;
        *(void *)(v389 + 80) = v414;
        *(void *)(v389 + 88) = v413;
        *(_DWORD *)(v389 + 96) = v412;
        char v85 = v391;
      }
      uint64_t v267 = *(void *)v113;
      int v268 = *(_DWORD *)(v113 + 8);
      swift_release();
      swift_release();
      outlined consume of _ShapeStyle_Pack.Fill(v398, BYTE8(v398), (uint64_t)v404, v403, v402, v401, v400, v399, v396, v395, v378);
      outlined consume of GraphicsBlendMode?(v397, v377);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_LayerID(*(uint64_t *)&v394, *(uint64_t *)&v392, v393);
      *(void *)(v389 + 136) = v267;
      *(_DWORD *)(v389 + 144) = v268;
      if ((v369 & 1) == 0)
      {
LABEL_263:
        long long v482 = 0u;
        memset(aBlock, 0, sizeof(aBlock));
        *(void *)v471 = v375;
        *(_OWORD *)&v471[8] = v380;
        uint64_t v269 = RBSymbolUpdateLayerPath();
        if (RBPathIsNull(v269, v270)) {
          goto LABEL_264;
        }
        *(_OWORD *)v471 = aBlock[0];
        *(_OWORD *)&v471[16] = aBlock[1];
        long long v472 = v482;
        uint64_t v304 = RBPathCopyTransformedPath();
        uint64_t v306 = v305;
        type metadata accessor for Path.PathBox();
        uint64_t v307 = swift_allocObject();
        *(_OWORD *)(v307 + 24) = 0u;
        *(_OWORD *)(v307 + 104) = 0u;
        *(_OWORD *)(v307 + 88) = 0u;
        *(_OWORD *)(v307 + 72) = 0u;
        *(_OWORD *)(v307 + 56) = 0u;
        *(_OWORD *)(v307 + 40) = 0u;
        *(unsigned char *)(v307 + 16) = 1;
        *(void *)(v307 + 24) = v304;
        *(void *)(v307 + 32) = v306;
        uint64_t v302 = v389;
        outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)v389, *(void *)(v389 + 8), *(void *)(v389 + 16), *(void *)(v389 + 24), *(void *)(v389 + 32), *(void *)(v389 + 40), *(void *)(v389 + 48), *(void *)(v389 + 56), *(void *)(v389 + 64), *(void *)(v389 + 72), *(void *)(v389 + 80), *(void *)(v389 + 88), *(_DWORD *)(v389 + 96));
        *(void *)uint64_t v389 = v307;
        *(void *)(v389 + 16) = 0;
        *(void *)(v389 + 24) = 0;
        *(void *)(v389 + 8) = 0;
        *(void *)(v389 + 32) = 65541;
        *(_OWORD *)(v389 + 40) = 0u;
        *(_OWORD *)(v389 + 56) = 0u;
        *(_OWORD *)(v389 + 72) = 0u;
        *(_OWORD *)(v389 + 84) = 0u;
LABEL_285:
        uint64_t v17 = (uint64_t)v391;
        float v303 = v374;
        goto LABEL_286;
      }
LABEL_264:
      id v271 = v368;
      if (v368)
      {
        uint64_t v272 = v368;
        uint64_t v273 = v380;
      }
      else
      {
        id v274 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
        uint64_t v273 = v380;
        if (!v274) {
          __break(1u);
        }
        v368 = v274;
        id v271 = v274;
        uint64_t v272 = 0;
      }
      RBDisplayListGetState();
      id v275 = v272;

      *(void *)v471 = v375;
      *(void *)&v471[8] = v273;
      *(void *)&v471[16] = *((void *)&v380 + 1);
      RBSymbolUpdateLayerDraw();
      long long v276 = *(_OWORD *)(v389 + 208);
      long long v492 = *(_OWORD *)(v389 + 192);
      long long v493 = v276;
      *(_OWORD *)v494 = *(_OWORD *)(v389 + 224);
      *(_OWORD *)&v494[9] = *(_OWORD *)(v389 + 233);
      long long v277 = *(_OWORD *)(v389 + 144);
      long long v488 = *(_OWORD *)(v389 + 128);
      long long v489 = v277;
      long long v278 = *(_OWORD *)(v389 + 176);
      long long v490 = *(_OWORD *)(v389 + 160);
      long long v491 = v278;
      long long v279 = *(_OWORD *)(v389 + 80);
      long long v484 = *(_OWORD *)(v389 + 64);
      long long v485 = v279;
      long long v280 = *(_OWORD *)(v389 + 112);
      long long v486 = *(_OWORD *)(v389 + 96);
      long long v487 = v280;
      long long v281 = *(_OWORD *)(v389 + 16);
      aBlock[0] = *(_OWORD *)v389;
      aBlock[1] = v281;
      long long v282 = *(_OWORD *)(v389 + 48);
      long long v482 = *(_OWORD *)(v389 + 32);
      long long v483 = v282;
      outlined retain of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      id v283 = objc_msgSend(v271, sel_moveContents);
      objc_msgSend(v283, sel_boundingRect);
      double v284 = v500.origin.x;
      double v285 = v500.origin.y;
      double v286 = v500.size.width;
      double v287 = v500.size.height;
      BOOL v288 = CGRectIsNull(v500);
      if (v288) {
        double v289 = 0.0;
      }
      else {
        double v289 = v284;
      }
      *(void *)v446 = *(void *)&aBlock[0];
      uint64_t v290 = *(void *)&aBlock[1];
      uint64_t v445 = *((void *)&aBlock[0] + 1);
      if (v288) {
        double v291 = 0.0;
      }
      else {
        double v291 = v285;
      }
      if (v288) {
        double v292 = 0.0;
      }
      else {
        double v292 = v286;
      }
      if (v288) {
        double v293 = 0.0;
      }
      else {
        double v293 = v287;
      }
      uint64_t v294 = *((void *)&aBlock[1] + 1);
      uint64_t v444 = v482;
      unint64_t v295 = v483;
      *(void *)&long long v443 = *((void *)&v482 + 1);
      uint64_t v296 = *((void *)&v483 + 1);
      long long v440 = v484;
      long long v297 = v485;
      unsigned int v298 = v486;
      *(void *)&v446[16] = WORD2(v486);
      *(void *)&v446[8] = *((void *)&v491 + 1);
      CGRect v501 = CGRectIntegral(*(CGRect *)&v289);
      CGFloat Width = v501.origin.x;
      CGFloat Height = v501.origin.y;
      CGFloat v299 = v501.size.width;
      CGFloat v300 = v501.size.height;
      uint64_t v301 = swift_allocObject();
      *(void *)(v301 + 16) = v283;
      *(CGFloat *)(v301 + 24) = Width;
      *(CGFloat *)(v301 + 32) = Height;
      *(unsigned char *)(v301 + 40) = 0;
      *(_DWORD *)(v301 + 44) = 0;
      *(unsigned char *)(v301 + 48) = 1;
      *(_DWORD *)(v301 + 52) = 224;
      *(unsigned char *)(v301 + 56) = 3;
      outlined release of _ShapeStyle_RenderedShape((uint64_t)aBlock);
      outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)v446, v445, v290, v294, v444, v443, v295, v296, v440, *((uint64_t *)&v440 + 1), v297, *((uint64_t *)&v297 + 1), v298);
      *(CGFloat *)uint64_t v389 = Width + 0.0;
      *(CGFloat *)(v389 + 8) = Height + 0.0;
      *(CGFloat *)(v389 + 16) = v299;
      *(CGFloat *)(v389 + 24) = v300;
      *(void *)(v389 + 32) = *(void *)&v446[8];
      *(void *)(v389 + 40) = v301 | 0xA000000000000000;
      *(void *)(v389 + 48) = *(void *)&v446[16];
      *(_OWORD *)(v389 + 56) = 0u;
      *(_OWORD *)(v389 + 72) = 0u;
      *(void *)(v389 + 88) = 0;
      *(_DWORD *)(v389 + 96) = 6291456;
      if (v363 == 0x7FF0000000000000)
      {
        uint64_t v302 = v389;
        a5 = v405;
        goto LABEL_285;
      }
      a5 = v405;
      uint64_t v17 = (uint64_t)v391;
      float v303 = v374;
      uint64_t v302 = v389;
      if ((v494[24] & 1) == 0) {
        *(unsigned char *)(v389 + 248) = v494[24] | 1;
      }
LABEL_286:
      aBlock[0] = v398;
      *(void *)&aBlock[1] = v404;
      *((void *)&aBlock[1] + 1) = v403;
      *(void *)&long long v482 = v402;
      *((void *)&v482 + 1) = v401;
      *(void *)&long long v483 = v400;
      *((void *)&v483 + 1) = v399;
      uint64_t v15 = v395;
      uint64_t v12 = v396;
      *(void *)&long long v484 = v396;
      *((void *)&v484 + 1) = v395;
      unint64_t v6 = v378;
      LOBYTE(v485) = v378;
      *((float *)&v485 + 1) = v303;
      uint64_t v18 = (void *)v397;
      *((void *)&v485 + 1) = v397;
      uint64_t v19 = v377;
      LOBYTE(v486) = v377;
      *((void *)&v486 + 1) = v17;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)aBlock);
      _ShapeStyle_RenderedLayers.endLayer(shape:)(v302);
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
      outlined consume of _ShapeStyle_Pack.Fill(v398, BYTE8(v398), (uint64_t)v404, v403, v402, v401, v400, v399, v396, v395, v378);
      outlined consume of GraphicsBlendMode?(v397, v377);
      uint64_t v10 = (uint64_t)v375;
LABEL_287:
      swift_bridgeObjectRelease();
LABEL_47:
      uint64_t v70 = *((void *)&v380 + 1) + 1;
      uint64_t v69 = v379;
      if (*((void *)&v380 + 1) + 1 != v379) {
        continue;
      }
      break;
    }
LABEL_41:
    uint64_t v67 = v380 + 1;
    uint64_t v68 = updated;
    if ((void)v380 + 1 != updated) {
      continue;
    }
    break;
  }
LABEL_333:

LABEL_334:
  objc_msgSend(v357, sel_endUpdate_, v10);
LABEL_343:
  outlined release of _ShapeStyle_Pack.Slice((uint64_t)&v452);
  unint64_t v66 = 0;
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v66);
}

uint64_t outlined consume of _ShapeStyle_Pack.Style?(uint64_t result, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  if (a14)
  {
    outlined consume of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    outlined consume of GraphicsBlendMode?(a12, a13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL specialized static _ShapeStyle_LayerID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_25;
      }
      outlined consume of _ShapeStyle_LayerID(*(void *)a1, v3, 1);
      outlined consume of _ShapeStyle_LayerID(v5, v6, 1);
      return v2 == v5;
    case 2:
      if (v7 != 2)
      {
        swift_bridgeObjectRetain();
        goto LABEL_25;
      }
      if (!v3)
      {
        swift_bridgeObjectRetain();
        outlined copy of _ShapeStyle_LayerID(v5, v6, 2);
        outlined copy of _ShapeStyle_LayerID(v2, 0, 2);
        outlined consume of _ShapeStyle_LayerID(v2, 0, 2);
        outlined consume of _ShapeStyle_LayerID(v5, v6, 2);
        if (!v6) {
          return 1;
        }
LABEL_31:
        outlined consume of _ShapeStyle_LayerID(v2, v3, 2);
        uint64_t v17 = v5;
        uint64_t v18 = v6;
        char v19 = 2;
        goto LABEL_26;
      }
      if (!v6)
      {
        outlined copy of _ShapeStyle_LayerID(*(void *)a2, 0, 2);
        outlined copy of _ShapeStyle_LayerID(v2, v3, 2);
        goto LABEL_31;
      }
      uint64_t v10 = *(void *)a1;
      if (v2 != v5 || v3 != v6)
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of _ShapeStyle_LayerID(v5, v6, 2);
        outlined copy of _ShapeStyle_LayerID(v2, v3, 2);
        outlined consume of _ShapeStyle_LayerID(v2, v3, 2);
        outlined consume of _ShapeStyle_LayerID(v5, v6, 2);
        return (v12 & 1) != 0;
      }
      outlined copy of _ShapeStyle_LayerID(v10, v3, 2);
      outlined copy of _ShapeStyle_LayerID(v2, v3, 2);
      outlined consume of _ShapeStyle_LayerID(v2, v3, 2);
      uint64_t v14 = v2;
      uint64_t v15 = v3;
      char v16 = 2;
LABEL_23:
      outlined consume of _ShapeStyle_LayerID(v14, v15, v16);
      return 1;
    case 3:
      if (v7 != 3 || (v6 | v5) != 0) {
        goto LABEL_25;
      }
      outlined consume of _ShapeStyle_LayerID(*(void *)a1, v3, 3);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 3;
      goto LABEL_23;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_25:
        outlined copy of _ShapeStyle_LayerID(v5, v6, v7);
        outlined consume of _ShapeStyle_LayerID(v2, v3, v4);
        uint64_t v17 = v5;
        uint64_t v18 = v6;
        char v19 = v7;
LABEL_26:
        outlined consume of _ShapeStyle_LayerID(v17, v18, v19);
        return 0;
      }
      else
      {
        int v8 = *(void *)a1;
        outlined consume of _ShapeStyle_LayerID(*(void *)a1, v3, 0);
        outlined consume of _ShapeStyle_LayerID(v5, v6, 0);
        return v8 == v5 && WORD1(v2) == WORD1(v5);
      }
  }
}

uint64_t outlined consume of _ShapeStyle_LayerID(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of _ShapeStyle_Pack.Slice(uint64_t a1)
{
  return a1;
}

BOOL RBPathIsNull(uint64_t a1, uint64_t a2)
{
  return *MEMORY[0x263F63950] == a1 && *(void *)(MEMORY[0x263F63950] + 8) == a2;
}

uint64_t _ShapeStyle_Pack.Slice.allColors.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v3 = v1 >> 1;
  unint64_t v4 = (v1 >> 1) - v2;
  if (__OFSUB__(v1 >> 1, v2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = v5 + v4;
  if (!__OFADD__(v5, v4))
  {
    if (v6 == v5) {
      return 1;
    }
    int v8 = *(long long **)(v0 + 8);
    uint64_t result = swift_unknownObjectRetain();
    if (v2 <= 0 && v1 >= 2)
    {
      uint64_t v9 = 1;
      char v10 = 1;
      unint64_t v33 = v1 >> 1;
      uint64_t v34 = v2;
      uint64_t v31 = v5;
      unint64_t v32 = (v1 >> 1) - v2;
      uint64_t v30 = v5 + v4;
      while (1)
      {
        long long v12 = v8[2];
        long long v11 = v8[3];
        long long v13 = v8[1];
        long long v45 = *v8;
        long long v46 = v13;
        long long v47 = v12;
        long long v48 = v11;
        long long v14 = v8[4];
        long long v15 = v8[5];
        long long v16 = v8[6];
        uint64_t v17 = *((void *)v8 + 14);
        uint64_t v52 = v17;
        long long v50 = v15;
        long long v51 = v16;
        long long v49 = v14;
        if (v5 + v9 - 1 >= v6)
        {
          __break(1u);
          break;
        }
        if ((v10 & 1) == 0) {
          goto LABEL_31;
        }
        if (BYTE8(v50) != 6)
        {
          if (BYTE8(v50)) {
            goto LABEL_31;
          }
          uint64_t v18 = (void *)*((void *)&v45 + 1);
          long long v19 = v46;
          uint64_t v20 = *((void *)&v47 + 1);
          long long v39 = (void *)v47;
          uint64_t v40 = v48;
          int v37 = (void *)*((void *)&v45 + 1);
          uint64_t v38 = *((void *)&v48 + 1);
          uint64_t v21 = *((void *)&v49 + 1);
          uint64_t v43 = v49;
          uint64_t v22 = v50;
          uint64_t v41 = v51;
          unsigned __int8 v23 = BYTE8(v51);
          uint64_t v35 = v50;
          uint64_t v36 = *((void *)&v49 + 1);
          if (BYTE8(v51) == 255)
          {
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
            outlined copy of _ShapeStyle_Pack.Fill(v18, v19, *((void **)&v19 + 1), v39, v20, v40, v38, v43, v21, v22, 0);
            outlined copy of GraphicsBlendMode?(v41, 0xFFu);
            swift_bridgeObjectRetain();
            outlined copy of _ShapeStyle_Pack.Fill(v37, v19, *((void **)&v19 + 1), v39, v20, v40, v38, v43, v36, v35, 0);
            outlined copy of GraphicsBlendMode?(v41, 0xFFu);
            uint64_t v25 = one-time initialization token for normal;
            swift_bridgeObjectRetain();
            uint64_t v24 = v41;
            if (v25 != -1) {
              swift_once();
            }
            uint64_t v44 = static GraphicsBlendMode.normal;
            char v42 = byte_26B0EB4A0;
            outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
            uint64_t v6 = v30;
            uint64_t v5 = v31;
            unsigned __int8 v23 = -1;
          }
          else
          {
            char v42 = BYTE8(v51) & 1;
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
            outlined copy of _ShapeStyle_Pack.Fill(v18, v19, *((void **)&v19 + 1), v39, v20, v40, v38, v43, v21, v22, 0);
            uint64_t v24 = v41;
            outlined copy of GraphicsBlendMode?(v41, v23);
            swift_bridgeObjectRetain();
            outlined copy of _ShapeStyle_Pack.Fill(v37, v19, *((void **)&v19 + 1), v39, v20, v40, v38, v43, v36, v35, 0);
            outlined copy of GraphicsBlendMode?(v41, v23);
            swift_bridgeObjectRetain();
            uint64_t v44 = v41;
            uint64_t v6 = v30;
            uint64_t v5 = v31;
          }
          outlined copy of GraphicsBlendMode?(v24, v23);
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
          if (one-time initialization token for normal != -1) {
            swift_once();
          }
          uint64_t v26 = static GraphicsBlendMode.normal;
          char v27 = byte_26B0EB4A0;
          unint64_t v3 = v33;
          uint64_t v2 = v34;
          if (v42)
          {
            if (!byte_26B0EB4A0)
            {
              swift_unknownObjectRetain();
LABEL_29:
              outlined copy of GraphicsBlendMode(v26, v27);
              outlined consume of GraphicsBlendMode(v44, v42);
              outlined consume of GraphicsBlendMode(v26, v27);
              outlined consume of GraphicsBlendMode(v44, v42);
LABEL_30:
              outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
              uint64_t result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
              unint64_t v4 = v32;
LABEL_31:
              if (v4 == v9)
              {
                swift_unknownObjectRelease();
                return 0;
              }
              char v10 = 0;
              goto LABEL_33;
            }
            swift_unknownObjectRetain();
            outlined consume of GraphicsBlendMode(v44, 1);
            outlined consume of GraphicsBlendMode(v26, 1);
            if (v44 != v26) {
              goto LABEL_30;
            }
          }
          else
          {
            if (byte_26B0EB4A0) {
              goto LABEL_29;
            }
            outlined consume of GraphicsBlendMode(v44, 0);
            outlined consume of GraphicsBlendMode(v26, 0);
            if (v44 != v26) {
              goto LABEL_30;
            }
          }
          uint64_t v28 = *(void *)(v17 + 16);
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
          uint64_t result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v45);
          unint64_t v4 = v32;
          if (v28) {
            goto LABEL_31;
          }
        }
        if (v4 == v9)
        {
          swift_unknownObjectRelease();
          return 1;
        }
        char v10 = 1;
LABEL_33:
        if (v9 >= v2)
        {
          int v8 = (long long *)((char *)v8 + 120);
          if (v9++ < v3) {
            continue;
          }
        }
        break;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t outlined retain of _ShapeStyle_Pack.Slice(uint64_t a1)
{
  return a1;
}

uint64_t one-time initialization function for v7()
{
  uint64_t result = swiftUI_v7_0_os_versions();
  static Semantics.int v7 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v7_0_os_versions()
{
  return 0x7E90000FFFFFFFFLL;
}

uint64_t one-time initialization function for shared(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), uint64_t *a4)
{
  id v6 = (id)a2();
  a3();
  uint64_t result = swift_dynamicCastClassUnconditional();
  *a4 = result;
  return result;
}

id _initializeCoreGlue2()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getSwiftUIGlue2ClassSymbolLoc_ptr;
  int v7 = getSwiftUIGlue2ClassSymbolLoc_ptr;
  if (!getSwiftUIGlue2ClassSymbolLoc_ptr)
  {
    unint64_t v1 = (void *)SwiftUILibrary();
    v5[3] = (uint64_t)dlsym(v1, "SwiftUIGlue2Class");
    getSwiftUIGlue2ClassSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    uint64_t v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  }
  v0();
  id v2 = objc_alloc_init((Class)(id)objc_claimAutoreleasedReturnValue());

  return v2;
}

void sub_24594E0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SwiftUILibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x263EF8330];
    v3[2] = 3221225472;
    v3[3] = __SwiftUILibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_2651D43F8;
    uint64_t v5 = 0;
    SwiftUILibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = SwiftUILibraryCore_frameworkLibrary;
  unint64_t v1 = (void *)v3[0];
  if (!SwiftUILibraryCore_frameworkLibrary)
  {
    unint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

id _initializeCoreGlue()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getSwiftUIGlueClassSymbolLoc_ptr;
  int v7 = getSwiftUIGlueClassSymbolLoc_ptr;
  if (!getSwiftUIGlueClassSymbolLoc_ptr)
  {
    unint64_t v1 = (void *)SwiftUILibrary();
    v5[3] = (uint64_t)dlsym(v1, "SwiftUIGlueClass");
    getSwiftUIGlueClassSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    uint64_t v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  }
  v0();
  id v2 = objc_alloc_init((Class)(id)objc_claimAutoreleasedReturnValue());

  return v2;
}

void sub_24594E304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id @objc CoreGlue.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for CoreGlue2()
{
  return self;
}

uint64_t type metadata accessor for CoreGlue()
{
  return self;
}

double _CustomHoverEffectInputs.init(base:context:)@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  int v7 = *((_DWORD *)a1 + 8);
  int v14 = *((_DWORD *)a1 + 9);
  int v15 = *((_DWORD *)a1 + 20);
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext();
  int v8 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v9;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_WORD *)(v11 + 80) = 256;
  *(void *)(v11 + 88) = v10;
  swift_release();
  *(void *)a3 = v13;
  *(_DWORD *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = a1[3];
  *(_DWORD *)(a3 + 32) = v7 | 0x20;
  *(_DWORD *)(a3 + 36) = v14;
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 7);
  double result = *((double *)a1 + 9);
  *(double *)(a3 + 72) = result;
  *(_DWORD *)(a3 + 80) = v15;
  *(_DWORD *)(a3 + 84) = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext;
  if (!lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateEnvironmentCustomHoverEffectContext and conformance UpdateEnvironmentCustomHoverEffectContext);
  }
  return result;
}

void type metadata accessor for (AGSubgraphRef, Int)()
{
  if (!lazy cache variable for type metadata for (AGSubgraphRef, Int))
  {
    type metadata accessor for AGSubgraphRef(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AGSubgraphRef, Int));
    }
  }
}

void type metadata accessor for AGSubgraphRef(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout;
  if (!lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout;
  if (!lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AspectRatioLayout and conformance _AspectRatioLayout);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewListTransition<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance _ViewList_Section@<X0>(uint64_t a1@<X8>)
{
  return _ViewList_Group.traitKeys.getter(a1);
}

uint64_t specialized static SectionAccumulator.processUnsectionedContent(list:contentSubgraph:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 24))(&v13, v4, v5);
  uint64_t v6 = v13;
  if (v13)
  {
    BOOL v7 = specialized Set.contains(_:)((uint64_t)&type metadata for IsSectionedTraitKey, v13);
    swift_bridgeObjectRelease();
    if (v7)
    {
      return 0;
    }
    else
    {
      uint64_t v8 = a1[3];
      uint64_t v9 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v8);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
      if (v10 && (uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10), swift_release(), !v11))
      {
        return MEMORY[0x263F8EE78];
      }
      else
      {
        type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>);
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
        static SectionAccumulator.Item.implicitSentinel(_:contentSubgraph:)(a1, a2, v6 + 32);
      }
    }
  }
  return v6;
}

uint64_t _ViewList_Group.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v16 = MEMORY[0x263F8EE88];
  char v17 = 0;
  unint64_t v4 = *(void *)(v3 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  char v6 = 0;
  unint64_t v7 = 0;
  if (v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = v4;
  memset(v13, 0, 44);
  while (1)
  {
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v13, (uint64_t)&v14, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v15)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v16;
      *(unsigned char *)(a1 + 8) = v6 & 1;
      return result;
    }
    outlined init with take of ScrollStateRequest(&v14, (uint64_t)v13);
    uint64_t v8 = *((void *)&v13[1] + 1);
    uint64_t v9 = *(void *)&v13[2];
    __swift_project_boxed_opaque_existential_1(v13, *((uint64_t *)&v13[1] + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 24))(&v11, v8, v9);
    char v10 = v12;
    if (!v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = v10;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    specialized Set.formUnion<A>(_:)(v11);
    char v6 = v17 | v10;
    char v17 = (v17 | v10) & 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (v7 == v4) {
      goto LABEL_2;
    }
LABEL_3:
    if (v7 >= *(void *)(v3 + 16)) {
      break;
    }
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32 + 48 * v7++, (uint64_t)v13);
  }
  __break(1u);
  return result;
}

uint64_t ModifiedViewList.traitKeys.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result, uint64_t (*a2)(unsigned char *, void))
{
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_5:
    uint64_t result = a2(v15, *(void *)(*(void *)(v3 + 48) + 8 * v11));
  }
  int64_t v14 = v12 + 4;
  if (v14 < v9)
  {
    unint64_t v13 = *(void *)(v5 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v4 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_27;
        }
        if (v4 >= v9) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        ++v14;
        if (v13) {
          goto LABEL_22;
        }
      }
    }
    int64_t v4 = v14;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t a1)
{
  return specialized Set.formUnion<A>(_:)(a1, (uint64_t (*)(unsigned char *, void))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.formUnion<A>(_:)(a1, (uint64_t (*)(unsigned char *, void))specialized Set._Variant.insert(_:));
}

uint64_t DynamicViewList.WrappedList.traitKeys.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 24))(&v10, v5, v6);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
  char v8 = v11;
  if (v10) {
    char v9 = 1;
  }
  else {
    char v9 = v11;
  }
  if (result) {
    char v8 = v9;
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v8;
  return result;
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance BaseViewList@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 48);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewList.traitKeys.getter in conformance ForEachList<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  return ForEachList.traitKeys.getter(a1);
}

uint64_t ForEachList.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return ForEachState.traitKeys.getter(a1);
}

uint64_t ForEachState.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = 0;
  char v8 = 0;
  _OWORD v4[2] = &v7;
  unint64_t v5 = 2;
  uint64_t v6 = 0;
  ForEachState.forEachItem(from:style:do:)(&v6, &v5, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in ForEachState.traitKeys.getter, (uint64_t)v4);
  uint64_t result = v7;
  char v3 = v8;
  if (v7 && (v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v3 = 0;
  }
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v9 = ~v5;
  unint64_t v10 = (v6 + 1) & v9;
  if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v11 = *(void *)(v8 + 8 * v10);
    BOOL result = v11 == a1;
    if (v11 == a1) {
      break;
    }
    unint64_t v10 = (v10 + 1) & v9;
  }
  while (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  return result;
}

uint64_t static SectionAccumulator.Item.implicitSentinel(_:contentSubgraph:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  _MovableLockUnlock(v6);
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v17);
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v16);
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  outlined init with copy of AnyTrackedValue((uint64_t)v16, (uint64_t)v15);
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v14 = MEMORY[0x263F8EE78];
  id v12 = a2;
  SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(v15, 0x100000000uLL, &v14, 0, v9, 0, v10 + 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  *(unsigned char *)a3 = 1;
  uint64_t result = outlined init with take of ScrollStateRequest(v17, a3 + 8);
  *(void *)(a3 + 48) = a2;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = v11;
  *(void *)(a3 + 96) = v10;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  return result;
}

uint64_t _ViewInputs.weakScrollable.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  int v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t result = 0;
  if (v2 != *MEMORY[0x263F288F8]) {
    return AGCreateWeakAttribute();
  }
  return result;
}

uint64_t Font.feature(_:)(uint64_t a1, uint64_t a2)
{
  return Font.feature(_:)(a1, a2, (void (*)(void))type metadata accessor for FontBox<Font.ModifierProvider<Font.OpenTypeFeatureSettingModifier>>);
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TruncationModeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>, (uint64_t)&type metadata for TruncationModeKey, (uint64_t)&protocol witness table for TruncationModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TruncationModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double SectionAccumulator.init(contentSubgraph:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)a2 = MEMORY[0x263F8EE78];
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 72) = v2;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<_FixedSizeLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<_FixedSizeLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

uint64_t ViewRendererHost.preferenceValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t, uint64_t, uint64_t))(v6 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v7(partial apply for closure #1 in CAHostingLayer.preferenceValue<A>(_:), v10, AssociatedTypeWitness, a2, v6);
}

Swift::Bool __swiftcall WeakAttribute.allowsAsyncUpdate()()
{
  uint64_t v1 = v0;
  int Attribute = AGWeakAttributeGetAttribute();
  BOOL v3 = Attribute == *MEMORY[0x263F288F8];
  if (Attribute == *MEMORY[0x263F288F8]) {
    int v4 = 0;
  }
  else {
    int v4 = Attribute;
  }
  int v9 = v4;
  char v5 = v3;
  char v10 = v5;
  void v8[2] = v1;
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in WeakAttribute.allowsAsyncUpdate(), (uint64_t)v8, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v6, (uint64_t)&v11);
  return v11 & 1;
}

uint64_t instantiation function for generic protocol witness table for ValueActionDispatcher<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>;
  if (!lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>)
  {
    type metadata accessor for LeafResponderFilter<ColorView>(255, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>);
  }
  return result;
}

uint64_t static _BackdropEffectPlaceholder._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v20 = *a1;
  int v2 = *((_DWORD *)a1 + 2);
  int v4 = *((_DWORD *)a1 + 6);
  int v3 = *((_DWORD *)a1 + 7);
  int v5 = *((_DWORD *)a1 + 9);
  int v15 = *((_DWORD *)a1 + 8);
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[2];
  uint64_t v16 = a1[6];
  int v7 = *((_DWORD *)a1 + 14);
  int v6 = *((_DWORD *)a1 + 15);
  int v8 = *((_DWORD *)a1 + 17);
  int v9 = *((_DWORD *)a1 + 18);
  int v12 = *((_DWORD *)a1 + 19);
  int v13 = *((_DWORD *)a1 + 16);
  int v10 = *((_DWORD *)a1 + 20);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v22 = v20;
  int v23 = v2;
  uint64_t v24 = v18;
  int v25 = v4;
  int v26 = v3;
  int v28 = v5;
  uint64_t v29 = v17;
  uint64_t v30 = v16;
  int v31 = v7;
  int v32 = v6;
  int v33 = v13;
  int v34 = v8;
  int v35 = v9;
  int v36 = v12;
  int v37 = v10;
  uint64_t v38 = v20;
  int v39 = v2;
  uint64_t v40 = v18;
  int v41 = v4;
  int v42 = v3;
  int v43 = 0;
  int v44 = v5;
  uint64_t v45 = v17;
  uint64_t v46 = v16;
  int v47 = v7;
  int v48 = v6;
  int v49 = v13;
  int v50 = v8;
  int v51 = v9;
  int v52 = v12;
  int v53 = v10;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static RendererLeafView.makeLeafView(view:inputs:)(OffsetAttribute2, (uint64_t)&v38, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v27 = v15;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v22);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

unint64_t lazy protocol witness table accessor for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>)
  {
    type metadata accessor for LeafResponderFilter<ColorView>(255, &lazy cache variable for type metadata for LeafResponderFilter<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>);
  }
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance Color@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  unsigned int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static EnvironmentalView._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

double specialized static EnvironmentalView._makeView(view:inputs:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 40);
  unint64_t v27 = *(void *)a2;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 28);
  int v9 = *(_DWORD *)(a2 + 36);
  int v28 = *(_DWORD *)(a2 + 32);
  swift_beginAccess();
  unsigned int v10 = *(_DWORD *)(v5 + 16);
  type metadata accessor for PropertyList.Tracker();
  uint64_t v11 = swift_allocObject();
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8EE80];
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = v13;
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = v14;
  *(unsigned char *)(v12 + 56) = 0;
  *(void *)(v11 + 16) = v12;
  unint64_t v43 = __PAIR64__(v10, a1);
  uint64_t v44 = v11;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for EnvironmentalViewChild<Color>, (uint64_t)&type metadata for Color, (uint64_t)&protocol witness table for Color, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalViewChild);
  lazy protocol witness table accessor for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>();
  swift_retain();
  uint64_t v15 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  char v17 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v18 = *(_DWORD *)(a2 + 80);
  uint64_t v19 = *(void *)(a2 + 48);
  long long v20 = *(_OWORD *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 72);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = v22;
  long long v41 = *(_OWORD *)(a2 + 64);
  int v42 = v18;
  long long v23 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v23;
  LODWORD(v39) = 0;
  unint64_t v43 = v27;
  LODWORD(v44) = v6;
  uint64_t v45 = v5;
  unsigned int v46 = v8;
  int v47 = v7;
  int v48 = 0;
  int v49 = v9;
  uint64_t v50 = v26;
  uint64_t v51 = v19;
  long long v52 = v20;
  uint64_t v53 = v21;
  int v54 = v18;
  if (v9)
  {
    outlined retain of _ViewInputs(a2);
    uint64_t v24 = v15;
  }
  else
  {
    unint64_t v30 = __PAIR64__(*(_DWORD *)(v5 + 16), v15);
    double v31 = COERCE_DOUBLE(__PAIR64__(v6, v8));
    int v32 = v7;
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    char v35 = 1;
    uint64_t v36 = 0;
    int v37 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _ViewInputs(a2);
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  specialized static RendererLeafView.makeLeafView(view:inputs:)(v24, (uint64_t)&v43, &v30);
  LODWORD(v39) = v28;
  if (v17)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v30, v38);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(a2);
  }
  swift_release();
  *(void *)a3 = v30;
  double result = v31;
  a3[1] = v31;
  return result;
}

void type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>)
  {
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(255, &lazy cache variable for type metadata for EnvironmentalViewChild<Color>, (uint64_t)&type metadata for Color, (uint64_t)&protocol witness table for Color, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentalViewChild);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentalViewChild<Color> and conformance EnvironmentalViewChild<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t specialized static RendererLeafView.makeLeafView(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return specialized static RendererLeafView.makeLeafView(view:inputs:)(a1, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for LeafDisplayList<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<ColorView>, (uint64_t)&protocol witness table for ColorView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<ColorView> and conformance LeafResponderFilter<A>);
}

{
  return specialized static RendererLeafView.makeLeafView(view:inputs:)(a1, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafDisplayList<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafDisplayList<BackdropView> and conformance LeafDisplayList<A>, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&protocol witness table for BackdropView, (void (*)(void))lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
}

uint64_t specialized static RendererLeafView.makeLeafView(view:inputs:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, void *a8@<X8>, void (*a9)(uint64_t), unint64_t *a10, uint64_t a11, void (*a12)(void))
{
  v157[1] = *MEMORY[0x263EF8340];
  uint64_t v139 = MEMORY[0x263F8EE78];
  int v14 = *MEMORY[0x263F288F8];
  LODWORD(v140) = 0;
  HIDWORD(v140) = *MEMORY[0x263F288F8];
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
LABEL_68:
    *a8 = v139;
    a8[1] = v140;
    return result;
  }
  unsigned int v19 = result;
  long long v20 = (ValueMetadata **)(v15 + 32);
  uint64_t v21 = (ValueMetadata **)(v15 + 32);
  uint64_t v22 = v16;
  do
  {
    if (*v21 == &type metadata for DisplayList.Key)
    {
      uint64_t v119 = a3;
      uint64_t v121 = a4;
      uint64_t v124 = a6;
      CGFloat v127 = a7;
      Swift::UInt32 v132 = ++lastIdentity;
      long long v23 = *(_OWORD *)(a2 + 32);
      long long v155 = *(_OWORD *)(a2 + 16);
      long long v156 = v23;
      long long v154 = *(_OWORD *)a2;
      LOBYTE(v12) = BYTE4(v23);
      if ((WORD2(v23) & 0x100) != 0) {
        goto LABEL_72;
      }
      goto LABEL_7;
    }
    v21 += 2;
    --v22;
  }
  while (v22);
  while (1)
  {
    uint64_t v59 = 0;
    while (1)
    {
      uint64_t v60 = v59 + 1;
      if (__OFADD__(v59, 1)) {
        break;
      }
      if (*v20 == &type metadata for ViewRespondersKey)
      {
        uint64_t v136 = a5;
        uint64_t v61 = *(void *)(a2 + 16);
        int v62 = *(_DWORD *)(a2 + 36);
        swift_beginAccess();
        if ((v62 & 0x20) == 0)
        {
          unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
          LODWORD(v64) = *(_DWORD *)(a2 + 64);
          uint64_t v65 = v136;
LABEL_67:
          uint64_t v97 = swift_endAccess();
          unsigned int v98 = *(_DWORD *)(a2 + 60);
          *(void *)&long long v148 = __PAIR64__(OffsetAttribute2, v19);
          *((void *)&v148 + 1) = __PAIR64__(v98, v64);
          *(void *)&long long v149 = 0;
          a9(v97);
          type metadata accessor for [ViewResponder](0);
          type metadata accessor for LeafResponderFilter<ColorView>(0, a10, v65, a11, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
          a12();
          unsigned int v99 = Attribute.init<A>(body:value:flags:update:)();
          LOBYTE(v148) = 0;
          unint64_t result = PreferencesOutputs.subscript.setter(v99, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
          goto LABEL_68;
        }
        unsigned int v138 = v19;
        uint64_t v116 = a8;
        uint64_t v66 = *(void *)a2;
        int v67 = *(_DWORD *)(a2 + 8);
        unsigned int v68 = *(_DWORD *)(a2 + 24);
        uint64_t v69 = *(void *)(a2 + 32);
        uint64_t v70 = *(void *)(a2 + 48);
        uint64_t v130 = *(void *)(a2 + 40);
        uint64_t v133 = *(void *)(a2 + 16);
        uint64_t v71 = *(void *)(a2 + 56);
        uint64_t v125 = *(void *)(a2 + 72);
        uint64_t v128 = *(void *)(a2 + 64);
        int v122 = *(_DWORD *)(a2 + 80);
        long long v72 = *(_OWORD *)(a2 + 48);
        long long v150 = *(_OWORD *)(a2 + 32);
        long long v151 = v72;
        long long v152 = *(_OWORD *)(a2 + 64);
        int v153 = *(_DWORD *)(a2 + 80);
        long long v73 = *(_OWORD *)(a2 + 16);
        long long v148 = *(_OWORD *)a2;
        long long v149 = v73;
        outlined retain of _ViewInputs(a2);
        unsigned int v74 = _ViewInputs.geometryTransaction()();
        uint64_t KeyPath = swift_getKeyPath();
        int v76 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
        swift_release();
        if ((*(unsigned char *)(v61 + 81) & 1) == 0
          && v128 == *(_DWORD *)(v61 + 32)
          && v125 == *(_DWORD *)(v61 + 36)
          && v76 == *(_DWORD *)(v61 + 40)
          && v67 == *(_DWORD *)(v61 + 44)
          && v74 == *(_DWORD *)(v61 + 48)
          && v68 == *(_DWORD *)(v61 + 52))
        {
          if ((*(unsigned char *)(v61 + 72) & 1) == 0)
          {
            unsigned int OffsetAttribute2 = *(_DWORD *)(v61 + 68);
LABEL_54:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            int v82 = *(_DWORD *)(a2 + 8);
            uint64_t v129 = *(void *)(a2 + 16);
            unsigned int v83 = *(_DWORD *)(a2 + 24);
            uint64_t v84 = *(void *)(a2 + 32);
            uint64_t v85 = *(void *)(a2 + 48);
            uint64_t v131 = *(void *)(a2 + 40);
            uint64_t v134 = *(void *)a2;
            uint64_t v86 = *(void *)(a2 + 56);
            uint64_t v123 = *(void *)(a2 + 72);
            uint64_t v126 = *(void *)(a2 + 64);
            int v120 = *(_DWORD *)(a2 + 80);
            long long v87 = *(_OWORD *)(a2 + 48);
            long long v150 = *(_OWORD *)(a2 + 32);
            long long v151 = v87;
            long long v152 = *(_OWORD *)(a2 + 64);
            int v153 = *(_DWORD *)(a2 + 80);
            long long v88 = *(_OWORD *)(a2 + 16);
            long long v148 = *(_OWORD *)a2;
            long long v149 = v88;
            outlined retain of _ViewInputs(a2);
            unsigned int v89 = _ViewInputs.geometryTransaction()();
            uint64_t v90 = swift_getKeyPath();
            int v91 = specialized CachedEnvironment.attribute<A>(keyPath:)(v90);
            swift_release();
            if ((*(unsigned char *)(v61 + 81) & 1) == 0
              && v126 == *(_DWORD *)(v61 + 32)
              && v123 == *(_DWORD *)(v61 + 36)
              && v91 == *(_DWORD *)(v61 + 40)
              && v82 == *(_DWORD *)(v61 + 44)
              && v89 == *(_DWORD *)(v61 + 48)
              && v83 == *(_DWORD *)(v61 + 52))
            {
              a8 = v116;
              unsigned int v19 = v138;
              if ((*(unsigned char *)(v61 + 64) & 1) == 0)
              {
                LODWORD(v64) = *(_DWORD *)(v61 + 60);
LABEL_66:
                uint64_t v65 = v136;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_67;
              }
            }
            else
            {
              *(void *)&long long v148 = v134;
              DWORD2(v148) = v82;
              *(void *)&long long v149 = v129;
              *((void *)&v149 + 1) = __PAIR64__(v89, v83);
              *(void *)&long long v150 = v84;
              *((void *)&v150 + 1) = v131;
              *(void *)&long long v151 = v85;
              *((void *)&v151 + 1) = v86;
              *(void *)&long long v152 = v126;
              *((void *)&v152 + 1) = v123;
              int v153 = v120;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v148, v91, (uint64_t)&v141);
              long long v92 = v142;
              uint64_t v93 = v143;
              unsigned __int8 v94 = v147;
              unint64_t v95 = v143 | ((unint64_t)v144 << 32);
              unint64_t v96 = v145 | ((unint64_t)v146 << 32);
              *(_OWORD *)(v61 + 32) = v141;
              *(_OWORD *)(v61 + 48) = v92;
              *(void *)(v61 + 64) = v95;
              *(void *)(v61 + 72) = v96;
              *(_WORD *)(v61 + 80) = v94;
              a8 = v116;
              unsigned int v19 = v138;
              if (v93 != 1)
              {
                uint64_t v64 = HIDWORD(*((void *)&v92 + 1));
                goto LABEL_66;
              }
            }
            LODWORD(v64) = AGGraphCreateOffsetAttribute2();
            *(_DWORD *)(v61 + 60) = v64;
            *(unsigned char *)(v61 + 64) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          *(void *)&long long v148 = v66;
          DWORD2(v148) = v67;
          *(void *)&long long v149 = v133;
          *((void *)&v149 + 1) = __PAIR64__(v74, v68);
          *(void *)&long long v150 = v69;
          *((void *)&v150 + 1) = v130;
          *(void *)&long long v151 = v70;
          *((void *)&v151 + 1) = v71;
          *(void *)&long long v152 = v128;
          *((void *)&v152 + 1) = v125;
          int v153 = v122;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v148, v76, (uint64_t)&v141);
          unsigned int OffsetAttribute2 = v144;
          uint64_t v77 = v145;
          unsigned __int8 v78 = v147;
          unint64_t v79 = v143 | ((unint64_t)v144 << 32);
          unint64_t v80 = v145 | ((unint64_t)v146 << 32);
          long long v81 = v142;
          *(_OWORD *)(v61 + 32) = v141;
          *(_OWORD *)(v61 + 48) = v81;
          *(void *)(v61 + 64) = v79;
          *(void *)(v61 + 72) = v80;
          *(_WORD *)(v61 + 80) = v78;
          if (v77 != 1) {
            goto LABEL_54;
          }
        }
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v61 + 68) = OffsetAttribute2;
        *(unsigned char *)(v61 + 72) = 0;
        goto LABEL_54;
      }
      ++v59;
      v20 += 2;
      if (v60 == v16) {
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_72:
    outlined retain of _ViewInputs(a2);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs(a2);
    unint64_t result = AGWeakAttributeGetAttribute();
    if (result == v14) {
      break;
    }
    LODWORD(v141) = v132;
    uint64_t v100 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v141);
    v100(&v148, 0);
LABEL_7:
    unsigned int v137 = v19;
    uint64_t v24 = v155;
    swift_beginAccess();
    if ((v12 & 0x20) == 0)
    {
      LODWORD(v117) = *(_DWORD *)(a2 + 64);
      goto LABEL_32;
    }
    uint64_t v135 = a5;
    int v25 = *(_DWORD *)(a2 + 8);
    uint64_t v109 = *(void *)(a2 + 16);
    uint64_t v111 = *(void *)a2;
    unsigned int v26 = *(_DWORD *)(a2 + 24);
    uint64_t v27 = *(void *)(a2 + 32);
    uint64_t v107 = *(void *)(a2 + 40);
    uint64_t v113 = *(void *)(a2 + 48);
    unint64_t v115 = a8;
    uint64_t v28 = *(void *)(a2 + 56);
    uint64_t v103 = *(void *)(a2 + 72);
    uint64_t v105 = *(void *)(a2 + 64);
    int v101 = *(_DWORD *)(a2 + 80);
    long long v29 = *(_OWORD *)(a2 + 48);
    long long v150 = *(_OWORD *)(a2 + 32);
    long long v151 = v29;
    long long v152 = *(_OWORD *)(a2 + 64);
    int v153 = *(_DWORD *)(a2 + 80);
    long long v30 = *(_OWORD *)(a2 + 16);
    long long v148 = *(_OWORD *)a2;
    long long v149 = v30;
    outlined retain of _ViewInputs(a2);
    unsigned int v31 = _ViewInputs.geometryTransaction()();
    uint64_t v32 = swift_getKeyPath();
    int v118 = specialized CachedEnvironment.attribute<A>(keyPath:)(v32);
    swift_release();
    if ((*(unsigned char *)(v24 + 81) & 1) == 0
      && v105 == *(_DWORD *)(v24 + 32)
      && v103 == *(_DWORD *)(v24 + 36)
      && v118 == *(_DWORD *)(v24 + 40)
      && v25 == *(_DWORD *)(v24 + 44)
      && v31 == *(_DWORD *)(v24 + 48)
      && v26 == *(_DWORD *)(v24 + 52))
    {
      if ((*(unsigned char *)(v24 + 64) & 1) == 0)
      {
        LODWORD(v117) = *(_DWORD *)(v24 + 60);
        goto LABEL_20;
      }
LABEL_19:
      LODWORD(v117) = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v24 + 60) = v117;
      *(unsigned char *)(v24 + 64) = 0;
      goto LABEL_20;
    }
    *(void *)&long long v148 = v111;
    DWORD2(v148) = v25;
    *(void *)&long long v149 = v109;
    *((void *)&v149 + 1) = __PAIR64__(v31, v26);
    *(void *)&long long v150 = v27;
    *((void *)&v150 + 1) = v107;
    *(void *)&long long v151 = v113;
    *((void *)&v151 + 1) = v28;
    *(void *)&long long v152 = v105;
    *((void *)&v152 + 1) = v103;
    int v153 = v101;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v148, v118, (uint64_t)&v141);
    long long v33 = v142;
    uint64_t v34 = v143;
    unsigned __int8 v35 = v147;
    unint64_t v36 = v143 | ((unint64_t)v144 << 32);
    unint64_t v37 = v145 | ((unint64_t)v146 << 32);
    *(_OWORD *)(v24 + 32) = v141;
    *(_OWORD *)(v24 + 48) = v33;
    *(void *)(v24 + 64) = v36;
    *(void *)(v24 + 72) = v37;
    *(_WORD *)(v24 + 80) = v35;
    if (v34 == 1) {
      goto LABEL_19;
    }
    uint64_t v117 = HIDWORD(*((void *)&v33 + 1));
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v38 = *(_DWORD *)(a2 + 8);
    unsigned int v39 = *(_DWORD *)(a2 + 24);
    uint64_t v40 = *(void *)(a2 + 32);
    uint64_t v112 = *(void *)(a2 + 40);
    uint64_t v114 = *(void *)(a2 + 16);
    uint64_t v108 = *(void *)a2;
    uint64_t v110 = *(void *)(a2 + 48);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v104 = *(void *)(a2 + 72);
    uint64_t v106 = *(void *)(a2 + 64);
    int v102 = *(_DWORD *)(a2 + 80);
    long long v42 = *(_OWORD *)(a2 + 48);
    long long v150 = *(_OWORD *)(a2 + 32);
    long long v151 = v42;
    long long v152 = *(_OWORD *)(a2 + 64);
    int v153 = *(_DWORD *)(a2 + 80);
    long long v43 = *(_OWORD *)(a2 + 16);
    long long v148 = *(_OWORD *)a2;
    long long v149 = v43;
    outlined retain of _ViewInputs(a2);
    unsigned int v44 = _ViewInputs.geometryTransaction()();
    uint64_t v45 = swift_getKeyPath();
    int v46 = specialized CachedEnvironment.attribute<A>(keyPath:)(v45);
    swift_release();
    if ((*(unsigned char *)(v24 + 81) & 1) == 0
      && v106 == *(_DWORD *)(v24 + 32)
      && v104 == *(_DWORD *)(v24 + 36)
      && v46 == *(_DWORD *)(v24 + 40)
      && v38 == *(_DWORD *)(v24 + 44)
      && v44 == *(_DWORD *)(v24 + 48)
      && v39 == *(_DWORD *)(v24 + 52))
    {
      a8 = v115;
      a5 = v135;
      if ((*(unsigned char *)(v24 + 72) & 1) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)&long long v148 = v108;
      DWORD2(v148) = v38;
      *(void *)&long long v149 = v114;
      *((void *)&v149 + 1) = __PAIR64__(v44, v39);
      *(void *)&long long v150 = v40;
      *((void *)&v150 + 1) = v112;
      *(void *)&long long v151 = v110;
      *((void *)&v151 + 1) = v41;
      *(void *)&long long v152 = v106;
      *((void *)&v152 + 1) = v104;
      int v153 = v102;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v148, v46, (uint64_t)&v141);
      uint64_t v47 = v145;
      unsigned __int8 v48 = v147;
      unint64_t v49 = v143 | ((unint64_t)v144 << 32);
      unint64_t v50 = v145 | ((unint64_t)v146 << 32);
      long long v51 = v142;
      *(_OWORD *)(v24 + 32) = v141;
      *(_OWORD *)(v24 + 48) = v51;
      *(void *)(v24 + 64) = v49;
      *(void *)(v24 + 72) = v50;
      *(_WORD *)(v24 + 80) = v48;
      a8 = v115;
      a5 = v135;
      if (v47 != 1) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(v24 + 68) = AGGraphCreateOffsetAttribute2();
    *(unsigned char *)(v24 + 72) = 0;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_32:
    swift_endAccess();
    unsigned int v52 = AGGraphCreateOffsetAttribute2();
    uint64_t v53 = v154;
    v157[0] = v154;
    outlined retain of _ViewInputs(a2);
    outlined retain of _GraphInputs((uint64_t)&v154);
    outlined retain of ViewTransform((uint64_t)v157);
    uint64_t v54 = specialized find<A>(_:key:)(v53);
    unsigned int v19 = v137;
    if (v54) {
      char v55 = *(unsigned char *)(v54 + 72);
    }
    else {
      char v55 = 0;
    }
    int v12 = *(_DWORD *)(a2 + 68);
    outlined release of ViewTransform((uint64_t)v157);
    outlined release of _GraphInputs((uint64_t)&v154);
    uint64_t v56 = outlined release of _ViewInputs(a2);
    *(void *)&long long v148 = __PAIR64__(v137, v132);
    *((void *)&v148 + 1) = __PAIR64__(v52, v117);
    LODWORD(v149) = v12;
    BYTE4(v149) = v55;
    WORD3(v149) = 0;
    v119(v56);
    type metadata accessor for LeafResponderFilter<ColorView>(0, v121, a5, v124, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    int v14 = v57;
    v127();
    unsigned int v58 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v148) = 0;
    unint64_t result = PreferencesOutputs.subscript.setter(v58, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
  }
  __break(1u);
  return result;
}

void type metadata accessor for LeafResponderFilter<ColorView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>;
  if (!lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>)
  {
    type metadata accessor for LeafResponderFilter<ColorView>(255, (unint64_t *)&lazy cache variable for type metadata for LeafDisplayList<ColorView>, (uint64_t)&type metadata for ColorView, (uint64_t)&protocol witness table for ColorView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafDisplayList<ColorView> and conformance LeafDisplayList<A>);
  }
  return result;
}

unsigned int *static RendererLeafView.makeLeafView(view:inputs:)@<X0>(unsigned int *result@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v140[1] = *MEMORY[0x263EF8340];
  unsigned int v114 = *result;
  long long v6 = a2[3];
  long long v133 = a2[2];
  long long v134 = v6;
  long long v135 = a2[4];
  int v136 = *((_DWORD *)a2 + 20);
  long long v7 = a2[1];
  long long v131 = *a2;
  long long v132 = v7;
  uint64_t v115 = MEMORY[0x263F8EE78];
  int v8 = *MEMORY[0x263F288F8];
  LODWORD(v116) = 0;
  HIDWORD(v116) = v8;
  uint64_t v9 = *(void *)(v6 + 16);
  if (!v9)
  {
LABEL_68:
    *a5 = v115;
    a5[1] = v116;
    return result;
  }
  uint64_t v10 = a4;
  uint64_t v11 = (ValueMetadata **)(v134 + 32);
  int v12 = (ValueMetadata **)(v134 + 32);
  uint64_t v13 = *(void *)(v134 + 16);
  uint64_t v113 = a3;
  do
  {
    if (*v12 == &type metadata for DisplayList.Key)
    {
      uint64_t v112 = a4;
      LODWORD(v110) = ++lastIdentity;
      long long v14 = a2[2];
      long long v138 = a2[1];
      long long v139 = v14;
      long long v137 = *a2;
      LOBYTE(v10) = BYTE4(v14);
      if ((WORD2(v14) & 0x100) != 0) {
        goto LABEL_72;
      }
      goto LABEL_7;
    }
    v12 += 2;
    --v13;
  }
  while (v13);
  int v8 = 0;
  while (1)
  {
    uint64_t v56 = 0;
    while (1)
    {
      uint64_t v57 = v56 + 1;
      if (__OFADD__(v56, 1)) {
        break;
      }
      if (*v11 == &type metadata for ViewRespondersKey)
      {
        uint64_t v110 = 0;
        uint64_t v58 = v132;
        char v59 = BYTE4(v133);
        swift_beginAccess();
        if ((v59 & 0x20) == 0)
        {
          int OffsetAttribute2 = DWORD2(v135);
          LODWORD(v63) = v135;
LABEL_67:
          swift_endAccess();
          uint64_t v93 = LeafResponderFilter.init(data:size:position:transform:)(v114, OffsetAttribute2, v63, SHIDWORD(v134), (uint64_t)&v124);
          long long v117 = v124;
          *(void *)&long long v118 = v125;
          MEMORY[0x270FA5388](v93);
          uint64_t v94 = type metadata accessor for LeafResponderFilter();
          uint64_t v99 = v94;
          uint64_t WitnessTable = swift_getWitnessTable();
          type metadata accessor for [ViewResponder](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x263F28898]);
          _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v117, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v98, v94, MEMORY[0x263F8E628], v95, MEMORY[0x263F8E658], v96);
          swift_release();
          LOBYTE(v124) = 0;
          unint64_t result = (unsigned int *)PreferencesOutputs.subscript.setter(v130, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
          goto LABEL_68;
        }
        uint64_t v111 = a5;
        uint64_t v112 = v10;
        int v64 = DWORD2(v131);
        uint64_t v65 = v132;
        unsigned int v66 = DWORD2(v132);
        uint64_t v108 = *((void *)&v133 + 1);
        uint64_t v67 = v133;
        uint64_t v109 = v131;
        uint64_t v68 = *((void *)&v134 + 1);
        uint64_t v107 = v134;
        *(void *)&long long v60 = *((void *)&v135 + 1);
        *(void *)&long long v61 = v135;
        long long v105 = v60;
        long long v106 = v61;
        int v69 = v136;
        long long v127 = v134;
        long long v128 = v135;
        int v129 = v136;
        long long v124 = v131;
        long long v125 = v132;
        long long v126 = v133;
        outlined retain of _ViewInputs((uint64_t)&v131);
        unsigned int v70 = _ViewInputs.geometryTransaction()();
        uint64_t KeyPath = swift_getKeyPath();
        int v72 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
        swift_release();
        if ((*(unsigned char *)(v58 + 81) & 1) == 0
          && v106 == *(_DWORD *)(v58 + 32)
          && v105 == *(_DWORD *)(v58 + 36)
          && v72 == *(_DWORD *)(v58 + 40)
          && v64 == *(_DWORD *)(v58 + 44)
          && v70 == *(_DWORD *)(v58 + 48)
          && v66 == *(_DWORD *)(v58 + 52))
        {
          if ((*(unsigned char *)(v58 + 72) & 1) == 0)
          {
            int OffsetAttribute2 = *(_DWORD *)(v58 + 68);
LABEL_54:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            int v78 = DWORD2(v131);
            *(void *)&long long v106 = v132;
            unsigned int v79 = DWORD2(v132);
            uint64_t v107 = *((void *)&v133 + 1);
            uint64_t v80 = v133;
            uint64_t v108 = v131;
            uint64_t v81 = *((void *)&v134 + 1);
            uint64_t v109 = v134;
            *(void *)&long long v82 = *((void *)&v135 + 1);
            *(void *)&long long v83 = v135;
            long long v104 = v82;
            long long v105 = v83;
            int v84 = v136;
            long long v127 = v134;
            long long v128 = v135;
            int v129 = v136;
            long long v124 = v131;
            long long v125 = v132;
            long long v126 = v133;
            outlined retain of _ViewInputs((uint64_t)&v131);
            unsigned int v85 = _ViewInputs.geometryTransaction()();
            uint64_t v86 = swift_getKeyPath();
            int v87 = specialized CachedEnvironment.attribute<A>(keyPath:)(v86);
            swift_release();
            if ((*(unsigned char *)(v58 + 81) & 1) == 0
              && v105 == *(_DWORD *)(v58 + 32)
              && v104 == *(_DWORD *)(v58 + 36)
              && v87 == *(_DWORD *)(v58 + 40)
              && v78 == *(_DWORD *)(v58 + 44)
              && v85 == *(_DWORD *)(v58 + 48)
              && v79 == *(_DWORD *)(v58 + 52))
            {
              a5 = v111;
              if ((*(unsigned char *)(v58 + 64) & 1) == 0)
              {
                LODWORD(v63) = *(_DWORD *)(v58 + 60);
LABEL_66:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                goto LABEL_67;
              }
            }
            else
            {
              *(void *)&long long v124 = v108;
              DWORD2(v124) = v78;
              *(void *)&long long v125 = v106;
              *((void *)&v125 + 1) = __PAIR64__(v85, v79);
              *(void *)&long long v126 = v80;
              *((void *)&v126 + 1) = v107;
              *(void *)&long long v127 = v109;
              *((void *)&v127 + 1) = v81;
              *(void *)&long long v128 = v105;
              *((void *)&v128 + 1) = v104;
              int v129 = v84;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v124, v87, (uint64_t)&v117);
              long long v88 = v118;
              uint64_t v89 = v119;
              unsigned __int8 v90 = v123;
              unint64_t v91 = v119 | ((unint64_t)v120 << 32);
              unint64_t v92 = v121 | ((unint64_t)v122 << 32);
              *(_OWORD *)(v58 + 32) = v117;
              *(_OWORD *)(v58 + 48) = v88;
              *(void *)(v58 + 64) = v91;
              *(void *)(v58 + 72) = v92;
              *(_WORD *)(v58 + 80) = v90;
              a5 = v111;
              if (v89 != 1)
              {
                uint64_t v63 = HIDWORD(*((void *)&v88 + 1));
                goto LABEL_66;
              }
            }
            LODWORD(v63) = AGGraphCreateOffsetAttribute2();
            *(_DWORD *)(v58 + 60) = v63;
            *(unsigned char *)(v58 + 64) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          *(void *)&long long v124 = v109;
          DWORD2(v124) = v64;
          *(void *)&long long v125 = v65;
          *((void *)&v125 + 1) = __PAIR64__(v70, v66);
          *(void *)&long long v126 = v67;
          *((void *)&v126 + 1) = v108;
          *(void *)&long long v127 = v107;
          *((void *)&v127 + 1) = v68;
          *(void *)&long long v128 = v106;
          *((void *)&v128 + 1) = v105;
          int v129 = v69;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v124, v72, (uint64_t)&v117);
          int OffsetAttribute2 = v120;
          uint64_t v73 = v121;
          unsigned __int8 v74 = v123;
          unint64_t v75 = v119 | ((unint64_t)v120 << 32);
          unint64_t v76 = v121 | ((unint64_t)v122 << 32);
          long long v77 = v118;
          *(_OWORD *)(v58 + 32) = v117;
          *(_OWORD *)(v58 + 48) = v77;
          *(void *)(v58 + 64) = v75;
          *(void *)(v58 + 72) = v76;
          *(_WORD *)(v58 + 80) = v74;
          if (v73 != 1) {
            goto LABEL_54;
          }
        }
        int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v58 + 68) = OffsetAttribute2;
        *(unsigned char *)(v58 + 72) = 0;
        goto LABEL_54;
      }
      ++v56;
      v11 += 2;
      if (v57 == v9) {
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_72:
    outlined retain of _ViewInputs((uint64_t)&v131);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v131);
    unint64_t result = (unsigned int *)AGWeakAttributeGetAttribute();
    if (result == v8) {
      break;
    }
    LODWORD(v117) = v110;
    uint64_t v97 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v117);
    v97(&v124, 0);
LABEL_7:
    uint64_t v15 = v138;
    swift_beginAccess();
    uint64_t v111 = a5;
    if ((v10 & 0x20) == 0)
    {
      uint64_t v109 = v135;
      goto LABEL_32;
    }
    *(void *)&long long v105 = v131;
    int v18 = DWORD2(v131);
    unsigned int v19 = DWORD2(v132);
    *(void *)&long long v106 = *((void *)&v133 + 1);
    uint64_t v20 = v133;
    uint64_t v107 = v132;
    uint64_t v21 = *((void *)&v134 + 1);
    uint64_t v108 = v134;
    *(void *)&long long v16 = *((void *)&v135 + 1);
    *(void *)&long long v17 = v135;
    long long v102 = v16;
    long long v103 = v17;
    long long v127 = v134;
    long long v128 = v135;
    int v101 = v136;
    int v129 = v136;
    long long v124 = v131;
    long long v125 = v132;
    long long v126 = v133;
    outlined retain of _ViewInputs((uint64_t)&v131);
    unsigned int v22 = _ViewInputs.geometryTransaction()();
    uint64_t v23 = swift_getKeyPath();
    *(void *)&long long v104 = v15 + 16;
    LODWORD(v109) = specialized CachedEnvironment.attribute<A>(keyPath:)(v23);
    swift_release();
    if ((*(unsigned char *)(v15 + 81) & 1) == 0
      && v103 == *(_DWORD *)(v15 + 32)
      && v102 == *(_DWORD *)(v15 + 36)
      && v109 == *(_DWORD *)(v15 + 40)
      && v18 == *(_DWORD *)(v15 + 44)
      && v22 == *(_DWORD *)(v15 + 48)
      && v19 == *(_DWORD *)(v15 + 52))
    {
      if ((*(unsigned char *)(v15 + 64) & 1) == 0)
      {
        uint64_t v109 = *(unsigned int *)(v15 + 60);
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v109 = AGGraphCreateOffsetAttribute2();
      *(_DWORD *)(v15 + 60) = v109;
      *(unsigned char *)(v15 + 64) = 0;
      goto LABEL_20;
    }
    *(void *)&long long v124 = v105;
    DWORD2(v124) = v18;
    *(void *)&long long v125 = v107;
    *((void *)&v125 + 1) = __PAIR64__(v22, v19);
    *(void *)&long long v126 = v20;
    *((void *)&v126 + 1) = v106;
    *(void *)&long long v127 = v108;
    *((void *)&v127 + 1) = v21;
    *(void *)&long long v128 = v103;
    *((void *)&v128 + 1) = v102;
    int v129 = v101;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v124, v109, (uint64_t)&v117);
    long long v24 = v118;
    uint64_t v25 = v119;
    unsigned __int8 v26 = v123;
    unint64_t v27 = v119 | ((unint64_t)v120 << 32);
    unint64_t v28 = v121 | ((unint64_t)v122 << 32);
    *(_OWORD *)(v15 + 32) = v117;
    *(_OWORD *)(v15 + 48) = v24;
    *(void *)(v15 + 64) = v27;
    *(void *)(v15 + 72) = v28;
    *(_WORD *)(v15 + 80) = v26;
    if (v25 == 1) {
      goto LABEL_19;
    }
    uint64_t v109 = HIDWORD(*((void *)&v24 + 1));
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v29 = DWORD2(v131);
    *(void *)&long long v105 = v132;
    unsigned int v30 = DWORD2(v132);
    *(void *)&long long v106 = *((void *)&v133 + 1);
    uint64_t v31 = v133;
    uint64_t v107 = v131;
    uint64_t v32 = *((void *)&v134 + 1);
    uint64_t v108 = v134;
    *(void *)&long long v33 = *((void *)&v135 + 1);
    *(void *)&long long v34 = v135;
    long long v102 = v33;
    long long v103 = v34;
    int v35 = v136;
    long long v127 = v134;
    long long v128 = v135;
    int v129 = v136;
    long long v124 = v131;
    long long v125 = v132;
    long long v126 = v133;
    outlined retain of _ViewInputs((uint64_t)&v131);
    unsigned int v36 = _ViewInputs.geometryTransaction()();
    uint64_t v37 = swift_getKeyPath();
    int v38 = specialized CachedEnvironment.attribute<A>(keyPath:)(v37);
    swift_release();
    if ((*(unsigned char *)(v15 + 81) & 1) == 0
      && v103 == *(_DWORD *)(v15 + 32)
      && v102 == *(_DWORD *)(v15 + 36)
      && v38 == *(_DWORD *)(v15 + 40)
      && v29 == *(_DWORD *)(v15 + 44)
      && v36 == *(_DWORD *)(v15 + 48)
      && v30 == *(_DWORD *)(v15 + 52))
    {
      if ((*(unsigned char *)(v15 + 72) & 1) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)&long long v124 = v107;
      DWORD2(v124) = v29;
      *(void *)&long long v125 = v105;
      *((void *)&v125 + 1) = __PAIR64__(v36, v30);
      *(void *)&long long v126 = v31;
      *((void *)&v126 + 1) = v106;
      *(void *)&long long v127 = v108;
      *((void *)&v127 + 1) = v32;
      *(void *)&long long v128 = v103;
      *((void *)&v128 + 1) = v102;
      int v129 = v35;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v124, v38, (uint64_t)&v117);
      uint64_t v39 = v121;
      unsigned __int8 v40 = v123;
      unint64_t v41 = v119 | ((unint64_t)v120 << 32);
      unint64_t v42 = v121 | ((unint64_t)v122 << 32);
      long long v43 = v118;
      *(_OWORD *)(v15 + 32) = v117;
      *(_OWORD *)(v15 + 48) = v43;
      *(void *)(v15 + 64) = v41;
      *(void *)(v15 + 72) = v42;
      *(_WORD *)(v15 + 80) = v40;
      if (v39 != 1) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(v15 + 68) = AGGraphCreateOffsetAttribute2();
    *(unsigned char *)(v15 + 72) = 0;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_32:
    swift_endAccess();
    unsigned int v44 = AGGraphCreateOffsetAttribute2();
    uint64_t v45 = v137;
    v140[0] = v137;
    outlined retain of _ViewInputs((uint64_t)&v131);
    outlined retain of _GraphInputs((uint64_t)&v137);
    outlined retain of ViewTransform((uint64_t)v140);
    uint64_t v46 = specialized find<A>(_:key:)(v45);
    unsigned int v47 = v114;
    if (v46) {
      char v48 = *(unsigned char *)(v46 + 72);
    }
    else {
      char v48 = 0;
    }
    unsigned int v49 = v109;
    int v50 = DWORD1(v135);
    outlined release of ViewTransform((uint64_t)v140);
    outlined release of _GraphInputs((uint64_t)&v137);
    uint64_t v51 = outlined release of _ViewInputs((uint64_t)&v131);
    *(void *)&long long v124 = __PAIR64__(v47, v110);
    *((void *)&v124 + 1) = __PAIR64__(v44, v49);
    LODWORD(v125) = v50;
    BYTE4(v125) = v48;
    WORD3(v125) = 0;
    MEMORY[0x270FA5388](v51);
    uint64_t v10 = v112;
    uint64_t v52 = type metadata accessor for LeafDisplayList();
    uint64_t v99 = v52;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
    uint64_t v53 = v52;
    int v8 = 0;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v124, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v98, v53, MEMORY[0x263F8E628], v54, MEMORY[0x263F8E658], v55);
    LOBYTE(v124) = 0;
    unint64_t result = (unsigned int *)PreferencesOutputs.subscript.setter(v117, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    a5 = v111;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LeafResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LeafResponderFilter.init(data:size:position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(_DWORD *)a5 = result;
  *(_DWORD *)(a5 + 4) = a2;
  *(_DWORD *)(a5 + 8) = a3;
  *(_DWORD *)(a5 + 12) = a4;
  *(void *)(a5 + 16) = 0;
  return result;
}

uint64_t type metadata accessor for LeafDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ParagraphTypesettingKey>, (uint64_t)&type metadata for ParagraphTypesettingKey, (uint64_t)&protocol witness table for ParagraphTypesettingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ParagraphTypesettingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ParagraphTypesettingKey>>);
    }
  }
}

uint64_t Text.init(_:)(uint64_t a1)
{
  type metadata accessor for AttributedStringTextStorage(0);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

{
  uint64_t result;

  type metadata accessor for AttachmentTextStorage();
  unint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for LocalizedStringResourceStorage();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_1A1BB6A07088C23EE7C52846B7BEB81330LocalizedStringResourceStorage_resource;
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unsigned char *v13;
  void (*v14)(unsigned char *, uint64_t, uint64_t, double);
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[16];

  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  int v8 = &v18[-v7];
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v3 + 16);
  v14(v8, a1, v2, v11);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(unsigned char *, uint64_t, uint64_t))v14)(v5, a1 + *(int *)(v15 + 36), v2);
  DateInterval.init(start:end:)();
  outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for DateTextStorage(0);
  long long v16 = swift_allocObject();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 32))(v16 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v13, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v16;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for DateTextStorage(0);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v2;
}

uint64_t initializeWithCopy for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t type metadata completion function for ForEachState()
{
  type metadata accessor for ForEach();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata completion function for OptionalAnchorValueBox()
{
  return type metadata completion function for ArrayAnchorValueBox();
}

void *static ColorScheme.allCases.getter()
{
  return &outlined read-only object #0 of static ColorScheme.allCases.getter;
}

uint64_t ConcatenatedTextStorage.__deallocating_deinit()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t static ReuseTrace.traceReuseCacheItemPlaced(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UnaryLayoutComputer<A>(uint64_t a1)
{
  return UnaryPositionAwareLayoutComputer.updateValue()(a1, (uint64_t)type metadata accessor for UnaryLayoutEngine, (void (*)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t))UnaryLayoutEngine.init(layout:layoutContext:child:), (uint64_t)&protocol conformance descriptor for UnaryLayoutComputer<A>, (uint64_t)&protocol witness table for UnaryLayoutEngine<A>);
}

uint64_t UnaryPositionAwareLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, void (*a3)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  long long v34 = a3;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v14 + 24);
  uint64_t v16 = v15(0, v9, v11);
  uint64_t v32 = *(void *)(v16 - 8);
  uint64_t v33 = v16;
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v29 - v17;
  uint64_t result = AGGraphGetCurrentAttribute();
  int v20 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v21 = result;
    uint64_t v29 = a4;
    uint64_t v30 = a5;
    int v22 = *(_DWORD *)(v5 + 4);
    int v23 = *(_DWORD *)(v5 + 8);
    BOOL v24 = v20 == v23;
    if (v20 == v23) {
      int v23 = 0;
    }
    if (v24) {
      int v25 = v20;
    }
    else {
      int v25 = v23;
    }
    uint64_t Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, Value, v9);
    v36[0] = v21;
    v36[1] = v21;
    _OWORD v36[2] = v22;
    v35[0] = v21;
    v35[1] = v25;
    _OWORD v35[2] = v20;
    v34(v13, v36, v35, v9, v31);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v28 = v33;
    StatefulRule<>.update<A>(to:)((uint64_t)v18, a1, v33, WitnessTable, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v18, v28);
  }
  return result;
}

double UnaryLayoutEngine.init(layout:layoutContext:child:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10 = *(_DWORD *)(a2 + 8);
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v12 = (int *)type metadata accessor for UnaryLayoutEngine();
  uint64_t v13 = a5 + v12[11];
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(unsigned char *)(v13 + 48) = 1;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(unsigned char *)(v13 + 104) = 1;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(unsigned char *)(v13 + 160) = 1;
  uint64_t v14 = a5 + v12[12];
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(unsigned char *)(v14 + 96) = 1;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(unsigned char *)(v14 + 200) = 1;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_OWORD *)(v14 + 256) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(unsigned char *)(v14 + 304) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v15 = a5 + v12[9];
  *(void *)uint64_t v15 = *(void *)a2;
  *(_DWORD *)(v15 + 8) = v10;
  uint64_t v16 = a5 + v12[10];
  double result = *(double *)a3;
  *(void *)uint64_t v16 = *(void *)a3;
  *(_DWORD *)(v16 + 8) = v11;
  return result;
}

uint64_t GraphHost.asyncTransaction(_:id:_:)(unint64_t a1, int *a2, void **a3, uint64_t a4)
{
  int v7 = *a2;
  swift_retain();
  specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, v7, a3, a4, 1, 1);

  return swift_release();
}

uint64_t closure #1 in GraphHost.continueTransaction(_:)(uint64_t a1, void **a2, uint64_t a3)
{
  int v5 = _threadTransactionID();
  swift_retain();
  specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(0, v5, a2, a3, 1, 1);

  return swift_release();
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, int a2, void **a3, uint64_t a4, char a5, char a6)
{
  uint64_t v7 = v6;
  LODWORD(v12) = a2;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  uint64_t v15 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v7 + 16))
  {
    unint64_t v16 = (a5 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v7 + 168) &= a6 & 1;
    uint64_t v17 = (uint64_t *)(v7 + 144);
    uint64_t v18 = swift_beginAccess();
    unint64_t v19 = *(void *)(*(void *)(v7 + 144) + 16);
    if (v19)
    {
      swift_beginAccess();
      uint64_t v20 = *v17;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v17 = v20;
      char v50 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v20);
        *uint64_t v17 = v20;
      }
      if (v19 > *(void *)(v20 + 16))
      {
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v51 = a3;
      unint64_t v22 = v19 - 1;
      uint64_t v23 = v20 + 32;
      if (*(_DWORD *)(v20 + 32 + 24 * v22 + 8) == v12)
      {
        unint64_t v24 = *(void *)(v23 + 24 * v22);
        if (v24)
        {
          if (a1)
          {
            *(void *)&long long v53 = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v25 = compareLists(_:_:ignoredTypes:)(v24, a1, (uint64_t)&v53);
            swift_release();
            swift_release();
            p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
            swift_bridgeObjectRelease();
            if (v25)
            {
LABEL_15:
              uint64_t v26 = v23 + 24 * v22;
              uint64_t v27 = *(void *)(v26 + 16);
              unint64_t v16 = v26 + 16;
              uint64_t v20 = v27;
              unint64_t v28 = *(void *)(v27 + 16);
              v52[0] = v51;
              v52[1] = a4;
              if (v28)
              {
                swift_retain();
                char v29 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)unint64_t v16 = v20;
                if ((v29 & 1) == 0)
                {
                  uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v20);
                  *(void *)unint64_t v16 = v20;
                }
                if (v28 > *(void *)(v20 + 16))
                {
                  __break(1u);
                  goto LABEL_51;
                }
                uint64_t v30 = v20 + 40 * (v28 - 1);
                uint64_t v12 = *(void *)(v30 + 56);
                uint64_t v31 = *(void *)(v30 + 64);
                __swift_mutable_project_boxed_opaque_existential_1(v30 + 32, v12);
                uint64_t v20 = (*(uint64_t (**)(void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v31 + 16))(v52, &type metadata for CustomGraphMutation, &protocol witness table for CustomGraphMutation, v12, v31);
                swift_release();
                if (v20)
                {
LABEL_25:
                  swift_endAccess();
                  if (v50)
                  {
LABEL_41:
                    uint64_t v15 = (uint64_t)p_cache[509];
                    return _MovableLockUnlock(v15);
                  }
                  swift_beginAccess();
                  if (*(void *)(*v17 + 16))
                  {
                    specialized Array._customRemoveLast()((uint64_t)&v53);
                    unint64_t v28 = v54;
                    if (v54)
                    {
                      LODWORD(v12) = DWORD2(v53);
                      a4 = v53;
                    }
                    else
                    {
                      specialized Array.remove(at:)(*(void *)(*v17 + 16) - 1, (uint64_t)&v53);
                      a4 = v53;
                      LODWORD(v12) = DWORD2(v53);
                      unint64_t v28 = v54;
                    }
                    swift_endAccess();
                    GraphHost.flushTransactions()();
                    swift_beginAccess();
                    uint64_t v20 = *(void *)(v7 + 144);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    char v46 = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)(v7 + 144) = v20;
                    if (v46)
                    {
LABEL_45:
                      unint64_t v48 = *(void *)(v20 + 16);
                      unint64_t v47 = *(void *)(v20 + 24);
                      if (v48 >= v47 >> 1)
                      {
                        uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, (void *)v20);
                        *uint64_t v17 = v20;
                      }
                      *(void *)(v20 + 16) = v48 + 1;
                      uint64_t v49 = v20 + 24 * v48;
                      *(void *)(v49 + 32) = a4;
                      *(_DWORD *)(v49 + 40) = v12;
                      *(void *)(v49 + 48) = v28;
                      swift_endAccess();
                      swift_bridgeObjectRelease();
                      swift_release();
                      goto LABEL_41;
                    }
LABEL_52:
                    uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
                    *uint64_t v17 = v20;
                    goto LABEL_45;
                  }
LABEL_51:
                  __break(1u);
                  goto LABEL_52;
                }
                uint64_t v20 = *(void *)v16;
              }
              swift_retain();
              char v32 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)unint64_t v16 = v20;
              a3 = p_cache;
              if (v32)
              {
LABEL_22:
                unint64_t v28 = *(void *)(v20 + 16);
                unint64_t v33 = *(void *)(v20 + 24);
                uint64_t v12 = v28 + 1;
                if (v28 >= v33 >> 1)
                {
                  uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v28 + 1, 1, (void *)v20);
                  *(void *)unint64_t v16 = v20;
                }
                uint64_t v55 = &type metadata for CustomGraphMutation;
                uint64_t v56 = &protocol witness table for CustomGraphMutation;
                *(void *)&long long v53 = v51;
                *((void *)&v53 + 1) = a4;
                *(void *)(v20 + 16) = v12;
                outlined init with take of ScrollStateRequest(&v53, v20 + 40 * v28 + 32);
                p_cache = a3;
                goto LABEL_25;
              }
LABEL_49:
              uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
              *(void *)unint64_t v16 = v20;
              goto LABEL_22;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      a3 = v51;
      if ((v50 & 1) == 0) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 192))(v18))
    {
      uint64_t v35 = v34;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v35 + 32))(ObjectType, v35);
      swift_unknownObjectRelease();
    }
    swift_retain();
    swift_retain();
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v39 = v37[2];
    unint64_t v38 = v37[3];
    if (v39 >= v38 >> 1) {
      uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v37);
    }
    uint64_t v55 = &type metadata for CustomGraphMutation;
    uint64_t v56 = &protocol witness table for CustomGraphMutation;
    *(void *)&long long v53 = a3;
    *((void *)&v53 + 1) = a4;
    v37[2] = v39 + 1;
    outlined init with take of ScrollStateRequest(&v53, (uint64_t)&v37[5 * v39 + 4]);
    swift_beginAccess();
    unsigned __int8 v40 = (void *)*v17;
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v17 = (uint64_t)v40;
    if ((v41 & 1) == 0)
    {
      unsigned __int8 v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
      *uint64_t v17 = (uint64_t)v40;
    }
    unint64_t v43 = v40[2];
    unint64_t v42 = v40[3];
    if (v43 >= v42 >> 1)
    {
      unsigned __int8 v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v40);
      *uint64_t v17 = (uint64_t)v40;
    }
    void v40[2] = v43 + 1;
    unsigned int v44 = &v40[3 * v43];
    v44[4] = a1;
    *((_DWORD *)v44 + 10) = v12;
    v44[6] = v37;
    swift_endAccess();
    goto LABEL_41;
  }
  return _MovableLockUnlock(v15);
}

uint64_t specialized AsyncTransaction.append<A>(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  unint64_t v3 = v2[2];
  if (v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 16) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      *(void *)(v1 + 16) = v2;
    }
    if (v3 > v2[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    int v5 = &v2[5 * v3 - 5];
    uint64_t v6 = v5[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v5 + 4), v5[7]);
    uint64_t result = (*(uint64_t (**)(void))(v6 + 16))();
    *(void *)(v1 + 16) = v2;
    if (result) {
      return result;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
  }
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  unint64_t v9 = v2[2];
  unint64_t v8 = v2[3];
  if (v9 >= v8 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v2);
  }
  int v11 = &type metadata for EmptyGraphMutation;
  uint64_t v12 = &protocol witness table for EmptyGraphMutation;
  v2[2] = v9 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v10, (uint64_t)&v2[5 * v9 + 4]);
  *(void *)(v1 + 16) = v2;
  return result;
}

BOOL protocol witness for GraphMutation.combine<A>(with:) in conformance EmptyGraphMutation(uint64_t a1, ValueMetadata *a2)
{
  return specialized EmptyGraphMutation.combine<A>(with:)(a2);
}

BOOL specialized EmptyGraphMutation.combine<A>(with:)(ValueMetadata *a1)
{
  return a1 == &type metadata for EmptyGraphMutation;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTraits(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2 & *a2;
  if (v5 != *a2)
  {
    v4 |= v3;
    uint64_t *v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

ValueMetadata *type metadata accessor for TableStyleContext()
{
  return &type metadata for TableStyleContext;
}

const char *one-time initialization function for lockAssertionsAreEnabled()
{
  uint64_t result = getenv("SWIFTUI_ASSERT_LOCKS");
  if (result)
  {
    uint64_t result = (const char *)atoi(result);
    Swift::Bool v1 = result != 0;
  }
  else
  {
    Swift::Bool v1 = 0;
  }
  lockAssertionsAreEnabledouble d = v1;
  return result;
}

void ResolvedSafeAreaInsets.value.getter()
{
  uint64_t v1 = *(void *)v0;
  int32x4_t v7 = *(int32x4_t *)(v0 + 8);
  int v2 = *(_DWORD *)(v0 + 24);
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else if (v2 != *MEMORY[0x263F288F8])
  {
    int v4 = CurrentAttribute;
    Inputuint64_t Value = AGGraphGetInputValue();
    uint64_t v6 = *(void *)(InputValue + 16);
    long long v11 = *(_OWORD *)InputValue;
    uint64_t v12 = v6;
    v8[0] = v4;
    v8[1] = v4;
    int32x4_t v9 = vrev64q_s32(v7);
    int v10 = v2;
    SafeAreaInsets.resolve(regions:in:)(v1, v8);
  }
}

void one-time initialization function for uniformLineHeight()
{
  static Text.Sizing.uniformLineCGFloat Height = 1;
  qword_26B0ECAE0 = MEMORY[0x263F8EE78];
}

uint64_t instantiation function for generic protocol witness table for UnaryPositionAwareLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryPositionAwareChildGeometry<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TextChildQuery<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for ForEachState.Item()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<ShouldRedactContentKey> and conformance DerivedEnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<ShouldRedactSymbolImagesKey>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DerivedEnvironmentPropertyKey);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for _AnyResolvedPaint()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t View.spacing(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for SpacingLayout);
}

_DWORD *specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(_DWORD *result)
{
  int v1 = *MEMORY[0x263F288F8];
  result[3] = *MEMORY[0x263F288F8];
  *uint64_t result = v1;
  return result;
}

uint64_t type metadata accessor for ViewGraphGeometryObservers()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnchorValueBoxBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MutableBox.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t _ContainerValueWritingModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int32x4_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for _ContainerValueWritingModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v18 - v13;
  _ContainerValueWritingModifier.AddTrait.traits.getter(a1, &v19);
  uint64_t v15 = v19;
  if (!v19) {
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  uint64_t v19 = v15;
  _ContainerValueWritingModifier.AddTrait.modifier.getter((uint64_t)v14);
  unint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  v16(v14, v8);
  _ContainerValueWritingModifier.AddTrait.modifier.getter((uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v11[*(int *)(v8 + 28)], a2);
  v16(v11, v8);
  swift_setAtWritableKeyPath();
  uint64_t result = swift_release();
  *uint64_t v18 = v19;
  return result;
}

uint64_t _ContainerValueWritingModifier.AddTrait.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ContainerValueWritingModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for _ContainerValueWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ContainerValueWritingModifier.AddTrait.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    uint64_t result = 0;
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for InterpolatedDisplayList()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnchorTransform<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _ViewList_ID_Views.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.endIndex.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t type metadata accessor for AnyLayoutBox()
{
  return self;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  v3[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  v3[0] = *(void *)AGGraphGetValue();
  swift_retain();
  specialized Attribute.syncMainIfReferences<A>(do:)(v1, (uint64_t)v3);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void v2[5];

  v2[4] = *MEMORY[0x263EF8340];
  ViewListArchivedAnimation.value.getter(*a1, (uint64_t)v2);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[3];

  uint64_t v6[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  v6[0] = v4;
  v6[1] = v3;
  swift_retain();
  swift_retain();
  specialized static SystemColorSchemeModifier.makeEnvironment(modifier:environment:)(v1, v6);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutComputer<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryLayoutComputer<LayoutPriorityLayout> and conformance UnaryLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>;
  if (!lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>)
  {
    type metadata accessor for UnaryLayoutComputer<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryChildGeometry<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnaryChildGeometry<LayoutPriorityLayout> and conformance UnaryChildGeometry<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.Resolved(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  unint64_t result = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  *(void *)(a1 + 16) = result;
  return result;
}

Swift::Void __swiftcall DynamicLayoutMap.remove(uniqueId:)(Swift::UInt32 uniqueId)
{
  uint64_t v2 = *(void *)v1;
  int64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = *(void *)(*(void *)v1 + 16);
    do
    {
      uint64_t v7 = v6 >> 1;
      unint64_t v8 = v5 + (v6 >> 1);
      if (__OFADD__(v5, v6 >> 1))
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v8 >= v3) {
        goto LABEL_23;
      }
      uint64_t v9 = (Swift::UInt32 *)(v2 + 32 + 16 * v8);
      if (*v9 < uniqueId || *v9 == uniqueId && (v9[1] & 0x80000000) != 0)
      {
        uint64_t v5 = v8 + 1;
        uint64_t v7 = v6 + ~v7;
      }
      unint64_t v6 = v7;
    }
    while (v7 > 0);
    if (v5 == v3) {
      return;
    }
    if (v3 >= v5)
    {
      if (v5 < 0) {
        goto LABEL_26;
      }
      uint64_t v10 = (_DWORD *)(v2 + 16 * v5 + 32);
      int64_t v11 = v5;
      while (v11 < v3)
      {
        if (*v10 != uniqueId) {
          goto LABEL_19;
        }
        ++v11;
        v10 += 4;
        if (v3 == v11)
        {
          int64_t v11 = *(void *)(*(void *)v1 + 16);
LABEL_19:
          if (v11 < v5) {
            goto LABEL_27;
          }
          specialized Array.replaceSubrange<A>(_:with:)(v5, v11);
          v1[4] = 0;
          return;
        }
      }
      goto LABEL_24;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[16 * a1 + 32];
    uint64_t v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14]) {
      unint64_t result = (char *)memmove(result, v15, 16 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[48 * a1 + 32];
    uint64_t v15 = &v4[48 * a2 + 32];
    uint64_t v16 = 48 * v14;
    if (48 * a1 < 48 * a2 || (result < &v15[v16] ? (uint64_t v17 = a1 == a2) : (uint64_t v17 = 0), !v17)) {
      unint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v18 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v18, v8);
    uint64_t v19 = v18 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v19;
LABEL_24:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[16 * a1 + 32];
    uint64_t v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14]) {
      unint64_t result = (char *)memmove(result, v15, 16 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    unint64_t result = &v4[8 * a1 + 32];
    uint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      unint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata completion function for AddGestureModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for v6_1()
{
  uint64_t result = swiftUI_v6_1_os_versions();
  static Semantics.v6_1 = HIDWORD(result);
  return result;
}

uint64_t swiftUI_v6_1_os_versions()
{
  return 0x7E80100FFFFFFFFLL;
}

ValueMetadata *type metadata accessor for _ViewListCountInputs()
{
  return &type metadata for _ViewListCountInputs;
}

Swift::Void __swiftcall Text.assertUnstyled(_:options:)(Swift::String _, SwiftUI::Text::ResolveOptions options)
{
  uint64_t v6 = v5;
  char v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  uint64_t v12 = *(void *)options.rawValue;
  if (one-time initialization token for isDebuggerAttached != -1) {
    swift_once();
  }
  if (isDebuggerAttached)
  {
    if ((v7 & 1) == 0
      || (uint64_t v18 = v12,
          BOOL v13 = *(uint64_t (**)(uint64_t *))(*(void *)v9 + 104),
          swift_retain(),
          LOBYTE(v13) = v13(&v18),
          outlined consume of Text.Storage(v9, v8, 1),
          (v13 & 1) == 0))
    {
      uint64_t v15 = *(void *)(v6 + 16);
      if (!v15) {
        return;
      }
      for (uint64_t i = (unsigned char *)(v6 + 40); (*i & 0xE0) == 0xC0; i += 16)
      {
        uint64_t v17 = *((void *)i - 1);
        uint64_t v18 = v12;
        if ((*(uint64_t (**)(uint64_t *))(*(void *)v17 + 80))(&v18)) {
          break;
        }
        if (!--v15) {
          return;
        }
      }
    }
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_2461B9DC0;
    *(void *)(v14 + 56) = MEMORY[0x263F8D310];
    *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v14 + 32) = countAndFlagsBits;
    *(void *)(v14 + 40) = object;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sync_main_callback(uint64_t a1)
{
  _MovableLockLock(a1);
  *(unsigned char *)(a1 + 248) = 0;

  return _MovableLockUnlock(a1);
}

uint64_t instantiation function for generic protocol witness table for DelayedPreferenceChild<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

double static MaximumLineHeightKey.defaultValue.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t instantiation function for generic protocol witness table for DynamicContainerInfo<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FunctionalLocation<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintColor : EnvironmentValues()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t ViewResponder.nextResponder.getter()
{
  return swift_weakLoadStrong();
}

uint64_t key path getter for EnvironmentValues.textSizing : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v7);
  }
  uint64_t result = swift_release_n();
  uint64_t v6 = v8;
  *(unsigned char *)a2 = v7[0];
  *(void *)(a2 + 8) = v6;
  return result;
}

__n128 one-time initialization function for one()
{
  static UnitRect.one = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  xmmword_26B0E8880 = (__int128)result;
  return result;
}

uint64_t type metadata accessor for AnyDynamicFontModifier()
{
  return __swift_instantiateGenericMetadata();
}

double static ViewSize.invalidValue.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  long long v3 = static CGSize.invalidValue;
  double result = *(double *)&static CGSize.invalidValue;
  *a1 = static CGSize.invalidValue;
  a1[1] = v3;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.AccentColorProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedColorProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _VStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for kitLink()
{
  uint64_t result = MEMORY[0x24C522820](0x6B6E694C534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitLink = result;
  return result;
}

uint64_t one-time initialization function for kitFont()
{
  uint64_t result = MEMORY[0x24C522820](0x746E6F46534ELL, 0xE600000000000000);
  static NSAttributedStringKey.kitFont = result;
  return result;
}

uint64_t _ShapeStyle_InterpolatorGroup.__deallocating_deinit()
{
  _ShapeStyle_InterpolatorGroup.reset()();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall _ShapeStyle_InterpolatorGroup.reset()()
{
  uint64_t v15 = (void **)(v0 + 24);
  swift_beginAccess();
  uint64_t v14 = *(void *)(*(void *)(v0 + 24) + 16);
  if (v14)
  {
    unint64_t v1 = 0;
    while (1)
    {
      swift_beginAccess();
      long long v3 = *v15;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v15 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        *uint64_t v15 = v3;
      }
      if (v1 >= v3[2]) {
        break;
      }
      uint64_t v5 = &v3[28 * v1];
      uint64_t v2 = v5 + 4;
      uint64_t v6 = *(void *)(v5[28] + 16);
      if (v6)
      {
        uint64_t v16 = v5 + 4;
        unint64_t v17 = v1;
        uint64_t v7 = swift_bridgeObjectRetain() + 112;
        do
        {
          if (*(void *)v7)
          {
            uint64_t v8 = *(void **)(v7 - 8);
            uint64_t v9 = *(void **)(v7 - 24);
            uint64_t v10 = *(void (**)(void))(**(void **)v7 + 96);
            id v11 = *(id *)(v7 - 16);
            id v12 = v8;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            id v13 = v9;
            v10();
            swift_release_n();

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          v7 += 112;
          --v6;
        }
        while (v6);
        swift_bridgeObjectRelease();
        uint64_t v2 = v16;
        unint64_t v1 = v17;
      }
      ++v1;
      v2[24] = MEMORY[0x263F8EE78];
      v2[26] = 0;
      *((unsigned char *)v2 + 219) = 1;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      if (v1 == v14) {
        return;
      }
    }
    __break(1u);
  }
}

uint64_t DynamicViewList.Item.invalidate()()
{
  swift_beginAccess();
  type metadata accessor for Unmanaged();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1 != 1)
  {
    swift_beginAccess();
    Array.remove(at:)();
    return swift_endAccess();
  }
  return result;
}

void storeEnumTagSinglePayload for SubscriptionLifetime.Connection(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for CombineIdentifier() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v9) {
    unsigned int v14 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  size_t v15 = ((*(void *)(v10 + 64) + ((v13 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v14 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          *((unsigned char *)a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_41;
        case 4:
          *(_DWORD *)((char *)a1 + v15) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v9 >= v11)
            {
              uint64_t v23 = *(void (**)(_DWORD *, uint64_t))(v8 + 56);
              v23(a1, a2);
            }
            else
            {
              unint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 56);
              v22(((((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & ~v13, a2, v11);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((*(_DWORD *)(v10 + 64) + ((v13 + ((v12 + 7) & 0xFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v16 = a3 - v14 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(v10 + 64) + ((v13 + ((v12 + 7) & 0xFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((*(_DWORD *)(v10 + 64) + ((v13 + ((v12 + 7) & 0xFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v21 = ~v14 + a2;
    bzero(a1, v15);
    *a1 = v21;
  }
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v15) = v20;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v15) = v20;
      break;
    case 3:
LABEL_41:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)((char *)a1 + v15) = v20;
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatedShape<A>.Init()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t View.dynamicTypeSize<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v17 = a6;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  size_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = a3;
  *((void *)v15 + 4) = a4;
  *((void *)v15 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[v14], (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.dynamicTypeSize<A>(_:), (uint64_t)v15, a2);
  swift_release();
  return swift_release();
}

void one-time initialization function for defaults()
{
  int v0 = byte_26FA81681;
  if ((byte_26FA81681 & ~byte_26FA81680) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | byte_26FA81680;
  int v2 = byte_26FA81682;
  if ((byte_26FA81682 & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  char v4 = byte_26FA81683;
  if ((byte_26FA81683 & ~v3) == 0) {
    char v4 = 0;
  }
  static ViewGraph.Outputs.defaults = v4 | v3;
}

Swift::Double_optional __swiftcall BezierAnimation.fraction(for:)(Swift::Double a1)
{
  if (*v1 <= 0.0 || *v1 < a1)
  {
    char v3 = 0;
  }
  else
  {
    double v5 = v1[5];
    double v4 = v1[6];
    double v6 = v1[4];
    double v7 = a1 / *v1;
    if (v7 > 1.0) {
      double v7 = 1.0;
    }
    if (v7 <= 0.0) {
      double v7 = 0.0;
    }
    double v8 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v7, 0.000000953674316);
    a1 = round(v8 * (v4 + v8 * (v5 + v6 * v8)) * 1048576.0) * 0.000000953674316;
    char v3 = LOBYTE(a1);
  }
  result.Swift::UInt value = a1;
  result.is_nil = v3;
  return result;
}

double UnitCurve.CubicSolver.solveX(_:epsilon:)(double result, double a2)
{
  double v3 = *v2;
  double v4 = v2[1];
  double v5 = v2[2];
  double v6 = (v5 + (*v2 * result + v4) * result) * result;
  if (vabdd_f64(v6, result) >= a2)
  {
    double v7 = v6 - result;
    double v8 = v3 * 3.0;
    double v9 = v4 + v4;
    double v10 = v5 + (v3 * 3.0 * result + v4 + v4) * result;
    if (fabs(v10) < a2) {
      goto LABEL_30;
    }
    double v11 = result - v7 / v10;
    double v12 = v11 * (v5 + v11 * (v4 + v3 * v11));
    if (vabdd_f64(v12, result) >= a2)
    {
      double v13 = v5 + v11 * (v9 + v8 * v11);
      if (fabs(v13) < a2) {
        goto LABEL_30;
      }
      double v11 = v11 - (v12 - result) / v13;
      double v14 = v11 * (v5 + v11 * (v4 + v3 * v11));
      if (vabdd_f64(v14, result) >= a2)
      {
        double v15 = v5 + v11 * (v9 + v8 * v11);
        if (fabs(v15) < a2) {
          goto LABEL_30;
        }
        double v11 = v11 - (v14 - result) / v15;
        double v16 = v11 * (v5 + v11 * (v4 + v3 * v11));
        if (vabdd_f64(v16, result) >= a2)
        {
          double v17 = v5 + v11 * (v9 + v8 * v11);
          if (fabs(v17) < a2) {
            goto LABEL_30;
          }
          double v11 = v11 - (v16 - result) / v17;
          double v18 = v11 * (v5 + v11 * (v4 + v3 * v11));
          if (vabdd_f64(v18, result) >= a2)
          {
            double v19 = v5 + v11 * (v9 + v8 * v11);
            if (fabs(v19) < a2
              || (double v11 = v11 - (v18 - result) / v19,
                  double v20 = v11 * (v5 + v11 * (v4 + v3 * v11)),
                  vabdd_f64(v20, result) >= a2)
              && ((double v21 = v5 + v11 * (v9 + v8 * v11), fabs(v21) < a2)
               || (double v11 = v11 - (v20 - result) / v21,
                   double v22 = v11 * (v5 + v11 * (v4 + v3 * v11)),
                   vabdd_f64(v22, result) >= a2)
               && ((double v23 = v5 + v11 * (v9 + v8 * v11), fabs(v23) < a2)
                || (double v11 = v11 - (v22 - result) / v23, vabdd_f64(v11 * (v5 + v11 * (v4 + v3 * v11)), result) >= a2))))
            {
LABEL_30:
              double v11 = 0.0;
              if (result >= 0.0)
              {
                double v11 = 1.0;
                if (result <= 1.0)
                {
                  double v24 = 0.0;
                  double v25 = 1.0;
                  uint64_t v26 = -1023;
                  double v11 = result;
                  do
                  {
                    if (v7 < 0.0) {
                      double v24 = v11;
                    }
                    else {
                      double v25 = v11;
                    }
                    double v11 = v24 + (v25 - v24) * 0.5;
                    if (v24 >= v25 || v26 == 0) {
                      break;
                    }
                    double v28 = v11 * (v5 + v11 * (v4 + v3 * v11));
                    double v7 = v28 - result;
                    ++v26;
                  }
                  while (vabdd_f64(v28, result) >= a2);
                }
              }
            }
          }
        }
      }
    }
    return v11;
  }
  return result;
}

Class __CoreColorClass_block_invoke(Class result)
{
  if (!*((unsigned char *)result + 32))
  {
    Swift::Double_optional result = NSClassFromString(&cfstr_Uicolor.isa);
    CoreColorClass_colorClass = (uint64_t)result;
    CoreColorClass_isValidouble d = result != 0;
  }
  return result;
}

const char *one-time initialization function for waitingForPreviewThunks()
{
  Swift::Double_optional result = getenv("XCODE_RUNNING_FOR_PREVIEWS");
  if (result)
  {
    Swift::Double_optional result = (const char *)atoi(result);
    Swift::Bool v1 = result != 0;
  }
  else
  {
    Swift::Bool v1 = 0;
  }
  waitingForPreviewThunks = v1;
  return result;
}

uint64_t type metadata completion function for SubscriptionLifetime.Connection()
{
  uint64_t result = type metadata accessor for CombineIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t AtomicBox.access<A>(_:)(void (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  double v5 = *v3 + 4;
  unint64_t v6 = (unint64_t)*v3
     + ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80));
  swift_retain();
  os_unfair_lock_lock(v5);
  a1(v6);
  os_unfair_lock_unlock(v5);
  return swift_release();
}

uint64_t base witness table accessor for _AttributeBody in LeafDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t _GraphInputs.scrollTargetRemovePreference.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  char v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v2 & 1;
}

unint64_t instantiation function for generic protocol witness table for _FlexFrameLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ZStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TintKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintKey>>);
    }
  }
}

uint64_t Binding.init<A>(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for BindingOperations.ToOptional();
  uint64_t WitnessTable = swift_getWitnessTable();
  Binding.projecting<A>(_:)(WitnessTable, v4, v5, WitnessTable, a2);
  double v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v7(a1, v4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for BindingOperations.ToAnyHashable();
  uint64_t WitnessTable = swift_getWitnessTable();
  Binding.projecting<A>(_:)(WitnessTable, v4, v5, WitnessTable, a2);
  double v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v7(a1, v4);
}

uint64_t type metadata accessor for BindingOperations.ToOptional()
{
  return __swift_instantiateGenericMetadata();
}

double Text.Measurements.size(of:in:writingMode:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 *a5, double a6, double a7)
{
  unsigned __int8 v14 = *a5;
  if (!*v7)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t v15 = MEMORY[0x263F8EE78];
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TextSizeCache();
    double v16 = (void *)swift_allocObject();
    _OWORD v16[2] = 0;
    type metadata accessor for PropertyList.Tracker();
    uint64_t v17 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>();
    uint64_t v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    uint64_t v19 = MEMORY[0x263F8EE80];
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v19;
    *(void *)(v18 + 48) = v15;
    *(unsigned char *)(v18 + 56) = 0;
    *(void *)(v17 + 16) = v18;
    v16[3] = v17;
    v16[4] = v15;
  }
  unsigned __int8 v23 = v14;
  swift_retain();
  TextSizeCache.metrics(of:in:writingMode:)(a1, a2, a3 & 1, a4, &v23, a6, a7);
  double v21 = v20;
  swift_release();
  return v21;
}

uint64_t TextSizeCache.metrics(of:in:writingMode:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 *a5, double a6, double a7)
{
  uint64_t v16 = *a5;
  uint64_t v17 = v7 + 4;
  swift_beginAccess();
  uint64_t v18 = (void *)v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v41 = a3;
  char v19 = a3 & 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  unint64_t v20 = specialized Collection.firstIndex(where:)((uint64_t)v18, a1, a2, a3 & 1, a4, v16, a6, a7);
  char v22 = v21;
  outlined consume of Text.Storage(a1, a2, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v25 = v7[2];
    uint64_t v40 = v7[3];
    if (v25) {
      uint64_t v26 = *(void *)(v25 + 64);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(void *)(v40 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 16));
    *(void *)(v27 + 24) = v26;
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 16));
    swift_release();
    swift_release();
    swift_release();
    *(void *)&v46[0] = v25;
    *((void *)&v46[0] + 1) = v40;
    v51[0] = 0uLL;
    v42[0] = qword_26FA49A08;
    double v28 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)((uint64_t *)v46, 1, v42, (uint64_t *)v51, a1, a2, v41 & 1, a4);
    *(void *)&v51[0] = v25;
    *((void *)&v51[0] + 1) = v40;
    uint64_t v29 = *(void *)(a4 + 16);
    if (v29)
    {
      uint64_t v30 = (unsigned char *)(a4 + 40);
      while (1)
      {
        if ((*v30 & 0xE0) == 0xC0)
        {
          type metadata accessor for CollapsibleTextModifier();
          if (swift_dynamicCastClass()) {
            break;
          }
        }
        v30 += 16;
        if (!--v29) {
          goto LABEL_16;
        }
      }
      char v31 = 1;
    }
    else
    {
LABEL_16:
      char v31 = 0;
    }
    v45[0] = v16;
    __int16 v44 = 512;
    __int16 v43 = 0;
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    long long v48 = xmmword_24619B530;
    v42[0] = MEMORY[0x263F8EE78];
    uint64_t v32 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v28, (unint64_t *)v51, (char *)&v44, v31, &v43, v46, v42, MEMORY[0x263F8EE78], 0.0, 0.0, 0.0, 0.0, MEMORY[0x263F8EE78], v45, 0);
    memset(v51, 0, sizeof(v51));
    char v52 = 1;
    (*(void (**)(long long *__return_ptr, _OWORD *, double, double))(*(void *)v32 + 256))(v46, v51, a6, a7);
    uint64_t v9 = *((void *)&v46[0] + 1);
    uint64_t v8 = *(void *)&v46[0];
    if (v50) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v49;
    }
    swift_beginAccess();
    uint64_t v18 = (void *)*v17;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(a1, a2, v38);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v17 = v18;
    unint64_t v39 = v28;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
  swift_beginAccess();
  unsigned __int8 v23 = (void *)*v17;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v17 = v23;
  if (v24)
  {
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unsigned __int8 v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
  *uint64_t v17 = v23;
  if ((v20 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
LABEL_4:
  if (v20 < v23[2])
  {
    a4 = 88 * v20;
    LOBYTE(v23[11 * v20 + 14]) = 1;
    uint64_t v17 = (void *)*v17;
    swift_endAccess();
    if (v20 < v17[2]) {
      return v17[(unint64_t)a4 / 8 + 13];
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
  *uint64_t v17 = v18;
LABEL_21:
  unint64_t v35 = v18[2];
  unint64_t v34 = v18[3];
  if (v35 >= v34 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v18);
    *uint64_t v17 = v18;
  }
  void v18[2] = v35 + 1;
  unsigned int v36 = &v18[11 * v35];
  _DWORD v36[4] = a1;
  v36[5] = a2;
  *((unsigned char *)v36 + 48) = v41 & 1;
  v36[7] = a4;
  *((unsigned char *)v36 + 64) = 2;
  *((double *)v36 + 9) = a6;
  *((double *)v36 + 10) = a7;
  v36[11] = v8;
  v36[12] = v9;
  v36[13] = v16;
  *((unsigned char *)v36 + 112) = 1;
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();

  return v16;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, double a7, double a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return 0;
  }
  uint64_t v12 = 0;
  double v13 = (double *)(a1 + 80);
  uint64_t v25 = *(void *)(a1 + 16);
  do
  {
    uint64_t v14 = *((void *)v13 - 6);
    uint64_t v15 = *((void *)v13 - 5);
    char v16 = *((unsigned char *)v13 - 32);
    uint64_t v17 = *((void *)v13 - 3);
    double v19 = *(v13 - 1);
    double v18 = *v13;
    if (v16)
    {
      if ((a4 & 1) == 0) {
        goto LABEL_4;
      }
      int v29 = *((unsigned __int8 *)v13 - 16);
      uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 96);
      outlined copy of Text.Storage(v14, v15, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v14, v15, 1);
      outlined copy of Text.Storage(a2, a3, 1);
      char v20 = v27(a2);
      uint64_t v8 = v25;
      outlined consume of Text.Storage(a2, a3, 1);
      outlined consume of Text.Storage(v14, v15, 1);
      if ((v20 & 1) == 0) {
        goto LABEL_3;
      }
    }
    else
    {
      if (a4) {
        goto LABEL_4;
      }
      int v29 = *((unsigned __int8 *)v13 - 16);
      if (v14 == a2 && v15 == a3)
      {
        outlined copy of Text.Storage(a2, a3, 0);
        swift_bridgeObjectRetain();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of Text.Storage(v14, v15, 0);
        swift_bridgeObjectRetain();
        if ((v22 & 1) == 0) {
          goto LABEL_3;
        }
      }
    }
    if ((specialized static Array<A>.== infix(_:_:)(v17, a5) & 1) == 0 || v19 != a7 || v18 != a8)
    {
LABEL_3:
      outlined consume of Text.Storage(v14, v15, v16);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (v29 == 2)
    {
      outlined consume of Text.Storage(v14, v15, v16);
      swift_bridgeObjectRelease();
      if (a6 == 2) {
        return v12;
      }
    }
    else
    {
      if (a6 == 2) {
        goto LABEL_3;
      }
      outlined consume of Text.Storage(v14, v15, v16);
      swift_bridgeObjectRelease();
      if (((v29 ^ a6) & 1) == 0) {
        return v12;
      }
    }
LABEL_4:
    ++v12;
    v13 += 11;
  }
  while (v8 != v12);
  return 0;
}

void *Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(uint64_t *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v44 = a8;
  int v41 = a7;
  uint64_t v42 = a6;
  uint64_t v13 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = &v40[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for Text.Resolved(0);
  uint64_t v17 = (int *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  double v19 = &v40[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v43 = *a3;
  uint64_t v23 = *a4;
  uint64_t v22 = a4[1];
  Text.Style.init()((uint64_t)v19);
  uint64_t v24 = v17[7];
  *(void *)&v19[v24] = 0;
  uint64_t v25 = v17[8];
  uint64_t v26 = &v19[v17[9]];
  uint64_t v27 = &v19[v17[10]];
  *((_WORD *)v27 + 16) = 0;
  *(_OWORD *)uint64_t v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  uint64_t v28 = MEMORY[0x263F8EE78];
  *((void *)v27 + 5) = MEMORY[0x263F8EE78];
  *((void *)v27 + 6) = v28;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *((void *)v27 + 11) = 0;
  *((_OWORD *)v27 + 6) = xmmword_24619B530;
  *((void *)v27 + 15) = 0;
  *((void *)v27 + 16) = 0;
  *((void *)v27 + 14) = v28;
  v19[v25] = a2;
  char v29 = v41;
  *uint64_t v26 = v23;
  v26[1] = v22;
  uint64_t v30 = v42;
  swift_retain();
  uint64_t v31 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v31, v21, (uint64_t)v15);
  swift_release();
  swift_release();
  if (v29)
  {
    uint64_t v32 = *(uint64_t (**)(uint64_t))(*(void *)a5 + 112);
    uint64_t v33 = swift_retain();
    LOBYTE(v32) = v32(v33);
    outlined consume of Text.Storage(a5, v30, 1);
    if ((v32 & 1) == 0)
    {
      if (one-time initialization token for automatic != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for TypesettingLanguage(0);
      uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static TypesettingLanguage.automatic);
      outlined assign with copy of TypesettingLanguage(v35, (uint64_t)v15, type metadata accessor for TypesettingLanguage);
    }
  }
  uint64_t v36 = type metadata accessor for Text.Style(0);
  outlined assign with copy of TypesettingLanguage((uint64_t)v15, (uint64_t)&v19[*(int *)(v36 + 84)], (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  specialized Text.resolve<A>(into:in:with:)((uint64_t)v19, v20, v21, v43, a5, v30, v29 & 1, v44);
  uint64_t v37 = *(void **)&v19[v24];
  if (v37)
  {
    id v38 = v37;
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)v45);
  }
  else
  {
    uint64_t v46 = 0;
    memset(v45, 0, sizeof(v45));
  }
  outlined destroy of TimelineSchedule?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (void (*)(uint64_t))type metadata accessor for TimelineSchedule);
  outlined destroy of Text.Style((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  outlined destroy of Text.Style((uint64_t)v19, type metadata accessor for Text.Resolved);
  return v37;
}

__n128 ResolvedStyledText.StringDrawing.metrics(in:layoutMargins:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  outlined init with take of EdgeInsets?(a1, (uint64_t)v18);
  double v9 = *(double *)v18;
  double v10 = *(double *)&v18[1];
  double v11 = *(double *)&v18[2];
  double v12 = *(double *)&v18[3];
  outlined init with take of EdgeInsets?(a1, (uint64_t)v19);
  if (v19[32] == 1)
  {
    swift_beginAccess();
    double v9 = v4[21];
    double v10 = v4[22];
    double v11 = v4[23];
    double v12 = v4[24];
  }
  swift_beginAccess();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v13 = static TextDrawingContext.shared;
  swift_retain();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(1, v13, (uint64_t)v16, a3, a4, v9, v10, v11, v12);
  swift_endAccess();
  swift_release();
  long long v14 = v16[3];
  *(_OWORD *)(a2 + 32) = v16[2];
  *(_OWORD *)(a2 + 48) = v14;
  *(_WORD *)(a2 + 64) = v17;
  __n128 result = (__n128)v16[1];
  *(_OWORD *)a2 = v16[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t outlined init with take of EdgeInsets?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for EdgeInsets?, (uint64_t)&type metadata for EdgeInsets, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MoveTransition()
{
  return &type metadata for MoveTransition;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(uint64_t a1)
{
  type metadata accessor for AttachmentTextStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2, 0, 1, MEMORY[0x263F8EE78]);

  return swift_release();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  double v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v16 - v8;
  double v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a1, v10);
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  v11._uint64_t countAndFlagsBits = 16421;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v6, type metadata accessor for LocalizedStringKey.FormatArgument);
  double v12 = *(void *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, v12);
  }
  long long v14 = *(void *)(v12 + 16);
  uint64_t v13 = *(void *)(v12 + 24);
  if (v14 >= v13 >> 1) {
    double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v14 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v1 + 16) = v12;
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v9, type metadata accessor for LocalizedStringKey.FormatArgument);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  double v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v16 - v8;
  double v10 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a1, v10);
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  v11._uint64_t countAndFlagsBits = 16421;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v9, (uint64_t)v6);
  double v12 = *(void *)(v1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, v12);
  }
  long long v14 = *(void *)(v12 + 16);
  uint64_t v13 = *(void *)(v12 + 24);
  if (v14 >= v13 >> 1) {
    double v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v14 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v14);
  *(void *)(v1 + 16) = v12;
  return outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v9);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void v20[2];

  uint64_t v2 = type metadata accessor for Date();
  double v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v20 - v7;
  double v9 = type metadata accessor for DateInterval();
  double v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  long long v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  __int16 v17 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v17(v8, v16, v2);
  v17(v5, &v16[*(int *)(v14 + 44)], v2);
  DateInterval.init(start:end:)();
  outlined destroy of ClosedRange<Date>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for DateTextStorage(0);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v12, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v18, 0, 1, MEMORY[0x263F8EE78]);
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = type metadata accessor for DateInterval();
  double v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  type metadata accessor for DateTextStorage(0);
  double v7 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, v6, v2);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v7, 0, 1, MEMORY[0x263F8EE78]);
  return swift_release();
}

uint64_t type metadata accessor for AttachmentTextStorage()
{
  return self;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  double v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = v16 + 1;
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + 1) = a2;
  a3 &= 1u;
  unsigned char v15[16] = a3;
  *((void *)v15 + 3) = a4;
  *((void *)v15 + 4) = v16;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  outlined copy of Text.Storage(a1, a2, a3);
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = 16421;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v15, (uint64_t)v12, type metadata accessor for LocalizedStringKey.FormatArgument);
  unint64_t v18 = *(void *)(v4 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
  }
  unint64_t v20 = *(void *)(v18 + 16);
  unint64_t v19 = *(void *)(v18 + 24);
  if (v20 >= v19 >> 1) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v18);
  }
  *(void *)(v18 + 16) = v20 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v12, v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v20, type metadata accessor for LocalizedStringKey.FormatArgument);
  *(void *)(v4 + 16) = v18;
  return _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v15, type metadata accessor for LocalizedStringKey.FormatArgument);
}

uint64_t instantiation function for generic protocol witness table for ApplyTransitionModifier<A>.Child(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for CachedView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for kitForegroundColor()
{
  uint64_t result = MEMORY[0x24C522820](0x726F6C6F43534ELL, 0xE700000000000000);
  static NSAttributedStringKey.kitForegroundColor = result;
  return result;
}

ValueMetadata *type metadata accessor for Font.PrivateDesign()
{
  return &type metadata for Font.PrivateDesign;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _InsettableBackgroundShapeModifier<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static _InsettableBackgroundShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

ValueMetadata *type metadata accessor for SystemHoverEffect.Info()
{
  return &type metadata for SystemHoverEffect.Info;
}

ValueMetadata *type metadata accessor for ContentTransition.State()
{
  return &type metadata for ContentTransition.State;
}

ValueMetadata *type metadata accessor for _RotationEffect()
{
  return &type metadata for _RotationEffect;
}

ValueMetadata *type metadata accessor for DisplayList.Options()
{
  return &type metadata for DisplayList.Options;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentalViewChild<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  void (*v34)(_OWORD *__return_ptr, uint64_t);
  uint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  id v39;
  int CurrentAttribute;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(long long *, unint64_t, double);
  void *v52;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  int *v79;
  uint64_t v80;
  char v81;
  int *v82;
  long long v83;
  long long v84;
  uint64_t v85;
  long long v86;
  long long v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;

  uint64_t v71 = type metadata accessor for OSSignpostID();
  unsigned int v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  int v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v10 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v12) {
      double v10 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    uint64_t result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    a1[8] = 1;
    uint64_t v14 = (uint64_t)(a1 + 8);
LABEL_11:
    (*(void (**)(_OWORD *__return_ptr, _DWORD *))(**(void **)a1 + 96))(v89, result);
    uint64_t v4 = a4 + 16;
    outlined init with copy of _AnyAnimatableData?(a4 + 16, (uint64_t)&v83);
    if (!(void)v83)
    {
      outlined destroy of _AnyAnimatableData?((uint64_t)&v83);
      goto LABEL_42;
    }
    uint64_t v86 = v83;
    int v87 = v84;
    uint64_t v16 = v83;
    long long v88 = v85;
    if (*(void *)&v89[0] == (void)v83
      && ((*(uint64_t (**)(char *, char *))(*(void *)&v89[0] + 88))((char *)v89 + 8, (char *)&v86 + 8) & 1) != 0)
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      goto LABEL_42;
    }
    int v69 = a3;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v17 = swift_retain();
    uint64_t v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_26;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v20 = swift_retain();
    char v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if (v21)
    {
      if (one-time initialization token for velocityTracking != -1) {
        swift_once();
      }
      uint64_t v19 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2) {
        goto LABEL_72;
      }
      swift_retain();
      uint64_t v19 = a2;
    }
LABEL_26:
    outlined init with copy of _AnyAnimatableData(v89, &v83);
    uint64_t v22 = v83;
    if ((void)v83 == v16)
    {
      (*(void (**)(char *, char *))(v16 + 104))((char *)&v83 + 8, (char *)&v86 + 8);
    }
    else if (v22 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v83);
      outlined init with copy of _AnyAnimatableData(&v86, &v83);
      (*(void (**)(char *))(v83 + 112))((char *)&v83 + 8);
    }
    double v10 = *(double *)AGGraphGetValue();
    if (!*(void *)(a4 + 56))
    {
      outlined init with copy of _AnyAnimatableData(&v83, &v79);
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v56 = swift_retain();
      id v38 = specialized AnimatorState.init(animation:interval:at:in:)(v56, (uint64_t)&v79, v10);
      swift_retain();
      uint64_t v36 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_69;
      }
      if (one-time initialization token for _signpostLog != -1) {
        goto LABEL_75;
      }
      goto LABEL_65;
    }
    swift_retain();
    LOBYTE(v79) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, (double *)&v83, v10);
    swift_retain();
    int v23 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v24 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v67 = v23;
        uint64_t v68 = v14;
        swift_retain();
        id v25 = v24;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        int v27 = *MEMORY[0x263F288F8];
        if (result == *MEMORY[0x263F288F8])
        {
          __break(1u);
        }
        else
        {
          id v28 = (id)AGGraphGetAttributeGraph();
          uint64_t Counter = AGGraphGetCounter();

          uint64_t v30 = MEMORY[0x263F8DA20];
          *(void *)(v26 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v26 + 64) = v30;
          *(void *)(v26 + 32) = Counter;
          uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
          if (result != v27)
          {
            uint64_t v31 = MEMORY[0x263F8E960];
            *(void *)(v26 + 96) = MEMORY[0x263F8E8F8];
            *(void *)(v26 + 104) = v31;
            *(_DWORD *)(v26 + 72) = result;
            *(void *)(v26 + 136) = MEMORY[0x263F8D310];
            *(void *)(v26 + 144) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v26 + 112) = 0x6570616853796E41;
            *(void *)(v26 + 120) = 0xE800000000000000;
            int v78 = v67;
            long long v82 = &dword_245728000;
            long long v77 = _signpostLog;
            unsigned int v79 = (int *)"AnimationState";
            uint64_t v80 = 14;
            uint64_t v81 = 2;
            unsigned __int8 v74 = "Animation: (%p) [%d] %{public}@ updated";
            unint64_t v75 = 39;
            unint64_t v76 = 2;
            uint64_t v73 = v26;
            uint64_t v32 = v72;
            specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v70 + 8))(v32, v71);
            swift_bridgeObjectRelease();
            uint64_t v14 = v68;
            goto LABEL_39;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        return result;
      }
    }
    swift_release_n();
LABEL_39:
    if (!*(void *)(a4 + 56)) {
      goto LABEL_71;
    }
    goto LABEL_40;
  }
  uint64_t v14 = (uint64_t)(a1 + 8);
  if (a1[8] == 1) {
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a4 + 56);
  if (v15)
  {
    while (1)
    {
      uint64_t v34 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)a1 + 96);
      uint64_t v35 = swift_retain();
      v34(v89, v35);
      LOBYTE(v86) = 0;
      if ((specialized AnimatorState.update(_:at:environment:)(v89, a3, v10) & 1) == 0) {
        break;
      }
      swift_retain();
      uint64_t v36 = static os_signpost_type_t.end.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_55;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v37 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_55:
        uint64_t v47 = swift_release();
        if (*(void *)(a4 + 56))
        {
LABEL_56:
          specialized AnimatorState.removeListeners()(v47);
          swift_release();
        }
LABEL_57:
        *(void *)(a4 + 56) = 0;
        goto LABEL_58;
      }
      id v38 = v14;
      swift_retain();
      unint64_t v39 = v37;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_2461BE2B0;
      Currentint Attribute = AGGraphGetCurrentAttribute();
      int v41 = *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8])
      {
        __break(1u);
      }
      else
      {
        uint64_t v42 = (id)AGGraphGetAttributeGraph();
        uint64_t v4 = AGGraphGetCounter();

        uint64_t v43 = MEMORY[0x263F8DA20];
        *(void *)(v14 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v14 + 64) = v43;
        *(void *)(v14 + 32) = v4;
        uint64_t v44 = AGGraphGetCurrentAttribute();
        if (v44 != v41)
        {
          uint64_t v45 = MEMORY[0x263F8E960];
          *(void *)(v14 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v14 + 104) = v45;
          *(_DWORD *)(v14 + 72) = v44;
          *(void *)(v14 + 136) = MEMORY[0x263F8D310];
          *(void *)(v14 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v14 + 112) = 0x6570616853796E41;
          *(void *)(v14 + 120) = 0xE800000000000000;
          LOBYTE(v77) = v36;
          unsigned int v79 = &dword_245728000;
          unsigned __int8 v74 = (const char *)_signpostLog;
          *(void *)&uint64_t v86 = "AnimationState";
          *((void *)&v86 + 1) = 14;
          LOBYTE(v87) = 2;
          *(void *)&long long v83 = "Animation: (%p) [%d] %{public}@ ended";
          *((void *)&v83 + 1) = 37;
          LOBYTE(v84) = 2;
          long long v82 = (int *)v14;
          uint64_t v46 = v72;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
          uint64_t v47 = swift_bridgeObjectRelease();
          uint64_t v14 = v38;
          if (*(void *)(a4 + 56)) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
      }
      __break(1u);
LABEL_75:
      swift_once();
LABEL_65:
      uint64_t v57 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v67 = v36;
        uint64_t v68 = v14;
        swift_retain();
        uint64_t v58 = v57;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        char v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        long long v60 = *MEMORY[0x263F288F8];
        if (result == *MEMORY[0x263F288F8]) {
          goto LABEL_78;
        }
        long long v61 = (id)AGGraphGetAttributeGraph();
        int v62 = AGGraphGetCounter();

        uint64_t v63 = MEMORY[0x263F8DA20];
        *(void *)(v59 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v59 + 64) = v63;
        *(void *)(v59 + 32) = v62;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        if (result == v60) {
          goto LABEL_79;
        }
        int v64 = MEMORY[0x263F8E960];
        *(void *)(v59 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v59 + 104) = v64;
        *(_DWORD *)(v59 + 72) = result;
        *(void *)(v59 + 136) = MEMORY[0x263F8D310];
        *(void *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v59 + 112) = 0x6570616853796E41;
        *(void *)(v59 + 120) = 0xE800000000000000;
        int v78 = v67;
        long long v82 = &dword_245728000;
        long long v77 = _signpostLog;
        unsigned int v79 = (int *)"AnimationState";
        uint64_t v80 = 14;
        uint64_t v81 = 2;
        unsigned __int8 v74 = "Animation: (%p) [%d] %{public}@ started";
        unint64_t v75 = 39;
        unint64_t v76 = 2;
        uint64_t v73 = v59;
        uint64_t v65 = v72;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v71);
        swift_bridgeObjectRelease();
        uint64_t v14 = v68;
      }
      else
      {
LABEL_69:
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 56) = v38;
      if (v38)
      {
LABEL_40:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of _AnyAnimatableData((uint64_t)&v83);
        outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      }
      else
      {
LABEL_71:
        __break(1u);
LABEL_72:
        outlined destroy of _AnyAnimatableData((uint64_t)&v86);
        swift_release();
      }
      a3 = v69;
LABEL_42:
      uint64_t result = (_DWORD *)outlined destroy of _AnyAnimatableData?(v4);
      long long v33 = v89[1];
      *(_OWORD *)uint64_t v4 = v89[0];
      *(_OWORD *)(v4 + 16) = v33;
      *(void *)(v4 + 32) = v90;
      uint64_t v15 = *(void *)(a4 + 56);
      if (!v15) {
        return result;
      }
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    long long v48 = *(double *)(v15 + 80);
    *(void *)&uint64_t v86 = *(void *)(v15 + 88);
    uint64_t v49 = *(unsigned int *)(v15 + 136);
    char v50 = *(unsigned char *)(v15 + 140);
    uint64_t v51 = *(void (**)(long long *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
    char v52 = static CoreGlue.shared;
    LOBYTE(v83) = v50;
    v51(&v86, v49 | ((unint64_t)v50 << 32), v48);

LABEL_58:
    outlined init with copy of _AnyAnimatableData(v89, &v86);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = *(void *)a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(&v86, &v83);
      (*(void (**)(long long *))(*(void *)v54 + 104))(&v83);
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
    }
    else
    {
      uint64_t v55 = (*(uint64_t (**)(long long *))(*(void *)v54 + 120))(&v86);
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      *(void *)a1 = v55;
      swift_release();
    }
    swift_release();
    uint64_t result = (_DWORD *)outlined destroy of _AnyAnimatableData((uint64_t)v89);
    *(unsigned char *)uint64_t v14 = 1;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v9;
  double v10;
  double *Value;
  char v12;
  _DWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void *v24;
  id v25;
  uint64_t v26;
  int v27;
  id v28;
  uint64_t Counter;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  long long v33;
  void (*v34)(_OWORD *__return_ptr, uint64_t);
  uint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  id v39;
  int CurrentAttribute;
  int v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  unsigned __int8 v50;
  void (*v51)(long long *, unint64_t, double);
  void *v52;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  int *v79;
  uint64_t v80;
  char v81;
  int *v82;
  long long v83;
  long long v84;
  uint64_t v85;
  long long v86;
  long long v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;

  uint64_t v71 = type metadata accessor for OSSignpostID();
  unsigned int v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  int v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v10 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v12) {
      double v10 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    uint64_t result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    a1[8] = 1;
    uint64_t v14 = (uint64_t)(a1 + 8);
LABEL_11:
    (*(void (**)(_OWORD *__return_ptr, _DWORD *))(**(void **)a1 + 144))(v89, result);
    uint64_t v4 = a4 + 16;
    outlined init with copy of _AnyAnimatableData?(a4 + 16, (uint64_t)&v83);
    if (!(void)v83)
    {
      outlined destroy of _AnyAnimatableData?((uint64_t)&v83);
      goto LABEL_42;
    }
    uint64_t v86 = v83;
    int v87 = v84;
    uint64_t v16 = v83;
    long long v88 = v85;
    if (*(void *)&v89[0] == (void)v83
      && ((*(uint64_t (**)(char *, char *))(*(void *)&v89[0] + 88))((char *)v89 + 8, (char *)&v86 + 8) & 1) != 0)
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      goto LABEL_42;
    }
    int v69 = a3;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v17 = swift_retain();
    uint64_t v18 = specialized find<A>(_:key:)(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      swift_retain();
      swift_release();
      if (v19) {
        goto LABEL_26;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v20 = swift_retain();
    char v21 = specialized closure #1 in PropertyList.subscript.getter(v20);
    swift_release();
    if (v21)
    {
      if (one-time initialization token for velocityTracking != -1) {
        swift_once();
      }
      uint64_t v19 = static Animation.velocityTracking;
      swift_retain();
    }
    else
    {
      if (!a2) {
        goto LABEL_72;
      }
      swift_retain();
      uint64_t v19 = a2;
    }
LABEL_26:
    outlined init with copy of _AnyAnimatableData(v89, &v83);
    uint64_t v22 = v83;
    if ((void)v83 == v16)
    {
      (*(void (**)(char *, char *))(v16 + 104))((char *)&v83 + 8, (char *)&v86 + 8);
    }
    else if (v22 == type metadata accessor for ZeroVTable())
    {
      outlined destroy of _AnyAnimatableData((uint64_t)&v83);
      outlined init with copy of _AnyAnimatableData(&v86, &v83);
      (*(void (**)(char *))(v83 + 112))((char *)&v83 + 8);
    }
    double v10 = *(double *)AGGraphGetValue();
    if (!*(void *)(a4 + 56))
    {
      outlined init with copy of _AnyAnimatableData(&v83, &v79);
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<_AnyAnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData, (uint64_t)&type metadata for _AnyAnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v56 = swift_retain();
      id v38 = specialized AnimatorState.init(animation:interval:at:in:)(v56, (uint64_t)&v79, v10);
      swift_retain();
      uint64_t v36 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_69;
      }
      if (one-time initialization token for _signpostLog != -1) {
        goto LABEL_75;
      }
      goto LABEL_65;
    }
    swift_retain();
    LOBYTE(v79) = 0;
    specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v19, (double *)&v83, v10);
    swift_retain();
    int v23 = static os_signpost_type_t.event.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v24 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v67 = v23;
        uint64_t v68 = v14;
        swift_retain();
        id v25 = v24;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        int v27 = *MEMORY[0x263F288F8];
        if (result == *MEMORY[0x263F288F8])
        {
          __break(1u);
        }
        else
        {
          id v28 = (id)AGGraphGetAttributeGraph();
          uint64_t Counter = AGGraphGetCounter();

          uint64_t v30 = MEMORY[0x263F8DA20];
          *(void *)(v26 + 56) = MEMORY[0x263F8D9D0];
          *(void *)(v26 + 64) = v30;
          *(void *)(v26 + 32) = Counter;
          uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
          if (result != v27)
          {
            uint64_t v31 = MEMORY[0x263F8E960];
            *(void *)(v26 + 96) = MEMORY[0x263F8E8F8];
            *(void *)(v26 + 104) = v31;
            *(_DWORD *)(v26 + 72) = result;
            *(void *)(v26 + 136) = MEMORY[0x263F8D310];
            *(void *)(v26 + 144) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v26 + 112) = 0x756F79614C796E41;
            *(void *)(v26 + 120) = 0xE900000000000074;
            int v78 = v67;
            long long v82 = &dword_245728000;
            long long v77 = _signpostLog;
            unsigned int v79 = (int *)"AnimationState";
            uint64_t v80 = 14;
            uint64_t v81 = 2;
            unsigned __int8 v74 = "Animation: (%p) [%d] %{public}@ updated";
            unint64_t v75 = 39;
            unint64_t v76 = 2;
            uint64_t v73 = v26;
            uint64_t v32 = v72;
            specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v70 + 8))(v32, v71);
            swift_bridgeObjectRelease();
            uint64_t v14 = v68;
            goto LABEL_39;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        return result;
      }
    }
    swift_release_n();
LABEL_39:
    if (!*(void *)(a4 + 56)) {
      goto LABEL_71;
    }
    goto LABEL_40;
  }
  uint64_t v14 = (uint64_t)(a1 + 8);
  if (a1[8] == 1) {
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a4 + 56);
  if (v15)
  {
    while (1)
    {
      uint64_t v34 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(void **)a1 + 144);
      uint64_t v35 = swift_retain();
      v34(v89, v35);
      LOBYTE(v86) = 0;
      if ((specialized AnimatorState.update(_:at:environment:)(v89, a3, v10) & 1) == 0) {
        break;
      }
      swift_retain();
      uint64_t v36 = static os_signpost_type_t.end.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_55;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v37 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
LABEL_55:
        uint64_t v47 = swift_release();
        if (*(void *)(a4 + 56))
        {
LABEL_56:
          specialized AnimatorState.removeListeners()(v47);
          swift_release();
        }
LABEL_57:
        *(void *)(a4 + 56) = 0;
        goto LABEL_58;
      }
      id v38 = v14;
      swift_retain();
      unint64_t v39 = v37;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_2461BE2B0;
      Currentint Attribute = AGGraphGetCurrentAttribute();
      int v41 = *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8])
      {
        __break(1u);
      }
      else
      {
        uint64_t v42 = (id)AGGraphGetAttributeGraph();
        uint64_t v4 = AGGraphGetCounter();

        uint64_t v43 = MEMORY[0x263F8DA20];
        *(void *)(v14 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v14 + 64) = v43;
        *(void *)(v14 + 32) = v4;
        uint64_t v44 = AGGraphGetCurrentAttribute();
        if (v44 != v41)
        {
          uint64_t v45 = MEMORY[0x263F8E960];
          *(void *)(v14 + 96) = MEMORY[0x263F8E8F8];
          *(void *)(v14 + 104) = v45;
          *(_DWORD *)(v14 + 72) = v44;
          *(void *)(v14 + 136) = MEMORY[0x263F8D310];
          *(void *)(v14 + 144) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v14 + 112) = 0x756F79614C796E41;
          *(void *)(v14 + 120) = 0xE900000000000074;
          LOBYTE(v77) = v36;
          unsigned int v79 = &dword_245728000;
          unsigned __int8 v74 = (const char *)_signpostLog;
          *(void *)&uint64_t v86 = "AnimationState";
          *((void *)&v86 + 1) = 14;
          LOBYTE(v87) = 2;
          *(void *)&long long v83 = "Animation: (%p) [%d] %{public}@ ended";
          *((void *)&v83 + 1) = 37;
          LOBYTE(v84) = 2;
          long long v82 = (int *)v14;
          uint64_t v46 = v72;
          specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
          swift_release();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
          uint64_t v47 = swift_bridgeObjectRelease();
          uint64_t v14 = v38;
          if (*(void *)(a4 + 56)) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
      }
      __break(1u);
LABEL_75:
      swift_once();
LABEL_65:
      uint64_t v57 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v67 = v36;
        uint64_t v68 = v14;
        swift_retain();
        uint64_t v58 = v57;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        char v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_2461BE2B0;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        long long v60 = *MEMORY[0x263F288F8];
        if (result == *MEMORY[0x263F288F8]) {
          goto LABEL_78;
        }
        long long v61 = (id)AGGraphGetAttributeGraph();
        int v62 = AGGraphGetCounter();

        uint64_t v63 = MEMORY[0x263F8DA20];
        *(void *)(v59 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v59 + 64) = v63;
        *(void *)(v59 + 32) = v62;
        uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
        if (result == v60) {
          goto LABEL_79;
        }
        int v64 = MEMORY[0x263F8E960];
        *(void *)(v59 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v59 + 104) = v64;
        *(_DWORD *)(v59 + 72) = result;
        *(void *)(v59 + 136) = MEMORY[0x263F8D310];
        *(void *)(v59 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v59 + 112) = 0x756F79614C796E41;
        *(void *)(v59 + 120) = 0xE900000000000074;
        int v78 = v67;
        long long v82 = &dword_245728000;
        long long v77 = _signpostLog;
        unsigned int v79 = (int *)"AnimationState";
        uint64_t v80 = 14;
        uint64_t v81 = 2;
        unsigned __int8 v74 = "Animation: (%p) [%d] %{public}@ started";
        unint64_t v75 = 39;
        unint64_t v76 = 2;
        uint64_t v73 = v59;
        uint64_t v65 = v72;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v71);
        swift_bridgeObjectRelease();
        uint64_t v14 = v68;
      }
      else
      {
LABEL_69:
        swift_release();
      }
      swift_release();
      *(void *)(a4 + 56) = v38;
      if (v38)
      {
LABEL_40:
        swift_retain();
        specialized AnimatorState.addListeners(transaction:)();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of _AnyAnimatableData((uint64_t)&v83);
        outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      }
      else
      {
LABEL_71:
        __break(1u);
LABEL_72:
        outlined destroy of _AnyAnimatableData((uint64_t)&v86);
        swift_release();
      }
      a3 = v69;
LABEL_42:
      uint64_t result = (_DWORD *)outlined destroy of _AnyAnimatableData?(v4);
      long long v33 = v89[1];
      *(_OWORD *)uint64_t v4 = v89[0];
      *(_OWORD *)(v4 + 16) = v33;
      *(void *)(v4 + 32) = v90;
      uint64_t v15 = *(void *)(a4 + 56);
      if (!v15) {
        return result;
      }
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    long long v48 = *(double *)(v15 + 80);
    *(void *)&uint64_t v86 = *(void *)(v15 + 88);
    uint64_t v49 = *(unsigned int *)(v15 + 136);
    char v50 = *(unsigned char *)(v15 + 140);
    uint64_t v51 = *(void (**)(long long *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
    char v52 = static CoreGlue.shared;
    LOBYTE(v83) = v50;
    v51(&v86, v49 | ((unint64_t)v50 << 32), v48);

LABEL_58:
    outlined init with copy of _AnyAnimatableData(v89, &v86);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v54 = *(void *)a1;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(&v86, &v83);
      (*(void (**)(long long *))(*(void *)v54 + 152))(&v83);
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
    }
    else
    {
      uint64_t v55 = (*(uint64_t (**)(long long *))(*(void *)v54 + 168))(&v86);
      outlined destroy of _AnyAnimatableData((uint64_t)&v86);
      *(void *)a1 = v55;
      swift_release();
    }
    swift_release();
    uint64_t result = (_DWORD *)outlined destroy of _AnyAnimatableData((uint64_t)v89);
    *(unsigned char *)uint64_t v14 = 1;
  }
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(uint64_t *, void, uint64_t, uint64_t))
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)AGGraphGetValue();
  char v8 = v4 & 1;
  uint64_t v5 = *(unsigned int *)(v2 + 4);
  swift_retain();
  a2(&v7, 0, v5, v2 + 8);
  if ((v8 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_release();
  }
  else
  {
    return swift_release();
  }
}

{
  uint64_t v2;
  uint64_t Value;
  char v5;
  long long v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  long long v12;
  long long v13;
  char v14;
  uint64_t v15;
  uint64_t vars8;

  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(unsigned char *)(Value + 8);
  double v10 = *(void *)Value;
  uint64_t v11 = v5;
  unint64_t v6 = *(_OWORD *)(Value + 32);
  char v12 = *(_OWORD *)(Value + 16);
  uint64_t v13 = v6;
  uint64_t v14 = v7 & 1;
  char v8 = *(unsigned int *)(v2 + 4);
  swift_bridgeObjectRetain();
  a2(&v10, 0, v8, v2 + 8);
  if ((v14 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined destroy of _AnyAnimatableData?(uint64_t a1)
{
  type metadata accessor for AtomicBuffer<TrackerData>(0, &lazy cache variable for type metadata for _AnyAnimatableData?, (uint64_t)&type metadata for _AnyAnimatableData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for _AnyAnimatableData(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

uint64_t outlined init with copy of _AnyAnimatableData?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for _AnyAnimatableData?, (uint64_t)&type metadata for _AnyAnimatableData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *_AnyLayoutBox.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 184);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  char v8 = (char *)&v11 - v7;
  uint64_t v9 = (uint64_t)v2 + *(void *)(v4 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return _AnyAnimatableData.init<A>(_:)((uint64_t)v8, v5, *(void *)(*(void *)(v4 + 192) + 8), a2);
}

_OWORD *_AnyAnimatableData.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for VTable();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v11);
  v9(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(void *)a4 = v8;
  return outlined init with take of Any(&v11, (_OWORD *)(a4 + 8));
}

uint64_t type metadata accessor for VTable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static VTable.isEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  double v10 = &v14[-v9];
  outlined init with copy of Any(a1, (uint64_t)v15);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v14);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v12 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v12(v7, AssociatedTypeWitness);
  v12(v10, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t outlined destroy of _AnyAnimatableData(uint64_t a1)
{
  return a1;
}

_OWORD *_AnyShapeBox.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 136);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = (uint64_t)v2 + *(void *)(v4 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  return _AnyAnimatableData.init<A>(_:)((uint64_t)v8, v5, *(void *)(*(void *)(v4 + 144) + 8), a2);
}

__n128 protocol witness for Animatable.animatableData.getter in conformance ViewFrame@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

void *GeometryProxy.asCurrent<A>(do:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(v3 + 48);
  _threadGeometryProxyData();
  long long v8 = *(_OWORD *)(v3 + 16);
  v12[0] = *(_OWORD *)v3;
  v12[1] = v8;
  _OWORD v12[2] = *(_OWORD *)(v3 + 32);
  int v13 = v7;
  uint64_t v15 = a3;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  unint64_t v9 = type metadata accessor for Error();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in GeometryProxy.asCurrent<A>(do:), (uint64_t)v14, (uint64_t)&type metadata for GeometryProxy, v9, a3, MEMORY[0x263F8E4E0], (uint64_t)&v11);
  return _setThreadGeometryProxyData();
}

uint64_t EnvironmentValues.isVisionEnabled.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsVisionEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for AnimatorAttribute()
{
  uint64_t result = type metadata accessor for KeyframeTrackState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for KeyframeTrackState.RepeatingState()
{
  uint64_t result = type metadata accessor for KeyframeTimeline();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for KeyframeTrackState()
{
  uint64_t result = type metadata accessor for KeyframeTrackState.RepeatingState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = type metadata accessor for KeyframeAnimator();
  return (*(uint64_t (**)(uint64_t))(a1 + *(int *)(v4 + 68)))(v3);
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[11], v2[12], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10]);
}

uint64_t partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void, void))closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:));
}

uint64_t closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v25 - v19;
  uint64_t v22 = PlaceholderContentView.init()(v21, v18);
  a2(v22, a1);
  static ViewBuilder.buildExpression<A>(_:)(v16, a7, a11);
  int v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v16, a7);
  static ViewBuilder.buildExpression<A>(_:)(v20, a7, a11);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, a7);
}

double static CustomModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, double *a9@<X8>)
{
  void (*v27)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unint64_t v39;
  int v43;
  int v44;
  uint64_t v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  long long v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  uint64_t v90;
  int v91;
  uint64_t v92;

  unint64_t v92 = *MEMORY[0x263EF8340];
  id v38 = *a1;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  uint64_t v16 = a2[5];
  uint64_t v15 = a2[6];
  int v17 = *((_DWORD *)a2 + 20);
  long long v83 = *a2;
  unsigned int v85 = v14;
  uint64_t v86 = *(_OWORD *)(a2 + 3);
  int v87 = v16;
  long long v88 = v15;
  uint64_t v89 = *(_OWORD *)(a2 + 7);
  unsigned __int8 v90 = a2[9];
  int v84 = v13;
  unint64_t v91 = v17;
  uint64_t v18 = type metadata accessor for PlaceholderContentView();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v18, a3, a4);
  long long v48 = a5;
  uint64_t v49 = a6;
  char v50 = a7;
  uint64_t v51 = a8;
  LODWORD(v52) = v38;
  uint64_t v68 = a5;
  int v69 = a6;
  unsigned int v70 = a7;
  uint64_t v71 = a8;
  unint64_t v39 = a8;
  type metadata accessor for CustomModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), a6, &v47);
  uint64_t v43 = v47;
  uint64_t v19 = v83;
  uint64_t v20 = v85;
  uint64_t v36 = v86;
  uint64_t v34 = v84;
  uint64_t v35 = DWORD1(v86);
  int v21 = HIDWORD(v86);
  uint64_t v37 = DWORD2(v86);
  uint64_t v22 = v87;
  uint64_t v23 = v88;
  int v24 = v89;
  int v25 = DWORD2(v89);
  uint64_t v32 = HIDWORD(v89);
  long long v33 = DWORD1(v89);
  uint64_t v30 = HIDWORD(v90);
  uint64_t v31 = v90;
  char v29 = v91;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v68 = v19;
  unsigned int v70 = v20;
  LODWORD(v69) = v34;
  uint64_t v71 = __PAIR64__(v35, v36);
  uint64_t v73 = v21;
  unsigned __int8 v74 = v22;
  unint64_t v75 = v23;
  unint64_t v76 = v24;
  long long v77 = v33;
  int v78 = v25;
  unsigned int v79 = v32;
  uint64_t v80 = v31;
  uint64_t v81 = v30;
  long long v82 = v29;
  uint64_t v44 = v43;
  char v52 = v19;
  long long v53 = v34;
  unint64_t v54 = v20;
  uint64_t v55 = v36;
  uint64_t v56 = v35;
  uint64_t v57 = 0;
  uint64_t v58 = v21;
  char v59 = v22;
  long long v60 = v23;
  long long v61 = v24;
  int v62 = v33;
  uint64_t v63 = v25;
  int v64 = v32;
  uint64_t v65 = v31;
  unsigned int v66 = v30;
  uint64_t v67 = v29;
  int v27 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v39 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(&v45, &v44, &v52);
  int v72 = v37;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v45, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  *(void *)a9 = v45;
  uint64_t result = v46;
  a9[1] = v46;
  return result;
}

{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int ShouldRecordTree;
  void (*v27)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unint64_t v39;
  int v43;
  int v44;
  uint64_t v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  long long v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  uint64_t v90;
  int v91;
  uint64_t v92;

  unint64_t v92 = *MEMORY[0x263EF8340];
  id v38 = *a1;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  uint64_t v16 = a2[5];
  uint64_t v15 = a2[6];
  int v17 = *((_DWORD *)a2 + 20);
  long long v83 = *a2;
  unsigned int v85 = v14;
  uint64_t v86 = *(_OWORD *)(a2 + 3);
  int v87 = v16;
  long long v88 = v15;
  uint64_t v89 = *(_OWORD *)(a2 + 7);
  unsigned __int8 v90 = a2[9];
  int v84 = v13;
  unint64_t v91 = v17;
  uint64_t v18 = type metadata accessor for PlaceholderContentView();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v18, a3, a4);
  long long v48 = a5;
  uint64_t v49 = a6;
  char v50 = a7;
  uint64_t v51 = a8;
  LODWORD(v52) = v38;
  uint64_t v68 = a5;
  int v69 = a6;
  unsigned int v70 = a7;
  uint64_t v71 = a8;
  unint64_t v39 = a8;
  type metadata accessor for CustomModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), a6, &v47);
  uint64_t v43 = v47;
  uint64_t v19 = v83;
  uint64_t v20 = v85;
  uint64_t v36 = v86;
  uint64_t v34 = v84;
  uint64_t v35 = DWORD1(v86);
  int v21 = HIDWORD(v86);
  uint64_t v37 = DWORD2(v86);
  uint64_t v22 = v87;
  uint64_t v23 = v88;
  int v24 = v89;
  int v25 = DWORD2(v89);
  uint64_t v32 = HIDWORD(v89);
  long long v33 = DWORD1(v89);
  uint64_t v30 = HIDWORD(v90);
  uint64_t v31 = v90;
  char v29 = v91;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v68 = v19;
  unsigned int v70 = v20;
  LODWORD(v69) = v34;
  uint64_t v71 = __PAIR64__(v35, v36);
  uint64_t v73 = v21;
  unsigned __int8 v74 = v22;
  unint64_t v75 = v23;
  unint64_t v76 = v24;
  long long v77 = v33;
  int v78 = v25;
  unsigned int v79 = v32;
  uint64_t v80 = v31;
  uint64_t v81 = v30;
  long long v82 = v29;
  uint64_t v44 = v43;
  char v52 = v19;
  long long v53 = v34;
  unint64_t v54 = v20;
  uint64_t v55 = v36;
  uint64_t v56 = v35;
  uint64_t v57 = 0;
  uint64_t v58 = v21;
  char v59 = v22;
  long long v60 = v23;
  long long v61 = v24;
  int v62 = v33;
  uint64_t v63 = v25;
  int v64 = v32;
  uint64_t v65 = v31;
  unsigned int v66 = v30;
  uint64_t v67 = v29;
  int v27 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v39 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(&v45, &v44, &v52);
  int v72 = v37;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v45, (uint64_t)&v68);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  *(void *)a9 = v45;
  uint64_t result = v46;
  a9[1] = v46;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance KeyframeAnimator<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  return static KeyframeAnimator._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a4);
}

uint64_t closure #1 in static CustomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  void v10[2] = type metadata accessor for CustomModifier();
  void v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v30 = a9;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  v23[0] = a14;
  v23[1] = a10;
  uint64_t v35 = a15;
  uint64_t v31 = a7;
  uint64_t v32 = type metadata accessor for KeyframeAnimator();
  uint64_t v33 = a13;
  uint64_t v34 = &protocol witness table for KeyframeAnimator<A, B, C>;
  uint64_t v18 = type metadata accessor for CustomModifier();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  int v21 = (char *)v23 - v20;
  closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)(v24, v25, v26, v27, v28, v29, v31, a8, (uint64_t)v23 - v20, a10, a11, a12, a13, a14, a15, a16);
  View.modifier<A>(_:)(v21, a7, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t AnimatorAttribute.updateValue()(void *a1)
{
  v133[5] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v108 = (char *)&v102 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v109 = (char *)&v102 - v10;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v104 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v105 = (uint64_t)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v102 - v14;
  uint64_t v16 = a1[4];
  uint64_t v122 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v17);
  unsigned int v120 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v107 = (char *)&v102 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v115 = (char *)&v102 - v22;
  uint64_t v24 = a1[2];
  uint64_t v23 = (void *)a1[3];
  uint64_t v25 = a1[5];
  long long v127 = (uint64_t *)type metadata accessor for KeyframeTrackState();
  uint64_t v114 = *(v127 - 1);
  MEMORY[0x270FA5388](v127);
  uint64_t v110 = (char *)&v102 - v26;
  uint64_t v129 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v123 = (uint64_t)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  unsigned __int8 v119 = (char *)&v102 - v30;
  unsigned int v130 = a1;
  uint64_t v31 = a1[6];
  v133[0] = v24;
  v133[1] = (uint64_t)v23;
  long long v125 = v23;
  v133[2] = v16;
  v133[3] = v25;
  uint64_t v124 = v31;
  v133[4] = v31;
  uint64_t v118 = type metadata accessor for KeyframeAnimator();
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118);
  uint64_t v103 = (uint64_t)&v102 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v116 = (uint64_t)&v102 - v34;
  int v35 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v131 = v1;
  if (v35 != *(_DWORD *)(v1 + 16))
  {
    uint64_t v36 = v131;
    *(_DWORD *)(v131 + 16) = v35;
    (*(void (**)(uint64_t, uint64_t *))(v114 + 8))(v36 + *((int *)v130 + 19), v127);
    swift_storeEnumTagMultiPayload();
  }
  unsigned __int8 v121 = v15;
  uint64_t v112 = v3;
  AGGraphClearUpdate();
  uint64_t v111 = v25;
  closure #1 in AnimatorAttribute.updateValue()(v131, v24, (uint64_t)v125, v16, v25, v124, v133);
  AGGraphSetUpdate();
  uint64_t v37 = v133[0];
  uint64_t v38 = *(void *)AGGraphGetValue();
  long long v126 = v4;
  uint64_t v128 = v24;
  uint64_t v106 = v38;
  uint64_t v113 = v16;
  if (v39)
  {
    outlined copy of _SymbolEffect.Trigger(v38);
    uint64_t v42 = v129;
    goto LABEL_7;
  }
  outlined copy of _SymbolEffect.Trigger(v38);
  uint64_t v40 = v127;
  BOOL v41 = KeyframeTrackState.isInitial.getter((uint64_t)v127);
  uint64_t v42 = v129;
  if (v41)
  {
LABEL_7:
    v133[0] = v38;
    uint64_t v132 = v37;
    uint64_t v43 = v116;
    AnimatorAttribute.view.getter(v116);
    uint64_t v44 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v119, v43, v24);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    uint64_t v46 = v118;
    v45(v43, v118);
    uint64_t v47 = v103;
    AnimatorAttribute.view.getter(v103);
    long long v48 = (uint64_t *)(v47 + *(int *)(v46 + 60));
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    swift_retain();
    v45(v47, v46);
    uint64_t v51 = v128;
    uint64_t v42 = v129;
    uint64_t v40 = v127;
    KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(v133, (uint64_t)&v132, (uint64_t (*)(void, void, void))v44, v50, v49, v127);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v51);
    swift_release();
  }
  uint64_t v52 = v131 + *((int *)v130 + 19);
  if (KeyframeTrackState.isAnimating.getter((uint64_t)v40))
  {
    v133[0] = *(void *)AGGraphGetValue();
    KeyframeTrackState.updateAnimation(time:)((double *)v133, (uint64_t)v40);
    uint64_t v53 = specialized static ViewGraph.current.getter();
    double v54 = *(double *)AGGraphGetValue() + 0.00833333333;
    swift_beginAccess();
    double v55 = *(double *)(v53 + 376);
    if (v54 < v55) {
      double v55 = v54;
    }
    *(double *)(v53 + 376) = v55;
    uint64_t v40 = v127;
    swift_release();
  }
  uint64_t v56 = v114;
  uint64_t v57 = v110;
  (*(void (**)(char *, uint64_t, uint64_t *))(v114 + 16))(v110, v52, v40);
  v133[0] = v37;
  uint64_t v58 = v116;
  uint64_t v59 = v131;
  AnimatorAttribute.view.getter(v116);
  uint64_t v60 = (uint64_t)v119;
  uint64_t v61 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v119, v58, v128);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v58, v118);
  uint64_t v62 = v123;
  KeyframeTrackState.value(at:initialValue:)((double *)v133, v60, (uint64_t)v40, v123);
  uint64_t v63 = (uint64_t)v40;
  unsigned int v66 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  uint64_t v65 = v42 + 8;
  uint64_t v64 = (uint64_t)v66;
  v66(v60, v61);
  uint64_t v67 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v63);
  MEMORY[0x270FA5388](v67);
  uint64_t v68 = (uint64_t)v125;
  *(&v102 - 8) = v61;
  *(&v102 - 7) = v68;
  uint64_t v69 = v113;
  uint64_t v70 = v111;
  *(&v102 - 6) = v113;
  *(&v102 - 5) = v70;
  *(&v102 - 4) = v124;
  *(&v102 - 3) = v59;
  *(&v102 - 2) = v62;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v63 = CurrentAttribute;
    long long v127 = &v102;
    uint64_t v131 = v64;
    uint64_t v129 = v65;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  swift_beginAccess();
  long long v125 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  int v72 = v126;
  uint64_t v73 = (uint64_t)v121;
  uint64_t v74 = v112;
  uint64_t v75 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v126[7])(v121, 1, 1, v112);
  MEMORY[0x270FA5388](v75);
  *(&v102 - 4) = v69;
  *(&v102 - 3) = (uint64_t)partial apply for closure #2 in AnimatorAttribute.updateValue();
  *(&v102 - 2) = (uint64_t)(&v102 - 10);
  unint64_t v76 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v73, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v102 - 6), v104, v76, v69, MEMORY[0x263F8E4E0], (uint64_t)&v132);
  uint64_t v77 = v105;
  outlined init with copy of ObservationTracking._AccessList?(v73, v105);
  int v78 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v72[6])(v77, 1, v74);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  uint64_t v80 = (uint64_t)v115;
  if (v78 == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v77);
  }
  else
  {
    uint64_t v81 = (void (*)(char *, uint64_t, uint64_t))v72[4];
    long long v82 = v109;
    v81(v109, v77, v74);
    ((void (*)(char *, char *, uint64_t))v72[2])(v108, v82, v74);
    swift_beginAccess();
    long long v83 = static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v83;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v83 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v83 + 2) + 1, 1, (unint64_t)v83);
      static ObservationRegistrar.lastestAccessLists = v83;
    }
    unint64_t v86 = *((void *)v83 + 2);
    unint64_t v85 = *((void *)v83 + 3);
    if (v86 >= v85 >> 1)
    {
      long long v83 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, (unint64_t)v83);
      static ObservationRegistrar.lastestAccessLists = v83;
    }
    *((void *)v83 + 2) = v86 + 1;
    int v87 = v126;
    unint64_t v88 = (unint64_t)v83
        + ((*((unsigned __int8 *)v87 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v87 + 80))
        + v126[9] * v86;
    uint64_t v74 = v112;
    v81((char *)v88, (uint64_t)v108, v112);
    swift_endAccess();
    ((void (*)(char *, uint64_t))v87[1])(v109, v74);
    uint64_t v69 = v113;
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v122 + 32);
  unsigned __int8 v90 = v107;
  v89(v107, v120, v69);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v121);
  v89((char *)v80, v90, v69);
  unint64_t v91 = p_cache[338];
  uint64_t v92 = v91[2];
  if (v92)
  {
    uint64_t v124 = 0;
    uint64_t v93 = v69;
    uint64_t v94 = v74;
    uint64_t v95 = (void (*)(char *, char *, uint64_t))v126[2];
    uint64_t v96 = (char *)v91 + ((*((unsigned __int8 *)v126 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v126 + 80));
    uint64_t v97 = v126[9];
    unsigned int v98 = (void (**)(char *, uint64_t))(v126 + 1);
    long long v126 = v91;
    swift_bridgeObjectRetain();
    do
    {
      v95(v6, v96, v94);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v63, v93);
      (*v98)(v6, v94);
      v96 += v97;
      --v92;
    }
    while (v92);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    uint64_t v69 = v93;
    uint64_t v80 = (uint64_t)v115;
  }
  p_cache[338] = v125;
  uint64_t v99 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v99);
  *(&v102 - 2) = (uint64_t)v130;
  *(&v102 - 1) = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v80, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v102 - 4), v69, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v100);
  outlined consume of _SymbolEffect.Trigger(v106);
  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v80, v69);
  return ((uint64_t (*)(uint64_t, uint64_t))v131)(v123, v128);
}

uint64_t destroy for KeyframeAnimator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of _SymbolEffect.Trigger(*(void *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  return swift_release();
}

uint64_t outlined consume of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t AnimatorAttribute.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for KeyframeAnimator();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t type metadata accessor for KeyframeAnimator()
{
  return swift_getGenericMetadata();
}

unsigned char *initializeWithCopy for KeyframeTrackState(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v7 = 16;
  }
  else {
    unint64_t v7 = ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v8 = __src[v7];
  if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = *(_DWORD *)__src + 2;
  }
  if (v8 == 1)
  {
    unint64_t v11 = v6 + 8;
    (*(void (**)(unsigned char *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst, __src);
    *(void *)((unint64_t)&__dst[v5 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
    unint64_t v12 = (unint64_t)&__dst[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (unint64_t)&__src[v11 + 7] & 0xFFFFFFFFFFFFFFF8;
    long long v14 = *(_OWORD *)v13;
    *(void *)(v12 + 16) = *(void *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = v14;
    __dst[v7] = 1;
    swift_bridgeObjectRetain();
  }
  else if (v8)
  {
    memcpy(__dst, __src, v7 | 1);
  }
  else
  {
    uint64_t v10 = *((void *)__src + 1);
    *(void *)__dst = *(void *)__src;
    *((void *)__dst + 1) = v10;
    __dst[v7] = 0;
    swift_retain();
    swift_retain();
  }
  return __dst;
}

uint64_t closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v60 = a2;
  uint64_t v61 = a7;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v67 = a9;
  uint64_t v68 = a4;
  uint64_t v63 = a14;
  uint64_t v64 = a3;
  uint64_t v55 = a16;
  uint64_t v18 = *(void *)(a10 - 8);
  uint64_t v58 = a13;
  MEMORY[0x270FA5388](a1);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v20;
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v54 = v25;
  uint64_t v69 = v26;
  uint64_t v70 = a12;
  uint64_t v71 = v28;
  uint64_t v72 = v27;
  uint64_t v29 = v28;
  uint64_t v73 = v30;
  uint64_t v31 = v30;
  uint64_t v59 = type metadata accessor for KeyframeAnimator();
  uint64_t v62 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v56 = (uint64_t)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v34 = MEMORY[0x270FA5388](v33);
  uint64_t v57 = (char *)&v53 - v35;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v25, a1, a8, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v60, a10);
  uint64_t v36 = (void *)swift_allocObject();
  uint64_t v37 = v61;
  _OWORD v36[2] = v61;
  v36[3] = a8;
  _DWORD v36[4] = a10;
  v36[5] = v29;
  uint64_t v38 = v29;
  uint64_t v39 = v58;
  v36[6] = a12;
  v36[7] = v39;
  uint64_t v41 = v63;
  uint64_t v40 = v64;
  v36[8] = v63;
  double v36[9] = v31;
  uint64_t v42 = v31;
  uint64_t v43 = v55;
  _OWORD v36[10] = v55;
  v36[11] = v40;
  v36[12] = v68;
  uint64_t v44 = (void *)swift_allocObject();
  void v44[2] = v37;
  v44[3] = a8;
  v44[4] = a10;
  uint64_t v44[5] = v38;
  v44[6] = a12;
  v44[7] = v39;
  v44[8] = v41;
  char v44[9] = v42;
  uint64_t v45 = v65;
  uint64_t v46 = v66;
  v44[10] = v43;
  v44[11] = v45;
  v44[12] = v46;
  uint64_t v52 = v42;
  uint64_t v47 = v56;
  KeyframeAnimator.init<A>(initialValue:trigger:content:keyframes:)((uint64_t)v54, (uint64_t)v53, (uint64_t)partial apply for closure #1 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:), (uint64_t)v36, (uint64_t)partial apply for closure #2 in closure #1 in View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:), (uint64_t)v44, a8, a12, v56, v38, a10, v43, v52);
  long long v48 = v57;
  uint64_t v49 = v59;
  static ViewBuilder.buildExpression<A>(_:)(v47, v59, &protocol witness table for KeyframeAnimator<A, B, C>);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  swift_retain();
  swift_retain();
  v50(v47, v49);
  static ViewBuilder.buildExpression<A>(_:)(v48, v49, &protocol witness table for KeyframeAnimator<A, B, C>);
  return ((uint64_t (*)(char *, uint64_t))v50)(v48, v49);
}

uint64_t initializeWithCopy for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *unint64_t v7 = *(void *)v8;
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 += 23;
  unint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t v11 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  outlined copy of _SymbolEffect.Trigger(v11);
  void *v10 = v11;
  unint64_t v13 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  *unint64_t v13 = *(void *)(v12 & 0xFFFFFFFFFFFFFFF8);
  v13[1] = v14;
  swift_retain();
  return a1;
}

uint64_t outlined copy of _SymbolEffect.Trigger(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t KeyframeAnimator.init<A>(initialValue:trigger:content:keyframes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9, a1, a7);
  v25[0] = a7;
  v25[1] = a8;
  void v25[2] = a10;
  v25[3] = a12;
  v25[4] = a13;
  uint64_t v19 = (int *)type metadata accessor for KeyframeAnimator();
  uint64_t v20 = (void *)(a9 + v19[15]);
  *uint64_t v20 = a5;
  v20[1] = a6;
  uint64_t v21 = (void *)(a9 + v19[17]);
  *uint64_t v21 = a3;
  v21[1] = a4;
  uint64_t result = AnyEquatable.init<A>(_:)(a2, v25);
  *(void *)(a9 + v19[16]) = v25[0];
  return result;
}

uint64_t AnyEquatable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for _AnyEquatableBox();
  uint64_t result = AnchorBox.__allocating_init(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t AnchorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 104) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 120), a1);
  return v2;
}

uint64_t type metadata accessor for _AnyEquatableBox()
{
  return __swift_instantiateGenericMetadata();
}

_DWORD *destroy for KeyframeTrackState(_DWORD *result, uint64_t a2)
{
  unint64_t v2 = ((((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  uint64_t v3 = v2 & 0xFFFFFFF8;
  unsigned int v4 = *((unsigned __int8 *)result + v2);
  if (v4 >= 2 && v3 != 0) {
    unsigned int v4 = *result + 2;
  }
  if (v4 == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(result);
    return (_DWORD *)swift_bridgeObjectRelease();
  }
  else if (!v4)
  {
    swift_release();
    return (_DWORD *)swift_release();
  }
  return result;
}

uint64_t KeyframeTrackState.value(at:initialValue:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v24 = a2;
  uint64_t v25 = a4;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = type metadata accessor for KeyframeTrackState.RepeatingState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v23 - v11;
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v16, v5, a3, v14);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
      v27[0] = v17;
      KeyframeTrackState.RepeatingState.value(at:)(v27, v9, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v25, v24, v8);
    }
  }
  else
  {
    double v21 = *((double *)v16 + 1);
    v27[0] = *(double *)v16;
    v27[1] = v21;
    double v26 = v17;
    uint64_t v22 = type metadata accessor for KeyframeTrackState.EventDrivenState();
    KeyframeTrackState.EventDrivenState.value(at:)(&v26, v22, v25);
    swift_release();
    return swift_release();
  }
}

uint64_t type metadata accessor for KeyframeTrackState.EventDrivenState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t KeyframeTrackState.updatePlayback(_:time:initialValue:plan:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void, void, void), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v115 = a2;
  uint64_t v110 = a4;
  uint64_t v111 = a5;
  uint64_t v112 = a3;
  uint64_t v114 = a1;
  uint64_t v7 = a6[2];
  uint64_t v103 = type metadata accessor for KeyframeTimeline();
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  int v101 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v106 = (char *)&v97 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v97 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v97 - v15;
  uint64_t v107 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v97 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v97 - v24;
  uint64_t v26 = a6[3];
  uint64_t v27 = a6[4];
  uint64_t v113 = v7;
  uint64_t v108 = v26;
  uint64_t v109 = v27;
  uint64_t v28 = type metadata accessor for KeyframeTrackState.RepeatingState();
  uint64_t v104 = *(void *)(v28 - 8);
  unint64_t v105 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v97 - v29;
  MEMORY[0x270FA5388](v31);
  MEMORY[0x270FA5388](v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (unint64_t *)((char *)&v97 - v34);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (uint64_t *)((char *)&v97 - v37);
  double v44 = MEMORY[0x270FA5388](v39);
  uint64_t v45 = (unint64_t *)((char *)&v97 - v40);
  unint64_t v46 = *(void *)v115;
  uint64_t v115 = *v114;
  if (v115 < 0)
  {
    uint64_t v97 = v43;
    uint64_t v58 = (uint64_t)v22;
    uint64_t v98 = v42;
    uint64_t v59 = (uint64_t)v106;
    uint64_t v60 = (uint64_t)v16;
    uint64_t v99 = v13;
    uint64_t v61 = *(void (**)(unint64_t *, uint64_t *, void *, double))(v41 + 32);
    uint64_t v114 = (uint64_t *)(v41 + 32);
    v61(v35, v116, a6, v44);
    uint64_t v100 = a6;
    EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        char v63 = v115 & 1;
        uint64_t v64 = v105;
        (*(void (**)(uint64_t *, unint64_t *, unint64_t))(v104 + 32))(v116, v35, v105);
        v119.n128_u64[0] = v46;
        KeyframeTrackState.RepeatingState.update(at:paused:)(v119.n128_f64, v63, v64);
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        int v87 = v112;
        uint64_t v86 = v113;
        uint64_t v88 = (*(uint64_t (**)(char *, void, uint64_t))(v107 + 16))(v19, v112, v113);
        MEMORY[0x270FA5388](v88);
        uint64_t v90 = v108;
        uint64_t v89 = v109;
        *(&v97 - 6) = v86;
        *(&v97 - 5) = v90;
        uint64_t v91 = v110;
        *(&v97 - 4) = v89;
        *(&v97 - 3) = v91;
        *(&v97 - 2) = v111;
        *(&v97 - 1) = (uint64_t)v87;
        uint64_t v92 = v59;
        KeyframeTimeline.init<A>(initialValue:content:)((uint64_t)v19, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v97 - 8), v86, v90, v89, v59);
        uint64_t v93 = (uint64_t)v101;
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v101, v92, v103);
        unint64_t v94 = v46;
        if (v115) {
          unint64_t v94 = 0;
        }
        v119.n128_u64[0] = v94;
        v119.n128_u64[1] = (unint64_t)~v115 << 63;
        uint64_t v120 = 0;
        uint64_t v95 = v97;
        KeyframeTrackState.RepeatingState.init(timeline:mode:)(v93, &v119, v97);
        uint64_t v96 = v100;
        swift_storeEnumTagMultiPayload();
        return ((uint64_t (*)(uint64_t *, uint64_t, void *))v61)(v116, v95, v96);
      }
    }
    else
    {
      unint64_t v72 = v35[1];
      unint64_t v105 = *v35;
      uint64_t v106 = (char *)v72;
      v119.n128_u64[0] = v105;
      v119.n128_u64[1] = v72;
      unint64_t v118 = v46;
      uint64_t v73 = v113;
      uint64_t v112 = (uint64_t (*)(void, void, void))v61;
      uint64_t v75 = v108;
      uint64_t v74 = v109;
      uint64_t v76 = type metadata accessor for KeyframeTrackState.EventDrivenState();
      uint64_t v77 = v25;
      KeyframeTrackState.EventDrivenState.value(at:)((double *)&v118, v76, (uint64_t)v25);
      uint64_t v78 = v107;
      uint64_t v79 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v107 + 16))(v58, v25, v73);
      MEMORY[0x270FA5388](v79);
      *(&v97 - 6) = v73;
      *(&v97 - 5) = v75;
      uint64_t v80 = v110;
      *(&v97 - 4) = v74;
      *(&v97 - 3) = v80;
      *(&v97 - 2) = v111;
      *(&v97 - 1) = (uint64_t)v25;
      KeyframeTimeline.init<A>(initialValue:content:)(v58, (void (*)(void))partial apply for closure #2 in KeyframeTrackState.updatePlayback(_:time:initialValue:plan:), (uint64_t)(&v97 - 8), v73, v75, v74, v60);
      swift_release();
      swift_release();
      uint64_t v81 = (uint64_t)v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v99, v60, v103);
      unint64_t v82 = v46;
      if (v115) {
        unint64_t v82 = 0;
      }
      v119.n128_u64[0] = v82;
      v119.n128_u64[1] = (unint64_t)~v115 << 63;
      uint64_t v120 = 0;
      uint64_t v83 = v98;
      __n128 v84 = KeyframeTrackState.RepeatingState.init(timeline:mode:)(v81, &v119, v98);
      (*(void (**)(char *, uint64_t, __n128))(v78 + 8))(v77, v73, v84);
      unint64_t v85 = v100;
      swift_storeEnumTagMultiPayload();
      return v112(v116, v83, v85);
    }
  }
  else
  {
    uint64_t v47 = *(void (**)(char *, uint64_t *, void *, double))(v41 + 32);
    long long v48 = v116;
    uint64_t v114 = (uint64_t *)(v41 + 32);
    v47((char *)&v97 - v40, v116, a6, v44);
    int v49 = swift_getEnumCaseMultiPayload();
    uint64_t v50 = a6;
    if (v49)
    {
      if (v49 == 1)
      {
        uint64_t v51 = v104;
        uint64_t v52 = v105;
        (*(void (**)(char *, unint64_t *, unint64_t))(v104 + 32))(v30, v45, v105);
        uint64_t v53 = swift_allocBox();
        uint64_t v55 = v54;
        v119.n128_u64[0] = v46;
        uint64_t v56 = v115;
        swift_retain();
        KeyframeTrackState.RepeatingState.value(at:)(v119.n128_f64, v52, v55);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v52);
        *uint64_t v38 = v56;
        v38[1] = v53;
        swift_storeEnumTagMultiPayload();
        return ((uint64_t (*)(uint64_t *, uint64_t *, void *))v47)(v48, v38, v50);
      }
      else
      {
        uint64_t v69 = v113;
        uint64_t v70 = swift_allocBox();
        (*(void (**)(uint64_t, uint64_t (*)(void, void, void), uint64_t))(v107 + 16))(v71, v112, v69);
        *long long v48 = v115;
        v48[1] = v70;
        swift_storeEnumTagMultiPayload();
        return swift_retain();
      }
    }
    else
    {
      unint64_t v65 = v45[1];
      v119.n128_u64[0] = *v45;
      v119.n128_u64[1] = v65;
      unint64_t v118 = v46;
      uint64_t v66 = v115;
      uint64_t v117 = v115;
      uint64_t v67 = type metadata accessor for KeyframeTrackState.EventDrivenState();
      swift_retain();
      KeyframeTrackState.EventDrivenState.update(at:trigger:initialValue:path:)((double *)&v118, &v117, (uint64_t)v112, v110, v111, v67);
      outlined consume of _SymbolEffect.Trigger(v66);
      unint64_t v68 = v119.n128_u64[1];
      *long long v48 = v119.n128_u64[0];
      v48[1] = v68;
      return swift_storeEnumTagMultiPayload();
    }
  }
}

uint64_t type metadata accessor for KeyframeTrackState.RepeatingState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for KeyframeTimeline()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t KeyframeTrackState.isAnimating.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for KeyframeTrackState.RepeatingState();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - v5;
  double v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v10, v1, a1, v8);
  EnumCaseMultiPayloadouble d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
      uint64_t v13 = *(void *)&v6[*(int *)(v3 + 44) + 8] >> 63;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v14 = *((void *)v10 + 1);
    swift_release();
    type metadata accessor for KeyframeTrackState.EventDrivenState();
    uint64_t v13 = v14 >> 63;
    swift_release();
  }
  return v13;
}

uint64_t KeyframeTrackState.EventDrivenState.value(at:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for KeyframeTimeline();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - v9;
  if ((*(void *)(v3 + 8) & 0x8000000000000000) != 0)
  {
    double v14 = *a1;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v16 = swift_projectBox();
    uint64_t v17 = v16 + *(int *)(TupleTypeMetadata2 + 48);
    double v18 = *(double *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
    if (v19) {
      double v20 = v14 - v18;
    }
    else {
      double v20 = 0.0;
    }
    KeyframeTimeline.value(time:)(v7, a3, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    uint64_t v11 = swift_projectBox();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
    return v12(a3, v11, v6);
  }
}

uint64_t closure #1 in AnimatorAttribute.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  v15[1] = a2;
  void v15[2] = a3;
  void v15[3] = a4;
  uint64_t v15[4] = a5;
  void v15[5] = a6;
  uint64_t v9 = type metadata accessor for AnimatorAttribute();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - v12, a1, v9, v11);
  *a7 = *(void *)AGGraphGetValue();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t static KeyframeAnimator._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  void (*v43)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  void *v44;
  _DWORD v46[2];
  int v47;
  int v48;
  uint64_t v49;
  int ShouldRecordTree;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t (*v60)(_DWORD *, char *);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  int v71;
  void v72[2];
  int v73[3];
  void v74[5];
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;

  int v49 = a5;
  uint64_t v69 = a8;
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v67 = (_DWORD *)a4;
  unint64_t v68 = type metadata accessor for KeyframeTrackState();
  MEMORY[0x270FA5388](v68);
  uint64_t v16 = (char *)v46 - v15;
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  uint64_t v60 = (uint64_t (*)(_DWORD *, char *))a3;
  uint64_t v92 = a5;
  uint64_t v93 = a6;
  unint64_t v94 = a7;
  uint64_t v17 = type metadata accessor for AnimatorAttribute();
  uint64_t v70 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v65 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (_DWORD *)((char *)v46 - v20);
  int v22 = *a1;
  uint64_t v66 = *(void *)a2;
  int v23 = *(_DWORD *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v47 = *(_DWORD *)(a2 + 24);
  long long v48 = v23;
  uint64_t v51 = *(_DWORD *)(a2 + 28);
  uint64_t v61 = *(_DWORD *)(a2 + 32);
  int v25 = *(_DWORD *)(a2 + 36);
  char v63 = *(void *)(a2 + 40);
  uint64_t v64 = v24;
  uint64_t v62 = *(void *)(a2 + 48);
  uint64_t v58 = *(_DWORD *)(a2 + 56);
  uint64_t v59 = v25;
  int v26 = *(_DWORD *)(a2 + 60);
  uint64_t v56 = *(_DWORD *)(a2 + 64);
  uint64_t v57 = v26;
  int v27 = *(_DWORD *)(a2 + 68);
  uint64_t v54 = *(_DWORD *)(a2 + 72);
  uint64_t v55 = v27;
  int v28 = *(_DWORD *)(a2 + 76);
  uint64_t v52 = *(_DWORD *)(a2 + 80);
  uint64_t v53 = v28;
  uint64_t v29 = v49;
  closure #1 in static KeyframeAnimator._makeView(view:inputs:)(1, a3, (uint64_t)v67, v49, a6, a7);
  LODWORD(a2) = AGGraphCreateOffsetAttribute2();
  swift_storeEnumTagMultiPayload();
  unint64_t v68 = a7;
  int v30 = v22;
  int v31 = a2;
  int v33 = v47;
  int v32 = v48;
  AnimatorAttribute.init(view:playback:phase:time:resetSeed:currentState:)(v30, v31, v47, v48, 0, (uint64_t)v16, v21);
  uint64_t v34 = v70;
  uint64_t v35 = *(void (**)(char *, _DWORD *, uint64_t))(v70 + 16);
  uint64_t v36 = (uint64_t)v65;
  uint64_t v67 = v21;
  v35(v65, v21, v17);
  v74[2] = v29;
  v74[3] = v17;
  v74[4] = swift_getWitnessTable();
  uint64_t v37 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v36, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v74, v17, MEMORY[0x263F8E628], v37, MEMORY[0x263F8E658], v38);
  uint64_t v39 = *(uint64_t (**)(_DWORD *, char *))(v34 + 8);
  unint64_t v65 = (char *)v17;
  uint64_t v70 = v34 + 8;
  uint64_t v60 = v39;
  v39((_DWORD *)v36, (char *)v17);
  uint64_t v40 = v90;
  AGGraphSetFlags();
  _GraphValue.init(_:)(v40, v73);
  int v41 = v73[0];
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v90 = v66;
  uint64_t v92 = v64;
  LODWORD(v91) = v32;
  uint64_t v93 = __PAIR64__(v51, v33);
  HIDWORD(v94) = v59;
  uint64_t v95 = v63;
  uint64_t v96 = v62;
  uint64_t v97 = v58;
  uint64_t v98 = v57;
  uint64_t v99 = v56;
  uint64_t v100 = v55;
  int v101 = v54;
  uint64_t v102 = v53;
  uint64_t v103 = v52;
  v46[1] = v41;
  uint64_t v71 = v41;
  uint64_t v75 = v66;
  uint64_t v76 = v32;
  uint64_t v77 = v64;
  uint64_t v78 = v33;
  uint64_t v79 = v51;
  uint64_t v80 = v59;
  uint64_t v81 = v63;
  unint64_t v82 = v62;
  uint64_t v83 = v58;
  __n128 v84 = v57;
  unint64_t v85 = v56;
  uint64_t v86 = v55;
  int v87 = v54;
  uint64_t v88 = v53;
  uint64_t v89 = v52;
  uint64_t v42 = v68;
  uint64_t v43 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(v68 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43(v72, &v71, &v75, v29, v42);
  LODWORD(v94) = v61;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v72, (uint64_t)&v90);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  double v44 = v69;
  *uint64_t v69 = v72[0];
  v44[1] = v72[1];
  return v60(v67, v65);
}

uint64_t type metadata accessor for AnimatorAttribute()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for KeyframeTrackState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AnimatorAttribute(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  uint64_t v4 = (_DWORD *)((((((((((result + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                 + v3
                 + 4) & ~v3);
  unint64_t v5 = ((((*(void *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  uint64_t v6 = v5 & 0xFFFFFFF8;
  unsigned int v7 = *((unsigned __int8 *)v4 + v5);
  if (v7 >= 2 && v6 != 0) {
    unsigned int v7 = *v4 + 2;
  }
  if (v7 == 1)
  {
    (*(void (**)(unint64_t))(v2 + 8))((((((((((result + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                       + v3
                                                       + 4) & ~v3);
    return swift_bridgeObjectRelease();
  }
  else if (!v7)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

_DWORD *initializeWithCopy for AnimatorAttribute(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  double v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v11 = *v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  uint64_t v15 = v14 + 11;
  unint64_t v16 = (unint64_t)v11 + v14 + 11;
  unint64_t v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = (void *)(v16 & v17);
  uint64_t v19 = (_DWORD *)(((unint64_t)v12 + v15) & v17);
  uint64_t v20 = *(void *)(v13 + 64) + 7;
  if ((((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24 <= 0x10) {
    unint64_t v21 = 16;
  }
  else {
    unint64_t v21 = (((v20 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v22 = *((unsigned __int8 *)v19 + v21);
  if (v22 >= 2 && (v21 & 0xFFFFFFF8) != 0) {
    unsigned int v22 = *v19 + 2;
  }
  if (v22 == 1)
  {
    unint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    (*(void (**)(void *, _DWORD *))(v13 + 16))(v18, v19);
    *(void *)(((unint64_t)v18 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + v20) & 0xFFFFFFFFFFFFFFF8);
    int v25 = (char *)v18 + v24;
    long long v26 = *(_OWORD *)((char *)v19 + v24);
    *((void *)v25 + 2) = *(void *)((char *)v19 + v24 + 16);
    *(_OWORD *)int v25 = v26;
    *((unsigned char *)v18 + v21) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v22)
  {
    memcpy(v18, v19, v21 | 1);
  }
  else
  {
    *uint64_t v18 = *(void *)v19;
    v18[1] = *(void *)((((unint64_t)v12 + v15) & v17) + 8);
    *((unsigned char *)v18 + v21) = 0;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t AnimatorAttribute.init(view:playback:phase:time:resetSeed:currentState:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, _DWORD *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  uint64_t v8 = (char *)a7 + *(int *)(type metadata accessor for AnimatorAttribute() + 76);
  uint64_t v9 = type metadata accessor for KeyframeTrackState();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a6, v9);
}

uint64_t closure #1 in static KeyframeAnimator._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v7 = type metadata accessor for KeyframeAnimator();
  uint64_t v8 = a1 + *(int *)(v7 + 64);
  _OWORD v12[2] = v7;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, (uint64_t)&unk_26FA46420, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t associated type witness table accessor for Transition.Body : View in OpacityTransition()
{
  return swift_getOpaqueTypeConformance2();
}

void onNextMainRunLoop(do:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_mainRunLoop);
  type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2461B9DC0;
  uint64_t v6 = (void *)*MEMORY[0x263EFF588];
  *(void *)(v5 + 32) = *MEMORY[0x263EFF588];
  type metadata accessor for NSRunLoopMode(0);
  id v7 = v6;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  v11[4] = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
  v11[5] = v9;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_32;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_performInModes_block_, isa, v10);
  _Block_release(v10);
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>)
  {
    type metadata accessor for NSRunLoopMode(255);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSRunLoopMode>);
    }
  }
}

uint64_t BodyAccessor.setBody(_:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v46 = a1;
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v45 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v44 = (char *)v36 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)v36 - v14;
  int v43 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    uint64_t v37 = v15;
    uint64_t v38 = v13;
    uint64_t v39 = AssociatedTypeWitness;
    uint64_t v40 = a2;
    uint64_t v41 = a3;
    uint64_t v42 = a4;
    swift_getAssociatedTypeWitness();
    uint64_t v16 = v44;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v18 = AGTypeID.description.getter();
    uint64_t v20 = v19;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v21 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v18;
    uint64_t v22 = inited + 32;
    *(void *)(inited + 64) = v21;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v21;
    *(void *)(inited + 80) = v23;
    unint64_t v24 = v16;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v45 + 16;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v9, v24, v7);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v26 = swift_initStackObject();
    long long v47 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v36[1] = inited;
        uint64_t v22 = v43 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v22, v27, v22, (uint64_t)v9);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v48);
        swift_bridgeObjectRelease();
        if (!v49)
        {
LABEL_13:
          outlined destroy of CVarArg?((uint64_t)v48);
          swift_bridgeObjectRelease();
          int v32 = *(void (**)(char *, uint64_t))(v45 + 8);
          v32(v44, v7);
          v32(v9, v7);
          a3 = v41;
          a4 = v42;
          uint64_t AssociatedTypeWitness = v39;
          uint64_t v15 = v37;
          uint64_t v13 = v38;
          goto LABEL_14;
        }
        uint64_t inited = v25 + 8;
        outlined destroy of CVarArg?((uint64_t)v48);
        if (one-time initialization token for continuation == -1)
        {
LABEL_8:
          uint64_t v28 = __swift_project_value_buffer(v7, (uint64_t)static OSSignpostID.continuation);
          uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))inited;
          while (1)
          {
            v29(v9, v28, v7);
            uint64_t v30 = swift_initStackObject();
            *(_OWORD *)(v30 + 16) = v47;
            *(_OWORD *)(v30 + 32) = 0u;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(void *)(v30 + 144) = 0;
            *(_OWORD *)(v30 + 112) = 0u;
            uint64_t v31 = v30 + 112;
            specialized withKDebugValues(_:_:closure:)(v22, v30, v22, (uint64_t)v9);
            outlined init with copy of CVarArg?(v31, (uint64_t)v48);
            swift_bridgeObjectRelease();
            if (!v49) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v48);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = __swift_project_value_buffer(v7, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_13;
        }
LABEL_17:
        swift_once();
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_14:
  AGGraphClearUpdate();
  v46();
  AGGraphSetUpdate();
  uint64_t v33 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  MEMORY[0x270FA5388](v33);
  v36[-2] = a3;
  v36[-1] = a4;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)_s7SwiftUI12BodyAccessorPAAE03setC0yy0C0QzyXEFySPyAFGXEfU0_TA_0, (uint64_t)&v36[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

_UNKNOWN **associated type witness table accessor for AnchorProtocol.AnchorValue : ViewTransformable in CGRect()
{
  return &protocol witness table for CGRect;
}

uint64_t static AccessibilityActivationPointStorage.defaultDrag.getter@<X0>(uint64_t a1@<X8>)
{
  id v2 = AXSwiftUIInteractionLocationDescriptorDefaultName();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = one-time initialization token for isDebuggerAttached;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  type metadata accessor for _ContiguousArrayStorage<AccessibilityActivationPoint>();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2461B9DC0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = 0;
  *(unsigned char *)(v7 + 48) = 2;
  *(void *)(v7 + 56) = v3;
  *(void *)(v7 + 64) = v5;
  *(unsigned char *)(v7 + 72) = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 80) = MEMORY[0x263F8EE78];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  return result;
}

uint64_t static AccessibilityActivationPointStorage.defaultDrop.getter@<X0>(uint64_t a1@<X8>)
{
  id v2 = AXSwiftUIInteractionLocationDescriptorDefaultName();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = one-time initialization token for isDebuggerAttached;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  type metadata accessor for _ContiguousArrayStorage<AccessibilityActivationPoint>();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2461B9DC0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = 0;
  *(unsigned char *)(v7 + 48) = 2;
  *(void *)(v7 + 56) = v3;
  *(void *)(v7 + 64) = v5;
  *(unsigned char *)(v7 + 72) = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 80) = MEMORY[0x263F8EE78];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  return result;
}

id AXSwiftUIInteractionLocationDescriptorDefaultName()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  unint64_t v0 = (void **)getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  uint64_t v7 = getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  if (!getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AXRuntimeLibrary();
    v5[3] = (uint64_t)dlsym(v1, "AXInteractionLocationDescriptorDefaultName");
    getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = v5[3];
    unint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    soft_AXSSAccessibilityDescriptionForSymbolName_cold_1();
  }
  id v2 = *v0;

  return v2;
}

void sub_24595F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityActivationPoint>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityActivationPoint>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityActivationPoint>);
    }
  }
}

uint64_t AXRuntimeLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x263EF8330];
    void v3[2] = 3221225472;
    v3[3] = __AXRuntimeLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_2651D4368;
    uint64_t v5 = 0;
    AXRuntimeLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = AXRuntimeLibraryCore_frameworkLibrary;
  uint64_t v1 = (void *)v3[0];
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t instantiation function for generic protocol witness table for ZipLocation<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

pthread_mutex_t *one-time initialization function for _lock()
{
  uint64_t result = _MovableLockCreate();
  static Update._lock = (uint64_t)result;
  return result;
}

pthread_mutex_t *_MovableLockCreate()
{
  uint64_t v0 = (pthread_mutex_t *)malloc_type_calloc(1uLL, 0x100uLL, 0x10E00405E494FDCuLL);
  if (!v0) {
    abort();
  }
  uint64_t v1 = v0;
  pthread_mutex_init(v0, 0);
  pthread_cond_init((pthread_cond_t *)&v1[1], 0);
  pthread_cond_init((pthread_cond_t *)&v1[1].__opaque[40], 0);
  pthread_cond_init((pthread_cond_t *)&v1[2].__opaque[24], 0);
  *(void *)&v1[3].__opaque[8] = pthread_main_thread_np();
  return v1;
}

uint64_t type metadata completion function for SubscriptionLifetime.StateType()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    long long v4 = &v3;
    swift_getTupleTypeLayout();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Collection.withContiguousStorage<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v31 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v34 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v28 - v14;
  uint64_t v33 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a5 + 8);
  uint64_t v35 = a4;
  uint64_t v20 = v19;
  uint64_t v21 = v37;
  uint64_t result = dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  if (!v21)
  {
    v28[1] = v20;
    uint64_t v29 = v6;
    uint64_t v30 = a1;
    uint64_t v37 = a2;
    uint64_t v23 = v32;
    uint64_t v24 = v33;
    uint64_t v26 = v34;
    uint64_t v25 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v15, 1, v35) == 1)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v26, v29, a3);
      swift_getAssociatedTypeWitness();
      Array.init<A>(_:)();
      ContiguousArray.withUnsafeBufferPointer<A>(_:)();
      return swift_release();
    }
    else
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
      v27(v18, v15, v25);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v36, v18, v25);
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PreferenceValueAttribute<A>()
{
  return swift_getWitnessTable();
}

void *specialized CoreMaterialCache.loadEffects(style:)(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  char v1 = *(unsigned char *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  __int16 v3 = *(_WORD *)(a1 + 16);
  *(void *)&long long v63 = *(void *)a1;
  BYTE8(v63) = v1;
  HIDWORD(v63) = v2;
  LOWORD(v64) = v3;
  unint64_t v4 = ContentStyle.MaterialStyle.coreMaterialDescription.getter();
  if (!*(void *)(v4 + 16)
    || (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265746C6966, 0xE700000000000000), (v6 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v63),
        type metadata accessor for [[String : Any]](0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]], (uint64_t (*)(uint64_t))type metadata accessor for [String : Any], MEMORY[0x263F8D488]), (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v55 = 0;
    uint64_t v50 = 0;
    uint64_t v8 = 0;
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)&v58[0];
  uint64_t v8 = *(void *)(*(void *)&v58[0] + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v55 = 0;
    uint64_t v50 = 0;
LABEL_28:
    uint64_t v19 = 0;
    uint64_t v9 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v20 = 0;
    char v21 = 1;
    if (!*(void *)(v4 + 16)) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v46 = 0;
  uint64_t v9 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v48 = 0;
  uint64_t v51 = 0;
  uint64_t v10 = 0;
  char v47 = 1;
  do
  {
    uint64_t v11 = *(void *)(v7 + 8 * v10 + 32);
    if (*(void *)(v11 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
      if ((v13 & 1) == 0
        || (outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)v59),
            (swift_dynamicCast() & 1) == 0))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
      if (v61 == __PAIR128__(0x800000024621EEC0, 0xD000000000000012))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0) {
          goto LABEL_6;
        }
      }
      if (*(void *)(v11 + 16))
      {
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000024621EEE0);
        if (v16)
        {
          outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v15, (uint64_t)&v61);
        }
        else
        {
          long long v61 = 0u;
          long long v62 = 0u;
        }
      }
      else
      {
        long long v61 = 0u;
        long long v62 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v62 + 1))
      {
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSValue);
        if (swift_dynamicCast())
        {
          memset(&v59[4], 0, 20);
          *(_DWORD *)uint64_t v59 = 1065353216;
          *(_DWORD *)&v59[24] = 1065353216;
          memset(&v59[28], 0, 20);
          *(_DWORD *)uint64_t v60 = 1065353216;
          memset(&v60[4], 0, 20);
          *(void *)&v60[24] = 1065353216;
          objc_msgSend(v56, sel_getValue_, v59);
          if (v47)
          {

            uint64_t v46 = *(void *)&v59[16];
            uint64_t v9 = *(void *)&v59[32];
            uint64_t v49 = *(void *)&v59[24];
            uint64_t v50 = *(void *)&v59[8];
            uint64_t v54 = *(void *)&v59[40];
            uint64_t v55 = *(void *)v59;
            uint64_t v52 = *(void *)&v60[8];
            uint64_t v53 = *(void *)v60;
            uint64_t v48 = *(void *)&v60[16];
            uint64_t v51 = *(void *)&v60[24];
          }
          else
          {
            *(void *)&long long v63 = v55;
            *((void *)&v63 + 1) = v50;
            uint64_t v64 = v46;
            uint64_t v65 = v49;
            uint64_t v66 = v9;
            uint64_t v67 = v54;
            uint64_t v68 = v53;
            uint64_t v69 = v52;
            uint64_t v70 = v48;
            uint64_t v71 = v51;
            v58[3] = *(_OWORD *)v60;
            v58[4] = *(_OWORD *)&v60[16];
            v58[1] = *(_OWORD *)&v59[16];
            long long v58[2] = *(_OWORD *)&v59[32];
            v58[0] = *(_OWORD *)v59;
            specialized static _ColorMatrix.* infix(_:_:)(v58, &v63, (uint64_t)v57, *(int8x16_t *)&v59[16], *(int32x4_t *)&v59[32], v17, v18);
            uint64_t v46 = v57[2];
            uint64_t v9 = v57[4];
            uint64_t v49 = v57[3];
            uint64_t v50 = v57[1];
            uint64_t v54 = v57[5];
            uint64_t v55 = v57[0];
            uint64_t v52 = v57[7];
            uint64_t v53 = v57[6];
            uint64_t v48 = v57[8];
            uint64_t v51 = v57[9];
          }
          char v47 = 0;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v61);
      }
    }
LABEL_7:
    ++v10;
  }
  while (v8 != v10);
  swift_bridgeObjectRelease();
  uint64_t v8 = v46;
  uint64_t v20 = v48;
  uint64_t v19 = v49;
  char v21 = v47;
  if (!*(void *)(v4 + 16))
  {
LABEL_32:
    long long v61 = 0u;
    long long v62 = 0u;
    goto LABEL_33;
  }
LABEL_29:
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6C6F43746E6974, 0xE900000000000072);
  if ((v23 & 1) == 0) {
    goto LABEL_32;
  }
  outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v22, (uint64_t)&v61);
LABEL_33:
  swift_bridgeObjectRelease();
  if (!*((void *)&v62 + 1))
  {
    outlined destroy of Any?((uint64_t)&v61);
    unint64_t v24 = 0;
    unint64_t v26 = 0;
LABEL_43:
    BOOL v30 = 1;
    if ((v21 & 1) == 0) {
      goto LABEL_55;
    }
    goto LABEL_44;
  }
  outlined init with take of Any(&v61, v59);
  outlined init with copy of Any((uint64_t)v59, (uint64_t)&v61);
  unint64_t v24 = specialized static CoreMaterialCache.parseColor(_:)((uint64_t)&v61);
  unint64_t v26 = v25;
  char v28 = v27;
  outlined destroy of Any?((uint64_t)&v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  if (v28) {
    goto LABEL_43;
  }
  unint64_t v29 = HIDWORD(v24);
  if (*(float *)&v24 != 1.0 || *((float *)&v24 + 1) != 1.0 || *(float *)&v26 != 1.0)
  {
    if ((v21 & 1) == 0) {
      goto LABEL_55;
    }
LABEL_48:
    if (*(float *)&v24 == 1.0 && *(float *)&v29 == 1.0 && *(float *)&v26 == 1.0)
    {
      uint64_t v31 = (void *)MEMORY[0x263F8EE78];
      if (*((float *)&v26 + 1) == 1.0) {
        return v31;
      }
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v33 = v31[2];
      unint64_t v32 = v31[3];
      if (v33 >= v32 >> 1) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
      }
      uint64_t v31[2] = v33 + 1;
      uint64_t v34 = &v31[2 * v33];
      v34[4] = HIDWORD(v26);
      uint64_t v35 = v34 + 4;
      char v36 = 4;
    }
    else
    {
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v24;
      *(void *)(v41 + 24) = v26;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_DWORD *)(v41 + 128) = 0;
      *(unsigned char *)(v41 + 132) = 5;
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v43 = v31[2];
      unint64_t v42 = v31[3];
      if (v43 >= v42 >> 1) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v31);
      }
      uint64_t v31[2] = v43 + 1;
      double v44 = &v31[2 * v43];
      v44[4] = v41;
      uint64_t v35 = v44 + 4;
LABEL_61:
      char v36 = 9;
    }
    *((_DWORD *)v35 + 2) = 0;
    *((unsigned char *)v35 + 12) = v36;
    return v31;
  }
  BOOL v30 = *((float *)&v26 + 1) == 1.0;
  if (*((float *)&v26 + 1) == 1.0)
  {
    unint64_t v24 = 0;
    unint64_t v26 = 0;
  }
  if ((v21 & 1) == 0)
  {
LABEL_55:
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v55;
    *(void *)(v37 + 24) = v50;
    *(void *)(v37 + 32) = v8;
    *(void *)(v37 + 40) = v19;
    *(void *)(v37 + 48) = v9;
    *(void *)(v37 + 56) = v54;
    *(void *)(v37 + 64) = v53;
    *(void *)(v37 + 72) = v52;
    *(void *)(v37 + 80) = v20;
    *(void *)(v37 + 88) = v51;
    *(unsigned char *)(v37 + 132) = 12;
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v39 = v31[2];
    unint64_t v38 = v31[3];
    if (v39 >= v38 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v31);
    }
    uint64_t v31[2] = v39 + 1;
    uint64_t v40 = &v31[2 * v39];
    unsigned char v40[4] = v37;
    uint64_t v35 = v40 + 4;
    goto LABEL_61;
  }
LABEL_44:
  if (!v30)
  {
    unint64_t v29 = HIDWORD(v24);
    goto LABEL_48;
  }
  return (void *)MEMORY[0x263F8EE78];
}

unint64_t specialized static CoreMaterialCache.parseColor(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)&v22);
  if (!*((void *)&v23 + 1))
  {
    outlined destroy of Any?((uint64_t)&v22);
    return 0;
  }
  type metadata accessor for [String : Any]();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (!*(void *)(*(void *)&v21 + 16)) {
    goto LABEL_17;
  }
  unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x6168706C61, 0xE500000000000000);
  if ((v2 & 1) == 0) {
    goto LABEL_17;
  }
  outlined init with copy of Any(*(void *)(*(void *)&v21 + 56) + 32 * v1, (uint64_t)&v22);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  if (*(void *)(*(void *)&v21 + 16))
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x6574696877, 0xE500000000000000);
    if (v4)
    {
      outlined init with copy of Any(*(void *)(*(void *)&v21 + 56) + 32 * v3, (uint64_t)&v22);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        float v5 = v21;
        if (v5 <= 0.0) {
          float v6 = -v5;
        }
        else {
          float v6 = v21;
        }
        if (v6 <= 0.04045)
        {
          float v7 = v6 * 0.077399;
        }
        else
        {
          float v7 = 1.0;
          if (v6 != 1.0) {
            float v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
          }
        }
        if (v5 <= 0.0) {
          float v17 = -v7;
        }
        else {
          float v17 = v7;
        }
        float v9 = v17;
        float v10 = v17;
        return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
      }
    }
  }
  if (*(void *)(*(void *)&v21 + 16)
    && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(6579570, 0xE300000000000000), (v12 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(*(void *)&v21 + 56) + 32 * v11, (uint64_t)&v22),
        (swift_dynamicCast() & 1) != 0)
    && *(void *)(*(void *)&v21 + 16)
    && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E65657267, 0xE500000000000000), (v14 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(*(void *)&v21 + 56) + 32 * v13, (uint64_t)&v22),
        (swift_dynamicCast() & 1) != 0))
  {
    if (*(void *)(*(void *)&v21 + 16)
      && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(1702194274, 0xE400000000000000), (v16 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(*(void *)&v21 + 56) + 32 * v15, (uint64_t)&v22);
    }
    else
    {
      long long v22 = 0u;
      long long v23 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v23 + 1))
    {
      if (swift_dynamicCast())
      {
        float v18 = v21;
        float v19 = v21;
        float v20 = v21;
        LOBYTE(v22) = 0;
        float v10 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v22, v18, v19, v20);
        return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v22);
    }
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
  }
  float v9 = 1.0;
  float v10 = 1.0;
  return LODWORD(v10) | ((unint64_t)LODWORD(v9) << 32);
}

unint64_t ContentStyle.MaterialStyle.coreMaterialDescription.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 17);
  id v3 = Material.ResolvedMaterial.coreMaterialRecipe.getter();
  char v4 = (void **)MEMORY[0x263F36760];
  if (v2 != 1) {
    char v4 = (void **)MEMORY[0x263F36750];
  }
  float v5 = *v4;
  if (v2 == 2)
  {
    float v6 = (id *)MEMORY[0x263F36780];
  }
  else
  {
    float v6 = (id *)MEMORY[0x263F36768];
    switch(v1)
    {
      case 1:
        float v6 = (id *)MEMORY[0x263F36778];
        break;
      case 2:
        float v6 = (id *)MEMORY[0x263F36788];
        break;
      case 3:
      case 4:
        float v6 = (id *)MEMORY[0x263F36770];
        if (!v2) {
          float v6 = (id *)MEMORY[0x263F36788];
        }
        break;
      default:
        break;
    }
  }
  id v7 = *v6;
  id v8 = v5;
  Material.ResolvedMaterial.coreMaterialOptions.getter();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = (id)MTVisualStylingCreateDictionaryRepresentation();

  if (v10)
  {
    uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    return v11;
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    return specialized Dictionary.init(dictionaryLiteral:)(v13);
  }
}

uint64_t specialized CoreMaterialCache.load(material:)(uint64_t *a1)
{
  uint64_t v196 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  id v4 = Material.ResolvedMaterial.coreMaterialRecipe.getter();
  *(void *)&long long v191 = v1;
  BYTE8(v191) = v2;
  HIDWORD(v191) = v3;
  Material.ResolvedMaterial.coreMaterialOptions.getter();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = (id)MTMaterialCreateDictionaryRepresentation();

  if (!v6) {
    __break(1u);
  }
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v7 + 16)) {
    goto LABEL_10;
  }
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x737265746C6966, 0xE700000000000000);
  if ((v9 & 1) == 0) {
    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v191);
  type metadata accessor for [[String : Any]](0, (unint64_t *)&lazy cache variable for type metadata for [[String : Any]], (uint64_t (*)(uint64_t))type metadata accessor for [String : Any], MEMORY[0x263F8D488]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_10;
  }
  if ((v3 & 0x80) != 0)
  {
    swift_bridgeObjectRelease();
    float v14 = 0.0;
    goto LABEL_20;
  }
  if ((v3 & 0x20) != 0)
  {
    swift_bridgeObjectRelease();
    float v14 = 1.0;
    goto LABEL_20;
  }
  if (*(void *)(v7 + 16)
    && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C616373, 0xE500000000000000), (v11 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)&v191);
  }
  else
  {
    long long v191 = 0u;
    long long v192 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v192 + 1))
  {
    if (swift_dynamicCast())
    {
      float v14 = *(double *)v187;
      goto LABEL_20;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v191);
  }
  float v14 = 0.25;
LABEL_20:
  uint64_t v15 = *(void *)(*(void *)v187 + 16);
  if (!v15)
  {
    float v17 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
    swift_bridgeObjectRelease();
    if (v17[2])
    {
      uint64_t v18 = swift_allocObject();
      *(float *)(v18 + 16) = v14;
      *(void *)(v18 + 28) = 0;
      *(void *)(v18 + 20) = 0;
      *(void *)(v18 + 40) = v17;
      if (one-time initialization token for normal != -1) {
        swift_once();
      }
      uint64_t v19 = static GraphicsBlendMode.normal;
      char v20 = byte_26B0EB4A0;
      _sypSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyMaterialLayer>, (uint64_t)&type metadata for AnyMaterialLayer, MEMORY[0x263F8E0F8]);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
      *(void *)(v12 + 32) = v18;
      *(_DWORD *)(v12 + 40) = 1065353216;
      *(void *)(v12 + 48) = v19;
      *(unsigned char *)(v12 + 56) = v20;
      outlined copy of GraphicsBlendMode(v19, v20);
      return v12;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v16 = *(void *)v187 + 32;
  float v17 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v21 = *(void *)v16;
    if (!*(void *)(*(void *)v16 + 16)) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
    if ((v23 & 1) == 0) {
      goto LABEL_29;
    }
    outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v22, (uint64_t)v187);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_29;
    }
    long long v24 = v189;
    if (v189 == __PAIR128__(0xED00006574617275, 0x746153726F6C6F63)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v21 + 16)
        && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75),
            (v26 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v25, (uint64_t)v187);
      }
      else
      {
        memset(v187, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (*(void *)&v187[24])
      {
        if (swift_dynamicCast())
        {
          uint64_t v27 = v189;
          if (*(double *)&v189 != 1.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            }
            unint64_t v29 = v17[2];
            unint64_t v28 = v17[3];
            if (v29 >= v28 >> 1) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v17);
            }
            long long v17[2] = v29 + 1;
            BOOL v30 = &v17[15 * v29];
            unsigned char v30[4] = v27;
            *(_OWORD *)(v30 + 5) = 0u;
            *(_OWORD *)(v30 + 7) = 0u;
            *(_OWORD *)(v30 + 9) = 0u;
            *(_OWORD *)(v30 + 11) = 0u;
            *(_OWORD *)(v30 + 13) = 0u;
            *(_OWORD *)(v30 + 15) = 0u;
            *(_OWORD *)((char *)v30 + 132) = 0u;
            *((unsigned char *)v30 + 148) = 7;
          }
        }
        goto LABEL_30;
      }
      goto LABEL_62;
    }
    if (v24 == __PAIR128__(0xEF7373656E746867, 0x697242726F6C6F63)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v21 + 16)
        && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75),
            (v32 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v31, (uint64_t)v187);
      }
      else
      {
        memset(v187, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (*(void *)&v187[24])
      {
        if (swift_dynamicCast())
        {
          uint64_t v33 = v189;
          if (*(double *)&v189 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            }
            unint64_t v35 = v17[2];
            unint64_t v34 = v17[3];
            if (v35 >= v34 >> 1) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v17);
            }
            long long v17[2] = v35 + 1;
            char v36 = &v17[15 * v35];
            _DWORD v36[4] = v33;
            *(_OWORD *)(v36 + 5) = 0u;
            *(_OWORD *)(v36 + 7) = 0u;
            *(_OWORD *)(v36 + 9) = 0u;
            *(_OWORD *)(v36 + 11) = 0u;
            *(_OWORD *)(v36 + 13) = 0u;
            *(_OWORD *)(v36 + 15) = 0u;
            *(_OWORD *)((char *)v36 + 132) = 0u;
            *((unsigned char *)v36 + 148) = 8;
          }
        }
        goto LABEL_30;
      }
LABEL_62:
      outlined destroy of Any?((uint64_t)v187);
      goto LABEL_30;
    }
    if (v24 == __PAIR128__(0xEC00000072756C42, 0x6E61697373756167)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if ((v3 & 0x20) == 0)
      {
        if (*(void *)(v21 + 16))
        {
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0x6461527475706E69, 0xEB00000000737569);
          if (v38)
          {
            outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v37, (uint64_t)v187);
            if (swift_dynamicCast())
            {
              double v39 = *(double *)&v189;
              if (*(void *)(v21 + 16)
                && (unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x7469447475706E69, 0xEB00000000726568),
                    (v41 & 1) != 0)
                && (outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v40, (uint64_t)v187),
                    swift_dynamicCast()))
              {
                int v42 = v189;
              }
              else
              {
                int v42 = 0;
              }
              if (*(void *)(v21 + 16)
                && (unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x800000024621EFD0),
                    (v49 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v48, (uint64_t)v187);
              }
              else
              {
                memset(v187, 0, 32);
              }
              swift_bridgeObjectRelease();
              if (*(void *)&v187[24])
              {
                if (swift_dynamicCast())
                {
                  unsigned int v50 = v189;
                  goto LABEL_101;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)v187);
              }
              unsigned int v50 = 0;
LABEL_101:
              if (v39 > 0.0)
              {
                int v178 = v42;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
                }
                unint64_t v55 = v17[2];
                unint64_t v54 = v17[3];
                if (v55 >= v54 >> 1) {
                  float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v17);
                }
                long long v17[2] = v55 + 1;
                id v56 = &v17[15 * v55];
                *((double *)v56 + 4) = v39;
                uint64_t v57 = 256;
                if (!v178) {
                  uint64_t v57 = 0;
                }
                v56[5] = v57 | v50;
                *((_OWORD *)v56 + 3) = 0u;
                *((_OWORD *)v56 + 4) = 0u;
                *((_OWORD *)v56 + 5) = 0u;
                *((_OWORD *)v56 + 6) = 0u;
                *((_OWORD *)v56 + 7) = 0u;
                *((_OWORD *)v56 + 8) = 0u;
                *(void *)((char *)v56 + 141) = 0;
              }
              goto LABEL_30;
            }
          }
        }
      }
      goto LABEL_29;
    }
    if (v24 == __PAIR128__(0xEC00000072756C42, 0x656C626169726176)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if ((v3 & 0x20) == 0)
      {
        if (*(void *)(v21 + 16))
        {
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(0x6461527475706E69, 0xEB00000000737569);
          if (v44)
          {
            outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v43, (uint64_t)v187);
            if (swift_dynamicCast())
            {
              double v45 = *(double *)&v189;
              if (*(void *)(v21 + 16)
                && (unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(0x73614D7475706E69, 0xEE006567616D496BLL),
                    (v47 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v46, (uint64_t)v187);
              }
              else
              {
                memset(v187, 0, 32);
              }
              outlined init with copy of Any?((uint64_t)v187, (uint64_t)&v189);
              if (*((void *)&v190 + 1))
              {
                outlined init with take of Any(&v189, v186);
                outlined init with copy of Any((uint64_t)v186, (uint64_t)v185);
                type metadata accessor for CGImageRef(0);
                swift_dynamicCast();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
                uint64_t v58 = (CGImage *)v186[4];
                outlined destroy of Any?((uint64_t)v187);
                if (v58)
                {
                  int64_t Width = CGImageGetWidth(v58);
                  int64_t Height = CGImageGetHeight(v58);
                  uint64_t v60 = v58;
                  uint64_t v61 = *(void *)(v21 + 16);
                  unint64_t v179 = v60;
                  uint64_t v170 = v60;
                  if (v61
                    && (unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(0x7469447475706E69, 0xEB00000000726568),
                        (v63 & 1) != 0)
                    && (outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v62, (uint64_t)v187),
                        swift_dynamicCast()))
                  {
                    int v162 = v189;
                  }
                  else
                  {
                    int v162 = 0;
                  }
                  if (*(void *)(v21 + 16)
                    && (unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x800000024621EFD0),
                        (v70 & 1) != 0))
                  {
                    outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v69, (uint64_t)v187);
                  }
                  else
                  {
                    memset(v187, 0, 32);
                  }
                  swift_bridgeObjectRelease();
                  if (*(void *)&v187[24])
                  {
                    if (swift_dynamicCast())
                    {
                      unsigned int v71 = v189;
                      goto LABEL_137;
                    }
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)v187);
                  }
                  unsigned int v71 = 0;
LABEL_137:
                  double v72 = (double)Width;
                  double v73 = v45 + v45;
                  if (v73 <= 0.0)
                  {
                    outlined consume of VariableBlurStyle.Mask(v179, 0, 0x3FF0000000000000, COERCE__INT64((double)Width), COERCE__INT64((double)Height), 0, 0, 0x100000000, 0, 0, 0, 0, 2, 1u);
                  }
                  else
                  {
                    double v166 = (double)Width;
                    outlined copy of GraphicsImage.Contents?(v179, 0);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
                    }
                    unint64_t v75 = v17[2];
                    unint64_t v74 = v17[3];
                    if (v75 >= v74 >> 1) {
                      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v74 > 1), v75 + 1, 1, v17);
                    }
                    long long v17[2] = v75 + 1;
                    uint64_t v76 = &v17[15 * v75];
                    *((double *)v76 + 4) = v73;
                    uint64_t v77 = 256;
                    if (!v162) {
                      uint64_t v77 = 0;
                    }
                    v76[5] = v77 | v71;
                    v76[6] = v179;
                    *(_OWORD *)(v76 + 7) = xmmword_2461C55F0;
                    *((double *)v76 + 9) = v72;
                    *((double *)v76 + 10) = (double)Height;
                    *(_OWORD *)(v76 + 11) = 0u;
                    v76[13] = 0x100000000;
                    *((_OWORD *)v76 + 7) = 0u;
                    *((_OWORD *)v76 + 8) = 0u;
                    *((_DWORD *)v76 + 36) = 50397442;
                    *((unsigned char *)v76 + 148) = 1;

                    outlined consume of VariableBlurStyle.Mask(v179, 0, 0x3FF0000000000000, *(uint64_t *)&v166, COERCE__INT64((double)Height), 0, 0, 0x100000000, 0, 0, 0, 0, 2, 1u);
                  }
                  goto LABEL_30;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)v187);
              }
            }
          }
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    if (v24 == __PAIR128__(0xEC000000726F6C6FLL, 0x4365676172657661)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v3 & 0x20) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v52 = v17[2];
        unint64_t v51 = v17[3];
        if (v52 >= v51 >> 1) {
          float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v17);
        }
        long long v17[2] = v52 + 1;
        uint64_t v53 = &v17[15 * v52];
        *((_OWORD *)v53 + 2) = 0u;
        *((_OWORD *)v53 + 3) = 0u;
        *((_OWORD *)v53 + 4) = 0u;
        *((_OWORD *)v53 + 5) = 0u;
        *((_OWORD *)v53 + 6) = 0u;
        *((_OWORD *)v53 + 7) = 0u;
        *((_OWORD *)v53 + 8) = 0u;
        *((_DWORD *)v53 + 36) = 0;
        *((unsigned char *)v53 + 148) = 16;
      }
      goto LABEL_30;
    }
    if (v24 == __PAIR128__(0x800000024621EF70, 0xD000000000000011)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v21 + 16))
      {
        unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6D417475706E69, 0xEB00000000746E75);
        if (v65)
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v64, (uint64_t)v187);
          if (swift_dynamicCast())
          {
            double v66 = *(double *)&v189;
            if (*(void *)(v21 + 16)
              && (unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C61567475706E69, 0xEB00000000736575),
                  (v68 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v67, (uint64_t)v187);
            }
            else
            {
              memset(v187, 0, 32);
            }
            swift_bridgeObjectRelease();
            if (*(void *)&v187[24])
            {
              _sypSgMaTm_2(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
              if (swift_dynamicCast())
              {
                uint64_t result = v189;
                unint64_t v91 = *(void *)(v189 + 16);
                if (!v91) {
                  goto LABEL_252;
                }
                if (v91 == 1) {
                  goto LABEL_253;
                }
                if (v91 < 3) {
                  goto LABEL_254;
                }
                if (v91 == 3) {
                  goto LABEL_255;
                }
                float v92 = *(double *)(v189 + 32);
                float v171 = v92;
                float v93 = *(double *)(v189 + 40);
                float v181 = v93;
                double v94 = *(double *)(v189 + 56);
                float v95 = *(double *)(v189 + 48);
                float v167 = v95;
                swift_bridgeObjectRelease();
                *(float *)&unsigned int v96 = v94;
                int32x2_t v182 = (int32x2_t)__PAIR64__(v96, LODWORD(v181));
                unint64_t v97 = __PAIR64__(LODWORD(v167), LODWORD(v171));
                goto LABEL_215;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)v187);
            }
            unint64_t v97 = 0x3F80000000000000;
            int32x2_t v182 = (int32x2_t)0x3F80000000000000;
LABEL_215:
            unint64_t v177 = v97;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
            }
            unint64_t v135 = v17[2];
            unint64_t v134 = v17[3];
            if (v135 >= v134 >> 1) {
              float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v134 > 1), v135 + 1, 1, v17);
            }
            *(float *)&unsigned int v136 = v66;
            long long v17[2] = v135 + 1;
            long long v137 = &v17[15 * v135];
            v138.i64[0] = v177;
            v138.i64[1] = HIDWORD(v177);
            *((int8x16_t *)v137 + 2) = vorrq_s8((int8x16_t)vshll_n_s32(v182, 0x20uLL), v138);
            v137[6] = v136;
            *(_OWORD *)(v137 + 7) = 0u;
            *(_OWORD *)(v137 + 9) = 0u;
            *(_OWORD *)(v137 + 11) = 0u;
            *(_OWORD *)(v137 + 13) = 0u;
            *(_OWORD *)(v137 + 15) = 0u;
            *(_OWORD *)((char *)v137 + 132) = 0u;
            *((unsigned char *)v137 + 148) = 13;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_29;
    }
    if (v24 != __PAIR128__(0xE600000000000000, 0x736576727563)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v24 == __PAIR128__(0xEB00000000786972, 0x74614D726F6C6F63))
      {
        swift_bridgeObjectRelease();
LABEL_221:
        if (*(void *)(v21 + 16)
          && (unint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000024621EEE0),
              (v141 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v140, (uint64_t)&v189);
        }
        else
        {
          long long v189 = 0u;
          long long v190 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v190 + 1))
        {
          type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSValue);
          if (swift_dynamicCast())
          {
            id v142 = v186[0];
            *(_OWORD *)&v187[4] = 0uLL;
            *(void *)&v187[20] = 0x3F80000000000000;
            *(_DWORD *)char v187 = 1065353216;
            memset(&v187[28], 0, 20);
            *(_DWORD *)unint64_t v188 = 1065353216;
            memset(&v188[4], 0, 20);
            *(void *)&v188[24] = 1065353216;
            objc_msgSend(v186[0], sel_getValue_, v187);
            long long v193 = *(_OWORD *)&v187[32];
            long long v194 = *(_OWORD *)v188;
            long long v195 = *(_OWORD *)&v188[16];
            long long v191 = *(_OWORD *)v187;
            long long v192 = *(_OWORD *)&v187[16];
            long long v143 = *(_OWORD *)v187;
            long long v144 = *(_OWORD *)&v187[16];
            long long v145 = *(_OWORD *)&v187[32];
            long long v146 = *(_OWORD *)v188;
            uint64_t v151 = *(void *)&v188[24];
            uint64_t v153 = *(void *)&v188[16];
            if (!_ColorMatrix.isIdentity.getter())
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
              }
              unint64_t v148 = v17[2];
              unint64_t v147 = v17[3];
              if (v148 >= v147 >> 1) {
                float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v147 > 1), v148 + 1, 1, v17);
              }
              long long v17[2] = v148 + 1;
              long long v149 = &v17[15 * v148];
              *((_OWORD *)v149 + 2) = v143;
              *((_OWORD *)v149 + 3) = v144;
              *((_OWORD *)v149 + 4) = v145;
              *((_OWORD *)v149 + 5) = v146;
              v149[12] = v153;
              v149[13] = v151;
              v150 &= 0xFFFFFFFFFFFFFF00;
              v149[14] = v150;
              *((unsigned char *)v149 + 148) = 4;
            }
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v189);
        }
        goto LABEL_30;
      }
      char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v139) {
        goto LABEL_221;
      }
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v21 + 16)
      && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(0x6465527475706E69, 0xEE007365756C6156),
          (v79 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v78, (uint64_t)v187);
      _sypSgMaTm_2(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
      uint64_t v80 = swift_dynamicCast() ? v189 : 0;
    }
    else
    {
      uint64_t v80 = 0;
    }
    if (*(void *)(v21 + 16)
      && (unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000024621EF90),
          (v82 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v81, (uint64_t)v187);
      _sypSgMaTm_2(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
      uint64_t v83 = swift_dynamicCast() ? v189 : 0;
    }
    else
    {
      uint64_t v83 = 0;
    }
    if (*(void *)(v21 + 16)
      && (unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(0x756C427475706E69, 0xEF7365756C615665),
          (v85 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v84, (uint64_t)v187);
      _sypSgMaTm_2(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
      int v86 = swift_dynamicCast();
      uint64_t v87 = v189;
      if (!v86) {
        uint64_t v87 = 0;
      }
      uint64_t v180 = v87;
    }
    else
    {
      uint64_t v180 = 0;
    }
    if (*(void *)(v21 + 16)
      && (unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000024621EFB0),
          (v89 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v88, (uint64_t)v187);
    }
    else
    {
      memset(v187, 0, 32);
    }
    swift_bridgeObjectRelease();
    if (*(void *)&v187[24])
    {
      _sypSgMaTm_2(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
      uint64_t result = swift_dynamicCast();
      uint64_t v90 = result ? v189 : 0;
    }
    else
    {
      uint64_t result = outlined destroy of Any?((uint64_t)v187);
      uint64_t v90 = 0;
    }
    uint64_t v98 = 0x3F80000000000000;
    unint64_t v99 = 0x3F80000000000000;
    if (v80) {
      break;
    }
LABEL_188:
    int32x2_t v164 = (int32x2_t)v98;
    unint64_t v169 = v99;
    uint64_t v106 = 0x3F80000000000000;
    unint64_t v107 = 0x3F80000000000000;
    if (v83)
    {
      unint64_t v108 = *(void *)(v83 + 16);
      if (!v108) {
        goto LABEL_240;
      }
      if (v108 == 1) {
        goto LABEL_241;
      }
      if (v108 < 3) {
        goto LABEL_242;
      }
      if (v108 == 3) {
        goto LABEL_243;
      }
      float v109 = *(double *)(v83 + 32);
      float v160 = v109;
      float v110 = *(double *)(v83 + 40);
      float v158 = v110;
      double v111 = *(double *)(v83 + 56);
      float v112 = *(double *)(v83 + 48);
      float v173 = v112;
      uint64_t result = swift_bridgeObjectRelease();
      *(float *)&uint64_t v106 = v158;
      float v113 = v111;
      *((float *)&v106 + 1) = v113;
      unint64_t v107 = __PAIR64__(LODWORD(v173), LODWORD(v160));
    }
    int32x2_t v159 = (int32x2_t)v106;
    unint64_t v161 = v107;
    uint64_t v114 = 0x3F80000000000000;
    unint64_t v115 = 0x3F80000000000000;
    if (v180)
    {
      unint64_t v116 = *(void *)(v180 + 16);
      if (!v116) {
        goto LABEL_244;
      }
      if (v116 == 1) {
        goto LABEL_245;
      }
      if (v116 < 3) {
        goto LABEL_246;
      }
      if (v116 == 3) {
        goto LABEL_247;
      }
      float v117 = *(double *)(v180 + 32);
      float v156 = v117;
      float v118 = *(double *)(v180 + 40);
      float v154 = v118;
      double v119 = *(double *)(v180 + 56);
      float v120 = *(double *)(v180 + 48);
      float v174 = v120;
      uint64_t result = swift_bridgeObjectRelease();
      *(float *)&uint64_t v114 = v154;
      float v121 = v119;
      *((float *)&v114 + 1) = v121;
      unint64_t v115 = __PAIR64__(LODWORD(v174), LODWORD(v156));
    }
    int32x2_t v155 = (int32x2_t)v114;
    unint64_t v157 = v115;
    int32x2_t v175 = (int32x2_t)0x3F80000000000000;
    unint64_t v183 = 0x3F80000000000000;
    if (v90)
    {
      unint64_t v122 = *(void *)(v90 + 16);
      if (!v122) {
        goto LABEL_248;
      }
      if (v122 == 1) {
        goto LABEL_249;
      }
      if (v122 < 3) {
        goto LABEL_250;
      }
      if (v122 == 3) {
        goto LABEL_251;
      }
      float v123 = *(double *)(v90 + 32);
      float v184 = v123;
      float v124 = *(double *)(v90 + 40);
      float v176 = v124;
      double v125 = *(double *)(v90 + 56);
      float v126 = *(double *)(v90 + 48);
      float v152 = v126;
      swift_bridgeObjectRelease();
      *(float *)&unsigned int v127 = v125;
      int32x2_t v175 = (int32x2_t)__PAIR64__(v127, LODWORD(v176));
      unint64_t v183 = __PAIR64__(LODWORD(v152), LODWORD(v184));
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    }
    unint64_t v129 = v17[2];
    unint64_t v128 = v17[3];
    if (v129 >= v128 >> 1) {
      float v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v128 > 1), v129 + 1, 1, v17);
    }
    long long v17[2] = v129 + 1;
    unsigned int v130 = (int8x16_t *)&v17[15 * v129];
    v131.i64[0] = v169;
    v131.i64[1] = HIDWORD(v169);
    int8x16_t v132 = vorrq_s8((int8x16_t)vshll_n_s32(v164, 0x20uLL), v131);
    v131.i64[0] = v161;
    v131.i64[1] = HIDWORD(v161);
    v130[2] = v132;
    v130[3] = vorrq_s8((int8x16_t)vshll_n_s32(v159, 0x20uLL), v131);
    v131.i64[0] = v157;
    v131.i64[1] = HIDWORD(v157);
    int8x16_t v133 = vorrq_s8((int8x16_t)vshll_n_s32(v155, 0x20uLL), v131);
    v131.i64[0] = v183;
    v131.i64[1] = HIDWORD(v183);
    v130[4] = v133;
    v130[5] = vorrq_s8((int8x16_t)vshll_n_s32(v175, 0x20uLL), v131);
    v130[9].i8[4] = 14;
LABEL_30:
    v16 += 8;
    if (!--v15) {
      goto LABEL_23;
    }
  }
  unint64_t v100 = *(void *)(v80 + 16);
  if (v100)
  {
    if (v100 == 1) {
      goto LABEL_237;
    }
    if (v100 < 3) {
      goto LABEL_238;
    }
    if (v100 == 3) {
      goto LABEL_239;
    }
    float v101 = *(double *)(v80 + 32);
    float v168 = v101;
    float v102 = *(double *)(v80 + 40);
    float v163 = v102;
    double v103 = *(double *)(v80 + 56);
    float v104 = *(double *)(v80 + 48);
    float v172 = v104;
    uint64_t result = swift_bridgeObjectRelease();
    *(float *)&uint64_t v98 = v163;
    float v105 = v103;
    *((float *)&v98 + 1) = v105;
    unint64_t v99 = __PAIR64__(LODWORD(v172), LODWORD(v168));
    goto LABEL_188;
  }
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  __break(1u);
LABEL_246:
  __break(1u);
LABEL_247:
  __break(1u);
LABEL_248:
  __break(1u);
LABEL_249:
  __break(1u);
LABEL_250:
  __break(1u);
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
LABEL_255:
  __break(1u);
  return result;
}

unint64_t Material.ResolvedMaterial.coreMaterialOptions.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 8);
  char v3 = *((unsigned char *)v0 + 12);
  type metadata accessor for [[String : Any]](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  uint64_t v6 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 72) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v7;
  *(void *)(inited + 120) = v6;
  *(unsigned char *)(inited + 96) = (v3 & 2) != 0;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  unint64_t v20 = v8;
  if (!v2)
  {
    char v9 = *(void **)(v1 + 48);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    if (v9)
    {
      uint64_t v19 = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
      *(void *)&long long v18 = v9;
      outlined init with take of Any(&v18, v17);
      id v14 = v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v20 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v12, v13, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = v8;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(v10, v11, &v18);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v18);
    }
    return v20;
  }
  return v8;
}

void type metadata accessor for [[String : Any]](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for (ObjectIdentifier, Any)(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (ObjectIdentifier, Any)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for _DictionaryStorage<String, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, Any>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
    }
  }
}

id Material.ResolvedMaterial.coreMaterialRecipe.getter()
{
  uint64_t v1 = *(void **)v0;
  int v2 = *(_DWORD *)(v0 + 12);
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) == 3)
    {
      switch((unint64_t)v1)
      {
        case 1uLL:
          if (v2) {
            unint64_t v8 = (void **)MEMORY[0x263F36710];
          }
          else {
            unint64_t v8 = (void **)MEMORY[0x263F36718];
          }
          goto LABEL_24;
        case 2uLL:
          if (v2) {
            unint64_t v8 = (void **)MEMORY[0x263F366E8];
          }
          else {
            unint64_t v8 = (void **)MEMORY[0x263F366F0];
          }
          goto LABEL_24;
        case 3uLL:
        case 4uLL:
          if (v2) {
            uint64_t v5 = (void **)MEMORY[0x263F366F8];
          }
          else {
            uint64_t v5 = (void **)MEMORY[0x263F36700];
          }
          uint64_t v10 = *v5;
          outlined copy of Material.ID((uint64_t)v1, 3u);
          uint64_t v9 = v10;
          goto LABEL_25;
        case 5uLL:
          if (v2) {
            unint64_t v8 = (void **)MEMORY[0x263F366D8];
          }
          else {
            unint64_t v8 = (void **)MEMORY[0x263F366E0];
          }
          goto LABEL_24;
        case 6uLL:
        case 7uLL:
          goto LABEL_28;
        default:
          if (v2) {
            unint64_t v8 = (void **)MEMORY[0x263F36720];
          }
          else {
            unint64_t v8 = (void **)MEMORY[0x263F36728];
          }
LABEL_24:
          uint64_t v9 = *v8;
LABEL_25:
          id result = v9;
          break;
      }
    }
    else
    {
LABEL_28:
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  else
  {
    if (v2)
    {
      uint64_t v4 = v1[4];
      uint64_t v3 = v1[5];
    }
    else
    {
      uint64_t v4 = v1[2];
      uint64_t v3 = v1[3];
    }
    swift_retain();
    uint64_t v6 = MEMORY[0x24C522820](v4, v3);
    outlined consume of Material.ID((uint64_t)v1, 0);
    return (id)v6;
  }
  return result;
}

void type metadata accessor for (String, Any)()
{
  if (!lazy cache variable for type metadata for (String, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    }
  }
}

uint64_t initializeWithCopy for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  int v18 = *(_DWORD *)(a2 + 112);
  char v19 = *(unsigned char *)(a2 + 116);
  outlined copy of GraphicsFilter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, SBYTE2(v18));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(_DWORD *)(a1 + 112) = v18;
  *(unsigned char *)(a1 + 116) = v19;
  return a1;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  id v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  int64_t v11 = v8 - v10;
  id result = specialized Sequence._copyContents(initializing:)(&v47, (uint64_t)&v3[15 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, result);
    uint64_t v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_31;
    }
    void v3[2] = v14;
  }
  if (result != v11)
  {
LABEL_13:
    id result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_16:
  if (!v48) {
    goto LABEL_13;
  }
  unint64_t v15 = v48 - 1;
  if (!__OFSUB__(v48, 1))
  {
    int64_t v16 = v3[2];
    uint64_t v17 = specialized Array.subscript.read(v46, v48 - 1, v47);
    id v19 = *(id *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(unsigned int *)(v18 + 112);
    uint64_t v22 = *(unsigned __int8 *)(v18 + 116);
    uint64_t v34 = *(void *)(v18 + 104);
    uint64_t v35 = *(void *)(v18 + 96);
    uint64_t v36 = *(void *)(v18 + 88);
    uint64_t v37 = *(void *)(v18 + 80);
    uint64_t v38 = *(void *)(v18 + 72);
    uint64_t v39 = *(void *)(v18 + 64);
    uint64_t v44 = *(void *)(v18 + 24);
    double v45 = *(void **)(v18 + 16);
    uint64_t v42 = *(void *)(v18 + 40);
    uint64_t v43 = *(void *)(v18 + 32);
    uint64_t v40 = *(void *)(v18 + 56);
    uint64_t v41 = *(void *)(v18 + 48);
    outlined copy of GraphicsFilter(*(id *)v18, v20, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v35, v34, *(_DWORD *)(v18 + 112), BYTE2(*(_DWORD *)(v18 + 112)));
    id result = ((uint64_t (*)(void (**)(void ***), void))v17)(v46, 0);
    if (v22 == 255) {
      goto LABEL_13;
    }
    uint64_t v32 = v20;
    id v33 = v19;
    unint64_t v23 = v21 | (v22 << 32);
    while (1)
    {
      unint64_t v24 = v3[3];
      int64_t v31 = v24 >> 1;
      if ((uint64_t)(v24 >> 1) < v16 + 1)
      {
        id result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v16 + 1, 1, v3);
        id v3 = (void *)result;
        int64_t v31 = *(void *)(result + 24) >> 1;
      }
      if (v16 < v31) {
        break;
      }
LABEL_20:
      void v3[2] = v16;
      if (BYTE4(v23) == 255) {
        goto LABEL_13;
      }
    }
    LOBYTE(v25) = BYTE4(v23);
    uint64_t v26 = 15 * v16;
    unsigned int v27 = v23;
    while (1)
    {
      unint64_t v28 = &v3[v26];
      _OWORD v28[4] = v33;
      void v28[5] = v32;
      v28[6] = v45;
      v28[7] = v44;
      v28[8] = v43;
      v28[9] = v42;
      v28[10] = v41;
      v28[11] = v40;
      v28[12] = v39;
      v28[13] = v38;
      v28[14] = v37;
      v28[15] = v36;
      unsigned char v28[16] = v35;
      v28[17] = v34;
      *((_DWORD *)v28 + 36) = v27;
      int64_t v11 = v16 + 1;
      *((unsigned char *)v28 + 148) = v25;
      if (!v15) {
        break;
      }
      BOOL v13 = __OFSUB__(v15--, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_33;
      }
      unint64_t v29 = specialized Array.subscript.read(v46, v15, v47);
      unsigned int v27 = *(_DWORD *)(v30 + 112);
      unsigned int v25 = *(unsigned __int8 *)(v30 + 116);
      unint64_t v23 = v27 | ((unint64_t)*(unsigned __int8 *)(v30 + 116) << 32);
      uint64_t v34 = *(void *)(v30 + 104);
      uint64_t v35 = *(void *)(v30 + 96);
      uint64_t v36 = *(void *)(v30 + 88);
      uint64_t v37 = *(void *)(v30 + 80);
      uint64_t v38 = *(void *)(v30 + 72);
      uint64_t v39 = *(void *)(v30 + 64);
      uint64_t v32 = *(void *)(v30 + 8);
      id v33 = *(id *)v30;
      uint64_t v44 = *(void *)(v30 + 24);
      double v45 = *(void **)(v30 + 16);
      uint64_t v42 = *(void *)(v30 + 40);
      uint64_t v43 = *(void *)(v30 + 32);
      uint64_t v40 = *(void *)(v30 + 56);
      uint64_t v41 = *(void *)(v30 + 48);
      outlined copy of GraphicsFilter(*(id *)v30, v32, v45, v44, v43, v42, v41, v40, v39, v38, v37, v36, v35, v34, v27, SBYTE2(v27));
      id result = ((uint64_t (*)(void (**)(void ***), void))v29)(v46, 0);
      ++v16;
      if (v25 <= 0xFEuLL)
      {
        v26 += 15;
        if (v11 < v31) {
          continue;
        }
      }
      goto LABEL_20;
    }
LABEL_31:
    void v3[2] = v11;
    goto LABEL_13;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v11 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  if (!a3)
  {
    uint64_t v11 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!v6)
  {
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  uint64_t v8 = a2;
  uint64_t v9 = a4 + 120 * v6 - 88;
  for (uint64_t i = -1; ; --i)
  {
    uint64_t v11 = v6 + i;
    uint64_t v12 = *(void **)v9;
    uint64_t v13 = *(void *)(v9 + 8);
    uint64_t v14 = *(void **)(v9 + 16);
    uint64_t v15 = *(void *)(v9 + 24);
    uint64_t v16 = *(void *)(v9 + 32);
    uint64_t v17 = *(void *)(v9 + 40);
    uint64_t v18 = *(void *)(v9 + 48);
    uint64_t v19 = *(void *)(v9 + 56);
    uint64_t v20 = *(void *)(v9 + 64);
    uint64_t v21 = *(void *)(v9 + 72);
    uint64_t v22 = *(void *)(v9 + 80);
    uint64_t v23 = *(void *)(v9 + 88);
    uint64_t v24 = *(void *)(v9 + 96);
    uint64_t v25 = *(void *)(v9 + 104);
    int v26 = *(_DWORD *)(v9 + 112);
    char v27 = *(unsigned char *)(v9 + 116);
    *(void *)uint64_t v8 = *(void *)v9;
    *(void *)(v8 + 8) = v13;
    *(void *)(v8 + 16) = v14;
    *(void *)(v8 + 24) = v15;
    *(void *)(v8 + 32) = v16;
    *(void *)(v8 + 40) = v17;
    *(void *)(v8 + 48) = v18;
    *(void *)(v8 + 56) = v19;
    *(void *)(v8 + 64) = v20;
    *(void *)(v8 + 72) = v21;
    *(void *)(v8 + 80) = v22;
    *(void *)(v8 + 88) = v23;
    *(void *)(v8 + 96) = v24;
    *(void *)(v8 + 104) = v25;
    *(_DWORD *)(v8 + 112) = v26;
    *(unsigned char *)(v8 + 116) = v27;
    if (!(a3 + i)) {
      break;
    }
    if (!v11) {
      goto LABEL_10;
    }
    v9 -= 120;
    v8 += 120;
    outlined copy of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, SBYTE2(v26));
  }
  uint64_t v6 = a3;
LABEL_10:
  outlined copy of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, SBYTE2(v26));
LABEL_13:
  *a1 = a4;
  a1[1] = v11;
  return v6;
}

id outlined copy of GraphicsFilter(id result, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15) {
    return result;
  }
  if (a16 == 1) {
    return outlined copy of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Rectangle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.NamedImageProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _FrameLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

float thunk for @escaping @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = *(float (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  float v7 = v4(a2, a3, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned RBSymbolStyle, @guaranteed String?) -> (@unowned RBColor)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(a1, a2, a3, v3 + 16, *(void *)(v3 + 56));
}

void closure #1 in _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1;
  switch(a1)
  {
    case 0u:
      goto LABEL_6;
    case 5u:
      uint64_t v5 = 1;
      goto LABEL_6;
    case 6u:
      uint64_t v5 = 2;
      goto LABEL_6;
    case 7u:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 8u:
      uint64_t v5 = 4;
LABEL_6:
      uint64_t v6 = *(void *)(a4 + 16);
      uint64_t v7 = *(void *)(a4 + 24) >> 1;
      uint64_t v8 = v7 - v6;
      if (__OFSUB__(v7, v6))
      {
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v9 = *(unsigned __int8 *)(a4 + 32);
      BOOL v10 = __OFADD__(v9, v8);
      uint64_t v11 = v9 + v8;
      if (v10)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }
      if (v11 == v9) {
        return;
      }
      if (v11 < v9) {
        goto LABEL_42;
      }
      uint64_t v12 = v11 + ~v9;
      if (v12 < v5) {
        uint64_t v5 = v12;
      }
      uint64_t v13 = v5 - v9;
      if (v13 < v6 || v13 >= v7) {
        goto LABEL_43;
      }
      uint64_t v15 = *(void *)(a4 + 8) + 120 * v13;
      unsigned __int8 v16 = *(unsigned char *)(v15 + 88);
      int v17 = *(_DWORD *)(v15 + 92);
      uint64_t v18 = *(void *)(v15 + 96);
      unsigned __int8 v19 = *(unsigned char *)(v15 + 104);
      uint64_t v20 = *(void *)(v15 + 112);
      long long v21 = *(_OWORD *)(v15 + 24);
      long long v49 = *(_OWORD *)(v15 + 8);
      long long v50 = v21;
      long long v22 = *(_OWORD *)(v15 + 56);
      long long v51 = *(_OWORD *)(v15 + 40);
      long long v52 = v22;
      long long v53 = *(_OWORD *)(v15 + 72);
      unsigned __int8 v54 = v16;
      int v55 = v17;
      uint64_t v56 = v18;
      unsigned __int8 v57 = v19;
      uint64_t v58 = v20;
      unint64_t v23 = (unint64_t)_ShapeStyle_Pack.Style.color.getter();
      float v25 = v24;
      if (v26) {
        return;
      }
LABEL_18:
      float v27 = -*(float *)&v23;
      if (*(float *)&v23 > 0.0) {
        float v27 = *(float *)&v23;
      }
      if (v27 > 0.0031308 && v27 != 1.0) {
        powf(v27, 0.41667);
      }
      float v39 = -*((float *)&v23 + 1);
      if (*((float *)&v23 + 1) > 0.0) {
        float v39 = *((float *)&v23 + 1);
      }
      if (v39 > 0.0031308 && v39 != 1.0) {
        powf(v39, 0.41667);
      }
      float v40 = -v25;
      if (v25 > 0.0) {
        float v40 = v25;
      }
      if (v40 > 0.0031308 && v40 != 1.0) {
        powf(v40, 0.41667);
      }
      return;
    case 9u:
      if (!a3) {
        return;
      }
      uint64_t v48 = a5;
      unsigned __int8 v47 = 2;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.subscript.getter(&v47, 0, (uint64_t)&v49);
      long long v30 = v49;
      uint64_t v31 = *((void *)&v50 + 1);
      uint64_t v32 = v51;
      uint64_t v42 = v50;
      uint64_t v43 = *((void *)&v51 + 1);
      uint64_t v33 = *((void *)&v52 + 1);
      uint64_t v41 = v52;
      long long v34 = v53;
      int v35 = v54;
      uint64_t v45 = v56;
      unsigned __int8 v44 = v57;
      outlined copy of _ShapeStyle_Pack.Fill((id)v49, BYTE8(v49), (void *)v50, *((void **)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54);
      unsigned __int8 v46 = v31;
      outlined consume of _ShapeStyle_Pack.Fill(v30, BYTE8(v30), v42, v31, v32, v43, v41, v33, v34, *((uint64_t *)&v34 + 1), v35);
      outlined consume of GraphicsBlendMode?(v45, v44);
      swift_bridgeObjectRelease();
      if (v35 == 6)
      {
        long long v49 = v30;
        LOWORD(v50) = v42 & 0x101;
        BYTE2(v50) = BYTE2(v42) & 1;
        *((void *)&v50 + 1) = v31;
        unint64_t v23 = ResolvedMulticolorStyle.resolve(name:)(a2, a3);
        float v25 = v36;
        char v38 = v37;
        outlined consume of _ShapeStyle_Pack.Fill(v30, BYTE8(v30), v42, v46, v32, v43, v41, v33, v34, *((uint64_t *)&v34 + 1), 6);
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        outlined consume of _ShapeStyle_Pack.Fill(v30, BYTE8(v30), v42, v31, v32, v43, v41, v33, v34, *((uint64_t *)&v34 + 1), v35);
        swift_bridgeObjectRelease();
      }
      return;
    default:
      return;
  }
}

void *_ShapeStyle_Pack.Style.color.getter()
{
  if (*(unsigned char *)(v0 + 80)) {
    return 0;
  }
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  int64_t v4 = *(void **)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 88);
  int v12 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v30 = *(void *)(v0 + 104);
  float v24 = *(void **)v0;
  uint64_t v29 = (uint64_t)v3;
  uint64_t v25 = v10;
  uint64_t v26 = v9;
  if (v12 == 255)
  {
    uint64_t v23 = *(void *)(v0 + 40);
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, 0);
    uint64_t v22 = v11;
    outlined copy of GraphicsBlendMode?(v11, 0xFFu);
    uint64_t v17 = one-time initialization token for normal;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v28 = static GraphicsBlendMode.normal;
    char v27 = byte_26B0EB4A0;
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    uint64_t v16 = v29;
    uint64_t v15 = v23;
    uint64_t v14 = v22;
    uint64_t v2 = v24;
    unsigned __int8 v13 = v21;
  }
  else
  {
    char v27 = v12 & 1;
    unsigned __int8 v13 = *(unsigned char *)(v0 + 96);
    uint64_t v14 = v11;
    uint64_t v15 = v5;
    outlined copy of _ShapeStyle_Pack.Fill(v2, v1, v3, v4, v6, v5, v8, v7, v9, v10, 0);
    outlined copy of GraphicsBlendMode?(v14, v13);
    swift_bridgeObjectRetain();
    uint64_t v28 = v14;
    uint64_t v16 = v29;
  }
  outlined copy of GraphicsBlendMode?(v14, v13);
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v2, v1, v16, v4, v6, v15, v8, v7, v26, v25, 0);
  outlined consume of GraphicsBlendMode?(v14, v13);
  swift_bridgeObjectRelease();
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v18 = static GraphicsBlendMode.normal;
  char v19 = byte_26B0EB4A0;
  if ((v27 & 1) == 0)
  {
    if ((byte_26B0EB4A0 & 1) == 0)
    {
      outlined consume of GraphicsBlendMode(v28, 0);
      outlined consume of GraphicsBlendMode(v18, 0);
      if (v28 != v18) {
        return 0;
      }
      goto LABEL_15;
    }
LABEL_18:
    outlined copy of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v28, v27);
    outlined consume of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v28, v27);
    return 0;
  }
  if (!byte_26B0EB4A0)
  {
    swift_unknownObjectRetain();
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  outlined consume of GraphicsBlendMode(v28, 1);
  outlined consume of GraphicsBlendMode(v18, 1);
  if (v28 != v18) {
    return 0;
  }
LABEL_15:
  if (!*(void *)(v30 + 16)) {
    return v24;
  }
  return 0;
}

uint64_t one-time initialization function for firstRelease()
{
  if (one-time initialization token for v1 != -1) {
    uint64_t result = swift_once();
  }
  static Semantics.firstRelease = static Semantics.v1;
  return result;
}

uint64_t UnaryScrollablePreferenceProvider.init(scrollable:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _GraphInputs.transaction.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t type metadata completion function for _ViewList_ID._Views()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))SectionedTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))EmptyViewTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))SectionFooterTrait.value.getter);
}

_DWORD *initializeWithCopy for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (void *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (uint64_t *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *uint64_t v7 = v9;
  uint64_t v10 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v10 = *v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (void *)(((unint64_t)v10 + v14 + 4) & ~v14);
  uint64_t v16 = (const void *)(((unint64_t)v11 + v14 + 4) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v17 = *(void *)(v13 + 64);
    }
    else {
      size_t v17 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void type metadata accessor for AGWeakAttribute(uint64_t a1)
{
}

uint64_t one-time initialization function for resolvableTextSegment()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001DLL, 0x8000000246221090);
  static NSAttributedStringKey.resolvableTextSegment = result;
  return result;
}

uint64_t one-time initialization function for kitParagraphStyle()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000010, 0x800000024621EDC0);
  static NSAttributedStringKey.kitParagraphStyle = result;
  return result;
}

uint64_t one-time initialization function for updateSchedule()
{
  uint64_t result = MEMORY[0x24C522820](0xD000000000000016, 0x800000024621EE00);
  static NSAttributedStringKey.updateSchedule = result;
  return result;
}

uint64_t base witness table accessor for SetAlgebra in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, type metadata accessor for AGAttributeTypeFlags);
}

uint64_t base witness table accessor for RawRepresentable in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, type metadata accessor for AGAttributeTypeFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in AGAttributeTypeFlags()
{
  return lazy protocol witness table accessor for type AGNamedTraceEventID and conformance AGNamedTraceEventID(&lazy protocol witness table cache variable for type AGAttributeTypeFlags and conformance AGAttributeTypeFlags, type metadata accessor for AGAttributeTypeFlags);
}

uint64_t one-time initialization function for optionalTypeDescriptor()
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for ()?);
  uint64_t result = MEMORY[0x24C525770]();
  if (result) {
    optionalTypeDescriptor = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.textSizing : EnvironmentValues(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)a1;
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v2, v1);

  return swift_bridgeObjectRelease();
}

uint64_t specialized EnvironmentValues.subscript.setter(unsigned __int8 a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unsigned __int8 a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v8 = v7;
  BloomFilter.init(hashValue:)(v7);
  uint64_t v9 = specialized find1<A>(_:key:filter:)(v6, v15);
  if (!v9
    || *(unsigned __int8 *)(v9 + 72) != a2
    || (uint64_t v10 = *(void *)(v9 + 80),
        swift_bridgeObjectRetain(),
        char v11 = specialized static Array<A>.== infix(_:_:)(a3, v10),
        uint64_t result = swift_bridgeObjectRelease(),
        (v11 & 1) == 0))
  {
    uint64_t v13 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSizingKey>>();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 72) = a2;
    *(void *)(v14 + 80) = a3;
    swift_retain();
    swift_bridgeObjectRetain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v8, 0, v13);
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TextSizingKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSizingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TextSizingKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextSizingKey>, (uint64_t)&type metadata for TextSizingKey, (uint64_t)&protocol witness table for TextSizingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextSizingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.shouldRedactContent.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    v5[0] = *v0;
    v5[1] = 0;
    swift_retain();
    char v4 = specialized static ShouldRedactContentKey.value(in:)(v5);
    swift_release();
    return v4 & 1;
  }
}

uint64_t static Color.blue.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for blue);
}

uint64_t type metadata accessor for AnyTextStorage()
{
  return self;
}

uint64_t instantiation function for generic protocol witness table for <A> Group<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ScaleEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v8;
  v11[4] = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t (*a5)(void))
{
  if ((*(unsigned char *)(a2 + 36) & 0x20) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 48);
    uint64_t v6 = *(void *)(v5 + 16);
    if (!v6)
    {
LABEL_6:
      long long v8 = *(_OWORD *)(a2 + 48);
      v11[2] = *(_OWORD *)(a2 + 32);
      v11[3] = v8;
      v11[4] = *(_OWORD *)(a2 + 64);
      int v12 = *(_DWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 16);
      v11[0] = *(_OWORD *)a2;
      v11[1] = v9;
      return a3(a1, v11);
    }
    uint64_t v7 = (ValueMetadata **)(v5 + 32);
    while (*v7 != &type metadata for DisplayList.Key)
    {
      v7 += 2;
      if (!--v6) {
        goto LABEL_6;
      }
    }
  }

  return a5();
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _OWORD *), uint64_t a4)
{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

{
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScaleEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  int v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v155 = *(_OWORD *)(a2 + 16);
  long long v156 = v5;
  long long v154 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v152[32] = v6;
    *(_OWORD *)uint64_t v153 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v153[16] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    *(_OWORD *)float v152 = v7;
    return a3(a1, &v151);
  }
  unsigned int v9 = a1;
  __int16 v108 = WORD2(v5);
  if (BYTE4(v5))
  {
    unsigned int v138 = a1;
  }
  else
  {
    swift_beginAccess();
    *(void *)&long long v151 = __PAIR64__(*(_DWORD *)(v155 + 16), v9);
    *((void *)&v151 + 1) = __PAIR64__(DWORD2(v154), DWORD2(v155));
    *(_DWORD *)float v152 = HIDWORD(v155);
    memset(&v152[8], 0, 32);
    v152[40] = 1;
    *(void *)uint64_t v153 = 0;
    *(_DWORD *)&v153[8] = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>();
    unsigned int v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    unsigned int v138 = v10;
    AGGraphSetFlags();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = v155;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v154);
  int v133 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v154);
  swift_release();
  int v125 = *(_DWORD *)(a2 + 8);
  uint64_t v136 = *(void *)(a2 + 16);
  uint64_t v137 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 24);
  int v122 = *(_DWORD *)(a2 + 36);
  uint64_t v134 = *(void *)(a2 + 48);
  uint64_t v135 = *(void *)(a2 + 40);
  int v118 = *(_DWORD *)(a2 + 32);
  int v119 = *(_DWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 76);
  swift_beginAccess();
  uint64_t v139 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v116 = *(void *)(a2 + 16);
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v112 = *(void *)(a2 + 72);
  uint64_t v114 = *(void *)(a2 + 64);
  int v109 = *(_DWORD *)(a2 + 80);
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v152[32] = v21;
  *(_OWORD *)uint64_t v153 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v153[16] = *(_DWORD *)(a2 + 80);
  long long v22 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  *(_OWORD *)float v152 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v23 = _ViewInputs.geometryTransaction()();
  uint64_t v24 = swift_getKeyPath();
  int v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) != 0
    || v114 != *(_DWORD *)(v12 + 32)
    || v112 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(void *)&long long v151 = v139;
    DWORD2(v151) = v15;
    *(void *)float v152 = v116;
    *(_DWORD *)&v152[8] = v16;
    *(_DWORD *)&v152[12] = v23;
    *(void *)&v152[16] = v17;
    *(void *)&v152[24] = v19;
    *(void *)&v152[32] = v18;
    *(void *)&v152[40] = v20;
    *(void *)uint64_t v153 = v114;
    *(void *)&v153[8] = v112;
    *(_DWORD *)&v153[16] = v109;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v25, (uint64_t)&v144);
    unsigned int OffsetAttribute2 = v149;
    unsigned __int8 v27 = v150;
    unint64_t v28 = v146 | ((unint64_t)v147 << 32);
    unint64_t v29 = v148 | ((unint64_t)v149 << 32);
    long long v30 = v145;
    *(_OWORD *)(v12 + 32) = v144;
    *(_OWORD *)(v12 + 48) = v30;
    *(void *)(v12 + 64) = v28;
    *(void *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(unsigned char *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if (*(unsigned char *)(v12 + 80)) {
    goto LABEL_16;
  }
  unsigned int OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  unsigned int v117 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v140 = *(void *)a2;
  int v31 = *(_DWORD *)(a2 + 8);
  uint64_t v32 = *(void *)(a2 + 16);
  int v33 = *(_DWORD *)(a2 + 24);
  uint64_t v34 = *(void *)(a2 + 32);
  uint64_t v36 = *(void *)(a2 + 40);
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v37 = *(void *)(a2 + 56);
  uint64_t v113 = *(void *)(a2 + 72);
  uint64_t v115 = *(void *)(a2 + 64);
  int v110 = *(_DWORD *)(a2 + 80);
  long long v38 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v152[32] = v38;
  *(_OWORD *)uint64_t v153 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v153[16] = *(_DWORD *)(a2 + 80);
  long long v39 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  *(_OWORD *)float v152 = v39;
  outlined retain of _ViewInputs(a2);
  int v40 = _ViewInputs.geometryTransaction()();
  uint64_t v41 = swift_getKeyPath();
  int v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) == 0
    && v115 == *(_DWORD *)(v12 + 32)
    && v113 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    unsigned int v43 = v138;
    uint64_t v44 = v135;
    if ((*(unsigned char *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(void *)&long long v151 = v140;
  DWORD2(v151) = v31;
  *(void *)float v152 = v32;
  *(_DWORD *)&v152[8] = v33;
  *(_DWORD *)&v152[12] = v40;
  *(void *)&v152[16] = v34;
  *(void *)&v152[24] = v36;
  *(void *)&v152[32] = v35;
  *(void *)&v152[40] = v37;
  *(void *)uint64_t v153 = v115;
  *(void *)&v153[8] = v113;
  *(_DWORD *)&v153[16] = v110;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v42, (uint64_t)&v144);
  long long v46 = v145;
  unsigned __int8 v47 = v146;
  unsigned __int8 v48 = v150;
  unint64_t v49 = v146 | ((unint64_t)v147 << 32);
  unint64_t v50 = v148 | ((unint64_t)v149 << 32);
  *(_OWORD *)(v12 + 32) = v144;
  *(_OWORD *)(v12 + 48) = v46;
  *(void *)(v12 + 64) = v49;
  *(void *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  unsigned int v43 = v138;
  uint64_t v44 = v135;
  if (v47)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(unsigned char *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  uint64_t v45 = HIDWORD(*((void *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  unsigned int v51 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v151 = __PAIR64__(v117, v43);
  *((void *)&v151 + 1) = __PAIR64__(v51, v45);
  *(_DWORD *)float v152 = v133;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_ScaleEffect> and conformance GeometryEffectTransform<A>();
  int v52 = Attribute.init<A>(body:value:flags:update:)();
  int v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  unsigned int v54 = *(_DWORD *)(a2 + 64);
  unsigned int v55 = *(_DWORD *)(a2 + 72);
  uint64_t v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v154);
  int v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v154);
  swift_release();
  *(void *)&long long v151 = __PAIR64__(v55, v54);
  DWORD2(v151) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  int v58 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v151 = v137;
  DWORD2(v151) = v125;
  *(void *)float v152 = v136;
  *(void *)&v152[8] = v13;
  *(_DWORD *)&v152[16] = v118 | 0x1C;
  *(_DWORD *)&v152[20] = v122;
  *(void *)&v152[24] = v44;
  *(void *)&v152[32] = v134;
  *(_DWORD *)&v152[40] = v119;
  *(_DWORD *)&v152[44] = v52;
  *(_DWORD *)uint64_t v153 = v53;
  *(_DWORD *)&v153[4] = v53;
  *(_DWORD *)&v153[8] = v58;
  *(void *)&v153[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, long long *))a3)(&v142, v59, &v151);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v60 = *(void *)(a2 + 48);
  uint64_t v61 = *(void *)(v60 + 16);
  if (!v61)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a4 = v142;
    a4[1] = v143;
    return result;
  }
  unint64_t v62 = (ValueMetadata **)(v60 + 32);
  while (*v62 != &type metadata for DisplayList.Key)
  {
    v62 += 2;
    if (!--v61) {
      goto LABEL_66;
    }
  }
  Swift::UInt32 v63 = ++lastIdentity;
  unint64_t v64 = (_DWORD *)MEMORY[0x263F288F8];
  if ((v108 & 0x100) == 0)
  {
LABEL_35:
    Swift::UInt32 v141 = v63;
    swift_beginAccess();
    uint64_t v65 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 8);
    uint64_t v128 = *(void *)(a2 + 16);
    int v67 = *(_DWORD *)(a2 + 24);
    uint64_t v68 = *(void *)(a2 + 32);
    uint64_t v69 = *(void *)(a2 + 48);
    uint64_t v126 = *(void *)(a2 + 40);
    uint64_t v70 = *(void *)(a2 + 56);
    uint64_t v131 = *(void *)(a2 + 64);
    uint64_t v123 = *(void *)(a2 + 72);
    int v120 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v152[32] = v71;
    *(_OWORD *)uint64_t v153 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v153[16] = *(_DWORD *)(a2 + 80);
    long long v72 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    *(_OWORD *)float v152 = v72;
    outlined retain of _ViewInputs(a2);
    int v73 = _ViewInputs.geometryTransaction()();
    uint64_t v74 = swift_getKeyPath();
    int v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
    swift_release();
    if ((*(unsigned char *)(v12 + 81) & 1) == 0
      && v131 == *(_DWORD *)(v12 + 32)
      && v123 == *(_DWORD *)(v12 + 36)
      && v75 == *(_DWORD *)(v12 + 40)
      && v66 == *(_DWORD *)(v12 + 44)
      && v73 == *(_DWORD *)(v12 + 48)
      && v67 == *(_DWORD *)(v12 + 52))
    {
      if (*(unsigned char *)(v12 + 64)) {
        goto LABEL_45;
      }
      LODWORD(v81) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(void *)&long long v151 = v65;
      DWORD2(v151) = v66;
      *(void *)float v152 = v128;
      *(_DWORD *)&v152[8] = v67;
      *(_DWORD *)&v152[12] = v73;
      *(void *)&v152[16] = v68;
      *(void *)&v152[24] = v126;
      *(void *)&v152[32] = v69;
      *(void *)&v152[40] = v70;
      *(void *)uint64_t v153 = v131;
      *(void *)&v153[8] = v123;
      *(_DWORD *)&v153[16] = v120;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v75, (uint64_t)&v144);
      long long v76 = v145;
      unsigned __int8 v77 = v146;
      unsigned __int8 v78 = v150;
      unint64_t v79 = v146 | ((unint64_t)v147 << 32);
      unint64_t v80 = v148 | ((unint64_t)v149 << 32);
      *(_OWORD *)(v12 + 32) = v144;
      *(_OWORD *)(v12 + 48) = v76;
      *(void *)(v12 + 64) = v79;
      *(void *)(v12 + 72) = v80;
      *(_WORD *)(v12 + 80) = v78;
      if (v77)
      {
LABEL_45:
        unsigned int v132 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v132;
        *(unsigned char *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v82 = *(void *)a2;
        int v83 = *(_DWORD *)(a2 + 8);
        uint64_t v129 = *(void *)(a2 + 16);
        int v84 = *(_DWORD *)(a2 + 24);
        uint64_t v85 = *(void *)(a2 + 32);
        uint64_t v86 = *(void *)(a2 + 40);
        uint64_t v87 = *(void *)(a2 + 48);
        uint64_t v88 = *(void *)(a2 + 56);
        uint64_t v124 = *(void *)(a2 + 72);
        uint64_t v127 = *(void *)(a2 + 64);
        int v121 = *(_DWORD *)(a2 + 80);
        long long v89 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v152[32] = v89;
        *(_OWORD *)uint64_t v153 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v153[16] = *(_DWORD *)(a2 + 80);
        long long v90 = *(_OWORD *)(a2 + 16);
        long long v151 = *(_OWORD *)a2;
        *(_OWORD *)float v152 = v90;
        outlined retain of _ViewInputs(a2);
        int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v12 + 81) & 1) == 0
          && v127 == *(_DWORD *)(v12 + 32)
          && v124 == *(_DWORD *)(v12 + 36)
          && v93 == *(_DWORD *)(v12 + 40)
          && v83 == *(_DWORD *)(v12 + 44)
          && v91 == *(_DWORD *)(v12 + 48)
          && v84 == *(_DWORD *)(v12 + 52))
        {
          unsigned int v99 = v138;
          if ((*(unsigned char *)(v12 + 80) & 1) == 0)
          {
            unsigned int v94 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(void *)&long long v151 = v82;
          DWORD2(v151) = v83;
          *(void *)float v152 = v129;
          *(_DWORD *)&v152[8] = v84;
          *(_DWORD *)&v152[12] = v91;
          *(void *)&v152[16] = v85;
          *(void *)&v152[24] = v86;
          *(void *)&v152[32] = v87;
          *(void *)&v152[40] = v88;
          *(void *)uint64_t v153 = v127;
          *(void *)&v153[8] = v124;
          *(_DWORD *)&v153[16] = v121;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v93, (uint64_t)&v144);
          unsigned int v94 = v149;
          unsigned __int8 v95 = v150;
          unint64_t v96 = v146 | ((unint64_t)v147 << 32);
          unint64_t v97 = v148 | ((unint64_t)v149 << 32);
          long long v98 = v145;
          *(_OWORD *)(v12 + 32) = v144;
          *(_OWORD *)(v12 + 48) = v98;
          *(void *)(v12 + 64) = v96;
          *(void *)(v12 + 72) = v97;
          *(_WORD *)(v12 + 80) = v95;
          unsigned int v99 = v138;
          if ((v95 & 1) == 0) {
            goto LABEL_59;
          }
        }
        unsigned int v94 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v94;
        *(unsigned char *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(void *)&long long v151 = v142;
        DWORD2(v151) = v143;
        unint64_t v100 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
        if ((v100 & 0x100000000) != 0) {
          int v101 = *MEMORY[0x263F288F8];
        }
        else {
          int v101 = v100;
        }
        uint64_t v102 = v154;
        *(void *)&long long v144 = v154;
        outlined retain of _GraphInputs((uint64_t)&v154);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v144);
        uint64_t v103 = specialized find<A>(_:key:)(v102);
        if (v103) {
          char v104 = *(unsigned char *)(v103 + 72);
        }
        else {
          char v104 = 0;
        }
        int v105 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v144);
        outlined release of _GraphInputs((uint64_t)&v154);
        outlined release of _ViewInputs(a2);
        *(void *)&long long v151 = __PAIR64__(v99, v141);
        *((void *)&v151 + 1) = __PAIR64__(v94, v132);
        *(_DWORD *)float v152 = v133;
        *(_DWORD *)&v152[4] = v105;
        *(_DWORD *)&v152[8] = v101;
        v152[12] = v104;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>>();
        lazy protocol witness table accessor for type GeometryEffectDisplayList<DefaultGeometryEffectProvider<_ScaleEffect>> and conformance GeometryEffectDisplayList<A>();
        unsigned int v106 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v151) = 0;
        PreferencesOutputs.subscript.setter(v106, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
        goto LABEL_66;
      }
      uint64_t v81 = HIDWORD(*((void *)&v76 + 1));
    }
    unsigned int v132 = v81;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v64)
  {
    LODWORD(v144) = v63;
    unint64_t v107 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v144);
    v107(&v151, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

{
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int OffsetAttribute2;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  long long v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  long long v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  ValueMetadata **v62;
  Swift::UInt32 v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  long long v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  long long v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  long long v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  void (*v107)(long long *, void);
  __int16 v108;
  int v109;
  int v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  Swift::UInt32 v141;
  uint64_t v142;
  uint64_t v143;
  long long v144;
  long long v145;
  unsigned __int8 v146;
  unsigned int v147;
  unsigned __int8 v148;
  unsigned int v149;
  unsigned __int8 v150;
  long long v151;
  long long v152;
  long long v153;
  long long v154;
  unsigned char v155[20];
  long long v156;
  long long v157;
  long long v158;
  uint64_t v159;

  int32x2_t v159 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  uint64_t v157 = *(_OWORD *)(a2 + 16);
  float v158 = v5;
  long long v156 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    uint64_t v153 = *(_OWORD *)(a2 + 32);
    long long v154 = v6;
    *(_OWORD *)long long v155 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v155[16] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    float v152 = v7;
    return a3(a1, &v151);
  }
  unsigned int v9 = a1;
  __int16 v108 = WORD2(v5);
  if (BYTE4(v5))
  {
    unsigned int v138 = a1;
  }
  else
  {
    swift_beginAccess();
    *(void *)&long long v151 = __PAIR64__(*(_DWORD *)(v157 + 16), v9);
    *((void *)&v151 + 1) = __PAIR64__(DWORD2(v156), DWORD2(v157));
    LODWORD(v152) = HIDWORD(v157);
    uint64_t v153 = 0uLL;
    *((void *)&v152 + 1) = 0;
    LOBYTE(v154) = 1;
    *((void *)&v154 + 1) = 0;
    *(_DWORD *)long long v155 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>();
    unsigned int v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    unsigned int v138 = v10;
    AGGraphSetFlags();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = v157;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v156);
  int v133 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v156);
  swift_release();
  int v125 = *(_DWORD *)(a2 + 8);
  uint64_t v136 = *(void *)(a2 + 16);
  uint64_t v137 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 24);
  int v122 = *(_DWORD *)(a2 + 36);
  uint64_t v134 = *(void *)(a2 + 48);
  uint64_t v135 = *(void *)(a2 + 40);
  int v118 = *(_DWORD *)(a2 + 32);
  int v119 = *(_DWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 76);
  swift_beginAccess();
  uint64_t v139 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v116 = *(void *)(a2 + 16);
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v112 = *(void *)(a2 + 72);
  uint64_t v114 = *(void *)(a2 + 64);
  int v109 = *(_DWORD *)(a2 + 80);
  long long v21 = *(_OWORD *)(a2 + 48);
  uint64_t v153 = *(_OWORD *)(a2 + 32);
  long long v154 = v21;
  *(_OWORD *)long long v155 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v155[16] = *(_DWORD *)(a2 + 80);
  long long v22 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  float v152 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v23 = _ViewInputs.geometryTransaction()();
  uint64_t v24 = swift_getKeyPath();
  int v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) != 0
    || v114 != *(_DWORD *)(v12 + 32)
    || v112 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(void *)&long long v151 = v139;
    DWORD2(v151) = v15;
    *(void *)&float v152 = v116;
    *((void *)&v152 + 1) = __PAIR64__(v23, v16);
    *(void *)&uint64_t v153 = v17;
    *((void *)&v153 + 1) = v19;
    *(void *)&long long v154 = v18;
    *((void *)&v154 + 1) = v20;
    *(void *)long long v155 = v114;
    *(void *)&v155[8] = v112;
    *(_DWORD *)&v155[16] = v109;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v25, (uint64_t)&v144);
    unsigned int OffsetAttribute2 = v149;
    unsigned __int8 v27 = v150;
    unint64_t v28 = v146 | ((unint64_t)v147 << 32);
    unint64_t v29 = v148 | ((unint64_t)v149 << 32);
    long long v30 = v145;
    *(_OWORD *)(v12 + 32) = v144;
    *(_OWORD *)(v12 + 48) = v30;
    *(void *)(v12 + 64) = v28;
    *(void *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(unsigned char *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if (*(unsigned char *)(v12 + 80)) {
    goto LABEL_16;
  }
  unsigned int OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  unsigned int v117 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v140 = *(void *)a2;
  int v31 = *(_DWORD *)(a2 + 8);
  uint64_t v32 = *(void *)(a2 + 16);
  int v33 = *(_DWORD *)(a2 + 24);
  uint64_t v34 = *(void *)(a2 + 32);
  uint64_t v36 = *(void *)(a2 + 40);
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v37 = *(void *)(a2 + 56);
  uint64_t v113 = *(void *)(a2 + 72);
  uint64_t v115 = *(void *)(a2 + 64);
  int v110 = *(_DWORD *)(a2 + 80);
  long long v38 = *(_OWORD *)(a2 + 48);
  uint64_t v153 = *(_OWORD *)(a2 + 32);
  long long v154 = v38;
  *(_OWORD *)long long v155 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v155[16] = *(_DWORD *)(a2 + 80);
  long long v39 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  float v152 = v39;
  outlined retain of _ViewInputs(a2);
  int v40 = _ViewInputs.geometryTransaction()();
  uint64_t v41 = swift_getKeyPath();
  int v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) == 0
    && v115 == *(_DWORD *)(v12 + 32)
    && v113 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    unsigned int v43 = v138;
    uint64_t v44 = v135;
    if ((*(unsigned char *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(void *)&long long v151 = v140;
  DWORD2(v151) = v31;
  *(void *)&float v152 = v32;
  *((void *)&v152 + 1) = __PAIR64__(v40, v33);
  *(void *)&uint64_t v153 = v34;
  *((void *)&v153 + 1) = v36;
  *(void *)&long long v154 = v35;
  *((void *)&v154 + 1) = v37;
  *(void *)long long v155 = v115;
  *(void *)&v155[8] = v113;
  *(_DWORD *)&v155[16] = v110;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v42, (uint64_t)&v144);
  long long v46 = v145;
  unsigned __int8 v47 = v146;
  unsigned __int8 v48 = v150;
  unint64_t v49 = v146 | ((unint64_t)v147 << 32);
  unint64_t v50 = v148 | ((unint64_t)v149 << 32);
  *(_OWORD *)(v12 + 32) = v144;
  *(_OWORD *)(v12 + 48) = v46;
  *(void *)(v12 + 64) = v49;
  *(void *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  unsigned int v43 = v138;
  uint64_t v44 = v135;
  if (v47)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(unsigned char *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  uint64_t v45 = HIDWORD(*((void *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  unsigned int v51 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v151 = __PAIR64__(v117, v43);
  *((void *)&v151 + 1) = __PAIR64__(v51, v45);
  LODWORD(v152) = v133;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_RotationEffect> and conformance GeometryEffectTransform<A>();
  int v52 = Attribute.init<A>(body:value:flags:update:)();
  int v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  unsigned int v54 = *(_DWORD *)(a2 + 64);
  unsigned int v55 = *(_DWORD *)(a2 + 72);
  uint64_t v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v156);
  int v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v156);
  swift_release();
  *(void *)&long long v151 = __PAIR64__(v55, v54);
  DWORD2(v151) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  int v58 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v151 = v137;
  DWORD2(v151) = v125;
  *(void *)&float v152 = v136;
  *((void *)&v152 + 1) = v13;
  LODWORD(v153) = v118 | 0x1C;
  DWORD1(v153) = v122;
  *((void *)&v153 + 1) = v44;
  *(void *)&long long v154 = v134;
  *((void *)&v154 + 1) = __PAIR64__(v52, v119);
  *(_DWORD *)long long v155 = v53;
  *(_DWORD *)&v155[4] = v53;
  *(_DWORD *)&v155[8] = v58;
  *(void *)&v155[12] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, long long *))a3)(&v142, v59, &v151);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v60 = *(void *)(a2 + 48);
  uint64_t v61 = *(void *)(v60 + 16);
  if (!v61)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a4 = v142;
    a4[1] = v143;
    return result;
  }
  unint64_t v62 = (ValueMetadata **)(v60 + 32);
  while (*v62 != &type metadata for DisplayList.Key)
  {
    v62 += 2;
    if (!--v61) {
      goto LABEL_66;
    }
  }
  Swift::UInt32 v63 = ++lastIdentity;
  unint64_t v64 = (_DWORD *)MEMORY[0x263F288F8];
  if ((v108 & 0x100) == 0)
  {
LABEL_35:
    Swift::UInt32 v141 = v63;
    swift_beginAccess();
    uint64_t v65 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 8);
    uint64_t v128 = *(void *)(a2 + 16);
    int v67 = *(_DWORD *)(a2 + 24);
    uint64_t v68 = *(void *)(a2 + 32);
    uint64_t v69 = *(void *)(a2 + 48);
    uint64_t v126 = *(void *)(a2 + 40);
    uint64_t v70 = *(void *)(a2 + 56);
    uint64_t v131 = *(void *)(a2 + 64);
    uint64_t v123 = *(void *)(a2 + 72);
    int v120 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 48);
    uint64_t v153 = *(_OWORD *)(a2 + 32);
    long long v154 = v71;
    *(_OWORD *)long long v155 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v155[16] = *(_DWORD *)(a2 + 80);
    long long v72 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    float v152 = v72;
    outlined retain of _ViewInputs(a2);
    int v73 = _ViewInputs.geometryTransaction()();
    uint64_t v74 = swift_getKeyPath();
    int v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
    swift_release();
    if ((*(unsigned char *)(v12 + 81) & 1) == 0
      && v131 == *(_DWORD *)(v12 + 32)
      && v123 == *(_DWORD *)(v12 + 36)
      && v75 == *(_DWORD *)(v12 + 40)
      && v66 == *(_DWORD *)(v12 + 44)
      && v73 == *(_DWORD *)(v12 + 48)
      && v67 == *(_DWORD *)(v12 + 52))
    {
      if (*(unsigned char *)(v12 + 64)) {
        goto LABEL_45;
      }
      LODWORD(v81) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(void *)&long long v151 = v65;
      DWORD2(v151) = v66;
      *(void *)&float v152 = v128;
      *((void *)&v152 + 1) = __PAIR64__(v73, v67);
      *(void *)&uint64_t v153 = v68;
      *((void *)&v153 + 1) = v126;
      *(void *)&long long v154 = v69;
      *((void *)&v154 + 1) = v70;
      *(void *)long long v155 = v131;
      *(void *)&v155[8] = v123;
      *(_DWORD *)&v155[16] = v120;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v75, (uint64_t)&v144);
      long long v76 = v145;
      unsigned __int8 v77 = v146;
      unsigned __int8 v78 = v150;
      unint64_t v79 = v146 | ((unint64_t)v147 << 32);
      unint64_t v80 = v148 | ((unint64_t)v149 << 32);
      *(_OWORD *)(v12 + 32) = v144;
      *(_OWORD *)(v12 + 48) = v76;
      *(void *)(v12 + 64) = v79;
      *(void *)(v12 + 72) = v80;
      *(_WORD *)(v12 + 80) = v78;
      if (v77)
      {
LABEL_45:
        unsigned int v132 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v132;
        *(unsigned char *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v82 = *(void *)a2;
        int v83 = *(_DWORD *)(a2 + 8);
        uint64_t v129 = *(void *)(a2 + 16);
        int v84 = *(_DWORD *)(a2 + 24);
        uint64_t v85 = *(void *)(a2 + 32);
        uint64_t v86 = *(void *)(a2 + 40);
        uint64_t v87 = *(void *)(a2 + 48);
        uint64_t v88 = *(void *)(a2 + 56);
        uint64_t v124 = *(void *)(a2 + 72);
        uint64_t v127 = *(void *)(a2 + 64);
        int v121 = *(_DWORD *)(a2 + 80);
        long long v89 = *(_OWORD *)(a2 + 48);
        uint64_t v153 = *(_OWORD *)(a2 + 32);
        long long v154 = v89;
        *(_OWORD *)long long v155 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v155[16] = *(_DWORD *)(a2 + 80);
        long long v90 = *(_OWORD *)(a2 + 16);
        long long v151 = *(_OWORD *)a2;
        float v152 = v90;
        outlined retain of _ViewInputs(a2);
        int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v12 + 81) & 1) == 0
          && v127 == *(_DWORD *)(v12 + 32)
          && v124 == *(_DWORD *)(v12 + 36)
          && v93 == *(_DWORD *)(v12 + 40)
          && v83 == *(_DWORD *)(v12 + 44)
          && v91 == *(_DWORD *)(v12 + 48)
          && v84 == *(_DWORD *)(v12 + 52))
        {
          unsigned int v99 = v138;
          if ((*(unsigned char *)(v12 + 80) & 1) == 0)
          {
            unsigned int v94 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(void *)&long long v151 = v82;
          DWORD2(v151) = v83;
          *(void *)&float v152 = v129;
          *((void *)&v152 + 1) = __PAIR64__(v91, v84);
          *(void *)&uint64_t v153 = v85;
          *((void *)&v153 + 1) = v86;
          *(void *)&long long v154 = v87;
          *((void *)&v154 + 1) = v88;
          *(void *)long long v155 = v127;
          *(void *)&v155[8] = v124;
          *(_DWORD *)&v155[16] = v121;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v93, (uint64_t)&v144);
          unsigned int v94 = v149;
          unsigned __int8 v95 = v150;
          unint64_t v96 = v146 | ((unint64_t)v147 << 32);
          unint64_t v97 = v148 | ((unint64_t)v149 << 32);
          long long v98 = v145;
          *(_OWORD *)(v12 + 32) = v144;
          *(_OWORD *)(v12 + 48) = v98;
          *(void *)(v12 + 64) = v96;
          *(void *)(v12 + 72) = v97;
          *(_WORD *)(v12 + 80) = v95;
          unsigned int v99 = v138;
          if ((v95 & 1) == 0) {
            goto LABEL_59;
          }
        }
        unsigned int v94 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v94;
        *(unsigned char *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(void *)&long long v151 = v142;
        DWORD2(v151) = v143;
        unint64_t v100 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
        if ((v100 & 0x100000000) != 0) {
          int v101 = *MEMORY[0x263F288F8];
        }
        else {
          int v101 = v100;
        }
        uint64_t v102 = v156;
        *(void *)&long long v144 = v156;
        outlined retain of _GraphInputs((uint64_t)&v156);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v144);
        uint64_t v103 = specialized find<A>(_:key:)(v102);
        if (v103) {
          char v104 = *(unsigned char *)(v103 + 72);
        }
        else {
          char v104 = 0;
        }
        int v105 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v144);
        outlined release of _GraphInputs((uint64_t)&v156);
        outlined release of _ViewInputs(a2);
        *(void *)&long long v151 = __PAIR64__(v99, v141);
        *((void *)&v151 + 1) = __PAIR64__(v94, v132);
        *(void *)&float v152 = __PAIR64__(v105, v133);
        DWORD2(v152) = v101;
        BYTE12(v152) = v104;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for GeometryEffectDisplayList<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
        lazy protocol witness table accessor for type GeometryEffectDisplayList<_RotationEffect> and conformance GeometryEffectDisplayList<A>();
        unsigned int v106 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v151) = 0;
        PreferencesOutputs.subscript.setter(v106, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
        goto LABEL_66;
      }
      uint64_t v81 = HIDWORD(*((void *)&v76 + 1));
    }
    unsigned int v132 = v81;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v64)
  {
    LODWORD(v144) = v63;
    unint64_t v107 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v144);
    v107(&v151, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

{
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int OffsetAttribute2;
  unsigned __int8 v27;
  unint64_t v28;
  unint64_t v29;
  long long v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  long long v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  ValueMetadata **v62;
  Swift::UInt32 v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  long long v72;
  int v73;
  uint64_t v74;
  int v75;
  long long v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  long long v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  int v105;
  unsigned int v106;
  void (*v107)(long long *, void);
  __int16 v108;
  int v109;
  int v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  Swift::UInt32 v141;
  uint64_t v142;
  uint64_t v143;
  long long v144;
  long long v145;
  unsigned __int8 v146;
  unsigned int v147;
  unsigned __int8 v148;
  unsigned int v149;
  unsigned __int8 v150;
  long long v151;
  unsigned char v152[72];
  char v153;
  uint64_t v154;
  int v155;
  long long v156;
  long long v157;
  long long v158;
  uint64_t v159;

  int32x2_t v159 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  uint64_t v157 = *(_OWORD *)(a2 + 16);
  float v158 = v5;
  long long v156 = *(_OWORD *)a2;
  if ((BYTE4(v5) & 0x20) == 0)
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v152[32] = v6;
    *(_OWORD *)&unsigned char v152[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v152[64] = *(_DWORD *)(a2 + 80);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    *(_OWORD *)float v152 = v7;
    return a3(a1, &v151);
  }
  unsigned int v9 = a1;
  __int16 v108 = WORD2(v5);
  if (BYTE4(v5))
  {
    unsigned int v138 = a1;
  }
  else
  {
    swift_beginAccess();
    *(void *)&long long v151 = __PAIR64__(*(_DWORD *)(v157 + 16), v9);
    *((void *)&v151 + 1) = __PAIR64__(DWORD2(v156), DWORD2(v157));
    *(_DWORD *)float v152 = HIDWORD(v157);
    memset(&v152[8], 0, 64);
    uint64_t v153 = 1;
    long long v154 = 0;
    long long v155 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>();
    unsigned int v10 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    unsigned int v138 = v10;
    AGGraphSetFlags();
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = v157;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v156);
  int v133 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v156);
  swift_release();
  int v125 = *(_DWORD *)(a2 + 8);
  uint64_t v136 = *(void *)(a2 + 16);
  uint64_t v137 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 24);
  int v122 = *(_DWORD *)(a2 + 36);
  uint64_t v134 = *(void *)(a2 + 48);
  uint64_t v135 = *(void *)(a2 + 40);
  int v118 = *(_DWORD *)(a2 + 32);
  int v119 = *(_DWORD *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 76);
  swift_beginAccess();
  uint64_t v139 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v116 = *(void *)(a2 + 16);
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v112 = *(void *)(a2 + 72);
  uint64_t v114 = *(void *)(a2 + 64);
  int v109 = *(_DWORD *)(a2 + 80);
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v152[32] = v21;
  *(_OWORD *)&unsigned char v152[48] = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v152[64] = *(_DWORD *)(a2 + 80);
  long long v22 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  *(_OWORD *)float v152 = v22;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v23 = _ViewInputs.geometryTransaction()();
  uint64_t v24 = swift_getKeyPath();
  int v25 = specialized CachedEnvironment.attribute<A>(keyPath:)(v24);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) != 0
    || v114 != *(_DWORD *)(v12 + 32)
    || v112 != *(_DWORD *)(v12 + 36)
    || v25 != *(_DWORD *)(v12 + 40)
    || v15 != *(_DWORD *)(v12 + 44)
    || v23 != *(_DWORD *)(v12 + 48)
    || v16 != *(_DWORD *)(v12 + 52))
  {
    *(void *)&long long v151 = v139;
    DWORD2(v151) = v15;
    *(void *)float v152 = v116;
    *(_DWORD *)&v152[8] = v16;
    *(_DWORD *)&v152[12] = v23;
    *(void *)&v152[16] = v17;
    *(void *)&v152[24] = v19;
    *(void *)&v152[32] = v18;
    *(void *)&v152[40] = v20;
    *(void *)&unsigned char v152[48] = v114;
    *(void *)&v152[56] = v112;
    *(_DWORD *)&v152[64] = v109;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v25, (uint64_t)&v144);
    unsigned int OffsetAttribute2 = v149;
    unsigned __int8 v27 = v150;
    unint64_t v28 = v146 | ((unint64_t)v147 << 32);
    unint64_t v29 = v148 | ((unint64_t)v149 << 32);
    long long v30 = v145;
    *(_OWORD *)(v12 + 32) = v144;
    *(_OWORD *)(v12 + 48) = v30;
    *(void *)(v12 + 64) = v28;
    *(void *)(v12 + 72) = v29;
    *(_WORD *)(v12 + 80) = v27;
    if ((v27 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 76) = OffsetAttribute2;
    *(unsigned char *)(v12 + 80) = 0;
    goto LABEL_17;
  }
  if (*(unsigned char *)(v12 + 80)) {
    goto LABEL_16;
  }
  unsigned int OffsetAttribute2 = *(_DWORD *)(v12 + 76);
LABEL_17:
  unsigned int v117 = OffsetAttribute2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v140 = *(void *)a2;
  int v31 = *(_DWORD *)(a2 + 8);
  uint64_t v32 = *(void *)(a2 + 16);
  int v33 = *(_DWORD *)(a2 + 24);
  uint64_t v34 = *(void *)(a2 + 32);
  uint64_t v36 = *(void *)(a2 + 40);
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v37 = *(void *)(a2 + 56);
  uint64_t v113 = *(void *)(a2 + 72);
  uint64_t v115 = *(void *)(a2 + 64);
  int v110 = *(_DWORD *)(a2 + 80);
  long long v38 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v152[32] = v38;
  *(_OWORD *)&unsigned char v152[48] = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v152[64] = *(_DWORD *)(a2 + 80);
  long long v39 = *(_OWORD *)(a2 + 16);
  long long v151 = *(_OWORD *)a2;
  *(_OWORD *)float v152 = v39;
  outlined retain of _ViewInputs(a2);
  int v40 = _ViewInputs.geometryTransaction()();
  uint64_t v41 = swift_getKeyPath();
  int v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
  swift_release();
  if ((*(unsigned char *)(v12 + 81) & 1) == 0
    && v115 == *(_DWORD *)(v12 + 32)
    && v113 == *(_DWORD *)(v12 + 36)
    && v42 == *(_DWORD *)(v12 + 40)
    && v31 == *(_DWORD *)(v12 + 44)
    && v40 == *(_DWORD *)(v12 + 48)
    && v33 == *(_DWORD *)(v12 + 52))
  {
    unsigned int v43 = v138;
    uint64_t v44 = v135;
    if ((*(unsigned char *)(v12 + 64) & 1) == 0)
    {
      LODWORD(v45) = *(_DWORD *)(v12 + 60);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *(void *)&long long v151 = v140;
  DWORD2(v151) = v31;
  *(void *)float v152 = v32;
  *(_DWORD *)&v152[8] = v33;
  *(_DWORD *)&v152[12] = v40;
  *(void *)&v152[16] = v34;
  *(void *)&v152[24] = v36;
  *(void *)&v152[32] = v35;
  *(void *)&v152[40] = v37;
  *(void *)&unsigned char v152[48] = v115;
  *(void *)&v152[56] = v113;
  *(_DWORD *)&v152[64] = v110;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v42, (uint64_t)&v144);
  long long v46 = v145;
  unsigned __int8 v47 = v146;
  unsigned __int8 v48 = v150;
  unint64_t v49 = v146 | ((unint64_t)v147 << 32);
  unint64_t v50 = v148 | ((unint64_t)v149 << 32);
  *(_OWORD *)(v12 + 32) = v144;
  *(_OWORD *)(v12 + 48) = v46;
  *(void *)(v12 + 64) = v49;
  *(void *)(v12 + 72) = v50;
  *(_WORD *)(v12 + 80) = v48;
  unsigned int v43 = v138;
  uint64_t v44 = v135;
  if (v47)
  {
LABEL_27:
    LODWORD(v45) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v12 + 60) = v45;
    *(unsigned char *)(v12 + 64) = 0;
    goto LABEL_29;
  }
  uint64_t v45 = HIDWORD(*((void *)&v46 + 1));
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  unsigned int v51 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v151 = __PAIR64__(v117, v43);
  *((void *)&v151 + 1) = __PAIR64__(v51, v45);
  *(_DWORD *)float v152 = v133;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectTransform);
  lazy protocol witness table accessor for type GeometryEffectTransform<_Rotation3DEffect> and conformance GeometryEffectTransform<A>();
  int v52 = Attribute.init<A>(body:value:flags:update:)();
  int v53 = *(_DWORD *)(specialized static ViewGraph.current.getter() + 248);
  swift_release();
  unsigned int v54 = *(_DWORD *)(a2 + 64);
  unsigned int v55 = *(_DWORD *)(a2 + 72);
  uint64_t v56 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v156);
  int v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v156);
  swift_release();
  *(void *)&long long v151 = __PAIR64__(v55, v54);
  DWORD2(v151) = v57;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  int v58 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v151 = v137;
  DWORD2(v151) = v125;
  *(void *)float v152 = v136;
  *(void *)&v152[8] = v13;
  *(_DWORD *)&v152[16] = v118 | 0x1C;
  *(_DWORD *)&v152[20] = v122;
  *(void *)&v152[24] = v44;
  *(void *)&v152[32] = v134;
  *(_DWORD *)&v152[40] = v119;
  *(_DWORD *)&v152[44] = v52;
  *(_DWORD *)&unsigned char v152[48] = v53;
  *(_DWORD *)&v152[52] = v53;
  *(_DWORD *)&v152[56] = v58;
  *(void *)&v152[60] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v59 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t *__return_ptr, uint64_t, long long *))a3)(&v142, v59, &v151);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v60 = *(void *)(a2 + 48);
  uint64_t v61 = *(void *)(v60 + 16);
  if (!v61)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *a4 = v142;
    a4[1] = v143;
    return result;
  }
  unint64_t v62 = (ValueMetadata **)(v60 + 32);
  while (*v62 != &type metadata for DisplayList.Key)
  {
    v62 += 2;
    if (!--v61) {
      goto LABEL_66;
    }
  }
  Swift::UInt32 v63 = ++lastIdentity;
  unint64_t v64 = (_DWORD *)MEMORY[0x263F288F8];
  if ((v108 & 0x100) == 0)
  {
LABEL_35:
    Swift::UInt32 v141 = v63;
    swift_beginAccess();
    uint64_t v65 = *(void *)a2;
    int v66 = *(_DWORD *)(a2 + 8);
    uint64_t v128 = *(void *)(a2 + 16);
    int v67 = *(_DWORD *)(a2 + 24);
    uint64_t v68 = *(void *)(a2 + 32);
    uint64_t v69 = *(void *)(a2 + 48);
    uint64_t v126 = *(void *)(a2 + 40);
    uint64_t v70 = *(void *)(a2 + 56);
    uint64_t v131 = *(void *)(a2 + 64);
    uint64_t v123 = *(void *)(a2 + 72);
    int v120 = *(_DWORD *)(a2 + 80);
    long long v71 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v152[32] = v71;
    *(_OWORD *)&unsigned char v152[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v152[64] = *(_DWORD *)(a2 + 80);
    long long v72 = *(_OWORD *)(a2 + 16);
    long long v151 = *(_OWORD *)a2;
    *(_OWORD *)float v152 = v72;
    outlined retain of _ViewInputs(a2);
    int v73 = _ViewInputs.geometryTransaction()();
    uint64_t v74 = swift_getKeyPath();
    int v75 = specialized CachedEnvironment.attribute<A>(keyPath:)(v74);
    swift_release();
    if ((*(unsigned char *)(v12 + 81) & 1) == 0
      && v131 == *(_DWORD *)(v12 + 32)
      && v123 == *(_DWORD *)(v12 + 36)
      && v75 == *(_DWORD *)(v12 + 40)
      && v66 == *(_DWORD *)(v12 + 44)
      && v73 == *(_DWORD *)(v12 + 48)
      && v67 == *(_DWORD *)(v12 + 52))
    {
      if (*(unsigned char *)(v12 + 64)) {
        goto LABEL_45;
      }
      LODWORD(v81) = *(_DWORD *)(v12 + 60);
    }
    else
    {
      *(void *)&long long v151 = v65;
      DWORD2(v151) = v66;
      *(void *)float v152 = v128;
      *(_DWORD *)&v152[8] = v67;
      *(_DWORD *)&v152[12] = v73;
      *(void *)&v152[16] = v68;
      *(void *)&v152[24] = v126;
      *(void *)&v152[32] = v69;
      *(void *)&v152[40] = v70;
      *(void *)&unsigned char v152[48] = v131;
      *(void *)&v152[56] = v123;
      *(_DWORD *)&v152[64] = v120;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v75, (uint64_t)&v144);
      long long v76 = v145;
      unsigned __int8 v77 = v146;
      unsigned __int8 v78 = v150;
      unint64_t v79 = v146 | ((unint64_t)v147 << 32);
      unint64_t v80 = v148 | ((unint64_t)v149 << 32);
      *(_OWORD *)(v12 + 32) = v144;
      *(_OWORD *)(v12 + 48) = v76;
      *(void *)(v12 + 64) = v79;
      *(void *)(v12 + 72) = v80;
      *(_WORD *)(v12 + 80) = v78;
      if (v77)
      {
LABEL_45:
        unsigned int v132 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 60) = v132;
        *(unsigned char *)(v12 + 64) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v82 = *(void *)a2;
        int v83 = *(_DWORD *)(a2 + 8);
        uint64_t v129 = *(void *)(a2 + 16);
        int v84 = *(_DWORD *)(a2 + 24);
        uint64_t v85 = *(void *)(a2 + 32);
        uint64_t v86 = *(void *)(a2 + 40);
        uint64_t v87 = *(void *)(a2 + 48);
        uint64_t v88 = *(void *)(a2 + 56);
        uint64_t v124 = *(void *)(a2 + 72);
        uint64_t v127 = *(void *)(a2 + 64);
        int v121 = *(_DWORD *)(a2 + 80);
        long long v89 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v152[16] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v152[32] = v89;
        *(_OWORD *)&unsigned char v152[48] = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v152[64] = *(_DWORD *)(a2 + 80);
        long long v90 = *(_OWORD *)(a2 + 16);
        long long v151 = *(_OWORD *)a2;
        *(_OWORD *)float v152 = v90;
        outlined retain of _ViewInputs(a2);
        int v91 = _ViewInputs.geometryTransaction()();
        uint64_t v92 = swift_getKeyPath();
        int v93 = specialized CachedEnvironment.attribute<A>(keyPath:)(v92);
        swift_release();
        if ((*(unsigned char *)(v12 + 81) & 1) == 0
          && v127 == *(_DWORD *)(v12 + 32)
          && v124 == *(_DWORD *)(v12 + 36)
          && v93 == *(_DWORD *)(v12 + 40)
          && v83 == *(_DWORD *)(v12 + 44)
          && v91 == *(_DWORD *)(v12 + 48)
          && v84 == *(_DWORD *)(v12 + 52))
        {
          unsigned int v99 = v138;
          if ((*(unsigned char *)(v12 + 80) & 1) == 0)
          {
            unsigned int v94 = *(_DWORD *)(v12 + 76);
            goto LABEL_59;
          }
        }
        else
        {
          *(void *)&long long v151 = v82;
          DWORD2(v151) = v83;
          *(void *)float v152 = v129;
          *(_DWORD *)&v152[8] = v84;
          *(_DWORD *)&v152[12] = v91;
          *(void *)&v152[16] = v85;
          *(void *)&v152[24] = v86;
          *(void *)&v152[32] = v87;
          *(void *)&v152[40] = v88;
          *(void *)&unsigned char v152[48] = v127;
          *(void *)&v152[56] = v124;
          *(_DWORD *)&v152[64] = v121;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v151, v93, (uint64_t)&v144);
          unsigned int v94 = v149;
          unsigned __int8 v95 = v150;
          unint64_t v96 = v146 | ((unint64_t)v147 << 32);
          unint64_t v97 = v148 | ((unint64_t)v149 << 32);
          long long v98 = v145;
          *(_OWORD *)(v12 + 32) = v144;
          *(_OWORD *)(v12 + 48) = v98;
          *(void *)(v12 + 64) = v96;
          *(void *)(v12 + 72) = v97;
          *(_WORD *)(v12 + 80) = v95;
          unsigned int v99 = v138;
          if ((v95 & 1) == 0) {
            goto LABEL_59;
          }
        }
        unsigned int v94 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v12 + 76) = v94;
        *(unsigned char *)(v12 + 80) = 0;
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_endAccess();
        *(void *)&long long v151 = v142;
        DWORD2(v151) = v143;
        unint64_t v100 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
        if ((v100 & 0x100000000) != 0) {
          int v101 = *MEMORY[0x263F288F8];
        }
        else {
          int v101 = v100;
        }
        uint64_t v102 = v156;
        *(void *)&long long v144 = v156;
        outlined retain of _GraphInputs((uint64_t)&v156);
        outlined retain of _ViewInputs(a2);
        outlined retain of ViewTransform((uint64_t)&v144);
        uint64_t v103 = specialized find<A>(_:key:)(v102);
        if (v103) {
          char v104 = *(unsigned char *)(v103 + 72);
        }
        else {
          char v104 = 0;
        }
        int v105 = *(_DWORD *)(a2 + 68);
        outlined release of ViewTransform((uint64_t)&v144);
        outlined release of _GraphInputs((uint64_t)&v156);
        outlined release of _ViewInputs(a2);
        *(void *)&long long v151 = __PAIR64__(v99, v141);
        *((void *)&v151 + 1) = __PAIR64__(v94, v132);
        *(_DWORD *)float v152 = v133;
        *(_DWORD *)&v152[4] = v105;
        *(_DWORD *)&v152[8] = v101;
        v152[12] = v104;
        protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
        type metadata accessor for AnimatableAttribute<_ScaleEffect>(0, &lazy cache variable for type metadata for GeometryEffectDisplayList<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GeometryEffectDisplayList);
        lazy protocol witness table accessor for type GeometryEffectDisplayList<_Rotation3DEffect> and conformance GeometryEffectDisplayList<A>();
        unsigned int v106 = Attribute.init<A>(body:value:flags:update:)();
        LOBYTE(v151) = 0;
        PreferencesOutputs.subscript.setter(v106, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
        goto LABEL_66;
      }
      uint64_t v81 = HIDWORD(*((void *)&v76 + 1));
    }
    unsigned int v132 = v81;
    goto LABEL_48;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v64)
  {
    LODWORD(v144) = v63;
    unint64_t v107 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v144);
    v107(&v151, 0);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}