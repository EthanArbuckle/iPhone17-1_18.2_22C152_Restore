uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimeDataFormatting.ComplyingFormatStyleEntries<A, B>()
{
  return MEMORY[0x270F9D960]();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimeDataFormatting.ComplyingFormatStyleEntries<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (uint64_t (*)(uint64_t, void, void, void, void))implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next(), a2);
}

uint64_t TimeDataFormatting.ComplyingFormatStyleEntries.next()@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t, void, void, void, void)@<X1>, uint64_t a3@<X8>)
{
  v5 = (void (*)(char *))a2(v3, a1[2], a1[3], a1[4], a1[5]);
  TimeDataFormatting.EntriesState.next(_:)(v5, a3);

  return swift_release();
}

uint64_t (*implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  uint64_t v10 = type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v18 - v13, a1, v10, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next();
}

uint64_t TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = a3;
  uint64_t v66 = a1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  MEMORY[0x270FA5388](v5);
  v54 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v55 = (char *)&v54 - v8;
  MEMORY[0x270FA5388](v9);
  v60 = (char *)&v54 - v10;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  v56 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v59 = (char *)&v54 - v16;
  _ss11AnySequenceVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v57 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v21 = (char *)&v54 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v58 = (uint64_t)&v54 - v23;
  MEMORY[0x270FA5388](v24);
  v26 = (char *)&v54 - v25;
  uint64_t v27 = *(int *)(a2 + 52);
  char v67 = v3[*(int *)(a2 + 60)];
  v62 = v3;
  v28 = &v3[v27];
  uint64_t v29 = *(void *)(a2 + 24);
  uint64_t v32 = a2 + 32;
  uint64_t v30 = *(void *)(a2 + 32);
  uint64_t v31 = *(void *)(v32 + 8);
  BOOL v33 = DiscreteFormatStyle.needsRedaction<A>(for:evaluating:at:)((unsigned __int8 *)&v67, (uint64_t)&v3[v27], v66, v29, v11, v31, v30);
  uint64_t v61 = v12;
  v34 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  if (v33)
  {
    v35 = v59;
    v34(v59, v28, v11);
    uint64_t v36 = (uint64_t)v60;
    uint64_t v37 = static Date.+ infix(_:_:)();
    MEMORY[0x270FA5388](v37);
    *(&v54 - 6) = (char *)v11;
    *(&v54 - 5) = (char *)v29;
    *(&v54 - 4) = (char *)v30;
    *(&v54 - 3) = (char *)v31;
    *(&v54 - 2) = v62;
    TimeDataSourceStorage.withValue(for:call:)(v36, (void (*)(char *))partial apply for closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:), (uint64_t)(&v54 - 8), v11, v30, (uint64_t)v26);
    uint64_t v38 = v63;
    v39 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    uint64_t v40 = v36;
    uint64_t v41 = v64;
    v39(v40, v64);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v11);
    uint64_t v42 = v58;
    outlined init with copy of Date?((uint64_t)v26, v58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v42, 1, v41) == 1)
    {
      outlined destroy of Date?(v42);
      uint64_t v43 = (uint64_t)v26;
    }
    else
    {
      v49 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v55, v42, v41);
      lazy protocol witness table accessor for type Date and conformance Date();
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
      {
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v52 = v65;
        Date.init(timeIntervalSinceReferenceDate:)();
        v39((uint64_t)v49, v41);
        outlined destroy of Date?((uint64_t)v26);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v52, 0, 1, v41);
      }
      v39((uint64_t)v49, v41);
      uint64_t v43 = (uint64_t)v26;
    }
  }
  else
  {
    v44 = v56;
    uint64_t v45 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v56, v28, v11);
    MEMORY[0x270FA5388](v45);
    *(&v54 - 6) = (char *)v11;
    *(&v54 - 5) = (char *)v29;
    *(&v54 - 4) = (char *)v30;
    *(&v54 - 3) = (char *)v31;
    *(&v54 - 2) = v62;
    TimeDataSourceStorage.withValue(for:call:)(v66, (void (*)(char *))partial apply for closure #1 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:), (uint64_t)(&v54 - 8), v11, v30, (uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v11);
    uint64_t v46 = v57;
    outlined init with copy of Date?((uint64_t)v21, v57);
    uint64_t v47 = v63;
    uint64_t v48 = v64;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v46, 1, v64) == 1)
    {
      outlined destroy of Date?(v46);
    }
    else
    {
      v50 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v54, v46, v48);
      lazy protocol witness table accessor for type Date and conformance Date();
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
      {
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v53 = v65;
        Date.init(timeIntervalSinceReferenceDate:)();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v48);
        outlined destroy of Date?((uint64_t)v21);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v53, 0, 1, v48);
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v48);
    }
    uint64_t v43 = (uint64_t)v21;
  }
  return outlined init with take of Date?(v43, v65);
}

uint64_t closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  v70 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v66 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v69 = (char *)&v64 - v16;
  MEMORY[0x270FA5388](v17);
  v74 = (char *)&v64 - v18;
  MEMORY[0x270FA5388](v19);
  v72 = (char *)&v64 - v20;
  MEMORY[0x270FA5388](v21);
  v79 = (char *)&v64 - v22;
  uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = (void (*)(void, void, void))AssociatedTypeWitness;
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v64 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v65 = (char *)&v64 - v30;
  MEMORY[0x270FA5388](v31);
  v68 = (char *)&v64 - v32;
  double v34 = MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v64 - v35;
  (*(void (**)(char *, void, uint64_t, double))(v24 + 104))(v26, *MEMORY[0x263F8E220], v23, v34);
  uint64_t v81 = a3;
  uint64_t v82 = a4;
  uint64_t v75 = a4;
  uint64_t v76 = a6;
  uint64_t v83 = a5;
  uint64_t v84 = a6;
  uint64_t v37 = type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a5 + 56))(a1, v26, a3, a5, 1.0 / dbl_2461E73E0[*(char *)(a2 + *(int *)(v37 + 60))]);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  char v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 64))(a1, a3, a5);
  v78 = v36;
  uint64_t v67 = a2;
  if (v38)
  {
    v39 = v72;
    dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
    uint64_t v41 = v73;
    uint64_t v40 = v74;
    uint64_t v42 = v77;
    v44 = v79;
    uint64_t v43 = v80;
    uint64_t v45 = v71;
  }
  else
  {
    uint64_t v46 = v71;
    v39 = v72;
    uint64_t v41 = v73;
    (*(void (**)(char *, char *, void))(v71 + 16))(v72, v36, v73);
    (*(void (**)(char *, void, uint64_t, void (*)(void, void, void)))(v46 + 56))(v39, 0, 1, v41);
    uint64_t v42 = v77;
    v44 = v79;
    uint64_t v43 = v80;
    uint64_t v40 = v74;
    uint64_t v45 = v46;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v44, v39, v42);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v44, v42);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, void))(v45 + 48);
  int v48 = v47(v40, 1, v41);
  v51 = *(char **)(v43 + 8);
  uint64_t v50 = v43 + 8;
  v49 = v51;
  if (v48 != 1)
  {
    ((void (*)(char *, uint64_t))v49)(v44, v42);
    (*(void (**)(char *, void (*)(void, void, void)))(v45 + 8))(v78, v41);
    v54 = *(void (**)(char *, char *, void))(v45 + 32);
    v55 = v68;
    v54(v68, v40, v41);
    uint64_t v53 = v70;
    v54(v70, v55, v41);
    goto LABEL_12;
  }
  ((void (*)(char *, uint64_t))v49)(v40, v42);
  uint64_t v80 = v50;
  uint64_t v52 = v69;
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  if (v47(v52, 1, v41) != 1)
  {
    v56 = v65;
    v73 = *(void (**)(void, void, void))(v45 + 32);
    v74 = (char *)(v45 + 32);
    v73(v65, v52, v41);
    uint64_t v52 = v66;
    dispatch thunk of DiscreteFormatStyle.input(after:)();
    uint64_t v57 = *(void (**)(void, void))(v45 + 8);
    v57(v56, v41);
    uint64_t v58 = v79;
    v79 = v49;
    ((void (*)(char *, uint64_t))v49)(v58, v77);
    v57(v78, v41);
    int v59 = v47(v52, 1, v41);
    uint64_t v53 = v70;
    if (v59 == 1)
    {
      uint64_t v42 = v77;
      v49 = v79;
      goto LABEL_10;
    }
    uint64_t v61 = v64;
    v62 = (void (*)(uint64_t, char *, void))v73;
    v73(v64, v52, v41);
    v62((uint64_t)v53, v61, v41);
LABEL_12:
    uint64_t v60 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, void (*)(void, void, void)))(v45 + 56))(v53, v60, 1, v41);
  }
  ((void (*)(char *, uint64_t))v49)(v79, v42);
  (*(void (**)(char *, void (*)(void, void, void)))(v45 + 8))(v78, v41);
  uint64_t v53 = v70;
LABEL_10:
  ((void (*)(char *, uint64_t))v49)(v52, v42);
  uint64_t v60 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, void (*)(void, void, void)))(v45 + 56))(v53, v60, 1, v41);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimeDataFormatting.FallbackRedactionEntries<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (uint64_t (*)(uint64_t, void, void, void, void))implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next(), a2);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimeDataFormatting.ComplyingFormatStyleEntries<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimeDataFormatting.FallbackRedactionEntries<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of TimeDataFormatting.EntriesState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_245E14CD8()
{
  return objectdestroyTm_9((uint64_t (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (void (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries, (uint64_t (*)(uint64_t, uint64_t))TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:));
}

uint64_t partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(uint64_t a1)
{
  return partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(a1, (void (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries);
}

uint64_t sub_245E14D34()
{
  return objectdestroyTm_9((uint64_t (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.FallbackRedactionEntries.next()(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(a1, (void (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries, (uint64_t (*)(uint64_t, uint64_t))TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(uint64_t a1, void (*a2)(void, uint64_t *), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v8 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  uint64_t v13 = v3[2];
  uint64_t v7 = v13;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  a2(0, &v13);
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  uint64_t v11 = ((uint64_t (*)(void, uint64_t *))a2)(0, &v13);
  return a3(a1, v11);
}

uint64_t partial apply for closure #1 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(uint64_t a1)
{
  return partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(a1, (void (*)(void, uint64_t *))type metadata accessor for TimeDataFormatting.FallbackRedactionEntries);
}

uint64_t partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)(uint64_t a1, void (*a2)(void, uint64_t *))
{
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 16);
  long long v6 = *(_OWORD *)(v2 + 24);
  uint64_t v7 = v3;
  a2(0, &v5);
  return dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
}

uint64_t partial apply for closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #2 in TimeDataFormatting.FallbackRedactionEntries.nextEntry(for:)(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t static Color._background.getter()
{
  type metadata accessor for ColorBox<Color.BackgroundColorProvider>();

  return swift_allocObject();
}

void type metadata accessor for ColorBox<Color.BackgroundColorProvider>()
{
  if (!lazy cache variable for type metadata for ColorBox<Color.BackgroundColorProvider>)
  {
    lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.BackgroundColorProvider>);
    }
  }
}

uint64_t EnvironmentValues.backgroundContext.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t BackgroundContext.rawValue.getter()
{
  return *v0;
}

double static BackgroundStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, (uint64_t)&v11, &type metadata for BackgroundStyle, a3, (uint64_t)&protocol witness table for BackgroundStyle, a4, a5);
}

uint64_t EnvironmentValues.currentBackgroundStyle.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t EnvironmentValues.backgroundInfo.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  return swift_release();
}

unsigned char *static BackgroundStyle._apply(to:)(unsigned char *result)
{
  *result = 1;
  return result;
}

uint64_t View._addingBackgroundGroup()(uint64_t a1, uint64_t a2)
{
  return View._addingBackgroundGroup()(a1, a2, (uint64_t)&unk_2461E7400, (uint64_t)closure #1 in View._addingBackgroundGroup());
}

double key path getter for EnvironmentValues.backgroundInfo : EnvironmentValues@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t *)&v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  swift_release_n();
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.backgroundInfo : EnvironmentValues(long long *a1)
{
  long long v2 = *a1;
  return EnvironmentValues.backgroundInfo.setter((uint64_t *)&v2);
}

uint64_t View._addingBackgroundLayer()(uint64_t a1, uint64_t a2)
{
  return View._addingBackgroundGroup()(a1, a2, (uint64_t)&unk_2461E7430, (uint64_t)closure #1 in View._addingBackgroundGroup());
}

uint64_t View._addingBackgroundGroup()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = swift_getKeyPath();
  View.transformEnvironment<A>(_:transform:)(KeyPath, a4, 0, a1);

  return swift_release();
}

void *closure #1 in View._addingBackgroundGroup()(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.backgroundContext : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.backgroundContext.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.backgroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _EnvironmentBackgroundStyleModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t _EnvironmentBackgroundStyleModifier.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t EnvironmentValues.backgroundStyle.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.backgroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v7);
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.backgroundStyle.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void (*EnvironmentValues.backgroundStyle.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.backgroundStyle.modify;
}

void EnvironmentValues.backgroundStyle.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = *v4;
  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v6 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v7);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  swift_release();

  free(v2);
}

uint64_t EnvironmentValues.effectiveBackgroundStyle.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (v2) {
      return v2;
    }
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
    swift_release_n();
    if (v2) {
      return v2;
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static BackgroundStyle.shared;
  swift_retain();
  return v2;
}

uint64_t (*EnvironmentValues.backgroundContext.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.backgroundContext.modify;
}

uint64_t EnvironmentValues.backgroundContext.modify(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

SwiftUI::BackgroundContext_optional __swiftcall BackgroundContext.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::BackgroundContext_optional)rawValue;
}

void *static BackgroundContext.allCases.getter()
{
  return &outlined read-only object #0 of static BackgroundContext.allCases.getter;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance BackgroundContext@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance BackgroundContext(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance BackgroundContext;
}

uint64_t BackgroundInfo.layer.getter()
{
  return *(void *)v0;
}

uint64_t BackgroundInfo.layer.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*BackgroundInfo.layer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BackgroundInfo.groupCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t BackgroundInfo.groupCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*BackgroundInfo.groupCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::BackgroundInfo __swiftcall BackgroundInfo.init(layer:groupCount:)(Swift::Int layer, Swift::Int groupCount)
{
  *char v2 = layer;
  v2[1] = groupCount;
  result.groupCount = groupCount;
  result.layer = layer;
  return result;
}

BOOL static BackgroundInfo.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t _EnvironmentBackgroundStyleModifier.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _EnvironmentBackgroundStyleModifier.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_EnvironmentBackgroundStyleModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  int v3 = *a1;
  return static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)(&v3, a2);
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v5 = *(_DWORD *)(v4 + 16);
  v14[0] = v3;
  v14[1] = v5;
  uint64_t v16 = type metadata accessor for _EnvironmentBackgroundStyleModifier.ChildEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [BackgroundContext](0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v15, v16, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for [BackgroundContext](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v13;
  *(void *)(v10 + 24) = v8;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_WORD *)(v10 + 80) = 256;
  *(void *)(v10 + 88) = v9;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v10;
  int v12 = *(_DWORD *)(a2 + 32);
  if ((v12 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v12 | 0x20;
  }
  return result;
}

uint64_t static _EnvironmentBackgroundStyleModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *a1;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  int v8 = *((_DWORD *)a2 + 16);
  uint64_t v9 = a2[9];
  char v10 = *((unsigned char *)a2 + 80);
  uint64_t v22 = *a2;
  int v23 = v5;
  uint64_t v24 = v6;
  long long v25 = *(_OWORD *)(a2 + 3);
  uint64_t v26 = v7;
  long long v27 = *((_OWORD *)a2 + 3);
  int v28 = v8;
  uint64_t v29 = v9;
  char v30 = v10;
  LODWORD(v13) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _EnvironmentBackgroundStyleModifier._makeInputs(modifier:inputs:)((int *)&v13, (uint64_t)&v22);
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v24;
  long long v16 = v25;
  uint64_t v17 = v26;
  long long v18 = v27;
  int v19 = v28;
  uint64_t v20 = v29;
  char v21 = v30;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _EnvironmentBackgroundStyleModifier.ChildEnvironment.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _EnvironmentBackgroundStyleModifier();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _EnvironmentBackgroundStyleModifier.ChildEnvironment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _EnvironmentBackgroundStyleModifier();
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)v15 - v7 + 8;
  MaterialView.ChildEnvironment.environment.getter(a3);
  _EnvironmentBackgroundStyleModifier.ChildEnvironment.modifier.getter((uint64_t)v8);
  char v16 = 1;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  swift_retain();
  swift_retain();
  uint64_t v11 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v16, (uint64_t)v15, 0, a1, a2);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(*(void *)(a1 - 8) + 8))(v8, a1);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a3, v11);
  swift_release();
  swift_release();
  if (a3[1])
  {
    uint64_t v12 = *a3;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _EnvironmentBackgroundStyleModifier.ChildEnvironment.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t a2)
{
  return static _EnvironmentBackgroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  return static _EnvironmentBackgroundStyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t sub_245E16630(long long *a1)
{
  long long v2 = *a1;
  return EnvironmentValues.backgroundInfo.setter((uint64_t *)&v2);
}

uint64_t type metadata accessor for _EnvironmentBackgroundStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type BackgroundContext and conformance BackgroundContext()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext;
  if (!lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundContext and conformance BackgroundContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [BackgroundContext] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A];
  if (!lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A])
  {
    type metadata accessor for [BackgroundContext](255, &lazy cache variable for type metadata for [BackgroundContext], (uint64_t)&type metadata for BackgroundContext, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [BackgroundContext] and conformance [A]);
  }
  return result;
}

uint64_t sub_245E1675C()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t sub_245E167A4(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.backgroundContext.setter(&v2);
}

unsigned char *storeEnumTagSinglePayload for BackgroundContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E168A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _EnvironmentBackgroundStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _EnvironmentBackgroundStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E16C44);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_245E16C6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E16CFC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for BackgroundContextKey()
{
  return &type metadata for BackgroundContextKey;
}

ValueMetadata *type metadata accessor for BackgroundInfoKey()
{
  return &type metadata for BackgroundInfoKey;
}

ValueMetadata *type metadata accessor for Color.BackgroundColorProvider()
{
  return &type metadata for Color.BackgroundColorProvider;
}

unint64_t instantiation function for generic protocol witness table for Color.BackgroundColorProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.BackgroundColorProvider and conformance Color.BackgroundColorProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

void specialized Color.BackgroundColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t *)&v20);
    swift_release_n();
    swift_release_n();
    long long v19 = v20;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v18);
    swift_release_n();
    swift_release_n();
    char v17 = v18;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v16);
    swift_release_n();
    swift_release_n();
    char v2 = v16;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v3);
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized find1<A>(_:key:filter:)(v4, v20);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 72);
      uint64_t v7 = *(void *)(v5 + 80);
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    swift_release_n();
    *(void *)&long long v19 = v6;
    *((void *)&v19 + 1) = v7;
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundContextKey>, (uint64_t)&type metadata for BackgroundContextKey, (uint64_t)&protocol witness table for BackgroundContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v8);
    uint64_t v9 = swift_retain_n();
    uint64_t v10 = specialized find1<A>(_:key:filter:)(v9, v20);
    if (v10) {
      unsigned __int8 v11 = *(unsigned char *)(v10 + 72);
    }
    else {
      unsigned __int8 v11 = 0;
    }
    swift_release_n();
    char v17 = v11;
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v12);
    uint64_t v13 = swift_retain_n();
    uint64_t v14 = specialized find1<A>(_:key:filter:)(v13, v20);
    if (v14) {
      char v2 = *(unsigned char *)(v14 + 72);
    }
    else {
      char v2 = 0;
    }
    swift_release_n();
  }
  char v15 = v2;
  specialized static Color.systemBackgroundColor(info:context:scheme:)(&v19, (unsigned __int8 *)&v17, &v15);
}

uint64_t type metadata accessor for _EnvironmentBackgroundStyleModifier.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for [BackgroundContext](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for BackgroundStyleKey()
{
  return &type metadata for BackgroundStyleKey;
}

uint64_t instantiation function for generic protocol witness table for _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _EnvironmentBackgroundStyleModifier<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t ShapeStyle.mix<A>(_:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  Swift::Int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v18, a2, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  float v19 = a5;
  return InterpolatedShapeStyle.init(from:to:progress:)((uint64_t)v16, (uint64_t)v12, a2, a3, a4, v19);
}

uint64_t InterpolatedShapeStyle.init(from:to:progress:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v10 = type metadata accessor for InterpolatedShapeStyle();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v10 + 52), a2, a4);
  *(float *)(a5 + *(int *)(v10 + 56)) = a6;
  return result;
}

uint64_t type metadata accessor for InterpolatedShapeStyle()
{
  return swift_getGenericMetadata();
}

uint64_t InterpolatedShapeStyle.from.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t InterpolatedShapeStyle.from.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*InterpolatedShapeStyle.from.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t InterpolatedShapeStyle.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t InterpolatedShapeStyle.to.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*InterpolatedShapeStyle.to.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float InterpolatedShapeStyle.progress.getter(uint64_t a1)
{
  return *(float *)(v1 + *(int *)(a1 + 56));
}

uint64_t InterpolatedShapeStyle.progress.setter(uint64_t result, float a2)
{
  *(float *)(v2 + *(int *)(result + 56)) = a2;
  return result;
}

uint64_t (*InterpolatedShapeStyle.progress.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t InterpolatedShapeStyle._apply(to:)(uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  float v5 = *(float *)(v2 + *(int *)(a2 + 56));
  if (v5 == 0.0)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 32) + 32);
    uint64_t v7 = *(void *)(a2 + 16);
    return v6(result, v7);
  }
  else if (v5 == 1.0)
  {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 32))(v4, *(void *)(a2 + 24));
  }
  else
  {
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v9 = *(void *)(result + 16);
    switch(*(unsigned char *)(result + 24))
    {
      case 1:
        uint64_t v10 = *(void *)(result + 32);
        uint64_t v11 = *(void *)(v4 + 48);
        uint64_t v12 = *(void *)(v4 + 56);
        uint64_t v13 = *(void *)(v4 + 96);
        char v14 = *(unsigned char *)(v4 + 104);
        __int16 v15 = *(_WORD *)(v4 + 105);
        v32[0] = *(void *)v4;
        v32[1] = v8;
        v32[2] = v9;
        char v33 = 1;
        uint64_t v34 = v10;
        char v35 = *(unsigned char *)(v4 + 40);
        uint64_t v36 = v11;
        uint64_t v37 = v12;
        long long v16 = *(_OWORD *)(v4 + 80);
        long long v38 = *(_OWORD *)(v4 + 64);
        long long v39 = v16;
        uint64_t v40 = v13;
        char v41 = v14;
        __int16 v42 = v15;
        uint64_t v17 = *(void *)(a2 + 32);
        uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(v17 + 32);
        outlined copy of _ShapeStyle_Shape.Result(v10, v35);
        uint64_t v19 = *(void *)(a2 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        v18(v32, v19, v17);
        uint64_t v20 = v34;
        char v21 = v35;
        if (v35 == 1)
        {
          uint64_t v31 = v34;
          uint64_t v22 = *(void *)(a2 + 40);
          int v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
          uint64_t v24 = *(void *)(a2 + 24);
          swift_bridgeObjectRetain_n();
          v23(v4, v24, v22);
          uint64_t v25 = *(void *)(v4 + 32);
          int v26 = *(unsigned __int8 *)(v4 + 40);
          if (v26 == 1)
          {
            uint64_t v29 = v20;
            swift_bridgeObjectRetain();
            _ShapeStyle_Pack.animatableData.getter(&v30);
            outlined consume of _ShapeStyle_Shape.Result(v20, 1);
            _ShapeStyle_Pack.animatableData.getter(&v29);
            outlined consume of _ShapeStyle_Shape.Result(v25, 1);
            uint64_t v28 = v30;
            specialized static _ShapeStyle_Pack.AnimatableData.-= infix(_:_:)((uint64_t)&v29, &v28);
            _ShapeStyle_Pack.AnimatableData.scale(by:)(v5);
            uint64_t v28 = v29;
            specialized static _ShapeStyle_Pack.AnimatableData.+= infix(_:_:)((uint64_t)&v30, &v28);
            swift_bridgeObjectRelease();
            uint64_t v28 = v30;
            _ShapeStyle_Pack.animatableData.setter(&v28);
            outlined consume of _ShapeStyle_Shape.Result(v20, 1);
            swift_release();
            swift_release();
            swift_release();
            uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v25, 1);
            uint64_t v20 = v31;
          }
          else
          {
            outlined consume of _ShapeStyle_Shape.Result(v20, 1);
            outlined consume of _ShapeStyle_Shape.Result(v20, 1);
            uint64_t v27 = swift_bridgeObjectRetain();
            outlined consume of _ShapeStyle_Shape.Result(v27, 1);
            swift_release();
            swift_release();
            swift_release();
            uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v25, v26);
          }
          *(void *)(v4 + 32) = v20;
          *(unsigned char *)(v4 + 40) = 1;
        }
        else
        {
          (*(void (**)(uint64_t, void))(*(void *)(a2 + 40) + 32))(v4, *(void *)(a2 + 24));
          outlined consume of _ShapeStyle_Shape.Result(v20, v21);
          swift_release();
          swift_release();
          uint64_t result = swift_release();
        }
        break;
      case 2:
      case 3:
        return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 32))(v4, *(void *)(a2 + 24));
      case 4:
        return result;
      case 5:
        if (!(v9 | v8 | *(void *)result))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 32) + 32))(result, *(void *)(a2 + 16));
          if (*(unsigned char *)(v4 + 40) != 4 || (*(unsigned char *)(v4 + 32) & 1) == 0) {
            return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 32))(v4, *(void *)(a2 + 24));
          }
        }
        break;
      default:
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v4 + 32) = 0;
        *(unsigned char *)(v4 + 40) = 0;
        break;
    }
  }
  return result;
}

uint64_t type metadata completion function for InterpolatedShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InterpolatedShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 3;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  uint64_t v13 = v9 | *(_DWORD *)(v5 + 80) & 0xFC | 3;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(_DWORD *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v11 + v18) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t initializeWithCopy for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(_DWORD *)((*(void *)(v9 + 48) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 48) + 3 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithCopy for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  *(_DWORD *)((*(void *)(v9 + 40) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 40) + 3 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t initializeWithTake for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(_DWORD *)((*(void *)(v9 + 32) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 32) + 3 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for InterpolatedShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(_DWORD *)((*(void *)(v9 + 24) + 3 + v12) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v9 + 24) + 3 + v13) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedShapeStyle(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  if (v10 < a2)
  {
    unint64_t v12 = ((*(void *)(*(void *)(v5 - 8) + 64) + (v11 & ~v9) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFFC;
    if ((v12 & 0xFFFFFFFC) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E18118);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_21:
        unsigned int v18 = v17 - 1;
        if (v14)
        {
          unsigned int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (!v10) {
    return 0;
  }
  if (v6 >= v8) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
}

void storeEnumTagSinglePayload for InterpolatedShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = ((*(void *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_41;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 >= v10)
            {
              uint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
            else
            {
              unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
              int v23 = *(void (**)(unint64_t))(v9 + 56);
              v23(v22);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245E1838CLL);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

_UNKNOWN **sub_245E183B4()
{
  return &protocol witness table for InterpolatedShapeStyle<A, B>;
}

uint64_t EnvironmentValues.foregroundStyle.setter(uint64_t a1)
{
  return EnvironmentValues.foregroundStyle.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues._effectiveForegroundStyle.getter()
{
  swift_retain();
  swift_retain();
  uint64_t v0 = EnvironmentValues.foregroundStyle.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v1 = EnvironmentValues.defaultForegroundStyle.getter();
    swift_release();
    swift_release();
    if (!v1)
    {
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      uint64_t v1 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  return v1;
}

uint64_t View.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _ForegroundStyleModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t _ForegroundStyleModifier.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _ForegroundStyleModifier2.init(primary:secondary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for _ForegroundStyleModifier2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t View.foregroundStyle<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v33 = a6;
  v28[1] = a7;
  uint64_t v29 = a1;
  uint64_t v31 = a8;
  uint64_t v32 = a3;
  uint64_t v30 = a2;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  int v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v18;
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  uint64_t v37 = v21;
  uint64_t v22 = type metadata accessor for _ForegroundStyleModifier2();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x270FA5388](v22);
  int v26 = (char *)v28 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, v29, a4, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v30, a5);
  _ForegroundStyleModifier2.init(primary:secondary:)((uint64_t)v17, (uint64_t)v12, a4, a5, (uint64_t)v26);
  View.modifier<A>(_:)(v26, v32, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
}

uint64_t View.foregroundStyle<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.foregroundStyle<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v40[4];
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  int v48 = a8;
  uint64_t v46 = a9;
  uint64_t v47 = a4;
  v44 = a2;
  uint64_t v45 = a3;
  v40[1] = a12;
  uint64_t v15 = *(void *)(a7 - 8);
  __int16 v42 = a1;
  uint64_t v43 = v15;
  v40[2] = a10;
  v40[3] = a11;
  MEMORY[0x270FA5388](a1);
  char v41 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v24);
  int v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v27;
  uint64_t v50 = v28;
  v51 = v29;
  uint64_t v52 = v30;
  uint64_t v53 = v32;
  v54 = v31;
  uint64_t v33 = type metadata accessor for _ForegroundStyleModifier3();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)v40 - v36;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v42, a5, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v44, a6);
  long long v38 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v41, v45, a7);
  _ForegroundStyleModifier3.init(primary:secondary:tertiary:)((uint64_t)v26, (uint64_t)v21, v38, a5, a6, a7, (uint64_t)v37);
  View.modifier<A>(_:)(v37, v47, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v37, v33);
}

uint64_t _ForegroundStyleModifier3.init(primary:secondary:tertiary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for _ForegroundStyleModifier3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t View._foregroundStyle<A, B, C>(primary:secondary:tertiary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.foregroundStyle<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t (*EnvironmentValues.foregroundStyle.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = EnvironmentValues.foregroundStyle.getter();
  return EnvironmentValues.foregroundStyle.modify;
}

uint64_t EnvironmentValues.foregroundStyle.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.foregroundStyle.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.defaultForegroundStyle.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = EnvironmentValues.defaultForegroundStyle.getter();
  return EnvironmentValues.defaultForegroundStyle.modify;
}

uint64_t EnvironmentValues.defaultForegroundStyle.modify(uint64_t *a1, char a2)
{
  return EnvironmentValues.foregroundStyle.modify(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.foregroundStyle.modify(uint64_t *a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = (uint64_t *)a1[3];
  uint64_t v8 = *a1;
  uint64_t v9 = *v7;
  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    a3(v7, v8, a1 + 1);
    swift_release();
    swift_release();
    if (v7[1])
    {
      uint64_t v10 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      a4(v9, v10);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    a3(v7, v8, a1 + 2);
    swift_release();
    swift_release();
    if (v7[1])
    {
      uint64_t v11 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      a4(v9, v11);
      swift_release();
      swift_release();
    }
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.currentForegroundStyle.getter()
{
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  if (!result) {
    return EnvironmentValues.defaultForegroundStyle.getter();
  }
  return result;
}

uint64_t EnvironmentValues.effectiveForegroundStyle.getter()
{
  swift_retain();
  swift_retain();
  uint64_t v0 = EnvironmentValues.foregroundStyle.getter();
  if (!v0)
  {
    uint64_t v0 = EnvironmentValues.defaultForegroundStyle.getter();
    if (!v0)
    {
      if (one-time initialization token for sharedPrimary != -1) {
        swift_once();
      }
      uint64_t v0 = static HierarchicalShapeStyle.sharedPrimary;
      swift_retain();
    }
  }
  swift_release();
  swift_release();
  return v0;
}

uint64_t View.foregroundStyle<A, B, C>(primary:secondary:tertiary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.foregroundStyle<A, B, C>(_:_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t _DefaultForegroundStyleModifier.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t _DefaultForegroundStyleModifier.style.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*_DefaultForegroundStyleModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ForegroundStyleModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ForegroundStyleModifier2.primary.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier2.secondary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _ForegroundStyleModifier2.secondary.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_ForegroundStyleModifier2.secondary.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ForegroundStyleModifier3.graphInputsSemantics.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v4 != -1) {
    uint64_t result = swift_once();
  }
  *(_DWORD *)a1 = static Semantics.v4;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

uint64_t (*_ForegroundStyleModifier3.primary.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier3.secondary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t _ForegroundStyleModifier3.secondary.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 68), a1);
}

uint64_t (*_ForegroundStyleModifier3.secondary.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ForegroundStyleModifier3.tertiary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t _ForegroundStyleModifier3.tertiary.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 32) - 8) + 40))(v2 + *(int *)(a2 + 72), a1);
}

uint64_t (*_ForegroundStyleModifier3.tertiary.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ForegroundStyleModifier3._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v15 = *a1;
  uint64_t v16 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v17 = *(_DWORD *)(v16 + 16);
  v25[0] = v15;
  v25[1] = v17;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v27 = type metadata accessor for _ForegroundStyleModifier3.ForegroundStyleEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v25, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v26, v27, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  LODWORD(a5) = v29;
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = a5;
  *(void *)(v22 + 24) = v20;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_WORD *)(v22 + 80) = 256;
  *(void *)(v22 + 88) = v21;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v22;
  int v24 = *(_DWORD *)(a2 + 32);
  if ((v24 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v24 | 0x20;
  }
  return result;
}

uint64_t _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ForegroundStyleModifier3();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t _ForegroundStyleModifier3.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v57 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v13);
  v54 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  uint64_t v61 = v20;
  uint64_t v71 = v22;
  uint64_t v72 = v23;
  uint64_t v51 = v22;
  uint64_t v60 = v23;
  uint64_t v59 = type metadata accessor for _ForegroundStyleModifier3();
  uint64_t v65 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v25 = (char *)&v50 - v24;
  uint64_t v62 = a1;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v28 = *Value;
  uint64_t v27 = Value[1];
  uint64_t v64 = a6;
  *a6 = v28;
  a6[1] = v27;
  swift_retain();
  swift_retain();
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter((uint64_t)v25);
  uint64_t v29 = v53;
  uint64_t v30 = v50;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v25, a2);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v65 + 8);
  v65 += 8;
  uint64_t v63 = v31;
  v31(v25, v59);
  uint64_t v32 = v64[1];
  uint64_t v67 = *v64;
  uint64_t v68 = v32;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v66);
  swift_retain();
  swift_retain();
  uint64_t v52 = a5;
  uint64_t v56 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v66, (uint64_t)&v67, 0, a2, a5);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, a2);
  uint64_t v33 = v51;
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter((uint64_t)v25);
  uint64_t v34 = v59;
  uint64_t v36 = v54;
  uint64_t v35 = v55;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, &v25[*(int *)(v59 + 68)], a3);
  v63(v25, v34);
  uint64_t v37 = v64[1];
  uint64_t v67 = *v64;
  uint64_t v68 = v37;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v66);
  swift_retain();
  swift_retain();
  uint64_t v53 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v66, (uint64_t)&v67, 0, a3, v33);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, a3);
  uint64_t v38 = v61;
  uint64_t v39 = v60;
  _ForegroundStyleModifier3.ForegroundStyleEnvironment.modifier.getter((uint64_t)v25);
  char v41 = v57;
  uint64_t v40 = v58;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, &v25[*(int *)(v34 + 72)], v38);
  v63(v25, v34);
  __int16 v42 = v64;
  uint64_t v43 = *v64;
  uint64_t v44 = v64[1];
  uint64_t v67 = *v64;
  uint64_t v68 = v44;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v66);
  swift_retain();
  swift_retain();
  uint64_t v45 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v66, (uint64_t)&v67, 0, v38, v39);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v38);
  _s7SwiftUI13ShapeStyleBox33_C5308685324599C90E2F7A588812BB29LLCyAA0cD4PairVyAA03AnycD0VAHGGMaTm_0(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>>, (void (*)(uint64_t))type metadata accessor for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>);
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v53;
  v46[2] = v56;
  v46[3] = v47;
  v46[4] = v45;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v42, (uint64_t)v46);
  swift_release();
  swift_release();
  if (v42[1])
  {
    uint64_t v48 = *v42;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v43, v48);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance _ForegroundStyleModifier3<A, B, C>.ForegroundStyleEnvironment@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return _ForegroundStyleModifier3.ForegroundStyleEnvironment.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier3<A, B, C>(int *a1, uint64_t a2, uint64_t *a3)
{
  return static _ForegroundStyleModifier3._makeViewInputs(modifier:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

double static ForegroundStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, (uint64_t)&v11, &type metadata for ForegroundStyle, a3, (uint64_t)&protocol witness table for ForegroundStyle, a4, a5);
}

unsigned char *static ForegroundStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t specialized _ImplicitShapeStyle._apply(to:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) == 3)
  {
    if (*(_OWORD *)a1 == 1) {
      uint64_t v2 = EnvironmentValues.effectiveBackgroundStyle.getter();
    }
    else {
      uint64_t v2 = _ShapeStyle_Shape.effectiveForegroundStyle.getter();
    }
    uint64_t v4 = v2;
    uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    *(void *)(a1 + 32) = v4;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else
  {
    return specialized ForegroundStyle._apply(to:)(a1);
  }
  return result;
}

uint64_t type metadata accessor for _ForegroundStyleModifier3.ForegroundStyleEnvironment()
{
  return swift_getGenericMetadata();
}

uint64_t sub_245E1A018@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245E1A054()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t getEnumTagSinglePayload for _DefaultForegroundStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _DefaultForegroundStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245E1A474);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E1A810);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier2(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier2(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245E1ACFCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for _ForegroundStyleModifier3(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(a3[3] - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  unint64_t v16 = ((v12 + v14 + v11) & ~v14) + *(void *)(v13 + 64);
  uint64_t v17 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v13 + 80));
  if (v17 <= 7
    && v16 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~v9;
    uint64_t v22 = ~v14;
    uint64_t v25 = a3[3];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v23 = ((unint64_t)a2 + v10) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v21, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((((unint64_t)v4 + v10) & v21) + v15) & v22, (v23 + v15) & v22, v7);
  }
  else
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for _ForegroundStyleModifier3(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(a2[4] - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

uint64_t initializeWithCopy for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithCopy for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t initializeWithTake for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithTake for _ForegroundStyleModifier3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ForegroundStyleModifier3(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          int v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for _ForegroundStyleModifier3(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x245E1BA60);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

ValueMetadata *type metadata accessor for _ImplicitShapeStyle()
{
  return &type metadata for _ImplicitShapeStyle;
}

uint64_t sub_245E1BA98()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E1BB08()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E1BB88()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _ForegroundStyleModifier3<A, B, C>.ForegroundStyleEnvironment()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for ShapeStyleTriple();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyleTriple<AnyShapeStyle, AnyShapeStyle, AnyShapeStyle>);
    }
  }
}

void type metadata accessor for ShapeStyleBox<ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for ShapeStyleBox<ForegroundStyle>)
  {
    unint64_t v0 = type metadata accessor for ShapeStyleBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyleBox<ForegroundStyle>);
    }
  }
}

ValueMetadata *type metadata accessor for ForegroundStyleKey()
{
  return &type metadata for ForegroundStyleKey;
}

ValueMetadata *type metadata accessor for DefaultForegroundStyleKey()
{
  return &type metadata for DefaultForegroundStyleKey;
}

uint64_t static ShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (result != MEMORY[0x263F8E628])
  {
    uint64_t v3 = result;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, v3, AssociatedConformanceWitness);
  }
  return result;
}

{
  return static ShapeStyle._apply(to:)(a1);
}

void protocol witness for ShapeStyle.resolve(in:) in conformance LinearGradient()
{
}

void ShapeStyle<>.resolve(in:)()
{
}

uint64_t _ShapeStyle_Shape.applyingOpacity(at:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1 >= 1)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    v10[0] = *(void *)(v2 + 48);
    v10[1] = v6;
    unsigned int v7 = *(float (**)(uint64_t, void *))(*(void *)a2 + 152);
    swift_retain();
    swift_retain();
    float v8 = v7(a1, v10);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.OpacityColor>();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a2;
    *(double *)(v4 + 24) = v8;
  }
  swift_retain();
  return v4;
}

float _ShapeStyle_Shape.opacity(for:at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 56);
  v8[0] = *(void *)(v2 + 48);
  v8[1] = v4;
  uint64_t v5 = *(float (**)(uint64_t, void *))(*(void *)a1 + 152);
  swift_retain();
  swift_retain();
  float v6 = v5(a2, v8);
  swift_release();
  swift_release();
  return v6;
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance AnyGradient@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static ShapeStyle._makeView<A>(view:inputs:)(a1, a2, a5, a3, a6, a4, a7);
}

double static ShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 7);
  uint64_t v19 = a2[9];
  int v20 = v10;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v21, (uint64_t)&v13, a3, a4, a5, a6, a7);
}

uint64_t ShapeStyle.fallbackColor(in:level:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = a2;
  char v13 = 2;
  uint64_t v14 = 0;
  unsigned __int8 v15 = 5;
  uint64_t v16 = v7;
  uint64_t v17 = v6;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v20 = 0;
  char v21 = 1;
  __int16 v22 = 0;
  int v8 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v8(v12, a3, a4);
  uint64_t v9 = v14;
  int v10 = v15;
  outlined copy of _ShapeStyle_Shape.Result(v14, v15);
  outlined consume of _ShapeStyle_Shape.Result(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  if (v10 != 3)
  {
    outlined consume of _ShapeStyle_Shape.Result(v9, v10);
    return 0;
  }
  return v9;
}

float _ShapeStyle_Shape.applyingOpacity(at:to:)(uint64_t a1, float a2)
{
  if (a1 >= 1)
  {
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v5 = *(void *)(v2 + 56);
    EnvironmentValues.systemColorDefinition.getter();
    v9[0] = v6;
    v9[1] = v5;
    (*(float (**)(uint64_t, void *))(v7 + 16))(a1, v9);
  }
  return a2;
}

Swift::Float __swiftcall _ShapeStyle_Shape.opacity(at:)(Swift::Int at)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  EnvironmentValues.systemColorDefinition.getter();
  v7[0] = v3;
  v7[1] = v4;
  (*(void (**)(Swift::Int, void *))(v5 + 16))(at, v7);
  return result;
}

uint64_t _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  char v12 = *a6;
  *(unsigned char *)(a7 + 106) = 0;
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(void *)(a7 + 16) = v8;
  *(unsigned char *)(a7 + 24) = v9;
  *(void *)(a7 + 32) = v10;
  *(unsigned char *)(a7 + 40) = v11;
  *(_OWORD *)(a7 + 48) = *a3;
  *(void *)(a7 + 64) = a4;
  uint64_t result = outlined init with take of CGRect?(a5, a7 + 72);
  *(unsigned char *)(a7 + 105) = v12;
  return result;
}

BOOL static _ShapeStyle_Name.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t _ShapeStyle_Shape.currentForegroundStyle.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (!v1)
  {
    swift_retain();
    swift_retain();
    uint64_t v2 = EnvironmentValues.foregroundStyle.getter();
    if (!v2) {
      uint64_t v2 = EnvironmentValues.defaultForegroundStyle.getter();
    }
    uint64_t v1 = v2;
    swift_release();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t ShapeStyle.isMultiLevel(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  memset(v11, 0, sizeof(v11));
  char v12 = 5;
  uint64_t v13 = 0;
  unsigned __int8 v14 = 5;
  uint64_t v15 = v6;
  uint64_t v16 = v5;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  char v20 = 1;
  __int16 v21 = 0;
  uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 32);
  swift_retain();
  swift_retain();
  v7(v11, a2, a3);
  uint64_t v8 = v13;
  int v9 = v14;
  outlined copy of _ShapeStyle_Shape.Result(v13, v14);
  outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  if (v9 == 4)
  {
    if (v8) {
      return 1;
    }
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  }
  return 0;
}

void ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v9 = (char *)&v12 - v8;
  if (v10 != MEMORY[0x263F8E628])
  {
    long long v12 = *(_OWORD *)(a1 + 48);
    (*(void (**)(long long *, uint64_t, uint64_t))(a3 + 48))(&v12, a2, a3);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
}

void static Never._makeView<A>(view:inputs:)()
{
}

void protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance Never()
{
}

uint64_t *ShapeStyle.resolveBackgroundMaterial(in:level:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  unsigned __int8 v5 = a2;
  if (a2 + 1 < a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v9 = *result;
  uint64_t v8 = result[1];
  v43[0] = 1;
  v43[1] = a2;
  v43[2] = a2 + 1;
  char v44 = 1;
  uint64_t v45 = 0;
  char v46 = 5;
  uint64_t v47 = v9;
  uint64_t v48 = v8;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v51 = 0;
  char v52 = 1;
  __int16 v53 = 0;
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v10(v43, a3, a4);
  uint64_t v11 = v45;
  char v25 = v46;
  uint64_t v26 = v45;
  if (v46 == 1) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v29 = v11;
  unsigned __int8 v28 = 1;
  _ShapeStyle_Pack.subscript.getter(&v28, v5, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  uint64_t v12 = v30;
  uint64_t v13 = v31;
  uint64_t v14 = v32;
  unsigned __int8 v15 = v33;
  uint64_t v16 = v35;
  uint64_t v17 = v36;
  uint64_t v18 = v37;
  uint64_t v20 = v38;
  uint64_t v19 = v39;
  unsigned __int8 v23 = v42;
  uint64_t v24 = v41;
  if (v40 == 3)
  {
    uint64_t v22 = v34;
    outlined copy of Material.ID(v30, v31);
    outlined consume of _ShapeStyle_Pack.Fill(v12, v13, v14, v15, v22, v16, v17, v18, v20, v19, 3);
    outlined consume of GraphicsBlendMode?(v24, v23);
    swift_bridgeObjectRelease();
    unint64_t v21 = v13 & 0xFFFFFFFF000000FFLL;
  }
  else
  {
    outlined consume of _ShapeStyle_Pack.Fill(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
    outlined consume of GraphicsBlendMode?(v24, v23);
    swift_bridgeObjectRelease();
    uint64_t v12 = 0;
    unint64_t v21 = 255;
  }
  outlined consume of _ShapeStyle_Shape.Result(v26, v25);
  swift_release();
  swift_release();
  uint64_t result = (uint64_t *)swift_release();
  *a5 = v12;
  a5[1] = v21;
  return result;
}

uint64_t ShapeStyle.resolveGradient(in:level:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v22)(void **__return_ptr, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  unint64_t v33;
  float v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  float v61;
  uint64_t v62;
  unsigned __int8 v63;
  void v64[3];
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  long long v71;
  uint64_t v72;
  char v73;
  __int16 v74;
  uint64_t vars8;

  if (__OFADD__(a2, 1)) {
    goto LABEL_29;
  }
  uint64_t v5 = a2;
  if (a2 + 1 < a2) {
    goto LABEL_30;
  }
  uint64_t v47 = a5;
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  v64[0] = 0;
  v64[1] = a2;
  v64[2] = a2 + 1;
  uint64_t v65 = 1;
  char v66 = 0;
  uint64_t v67 = 5;
  uint64_t v68 = v17;
  uint64_t v69 = v16;
  uint64_t v70 = 0u;
  uint64_t v71 = 0u;
  uint64_t v72 = 0;
  v73 = 1;
  v74 = 0;
  uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 32);
  swift_retain();
  swift_retain();
  v18(v64, a3, a4);
  uint64_t v19 = v66;
  uint64_t v45 = v67;
  char v46 = v66;
  if (v67 == 1) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  long long v49 = v19;
  uint64_t v48 = 0;
  _ShapeStyle_Pack.subscript.getter(&v48, v5, (uint64_t)&v50);
  swift_bridgeObjectRelease();
  uint64_t v6 = v50;
  unsigned __int8 v10 = v53;
  uint64_t v11 = v54;
  uint64_t v9 = v55;
  uint64_t v8 = v58;
  uint64_t v12 = v59;
  uint64_t v20 = v62;
  unsigned __int8 v21 = v63;
  if (v60 != 1)
  {
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60);
    int v27 = v20;
    unsigned __int8 v28 = v21;
LABEL_16:
    outlined consume of GraphicsBlendMode?(v27, v28);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v29 = 0;
    goto LABEL_25;
  }
  uint64_t v39 = v51;
  char v40 = v52;
  uint64_t v41 = v56;
  unsigned __int8 v42 = v57;
  uint64_t v43 = v62;
  char v44 = v63;
  float v13 = v61;
  uint64_t v22 = *(void (**)(void **__return_ptr, uint64_t))(*v50 + 112);
  unsigned __int8 v23 = swift_retain();
  v22(&v50, v23);
  uint64_t v7 = v50;
  uint64_t v38 = v9;
  if (!v50)
  {
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v6, v39, v40, v10, v11, v9, v41, v42, v8, v12, 1);
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v6, v39, v40, v10, v11, v9, v41, v42, v8, v12, 1);
    int v27 = v43;
    unsigned __int8 v28 = v44;
    goto LABEL_16;
  }
  uint64_t v5 = v50[2];
  uint64_t v37 = v51;
  if (v5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_31;
    }
    while (1)
    {
      uint64_t v24 = v7[2];
      char v25 = v5 - 1;
      if (v24 < v5 - 1) {
        char v25 = v7[2];
      }
      if (v25 > 1)
      {
        uint64_t v30 = v25 + 1;
        uint64_t v31 = v30 & 1;
        if ((v30 & 1) == 0) {
          uint64_t v31 = 2;
        }
        uint64_t v26 = v30 - v31;
        uint64_t v32 = (float *)v7 + 23;
        uint64_t v33 = v26;
        do
        {
          uint64_t v34 = v13 * *v32;
          *(v32 - 12) = v13 * *(v32 - 12);
          *uint64_t v32 = v34;
          v32 += 24;
          v33 -= 2;
        }
        while (v33);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v35 = 48 * v26 + 44;
      while (v26 < v24)
      {
        ++v26;
        *(float *)((char *)v7 + v35) = v13 * *(float *)((char *)v7 + v35);
        v35 += 48;
        if (v5 == v26) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    }
  }
LABEL_24:
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v6, v39, v40, v10, v11, v9, v41, v42, v8, v12, 1);
  outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v6, v39, v40, v10, v11, v38, v41, v42, v8, v12, 1);
  outlined consume of GraphicsBlendMode?(v43, v44);
  swift_bridgeObjectRelease();
  uint64_t v29 = v37;
LABEL_25:
  *(void *)uint64_t v47 = v7;
  *(unsigned char *)(v47 + 8) = v29;
  outlined consume of _ShapeStyle_Shape.Result(v46, v45);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t _ShapeStyle_Name.rawValue.getter()
{
  return *v0;
}

SwiftUI::_ShapeStyle_Name_optional __swiftcall _ShapeStyle_Name.init(rawValue:)(SwiftUI::_ShapeStyle_Name_optional rawValue)
{
  SwiftUI::_ShapeStyle_Name value = rawValue.value;
  if (rawValue.value >= SwiftUI__ShapeStyle_Name_unknownDefault) {
    SwiftUI::_ShapeStyle_Name value = SwiftUI__ShapeStyle_Name_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

SwiftUI::_ShapeStyle_Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _ShapeStyle_Name(Swift::UInt8 *a1)
{
  return _ShapeStyle_Name.init(rawValue:)(*a1);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ShapeStyle_Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

__n128 _ShapeStyle_Shape.operation.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unsigned __int8 v3 = v1[1].n128_u8[8];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

__n128 _ShapeStyle_Shape.operation.setter(__n128 *a1)
{
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u8[8] = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.operation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *(void *)a1 = v2;
  char v3 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of _ShapeStyle_Shape.Result(v2, v3);
}

uint64_t _ShapeStyle_Shape.result.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.result.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t _ShapeStyle_Shape.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v3;
  return result;
}

uint64_t (*_ShapeStyle_Shape.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.foregroundStyle.getter()
{
  return swift_retain();
}

uint64_t _ShapeStyle_Shape.foregroundStyle.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*_ShapeStyle_Shape.foregroundStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _ShapeStyle_Shape.bounds.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 104);
  __n128 result = *(__n128 *)(v1 + 72);
  long long v4 = *(_OWORD *)(v1 + 88);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t _ShapeStyle_Shape.bounds.setter(uint64_t a1)
{
  return outlined init with take of CGRect?(a1, v1 + 72);
}

uint64_t (*_ShapeStyle_Shape.bounds.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ShapeStyle_Shape.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 105);
}

unsigned char *_ShapeStyle_Shape.role.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 105) = *result;
  return result;
}

uint64_t (*_ShapeStyle_Shape.role.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeStyle_Shape.RecursiveStyles.rawValue.getter()
{
  return *v0;
}

uint64_t _ShapeStyle_Shape.RecursiveStyles.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _ShapeStyle_Shape.RecursiveStyles.content.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static _ShapeStyle_Shape.RecursiveStyles.foreground.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static _ShapeStyle_Shape.RecursiveStyles.background.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static _ShapeStyle_Shape.RecursiveStyles.materialProvider.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void _ShapeStyle_Shape.activeRecursiveStyles.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 106);
}

unsigned char *_ShapeStyle_Shape.activeRecursiveStyles.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 106) = *result;
  return result;
}

uint64_t (*_ShapeStyle_Shape.activeRecursiveStyles.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ShapeStyle_ShapeType.Operation.== infix(_:_:)()
{
  return 1;
}

void _ShapeStyle_ShapeType.Operation.hash(into:)()
{
}

Swift::Int _ShapeStyle_ShapeType.Operation.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t (*_ShapeStyle_ShapeType.operation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ShapeStyle_ShapeType.result.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_ShapeStyle_ShapeType.result.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*_ShapeStyle_ShapeType.result.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in Never()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Name and conformance _ShapeStyle_Name()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Name and conformance _ShapeStyle_Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_Shape.RecursiveStyles and conformance _ShapeStyle_Shape.RecursiveStyles);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation;
  if (!lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeStyle_ShapeType.Operation and conformance _ShapeStyle_ShapeType.Operation);
  }
  return result;
}

uint64_t dispatch thunk of static ShapeStyle._makeView<A>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static ShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ShapeStyle.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

unsigned char *storeEnumTagSinglePayload for _ShapeStyle_Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E1D388);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Name()
{
  return &type metadata for _ShapeStyle_Name;
}

uint64_t destroy for _ShapeStyle_Shape(uint64_t a1)
{
  outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for _ShapeStyle_Shape(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  outlined copy of _ShapeStyle_Shape.Result(v4, v5);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ShapeStyle_Shape(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 4);
  char v6 = *((unsigned char *)a2 + 40);
  outlined copy of _ShapeStyle_Shape.Result(v5, v6);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  char v8 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of _ShapeStyle_Shape.Result(v7, v8);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_retain();
  swift_release();
  long long v9 = *(long long *)((char *)a2 + 72);
  long long v10 = *(long long *)((char *)a2 + 88);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 105) = *((unsigned char *)a2 + 105);
  *(unsigned char *)(a1 + 106) = *((unsigned char *)a2 + 106);
  return a1;
}

__n128 __swift_memcpy107_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 91) = *(long long *)((char *)a2 + 91);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _ShapeStyle_Shape(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Shape(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 107)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Shape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 107) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 107) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape()
{
  return &type metadata for _ShapeStyle_Shape;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_Shape.Operation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _ShapeStyle_Shape.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _ShapeStyle_Shape.Operation(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 4u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Shape.Operation(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 5;
  if (a2 >= 5)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 5;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.Operation()
{
  return &type metadata for _ShapeStyle_Shape.Operation;
}

uint64_t initializeBufferWithCopyOfBuffer for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of _ShapeStyle_Shape.Result(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for _ShapeStyle_Shape.Result(uint64_t a1)
{
  return outlined consume of _ShapeStyle_Shape.Result(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of _ShapeStyle_Shape.Result(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  return a1;
}

uint64_t assignWithTake for _ShapeStyle_Shape.Result(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  return a1;
}

uint64_t getEnumTag for _ShapeStyle_Shape.Result(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 4u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for _ShapeStyle_Shape.Result(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.Result()
{
  return &type metadata for _ShapeStyle_Shape.Result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.PreparedTextResult()
{
  return &type metadata for _ShapeStyle_Shape.PreparedTextResult;
}

ValueMetadata *type metadata accessor for _ShapeStyle_Shape.RecursiveStyles()
{
  return &type metadata for _ShapeStyle_Shape.RecursiveStyles;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ShapeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for _ShapeStyle_ShapeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E1DAC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType()
{
  return &type metadata for _ShapeStyle_ShapeType;
}

unsigned char *storeEnumTagSinglePayload for _ShapeStyle_ShapeType.Operation(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245E1DB9CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType.Operation()
{
  return &type metadata for _ShapeStyle_ShapeType.Operation;
}

uint64_t getEnumTagSinglePayload for _ShapeStyle_ShapeType.Result(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E1DC90);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for _ShapeStyle_ShapeType.Result(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245E1DD78);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ShapeStyle_ShapeType.Result()
{
  return &type metadata for _ShapeStyle_ShapeType.Result;
}

uint64_t ShapeStyle.offset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t result = type metadata accessor for OffsetShapeStyle();
  *(void *)(a3 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t static ShapeStylePair._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance ShapeStylePair<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ShapeStylePair._apply(to:)(a1, *(void *)(a2 + 16), a3, *(void *)(a2 + 32));
}

uint64_t ShapeStyleTriple._apply(to:)(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v6 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v3 == v4) {
        return result;
      }
      unsigned int v55 = *(void *)result;
      if (v4 <= 2) {
        goto LABEL_44;
      }
      *(void *)uint64_t result = *(void *)result;
      *(_OWORD *)(result + 8) = xmmword_24619B550;
      *(unsigned char *)(result + 24) = 1;
      (*(void (**)(uint64_t, void))(a2[7] + 32))(result, a2[4]);
      if (v3 <= 2) {
        uint64_t v8 = 2;
      }
      else {
        uint64_t v8 = v3;
      }
      int v9 = *(unsigned __int8 *)(v6 + 40);
      if (v9 == 1) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = *(void *)(v6 + 32);
      }
      uint64_t v42 = v10;
      if (v9 == 1) {
        char v11 = 5;
      }
      else {
        char v11 = *(unsigned char *)(v6 + 40);
      }
      if (v9 == 1) {
        uint64_t v12 = *(void **)(v6 + 32);
      }
      else {
        uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v13 = v12[2];
      v54 = v12;
      if (!v13) {
        goto LABEL_43;
      }
      char v39 = v11;
      uint64_t v41 = v4;
      uint64_t v40 = v3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_22;
      }
      break;
    case 2:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      char v7 = 2;
      goto LABEL_34;
    case 3:
      return result;
    case 4:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      char v7 = 4;
LABEL_34:
      *(unsigned char *)(result + 24) = v7;
      if (v2 <= 0) {
        goto LABEL_70;
      }
      if (v2 != 1) {
        return (*(uint64_t (**)(uint64_t, void))(a2[7] + 32))(result, a2[4]);
      }
      return (*(uint64_t (**)(uint64_t, void))(a2[6] + 32))(result, a2[3]);
    case 5:
      if (!(v4 | v3 | v2))
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v6 + 32) = 1;
        *(unsigned char *)(v6 + 40) = 4;
      }
      return result;
    default:
      if (v2 == 1)
      {
        *(void *)uint64_t result = 0;
        *(void *)(result + 8) = 0;
        *(unsigned char *)(result + 24) = 0;
        *(void *)(result + 16) = 0;
        return (*(uint64_t (**)(uint64_t, void))(a2[6] + 32))(result, a2[3]);
      }
      else if (v2)
      {
        *(void *)uint64_t result = 0;
        *(void *)(result + 8) = 0;
        *(unsigned char *)(result + 24) = 0;
        *(void *)(result + 16) = 0;
        return (*(uint64_t (**)(uint64_t, void))(a2[7] + 32))(result, a2[4]);
      }
      else
      {
LABEL_70:
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(a2[5] + 32);
        uint64_t v38 = a2[2];
        return v37(v6, v38);
      }
  }
  while (2)
  {
    v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v54);
LABEL_22:
    unsigned int v14 = v2;
    uint64_t v15 = 0;
    uint64_t v16 = v54;
    uint64_t v17 = v54 + 4;
    do
    {
      unint64_t v18 = v16[2];
      if (v15 >= v18) {
        goto LABEL_74;
      }
      uint64_t v19 = (unsigned __int8 *)&v17[15 * v15];
      unsigned int v20 = *v19;
      if (v20 < v14) {
        goto LABEL_24;
      }
      if (v20 > v14) {
        break;
      }
      uint64_t v21 = v19[1];
      BOOL v22 = __OFADD__(v21, v8);
      uint64_t v23 = v21 + v8;
      if (v22) {
        goto LABEL_75;
      }
      if (v23 < 0)
      {
        unint64_t v24 = v18 - 1;
        uint64_t v25 = v18 - 1 - v15;
        if (v25 < 0)
        {
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245E1E444);
        }
        uint64_t v26 = &v17[15 * v15];
        uint64_t v53 = v26[12];
        char v47 = *((unsigned char *)v26 + 88);
        uint64_t v45 = v26[9];
        uint64_t v46 = v26[10];
        uint64_t v51 = v26[7];
        uint64_t v52 = v26[8];
        uint64_t v49 = v26[5];
        uint64_t v50 = v26[6];
        uint64_t v27 = v26[2];
        uint64_t v43 = v26[3];
        uint64_t v44 = v26[4];
        uint64_t v28 = v26[1];
        unsigned __int8 v48 = *((unsigned char *)v26 + 104);
        memmove(v19, v19 + 120, 120 * v25);
        v54[2] = v24;
        uint64_t v16 = v54;
        outlined consume of _ShapeStyle_Pack.Fill(v28, v27, v43, v44, v49, v50, v51, v52, v45, v46, v47);
        outlined consume of GraphicsBlendMode?(v53, v48);
        swift_bridgeObjectRelease();
        --v13;
        unsigned int v14 = v2;
        continue;
      }
      v19[1] = v23;
LABEL_24:
      ++v15;
    }
    while (v15 < v13);
    uint64_t v4 = v41;
    uint64_t v3 = v40;
    char v11 = v39;
LABEL_43:
    uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v42, v11);
    *(void *)(v6 + 32) = v54;
    *(unsigned char *)(v6 + 40) = 1;
LABEL_44:
    if (v3 < 2 && v4 > 1)
    {
      *(void *)uint64_t v6 = v2;
      *(_OWORD *)(v6 + 8) = xmmword_24619B550;
      *(unsigned char *)(v6 + 24) = 1;
      (*(void (**)(uint64_t, void))(a2[6] + 32))(v6, a2[3]);
      int v30 = *(unsigned __int8 *)(v6 + 40);
      if (v30 == 1) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *(void *)(v6 + 32);
      }
      if (v30 == 1) {
        char v31 = 5;
      }
      else {
        char v31 = *(unsigned char *)(v6 + 40);
      }
      if (v30 == 1) {
        uint64_t v8 = *(void *)(v6 + 32);
      }
      else {
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      uint64_t v32 = *(void *)(v8 + 16);
      if (v32)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v8);
        }
        unint64_t v33 = 0;
        unint64_t v34 = *(void *)(v8 + 16);
        uint64_t v35 = (unsigned char *)(v8 + 33);
        while (v33 < v34)
        {
          unsigned int v36 = *(v35 - 1);
          if (v36 >= v55)
          {
            if (v36 > v55) {
              goto LABEL_66;
            }
            ++*v35;
          }
          ++v33;
          v35 += 120;
          if (v32 == v33) {
            goto LABEL_66;
          }
        }
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        continue;
      }
LABEL_66:
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v13, v31);
      *(void *)(v6 + 32) = v8;
      *(unsigned char *)(v6 + 40) = 1;
    }
    break;
  }
  if (v3 < 1 && v4 >= 1)
  {
    *(void *)uint64_t v6 = v2;
    *(_OWORD *)(v6 + 8) = xmmword_24619B550;
    *(unsigned char *)(v6 + 24) = 1;
    goto LABEL_70;
  }
  return result;
}

uint64_t static ShapeStyleTriple._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance ShapeStyleTriple<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ShapeStyleTriple._apply(to:)(a1, *(void *)(a2 + 16), a3, a4, *(void *)(a2 + 40));
}

uint64_t OffsetShapeStyle.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t OffsetShapeStyle.base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*OffsetShapeStyle.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OffsetShapeStyle.offset.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t OffsetShapeStyle.offset.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*OffsetShapeStyle.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static OffsetShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t partial apply for closure #1 in OffsetShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v5 + *(int *)(type metadata accessor for OffsetShapeStyle() + 36));
  *a2 = a1;
  a2[1] = v6;

  return swift_retain();
}

void type metadata accessor for OffsetShapeStyle<AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for OffsetShapeStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>);
    }
  }
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance OffsetShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static OffsetShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t getEnumTagSinglePayload for OffsetShapeStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E1E780);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for OffsetShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E1E940);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ShapeStyleTriple(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            char v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for ShapeStyleTriple(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x245E1EFB8);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      char v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t type metadata accessor for ShapeStyleTriple()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ShapeStylePair(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ShapeStylePair(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245E1F4BCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          int v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          unsigned int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

BOOL static ShapeRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ShapeRole.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ShapeRole.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance UnevenRoundedRectangle._Inset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance Rectangle.AsymmetricalInset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance ContainerRelativeShape._Inset@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ShapeRole and conformance ShapeRole()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole;
  if (!lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeRole and conformance ShapeRole);
  }
  return result;
}

uint64_t dispatch thunk of Shape.path(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Shape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Shape.layoutDirectionBehavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Shape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

unsigned char *storeEnumTagSinglePayload for ShapeRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E1F778);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientForegroundTextEffect()
{
  return &type metadata for GradientForegroundTextEffect;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in GradientForegroundTextEffect()
{
  return &protocol witness table for Text.Effect.DefaultDurationProvider;
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GradientForegroundTextEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return specialized GradientForegroundTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a4, a6);
}

unint64_t instantiation function for generic protocol witness table for GradientForegroundTextEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized GradientForegroundTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CGFloat v419 = *(double *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  CGFloat v9 = *(double *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  double v383 = *(double *)(a2 + 24);
  double v384 = *(double *)(a2 + 16);
  double v382 = *(double *)(a2 + 48);
  char v385 = *(unsigned char *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v386 = *(void *)(a2 + 80);
  v484[0] = *(void *)(a1 + 16);
  v484[1] = v6;
  v484[2] = v7;
  v484[3] = v8;
  *(CGFloat *)&v484[4] = v9;
  v484[5] = v10;
  double v12 = *MEMORY[0x263F001A0];
  double y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat b = *(double *)(MEMORY[0x263F001A0] + 24);
  CGFloat v16 = *(double *)(v5 + 16);
  if (v16 == 0.0)
  {
    double x = *MEMORY[0x263F001A0];
    if (!v11)
    {
LABEL_215:
      if (!v386) {
        goto LABEL_225;
      }
      goto LABEL_222;
    }
LABEL_218:
    type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>();
    uint64_t v330 = swift_dynamicCastClass();
    if (v330)
    {
      LODWORD(v11) = *(unsigned __int8 *)(v330 + 16);
      if (!v386) {
        goto LABEL_225;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      if (!v386) {
        goto LABEL_225;
      }
    }
LABEL_222:
    type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>();
    uint64_t v331 = swift_dynamicCastClass();
    if (v331)
    {
      int v332 = *(unsigned __int8 *)(v331 + 16);
      if (v11 == v332) {
        goto LABEL_233;
      }
      goto LABEL_227;
    }
LABEL_225:
    if (!v11)
    {
LABEL_234:
      float v336 = 0.0;
LABEL_235:
      uint64_t v337 = *(void *)(v5 + 16);
      if (!v337) {
        goto LABEL_240;
      }
LABEL_236:
      swift_bridgeObjectRetain();
      uint64_t v338 = v337 - 1;
      for (uint64_t i = 32; ; i += 144)
      {
        long long v477 = *(_OWORD *)(v5 + i);
        long long v340 = *(_OWORD *)(v5 + i + 16);
        long long v341 = *(_OWORD *)(v5 + i + 32);
        long long v342 = *(_OWORD *)(v5 + i + 48);
        long long v481 = *(_OWORD *)(v5 + i + 64);
        long long v480 = v342;
        long long v479 = v341;
        long long v478 = v340;
        long long v343 = *(_OWORD *)(v5 + i + 80);
        long long v344 = *(_OWORD *)(v5 + i + 96);
        long long v345 = *(_OWORD *)(v5 + i + 112);
        *(_OWORD *)&v483.tdouble x = *(_OWORD *)(v5 + i + 128);
        *(_OWORD *)&v483.CGFloat c = v345;
        *(_OWORD *)&v483.CGFloat a = v344;
        long long v482 = v343;
        long long v475 = *(_OWORD *)(v5 + i + 80);
        CGAffineTransform v476 = *(CGAffineTransform *)(v5 + i + 96);
        *(_OWORD *)&v472.CGFloat c = *(_OWORD *)(v5 + i + 16);
        *(_OWORD *)&v472.tdouble x = *(_OWORD *)(v5 + i + 32);
        long long v473 = *(_OWORD *)(v5 + i + 48);
        long long v474 = *(_OWORD *)(v5 + i + 64);
        *(_OWORD *)&v472.CGFloat a = *(_OWORD *)(v5 + i);
        v467.CGFloat a = v419;
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t *)&v467, v484, 0, 0, 1, a3);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        if (!v338) {
          break;
        }
        --v338;
      }
      swift_bridgeObjectRelease();
LABEL_240:
      tdouble x = *(double *)a3;
      swift_retain();
      CGFloat a = width;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v346 = RBDrawingStateInit();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v347 = swift_retain();
        *(double *)&uint64_t v348 = COERCE_DOUBLE(GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v347, v346, 1, 0));
        swift_release();
        tdouble x = *(double *)&v348;
      }
      uint64_t v349 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v350 = swift_retain();
      uint64_t v351 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v350, v349, 0, 1);
      *(void *)&v467.CGFloat a = v351;
      float v352 = *(float *)(v351 + 48);
      swift_retain_n();
      if (v352 != v336)
      {
        uint64_t v353 = v351;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v354 = RBDrawingStateInit();
          swift_allocObject();
          uint64_t v355 = swift_retain();
          uint64_t v353 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v355, v354, 1, 0);
          *(void *)&v467.CGFloat a = v353;
          swift_release();
        }
        *(float *)(v353 + 48) = v336;
      }
      id v356 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63878]), sel_init);
      LODWORD(v357) = *MEMORY[0x263F638E0];
      LODWORD(v358) = -1.0;
      LODWORD(v359) = -1.0;
      objc_msgSend(v356, sel_addConditionWithFillColor_colorSpace_, 1, v358, v359, 0.0, v357);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v360 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v361 = swift_retain();
        *(void *)&v467.CGFloat a = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v361, v360, 1, 0);
        swift_release();
      }
      RBDrawingStateAddPredicateStyle();
      if (v337)
      {
        swift_bridgeObjectRetain();
        uint64_t v362 = v337 - 1;
        for (uint64_t j = 32; ; j += 144)
        {
          long long v477 = *(_OWORD *)(v5 + j);
          long long v364 = *(_OWORD *)(v5 + j + 16);
          long long v365 = *(_OWORD *)(v5 + j + 32);
          long long v366 = *(_OWORD *)(v5 + j + 48);
          long long v481 = *(_OWORD *)(v5 + j + 64);
          long long v480 = v366;
          long long v479 = v365;
          long long v478 = v364;
          long long v367 = *(_OWORD *)(v5 + j + 80);
          long long v368 = *(_OWORD *)(v5 + j + 96);
          long long v369 = *(_OWORD *)(v5 + j + 112);
          *(_OWORD *)&v483.tdouble x = *(_OWORD *)(v5 + j + 128);
          *(_OWORD *)&v483.CGFloat c = v369;
          *(_OWORD *)&v483.CGFloat a = v368;
          long long v482 = v367;
          long long v475 = *(_OWORD *)(v5 + j + 80);
          CGAffineTransform v476 = *(CGAffineTransform *)(v5 + j + 96);
          *(_OWORD *)&v472.CGFloat c = *(_OWORD *)(v5 + j + 16);
          *(_OWORD *)&v472.tdouble x = *(_OWORD *)(v5 + j + 32);
          long long v473 = *(_OWORD *)(v5 + j + 48);
          long long v474 = *(_OWORD *)(v5 + j + 64);
          *(_OWORD *)&v472.CGFloat a = *(_OWORD *)(v5 + j);
          v462.CGFloat a = v419;
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)((uint64_t *)&v462, v484, 0xBF800000BF800000, 0x3F80000000000000uLL, 0, (uint64_t *)&v467);
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          if (!v362) {
            break;
          }
          --v362;
        }

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_release();
      swift_release();
      RBDrawingStateClipLayer();
      swift_release();
      swift_retain();
      v579.origin.double x = x;
      v579.origin.double y = y;
      v579.size.CGFloat width = a;
      v579.size.CGFloat height = b;
      if (CGRectIsNull(v579))
      {
        CGFloat v35 = 0.0;
        CGFloat v9 = 0.0;
        CGFloat c = 0.0;
        CGFloat v16 = 0.0;
        unsigned __int8 ty_low = 6;
      }
      else
      {
        unsigned __int8 ty_low = 0;
        CGFloat v35 = x;
        CGFloat v9 = y;
        CGFloat c = a;
        CGFloat v16 = b;
      }
      v467.CGFloat a = v35;
      v467.CGFloat b = v9;
      v467.CGFloat c = c;
      v467.CGFloat d = v16;
      LOBYTE(v467.tx) = ty_low;
      type metadata accessor for _ContiguousArrayStorage<Color>();
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_2461BDD50;
      if (one-time initialization token for red != -1) {
        goto LABEL_279;
      }
      goto LABEL_258;
    }
    LOBYTE(v332) = 0;
LABEL_227:
    if ((v385 & 0xFE) == 2)
    {
      if (v383 - v384 >= 0.0)
      {
        double v379 = (v383 - v384) / v382;
        double v334 = 0.0;
        if (v379 >= 0.0)
        {
          if (v379 <= 1.0) {
            double v334 = (v383 - v384) / v382;
          }
          else {
            double v334 = 1.0;
          }
        }
      }
      else
      {
        double v333 = 0.0;
        double v334 = 0.0 / v382;
        if (0.0 / v382 < 0.0 || (double v333 = 1.0, v334 > 1.0))
        {
          double v335 = 0.0;
          if (v332)
          {
LABEL_267:
            double v380 = v335 + v333 * 0.5 + v335 + v333 * 0.5 + -1.0;
            float v336 = 1.0 - v380 * v380;
            uint64_t v337 = *(void *)(v5 + 16);
            if (!v337) {
              goto LABEL_240;
            }
            goto LABEL_236;
          }
LABEL_266:
          double v335 = 0.5;
          goto LABEL_267;
        }
      }
      double v335 = 0.0;
      double v333 = v334;
      if (v332) {
        goto LABEL_267;
      }
      goto LABEL_266;
    }
LABEL_233:
    float v336 = 1.0;
    if (v332) {
      goto LABEL_235;
    }
    goto LABEL_234;
  }
  uint64_t v381 = v11;
  uint64_t v17 = v5 + 32;
  uint64_t v409 = v7 + 32;
  v414 = (uint64_t *)(v7 + 40);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  double x = v12;
  double v433 = width;
  double v434 = y;
  double v431 = v12;
  double r2 = b;
  CGFloat r1 = b;
  v397 = a3;
  uint64_t v398 = v5;
  uint64_t v395 = v5 + 32;
  double v396 = v16;
  while (1)
  {
    int v24 = (long long *)(v17 + 144 * v18);
    long long v477 = *v24;
    long long v25 = v24[1];
    long long v26 = v24[2];
    long long v27 = v24[3];
    long long v481 = v24[4];
    long long v480 = v27;
    long long v479 = v26;
    long long v478 = v25;
    long long v28 = v24[5];
    long long v29 = v24[6];
    long long v30 = v24[7];
    *(_OWORD *)&v483.tdouble x = v24[8];
    *(_OWORD *)&v483.CGFloat c = v30;
    *(_OWORD *)&v483.CGFloat a = v29;
    long long v482 = v28;
    if (*((double *)&v28 + 1) > 0.0009765625) {
      break;
    }
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
    CGFloat v20 = v12;
    CGFloat v22 = v433;
    CGFloat v21 = v434;
    CGFloat v23 = r2;
LABEL_4:
    ++v18;
    v493.origin.double x = x;
    v493.origin.double y = y;
    v493.size.CGFloat width = width;
    v493.size.CGFloat height = r1;
    CGRect v494 = CGRectUnion(v493, *(CGRect *)&v20);
    double x = v494.origin.x;
    double y = v494.origin.y;
    CGFloat width = v494.size.width;
    CGFloat r1 = v494.size.height;
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
    if (v18 == *(void *)&v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      CGFloat b = r1;
      LODWORD(v11) = v381;
      if (!v381) {
        goto LABEL_215;
      }
      goto LABEL_218;
    }
  }
  uint64_t v403 = v18;
  tdouble x = *((double *)&v477 + 1);
  uint64_t v32 = (char *)v477;
  CGFloat v449 = *((double *)&v478 + 1);
  CGFloat c = *(double *)&v478;
  CGFloat v34 = *(double *)&v479;
  uint64_t v36 = *((void *)&v480 + 1);
  CGFloat v35 = *(double *)&v480;
  double v404 = width;
  double v405 = y;
  double v406 = x;
  switch(v482 >> 5)
  {
    case 1:
      unsigned __int8 ty_low = BYTE8(v479);
      uint64_t v54 = (uint64_t)outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      swift_retain_n();
      unsigned int v55 = (id)_CTLineGetRunAtIndex((const __CTLine *)v32, *(CFIndex *)&tx);
      if (__OFSUB__(v36, *(void *)&v35)) {
        goto LABEL_276;
      }
      uint64_t v56 = v55;
      *(CGFloat *)&v485.location = v35;
      v485.length = v36 - *(void *)&v35;
      CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v55, 0, v485);
      CGFloat v57 = ImageBounds.origin.x;
      CGFloat v58 = ImageBounds.origin.y;
      CGFloat v59 = ImageBounds.size.width;
      CGFloat height = ImageBounds.size.height;

      v472.CGFloat b = 0.0;
      v472.CGFloat c = 0.0;
      v472.CGFloat a = 1.0;
      v472.CGFloat d = -1.0;
      v472.tdouble x = c;
      v472.tdouble y = v449;
      v496.origin.double x = v57;
      v496.origin.double y = v58;
      v496.size.CGFloat width = v59;
      v496.size.CGFloat height = height;
      CGRect v497 = CGRectApplyAffineTransform(v496, &v472);
      CGFloat v61 = v497.origin.x;
      CGFloat v62 = v497.origin.y;
      CGFloat v63 = v497.size.width;
      CGFloat v64 = v497.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      v498.origin.double x = v61;
      v498.origin.double y = v62;
      v498.size.CGFloat width = v63;
      v498.size.CGFloat height = v64;
      CGRect v499 = CGRectInset(v498, -1.0, -1.0);
      CGFloat a = v499.origin.x;
      CGFloat b = v499.origin.y;
      CGFloat v65 = v499.size.width;
      CGFloat v66 = v499.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      uint64_t v67 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
      goto LABEL_211;
    case 2:
      CGFloat a = v12;
      double v37 = v433;
      CGFloat b = v434;
      double v38 = r2;
      switch((char)v479)
      {
        case 2:
          CGFloat a = *(double *)(v477 + 16);
          CGFloat b = *(double *)(v477 + 24);
          CGFloat v65 = *(double *)(v477 + 32);
          CGFloat v66 = *(double *)(v477 + 40);
          v325 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
          goto LABEL_210;
        case 3:
        case 4:
          goto LABEL_290;
        case 5:
          if (*(unsigned char *)(v477 + 16))
          {
            if (*(unsigned char *)(v477 + 16) == 1)
            {
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              RBPathGetBoundingRect();
            }
            else
            {
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              MEMORY[0x24C526C90](v32 + 24);
            }
LABEL_20:
            CGFloat a = v69;
            CGFloat b = v70;
          }
          else
          {
            v326 = *(void **)(v477 + 24);
            if (!v326) {
              goto LABEL_289;
            }
            v327 = v326;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            swift_retain();
            PathBoundingBodouble x = CGPathGetPathBoundingBox(v327);
            CGFloat a = PathBoundingBox.origin.x;
            CGFloat b = PathBoundingBox.origin.y;
            CGFloat v65 = PathBoundingBox.size.width;
            CGFloat v66 = PathBoundingBox.size.height;

            v325 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_210:
            uint64_t v67 = v325;
LABEL_211:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v67);
            double v38 = v66;
            double v37 = v65;
          }
          break;
        case 6:
          goto LABEL_212;
        default:
          CGFloat b = *((double *)&v477 + 1);
          CGFloat a = *(double *)&v477;
          double v38 = *((double *)&v478 + 1);
          double v37 = *(double *)&v478;
          goto LABEL_212;
      }
      goto LABEL_212;
    case 3:
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      LODWORD(v68) = LODWORD(tx);
      objc_msgSend(v32, sel_boundingRectWithProgress_, v68);
      goto LABEL_20;
    case 4:
      swift_beginAccess();
      double y = v433;
      double v39 = v434;
      double x = r2;
      if (specialized Set.contains(_:)((Swift::UInt64)v32, *v414)) {
        goto LABEL_30;
      }
      swift_beginAccess();
      uint64_t v40 = *(void *)v409;
      if (*(void *)(*(void *)v409 + 16)
        && (uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32), (v42 & 1) != 0))
      {
        uint64_t v43 = *(void **)(*(void *)(v40 + 56) + 8 * v41);
        swift_endAccess();
        uint64_t v44 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v43) + 0xE0);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        uint64_t v45 = v43;
        double v46 = v44();
        double v389 = v47;
        double v390 = v46;
        double v387 = v48;
        double v388 = v49;

        uint64_t v50 = *(void *)(*(void *)&c + 16);
        if (!v50)
        {
LABEL_14:
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          CGFloat a = v12;
          CGFloat b = v434;
          CGFloat v51 = v433;
          CGFloat v52 = r2;
LABEL_195:
          v572.origin.double x = a;
          v572.origin.double y = b;
          v572.size.CGFloat width = v51;
          v572.size.CGFloat height = v52;
          if (CGRectIsNull(v572))
          {
            double v37 = v51;
            double v38 = v52;
          }
          else
          {
            v573.origin.double x = a;
            v573.origin.double y = b;
            v573.size.CGFloat width = v51;
            v573.size.CGFloat height = v52;
            CGRect v574 = CGRectStandardize(v573);
            if (v389 == v388) {
              double v319 = v388;
            }
            else {
              double v319 = v389;
            }
            double v320 = v574.origin.x - v319;
            double v321 = v574.origin.y - v390;
            double v322 = v574.size.width - (-v388 - v389);
            double v323 = v574.size.height - (-v387 - v390);
            v575.origin.double x = v574.origin.x - v319;
            v575.origin.double y = v574.origin.y - v390;
            v575.size.CGFloat width = v322;
            v575.size.CGFloat height = v323;
            CGFloat v324 = CGRectGetWidth(v575);
            CGFloat a = v431;
            double v38 = r2;
            double v37 = v433;
            CGFloat b = v434;
            if (v324 >= 0.0)
            {
              v576.origin.double x = v320;
              v576.origin.double y = v321;
              v576.size.CGFloat width = v322;
              v576.size.CGFloat height = v323;
              if (CGRectGetHeight(v576) >= 0.0)
              {
                CGFloat a = v320;
                CGFloat b = v321;
                double v37 = v322;
                double v38 = v323;
              }
              else
              {
                CGFloat a = v431;
LABEL_9:
                double v37 = v433;
                CGFloat b = v434;
                double v38 = r2;
              }
            }
          }
LABEL_212:
          CGAffineTransform v472 = v483;
          CGFloat v328 = a;
          CGFloat v329 = b;
          CGRect v578 = CGRectApplyAffineTransform(*(CGRect *)(&v37 - 2), &v472);
          CGFloat v20 = v578.origin.x;
          CGFloat v21 = v578.origin.y;
          CGFloat v22 = v578.size.width;
          CGFloat v23 = v578.size.height;
          double y = v405;
          double x = v406;
          CGFloat width = v404;
          a3 = v397;
          uint64_t v5 = v398;
          double v12 = v431;
          uint64_t v17 = v395;
          CGFloat v16 = v396;
          uint64_t v18 = v403;
          goto LABEL_4;
        }
      }
      else
      {
        swift_endAccess();
LABEL_30:
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_bridgeObjectRetain();
        double v389 = 0.0;
        double v390 = 0.0;
        double v387 = 0.0;
        double v388 = 0.0;
        uint64_t v50 = *(void *)(*(void *)&c + 16);
        if (!v50) {
          goto LABEL_14;
        }
      }
      uint64_t v54 = *(void *)&c + 32;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      uint64_t v91 = 0;
      CGFloat v423 = v434;
      CGFloat v424 = v12;
      CGFloat v421 = r2;
      CGFloat v422 = v433;
      uint64_t v407 = *(void *)&c + 32;
      uint64_t v408 = v50;
      break;
    default:
      if ((void)v480 != *((void *)&v480 + 1))
      {
        CGFloat b = v434;
        if (*((uint64_t *)&v480 + 1) < (uint64_t)v480)
        {
          __break(1u);
        }
        else if ((uint64_t)v480 < *((uint64_t *)&v480 + 1))
        {
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          CGFloat a = v12;
          double v37 = v433;
          double v38 = r2;
          CGFloat v9 = c;
          while (1)
          {
            CGFloat v88 = v38;
            CGFloat v89 = v37;
            if (LOBYTE(c))
            {
              outlined copy of Text.Layout.Line.Line(v32, *(uint64_t *)&tx, 1);
              id v90 = (id)_NSTextLineFragmentGetCTLine(v32);
              if (!v90) {
                goto LABEL_285;
              }
              uint64_t v71 = v90;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(v32, *(uint64_t *)&tx, 0);
              outlined copy of Text.Layout.Line.Line(v32, *(uint64_t *)&tx, 0);

              swift_release();
              uint64_t v71 = v32;
            }
            swift_retain();
            uint64_t v72 = v71;
            v73 = (id)_CTLineGetRunAtIndex(v72, *(CFIndex *)&v35);
            v486.location = 0;
            v486.length = 0;
            CGRect v500 = CTRunGetImageBounds((CTRunRef)v73, 0, v486);
            CGFloat v74 = v500.origin.x;
            CGFloat v75 = v500.origin.y;
            CGFloat v76 = v500.size.width;
            CGFloat v77 = v500.size.height;

            v472.CGFloat b = 0.0;
            v472.CGFloat c = 0.0;
            v472.CGFloat a = 1.0;
            v472.CGFloat d = -1.0;
            v472.tdouble x = v449;
            v472.tdouble y = v34;
            v501.origin.double x = v74;
            v501.origin.double y = v75;
            v501.size.CGFloat width = v76;
            v501.size.CGFloat height = v77;
            CGRect v502 = CGRectApplyAffineTransform(v501, &v472);
            CGFloat v78 = v502.origin.x;
            CGFloat v79 = v502.origin.y;
            CGFloat v80 = v502.size.width;
            CGFloat v81 = v502.size.height;
            swift_release();

            v503.origin.double x = v78;
            v503.origin.double y = v79;
            v503.size.CGFloat width = v80;
            v503.size.CGFloat height = v81;
            CGRect v504 = CGRectInset(v503, -1.0, -1.0);
            CGFloat v82 = v504.origin.x;
            CGFloat v83 = v504.origin.y;
            CGFloat v84 = v504.size.width;
            CGFloat v85 = v504.size.height;
            swift_release();

            v505.origin.double x = a;
            v505.origin.double y = b;
            v505.size.CGFloat width = v89;
            v505.size.CGFloat height = v88;
            v584.origin.double x = v82;
            v584.origin.double y = v83;
            v584.size.CGFloat width = v84;
            v584.size.CGFloat height = v85;
            *(CGRect *)(&v37 - 2) = CGRectUnion(v505, v584);
            CGFloat a = v86;
            CGFloat b = v87;
            ++*(void *)&v35;
            LOBYTE(c) = LOBYTE(v9);
            if (v36 == *(void *)&v35) {
              goto LABEL_212;
            }
          }
        }
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x245E226D8);
      }
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      CGFloat a = v12;
      goto LABEL_9;
  }
  while (1)
  {
    v96 = (_OWORD *)(v54 + 144 * v91);
    *(_OWORD *)&v472.CGFloat a = *v96;
    long long v97 = v96[1];
    long long v98 = v96[2];
    long long v99 = v96[3];
    long long v474 = v96[4];
    long long v473 = v99;
    *(_OWORD *)&v472.tdouble x = v98;
    *(_OWORD *)&v472.CGFloat c = v97;
    long long v100 = v96[5];
    long long v101 = v96[6];
    long long v102 = v96[7];
    *(_OWORD *)&v476.tdouble x = v96[8];
    *(_OWORD *)&v476.CGFloat c = v102;
    *(_OWORD *)&v476.CGFloat a = v101;
    long long v475 = v100;
    if (*((double *)&v100 + 1) > 0.0009765625) {
      break;
    }
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
    CGFloat v92 = v12;
    CGFloat v93 = v39;
    CGFloat v94 = y;
    CGFloat v95 = x;
LABEL_33:
    ++v91;
    v506.origin.double y = v423;
    v506.origin.double x = v424;
    v506.size.CGFloat height = v421;
    v506.size.CGFloat width = v422;
    CGRect v507 = CGRectUnion(v506, *(CGRect *)&v92);
    CGFloat v423 = v507.origin.y;
    CGFloat v424 = v507.origin.x;
    CGFloat v421 = v507.size.height;
    CGFloat v422 = v507.size.width;
    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
    if (v91 == v50)
    {
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v477, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      CGFloat b = v423;
      CGFloat a = v424;
      CGFloat v52 = v421;
      CGFloat v51 = v422;
      goto LABEL_195;
    }
  }
  uint64_t v415 = v91;
  Swift::UInt64 v103 = *(void *)&v472.a;
  CFIndex v104 = *(void *)&v472.b;
  CGFloat c = v472.c;
  CGFloat d = v472.d;
  tdouble x = v472.tx;
  unsigned __int8 ty_low = LOBYTE(v472.ty);
  CGFloat v16 = *((double *)&v473 + 1);
  CGFloat v35 = *(double *)&v473;
  *(void *)&CGFloat v9 = v475;
  switch(v475 >> 5)
  {
    case 1:
      uint64_t v54 = (uint64_t)outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      swift_retain_n();
      v117 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v103, v104);
      if (__OFSUB__(*(void *)&v16, *(void *)&v35)) {
        goto LABEL_273;
      }
      v118 = v117;
      *(CGFloat *)&v487.location = v35;
      v487.length = *(void *)&v16 - *(void *)&v35;
      CGRect v508 = CTRunGetImageBounds((CTRunRef)v117, 0, v487);
      CGFloat v119 = v508.origin.x;
      CGFloat v120 = v508.origin.y;
      CGFloat v121 = v508.size.width;
      CGFloat v122 = v508.size.height;

      v467.CGFloat b = 0.0;
      v467.CGFloat c = 0.0;
      v467.CGFloat a = 1.0;
      v467.CGFloat d = -1.0;
      v467.tdouble x = c;
      v467.tdouble y = d;
      v509.origin.double x = v119;
      v509.origin.double y = v120;
      v509.size.CGFloat width = v121;
      v509.size.CGFloat height = v122;
      CGRect v510 = CGRectApplyAffineTransform(v509, &v467);
      CGFloat v123 = v510.origin.x;
      CGFloat v124 = v510.origin.y;
      CGFloat v125 = v510.size.width;
      CGFloat v126 = v510.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      v511.origin.double x = v123;
      v511.origin.double y = v124;
      v511.size.CGFloat width = v125;
      v511.size.CGFloat height = v126;
      CGRect v512 = CGRectInset(v511, -1.0, -1.0);
      CGFloat a = v512.origin.x;
      CGFloat b = v512.origin.y;
      CGFloat v127 = v512.size.width;
      CGFloat v128 = v512.size.height;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      v129 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
      goto LABEL_191;
    case 2:
      CGFloat a = v12;
      CGFloat b = v39;
      CGFloat v106 = y;
      CGFloat v107 = x;
      switch(LOBYTE(v472.tx))
      {
        case 2:
          CGFloat a = *(double *)(*(void *)&v472.a + 16);
          CGFloat b = *(double *)(*(void *)&v472.a + 24);
          CGFloat v127 = *(double *)(*(void *)&v472.a + 32);
          CGFloat v128 = *(double *)(*(void *)&v472.a + 40);
          v314 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
          goto LABEL_190;
        case 3:
        case 4:
          goto LABEL_290;
        case 5:
          if (*(unsigned char *)(*(void *)&v472.a + 16))
          {
            if (*(unsigned char *)(*(void *)&v472.a + 16) == 1)
            {
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              RBPathGetBoundingRect();
            }
            else
            {
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              MEMORY[0x24C526C90](v103 + 24);
            }
LABEL_49:
            CGFloat a = v115;
            CGFloat b = v116;
          }
          else
          {
            v315 = *(void **)(*(void *)&v472.a + 24);
            if (!v315) {
              goto LABEL_288;
            }
            v316 = v315;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            swift_retain();
            CGRect v570 = CGPathGetPathBoundingBox(v316);
            CGFloat a = v570.origin.x;
            CGFloat b = v570.origin.y;
            CGFloat v127 = v570.size.width;
            CGFloat v128 = v570.size.height;

            v314 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_190:
            v129 = v314;
LABEL_191:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v129);
            CGFloat v107 = v128;
            CGFloat v106 = v127;
          }
          break;
        case 6:
          goto LABEL_192;
        default:
          CGFloat a = v472.a;
          CGFloat b = v472.b;
          CGFloat v106 = v472.c;
          CGFloat v107 = v472.d;
          goto LABEL_192;
      }
      goto LABEL_192;
    case 3:
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      LODWORD(v114) = v104;
      objc_msgSend((id)v103, sel_boundingRectWithProgress_, v114);
      goto LABEL_49;
    case 4:
      uint64_t v443 = *((void *)&v474 + 1);
      uint64_t v446 = v474;
      uint64_t v450 = *(void *)&v472.ty;
      uint64_t v108 = *v414;
      if (!*(void *)(*v414 + 16)) {
        goto LABEL_52;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v103);
      Swift::Int v109 = Hasher._finalize()();
      uint64_t v110 = -1 << *(unsigned char *)(v108 + 32);
      unint64_t v111 = v109 & ~v110;
      if (((*(void *)(v108 + 56 + ((v111 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v111) & 1) == 0) {
        goto LABEL_52;
      }
      uint64_t v112 = *(void *)(v108 + 48);
      if (*(void *)(v112 + 8 * v111) == v103) {
        goto LABEL_57;
      }
      uint64_t v113 = ~v110;
      while (1)
      {
        unint64_t v111 = (v111 + 1) & v113;
        if (((*(void *)(v108 + 56 + ((v111 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v111) & 1) == 0) {
          break;
        }
        if (*(void *)(v112 + 8 * v111) == v103) {
          goto LABEL_57;
        }
      }
LABEL_52:
      swift_beginAccess();
      uint64_t v130 = *(void *)v409;
      if (*(void *)(*(void *)v409 + 16)
        && (uint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v103), (v132 & 1) != 0))
      {
        v133 = *(void **)(*(void *)(v130 + 56) + 8 * v131);
        swift_endAccess();
        v134 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v133) + 0xE0);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        v135 = v133;
        double v136 = v134();
        double v393 = v137;
        double v394 = v136;
        double v391 = v138;
        double v392 = v139;

        uint64_t v140 = *(void *)(*(void *)&c + 16);
        if (!v140) {
          goto LABEL_55;
        }
      }
      else
      {
        swift_endAccess();
LABEL_57:
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v103, v104, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(tx), v450, *(uint64_t *)&v35, *(uint64_t *)&v16, v446, v443, LOBYTE(v9));
        double v393 = 0.0;
        double v394 = 0.0;
        double v391 = 0.0;
        double v392 = 0.0;
        uint64_t v140 = *(void *)(*(void *)&c + 16);
        if (!v140)
        {
LABEL_55:
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          CGFloat a = v12;
          CGFloat b = v39;
          CGFloat v141 = y;
          CGFloat v142 = x;
          goto LABEL_168;
        }
      }
      uint64_t v54 = *(void *)&c + 32;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      uint64_t v143 = 0;
      CGFloat v429 = v39;
      CGFloat v430 = v12;
      CGFloat v427 = x;
      CGFloat v428 = y;
      uint64_t v416 = *(void *)&c + 32;
      uint64_t v417 = v140;
      do
      {
        v148 = (_OWORD *)(v54 + 144 * v143);
        *(_OWORD *)&v467.CGFloat a = *v148;
        long long v149 = v148[1];
        long long v150 = v148[2];
        long long v151 = v148[3];
        long long v469 = v148[4];
        *(_OWORD *)&v467.tdouble x = v150;
        long long v468 = v151;
        *(_OWORD *)&v467.CGFloat c = v149;
        long long v152 = v148[5];
        long long v153 = v148[6];
        long long v154 = v148[7];
        *(_OWORD *)&v471.tdouble x = v148[8];
        *(_OWORD *)&v471.CGFloat c = v154;
        *(_OWORD *)&v471.CGFloat a = v153;
        long long v470 = v152;
        if (*((double *)&v152 + 1) <= 0.0009765625)
        {
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          CGFloat v144 = v12;
          CGFloat v145 = v39;
          CGFloat v146 = y;
          CGFloat v147 = x;
        }
        else
        {
          uint64_t v420 = v143;
          Swift::UInt64 v155 = *(void *)&v467.a;
          CFIndex v156 = *(void *)&v467.b;
          CGFloat c = v467.c;
          CGFloat v157 = v467.d;
          tdouble x = v467.tx;
          unsigned __int8 ty_low = LOBYTE(v467.ty);
          CGFloat v16 = *((double *)&v468 + 1);
          CGFloat v35 = *(double *)&v468;
          *(void *)&CGFloat v9 = v470;
          switch(v470 >> 5)
          {
            case 1:
              uint64_t v54 = (uint64_t)outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              swift_retain_n();
              v187 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v155, v156);
              if (__OFSUB__(*(void *)&v16, *(void *)&v35)) {
                goto LABEL_270;
              }
              v188 = v187;
              *(CGFloat *)&v489.location = v35;
              v489.length = *(void *)&v16 - *(void *)&v35;
              CGRect v522 = CTRunGetImageBounds((CTRunRef)v187, 0, v489);
              CGFloat v189 = v522.origin.x;
              CGFloat v190 = v522.origin.y;
              CGFloat v191 = v522.size.width;
              CGFloat v192 = v522.size.height;

              v462.CGFloat b = 0.0;
              v462.CGFloat c = 0.0;
              v462.CGFloat a = 1.0;
              v462.CGFloat d = -1.0;
              v462.tdouble x = c;
              v462.tdouble y = v157;
              v523.origin.double x = v189;
              v523.origin.double y = v190;
              v523.size.CGFloat width = v191;
              v523.size.CGFloat height = v192;
              CGRect v524 = CGRectApplyAffineTransform(v523, &v462);
              CGFloat v193 = v524.origin.x;
              CGFloat v194 = v524.origin.y;
              CGFloat v195 = v524.size.width;
              CGFloat v196 = v524.size.height;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
              v525.origin.double x = v193;
              v525.origin.double y = v194;
              v525.size.CGFloat width = v195;
              v525.size.CGFloat height = v196;
              CGRect v526 = CGRectInset(v525, -1.0, -1.0);
              CGFloat v158 = v526.origin.x;
              CGFloat v159 = v526.origin.y;
              CGFloat a = v526.size.width;
              CGFloat b = v526.size.height;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
              v197 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
              goto LABEL_159;
            case 2:
              switch(LOBYTE(v467.tx))
              {
                case 2:
                  CGFloat v158 = *(double *)(*(void *)&v467.a + 16);
                  CGFloat v159 = *(double *)(*(void *)&v467.a + 24);
                  CGFloat a = *(double *)(*(void *)&v467.a + 32);
                  CGFloat b = *(double *)(*(void *)&v467.a + 40);
                  goto LABEL_157;
                case 3:
                case 4:
                  goto LABEL_290;
                case 5:
                  if (*(unsigned char *)(*(void *)&v467.a + 16))
                  {
                    if (*(unsigned char *)(*(void *)&v467.a + 16) == 1)
                    {
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      RBPathGetBoundingRect();
                    }
                    else
                    {
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      MEMORY[0x24C526C90](v155 + 24);
                    }
LABEL_82:
                    CGFloat v158 = v183;
                    CGFloat v159 = v184;
                    CGFloat a = v185;
                    CGFloat b = v186;
                  }
                  else
                  {
                    v290 = *(void **)(*(void *)&v467.a + 24);
                    if (!v290) {
                      goto LABEL_287;
                    }
                    v291 = v290;
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    swift_retain();
                    CGRect v558 = CGPathGetPathBoundingBox(v291);
                    CGFloat v158 = v558.origin.x;
                    CGFloat v159 = v558.origin.y;
                    CGFloat a = v558.size.width;
                    CGFloat b = v558.size.height;

                    v289 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_158:
                    v197 = v289;
LABEL_159:
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v197);
                  }
                  break;
                case 6:
                  goto LABEL_89;
                default:
                  CGFloat v158 = v467.a;
                  CGFloat v159 = v467.b;
                  CGFloat a = v467.c;
                  CGFloat b = v467.d;
LABEL_157:
                  v289 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                  goto LABEL_158;
              }
              goto LABEL_160;
            case 3:
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              LODWORD(v182) = v156;
              objc_msgSend((id)v155, sel_boundingRectWithProgress_, v182);
              goto LABEL_82;
            case 4:
              uint64_t v444 = *((void *)&v469 + 1);
              uint64_t v447 = v469;
              uint64_t v451 = *(void *)&v467.ty;
              uint64_t v176 = *v414;
              if (!*(void *)(*v414 + 16)) {
                goto LABEL_85;
              }
              Hasher.init(_seed:)();
              Hasher._combine(_:)(v155);
              Swift::Int v177 = Hasher._finalize()();
              uint64_t v178 = -1 << *(unsigned char *)(v176 + 32);
              unint64_t v179 = v177 & ~v178;
              if (((*(void *)(v176 + 56 + ((v179 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v179) & 1) == 0) {
                goto LABEL_85;
              }
              uint64_t v180 = *(void *)(v176 + 48);
              if (*(void *)(v180 + 8 * v179) == v155) {
                goto LABEL_92;
              }
              uint64_t v181 = ~v178;
              while (1)
              {
                unint64_t v179 = (v179 + 1) & v181;
                if (((*(void *)(v176 + 56 + ((v179 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v179) & 1) == 0) {
                  break;
                }
                if (*(void *)(v180 + 8 * v179) == v155) {
                  goto LABEL_92;
                }
              }
LABEL_85:
              swift_beginAccess();
              uint64_t v198 = *(void *)v409;
              if (*(void *)(*(void *)v409 + 16)
                && (uint64_t v199 = specialized __RawDictionaryStorage.find<A>(_:)(v155), (v200 & 1) != 0))
              {
                v201 = *(void **)(*(void *)(v198 + 56) + 8 * v199);
                swift_endAccess();
                v202 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v201) + 0xE0);
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                v203 = v201;
                double v204 = v202();
                double v401 = v205;
                double v402 = v204;
                double v399 = v206;
                double v400 = v207;

                uint64_t v208 = *(void *)(*(void *)&c + 16);
                if (!v208) {
                  goto LABEL_88;
                }
              }
              else
              {
                swift_endAccess();
LABEL_92:
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v155, v156, *(uint64_t *)&c, *(uint64_t *)&v157, LOBYTE(tx), v451, *(uint64_t *)&v35, *(uint64_t *)&v16, v447, v444, LOBYTE(v9));
                double v401 = 0.0;
                double v402 = 0.0;
                double v399 = 0.0;
                double v400 = 0.0;
                uint64_t v208 = *(void *)(*(void *)&c + 16);
                if (!v208)
                {
LABEL_88:
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                  CGFloat v158 = v12;
                  CGFloat v159 = v39;
                  CGFloat a = y;
                  CGFloat b = x;
                  goto LABEL_149;
                }
              }
              uint64_t v54 = *(void *)&c + 32;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              CGFloat v9 = 0.0;
              CGFloat v158 = v12;
              CGFloat v159 = v39;
              CGFloat a = y;
              CGFloat b = x;
              uint64_t v425 = *(void *)&c + 32;
              uint64_t v426 = v208;
              do
              {
                v213 = (_OWORD *)(v54 + 144 * *(void *)&v9);
                *(_OWORD *)&v462.CGFloat a = *v213;
                long long v214 = v213[1];
                long long v215 = v213[2];
                long long v216 = v213[4];
                long long v463 = v213[3];
                long long v464 = v216;
                *(_OWORD *)&v462.CGFloat c = v214;
                *(_OWORD *)&v462.tdouble x = v215;
                long long v217 = v213[5];
                long long v218 = v213[6];
                long long v219 = v213[8];
                *(_OWORD *)&v466.CGFloat c = v213[7];
                *(_OWORD *)&v466.tdouble x = v219;
                long long v465 = v217;
                *(_OWORD *)&v466.CGFloat a = v218;
                if (*((double *)&v217 + 1) <= 0.0009765625)
                {
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                  CGFloat v209 = v12;
                  CGFloat v210 = v39;
                  CGFloat v211 = y;
                  CGFloat v212 = x;
                }
                else
                {
                  Swift::UInt64 v220 = *(void *)&v462.a;
                  CFIndex v221 = *(void *)&v462.b;
                  CGFloat c = v462.c;
                  CGFloat v452 = v462.d;
                  tdouble x = v462.tx;
                  CGFloat v16 = *((double *)&v463 + 1);
                  CGFloat v35 = *(double *)&v463;
                  unsigned __int8 ty_low = v465;
                  double v448 = a;
                  double v445 = b;
                  uint64_t v222 = *(void *)&v462.c;
                  switch(v465 >> 5)
                  {
                    case 1:
                      uint64_t v54 = (uint64_t)outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                      unsigned __int8 ty_low = LOBYTE(v462.ty);
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      swift_retain_n();
                      v251 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v220, v221);
                      if (__OFSUB__(*(void *)&v16, *(void *)&v35))
                      {
                        __break(1u);
LABEL_270:
                        __break(1u);
LABEL_271:
                        __break(1u);
                        goto LABEL_272;
                      }
                      v252 = v251;
                      *(CGFloat *)&v491.location = v35;
                      v491.length = *(void *)&v16 - *(void *)&v35;
                      CGRect v536 = CTRunGetImageBounds((CTRunRef)v251, 0, v491);
                      CGFloat v253 = v536.origin.x;
                      CGFloat v254 = v536.origin.y;
                      CGFloat v255 = v536.size.width;
                      CGFloat v256 = v536.size.height;

                      v455.CGFloat b = 0.0;
                      v455.CGFloat c = 0.0;
                      v455.CGFloat a = 1.0;
                      v455.CGFloat d = -1.0;
                      v455.tdouble x = c;
                      v455.tdouble y = v452;
                      v537.origin.double x = v253;
                      v537.origin.double y = v254;
                      v537.size.CGFloat width = v255;
                      v537.size.CGFloat height = v256;
                      CGRect v538 = CGRectApplyAffineTransform(v537, &v455);
                      CGFloat v257 = v538.origin.x;
                      CGFloat v258 = v538.origin.y;
                      CGFloat v259 = v538.size.width;
                      CGFloat v260 = v538.size.height;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                      v539.origin.double x = v257;
                      v539.origin.double y = v258;
                      v539.size.CGFloat width = v259;
                      v539.size.CGFloat height = v260;
                      CGRect v540 = CGRectInset(v539, -1.0, -1.0);
                      double v12 = v540.origin.x;
                      double v39 = v540.origin.y;
                      double y = v540.size.width;
                      double x = v540.size.height;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                      v261 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                      goto LABEL_140;
                    case 2:
                      switch(LOBYTE(v462.tx))
                      {
                        case 2:
                          double v12 = *(double *)(*(void *)&v462.a + 16);
                          double v39 = *(double *)(*(void *)&v462.a + 24);
                          double y = *(double *)(*(void *)&v462.a + 32);
                          double x = *(double *)(*(void *)&v462.a + 40);
                          goto LABEL_138;
                        case 3:
                        case 4:
                          goto LABEL_290;
                        case 5:
                          if (*(unsigned char *)(*(void *)&v462.a + 16))
                          {
                            if (*(unsigned char *)(*(void *)&v462.a + 16) == 1)
                            {
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              RBPathGetBoundingRect();
                            }
                            else
                            {
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              MEMORY[0x24C526C90](v220 + 24);
                            }
LABEL_117:
                            double v12 = v247;
                            double v39 = v248;
                            double y = v249;
                            double x = v250;
                            goto LABEL_141;
                          }
                          v286 = *(void **)(*(void *)&v462.a + 24);
                          if (!v286) {
                            goto LABEL_286;
                          }
                          v287 = v286;
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                          swift_retain();
                          CGRect v550 = CGPathGetPathBoundingBox(v287);
                          double v12 = v550.origin.x;
                          double v39 = v550.origin.y;
                          double y = v550.size.width;
                          double x = v550.size.height;

                          v285 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                          break;
                        case 6:
                          goto LABEL_141;
                        default:
                          double v12 = v462.a;
                          double v39 = v462.b;
                          double y = v462.c;
                          double x = v462.d;
                          goto LABEL_141;
                      }
                      goto LABEL_139;
                    case 3:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      LODWORD(v246) = v221;
                      objc_msgSend((id)v220, sel_boundingRectWithProgress_, v246);
                      goto LABEL_117;
                    case 4:
                      uint64_t v410 = *((void *)&v464 + 1);
                      uint64_t v436 = v464;
                      uint64_t v440 = *(void *)&v462.ty;
                      uint64_t v240 = *v414;
                      if (!*(void *)(*v414 + 16)) {
                        goto LABEL_120;
                      }
                      Hasher.init(_seed:)();
                      Hasher._combine(_:)(v220);
                      Swift::Int v241 = Hasher._finalize()();
                      uint64_t v242 = -1 << *(unsigned char *)(v240 + 32);
                      unint64_t v243 = v241 & ~v242;
                      if (((*(void *)(v240 + 56 + ((v243 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v243) & 1) == 0) {
                        goto LABEL_120;
                      }
                      uint64_t v244 = *(void *)(v240 + 48);
                      if (*(void *)(v244 + 8 * v243) == v220) {
                        goto LABEL_125;
                      }
                      uint64_t v245 = ~v242;
                      while (1)
                      {
                        unint64_t v243 = (v243 + 1) & v245;
                        if (((*(void *)(v240 + 56 + ((v243 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v243) & 1) == 0) {
                          break;
                        }
                        if (*(void *)(v244 + 8 * v243) == v220) {
                          goto LABEL_125;
                        }
                      }
LABEL_120:
                      swift_beginAccess();
                      uint64_t v262 = *(void *)v409;
                      if (*(void *)(*(void *)v409 + 16))
                      {
                        uint64_t v263 = specialized __RawDictionaryStorage.find<A>(_:)(v220);
                        if (v264)
                        {
                          v265 = *(void **)(*(void *)(v262 + 56) + 8 * v263);
                          swift_endAccess();
                          v266 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v265) + 0xE0);
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                          v267 = v265;
                          double v453 = v266();
                          double v437 = v269;
                          double v441 = v268;
                          double v411 = v270;

                          uint64_t v271 = *(void *)(v222 + 16);
                          if (!v271) {
                            goto LABEL_130;
                          }
                          goto LABEL_126;
                        }
                      }
                      swift_endAccess();
LABEL_125:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v220, v221, v222, *(uint64_t *)&v452, LOBYTE(tx), v440, *(uint64_t *)&v35, *(uint64_t *)&v16, v436, v410, ty_low);
                      double v453 = 0.0;
                      double v437 = 0.0;
                      double v441 = 0.0;
                      double v411 = 0.0;
                      uint64_t v271 = *(void *)(v222 + 16);
                      if (!v271) {
                        goto LABEL_130;
                      }
LABEL_126:
                      v272 = (_OWORD *)(v222 + 32);
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      for (uint64_t k = v271 - 1; ; --k)
                      {
                        *(_OWORD *)&v455.CGFloat a = *v272;
                        long long v274 = v272[1];
                        long long v275 = v272[2];
                        long long v276 = v272[4];
                        long long v456 = v272[3];
                        long long v457 = v276;
                        *(_OWORD *)&v455.CGFloat c = v274;
                        *(_OWORD *)&v455.tdouble x = v275;
                        long long v277 = v272[5];
                        long long v278 = v272[6];
                        long long v279 = v272[8];
                        long long v460 = v272[7];
                        long long v461 = v279;
                        long long v458 = v277;
                        long long v459 = v278;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v455, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)((uint64_t)v484);
                        v587.origin.double x = v280;
                        v587.origin.double y = v281;
                        v587.size.CGFloat width = v282;
                        v587.size.CGFloat height = v283;
                        v541.origin.double x = v12;
                        v541.origin.double y = v39;
                        v541.size.CGFloat width = y;
                        v541.size.CGFloat height = x;
                        CGRect v542 = CGRectUnion(v541, v587);
                        double v12 = v542.origin.x;
                        double v39 = v542.origin.y;
                        double y = v542.size.width;
                        double x = v542.size.height;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v455, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        if (!k) {
                          break;
                        }
                        v272 += 9;
                      }
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_130:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                      v543.origin.double x = v12;
                      v543.origin.double y = v39;
                      v543.size.CGFloat width = y;
                      v543.size.CGFloat height = x;
                      if (!CGRectIsNull(v543))
                      {
                        double v412 = -v411;
                        v544.origin.double x = v12;
                        v544.origin.double y = v39;
                        v544.size.CGFloat width = y;
                        v544.size.CGFloat height = x;
                        CGRect v545 = CGRectStandardize(v544);
                        double v284 = v441 == v437 ? v437 : v441;
                        v546.origin.double x = v545.origin.x - v284;
                        v546.origin.double y = v545.origin.y - v453;
                        v546.size.CGFloat width = v545.size.width - (-v437 - v441);
                        v546.size.CGFloat height = v545.size.height - (v412 - v453);
                        CGFloat v454 = v546.origin.x;
                        CGFloat v438 = v546.size.width;
                        CGFloat v442 = v546.origin.y;
                        CGFloat v413 = v546.size.height;
                        double v12 = v431;
                        double x = r2;
                        double y = v433;
                        double v39 = v434;
                        if (CGRectGetWidth(v546) >= 0.0)
                        {
                          double v12 = v454;
                          v547.origin.double x = v454;
                          double y = v438;
                          double v39 = v442;
                          v547.origin.double y = v442;
                          v547.size.CGFloat width = v438;
                          double x = v413;
                          v547.size.CGFloat height = v413;
                          if (CGRectGetHeight(v547) < 0.0)
                          {
                            double v12 = v431;
                            double x = r2;
                            double y = v433;
                            double v39 = v434;
                          }
                        }
                      }
                      goto LABEL_141;
                    default:
                      if ((void)v463 != *((void *)&v463 + 1))
                      {
                        if (*((uint64_t *)&v463 + 1) < (uint64_t)v463) {
                          goto LABEL_271;
                        }
                        if ((uint64_t)v463 < *((uint64_t *)&v463 + 1))
                        {
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                          double v435 = v159;
                          double v439 = v158;
                          while (1)
                          {
                            if (LOBYTE(c))
                            {
                              outlined copy of Text.Layout.Line.Line((void *)v220, v221, 1);
                              id v239 = (id)_NSTextLineFragmentGetCTLine((void *)v220);
                              if (!v239) {
                                goto LABEL_282;
                              }
                              v223 = v239;
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                            }
                            else
                            {
                              outlined copy of Text.Layout.Line.Line((void *)v220, v221, 0);
                              outlined copy of Text.Layout.Line.Line((void *)v220, v221, 0);

                              swift_release();
                              v223 = (void *)v220;
                            }
                            *(void *)&CGFloat c = *(void *)&v35 + 1;
                            swift_retain();
                            v224 = v223;
                            v225 = (id)_CTLineGetRunAtIndex(v224, *(CFIndex *)&v35);
                            v490.location = 0;
                            v490.length = 0;
                            CGRect v529 = CTRunGetImageBounds((CTRunRef)v225, 0, v490);
                            CGFloat v226 = v529.origin.x;
                            CGFloat v227 = v529.origin.y;
                            CGFloat v228 = v529.size.width;
                            CGFloat v229 = v529.size.height;

                            v455.CGFloat b = 0.0;
                            v455.CGFloat c = 0.0;
                            v455.CGFloat a = 1.0;
                            v455.CGFloat d = -1.0;
                            v455.tdouble x = v452;
                            v455.tdouble y = tx;
                            v530.origin.double x = v226;
                            v530.origin.double y = v227;
                            v530.size.CGFloat width = v228;
                            v530.size.CGFloat height = v229;
                            CGRect v531 = CGRectApplyAffineTransform(v530, &v455);
                            CGFloat v230 = v531.origin.x;
                            CGFloat v231 = v531.origin.y;
                            CGFloat v232 = v531.size.width;
                            CGFloat v233 = v531.size.height;
                            swift_release();

                            v532.origin.double x = v230;
                            v532.origin.double y = v231;
                            v532.size.CGFloat width = v232;
                            v532.size.CGFloat height = v233;
                            CGRect v533 = CGRectInset(v532, -1.0, -1.0);
                            CGFloat v234 = v533.origin.x;
                            CGFloat v235 = v533.origin.y;
                            CGFloat v236 = v533.size.width;
                            CGFloat v237 = v533.size.height;
                            swift_release();

                            v534.origin.double x = v12;
                            v534.origin.double y = v39;
                            v534.size.CGFloat width = y;
                            v534.size.CGFloat height = x;
                            v586.origin.double x = v234;
                            v586.origin.double y = v235;
                            v586.size.CGFloat width = v236;
                            v586.size.CGFloat height = v237;
                            CGRect v535 = CGRectUnion(v534, v586);
                            double v12 = v535.origin.x;
                            double v39 = v535.origin.y;
                            double y = v535.size.width;
                            double x = v535.size.height;
                            CGFloat v35 = c;
                            BOOL v238 = *(void *)&v16 == *(void *)&c;
                            CGFloat v159 = v435;
                            CGFloat v158 = v439;
                            CGFloat a = v448;
                            CGFloat b = v445;
                            LOBYTE(c) = v222;
                            if (v238) {
                              goto LABEL_141;
                            }
                          }
                        }
LABEL_272:
                        __break(1u);
LABEL_273:
                        __break(1u);
LABEL_274:
                        __break(1u);
                        goto LABEL_275;
                      }
LABEL_138:
                      v285 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_139:
                      v261 = v285;
LABEL_140:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v261);
LABEL_141:
                      CGAffineTransform v455 = v466;
                      v548.origin.double x = v12;
                      v548.origin.double y = v39;
                      v548.size.CGFloat width = y;
                      v548.size.CGFloat height = x;
                      CGRect v549 = CGRectApplyAffineTransform(v548, &v455);
                      CGFloat v209 = v549.origin.x;
                      CGFloat v210 = v549.origin.y;
                      CGFloat v211 = v549.size.width;
                      CGFloat v212 = v549.size.height;
                      double v12 = v431;
                      double x = r2;
                      double y = v433;
                      double v39 = v434;
                      uint64_t v54 = v425;
                      uint64_t v208 = v426;
                      break;
                  }
                }
                ++*(void *)&v9;
                v527.origin.double x = v158;
                v527.origin.double y = v159;
                v527.size.CGFloat width = a;
                v527.size.CGFloat height = b;
                CGRect v528 = CGRectUnion(v527, *(CGRect *)&v209);
                CGFloat v158 = v528.origin.x;
                CGFloat v159 = v528.origin.y;
                CGFloat a = v528.size.width;
                CGFloat b = v528.size.height;
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v462, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
              }
              while (*(void *)&v9 != v208);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_149:
              v551.origin.double x = v158;
              v551.origin.double y = v159;
              v551.size.CGFloat width = a;
              v551.size.CGFloat height = b;
              if (CGRectIsNull(v551)) {
                goto LABEL_160;
              }
              v552.origin.double x = v158;
              v552.origin.double y = v159;
              v552.size.CGFloat width = a;
              v552.size.CGFloat height = b;
              CGRect v553 = CGRectStandardize(v552);
              double v288 = v401 == v400 ? v400 : v401;
              double v12 = v553.origin.x - v288;
              double v39 = v553.origin.y - v402;
              double y = v553.size.width - (-v400 - v401);
              double x = v553.size.height - (-v399 - v402);
              v554.origin.double x = v553.origin.x - v288;
              v554.origin.double y = v553.origin.y - v402;
              v554.size.CGFloat width = y;
              v554.size.CGFloat height = x;
              CGFloat v158 = v431;
              CGFloat b = r2;
              CGFloat a = v433;
              CGFloat v159 = v434;
              if (CGRectGetWidth(v554) < 0.0) {
                goto LABEL_160;
              }
              v555.origin.double x = v12;
              v555.origin.double y = v39;
              v555.size.CGFloat width = y;
              v555.size.CGFloat height = x;
              if (CGRectGetHeight(v555) >= 0.0) {
                goto LABEL_90;
              }
              CGFloat v158 = v431;
              CGFloat b = r2;
              CGFloat a = v433;
              CGFloat v159 = v434;
              goto LABEL_160;
            default:
              if ((void)v468 != *((void *)&v468 + 1))
              {
                if (*((uint64_t *)&v468 + 1) < (uint64_t)v468) {
                  goto LABEL_274;
                }
                if ((uint64_t)v468 < *((uint64_t *)&v468 + 1))
                {
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                  CGFloat v158 = v12;
                  CGFloat v159 = v39;
                  CGFloat a = y;
                  CGFloat b = x;
                  while (1)
                  {
                    if (LOBYTE(c))
                    {
                      outlined copy of Text.Layout.Line.Line((void *)v155, v156, 1);
                      id v175 = (id)_NSTextLineFragmentGetCTLine((void *)v155);
                      if (!v175) {
                        goto LABEL_283;
                      }
                      v160 = v175;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    }
                    else
                    {
                      outlined copy of Text.Layout.Line.Line((void *)v155, v156, 0);
                      outlined copy of Text.Layout.Line.Line((void *)v155, v156, 0);

                      swift_release();
                      v160 = (void *)v155;
                    }
                    *(void *)&CGFloat v9 = *(void *)&v35 + 1;
                    swift_retain();
                    v161 = v160;
                    v162 = (id)_CTLineGetRunAtIndex(v161, *(CFIndex *)&v35);
                    v488.location = 0;
                    v488.length = 0;
                    CGRect v515 = CTRunGetImageBounds((CTRunRef)v162, 0, v488);
                    CGFloat v163 = v515.origin.x;
                    CGFloat v164 = v515.origin.y;
                    CGFloat v165 = v515.size.width;
                    CGFloat v166 = v515.size.height;

                    v462.CGFloat b = 0.0;
                    v462.CGFloat c = 0.0;
                    v462.CGFloat a = 1.0;
                    v462.CGFloat d = -1.0;
                    v462.tdouble x = v157;
                    v462.tdouble y = tx;
                    v516.origin.double x = v163;
                    v516.origin.double y = v164;
                    v516.size.CGFloat width = v165;
                    v516.size.CGFloat height = v166;
                    CGRect v517 = CGRectApplyAffineTransform(v516, &v462);
                    CGFloat v167 = v517.origin.x;
                    CGFloat v168 = v517.origin.y;
                    CGFloat v169 = v517.size.width;
                    CGFloat v170 = v517.size.height;
                    swift_release();

                    v518.origin.double x = v167;
                    v518.origin.double y = v168;
                    v518.size.CGFloat width = v169;
                    v518.size.CGFloat height = v170;
                    CGRect v519 = CGRectInset(v518, -1.0, -1.0);
                    CGFloat v171 = v519.origin.x;
                    CGFloat v172 = v519.origin.y;
                    CGFloat v173 = v519.size.width;
                    CGFloat v174 = v519.size.height;
                    swift_release();

                    v520.origin.double x = v158;
                    v520.origin.double y = v159;
                    v520.size.CGFloat width = a;
                    v520.size.CGFloat height = b;
                    v585.origin.double x = v171;
                    v585.origin.double y = v172;
                    v585.size.CGFloat width = v173;
                    v585.size.CGFloat height = v174;
                    CGRect v521 = CGRectUnion(v520, v585);
                    CGFloat v158 = v521.origin.x;
                    CGFloat v159 = v521.origin.y;
                    CGFloat a = v521.size.width;
                    CGFloat b = v521.size.height;
                    CGFloat v35 = v9;
                    if (*(void *)&v16 == *(void *)&v9) {
                      goto LABEL_160;
                    }
                  }
                }
LABEL_275:
                __break(1u);
LABEL_276:
                __break(1u);
LABEL_277:
                __break(1u);
                goto LABEL_278;
              }
LABEL_89:
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_90:
              CGFloat v158 = v12;
              CGFloat v159 = v39;
              CGFloat a = y;
              CGFloat b = x;
LABEL_160:
              CGAffineTransform v462 = v471;
              v556.origin.double x = v158;
              v556.origin.double y = v159;
              v556.size.CGFloat width = a;
              v556.size.CGFloat height = b;
              CGRect v557 = CGRectApplyAffineTransform(v556, &v462);
              CGFloat v144 = v557.origin.x;
              CGFloat v145 = v557.origin.y;
              CGFloat v146 = v557.size.width;
              CGFloat v147 = v557.size.height;
              double v12 = v431;
              double x = r2;
              double y = v433;
              double v39 = v434;
              uint64_t v54 = v416;
              uint64_t v140 = v417;
              uint64_t v143 = v420;
              break;
          }
        }
        ++v143;
        v513.origin.double y = v429;
        v513.origin.double x = v430;
        v513.size.CGFloat height = v427;
        v513.size.CGFloat width = v428;
        CGRect v514 = CGRectUnion(v513, *(CGRect *)&v144);
        CGFloat v429 = v514.origin.y;
        CGFloat v430 = v514.origin.x;
        CGFloat v427 = v514.size.height;
        CGFloat v428 = v514.size.width;
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v467, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      }
      while (v143 != v140);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      CGFloat b = v429;
      CGFloat a = v430;
      CGFloat v142 = v427;
      CGFloat v141 = v428;
LABEL_168:
      v559.origin.double x = a;
      v559.origin.double y = b;
      v559.size.CGFloat width = v141;
      v559.size.CGFloat height = v142;
      if (CGRectIsNull(v559))
      {
        CGFloat v106 = v141;
        CGFloat v107 = v142;
        goto LABEL_192;
      }
      v566.origin.double x = a;
      v566.origin.double y = b;
      v566.size.CGFloat width = v141;
      v566.size.CGFloat height = v142;
      CGRect v567 = CGRectStandardize(v566);
      if (v393 == v392) {
        double v312 = v392;
      }
      else {
        double v312 = v393;
      }
      double v12 = v567.origin.x - v312;
      double v39 = v567.origin.y - v394;
      double y = v567.size.width - (-v392 - v393);
      double x = v567.size.height - (-v391 - v394);
      v568.origin.double x = v567.origin.x - v312;
      v568.origin.double y = v567.origin.y - v394;
      v568.size.CGFloat width = y;
      v568.size.CGFloat height = x;
      CGFloat v313 = CGRectGetWidth(v568);
      CGFloat a = v431;
      CGFloat v107 = r2;
      CGFloat v106 = v433;
      CGFloat b = v434;
      if (v313 < 0.0) {
        goto LABEL_192;
      }
      v569.origin.double x = v12;
      v569.origin.double y = v39;
      v569.size.CGFloat width = y;
      v569.size.CGFloat height = x;
      if (CGRectGetHeight(v569) >= 0.0) {
        goto LABEL_38;
      }
      CGFloat a = v431;
      CGFloat v107 = r2;
      CGFloat v106 = v433;
      CGFloat b = v434;
      goto LABEL_192;
    default:
      if ((void)v473 == *((void *)&v473 + 1))
      {
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_38:
        CGFloat a = v12;
        CGFloat b = v39;
        CGFloat v106 = y;
        CGFloat v107 = x;
LABEL_192:
        CGAffineTransform v467 = v476;
        CGFloat v317 = a;
        CGFloat v318 = b;
        CGRect v571 = CGRectApplyAffineTransform(*(CGRect *)(&v106 - 2), &v467);
        CGFloat v92 = v571.origin.x;
        CGFloat v93 = v571.origin.y;
        CGFloat v94 = v571.size.width;
        CGFloat v95 = v571.size.height;
        double v12 = v431;
        double x = r2;
        double y = v433;
        double v39 = v434;
        uint64_t v54 = v407;
        uint64_t v50 = v408;
        uint64_t v91 = v415;
        goto LABEL_33;
      }
      if (*((uint64_t *)&v473 + 1) < (uint64_t)v473) {
        goto LABEL_277;
      }
      if ((uint64_t)v473 < *((uint64_t *)&v473 + 1))
      {
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        CGFloat a = v12;
        CGFloat b = v39;
        CGFloat v106 = y;
        CGFloat v107 = x;
        while (1)
        {
          CGFloat v309 = v107;
          CGFloat v310 = v106;
          if (LOBYTE(c))
          {
            outlined copy of Text.Layout.Line.Line((void *)v103, v104, 1);
            id v311 = (id)_NSTextLineFragmentGetCTLine((void *)v103);
            if (!v311) {
              goto LABEL_284;
            }
            v292 = v311;
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v472, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
          }
          else
          {
            outlined copy of Text.Layout.Line.Line((void *)v103, v104, 0);
            outlined copy of Text.Layout.Line.Line((void *)v103, v104, 0);

            swift_release();
            v292 = (void *)v103;
          }
          *(void *)&CGFloat v9 = *(void *)&v35 + 1;
          swift_retain();
          v293 = v292;
          v294 = (id)_CTLineGetRunAtIndex(v293, *(CFIndex *)&v35);
          v492.location = 0;
          v492.length = 0;
          CGRect v560 = CTRunGetImageBounds((CTRunRef)v294, 0, v492);
          CGFloat v295 = v560.origin.x;
          CGFloat v296 = v560.origin.y;
          CGFloat v297 = v560.size.width;
          CGFloat v298 = v560.size.height;

          v467.CGFloat b = 0.0;
          v467.CGFloat c = 0.0;
          v467.CGFloat a = 1.0;
          v467.CGFloat d = -1.0;
          v467.tdouble x = d;
          v467.tdouble y = tx;
          v561.origin.double x = v295;
          v561.origin.double y = v296;
          v561.size.CGFloat width = v297;
          v561.size.CGFloat height = v298;
          CGRect v562 = CGRectApplyAffineTransform(v561, &v467);
          CGFloat v299 = v562.origin.x;
          CGFloat v300 = v562.origin.y;
          CGFloat v301 = v562.size.width;
          CGFloat v302 = v562.size.height;
          swift_release();

          v563.origin.double x = v299;
          v563.origin.double y = v300;
          v563.size.CGFloat width = v301;
          v563.size.CGFloat height = v302;
          CGRect v564 = CGRectInset(v563, -1.0, -1.0);
          CGFloat v303 = v564.origin.x;
          CGFloat v304 = v564.origin.y;
          CGFloat v305 = v564.size.width;
          CGFloat v306 = v564.size.height;
          swift_release();

          v565.origin.double x = a;
          v565.origin.double y = b;
          v565.size.CGFloat width = v310;
          v565.size.CGFloat height = v309;
          v588.origin.double x = v303;
          v588.origin.double y = v304;
          v588.size.CGFloat width = v305;
          v588.size.CGFloat height = v306;
          *(CGRect *)(&v106 - 2) = CGRectUnion(v565, v588);
          CGFloat a = v307;
          CGFloat b = v308;
          CGFloat v35 = v9;
          if (*(void *)&v16 == *(void *)&v9) {
            goto LABEL_192;
          }
        }
      }
LABEL_278:
      __break(1u);
LABEL_279:
      swift_once();
LABEL_258:
      *(void *)(v54 + 32) = static Color.red;
      uint64_t v370 = one-time initialization token for green;
      swift_retain();
      if (v370 != -1) {
        swift_once();
      }
      *(void *)(v54 + 40) = static Color.green;
      *(void *)&long long v477 = v54;
      specialized Array._endMutation()();
      uint64_t v371 = v477;
      swift_retain();
      uint64_t v372 = specialized Gradient.init(colors:)(v371);
      v580.origin.double x = x;
      v580.origin.double y = y;
      v580.size.CGFloat width = a;
      v580.size.CGFloat height = b;
      CGFloat MinX = CGRectGetMinX(v580);
      v581.origin.double x = x;
      v581.origin.double y = y;
      v581.size.CGFloat width = a;
      v581.size.CGFloat height = b;
      CGFloat MinY = CGRectGetMinY(v581);
      v582.origin.double x = x;
      v582.origin.double y = y;
      v582.size.CGFloat width = a;
      v582.size.CGFloat height = b;
      CGFloat MaxX = CGRectGetMaxX(v582);
      v583.origin.double y = y;
      CGFloat v376 = MaxX;
      v583.origin.double x = x;
      v583.size.CGFloat width = a;
      v583.size.CGFloat height = b;
      CGFloat MaxY = CGRectGetMaxY(v583);
      long long v477 = (unint64_t)v372;
      *(CGFloat *)&long long v478 = MinX;
      *((CGFloat *)&v478 + 1) = MinY;
      *(CGFloat *)&long long v479 = v376;
      *((CGFloat *)&v479 + 1) = MaxY;
      *(void *)&long long v481 = 0;
      long long v480 = 0uLL;
      BYTE8(v481) = 5;
      *(void *)&v472.CGFloat a = 256;
      memset(&v472.b, 0, 33);
      GraphicsContext.draw(_:with:style:)((uint64_t)&v467, (uint64_t)&v477, (uint64_t)&v472, *(double **)&tx);
      outlined consume of Path.Storage(*(uint64_t *)&v35, *(uint64_t *)&v9, *(uint64_t *)&c, *(uint64_t *)&v16, ty_low);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
  }
}

void type metadata accessor for _ContiguousArrayStorage<Color>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Color>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
    }
  }
}

void type metadata accessor for Text.Effect.ConcretePhase<GradientForegroundTextEffect>()
{
  if (!lazy cache variable for type metadata for Text.Effect.ConcretePhase<GradientForegroundTextEffect>)
  {
    lazy protocol witness table accessor for type GradientForegroundTextEffect and conformance GradientForegroundTextEffect();
    unint64_t v0 = type metadata accessor for Text.Effect.ConcretePhase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.ConcretePhase<GradientForegroundTextEffect>);
    }
  }
}

uint64_t _StrokedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _StrokedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_StrokedShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _StrokedShape.style.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = (void *)(v2 + *(int *)(a1 + 36));
  uint64_t v5 = v3[1];
  uint64_t v4 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v6;
  a2[4] = v7;
  return swift_bridgeObjectRetain();
}

__n128 _StrokedShape.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 32) = *(void *)(a1 + 32);
  return result;
}

uint64_t (*_StrokedShape.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _StrokedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _StrokedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*_StrokedShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  size_t v14 = malloc(v13);
  v5[9] = v14;
  _StrokedShape.animatableData.getter(a2, (uint64_t)v14);
  return _StrokedShape.animatableData.modify;
}

void _StrokedShape.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _StrokedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _StrokedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _StrokedShape<A>(uint64_t a1, uint64_t a2)
{
  specialized _StrokedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  size_t v14 = malloc(v13);
  v5[9] = v14;
  _StrokedShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _StrokedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _StrokedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _StrokedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Shape.stroke(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t v11 = a3 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = *(void *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t Shape.stroke(lineWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)uint64_t v4 = a3;
  v4[1] = 0;
  v4[2] = 0x4024000000000000;
  v4[3] = MEMORY[0x263F8EE78];
  v4[4] = 0;
  return Shape.stroke(style:)((uint64_t)v4, a1, a2);
}

uint64_t specialized _StrokedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v22 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v22 - v9, a1, AssociatedTypeWitness, v8);
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>(255);
  uint64_t v13 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
  v22[0] = AssociatedTypeWitness;
  v22[1] = v13;
  v22[2] = AssociatedConformanceWitness;
  v22[3] = v15;
  CGFloat v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AnimatablePair() + 52));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v16[2];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  CGFloat v21 = (void *)(v2 + *(int *)(a2 + 36));
  void *v21 = v17;
  v21[2] = v18;
  v21[4] = v19;
  return result;
}

uint64_t sub_245E23338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _StrokedShape();
  return _StrokedShape.animatableData.getter(v2, a1);
}

uint64_t sub_245E23374(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _StrokedShape();
  return specialized _StrokedShape.animatableData.setter(a1, v2);
}

uint64_t sub_245E233B4()
{
  return 16;
}

__n128 sub_245E233C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _StrokedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithTake for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(void *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  return a1;
}

uint64_t sub_245E2365C()
{
  type metadata accessor for _StrokedShape();

  return swift_getWitnessTable();
}

uint64_t AnyLocationBase.deinit()
{
  return v0;
}

void AnyLocation.wasRead.getter()
{
}

void AnyLocation.wasRead.setter()
{
}

void AnyLocation.wasRead.modify()
{
}

void AnyLocation.get()()
{
}

void AnyLocation.set(_:transaction:)()
{
}

void AnyLocation.projecting<A>(_:)()
{
}

void AnyLocation.update()()
{
}

uint64_t AnyLocation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnyLocation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LocationBox.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 168) - 8) + 16))(a1, v4);
}

uint64_t property wrapper backing initializer of LocationBox.cache@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for AtomicBuffer<LocationProjectionCache>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v3;
  *a2 = result;
  return result;
}

SwiftUI::LocationProjectionCache __swiftcall LocationProjectionCache.init()()
{
  uint64_t v1 = v0;
  result.cache._rawuint64_t Value = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v1->cache._rawuint64_t Value = result.cache._rawValue;
  return result;
}

uint64_t (*LocationBox.wasRead.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = LocationBox.wasRead.getter() & 1;
  return LocationBox.wasRead.modify;
}

uint64_t LocationBox.wasRead.modify(uint64_t a1)
{
  return LocationBox.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

void LocationBox.__allocating_init()()
{
}

void LocationBox.init()()
{
}

uint64_t LocationBox.__ivar_destroyer()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 168) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 184));

  return swift_release();
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance LocationBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = LocationBox.wasRead.modify((uint64_t)v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

Swift::Void __swiftcall LocationProjectionCache.reset()()
{
  swift_bridgeObjectRelease();
  *uint64_t v0 = MEMORY[0x263F8EE80];
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = ProjectedLocation.wasRead.getter(a2) & 1;
  return protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ProjectedLocation<A, B>(uint64_t a1)
{
  return ProjectedLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t FunctionalLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(*(void *)(a1 + 8), a2);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FunctionalLocation.set(_:transaction:)(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t ZipLocation.get()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a3 + 120))();
  return (*(uint64_t (**)(uint64_t))(*(void *)a4 + 120))(v5);
}

uint64_t ZipLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  double v16 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a6 - 8) + 16))((char *)&v21 - v17, a1, a6, v16);
  uint64_t v19 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v19, a2, a7);
  (*(void (**)(char *, uint64_t))(*(void *)a4 + 128))(v18, a3);
  (*(void (**)(char *, uint64_t))(*(void *)a5 + 128))(v19, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, TupleTypeMetadata2);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = ZipLocation.wasRead.getter(*v2, v2[1]) & 1;
  return protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance ZipLocation<A, B>(uint64_t a1)
{
  return ZipLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 16));
}

uint64_t protocol witness for Location.get() in conformance ZipLocation<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);

  return ZipLocation.get()(a1, v5, v4, v3);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v9 = *v3;
  uint64_t v10 = v3[1];

  return ZipLocation.set(_:transaction:)(a1, v8, a2, v9, v10, v6, v7);
}

uint64_t FlattenedCollectionLocation.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t FlattenedCollectionLocation.init(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = v8;
  type metadata accessor for AnyLocation();
  type metadata accessor for Array();
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t FlattenedCollectionLocation.primaryLocation.getter()
{
  Collection.first.getter();
  uint64_t result = v1;
  if (!v1) {
    __break(1u);
  }
  return result;
}

uint64_t FlattenedCollectionLocation.wasRead.getter()
{
  uint64_t v0 = FlattenedCollectionLocation.primaryLocation.getter();
  char v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v0);
  swift_release();
  return v1 & 1;
}

uint64_t key path getter for FlattenedCollectionLocation.wasRead : <A, B>FlattenedCollectionLocation<A, B>@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for FlattenedCollectionLocation();
  uint64_t result = FlattenedCollectionLocation.wasRead.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for FlattenedCollectionLocation.wasRead : <A, B>FlattenedCollectionLocation<A, B>(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for FlattenedCollectionLocation();
  return FlattenedCollectionLocation.wasRead.setter(v1);
}

uint64_t FlattenedCollectionLocation.wasRead.setter(uint64_t a1)
{
  uint64_t v2 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(void *)v2 + 104))(a1);

  return swift_release();
}

uint64_t (*FlattenedCollectionLocation.wasRead.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  uint64_t v4 = FlattenedCollectionLocation.primaryLocation.getter();
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  swift_release();
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return FlattenedCollectionLocation.wasRead.modify;
}

uint64_t FlattenedCollectionLocation.wasRead.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(void *)v2 + 104))(v1);

  return swift_release();
}

uint64_t FlattenedCollectionLocation.get()()
{
  uint64_t v0 = FlattenedCollectionLocation.primaryLocation.getter();
  (*(void (**)(uint64_t))(*(void *)v0 + 120))(v0);

  return swift_release();
}

uint64_t FlattenedCollectionLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v3, v6, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v18) {
      break;
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)v18 + 128);
    swift_retain();
    v15(a1, a2);
    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

uint64_t FlattenedCollectionLocation.update()(uint64_t a1)
{
  uint64_t v2 = FlattenedCollectionLocation.primaryLocation.getter();
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(a1);
  swift_release();
  return a1 & 1;
}

uint64_t static FlattenedCollectionLocation.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FlattenedCollectionLocation<A, B>(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = FlattenedCollectionLocation.wasRead.modify((uint64_t)v4, a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlattenedCollectionLocation<A, B>()
{
  return static FlattenedCollectionLocation.== infix(_:_:)();
}

void specialized LocationBox.init()()
{
}

uint64_t instantiation function for generic protocol witness table for FlattenedCollectionLocation<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245E24830@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245E24880(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 104))(*a1);
}

uint64_t sub_245E248C8()
{
  return 8;
}

void *sub_245E248D4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_245E248E8()
{
  return 32;
}

__n128 sub_245E248F4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of Location.wasRead.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Location.wasRead.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Location.wasRead.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Location.get()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Location.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of Location.update()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t method lookup function for AnyLocationBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyLocationBase);
}

uint64_t method lookup function for AnyLocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyLocation);
}

uint64_t dispatch thunk of AnyLocation.wasRead.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnyLocation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for LocationBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LocationBox);
}

uint64_t dispatch thunk of LocationBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

ValueMetadata *type metadata accessor for LocationProjectionCache()
{
  return &type metadata for LocationProjectionCache;
}

uint64_t getEnumTagSinglePayload for FlattenedCollectionLocation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for FlattenedCollectionLocation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E24D90);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for FlattenedCollectionLocation()
{
  return swift_getGenericMetadata();
}

void *assignWithCopy for ZipLocation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConstantLocation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ConstantLocation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E251A4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for ProjectedLocation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ProjectedLocation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245E25698);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          int v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          CGFloat v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

void *assignWithCopy for FunctionalLocation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for FunctionalLocation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

double UnitPoint.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double UnitPoint.animatableData.setter(double a1, double a2)
{
  double result = a1 * 0.0078125;
  *uint64_t v2 = result;
  v2[1] = a2 * 0.0078125;
  return result;
}

void UnitPoint.x.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*UnitPoint.x.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnitPoint.y.getter(double a1, double a2)
{
  return a2;
}

void UnitPoint.y.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*UnitPoint.y.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnitPoint.init()()
{
  return 0.0;
}

double UnitPoint.init(_:in:)(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double UnitPoint.init(edge:)(char a1)
{
  return dbl_2461E8968[a1];
}

double static UnitPoint.zero.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for zero, (uint64_t)&static UnitPoint.zero);
}

double static UnitPoint.bottomTrailing.getter()
{
  return 1.0;
}

int64x2_t one-time initialization function for infinity()
{
  int64x2_t result = vdupq_n_s64(0x7FF0000000000000uLL);
  static UnitPoint.infinitdouble y = (__int128)result;
  return result;
}

double static UnitPoint.infinity.getter()
{
  return static UnitPoint.topLeading.getter(&one-time initialization token for infinity, (uint64_t)&static UnitPoint.infinity);
}

Swift::Int UnitPoint.hashValue.getter(double a1, double a2)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnitPoint()
{
  double v1 = *v0;
  double v2 = v0[1];
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnitPoint()
{
  UnitPoint.hash(into:)(*v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnitPoint()
{
  double v1 = *v0;
  double v2 = v0[1];
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

uint64_t UnitPoint.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*UnitPoint.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  long long v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    long long v3 = v2;
  }
  *(void *)a1 = *v3;
  return CGPoint.subscript.modify;
}

float64x2_t (*UnitPoint.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  return UnitPoint.animatableData.modify;
}

float64x2_t UnitPoint.animatableData.modify(uint64_t a1)
{
  float64x2_t result = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)*(void *)(a1 + 16) = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance UnitPoint@<Q0>(float64x2_t *a1@<X8>)
{
  float64x2_t result = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a1 = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance UnitPoint(float64x2_t *a1)
{
  float64x2_t result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *double v1 = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnitPoint(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(float64x2_t *)a1 = vmulq_f64(*v1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  return protocol witness for Animatable.animatableData.modify in conformance UnitPoint;
}

void UnitPoint.codingProxy.getter(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void CodableUnitPoint.init(_:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double CodableUnitPoint.base.getter()
{
  return *(double *)v0;
}

void CodableUnitPoint.base.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*CodableUnitPoint.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableUnitPoint.encode(to:)(void *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v8 = v4;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    uint64_t v8 = v3;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t CodableUnitPoint.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v10;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v7 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableUnitPoint@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CodableUnitPoint.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableUnitPoint(void *a1)
{
  return CodableUnitPoint.encode(to:)(a1);
}

double *UnitPoint.encode(to:)(double *result, double a2, double a3)
{
  uint64_t v4 = result;
  if (a2 != 0.0)
  {
    double v5 = a2;
    double v6 = fabs(a2);
    if (v6 >= 65536.0) {
      Swift::UInt v7 = 9;
    }
    else {
      Swift::UInt v7 = 13;
    }
    ProtobufEncoder.encodeVarint(_:)(v7);
    if (v6 >= 65536.0)
    {
      uint64_t v9 = *((void *)v4 + 1);
      float64x2_t result = (double *)(v9 + 8);
      if (__OFADD__(v9, 8))
      {
        __break(1u);
      }
      else if (*((void *)v4 + 2) >= (uint64_t)result)
      {
        *((void *)v4 + 1) = result;
        *(double *)(*(void *)v4 + v9) = v5;
        goto LABEL_12;
      }
      float64x2_t result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *float64x2_t result = v5;
    }
    else
    {
      uint64_t v8 = *((void *)v4 + 1);
      float64x2_t result = (double *)(v8 + 4);
      if (__OFADD__(v8, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v5 = v5;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v8) = LODWORD(v5);
          goto LABEL_12;
        }
      }
      float64x2_t result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)float64x2_t result = LODWORD(v5);
    }
  }
LABEL_12:
  if (a3 != 0.0)
  {
    double v10 = fabs(a3);
    if (v10 >= 65536.0) {
      Swift::UInt v11 = 17;
    }
    else {
      Swift::UInt v11 = 21;
    }
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      uint64_t v12 = *((void *)v4 + 1);
      float64x2_t result = (double *)(v12 + 4);
      if (!__OFADD__(v12, 4))
      {
        *(float *)&a3 = a3;
        if (*((void *)v4 + 2) >= (uint64_t)result)
        {
          *((void *)v4 + 1) = result;
          *(_DWORD *)(*(void *)v4 + v12) = LODWORD(a3);
          return result;
        }
        goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      float64x2_t result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *(_DWORD *)float64x2_t result = LODWORD(a3);
      return result;
    }
    uint64_t v13 = *((void *)v4 + 1);
    float64x2_t result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8)) {
      goto LABEL_29;
    }
    if (*((void *)v4 + 2) < (uint64_t)result)
    {
      float64x2_t result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *float64x2_t result = a3;
    }
    else
    {
      *((void *)v4 + 1) = result;
      *(double *)(*(void *)v4 + v13) = a3;
    }
  }
  return result;
}

double UnitPoint.init(from:)(void *a1)
{
  return specialized UnitPoint.init(from:)(a1);
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance UnitPoint(double *a1)
{
  return UnitPoint.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance UnitPoint(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized UnitPoint.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }
}

double specialized UnitPoint.init(from:)(void *a1)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  double v3 = *(double *)&static UnitPoint.zero;
  unint64_t v4 = a1[1];
  for (unint64_t i = a1[2]; v4 < i; unint64_t i = a1[2])
  {
    unint64_t v6 = a1[3];
    if (v6)
    {
      unint64_t v7 = a1[4];
      if (v4 < v7) {
        goto LABEL_15;
      }
      if (v7 < v4) {
        goto LABEL_49;
      }
      a1[3] = 0;
    }
    unint64_t v6 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v3;
    }
    if (v6 <= 7)
    {
LABEL_49:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return v3;
    }
LABEL_15:
    if (v6 >> 3 == 2)
    {
      unint64_t v10 = v6 & 7;
      if (v10 != 5)
      {
        if (v10 == 2)
        {
          uint64_t v15 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return v3;
          }
          if (v15 < 0) {
            goto LABEL_52;
          }
          uint64_t v11 = a1[1];
          if (i < v11 + v15) {
            goto LABEL_49;
          }
          a1[3] = 17;
          a1[4] = v11 + v15;
        }
        else
        {
          if (v10 != 1) {
            goto LABEL_49;
          }
          uint64_t v11 = a1[1];
        }
        unint64_t v4 = v11 + 8;
        if (i < v11 + 8) {
          goto LABEL_49;
        }
LABEL_7:
        a1[1] = v4;
        continue;
      }
      unint64_t v4 = a1[1] + 4;
      if (i < v4) {
        goto LABEL_49;
      }
      a1[1] = v4;
    }
    else
    {
      if (v6 >> 3 != 1)
      {
        switch(v6 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v3;
            }
            unint64_t v4 = a1[1];
            continue;
          case 1uLL:
            unint64_t v4 = a1[1] + 8;
            goto LABEL_6;
          case 2uLL:
            uint64_t v16 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v3;
            }
            if (v16 < 0) {
              goto LABEL_53;
            }
            unint64_t v4 = a1[1] + v16;
LABEL_6:
            if (i >= v4) {
              goto LABEL_7;
            }
            goto LABEL_49;
          case 5uLL:
            unint64_t v4 = a1[1] + 4;
            goto LABEL_6;
          default:
            goto LABEL_49;
        }
      }
      unint64_t v8 = v6 & 7;
      if (v8 != 5)
      {
        if (v8 == 2)
        {
          uint64_t v14 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return v3;
          }
          if (v14 < 0)
          {
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            JUMPOUT(0x245E26220);
          }
          uint64_t v9 = (double *)a1[1];
          if (i < (unint64_t)v9 + v14) {
            goto LABEL_49;
          }
          a1[3] = 9;
          a1[4] = (char *)v9 + v14;
        }
        else
        {
          if (v8 != 1) {
            goto LABEL_49;
          }
          uint64_t v9 = (double *)a1[1];
        }
        unint64_t v4 = (unint64_t)(v9 + 1);
        if (i < (unint64_t)(v9 + 1)) {
          goto LABEL_49;
        }
        double v3 = *v9;
        goto LABEL_7;
      }
      uint64_t v12 = (float *)a1[1];
      unint64_t v4 = (unint64_t)(v12 + 1);
      if (i < (unint64_t)(v12 + 1)) {
        goto LABEL_49;
      }
      float v13 = *v12;
      a1[1] = v4;
      double v3 = v13;
    }
  }
  a1[3] = 0;
  return v3;
}

unint64_t lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint;
  if (!lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint;
  if (!lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableUnitPoint and conformance CodableUnitPoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableUnitPoint(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint();
  unint64_t result = lazy protocol witness table accessor for type CodableUnitPoint and conformance CodableUnitPoint();
  *(void *)(a1 + 16) = result;
  return result;
}

double sub_245E26370@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  double v3 = a1 + 1;
  if (!*a2) {
    double v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_245E2638C(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_245E263A8()
{
  return 0;
}

float64x2_t sub_245E263B8@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a2 = result;
  return result;
}

float64x2_t sub_245E263D0(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t result = vmulq_f64(*a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for CodableUnitPoint()
{
  return &type metadata for CodableUnitPoint;
}

uint64_t key path setter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> (@out ());
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t _PreferenceTransformModifier.transform.getter(uint64_t a1)
{
  return a1;
}

uint64_t _PreferenceTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_PreferenceTransformModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceTransformModifier.init(key:transform:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceTransform<A>()
{
  return specialized PreferenceTransform.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceTransform<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HostPreferencesTransform<A>()
{
  return specialized HostPreferencesTransform.description.getter();
}

uint64_t sub_245E267D0()
{
  return 16;
}

__n128 sub_245E267DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_245E267E8()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for HostPreferencesTransform(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HostPreferencesTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_245E268F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t specialized PreferenceTransform.description.getter()
{
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x726F66736E617254;
}

uint64_t specialized HostPreferencesTransform.description.getter()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x6E61725474736F48;
}

uint64_t sub_245E26A28()
{
  return 16;
}

__n128 sub_245E26A34(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t Projection.composed<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return ComposedProjection.init(_:_:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t ComposedProjection.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ComposedProjection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t ComposedProjection.get(base:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v4 + 32))(a1, v5, v4, v8);
  (*(void (**)(char *, void))(a2[5] + 32))(v10, a2[3]);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t ComposedProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v6 + 32))(a1, v7, v6, v10);
  (*(void (**)(char *, uint64_t, void))(a3[5] + 40))(v12, a2, a3[3]);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 40))(a1, v12, v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t ComposedProjection.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static ComposedProjection.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for ComposedProjection();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t type metadata accessor for ComposedProjection()
{
  return swift_getGenericMetadata();
}

Swift::Int ComposedProjection.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComposedProjection<A, B>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ComposedProjection<A, B>()
{
  return static ComposedProjection.== infix(_:_:)();
}

uint64_t WritableKeyPath.set(base:newValue:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return swift_setAtWritableKeyPath();
}

uint64_t instantiation function for generic protocol witness table for ComposedProjection<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in ComposedProjection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance WritableKeyPath<A, B>(uint64_t a1)
{
  return WritableKeyPath.set(base:newValue:)(a1);
}

uint64_t dispatch thunk of Projection.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Projection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t getEnumTagSinglePayload for ComposedProjection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ComposedProjection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245E27764);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          int v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          CGFloat v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.InteractionMetrics(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned int v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    unsigned int v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
    uint64_t v12 = v11;
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v9, v10, v12);
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(_OWORD *)((char *)v7 + v14) = *(_OWORD *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Text.Effect.InteractionMetrics(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unsigned int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.InteractionMetrics(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unsigned int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  return a1;
}

void *initializeWithTake for Text.Effect.InteractionMetrics(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unsigned int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for Text.Effect.InteractionMetrics(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  unsigned int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245E27C20);
}

uint64_t sub_245E27C20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245E27CE4);
}

void *sub_245E27CE4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for Text.Effect.InteractionMetrics()
{
  uint64_t result = type metadata singleton initialization cache for Text.Effect.InteractionMetrics;
  if (!type metadata singleton initialization cache for Text.Effect.InteractionMetrics) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for Text.Effect.InteractionMetrics()
{
  type metadata accessor for RangeSet<Text.Layout.CharacterIndex>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t Text.Effect.InteractionMetrics.displacement(for:type:)(uint64_t result, char a2)
{
  if (!*(void *)(*(void *)v2 + 16)) {
    return type metadata accessor for Text.Effect.InteractionMetrics();
  }
  uint64_t v3 = *(void *)v2 + 88;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  while (1)
  {
    uint64_t v5 = *(void *)(v3 - 48);
    BOOL v7 = *(void *)(v3 - 56) <= result && v5 > result;
    if (a2 != 2)
    {
      if (v7) {
        return result;
      }
      goto LABEL_4;
    }
    if (v7) {
      return result;
    }
    if (__OFSUB__(result, v5)) {
      break;
    }
    if (v5 == result) {
      return result;
    }
LABEL_4:
    v3 += 96;
    if (!--v4) {
      return type metadata accessor for Text.Effect.InteractionMetrics();
    }
  }
  __break(1u);
  return result;
}

CGPoint __swiftcall Text.Effect.InteractionMetrics.displacedPoint(from:activeOrigin:)(CGPoint from, CGPoint activeOrigin)
{
  CGFloat y = from.y;
  double x = from.x;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  if (v6)
  {
    CGFloat v7 = activeOrigin.y;
    double v8 = activeOrigin.x;
    swift_bridgeObjectRetain();
    uint64_t v9 = (CGFloat *)(v5 + 120);
    while (1)
    {
      double v10 = *v9;
      double v11 = *(v9 - 9);
      double v12 = *(v9 - 4);
      double v13 = *(v9 - 2) + *(v9 - 3);
      v21.origin.double x = v8;
      v21.origin.CGFloat y = v7;
      v21.size.CGFloat width = *v9;
      v21.size.CGFloat height = v13;
      v20.double x = x;
      v20.CGFloat y = y;
      if (CGRectContainsPoint(v21, v20)) {
        break;
      }
      double v8 = v8 + v10;
      v9 += 12;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v22.origin.double x = v8;
    v22.origin.CGFloat y = v7;
    v22.size.CGFloat width = v10;
    v22.size.CGFloat height = v13;
    double v19 = x - CGRectGetMinX(v22);
    v23.origin.double x = v8;
    v23.origin.CGFloat y = v7;
    v23.size.CGFloat width = v10;
    v23.size.CGFloat height = v13;
    double v14 = v19 / CGRectGetWidth(v23);
    if (v14 < 0.0 || v14 > 1.0) {
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
    }
    else {
      double x = v12 * v14 + x - v11 - v10 * v14;
    }
  }
  else
  {
LABEL_6:
    specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84);
  }
  double v16 = x;
  double v17 = y;
  result.CGFloat y = v17;
  result.double x = v16;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.InteractionMetrics.Element()
{
  return &type metadata for Text.Effect.InteractionMetrics.Element;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)(a1, a2);

  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void specialized MutableCollection<>.reverse()()
{
  if ((unint64_t)*v0 >> 62) {
    goto LABEL_31;
  }
  if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    while (1)
    {
      if ((unint64_t)*v0 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v2 = v1 - 1;
        if (__OFSUB__(v1, 1))
        {
LABEL_35:
          __break(1u);
          return;
        }
      }
      else
      {
        uint64_t v1 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v2 = v1 - 1;
        if (__OFSUB__(v1, 1)) {
          goto LABEL_35;
        }
      }
      if (v2 < 1) {
        return;
      }
      uint64_t v3 = 0;
      uint64_t v4 = v1 + 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        uint64_t v5 = *v0;
        if ((*v0 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v6 = MEMORY[0x24C523D60](v3, *v0);
        uint64_t v5 = *v0;
LABEL_10:
        unint64_t v7 = v1 - 1;
        if ((v5 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x24C523D60](v1 - 1, v5);
          uint64_t v5 = *v0;
        }
        else
        {
          if (v7 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_28;
          }
          uint64_t v8 = *(void *)(v5 + 8 * v1 + 24);
          swift_retain();
        }
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *unint64_t v0 = v5;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          *unint64_t v0 = v5;
        }
        *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v8;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v10 = *v0;
        int v11 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *unint64_t v0 = v10;
        if (!v11 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          *unint64_t v0 = v10;
        }
        if (v7 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_29;
        }
        *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x18) = v6;
        swift_release();
        specialized Array._endMutation()();
        if (v4 == v3) {
          goto LABEL_30;
        }
        ++v3;
        uint64_t v12 = v1 - 2;
        --v1;
        if (v3 >= v12) {
          return;
        }
      }
      if ((unint64_t)v3 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13) {
        return;
      }
    }
    uint64_t v6 = *(void *)(v5 + 8 * v3 + 32);
    swift_retain();
    goto LABEL_10;
  }
}

uint64_t ScrapeableContent.Item.init(_:ids:_:position:size:transform:)@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *a2;
  int v7 = *a3;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v9 = *Value;
  uint64_t v10 = Value[1];
  uint64_t v11 = AGGraphGetValue();
  uint64_t v12 = *(void *)v11;
  double v13 = *(double *)(v11 + 8);
  double v14 = *(double *)(v11 + 16);
  double v15 = *(double *)(v11 + 24);
  double v16 = *(double *)(v11 + 32);
  uint64_t v17 = AGGraphGetValue();
  double v18 = *(double *)v17;
  double v19 = *(double *)(v17 + 8);
  double v20 = v15 - (*(double *)v17 - v13);
  *(_DWORD *)a4 = v6;
  *(_DWORD *)(a4 + 4) = v7;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = v10;
  *(void *)(a4 + 32) = v12;
  *(double *)(a4 + 40) = v18;
  *(double *)(a4 + 48) = v19;
  *(double *)(a4 + 56) = v20;
  *(double *)(a4 + 64) = v16 - (v19 - v14);

  return swift_retain();
}

uint64_t _ViewInputs.isScrapeable.setter(uint64_t result)
{
  if (result) {
    int v2 = 0;
  }
  else {
    int v2 = 0x2000;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFDFFF | v2;
  return result;
}

void static ScrapeableID.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void ScrapeableID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ScrapeableID.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int ScrapeableID.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL key path getter for _ViewInputs.isScrapeable : _ViewInputs@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = _ViewInputs.isScrapeable.getter();
  *a1 = result;
  return result;
}

unsigned char *(*_ViewInputs.isScrapeable.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  if ((*(_DWORD *)(v1 + 36) & 0x20) != 0 && (v2 = *(void *)(v1 + 48), (uint64_t v3 = *(void *)(v2 + 16)) != 0))
  {
    uint64_t v4 = (ValueMetadata **)(v2 + 32);
    while (*v4 != &type metadata for DisplayList.Key)
    {
      v4 += 2;
      if (!--v3) {
        goto LABEL_6;
      }
    }
    BOOL v5 = (*(_DWORD *)(v1 + 36) & 0x2000) == 0;
  }
  else
  {
LABEL_6:
    BOOL v5 = 0;
  }
  *(unsigned char *)(a1 + 8) = v5;
  return _ViewInputs.isScrapeable.modify;
}

unsigned char *_ViewInputs.isScrapeable.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 0;
  }
  else {
    int v1 = 0x2000;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFDFFF | v1;
  return result;
}

uint64_t key path getter for _ViewInputs.scrapeableParentID : _ViewInputs@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v7[4] = *(_OWORD *)(a1 + 64);
  int v8 = *(_DWORD *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  outlined retain of _ViewInputs((uint64_t)v7);
  specialized _ViewInputs.subscript.getter(&v6);
  uint64_t result = outlined release of _ViewInputs((uint64_t)v7);
  *a2 = v6;
  return result;
}

uint64_t key path setter for _ViewInputs.scrapeableParentID : _ViewInputs(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t (*_ViewInputs.scrapeableParentID.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 72);
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 24) = v5;
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return _ViewInputs.scrapeableParentID.modify;
}

uint64_t _ViewInputs.scrapeableParentID.modify(uint64_t a1, char a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  int v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if (a2)
  {
    int v6 = v5;
    int v7 = v4;
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a1 + 8;
    int v6 = v5;
    int v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);

  return swift_release();
}

uint64_t View._presentationContainer()(uint64_t a1)
{
  unint64_t v2 = 0x9000000000000008;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for ScrapeableAttachmentViewModifier);
}

uint64_t View._presentationContainerChild()(uint64_t a1)
{
  unint64_t v2 = 0x9000000000000010;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for ScrapeableAttachmentViewModifier);
}

unint64_t static ScrapeableAttachmentViewModifier.Attachment.scrapeContent(from:)@<X0>(uint64_t a1@<X8>)
{
  AGGraphGetAttributeInfo();
  uint64_t v3 = v2;
  type metadata accessor for ScrapeableContent.Content?();
  uint64_t Value = (unint64_t *)AGGraphGetValue();
  unint64_t v5 = *Value;
  if ((~*Value & 0xF000000000000007) != 0)
  {
    unint64_t v14 = *Value;
    int v8 = *(_DWORD *)(v3 + 16);
    int v12 = *(_DWORD *)(v3 + 20);
    int v13 = v8;
    ScrapeableContent.Item.init(_:ids:_:position:size:transform:)((uint64_t *)&v14, &v13, &v12, (uint64_t)v15);
    uint64_t v9 = v16;
    long long v6 = v17;
    long long v7 = v18;
    long long v10 = v15[1];
    *(_OWORD *)a1 = v15[0];
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = v9;
  }
  else
  {
    long long v6 = 0uLL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 1;
    long long v7 = 0uLL;
  }
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 56) = v7;

  return outlined copy of ScrapeableContent.Content?(v5);
}

unint64_t ScrapeableContent.Item.content.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 8);
  *a1 = v2;
  return outlined copy of ScrapeableContent.Content(v2);
}

unint64_t ScrapeableContent.Item.content.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t result = outlined consume of ScrapeableContent.Content(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ScrapeableContent.Item.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScrapeableContent.Item.size.getter()
{
  return *(double *)(v0 + 16);
}

void ScrapeableContent.Item.size.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*ScrapeableContent.Item.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.Item.transform.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  return swift_retain();
}

__n128 ScrapeableContent.Item.transform.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __n128 v6 = *(__n128 *)(a1 + 1);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  swift_release();
  *(void *)(v1 + 32) = v2;
  __n128 result = v6;
  *(__n128 *)(v1 + 40) = v6;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  return result;
}

uint64_t (*ScrapeableContent.Item.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.Node.item.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 72);
  outlined copy of ScrapeableContent.Content(v2);

  return swift_retain();
}

uint64_t ScrapeableContent.Node.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.Node.deinit()
{
  outlined consume of ScrapeableContent.Content(*(void *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ScrapeableContent.Node.__deallocating_deinit()
{
  outlined consume of ScrapeableContent.Content(*(void *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ScrapeableContent.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.nodes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ScrapeableContent.nodes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrapeableContent.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrapeableContent.children.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ScrapeableContent.children.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL ScrapeableContent.isEmpty.getter()
{
  uint64_t v1 = v0[1];
  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      return 0;
    }
  }
  else if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  return *(void *)(v1 + 16) == 0;
}

void AGSubgraphRef.Map.addItem(_:for:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)long long v26 = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  type metadata accessor for ScrapeableContent.Node();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 88) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v12 + 96) = 0;
  *(void *)(v12 + 16) = *(void *)a1;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 32) = v7;
  *(void *)(v12 + 40) = v8;
  *(void *)(v12 + 48) = v9;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)v26;
  *(void *)(v12 + 72) = v10;
  *(void *)(v12 + 80) = v11;
  id v27 = a2;
  outlined copy of ScrapeableContent.Content(v6);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v3;
  uint64_t v28 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v27);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_10;
  }
  char v20 = v15;
  if (*(void *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v14 = v28;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = v28;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v27);
    if ((v20 & 1) != (v22 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v16 = v21;
  }
  *uint64_t v3 = v14;
  id v23 = (id)swift_bridgeObjectRelease();
  uint64_t v24 = *v3;
  if ((v20 & 1) == 0)
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v27, MEMORY[0x263F8EE78], *v3);
    id v23 = v27;
  }
  long long v25 = (void *)(*(void *)(v24 + 56) + 8 * v16);
  MEMORY[0x24C522D60](v23);
  if (*(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_14;
  }
LABEL_10:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
}

uint64_t AGSubgraphRef.Map.content(for:updated:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t result = specialized Set._Variant.insert(_:)((uint64_t *)&v28, (uint64_t)a1);
  if ((result & 1) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  unint64_t v9 = MEMORY[0x263F8EE78];
  if (*(void *)(a3 + 16)
    && (a2 = a3, unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)a1), (v11 & 1) != 0))
  {
    unint64_t v28 = *(void *)(*(void *)(a3 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v28 = v9;
  }
  id v27 = (void *)v9;
  uint64_t ChildCount = AGSubgraphGetChildCount();
  if (ChildCount < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = ChildCount;
  id v14 = a1;
  swift_bridgeObjectRetain();
  long long v26 = specialized Sequence.compactMap<A>(_:)(0, v13, v14);
  if (v26[2])
  {
    specialized MutableCollection<>.sort(by:)(&v26);
    char v15 = v26;
    int64_t v16 = v26[2];
    if (v16)
    {
      unint64_t v25 = v9;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      uint64_t v17 = 4;
      do
      {
        long long v24 = *(_OWORD *)&v15[v17];
        unint64_t v18 = *(void *)(v25 + 16);
        unint64_t v19 = *(void *)(v25 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 >= v19 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v18 + 1, 1);
        }
        *(void *)(v25 + 16) = v18 + 1;
        *(_OWORD *)(v25 + 16 * v18 + 32) = v24;
        v17 += 3;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease_n();
      id v27 = (void *)v25;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v27 = (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = specialized static AGSubgraphRef.Map.resolveParents(nodes:children:)((uint64_t *)&v28, (unint64_t)&v27);
  a2 = v28;
  if (v28 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    char v20 = v27;
    if (v23) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  char v20 = v27;
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_24:
    *a4 = a2;
    a4[1] = (unint64_t)v20;
    return result;
  }
LABEL_19:
  if (v20[2] != 1) {
    goto LABEL_24;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v20[2])
  {
    unint64_t v21 = v20[4];
    unint64_t v22 = v20[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v21;
    a4[1] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned int *ScrapeableContent.move(parentID:to:)(unsigned int *result, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = (void *)*result;
  unint64_t v6 = *v2;
  if (v6 >> 62) {
    goto LABEL_24;
  }
  for (i = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10); i >= 1; uint64_t result = (unsigned int *)swift_bridgeObjectRelease())
  {
    unint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = *v3;
        if ((*v3 & 0xC000000000000001) == 0) {
          break;
        }
        int v16 = *(_DWORD *)(MEMORY[0x24C523D60](v8, *v3) + 20);
        uint64_t result = (unsigned int *)swift_unknownObjectRelease();
        if (v16 == v5)
        {
          uint64_t v9 = *v3;
          goto LABEL_9;
        }
LABEL_4:
        if ((uint64_t)++v8 >= i) {
          goto LABEL_25;
        }
      }
      if ((v8 & 0x8000000000000000) != 0) {
        break;
      }
      if (v8 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(*(void *)(v9 + 8 * v8 + 32) + 20) != v5) {
        goto LABEL_4;
      }
LABEL_9:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v3 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *uint64_t v3 = v9;
      }
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      unint64_t v12 = *(void *)(v11 + 16);
      if (v8 >= v12) {
        goto LABEL_23;
      }
      unint64_t v13 = v12 - 1;
      uint64_t v14 = v12 - 1 - v8;
      if (v14 < 0)
      {
LABEL_47:
        uint64_t result = (unsigned int *)_fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      memmove((void *)(v11 + 8 * v8 + 32), (const void *)(v11 + 8 * v8 + 40), 8 * v14);
      *(void *)(v11 + 16) = v13;
      uint64_t v15 = specialized Array._endMutation()();
      MEMORY[0x24C522D60](v15);
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (unsigned int *)specialized Array._endMutation()();
      if ((uint64_t)v8 >= --i) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t i = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_25:
  uint64_t v17 = (void *)v3[1];
  uint64_t v18 = v17[2];
  if (!v18) {
    return result;
  }
  long long v29 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_46:
  }
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  unint64_t v19 = 0;
  do
  {
    int v30 = (int)v5;
    if (v19 >= v17[2])
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    char v20 = &v17[2 * v19 + 4];
    ScrapeableContent.move(parentID:to:)(&v30, a2);
    if (v19 >= v17[2]) {
      goto LABEL_44;
    }
    unint64_t v21 = v5;
    unint64_t v5 = v20 + 1;
    uint64_t v22 = v20[1];
    if (*v20 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        uint64_t result = (unsigned int *)swift_bridgeObjectRelease();
LABEL_29:
        ++v19;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23) {
        goto LABEL_28;
      }
    }
    uint64_t v24 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease();
    uint64_t result = (unsigned int *)swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_29;
    }
    unint64_t v25 = v17[2];
    if (v19 >= v25) {
      goto LABEL_45;
    }
    unint64_t v26 = v25 - 1;
    uint64_t v27 = v25 - 1 - v19;
    if (v27 < 0) {
      goto LABEL_47;
    }
    memmove(v20, v20 + 2, 16 * v27);
    v17[2] = v26;
    swift_bridgeObjectRelease();
    uint64_t result = (unsigned int *)swift_bridgeObjectRelease();
    --v18;
LABEL_30:
    unint64_t v5 = v21;
  }
  while ((uint64_t)v19 < v18);
  v29[1] = (uint64_t)v17;
  return result;
}

SwiftUI::ScrapeableContent __swiftcall AGSubgraphRef.scrapeContent()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v12 = MEMORY[0x263F8EE80];
  AGSubgraphApply();
  uint64_t v11 = MEMORY[0x263F8EE88];
  unint64_t v4 = v12;
  swift_bridgeObjectRetain();
  AGSubgraphRef.Map.content(for:updated:)(v2, (unint64_t)&v11, v4, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = v10[0];
  if (v10[0])
  {
    unint64_t v6 = v10[1];
    uint64_t v7 = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = (void *)swift_bridgeObjectRelease();
    unint64_t v5 = MEMORY[0x263F8EE78];
    unint64_t v6 = MEMORY[0x263F8EE78];
  }
  *uint64_t v3 = v5;
  v3[1] = v6;
  result.children._rawuint64_t Value = v8;
  result.nodes._rawuint64_t Value = v7;
  return result;
}

void *closure #1 in AGSubgraphRef.scrapeContent()(uint64_t a1)
{
  uint64_t v2 = *(void *)AGGraphGetAttributeInfo();
  SwiftUI::ScrapeableContent result = (void *)swift_conformsToProtocol2();
  if (result) {
    unint64_t v4 = result;
  }
  else {
    unint64_t v4 = 0;
  }
  if (result) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    SwiftUI::ScrapeableContent result = ((void *(*)(void *__return_ptr, uint64_t))v4[2])(v12, a1);
    uint64_t v6 = v13;
    if (v13 != 1)
    {
      uint64_t v8 = v12[2];
      uint64_t v7 = v12[3];
      uint64_t v9 = v12[0];
      unint64_t v10 = v12[1];
      id v11 = (id)AGGraphGetAttributeSubgraph();
      AGSubgraphRef.Map.addItem(_:for:)((uint64_t)v12, v11);

      return (void *)outlined consume of ScrapeableContent.Item?(v9, v10, v8, v7, v6);
    }
  }
  return result;
}

SwiftUI::ScrapeableContent __swiftcall ViewGraph.scrapeContent()()
{
  swift_beginAccess();
  id v1 = *(id *)(v0 + 32);
  AGSubgraphRef.scrapeContent()();

  result.children._rawuint64_t Value = v3;
  result.nodes._rawuint64_t Value = v2;
  return result;
}

SwiftUI::ScrapeableContent __swiftcall ViewRendererHost.scrapeContent()()
{
  id v1 = (void *)(*(uint64_t (**)(void (*)(uint64_t), void, ValueMetadata *))(*(void *)(v0 + 8)
                                                                                                + 24))(closure #1 in ViewRendererHost.scrapeContent(), 0, &type metadata for ScrapeableContent);
  result.children._rawuint64_t Value = v2;
  result.nodes._rawuint64_t Value = v1;
  return result;
}

void closure #1 in ViewRendererHost.scrapeContent()(uint64_t a1)
{
  swift_beginAccess();
  id v2 = *(id *)(a1 + 32);
  AGSubgraphRef.scrapeContent()();
}

void ScrapeableContent.description.getter()
{
  v1[0] = 0xD000000000000013;
  v1[1] = 0x8000000246221790;
  long long v2 = xmmword_2461BDB10;
  unint64_t v3 = 0xE200000000000000;
  ScrapeableContent.print(into:)(v1);
  if (!(void)v2) {
    goto LABEL_4;
  }
  if ((void)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void ScrapeableContent.print(into:)(void *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_23;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](i, v4);
    }
    else {
      swift_retain();
    }
    ScrapeableContent.Node.print(into:)(a1);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 16);
  if (!v7) {
    return;
  }
  uint64_t v8 = a1[2];
  if (!v8)
  {
    v17._countAndFlagsBits = 40;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v15 = 0x6E6572646C696863;
    unint64_t v16 = 0xE800000000000000;
    goto LABEL_15;
  }
  v9._countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v10 = a1[3];
  id v11 = (void *)a1[4];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 40;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x6E6572646C696863;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  if (__OFADD__(v8, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a1[2] = v8 + 1;
  uint64_t v15 = 8224;
  unint64_t v16 = 0xE200000000000000;
LABEL_15:
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRetain();
  for (uint64_t j = 0; j != v7; ++j)
    ScrapeableContent.print(into:)(a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = a1[2];
  if (!v19) {
    goto LABEL_20;
  }
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
LABEL_24:
    __break(1u);
    return;
  }
  a1[2] = v21;
  specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_20:
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
}

void ScrapeableContent.Node.print(into:)(void *a1)
{
  ScrapeableContent.Item.print(into:)(a1);
  uint64_t v3 = (unint64_t *)(v1 + 88);
  swift_beginAccess();
  unint64_t v4 = *(void *)(v1 + 88);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      return;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    v6._countAndFlagsBits = 10;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    uint64_t v7 = a1[3];
    uint64_t v8 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 40;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0x6E6572646C696863;
    v11._object = (void *)0xE800000000000000;
    String.append(_:)(v11);
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    a1[2] = v5 + 1;
    uint64_t v12 = 8224;
    unint64_t v13 = 0xE200000000000000;
  }
  else
  {
    v14._countAndFlagsBits = 40;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    uint64_t v12 = 0x6E6572646C696863;
    unint64_t v13 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v12);
  unint64_t v15 = *v3;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (!v16) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_18;
    }
  }
  if (v16 < 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  for (uint64_t i = 0; i != v16; ++i)
  {
    if ((v15 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](i, v15);
    }
    else {
      swift_retain();
    }
    ScrapeableContent.Node.print(into:)(a1);
    swift_release();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v19 = a1[2];
  if (v19)
  {
    BOOL v20 = __OFSUB__(v19, 1);
    uint64_t v21 = v19 - 1;
    if (!v20)
    {
      a1[2] = v21;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
    return;
  }
LABEL_21:
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
}

void ScrapeableContent.Node.description.getter()
{
  v1[0] = 0xD000000000000018;
  v1[1] = 0x80000002462217B0;
  long long v2 = xmmword_2461BDB10;
  unint64_t v3 = 0xE200000000000000;
  ScrapeableContent.Node.print(into:)(v1);
  if (!(void)v2) {
    goto LABEL_4;
  }
  if ((void)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void ScrapeableContent.Item.print(into:)(void *a1)
{
  unint64_t v3 = *(void *)(v1 + 8);
  double v5 = *(double *)(v1 + 16);
  double v4 = *(double *)(v1 + 24);
  uint64_t v6 = a1[2];
  if (v6)
  {
    v7._uint64_t countAndFlagsBits = 10;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    uint64_t v8 = a1[3];
    Swift::String v9 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 40;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 1835365481;
    v12._object = (void *)0xE400000000000000;
    String.append(_:)(v12);
    BOOL v13 = __OFADD__(v6++, 1);
    if (v13)
    {
      __break(1u);
LABEL_64:
      __break(1u);
      JUMPOUT(0x245E2A74CLL);
    }
    a1[2] = v6;
    uint64_t v14 = 8224;
    unint64_t v15 = 0xE200000000000000;
  }
  else
  {
    v16._uint64_t countAndFlagsBits = 40;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v14 = 1835365481;
    unint64_t v15 = 0xE400000000000000;
  }
  String.append(_:)(*(Swift::String *)&v14);
  if (v5 != 0.0 || v4 != 0.0)
  {
    v104[0]._uint64_t countAndFlagsBits = 0x2820657A69733A23;
    v104[0]._object = (void *)0xE800000000000000;
    v17._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 0x2820657A69733A23;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
  }
  switch(v3 >> 60)
  {
    case 1uLL:
      if (v6)
      {
        v29._uint64_t countAndFlagsBits = 10;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        uint64_t v30 = a1[3];
        char v31 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v32._uint64_t countAndFlagsBits = v30;
        v32._object = v31;
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
      }
      else
      {
        v79._uint64_t countAndFlagsBits = 32;
        v79._object = (void *)0xE100000000000000;
        String.append(_:)(v79);
      }
      unint64_t v80 = 0x296567616D6928;
      unint64_t v81 = 0xE700000000000000;
      goto LABEL_59;
    case 2uLL:
      swift_unknownObjectRetain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v104[0]._uint64_t countAndFlagsBits = 0x726F6674616C7028;
      v104[0]._object = (void *)0xEF20776569762D6DLL;
      swift_getObjectType();
      v33._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      if (v6)
      {
        v34._uint64_t countAndFlagsBits = 10;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        uint64_t v35 = a1[3];
        uint64_t v36 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v37._uint64_t countAndFlagsBits = v35;
        v37._object = v36;
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
      }
      else
      {
        v82._uint64_t countAndFlagsBits = 32;
        v82._object = (void *)0xE100000000000000;
        String.append(_:)(v82);
      }
      v83._uint64_t countAndFlagsBits = 0x726F6674616C7028;
      v83._object = (void *)0xEF20776569762D6DLL;
      String.append(_:)(v83);
      swift_unknownObjectRelease();
      goto LABEL_46;
    case 3uLL:
      uint64_t v38 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      double v39 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      v104[0]._uint64_t countAndFlagsBits = 0;
      v104[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      uint64_t v40 = "(app-entity-identifier ";
      goto LABEL_17;
    case 4uLL:
      uint64_t v38 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      double v39 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      v104[0]._uint64_t countAndFlagsBits = 0;
      v104[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      uint64_t v40 = "(app-intent-identifier ";
LABEL_17:
      v104[0]._uint64_t countAndFlagsBits = 0xD000000000000017;
      v104[0]._object = (void *)((unint64_t)(v40 - 32) | 0x8000000000000000);
      v41._uint64_t countAndFlagsBits = v38;
      v41._object = v39;
      String.append(_:)(v41);
      goto LABEL_19;
    case 5uLL:
      v104[0]._uint64_t countAndFlagsBits = 0;
      v104[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(29);
      v42._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v42._object = (void *)0x8000000246221890;
      String.append(_:)(v42);
      _print_unlocked<A, B>(_:_:)();
LABEL_19:
      v43._uint64_t countAndFlagsBits = 41;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      uint64_t countAndFlagsBits = v104[0]._countAndFlagsBits;
      object = v104[0]._object;
      if (v6) {
        goto LABEL_20;
      }
      goto LABEL_24;
    case 6uLL:
      outlined init with copy of Any((v3 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v104);
      _StringGuts.grow(_:)(26);
      v50._object = (void *)0x8000000246221870;
      v50._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v50);
      _print_unlocked<A, B>(_:_:)();
      v51._uint64_t countAndFlagsBits = 41;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      if (v6)
      {
        v52._uint64_t countAndFlagsBits = 10;
        v52._object = (void *)0xE100000000000000;
        String.append(_:)(v52);
        uint64_t v53 = a1[3];
        uint64_t v54 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v55._uint64_t countAndFlagsBits = v53;
        v55._object = v54;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
      }
      else
      {
        v84._uint64_t countAndFlagsBits = 32;
        v84._object = (void *)0xE100000000000000;
        String.append(_:)(v84);
      }
      v85._uint64_t countAndFlagsBits = 0;
      v85._object = (void *)0xE000000000000000;
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
      uint64_t v86 = a1[2];
      if (!v86) {
        goto LABEL_62;
      }
      goto LABEL_60;
    case 7uLL:
      v104[0]._uint64_t countAndFlagsBits = 0;
      v104[0]._object = (void *)0xE000000000000000;
      v56._uint64_t countAndFlagsBits = 0x7974696361706F28;
      v56._object = (void *)0xE900000000000020;
      String.append(_:)(v56);
      Double.write<A>(to:)();
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
      if (v6)
      {
LABEL_20:
        v46._uint64_t countAndFlagsBits = 10;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        uint64_t v47 = a1[3];
        double v48 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = v47;
        v49._object = v48;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_24:
        v57._uint64_t countAndFlagsBits = 32;
        v57._object = (void *)0xE100000000000000;
        String.append(_:)(v57);
      }
      v58._uint64_t countAndFlagsBits = countAndFlagsBits;
      v58._object = object;
      String.append(_:)(v58);
      goto LABEL_46;
    case 8uLL:
      id v59 = *(id *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v104[0]._uint64_t countAndFlagsBits = 0x63612D7265737528;
      v104[0]._object = (void *)0xEF20797469766974;
      id v60 = objc_msgSend(v59, sel_description);
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      CGFloat v63 = v62;

      v64._uint64_t countAndFlagsBits = v61;
      v64._object = v63;
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      if (v6)
      {
        v65._uint64_t countAndFlagsBits = 10;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        uint64_t v66 = a1[3];
        uint64_t v67 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v68._uint64_t countAndFlagsBits = v66;
        v68._object = v67;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
      }
      else
      {
        v87._uint64_t countAndFlagsBits = 32;
        v87._object = (void *)0xE100000000000000;
        String.append(_:)(v87);
      }
      v88._uint64_t countAndFlagsBits = 0x63612D7265737528;
      v88._object = (void *)0xEF20797469766974;
      String.append(_:)(v88);

      goto LABEL_46;
    case 9uLL:
      if (v3 == 0x9000000000000000)
      {
        if (v6)
        {
          v90._uint64_t countAndFlagsBits = 10;
          v90._object = (void *)0xE100000000000000;
          String.append(_:)(v90);
          uint64_t v91 = a1[3];
          CGFloat v92 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v93._uint64_t countAndFlagsBits = v91;
          v93._object = v92;
          String.append(_:)(v93);
          swift_bridgeObjectRelease();
        }
        else
        {
          v100._uint64_t countAndFlagsBits = 32;
          v100._object = (void *)0xE100000000000000;
          String.append(_:)(v100);
        }
        unint64_t v80 = 0x296E656464696828;
        unint64_t v81 = 0xE800000000000000;
      }
      else
      {
        if (v3 == 0x9000000000000008)
        {
          if (v6)
          {
            v69._uint64_t countAndFlagsBits = 10;
            v69._object = (void *)0xE100000000000000;
            String.append(_:)(v69);
            uint64_t v70 = a1[3];
            uint64_t v71 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v72._uint64_t countAndFlagsBits = v70;
            v72._object = v71;
            String.append(_:)(v72);
            swift_bridgeObjectRelease();
          }
          else
          {
            v98._uint64_t countAndFlagsBits = 32;
            v98._object = (void *)0xE100000000000000;
            String.append(_:)(v98);
          }
          unint64_t v80 = 0xD000000000000018;
          long long v99 = "(presentation-container)";
        }
        else
        {
          if (v6)
          {
            v94._uint64_t countAndFlagsBits = 10;
            v94._object = (void *)0xE100000000000000;
            String.append(_:)(v94);
            uint64_t v95 = a1[3];
            v96 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v97._uint64_t countAndFlagsBits = v95;
            v97._object = v96;
            String.append(_:)(v97);
            swift_bridgeObjectRelease();
          }
          else
          {
            v101._uint64_t countAndFlagsBits = 32;
            v101._object = (void *)0xE100000000000000;
            String.append(_:)(v101);
          }
          unint64_t v80 = 0xD00000000000001ELL;
          long long v99 = "(presentation-container-child)";
        }
        unint64_t v81 = (unint64_t)(v99 - 32) | 0x8000000000000000;
      }
LABEL_59:
      String.append(_:)(*(Swift::String *)&v80);
      uint64_t v86 = a1[2];
      if (v86) {
        goto LABEL_60;
      }
      goto LABEL_62;
    default:
      uint64_t v23 = *(void *)(v3 + 48);
      v104[0]._uint64_t countAndFlagsBits = 0x22207478657428;
      v104[0]._object = (void *)0xE700000000000000;
      uint64_t v24 = *(void **)(v23 + 216);
      swift_retain();
      if (v24)
      {
        id v25 = objc_msgSend(v24, sel_string);
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v28 = (void *)0xE000000000000000;
      }
      v73._uint64_t countAndFlagsBits = v26;
      v73._object = v28;
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      v74._uint64_t countAndFlagsBits = 10530;
      v74._object = (void *)0xE200000000000000;
      String.append(_:)(v74);
      if (v6)
      {
        v75._uint64_t countAndFlagsBits = 10;
        v75._object = (void *)0xE100000000000000;
        String.append(_:)(v75);
        uint64_t v76 = a1[3];
        CGFloat v77 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v78._uint64_t countAndFlagsBits = v76;
        v78._object = v77;
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
      }
      else
      {
        v89._uint64_t countAndFlagsBits = 32;
        v89._object = (void *)0xE100000000000000;
        String.append(_:)(v89);
      }
      String.append(_:)(v104[0]);
      swift_release();
LABEL_46:
      swift_bridgeObjectRelease();
      uint64_t v86 = a1[2];
      if (!v86) {
        goto LABEL_62;
      }
LABEL_60:
      BOOL v13 = __OFSUB__(v86, 1);
      uint64_t v102 = v86 - 1;
      if (v13) {
        goto LABEL_64;
      }
      a1[2] = v102;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_62:
      v103._uint64_t countAndFlagsBits = 41;
      v103._object = (void *)0xE100000000000000;
      String.append(_:)(v103);
      return;
  }
}

void protocol witness for CustomStringConvertible.description.getter in conformance ScrapeableContent.Node()
{
}

void ScrapeableContent.Item.description.getter()
{
  v1[0] = 0xD000000000000018;
  v1[1] = 0x80000002462217D0;
  long long v2 = xmmword_2461BDB10;
  unint64_t v3 = 0xE200000000000000;
  ScrapeableContent.Item.print(into:)(v1);
  if (!(void)v2) {
    goto LABEL_4;
  }
  if ((void)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._uint64_t countAndFlagsBits = 41;
    v0._object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void *partial apply for closure #1 in AGSubgraphRef.scrapeContent()(uint64_t a1)
{
  return closure #1 in AGSubgraphRef.scrapeContent()(a1);
}

unint64_t lazy protocol witness table accessor for type ScrapeableID and conformance ScrapeableID()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID;
  if (!lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrapeableID and conformance ScrapeableID);
  }
  return result;
}

unsigned char *sub_245E2A8DC(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 0;
  }
  else {
    int v2 = 0x2000;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFDFFF | v2;
  return result;
}

uint64_t dispatch thunk of static ScrapeableAttribute.scrapeContent(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for ScrapeableContent()
{
  return &type metadata for ScrapeableContent;
}

unint64_t *initializeBufferWithCopyOfBuffer for ScrapeableContent.Content(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of ScrapeableContent.Content(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ScrapeableContent.Content(unint64_t *a1)
{
  return outlined consume of ScrapeableContent.Content(*a1);
}

unint64_t *assignWithCopy for ScrapeableContent.Content(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of ScrapeableContent.Content(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of ScrapeableContent.Content(v4);
  return a1;
}

unint64_t *assignWithTake for ScrapeableContent.Content(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of ScrapeableContent.Content(v3);
  return a1;
}

uint64_t destroy for ScrapeableContent.Item(uint64_t a1)
{
  outlined consume of ScrapeableContent.Content(*(void *)(a1 + 8));

  return swift_release();
}

uint64_t initializeWithCopy for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  outlined copy of ScrapeableContent.Content(v4);
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  unint64_t v4 = *(void *)(a2 + 8);
  outlined copy of ScrapeableContent.Content(v4);
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  outlined consume of ScrapeableContent.Content(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ScrapeableContent.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  outlined consume of ScrapeableContent.Content(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrapeableContent.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrapeableContent.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrapeableContent.Item()
{
  return &type metadata for ScrapeableContent.Item;
}

uint64_t type metadata accessor for ScrapeableContent.Node()
{
  return self;
}

uint64_t method lookup function for ScrapeableContent.Node(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ScrapeableContent.Node);
}

uint64_t sub_245E2AC94()
{
  return swift_getWitnessTable();
}

unint64_t *outlined destroy of ScrapeableContent.Content(unint64_t *a1)
{
  return a1;
}

unint64_t *assignWithTake for ScrapeableAttachmentViewModifier(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((~v3 & 0xF000000000000007) != 0)
  {
    if ((~v4 & 0xF000000000000007) != 0)
    {
      *a1 = v4;
      outlined consume of ScrapeableContent.Content(v3);
      return a1;
    }
    outlined destroy of ScrapeableContent.Content(a1);
  }
  *a1 = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrapeableAttachmentViewModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x76 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 118);
  }
  int v3 = (*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7));
  unsigned int v4 = v3 ^ 0x7E;
  int v5 = 126 - v3;
  if (v4 >= 0x76) {
    int v6 = -1;
  }
  else {
    int v6 = v5;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrapeableAttachmentViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x75)
  {
    *(void *)unint64_t result = a2 - 118;
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x76) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = ((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4) | ((unint64_t)((8 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 4)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewInputs.ScrapeableParentID()
{
  return &type metadata for _ViewInputs.ScrapeableParentID;
}

uint64_t specialized static AGSubgraphRef.Map.resolveParents(nodes:children:)(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (unint64_t)a1;
  uint64_t v4 = *a1;
  unint64_t v25 = (unint64_t)*a1 >> 62;
  if (v25) {
    goto LABEL_56;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_57:
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  Swift::String v22 = (void *)a2;
  int v6 = *(void **)a2;
  Swift::String v21 = (void *)v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  }
  char v23 = 0;
  unint64_t v3 = 0;
  unint64_t v7 = v4 & 0xC000000000000001;
  uint64_t v24 = v5;
  do
  {
    while (1)
    {
      if (v7)
      {
        uint64_t v8 = MEMORY[0x24C523D60](v3, v4);
        BOOL v9 = __OFADD__(v3++, 1);
        if (v9) {
          goto LABEL_54;
        }
      }
      else
      {
        if (v3 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_55;
        }
        uint64_t v8 = *(void *)(v4 + 32 + 8 * v3);
        swift_retain();
        BOOL v9 = __OFADD__(v3++, 1);
        if (v9) {
          goto LABEL_54;
        }
      }
      unsigned int v10 = *(_DWORD *)(v8 + 16);
      if (v10) {
        break;
      }
      swift_release();
      if (v3 == v5) {
        goto LABEL_38;
      }
    }
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v26 = v3;
      if (!v11) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      unint64_t v26 = v3;
      if (!v11) {
        goto LABEL_32;
      }
    }
    Swift::String v12 = 0;
    unint64_t v3 = v8 + 88;
    while (2)
    {
      a2 = (unint64_t)v12;
      while (1)
      {
        if (v7)
        {
          uint64_t v13 = MEMORY[0x24C523D60](a2, v4);
          Swift::String v12 = (void **)(a2 + 1);
          if (__OFADD__(a2, 1)) {
            goto LABEL_51;
          }
        }
        else
        {
          if (a2 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_53;
          }
          uint64_t v13 = *(void *)(v4 + 8 * a2 + 32);
          swift_retain();
          Swift::String v12 = (void **)(a2 + 1);
          if (__OFADD__(a2, 1))
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            swift_bridgeObjectRetain();
            uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
            if (!v5) {
              goto LABEL_57;
            }
            goto LABEL_3;
          }
        }
        if (v13 != v8 && *(_DWORD *)(v13 + 20) == v10) {
          break;
        }
        swift_release();
        ++a2;
        if (v12 == (void **)v11) {
          goto LABEL_32;
        }
      }
      *(unsigned char *)(v13 + 96) = 1;
      swift_beginAccess();
      uint64_t v14 = swift_retain();
      MEMORY[0x24C522D60](v14);
      if (*(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
      char v23 = 1;
      if (v12 != (void **)v11) {
        continue;
      }
      break;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized MutableCollection<>.reverse()();
    swift_endAccess();
    a2 = v6[2];
    if (a2)
    {
      swift_beginAccess();
      unint64_t v15 = 0;
      unint64_t v3 = (unint64_t)(v6 + 4);
      do
      {
        unsigned int v27 = v10;
        if ((unint64_t)v15 >= v6[2]) {
          goto LABEL_52;
        }
        unint64_t v15 = (void **)((char *)v15 + 1);
        ScrapeableContent.move(parentID:to:)(&v27, (void *)(v8 + 88));
        v3 += 16;
      }
      while ((void **)a2 != v15);
      swift_endAccess();
    }
    swift_release();
    uint64_t v5 = v24;
    unint64_t v3 = v26;
  }
  while (v26 != v24);
LABEL_38:
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::String v22 = v6;
  if ((v23 & 1) == 0) {
    return result;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = result;
    if (!result) {
      goto LABEL_61;
    }
LABEL_41:
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = 0;
    while (1)
    {
      if (v7)
      {
        if (*(unsigned char *)(MEMORY[0x24C523D60](v18, v4) + 96)) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v4 + 8 * v18 + 32);
        swift_retain();
        if (*(unsigned char *)(v19 + 96))
        {
LABEL_49:
          swift_release();
          goto LABEL_44;
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_44:
      if (v17 == ++v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = v28;
        goto LABEL_62;
      }
    }
  }
  uint64_t v17 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v17) {
    goto LABEL_41;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  uint64_t v20 = MEMORY[0x263F8EE78];
LABEL_62:
  uint64_t result = swift_bridgeObjectRelease();
  void *v21 = v20;
  return result;
}

void type metadata accessor for (ScrapeableContent, Int)()
{
  if (!lazy cache variable for type metadata for (ScrapeableContent, Int))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrapeableContent, Int));
    }
  }
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  void v16[2] = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    if (a2 < a1) {
      goto LABEL_22;
    }
    int v2 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (v5 >= a2)
      {
        __break(1u);
LABEL_22:
        __break(1u);
      }
      id v6 = (id)AGSubgraphGetChild();
      AGSubgraphRef.Map.content(for:updated:)(v16);
      uint64_t v7 = v16[0];
      if (v16[0])
      {
        uint64_t v8 = v16[1];
        if ((unint64_t)v16[0] >> 62)
        {
          outlined copy of ScrapeableContent?(v16[0]);
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v10)
          {
LABEL_12:
            outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
LABEL_15:
            Indedouble x = AGSubgraphGetIndex();

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
            }
            unint64_t v14 = v2[2];
            unint64_t v13 = v2[3];
            if (v14 >= v13 >> 1) {
              int v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v2);
            }
            v2[2] = v14 + 1;
            unint64_t v15 = &v2[3 * v14];
            v15[4] = v7;
            v15[5] = v8;
            v15[6] = Index;
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v9 = *(void *)((v16[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v9) {
            goto LABEL_12;
          }
        }
        uint64_t v11 = *(void *)(v8 + 16);
        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
        if (v11) {
          goto LABEL_15;
        }

        outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(v7);
      }
      else
      {
      }
LABEL_7:
      if (a2 == ++v5) {
        return v2;
      }
    }
  }
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t outlined copy of ScrapeableContent?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of ScrapeableContent.Item?(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    outlined consume of ScrapeableContent.Content(a2);
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for AGSubgraphRef.Map.Key()
{
  return &type metadata for AGSubgraphRef.Map.Key;
}

void *type metadata accessor for ScrapeableAttachmentViewModifier.Attachment()
{
  return &unk_26FA735B8;
}

unint64_t instantiation function for generic protocol witness table for ScrapeableAttachmentViewModifier.Attachment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ScrapeableAttachmentViewModifier.Attachment and conformance ScrapeableAttachmentViewModifier.Attachment();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for ScrapeableContent.Content?()
{
  if (!lazy cache variable for type metadata for ScrapeableContent.Content?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrapeableContent.Content?);
    }
  }
}

unint64_t outlined copy of ScrapeableContent.Content?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined copy of ScrapeableContent.Content(result);
  }
  return result;
}

void *type metadata accessor for AGSubgraphRef.Map()
{
  return &unk_26FA81F88;
}

uint64_t GesturePhase.unwrapped.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, double))(v3 + 16);
  v18(v11, v15);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      ((void (*)(char *, char *, uint64_t))v18)(v5, v11, a1);
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v19(v17, v5, v13);
      goto LABEL_7;
    case 3u:
      goto LABEL_5;
    default:
      ((void (*)(char *, char *, uint64_t))v18)(v8, v11, a1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
      {
        uint64_t v20 = type metadata accessor for Optional();
        (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v8, v20);
LABEL_5:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v24, 1, 1, v13);
        return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, a1);
      }
      else
      {
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v19(v17, v8, v13);
LABEL_7:
        Swift::String v22 = v24;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v11, a1);
        v19(v22, v17, v13);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
      }
  }
}

BOOL GesturePhase.isFailed.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  return EnumCaseMultiPayload == 3;
}

BOOL GesturePhase.isActive.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  BOOL v6 = swift_getEnumCaseMultiPayload() - 1 < 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

uint64_t GesturePhase.isTerminal.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  uint64_t v7 = 1;
  if (EnumCaseMultiPayload == 2) {
    goto LABEL_4;
  }
  if (EnumCaseMultiPayload != 3)
  {
    uint64_t v7 = 0;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  return v7;
}

uint64_t specialized GesturePhase.withValue<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, unsigned char *a5@<X8>)
{
  if (a4 - 1 >= 2)
  {
    if (a4 || a3 != 1)
    {
      *a5 = 0;
    }
    else
    {
      unint64_t result = outlined consume of GesturePhase<TappableEvent>(result, a2, 1, 0);
      *a5 = 1;
    }
  }
  a5[1] = a4;
  return result;
}

uint64_t GesturePhase.withValue<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return GesturePhase.map<A>(_:)((void (*)(char *))partial apply for closure #1 in GesturePhase.withValue<A>(_:), a1, a2, a3);
}

uint64_t static GesturePhase<A>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v73 = a4;
  uint64_t v79 = a1;
  unint64_t v80 = a2;
  uint64_t v77 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  Swift::String v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  Swift::String v68 = (char *)&v65 - v7;
  MEMORY[0x270FA5388](v8);
  Swift::String v65 = (char *)&v65 - v9;
  uint64_t v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v67 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v71 = (char *)&v65 - v11;
  uint64_t v75 = v10;
  uint64_t v74 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v66 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::String v72 = (char *)&v65 - v15;
  uint64_t v78 = a3;
  uint64_t v16 = type metadata accessor for GesturePhase();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  Swift::String v22 = (char *)&v65 - v21;
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = (char *)&v65 - v24;
  uint64_t v26 = swift_getTupleTypeMetadata2();
  uint64_t v27 = *(void *)(v26 - 8);
  double v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v65 - v29;
  Swift::String v32 = (char *)&v65 + *(int *)(v31 + 48) - v29;
  uint64_t v76 = v17;
  Swift::String v33 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  v33((char *)&v65 - v29, v79, v16, v28);
  ((void (*)(char *, char *, uint64_t))v33)(v32, v80, v16);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      ((void (*)(char *, char *, uint64_t))v33)(v22, v30, v16);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v35 = v77;
        uint64_t v34 = v78;
        uint64_t v36 = v68;
        (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v68, v32, v78);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v38 = *(void (**)(char *, uint64_t))(v35 + 8);
        v38(v36, v34);
        v38(v22, v34);
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v22, v78);
      goto LABEL_13;
    case 2u:
      ((void (*)(char *, char *, uint64_t))v33)(v19, v30, v16);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v40 = v77;
        uint64_t v39 = v78;
        Swift::String v41 = v69;
        (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v69, v32, v78);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        Swift::String v42 = *(void (**)(char *, uint64_t))(v40 + 8);
        v42(v41, v39);
        v42(v19, v39);
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v19, v78);
      goto LABEL_13;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_9;
      }
      goto LABEL_13;
    default:
      ((void (*)(char *, char *, uint64_t))v33)(v25, v30, v16);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v45 = v74;
        uint64_t v44 = v75;
        Swift::String v46 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
        v46(v72, v32, v75);
        uint64_t v47 = v71;
        double v48 = &v71[*(int *)(TupleTypeMetadata2 + 48)];
        v46(v71, v25, v44);
        Swift::String v49 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
        unint64_t v80 = v48;
        Swift::String v50 = v48;
        Swift::String v51 = v72;
        v49(v50, v72, v44);
        uint64_t v52 = v77;
        uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
        uint64_t v54 = v47;
        uint64_t v55 = v78;
        if (v53(v54, 1, v78) == 1)
        {
          uint64_t v56 = v75;
          Swift::String v57 = *(void (**)(char *, uint64_t))(v74 + 8);
          v57(v51, v75);
          if (v53(v80, 1, v55) == 1)
          {
            v57(v71, v56);
LABEL_9:
            char v37 = 1;
LABEL_10:
            uint64_t v27 = v76;
            uint64_t v26 = v16;
            goto LABEL_14;
          }
        }
        else
        {
          Swift::String v58 = v66;
          uint64_t v59 = v75;
          v49(v66, v71, v75);
          id v60 = v80;
          if (v53(v80, 1, v55) != 1)
          {
            uint64_t v61 = v65;
            (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v65, v60, v55);
            char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
            CGFloat v63 = *(void (**)(char *, uint64_t))(v52 + 8);
            v63(v61, v55);
            Swift::String v64 = *(void (**)(char *, uint64_t))(v74 + 8);
            v64(v72, v59);
            v63(v58, v55);
            v64(v71, v59);
            uint64_t v27 = v76;
            if (v62)
            {
              char v37 = 1;
              uint64_t v26 = v16;
              goto LABEL_14;
            }
LABEL_21:
            char v37 = 0;
            uint64_t v26 = v16;
            goto LABEL_14;
          }
          (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v59);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v55);
        }
        (*(void (**)(char *, uint64_t))(v67 + 8))(v71, TupleTypeMetadata2);
        uint64_t v27 = v76;
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v75);
LABEL_13:
      char v37 = 0;
LABEL_14:
      (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
      return v37 & 1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> GesturePhase<A>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static GesturePhase<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t GesturePhase.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v14, v16, v12);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
      a1(v10);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      type metadata accessor for GesturePhase();
      return swift_storeEnumTagMultiPayload();
    case 3u:
      type metadata accessor for GesturePhase();
      return swift_storeEnumTagMultiPayload();
    default:
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
        type metadata accessor for GesturePhase();
        swift_storeEnumTagMultiPayload();
        uint64_t v17 = type metadata accessor for Optional();
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v14, v17);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
        a1(v10);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 0, 1, a3);
        type metadata accessor for GesturePhase();
        return swift_storeEnumTagMultiPayload();
      }
  }
}

uint64_t partial apply for closure #1 in GesturePhase.withValue<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t type metadata accessor for GesturePhase()
{
  return __swift_instantiateGenericMetadata();
}

BOOL GesturePhase.isPossible.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  BOOL v6 = swift_getEnumCaseMultiPayload() == 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

BOOL GesturePhase.isEnded.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  BOOL v6 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

uint64_t static GesturePhase.defaultValue.getter()
{
  type metadata accessor for GesturePhase();

  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Defaultable.defaultValue.getter in conformance GesturePhase<A>()
{
  return static GesturePhase.defaultValue.getter();
}

void static GestureCategory.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata completion function for GesturePhase()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for GesturePhase(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  size_t v10 = v9 + 1;
  uint64_t v11 = *(_DWORD *)(v6 + 80);
  if (v11 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v14 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    uint64_t v4 = (void *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    unsigned int v16 = __src[v9];
    unsigned int v17 = v16 - 3;
    if (v16 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v18 = v9;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *__src;
          goto LABEL_26;
        case 2:
          int v19 = *(unsigned __int16 *)__src;
          goto LABEL_26;
        case 3:
          int v19 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_26;
        case 4:
          int v19 = *(_DWORD *)__src;
LABEL_26:
          int v20 = (v19 | (v17 << (8 * v9))) + 3;
          unsigned int v16 = v19 + 3;
          if (v9 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((unsigned char *)v4 + v9) = 2;
    }
    else if (v16 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((unsigned char *)v4 + v9) = 1;
    }
    else if (v16)
    {
      memcpy(__dst, __src, v10);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
      {
        memcpy(v4, __src, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, __src, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((unsigned char *)v4 + v9) = 0;
    }
  }
  return v4;
}

unsigned __int8 *destroy for GesturePhase(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v6 = v5 + 1;
  }
  if (v5 > v6) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unsigned int v7 = result[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *result;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)result;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)result;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 - 1 < 2
    || !v7
    && (uint64_t v13 = *(void *)(*(void *)(a2 + 16) - 8),
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(result, 1, v3), uint64_t v4 = v13, !result))
  {
    double v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    return (unsigned __int8 *)v12(v2, v3);
  }
  return result;
}

unsigned char *initializeWithCopy for GesturePhase(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  unsigned int v10 = __src[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__src;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)__src;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)__src;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v9] = 1;
  }
  else if (v10)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for GesturePhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    size_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v7 <= v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = *(void *)(v6 + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 - 1 < 2
      || !v10 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_32:
          int v19 = (v18 | (v16 << (8 * v9))) + 3;
          unsigned int v15 = v18 + 3;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v9] = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v9] = 1;
    }
    else if (v15)
    {
      memcpy(a1, a2, v9 + 1);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

unsigned char *initializeWithTake for GesturePhase(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v7 <= v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = *(void *)(v6 + 64);
  }
  unsigned int v10 = __src[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__src;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)__src;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)__src;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v9] = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v9] = 1;
  }
  else if (v10)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(__src, 1, v5))
    {
      memcpy(__dst, __src, v8);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    __dst[v9] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for GesturePhase(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    size_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v7 <= v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = *(void *)(v6 + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 - 1 < 2
      || !v10 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_32:
          int v19 = (v18 | (v16 << (8 * v9))) + 3;
          unsigned int v15 = v18 + 3;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v9] = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      a1[v9] = 1;
    }
    else if (v15)
    {
      memcpy(a1, a2, v9 + 1);
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GesturePhase(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v4 <= v5) {
    unint64_t v4 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_25;
  }
  unint64_t v6 = v4 + 1;
  char v7 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 252) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_25:
      unsigned int v12 = *((unsigned __int8 *)a1 + v4);
      if (v12 >= 4) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_25;
  }
LABEL_17:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 253;
}

void storeEnumTagSinglePayload for GesturePhase(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v6 > v7) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFD)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v10 = a2 - 253;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x245E2E7F8);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for GesturePhase(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v4 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v4 = v3 + 1;
  }
  if (v3 <= v4) {
    unint64_t v3 = v4;
  }
  uint64_t v5 = a1[v3];
  int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_15;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v9 = (v8 | (v6 << (8 * v3))) + 3;
        LODWORD(v5) = v8 + 3;
        if (v3 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void destructiveInjectEnumTag for GesturePhase(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v7 = *(void *)(v5 + 64);
  }
  else {
    size_t v7 = v6 + 1;
  }
  if (v6 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = *(void *)(v5 + 64);
  }
  if (a2 > 2)
  {
    unsigned int v9 = a2 - 3;
    if (v8 <= 3) {
      char v10 = (v9 >> (8 * v8)) + 3;
    }
    else {
      char v10 = 3;
    }
    if (v8 <= 3) {
      int v11 = v9 & ~(-1 << (8 * v8));
    }
    else {
      int v11 = v9;
    }
    a1[v8] = v10;
    if (v8 >= 4) {
      int v12 = 4;
    }
    else {
      int v12 = v8;
    }
    bzero(a1, v8);
    switch(v12)
    {
      case 2:
        *(_WORD *)a1 = v11;
        break;
      case 3:
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
        break;
      case 4:
        *(_DWORD *)a1 = v11;
        break;
      default:
        *a1 = v11;
        break;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t _ViewOutputs.forEachPreference(_:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    unint64_t v4 = (void (*)(uint64_t, uint64_t, void))result;
    swift_bridgeObjectRetain();
    uint64_t v5 = (_DWORD *)(v2 + 48);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      uint64_t v7 = *((void *)v5 - 1);
      unsigned int v8 = *v5;
      v5 += 6;
      v4(v6, v7, v8);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _ViewOutputs.preferences.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewOutputs.preferences.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*_ViewOutputs.preferences.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t *(*_ViewOutputs.layoutComputer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 12);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return _ViewOutputs.layoutComputer.modify;
}

uint64_t *_ViewOutputs.layoutComputer.modify(uint64_t *result)
{
  uint64_t v1 = result + 1;
  uint64_t v2 = *result;
  if (*((unsigned char *)result + 12)) {
    uint64_t v1 = result + 2;
  }
  *(_DWORD *)(v2 + 12) = *v1;
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0x80) == 0) {
    *(_DWORD *)(v2 + 8) = v3 | 0x80;
  }
  return result;
}

unint64_t _ViewOutputs.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    int v3 = (unsigned int *)(*(void *)v1 + 48);
    while (*((void *)v3 - 2) != a1)
    {
      v3 += 6;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    unsigned __int8 v4 = 0;
    uint64_t v2 = *v3;
  }
  else
  {
LABEL_5:
    unsigned __int8 v4 = 1;
  }
  return v2 | ((unint64_t)v4 << 32);
}

uint64_t _ViewOutputs.subscript.setter(unint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  return PreferencesOutputs.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
}

uint64_t (*_ViewOutputs.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4)
  {
    char v5 = (_DWORD *)(*(void *)v3 + 48);
    while (*((void *)v5 - 2) != a2)
    {
      v5 += 6;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    char v6 = 0;
    LODWORD(v4) = *v5;
  }
  else
  {
LABEL_5:
    char v6 = 1;
  }
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = v6;
  return _ViewOutputs.subscript.modify;
}

uint64_t _ViewOutputs.subscript.modify(uint64_t a1)
{
  return PreferencesOutputs.subscript.setter(*(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32), *(ValueMetadata **)a1, *(void *)(a1 + 8));
}

void (*_ViewOutputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(ValueMetadata ***a1)
{
  unsigned int v9 = malloc(0x28uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  *unsigned int v9 = a2;
  v9[1] = a3;
  unint64_t v10 = PreferencesOutputs.subscript.getter(a2, a3, a4);
  *((_DWORD *)v9 + 8) = v10;
  *((unsigned char *)v9 + 36) = BYTE4(v10) & 1;
  return _ViewOutputs.subscript.modify;
}

void _ViewOutputs.subscript.modify(ValueMetadata ***a1)
{
  uint64_t v1 = *a1;
  PreferencesOutputs.subscript.setter(*((unsigned int *)*a1 + 8) | ((unint64_t)*((unsigned __int8 *)*a1 + 36) << 32), **a1, (uint64_t)(*a1)[1], (uint64_t)(*a1)[2]);

  free(v1);
}

uint64_t sub_245E2EDD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 12);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_245E2EE00(uint64_t result, uint64_t a2)
{
  int v2 = (_DWORD *)MEMORY[0x263F288F8];
  if (!*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 12) = *v2;
  int v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 0x80) == 0) {
    *(_DWORD *)(a2 + 8) = v3 | 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewOutputs()
{
  return &type metadata for _ViewOutputs;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v63 = *a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  Swift::String v65 = (void *)MEMORY[0x263F8EE78];
  uint64_t v66 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
LABEL_6:
      uint64_t v10 = *(void *)(v2 + 56);
      int v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *(void *)&long long v71 = v13;
      *((void *)&v71 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v72);
      goto LABEL_13;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      int64_t v16 = v7;
    }
    else
    {
      unint64_t v15 = *(void *)(v63 + 8 * v14);
      if (v15) {
        goto LABEL_10;
      }
      int64_t v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        unint64_t v15 = *(void *)(v63 + 8 * (v7 + 2));
        if (v15)
        {
          int64_t v14 = v7 + 2;
LABEL_10:
          unint64_t v5 = (v15 - 1) & v15;
          unint64_t v9 = __clz(__rbit64(v15)) + (v14 << 6);
          int64_t v7 = v14;
          goto LABEL_6;
        }
        int64_t v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          unint64_t v15 = *(void *)(v63 + 8 * (v7 + 3));
          if (v15)
          {
            int64_t v14 = v7 + 3;
            goto LABEL_10;
          }
          int64_t v14 = v7 + 4;
          int64_t v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            unint64_t v15 = *(void *)(v63 + 8 * v14);
            if (v15) {
              goto LABEL_10;
            }
            while (v6 - 5 != v7)
            {
              unint64_t v15 = *(void *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                int64_t v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            int64_t v16 = v6 - 1;
          }
        }
      }
    }
    unint64_t v5 = 0;
    uint64_t v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    int64_t v7 = v16;
    long long v71 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v71, (uint64_t)v75);
    uint64_t v17 = v75[0];
    if (!v75[0]) {
      break;
    }
    uint64_t v18 = v75[1];
    outlined init with take of ScrollStateRequest(&v76, (uint64_t)v70);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v68, (uint64_t)&v71);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
      }
      unint64_t v20 = v66[2];
      unint64_t v19 = v66[3];
      unint64_t v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v66);
        unint64_t v21 = v20 + 1;
        uint64_t v66 = v31;
      }
      v66[2] = v21;
      Swift::String v22 = &v66[2 * v20];
      void v22[4] = v17;
      v22[5] = v18;
      uint64_t v23 = *((void *)&v72 + 1);
      uint64_t v24 = v73;
      __swift_project_boxed_opaque_existential_1(&v71, *((uint64_t *)&v72 + 1));
      double v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      uint64_t v27 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
      }
      unint64_t v29 = v65[2];
      unint64_t v28 = v65[3];
      if (v29 >= v28 >> 1) {
        Swift::String v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v65);
      }
      v65[2] = v29 + 1;
      uint64_t v30 = (double *)&v65[2 * v29];
      v30[4] = v25;
      *((void *)v30 + 5) = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
    }
    else
    {
      uint64_t v69 = 0;
      memset(v68, 0, sizeof(v68));
      outlined destroy of SpatialEventType?((uint64_t)v68);
    }
  }
  swift_release();
  Swift::String v32 = v65;
  uint64_t v64 = v65[2];
  if (v64)
  {
    Swift::String v33 = v66;
    uint64_t v62 = v66[2];
    if (v62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      while (1)
      {
        if (v64 == v35)
        {
LABEL_57:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (v35 >= v32[2]) {
          goto LABEL_61;
        }
        uint64_t v37 = *a1;
        if (!*(void *)(*a1 + 16)) {
          goto LABEL_62;
        }
        Swift::UInt v38 = v33[v34 + 4];
        Swift::UInt v39 = v33[v34 + 5];
        double v40 = *(double *)&v32[v34 + 4];
        double v41 = *(double *)&v32[v34 + 5];
        unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
        if ((v43 & 1) == 0) {
          goto LABEL_63;
        }
        outlined init with copy of AnyTrackedValue(*(void *)(v37 + 56) + 40 * v42, (uint64_t)v70);
        outlined init with take of ScrollStateRequest(v70, (uint64_t)&v71);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        uint64_t v44 = *((void *)&v76 + 1);
        uint64_t v45 = v77;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v75, *((uint64_t *)&v76 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v45 + 48))(v44, v45, v40, v41);
        outlined init with copy of AnyTrackedValue((uint64_t)v75, (uint64_t)v70);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v71, (uint64_t)v68);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v47 = *a1;
        uint64_t v67 = (void *)*a1;
        *a1 = 0x8000000000000000;
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
        uint64_t v50 = *(void *)(v47 + 16);
        BOOL v51 = (v48 & 1) == 0;
        uint64_t v52 = v50 + v51;
        if (__OFADD__(v50, v51)) {
          goto LABEL_64;
        }
        char v53 = v48;
        if (*(void *)(v47 + 24) >= v52)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v56 = v67;
            if ((v48 & 1) == 0) {
              goto LABEL_53;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v56 = v67;
            if ((v53 & 1) == 0) {
              goto LABEL_53;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
          unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
          if ((v53 & 1) != (v55 & 1)) {
            goto LABEL_66;
          }
          unint64_t v49 = v54;
          uint64_t v56 = v67;
          if ((v53 & 1) == 0)
          {
LABEL_53:
            v56[(v49 >> 6) + 8] |= 1 << v49;
            Swift::String v57 = (Swift::UInt *)(v56[6] + 16 * v49);
            *Swift::String v57 = v38;
            v57[1] = v39;
            outlined init with take of ScrollStateRequest(v68, v56[7] + 40 * v49);
            uint64_t v58 = v56[2];
            BOOL v59 = __OFADD__(v58, 1);
            uint64_t v60 = v58 + 1;
            if (v59) {
              goto LABEL_65;
            }
            v56[2] = v60;
            goto LABEL_41;
          }
        }
        uint64_t v36 = v56[7] + 40 * v49;
        __swift_destroy_boxed_opaque_existential_1(v36);
        outlined init with take of ScrollStateRequest(v68, v36);
LABEL_41:
        ++v35;
        *a1 = (uint64_t)v56;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
        v34 += 2;
        Swift::String v32 = v65;
        Swift::String v33 = v66;
        if (v62 == v35) {
          goto LABEL_57;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, void (*a2)(void **), uint64_t a3, uint64_t a4)
{
  uint64_t v79 = a3;
  unint64_t v80 = a2;
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v6 - 8);
  Swift::String v82 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  Swift::String v83 = (char *)&v75 - v9;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v81 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v91 = (char *)&v75 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v93 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v93);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v75 - v20;
  uint64_t v86 = (void *)MEMORY[0x263F8EE78];
  uint64_t v102 = (void *)MEMORY[0x263F8EE78];
  Swift::String v84 = a1;
  uint64_t v22 = *a1;
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(v22 + 64);
  uint64_t v85 = v22 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  unint64_t v28 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v92 = TupleTypeMetadata2 - 8;
  Swift::String v88 = (uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  unint64_t v29 = (void (**)(char *, char *, uint64_t))(v19 + 32);
  uint64_t v89 = v10;
  Swift::String v94 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  unint64_t v76 = v28 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v31 = 0;
  int64_t v87 = v28;
  unint64_t v78 = v28 - 4;
  uint64_t v90 = result;
  uint64_t v77 = result + 96;
  while (1)
  {
    if (v27)
    {
      unint64_t v32 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v33 = v32 | (v31 << 6);
      goto LABEL_6;
    }
    int64_t v42 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }
    if (v42 >= v87)
    {
      unint64_t v27 = 0;
      uint64_t v38 = 1;
    }
    else
    {
      unint64_t v43 = *(void *)(v85 + 8 * v42);
      if (v43) {
        goto LABEL_13;
      }
      if ((uint64_t)(v31 + 2) >= v87)
      {
        unint64_t v27 = 0;
        uint64_t v38 = 1;
        ++v31;
      }
      else
      {
        unint64_t v43 = *(void *)(v85 + 8 * (v31 + 2));
        if (v43)
        {
          int64_t v42 = v31 + 2;
LABEL_13:
          unint64_t v27 = (v43 - 1) & v43;
          unint64_t v33 = __clz(__rbit64(v43)) + (v42 << 6);
          unint64_t v31 = v42;
LABEL_6:
          uint64_t v34 = *(void *)(v90 + 56);
          unint64_t v35 = (uint64_t *)(*(void *)(v90 + 48) + 16 * v33);
          uint64_t v37 = *v35;
          uint64_t v36 = v35[1];
          *(void *)uint64_t v17 = v37;
          *((void *)v17 + 1) = v36;
          (*(void (**)(char *, unint64_t, uint64_t))(v89 + 16))(&v17[*(int *)(TupleTypeMetadata2 + 48)], v34 + *(void *)(v89 + 72) * v33, v23);
          uint64_t v38 = 0;
          goto LABEL_7;
        }
        int64_t v42 = v31 + 3;
        if ((uint64_t)(v31 + 3) >= v87)
        {
          unint64_t v27 = 0;
          uint64_t v38 = 1;
          v31 += 2;
        }
        else
        {
          unint64_t v43 = *(void *)(v85 + 8 * v42);
          if (v43) {
            goto LABEL_13;
          }
          while (v78 != v31)
          {
            unint64_t v43 = *(void *)(v77 + 8 * v31++);
            if (v43)
            {
              int64_t v42 = v31 + 3;
              goto LABEL_13;
            }
          }
          unint64_t v27 = 0;
          uint64_t v38 = 1;
          unint64_t v31 = v76;
        }
      }
    }
LABEL_7:
    uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v17, v38, 1, TupleTypeMetadata2);
    (*v29)(v21, v17, v93);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v21, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v40 = *(void *)v21;
    uint64_t v41 = *((void *)v21 + 1);
    (*v94)(v91, &v21[*(int *)(TupleTypeMetadata2 + 48)], v23);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v97, (uint64_t)v99);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v44 = v86;
      }
      else {
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1, v86);
      }
      unint64_t v46 = v44[2];
      unint64_t v45 = v44[3];
      uint64_t v47 = (void *)(v46 + 1);
      if (v46 >= v45 >> 1)
      {
        uint64_t v86 = (void *)(v46 + 1);
        uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
        uint64_t v47 = v86;
        uint64_t v44 = v58;
      }
      v44[2] = v47;
      uint64_t v86 = v44;
      char v48 = &v44[2 * v46];
      v48[4] = v40;
      v48[5] = v41;
      uint64_t v49 = v100;
      uint64_t v50 = v101;
      __swift_project_boxed_opaque_existential_1(v99, v100);
      double v51 = (*(double (**)(uint64_t, uint64_t))(v50 + 16))(v49, v50);
      uint64_t v53 = v52;
      unint64_t v54 = v102;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
      }
      unint64_t v56 = v54[2];
      unint64_t v55 = v54[3];
      if (v56 >= v55 >> 1) {
        unint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
      }
      v54[2] = v56 + 1;
      Swift::String v57 = (double *)&v54[2 * v56];
      v57[4] = v51;
      *((void *)v57 + 5) = v53;
      uint64_t v102 = v54;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
    }
    else
    {
      uint64_t v98 = 0;
      memset(v97, 0, sizeof(v97));
      uint64_t result = outlined destroy of SpatialEventType?((uint64_t)v97);
    }
  }
  swift_release();
  if (v102[2])
  {
    v80(&v102);
    uint64_t v92 = v86[2];
    if (v92)
    {
      BOOL v59 = v102;
      uint64_t v60 = (char *)v102[2];
      uint64_t v90 = v23;
      uint64_t v91 = v60;
      Swift::String v88 = (uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
      v89 += 56;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = v84;
      int64_t v87 = (int64_t)v59;
      do
      {
        if (v91 == v62) {
          break;
        }
        if ((unint64_t)v62 >= v59[2]) {
          goto LABEL_46;
        }
        uint64_t v64 = v86[v61 + 5];
        double v65 = *(double *)&v59[v61 + 4];
        double v66 = *(double *)&v59[v61 + 5];
        uint64_t v67 = *v63;
        uint64_t v93 = v86[v61 + 4];
        v99[0] = v93;
        v99[1] = v64;
        unint64_t v68 = lazy protocol witness table accessor for type EventID and conformance EventID();
        uint64_t v69 = v83;
        uint64_t v70 = v90;
        MEMORY[0x24C522390](v99, v67, &type metadata for EventID, v90, v68);
        uint64_t result = (*v88)(v69, 1, v70);
        if (result == 1) {
          goto LABEL_47;
        }
        ++v62;
        (*v94)(v81, v69, v70);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        uint64_t v71 = v100;
        uint64_t v72 = v101;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v99, v100);
        (*(void (**)(uint64_t, uint64_t, double, double))(v72 + 48))(v71, v72, v65, v66);
        outlined init with copy of AnyTrackedValue((uint64_t)v99, (uint64_t)v97);
        long long v73 = v82;
        swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))v89)(v73, 0, 1, v70);
        uint64_t v95 = v93;
        uint64_t v96 = v64;
        type metadata accessor for Dictionary();
        uint64_t v74 = v84;
        Dictionary.subscript.setter();
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        v61 += 2;
        uint64_t v63 = v74;
        BOOL v59 = (void *)v87;
      }
      while ((char *)v92 != v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void SpatialEventType.kind.getter(unsigned char *a1@<X8>)
{
}

{
  *a1 = 3;
}

void SpatialEvent.Kind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SpatialEvent.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpatialEvent.Kind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SpatialEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SpatialEvent.phase.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*SpatialEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double SpatialEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*SpatialEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SpatialEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t SpatialEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*SpatialEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void SpatialEvent.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *SpatialEvent.kind.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*SpatialEvent.kind.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.globalLocation.getter()
{
  return *(double *)(v0 + 32);
}

void SpatialEvent.globalLocation.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*SpatialEvent.globalLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.location.getter()
{
  return *(double *)(v0 + 48);
}

void SpatialEvent.location.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*SpatialEvent.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpatialEvent.radius.getter()
{
  return *(double *)(v0 + 64);
}

void SpatialEvent.radius.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*SpatialEvent.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SpatialEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v22, a2, v8);
  char v9 = v22;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v21, a2, v8);
  uint64_t v10 = v21;
  double v11 = (*(double (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v13 = v12;
  double v14 = (*(double (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  uint64_t v16 = v15;
  double v17 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a3 + 72))(&v20, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  char v19 = v20;
  *(unsigned char *)a4 = v9;
  *(void *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = v19;
  *(double *)(a4 + 32) = v11;
  *(void *)(a4 + 40) = v13;
  *(double *)(a4 + 48) = v14;
  *(void *)(a4 + 56) = v16;
  *(double *)(a4 + 64) = v17;
  return result;
}

uint64_t SpatialEvent.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(&v29, v5);
  char v6 = v29;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(&v28, v8);
  uint64_t v9 = v28;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  double v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  uint64_t v14 = v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16);
  uint64_t v19 = v18;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  double v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v24 + 72))(&v27, v23, v24);
  char v25 = v27;
  *(unsigned char *)a2 = v6;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = v25;
  *(double *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v14;
  *(double *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v19;
  *(double *)(a2 + 64) = v22;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SpatialEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v11);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v20);
    outlined init with copy of AnyTrackedValue((uint64_t)v20, (uint64_t)v18);
    SpatialEvent.init(_:)(v18, (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    uint64_t v6 = v12;
    uint64_t v5 = v13;
    uint64_t v7 = v14;
    long long v8 = v15;
    long long v9 = v16;
    uint64_t v10 = v17;
    *(void *)a2 = v11[0];
    *(void *)(a2 + 8) = v6;
  }
  else
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = outlined destroy of SpatialEventType?((uint64_t)v18);
    long long v8 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    *(_OWORD *)a2 = 0u;
    uint64_t v5 = 1;
    long long v9 = 0uLL;
  }
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(void *)(a2 + 64) = v10;
  return result;
}

BOOL specialized static SpatialEvent.== infix(_:_:)(double *a1, double *a2)
{
  BOOL result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return result;
  }
  uint64_t v4 = *((void *)a1 + 2);
  int v5 = *((unsigned __int8 *)a1 + 24);
  double v7 = a1[4];
  double v6 = a1[5];
  double v9 = a1[6];
  double v8 = a1[7];
  double v10 = a1[8];
  uint64_t v11 = *((void *)a2 + 2);
  int v12 = *((unsigned __int8 *)a2 + 24);
  if (!v4)
  {
    if (!v11) {
      goto LABEL_8;
    }
LABEL_12:
    swift_release();
    return 0;
  }
  if (!v11)
  {
    swift_retain();
    goto LABEL_12;
  }
  if (v4 != v11) {
    return 0;
  }
LABEL_8:
  if (v5 == 3)
  {
    BOOL result = 0;
    if (v12 != 3) {
      return result;
    }
    goto LABEL_16;
  }
  if (v12 == 3) {
    return 0;
  }
  BOOL result = 0;
  if (v5 != v12) {
    return result;
  }
LABEL_16:
  if (v7 == a2[4] && v6 == a2[5] && v9 == a2[6] && v8 == a2[7]) {
    return v10 == a2[8];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEvent.Kind and conformance SpatialEvent.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind;
  if (!lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEvent.Kind and conformance SpatialEvent.Kind);
  }
  return result;
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpatialEventType.globalLocation.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SpatialEventType.location.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpatialEventType.location.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SpatialEventType.location.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of SpatialEventType.radius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of SpatialEventType.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t initializeWithCopy for SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEvent()
{
  return &type metadata for SpatialEvent;
}

unsigned char *storeEnumTagSinglePayload for SpatialEvent.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E309D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialEvent.Kind()
{
  return &type metadata for SpatialEvent.Kind;
}

uint64_t specialized defaultConvertEventLocations<A>(_:converter:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v64 = (void *)MEMORY[0x263F8EE78];
  unint64_t v76 = (void *)MEMORY[0x263F8EE78];
  uint64_t v2 = *a1;
  uint64_t v62 = *a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
LABEL_6:
      uint64_t v10 = *(void *)(v2 + 56);
      uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *(void *)&long long v69 = v13;
      *((void *)&v69 + 1) = v12;
      outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v70);
      goto LABEL_13;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      outlined release of ViewTransform(a2);
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v14 >= v6)
    {
      int64_t v16 = v7;
    }
    else
    {
      unint64_t v15 = *(void *)(v62 + 8 * v14);
      if (v15) {
        goto LABEL_10;
      }
      int64_t v16 = v7 + 1;
      if (v7 + 2 < v6)
      {
        unint64_t v15 = *(void *)(v62 + 8 * (v7 + 2));
        if (v15)
        {
          int64_t v14 = v7 + 2;
LABEL_10:
          unint64_t v5 = (v15 - 1) & v15;
          unint64_t v9 = __clz(__rbit64(v15)) + (v14 << 6);
          int64_t v7 = v14;
          goto LABEL_6;
        }
        int64_t v16 = v7 + 2;
        if (v7 + 3 < v6)
        {
          unint64_t v15 = *(void *)(v62 + 8 * (v7 + 3));
          if (v15)
          {
            int64_t v14 = v7 + 3;
            goto LABEL_10;
          }
          int64_t v14 = v7 + 4;
          int64_t v16 = v7 + 3;
          if (v7 + 4 < v6)
          {
            unint64_t v15 = *(void *)(v62 + 8 * v14);
            if (v15) {
              goto LABEL_10;
            }
            while (v6 - 5 != v7)
            {
              unint64_t v15 = *(void *)(v2 + 104 + 8 * v7++);
              if (v15)
              {
                int64_t v14 = v7 + 4;
                goto LABEL_10;
              }
            }
            int64_t v16 = v6 - 1;
          }
        }
      }
    }
    unint64_t v5 = 0;
    uint64_t v72 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    int64_t v7 = v16;
    long long v69 = 0u;
LABEL_13:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v69, (uint64_t)v73);
    uint64_t v17 = v73[0];
    if (!v73[0]) {
      break;
    }
    uint64_t v18 = v73[1];
    outlined init with take of ScrollStateRequest(&v74, (uint64_t)v68);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v66, (uint64_t)&v69);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v19 = v64;
      }
      else {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      if (v21 >= v20 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
      }
      v19[2] = v21 + 1;
      uint64_t v64 = v19;
      double v22 = &v19[2 * v21];
      void v22[4] = v17;
      v22[5] = v18;
      uint64_t v23 = *((void *)&v70 + 1);
      uint64_t v24 = v71;
      __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      double v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      uint64_t v27 = v26;
      uint64_t v28 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
      }
      unint64_t v30 = v28[2];
      unint64_t v29 = v28[3];
      if (v30 >= v29 >> 1) {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
      }
      void v28[2] = v30 + 1;
      unint64_t v31 = (double *)&v28[2 * v30];
      v31[4] = v25;
      *((void *)v31 + 5) = v27;
      unint64_t v76 = v28;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    }
    else
    {
      uint64_t v67 = 0;
      memset(v66, 0, sizeof(v66));
      outlined destroy of SpatialEventType?((uint64_t)v66);
    }
  }
  swift_release();
  if (v76[2])
  {
    closure #2 in EventListenerPhase.updateValue()((uint64_t)&v76, a2);
    uint64_t v63 = v64[2];
    if (v63)
    {
      unint64_t v32 = v76;
      uint64_t v61 = v76[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      while (1)
      {
        if (v61 == v34)
        {
LABEL_58:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        if (v34 >= v32[2]) {
          goto LABEL_61;
        }
        uint64_t v36 = *a1;
        if (!*(void *)(*a1 + 16)) {
          goto LABEL_62;
        }
        Swift::UInt v37 = v64[v33 + 4];
        Swift::UInt v38 = v64[v33 + 5];
        double v39 = *(double *)&v32[v33 + 4];
        double v40 = *(double *)&v32[v33 + 5];
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        if ((v42 & 1) == 0) {
          goto LABEL_63;
        }
        outlined init with copy of AnyTrackedValue(*(void *)(v36 + 56) + 40 * v41, (uint64_t)v68);
        outlined init with take of ScrollStateRequest(v68, (uint64_t)&v69);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for SpatialEventType);
        swift_dynamicCast();
        uint64_t v43 = *((void *)&v74 + 1);
        uint64_t v44 = v75;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v73, *((uint64_t *)&v74 + 1));
        (*(void (**)(uint64_t, uint64_t, double, double))(v44 + 48))(v43, v44, v39, v40);
        outlined init with copy of AnyTrackedValue((uint64_t)v73, (uint64_t)v68);
        swift_dynamicCast();
        outlined init with take of ScrollStateRequest(&v69, (uint64_t)v66);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v46 = (void *)*a1;
        *a1 = 0x8000000000000000;
        unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
        uint64_t v49 = v46[2];
        BOOL v50 = (v47 & 1) == 0;
        uint64_t v51 = v49 + v50;
        if (__OFADD__(v49, v50)) {
          goto LABEL_64;
        }
        char v52 = v47;
        if (v46[3] >= v51)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v47 & 1) == 0) {
              goto LABEL_54;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v52 & 1) == 0) {
              goto LABEL_54;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v38);
          if ((v52 & 1) != (v54 & 1)) {
            goto LABEL_66;
          }
          unint64_t v48 = v53;
          if ((v52 & 1) == 0)
          {
LABEL_54:
            v46[(v48 >> 6) + 8] |= 1 << v48;
            unint64_t v55 = (Swift::UInt *)(v46[6] + 16 * v48);
            Swift::UInt *v55 = v37;
            v55[1] = v38;
            outlined init with take of ScrollStateRequest(v66, v46[7] + 40 * v48);
            uint64_t v56 = v46[2];
            BOOL v57 = __OFADD__(v56, 1);
            uint64_t v58 = v56 + 1;
            if (v57) {
              goto LABEL_65;
            }
            v46[2] = v58;
            goto LABEL_42;
          }
        }
        uint64_t v35 = v46[7] + 40 * v48;
        __swift_destroy_boxed_opaque_existential_1(v35);
        outlined init with take of ScrollStateRequest(v66, v35);
LABEL_42:
        ++v34;
        *a1 = (uint64_t)v46;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        v33 += 2;
        if (v63 == v34) {
          goto LABEL_58;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _PreferenceWritingModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t _PreferenceWritingModifier.value.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*_PreferenceWritingModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceWritingModifier.init(key:value:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HostPreferencesWriter<A>()
{
  return specialized HostPreferencesWriter.description.getter();
}

double static TruePreferenceWritingModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, _OWORD *)@<X2>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v23 = *(_OWORD *)(a2 + 32);
  long long v24 = v9;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v25 = *(_OWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v12;
  long long v18[2] = v23;
  v18[3] = v11;
  void v18[4] = *(_OWORD *)(a2 + 64);
  int v26 = *(_DWORD *)(a2 + 80);
  int v19 = *(_DWORD *)(a2 + 80);
  v18[0] = v22[0];
  v18[1] = v10;
  a3(&v20, a1, v18);
  *(void *)&v18[0] = v24;
  DWORD2(v18[0]) = DWORD2(v24);
  uint64_t v16 = v24;
  int v17 = DWORD2(v24);
  _OWORD v15[2] = v22;
  outlined retain of LinearGradient((uint64_t)v18);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(&v16, v13, partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:), (uint64_t)v15, a4, a5);
  swift_bridgeObjectRelease();
  *(void *)a6 = v20;
  double result = v21;
  a6[1] = v21;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TruePreferenceWritingModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, _OWORD *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static TruePreferenceWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t View.truePreference<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TruePreferenceWritingModifier();

  return View.modifier<A>(_:)(v3, a2, v3);
}

double static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)@<D0>(_OWORD *a1@<X1>, void (*a2)(void *__return_ptr, _OWORD *)@<X2>, ValueMetadata *a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  long long v8 = a1[5];
  long long v9 = a1[3];
  long long v29 = a1[4];
  long long v30 = v8;
  long long v10 = a1[5];
  v31[0] = a1[6];
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)((char *)a1 + 108);
  long long v11 = a1[1];
  v26[0] = *a1;
  v26[1] = v11;
  long long v12 = a1[3];
  long long v14 = *a1;
  long long v13 = a1[1];
  long long v27 = a1[2];
  long long v28 = v12;
  void v22[4] = v29;
  v22[5] = v10;
  v23[0] = a1[6];
  *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)a1 + 108);
  v22[0] = v14;
  v22[1] = v13;
  _OWORD v22[2] = v27;
  v22[3] = v9;
  a2(v24, v22);
  *(void *)&v22[0] = *(void *)&v31[0];
  DWORD2(v22[0]) = DWORD2(v31[0]);
  uint64_t v20 = *(void *)&v31[0];
  int v21 = DWORD2(v31[0]);
  v19[2] = v26;
  outlined retain of LinearGradient((uint64_t)v22);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(&v20, v15, partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:), (uint64_t)v19, a3, a4);
  swift_bridgeObjectRelease();
  uint64_t v16 = v24[1];
  int v17 = v25;
  double result = *(double *)v24;
  *(void *)a5 = v24[0];
  *(void *)(a5 + 8) = v16;
  *(_DWORD *)(a5 + 16) = v17;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance TruePreferenceWritingGestureModifier<A, B>@<D0>(_OWORD *a1@<X1>, void (*a2)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)(a1, a2, *(ValueMetadata **)(a3 + 16), *(void *)(a3 + 32), a4);
}

void type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>);
    }
  }
}

void type metadata accessor for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>)
  {
    type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_PreferenceWritingModifier<PreferredColorSchemeKey>>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for _PreferenceWritingModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

void storeEnumTagSinglePayload for _PreferenceWritingModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E319ECLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t sub_245E31A14(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _PreferenceWritingModifier);
}

uint64_t sub_245E31A34(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for TruePreferenceWritingModifier);
}

uint64_t sub_245E31A54()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for implicit closure #1 in static TruePreferenceWritingGestureModifier._makeGesture(modifier:inputs:body:)()
{
  return specialized _GraphInputs.intern<A>(_:id:)(1, 2);
}

uint64_t specialized HostPreferencesWriter.description.getter()
{
  strcpy((char *)v2, "Preference: ");
  v0._uint64_t countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return v2[0];
}

uint64_t NSAttributedString.resolvableAttributeConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  _ss11AnySequenceVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for ResolvableAttributeConfiguration?, type metadata accessor for ResolvableAttributeConfiguration, MEMORY[0x263F8D8F0]);
  double v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v11 - v5;
  if ((uint64_t)objc_msgSend(v1, sel_length, v4) < 1) {
    goto LABEL_8;
  }
  if (one-time initialization token for updateSchedule != -1) {
    swift_once();
  }
  uint64_t v7 = static NSAttributedStringKey.updateSchedule;
  objc_msgSend(v1, sel_length);
  if (!objc_msgSend(v1, sel_attribute_atIndex_effectiveRange_, v7, 0, 0))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    _sypSgWOhTm_11((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_8:
    type metadata accessor for ResolvableAttributeConfiguration(0);
    return swift_storeEnumTagMultiPayload();
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  _sypSgWOhTm_11((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void))type metadata accessor for Any?);
  NSAttributedString.updateSchedule.getter(&v11);
  uint64_t v8 = *((void *)&v12 + 1);
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  TimelineSchedule.legacyInvalidationConfiguration.getter(v8, (uint64_t)v6);
  uint64_t v9 = type metadata accessor for ResolvableAttributeConfiguration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v6, 1, v9) == 1)
  {
    swift_storeEnumTagMultiPayload();
    _s10Foundation4DateVSgWOhTm_2((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for ResolvableAttributeConfiguration?, (uint64_t)type metadata accessor for ResolvableAttributeConfiguration, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_ss11AnySequenceVy10Foundation4DateVGMaTm_1);
  }
  else
  {
    outlined init with take of ResolvableAttributeConfiguration.Schedule((uint64_t)v6, a1, type metadata accessor for ResolvableAttributeConfiguration);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
}

uint64_t ConfigurationBasedResolvableStringAttributeRepresentation.schedule.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ResolvableAttributeConfiguration(0);
  double v11 = MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 40))(a1, a2, v11);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  uint64_t v15 = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v13, v16);
      goto LABEL_7;
    case 2:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v18 = *(int *)(v17 + 48);
      char v19 = v13[v18];
      uint64_t v20 = type metadata accessor for DateInterval();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v9, v13, v20);
      *((unsigned char *)v9 + v18) = v19;
      goto LABEL_7;
    case 3:
      *uint64_t v9 = *(void *)v13;
      goto LABEL_7;
    case 4:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v15, 1, v6);
    default:
      if (v13[8]) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v15, 1, v6);
      }
      *uint64_t v9 = *(void *)v13;
LABEL_7:
      type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
      swift_storeEnumTagMultiPayload();
      outlined init with take of ResolvableAttributeConfiguration.Schedule((uint64_t)v9, a3, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
      uint64_t v15 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v15, 1, v6);
  }
}

uint64_t ResolvableAttributeConfiguration.Schedule.init(config:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  uint64_t v15 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v6, a1, v9);
      goto LABEL_10;
    case 2u:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v11 = *(int *)(v10 + 48);
      char v12 = *(unsigned char *)(a1 + v11);
      uint64_t v13 = type metadata accessor for DateInterval();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v6, a1, v13);
      *((unsigned char *)v6 + v11) = v12;
      goto LABEL_10;
    case 3u:
      *uint64_t v6 = *(void *)a1;
      goto LABEL_10;
    case 4u:
      goto LABEL_3;
    default:
      if (*(unsigned char *)(a1 + 8))
      {
LABEL_3:
        uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
        return v7(a2, 1, 1, v4);
      }
      else
      {
        *uint64_t v6 = *(void *)a1;
LABEL_10:
        type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
        swift_storeEnumTagMultiPayload();
        outlined init with take of ResolvableAttributeConfiguration.Schedule((uint64_t)v6, a2, type metadata accessor for ResolvableAttributeConfiguration.Schedule);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v4);
      }
  }
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration.Schedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableAttributeConfiguration.Schedule);
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableAttributeConfiguration);
}

uint64_t type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvableAttributeConfiguration.Schedule.Alignment);
}

void type metadata accessor for (interval: DateInterval, countdown: Bool)()
{
  if (!lazy cache variable for type metadata for (interval: DateInterval, countdown: Bool))
  {
    type metadata accessor for DateInterval();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: DateInterval, countdown: Bool));
    }
  }
}

uint64_t ResolvableAttributeConfiguration.isDynamic.getter()
{
  uint64_t v1 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResolvableAttributeConfiguration(v0, (uint64_t)v3, type metadata accessor for ResolvableAttributeConfiguration);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  char v5 = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v6 = type metadata accessor for Date();
      goto LABEL_5;
    case 2:
      uint64_t v6 = type metadata accessor for DateInterval();
LABEL_5:
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
      goto LABEL_6;
    case 3:
LABEL_6:
      char v5 = 1;
      break;
    case 4:
      return v5 & 1;
    default:
      char v5 = v3[8] ^ 1;
      break;
  }
  return v5 & 1;
}

uint64_t ResolvableAttributeConfiguration.reduce(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v3);
  char v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)(0, &lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration), (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (double *)((char *)&v24 - v7);
  uint64_t v10 = (double *)((char *)&v24 + *(int *)(v9 + 56) - v7);
  outlined init with copy of ResolvableAttributeConfiguration(v1, (uint64_t)&v24 - v7, type metadata accessor for ResolvableAttributeConfiguration);
  outlined init with copy of ResolvableAttributeConfiguration(a1, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration);
  if (!swift_getEnumCaseMultiPayload())
  {
    double v13 = *v8;
    if (swift_getEnumCaseMultiPayload()) {
      goto LABEL_29;
    }
    char v14 = *((unsigned char *)v8 + 8);
    outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
    if (v14)
    {
      if ((_BYTE)v10[1])
      {
        char v15 = 1;
        double v16 = 0.0;
LABEL_25:
        *(double *)uint64_t v1 = v16;
        *(unsigned char *)(v1 + 8) = v15;
        return swift_storeEnumTagMultiPayload();
      }
      double v16 = *v10;
      double v13 = *v10;
    }
    else
    {
      double v16 = *v10;
      if (*((unsigned char *)v10 + 8)) {
        double v16 = v13;
      }
    }
    char v15 = 0;
    if (v16 >= v13) {
      double v16 = v13;
    }
    goto LABEL_25;
  }
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v10, (uint64_t)v5, type metadata accessor for ResolvableAttributeConfiguration);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v17 = *v5;
      outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
      *(void *)uint64_t v1 = NSCalendarUnitSmallestUnit(*(void *)v8 | v17);
      swift_storeEnumTagMultiPayload();
      uint64_t v12 = (uint64_t)v10;
      return outlined destroy of TimerIntervalTimelineSchedule(v12, type metadata accessor for ResolvableAttributeConfiguration);
    }
  }
  else if (!EnumCaseMultiPayload)
  {
    outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
    outlined init with copy of ResolvableAttributeConfiguration(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
    outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration);
LABEL_5:
    uint64_t v12 = (uint64_t)v8;
    return outlined destroy of TimerIntervalTimelineSchedule(v12, type metadata accessor for ResolvableAttributeConfiguration);
  }
  int v18 = swift_getEnumCaseMultiPayload();
  if (v18 == 3)
  {
LABEL_29:
    uint64_t v12 = (uint64_t)v10;
    return outlined destroy of TimerIntervalTimelineSchedule(v12, type metadata accessor for ResolvableAttributeConfiguration);
  }
  int v19 = v18;
  int v20 = swift_getEnumCaseMultiPayload();
  if (v20 == 3)
  {
    outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
    outlined init with copy of ResolvableAttributeConfiguration(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
    uint64_t v12 = (uint64_t)v8;
    return outlined destroy of TimerIntervalTimelineSchedule(v12, type metadata accessor for ResolvableAttributeConfiguration);
  }
  if (v19 == 2)
  {
    uint64_t v21 = type metadata accessor for DateInterval();
LABEL_28:
    (*(void (**)(double *, uint64_t))(*(void *)(v21 - 8) + 8))(v8, v21);
    goto LABEL_29;
  }
  if (v20 == 2)
  {
    outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
    outlined init with copy of ResolvableAttributeConfiguration(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
    uint64_t v22 = type metadata accessor for DateInterval();
LABEL_33:
    (*(void (**)(double *, uint64_t))(*(void *)(v22 - 8) + 8))(v10, v22);
    goto LABEL_5;
  }
  if (v19 == 1)
  {
    uint64_t v21 = type metadata accessor for Date();
    goto LABEL_28;
  }
  if (v20 == 1)
  {
    outlined destroy of TimerIntervalTimelineSchedule(v1, type metadata accessor for ResolvableAttributeConfiguration);
    outlined init with copy of ResolvableAttributeConfiguration(a1, v1, type metadata accessor for ResolvableAttributeConfiguration);
    uint64_t v22 = type metadata accessor for Date();
    goto LABEL_33;
  }
  return _sypSgWOhTm_11((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration), (uint64_t)type metadata accessor for ResolvableAttributeConfiguration, (uint64_t (*)(void))type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration));
}

void *ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(uint64_t a1, char *a2)
{
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v49 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for TimerIntervalTimelineSchedule(0);
  MEMORY[0x270FA5388](v44);
  unint64_t v45 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  MEMORY[0x270FA5388](v6);
  unint64_t v46 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimerTimelineSchedule(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  double v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PeriodicTimelineSchedule(0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v23 = *a2;
  outlined init with copy of ResolvableAttributeConfiguration(v52, (uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      double v40 = v22;
      uint64_t v41 = v50;
      (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 32))(v13, v40, v50);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v13, v41);
      char v53 = v23;
      char v42 = TimerTimelineSchedule.entries(from:mode:)(v51, &v53);
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v10, type metadata accessor for TimerTimelineSchedule);
      type metadata accessor for _SequenceBox<AnySequence<Date>>();
      int v26 = (void *)swift_allocObject();
      _OWORD v26[2] = v42;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v41);
      break;
    case 2u:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      char v31 = *((unsigned char *)v22 + *(int *)(v30 + 48));
      uint64_t v33 = v46;
      uint64_t v32 = v47;
      unint64_t v34 = v22;
      uint64_t v35 = v48;
      (*(void (**)(char *, uint64_t *, uint64_t))(v47 + 32))(v46, v34, v48);
      uint64_t v36 = (uint64_t)v45;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v45, v33, v35);
      *(unsigned char *)(v36 + *(int *)(v44 + 20)) = v31;
      char v54 = v23;
      Swift::UInt v37 = TimerIntervalTimelineSchedule.entries(from:mode:)(v51, &v54);
      outlined destroy of TimerIntervalTimelineSchedule(v36, type metadata accessor for TimerIntervalTimelineSchedule);
      type metadata accessor for _SequenceBox<AnySequence<Date>>();
      int v26 = (void *)swift_allocObject();
      _OWORD v26[2] = v37;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v35);
      break;
    case 3u:
      uint64_t v38 = *v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v51, v50);
      uint64_t v39 = v49;
      AlignedTimelineSchedule.Entries.init(startDate:alignment:)((uint64_t)v13, v38, v49);
      type metadata accessor for _SequenceBox<AlignedTimelineSchedule.Entries>();
      int v26 = (void *)swift_allocObject();
      uint64_t v27 = (uint64_t)v26 + *(void *)(*MEMORY[0x263F8DCA0] + *v26 + 16);
      long long v28 = (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries;
      uint64_t v29 = v39;
      goto LABEL_5;
    default:
      long double v24 = *(double *)v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v51, v50);
      *(long double *)&v16[*(int *)(v14 + 20)] = v24;
      Date.timeIntervalSince(_:)();
      fmod(v25, v24);
      static Date.+ infix(_:_:)();
      *(long double *)&v19[*(int *)(v17 + 20)] = v24;
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v16, type metadata accessor for PeriodicTimelineSchedule);
      type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>();
      int v26 = (void *)swift_allocObject();
      uint64_t v27 = (uint64_t)v26 + *(void *)(*MEMORY[0x263F8DCA0] + *v26 + 16);
      long long v28 = type metadata accessor for PeriodicTimelineSchedule.Entries;
      uint64_t v29 = (uint64_t)v19;
LABEL_5:
      outlined init with take of ResolvableAttributeConfiguration.Schedule(v29, v27, v28);
      break;
  }
  return v26;
}

void *protocol witness for TimelineSchedule.entries(from:mode:) in conformance ResolvableAttributeConfiguration.Schedule@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  double result = ResolvableAttributeConfiguration.Schedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableAttributeConfiguration.CodingKeys()
{
  uint64_t result = 0x6C61767265746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x79616C6564;
      break;
    case 2:
      uint64_t result = 0x636F6C436C6C6177;
      break;
    case 3:
      uint64_t result = 0x6E656D6E67696C61;
      break;
    case 4:
      uint64_t result = 0x72656D6974;
      break;
    case 5:
      uint64_t result = 0x776F64746E756F63;
      break;
    case 6:
      uint64_t result = 0x746E4972656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableAttributeConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableAttributeConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableAttributeConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableAttributeConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResolvableAttributeConfiguration.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v39 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v39 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResolvableAttributeConfiguration(v2, (uint64_t)v23, type metadata accessor for ResolvableAttributeConfiguration);
  uint64_t result = swift_getEnumCaseMultiPayload();
  uint64_t v25 = v46;
  switch((int)result)
  {
    case 1:
      uint64_t v29 = v39;
      uint64_t v30 = v23;
      uint64_t v31 = v40;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v8, v30, v40);
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      LOBYTE(v47) = 4;
      lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      uint64_t v32 = v45;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v32);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v8, v31);
      break;
    case 2:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      unint64_t v34 = v41;
      uint64_t v33 = v42;
      uint64_t v35 = v23;
      uint64_t v36 = v43;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v35, v43);
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      LOBYTE(v47) = 5;
      uint64_t v37 = v45;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v25)
      {
        LOBYTE(v47) = 6;
        lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v37);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v36);
      break;
    case 3:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      LOBYTE(v47) = 2;
      uint64_t v38 = v45;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v25)
      {
        LOBYTE(v47) = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v17, v38);
      break;
    case 4:
      return result;
    default:
      uint64_t v26 = *(void *)v23;
      char v27 = v23[8];
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      LOBYTE(v47) = 0;
      uint64_t v28 = v45;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v25)
      {
        uint64_t v47 = v26;
        char v48 = v27;
        char v49 = 1;
        type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for Double?);
        lazy protocol witness table accessor for type Double? and conformance <A> A?();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v20, v28);
      break;
  }
  return result;
}

uint64_t ResolvableAttributeConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  _ss11AnySequenceVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for DateInterval?, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v54 = (uint64_t)&v50 - v5;
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss11AnySequenceVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], v3);
  MEMORY[0x270FA5388](v8 - 8);
  BOOL v59 = (char *)&v50 - v9;
  uint64_t v58 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableAttributeConfiguration.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v13 = v12;
  uint64_t v57 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = a1[3];
  uint64_t v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
  uint64_t v20 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_3;
  }
  uint64_t v50 = v11;
  uint64_t v22 = v58;
  uint64_t v21 = (uint64_t)v59;
  uint64_t v61 = v18;
  uint64_t v23 = v57;
  char v68 = 0;
  char v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v24)
  {
    char v62 = 1;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v29 = v15;
    char v37 = v36;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v13);
    uint64_t v38 = (uint64_t)v61;
    *uint64_t v61 = v28;
    *(unsigned char *)(v38 + 8) = v37 & 1;
    goto LABEL_12;
  }
  char v67 = 2;
  char v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v15;
  if ((v27 & 1) == 0)
  {
    char v66 = 4;
    lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v31 = v21;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v32 = v55;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v21, 1, v22) == 1)
    {
      _s10Foundation4DateVSgWOhTm_2(v21, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_ss11AnySequenceVy10Foundation4DateVGMaTm_1);
      char v65 = 5;
      char v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      if (v33 == 2)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v13);
        uint64_t v34 = v56;
        uint64_t v35 = (uint64_t)v60;
        uint64_t v38 = (uint64_t)v61;
LABEL_14:
        swift_storeEnumTagMultiPayload();
        outlined init with take of ResolvableAttributeConfiguration.Schedule(v38, v34, type metadata accessor for ResolvableAttributeConfiguration);
        uint64_t v25 = v35;
        return __swift_destroy_boxed_opaque_existential_1(v25);
      }
      char v64 = 6;
      lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
      uint64_t v44 = v53;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v34 = v56;
      uint64_t v45 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v54, 1, v44) == 1)
      {
        _s10Foundation4DateVSgWOhTm_2(v54, (uint64_t)&lazy cache variable for type metadata for DateInterval?, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0], (uint64_t (*)(void))_ss11AnySequenceVy10Foundation4DateVGMaTm_1);
        goto LABEL_20;
      }
      LODWORD(v59) = v33 & 1;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v13);
      uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
      uint64_t v47 = v51;
      v46(v51, v54, v44);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v49 = *(int *)(v48 + 48);
      uint64_t v38 = (uint64_t)v61;
      v46((char *)v61, (uint64_t)v47, v44);
      *(unsigned char *)(v38 + v49) = (_BYTE)v59;
LABEL_13:
      uint64_t v35 = (uint64_t)v60;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v13);
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
    uint64_t v43 = v50;
    v42(v50, v31, v22);
    uint64_t v38 = (uint64_t)v61;
    v42((char *)v61, (uint64_t)v43, v22);
LABEL_12:
    uint64_t v34 = v56;
    goto LABEL_13;
  }
  char v63 = 3;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if ((v40 & 1) == 0)
  {
    uint64_t v41 = v39;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v13);
    uint64_t v38 = (uint64_t)v61;
    *uint64_t v61 = v41;
    goto LABEL_12;
  }
LABEL_20:
  lazy protocol witness table accessor for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors();
  swift_allocError();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v13);
LABEL_3:
  uint64_t v25 = (uint64_t)v60;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableAttributeConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableAttributeConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableAttributeConfiguration(void *a1)
{
  return ResolvableAttributeConfiguration.encode(to:)(a1);
}

uint64_t TimelineSchedule.legacyInvalidationConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InvalidationConfigurtaionProvider);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v11, (uint64_t)v13);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    uint64_t v8 = type metadata accessor for ResolvableAttributeConfiguration(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    _s10Foundation4DateVSgWOhTm_2((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for InvalidationConfigurtaionProvider?, (uint64_t)&lazy cache variable for type metadata for InvalidationConfigurtaionProvider, (uint64_t)&protocol descriptor for InvalidationConfigurtaionProvider, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    uint64_t v10 = type metadata accessor for ResolvableAttributeConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

uint64_t ResolvableAttributeConfiguration.Schedule.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ResolvableAttributeConfiguration(v2, (uint64_t)v6, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v6, v11);
      type metadata accessor for ResolvableAttributeConfiguration(0);
      break;
    case 2u:
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v8 = *(int *)(v7 + 48);
      char v9 = *((unsigned char *)v6 + v8);
      uint64_t v10 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, v6, v10);
      *(unsigned char *)(a1 + v8) = v9;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      break;
    case 3u:
      *(void *)a1 = *v6;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      break;
    default:
      *(void *)a1 = *v6;
      *(unsigned char *)(a1 + 8) = 0;
      type metadata accessor for ResolvableAttributeConfiguration(0);
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t TimeDataFormatting.Resolvable.invalidationConfiguration.getter(uint64_t a1)
{
  LOBYTE(v4[0]) = 1;
  TimeDataFormatting.Resolvable.representation(for:)((uint64_t)v4, a1, v6);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v4, (uint64_t)v7);
    uint64_t v1 = v8;
    uint64_t v2 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    _s10Foundation4DateVSgWOhTm_2((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation?, (uint64_t)&lazy cache variable for type metadata for ConfigurationBasedResolvableStringAttributeRepresentation, (uint64_t)&protocol descriptor for ConfigurationBasedResolvableStringAttributeRepresentation, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    type metadata accessor for ResolvableAttributeConfiguration(0);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t ReducedTimelineSchedule<>.invalidationConfiguration.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ResolvableAttributeConfiguration(0);
  double v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void, uint64_t, double))(a2 + 8))(*(void *)(a1 + 16), a2, v7);
  (*(void (**)(void, uint64_t))(a3 + 8))(*(void *)(a1 + 24), a3);
  ResolvableAttributeConfiguration.reduce(_:)((uint64_t)v9);
  return outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v9, type metadata accessor for ResolvableAttributeConfiguration);
}

uint64_t protocol witness for InvalidationConfigurtaionProvider.invalidationConfiguration.getter in conformance <> ReducedTimelineSchedule<A, B>(uint64_t a1, uint64_t a2)
{
  return ReducedTimelineSchedule<>.invalidationConfiguration.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16));
}

uint64_t protocol witness for ResolvableStringAttribute.schedule.getter in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v13 = v12 - 8;
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v17(v11, v2, v5, v14);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(char *, uint64_t, uint64_t))v17)(v8, v2 + *(int *)(v18 + 36), v5);
  DateInterval.init(start:end:)();
  char v19 = *(unsigned char *)(v2 + *(int *)(a1 + 20));
  uint64_t v20 = *(int *)(v13 + 56);
  uint64_t v21 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(a2, v16, v21);
  *(unsigned char *)(a2 + v20) = v19;
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = type metadata accessor for ResolvableAttributeConfiguration.Schedule(0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a2, 0, 1, v22);
}

uint64_t specialized static ResolvableAttributeConfiguration.Schedule.Alignment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x270FA5388](v3);
  char v40 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char **)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v40 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v40 - v15;
  MEMORY[0x270FA5388](v17);
  char v19 = (double *)((char *)&v40 - v18);
  type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)(0, &lazy cache variable for type metadata for (ResolvableAttributeConfiguration.Schedule.Alignment, ResolvableAttributeConfiguration.Schedule.Alignment), (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v24 = (char **)((char *)&v40 + *(int *)(v23 + 56) - v21);
  outlined init with copy of ResolvableAttributeConfiguration(a1, (uint64_t)&v40 - v21, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
  outlined init with copy of ResolvableAttributeConfiguration(v45, (uint64_t)v24, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v16, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v27 = v41;
        uint64_t v26 = v42;
        (*(void (**)(char *, void *, uint64_t))(v41 + 32))(v7, v24, v42);
        char v28 = static Date.== infix(_:_:)();
        uint64_t v29 = *(void (**)(char *, uint64_t))(v27 + 8);
        v29(v7, v26);
        v29(v16, v26);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);
      goto LABEL_17;
    case 2u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v13, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v31 = *(int *)(v30 + 48);
      char v32 = v13[v31];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v33 = *((unsigned char *)v24 + v31);
        uint64_t v35 = v43;
        uint64_t v34 = v44;
        char v36 = v40;
        (*(void (**)(char *, void *, uint64_t))(v43 + 32))(v40, v24, v44);
        char v37 = static DateInterval.== infix(_:_:)();
        uint64_t v38 = *(void (**)(char *, uint64_t))(v35 + 8);
        v38(v36, v34);
        v38(v13, v34);
        if (v37)
        {
          outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
          char v28 = v32 ^ v33 ^ 1;
          return v28 & 1;
        }
        outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v44);
LABEL_17:
        _sypSgWOhTm_11((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for (ResolvableAttributeConfiguration.Schedule.Alignment, ResolvableAttributeConfiguration.Schedule.Alignment), (uint64_t)type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment, (uint64_t (*)(void))type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration));
      }
      char v28 = 0;
      return v28 & 1;
    case 3u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_17;
      }
      BOOL v25 = *v10 == *v24;
      goto LABEL_11;
    default:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v19, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_17;
      }
      BOOL v25 = *v19 == *(double *)v24;
LABEL_11:
      char v28 = v25;
LABEL_14:
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
      return v28 & 1;
  }
}

uint64_t specialized static ResolvableAttributeConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v41 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ResolvableAttributeConfiguration(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char **)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v41 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v41 - v15;
  MEMORY[0x270FA5388](v17);
  char v19 = (double *)((char *)&v41 - v18);
  type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)(0, &lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration), (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v24 = (char *)&v41 + *(int *)(v23 + 56) - v21;
  outlined init with copy of ResolvableAttributeConfiguration(a1, (uint64_t)&v41 - v21, type metadata accessor for ResolvableAttributeConfiguration);
  outlined init with copy of ResolvableAttributeConfiguration(v46, (uint64_t)v24, type metadata accessor for ResolvableAttributeConfiguration);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v16, type metadata accessor for ResolvableAttributeConfiguration);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v28 = v42;
        uint64_t v27 = v43;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v7, v24, v43);
        char v29 = static Date.== infix(_:_:)();
        uint64_t v30 = *(void (**)(char *, uint64_t))(v28 + 8);
        v30(v7, v27);
        v30(v16, v27);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v43);
      goto LABEL_18;
    case 2u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v13, type metadata accessor for ResolvableAttributeConfiguration);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      uint64_t v32 = *(int *)(v31 + 48);
      char v33 = v13[v32];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v45);
LABEL_18:
        _sypSgWOhTm_11((uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration), (uint64_t)type metadata accessor for ResolvableAttributeConfiguration, (uint64_t (*)(void))type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration));
        goto LABEL_19;
      }
      char v34 = v24[v32];
      uint64_t v36 = v44;
      uint64_t v35 = v45;
      char v37 = v41;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v24, v45);
      char v38 = static DateInterval.== infix(_:_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v36 + 8);
      v39(v37, v35);
      v39(v13, v35);
      if ((v38 & 1) == 0) {
        goto LABEL_24;
      }
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration);
      char v29 = v33 ^ v34 ^ 1;
      return v29 & 1;
    case 3u:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v10, type metadata accessor for ResolvableAttributeConfiguration);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_18;
      }
      char v29 = *v10 == *(void *)v24;
LABEL_13:
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration);
      return v29 & 1;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_15;
      }
      goto LABEL_18;
    default:
      outlined init with copy of ResolvableAttributeConfiguration((uint64_t)v22, (uint64_t)v19, type metadata accessor for ResolvableAttributeConfiguration);
      double v25 = *v19;
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_18;
      }
      char v26 = v24[8];
      if ((_BYTE)v19[1])
      {
        if (!v24[8]) {
          goto LABEL_24;
        }
LABEL_15:
        outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration);
        char v29 = 1;
        return v29 & 1;
      }
      if (v25 != *(double *)v24) {
        char v26 = 1;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_15;
      }
LABEL_24:
      outlined destroy of TimerIntervalTimelineSchedule((uint64_t)v22, type metadata accessor for ResolvableAttributeConfiguration);
LABEL_19:
      char v29 = 0;
      return v29 & 1;
  }
}

uint64_t outlined init with copy of ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _SequenceBox<AlignedTimelineSchedule.Entries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<AlignedTimelineSchedule.Entries>)
  {
    type metadata accessor for AlignedTimelineSchedule.Entries();
    lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for AlignedTimelineSchedule.Entries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<AlignedTimelineSchedule.Entries>);
    }
  }
}

uint64_t outlined init with take of ResolvableAttributeConfiguration.Schedule(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _SequenceBox<AnySequence<Date>>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<AnySequence<Date>>)
  {
    _ss11AnySequenceVy10Foundation4DateVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, MEMORY[0x263F07490], MEMORY[0x263F8DB98]);
    lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>();
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<AnySequence<Date>>);
    }
  }
}

void type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>)
  {
    type metadata accessor for PeriodicTimelineSchedule.Entries(255);
    lazy protocol witness table accessor for type AlignedTimelineSchedule.Entries and conformance AlignedTimelineSchedule.Entries(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, (void (*)(uint64_t))type metadata accessor for PeriodicTimelineSchedule.Entries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Double? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance <A> A?)
  {
    type metadata accessor for Any?(255, (unint64_t *)&lazy cache variable for type metadata for Double?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableAttributeConfiguration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ResolvableAttributeConfiguration.CodingKeys and conformance ResolvableAttributeConfiguration.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA73470, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors;
  if (!lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Errors and conformance ResolvableAttributeConfiguration.Errors);
  }
  return result;
}

uint64_t dispatch thunk of ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *assignWithCopy for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  return assignWithCopy for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration);
}

unsigned char *assignWithTake for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  return assignWithTake for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ResolvableAttributeConfiguration(a1, a2, a3, (uint64_t)"\t");
}

void *initializeBufferWithCopyOfBuffer for ResolvableAttributeConfiguration.Schedule(void *a1, void *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for DateInterval();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ResolvableAttributeConfiguration.Schedule(uint64_t a1)
{
  type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for DateInterval();
  }
  else
  {
    if (result != 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for Date();
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

unsigned char *initializeWithCopy for ResolvableAttributeConfiguration.Schedule(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithCopy for ResolvableAttributeConfiguration.Schedule(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TimerIntervalTimelineSchedule((uint64_t)a1, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
    uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of TimerIntervalTimelineSchedule(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *initializeWithTake for ResolvableAttributeConfiguration.Schedule(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithTake for ResolvableAttributeConfiguration.Schedule(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TimerIntervalTimelineSchedule((uint64_t)a1, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
    uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableAttributeConfiguration.Schedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245E35FE8);
}

uint64_t sub_245E35FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvableAttributeConfiguration.Schedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245E36068);
}

uint64_t sub_245E36068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration.Schedule()
{
  uint64_t result = type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ResolvableAttributeConfiguration.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245E36200);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvableAttributeConfiguration.Errors()
{
  return &type metadata for ResolvableAttributeConfiguration.Errors;
}

unsigned char *storeEnumTagSinglePayload for ResolvableAttributeConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E36304);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableAttributeConfiguration.CodingKeys()
{
  return &unk_26FA73470;
}

void *initializeBufferWithCopyOfBuffer for ResolvableAttributeConfiguration(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for DateInterval();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for ResolvableAttributeConfiguration(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for DateInterval();
  }
  else
  {
    if (result != 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for Date();
  }
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

unsigned char *initializeWithCopy for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithCopy for ResolvableAttributeConfiguration.Schedule.Alignment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  return assignWithCopy for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
}

unsigned char *assignWithCopy for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1 != a2)
  {
    outlined destroy of TimerIntervalTimelineSchedule((uint64_t)a1, a4);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unsigned char *initializeWithTake for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    type metadata accessor for (interval: DateInterval, countdown: Bool)();
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithTake for ResolvableAttributeConfiguration.Schedule.Alignment(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  return assignWithTake for ResolvableAttributeConfiguration(a1, a2, a3, type metadata accessor for ResolvableAttributeConfiguration.Schedule.Alignment);
}

unsigned char *assignWithTake for ResolvableAttributeConfiguration(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a1 != a2)
  {
    outlined destroy of TimerIntervalTimelineSchedule((uint64_t)a1, a4);
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = type metadata accessor for DateInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      type metadata accessor for (interval: DateInterval, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration.Schedule.Alignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ResolvableAttributeConfiguration(a1, a2, a3, MEMORY[0x263F8CF70] + 64);
}

uint64_t type metadata completion function for ResolvableAttributeConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[4] = a4;
  uint64_t result = type metadata accessor for Date();
  if (v5 <= 0x3F)
  {
    _OWORD v7[5] = *(void *)(result - 8) + 64;
    uint64_t result = type metadata accessor for DateInterval();
    if (v6 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v7[6] = v7;
      v7[7] = MEMORY[0x263F8CF70] + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t specialized ResolvableAttributeConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636F6C436C6C6177 && a2 == 0xE90000000000006BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72656D6974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746E4972656D6974 && a2 == 0xED00006C61767265)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void type metadata accessor for (ResolvableAttributeConfiguration, ResolvableAttributeConfiguration)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void static PreviewColorSchemeTraitKey.defaultValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

ValueMetadata *type metadata accessor for PreviewColorSchemeTraitKey()
{
  return &type metadata for PreviewColorSchemeTraitKey;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_27:
    uint64_t v16 = *(void *)(v3 + 48) + 16 * v12;
    uint64_t v17 = *(void *)(v3 + 56) + 40 * v12;
    float64x2_t v24 = *(float64x2_t *)(v17 + 16);
    float64x2_t v25 = *(float64x2_t *)v17;
    int v18 = *(unsigned __int8 *)(v17 + 32);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)v16, *(unsigned char *)(v16 + 8));
    if ((v19 & 1) == 0) {
      return 0;
    }
    uint64_t v20 = *(void *)(a2 + 56) + 40 * result;
    float64x2_t v21 = *(float64x2_t *)v20;
    if (*(unsigned char *)(v20 + 32))
    {
      int32x4_t v22 = (int32x4_t)vceqq_f64(v21, v25);
      int32x4_t v23 = (int32x4_t)vceqq_f64(*(float64x2_t *)(v20 + 16), v24);
      if (*(unsigned char *)(v20 + 32) == 1)
      {
        uint64_t result = 0;
        if (v18 != 1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v18 != 2) {
          return result;
        }
      }
      if ((~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32(v22, v23)), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)return result; {
    }
      }
    else
    {
      if (v18) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v21.f64[0] == v25.f64[0];
      }
      if (!v10) {
        return 0;
      }
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v13 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_26;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14) {
    goto LABEL_26;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_26:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_27;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_26;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

BOOL static ScrollAnchorStorage.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ScrollAnchorStorage.Role.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static ScrollAnchorStorage.Role.allCases.getter()
{
  return &outlined read-only object #0 of static ScrollAnchorStorage.Role.allCases.getter;
}

Swift::Int ScrollAnchorStorage.Role.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ScrollAnchorStorage.Role(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ScrollAnchorStorage.Role;
}

uint64_t ScrollAnchorStorage.anchors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ScrollAnchorStorage.anchors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*ScrollAnchorStorage.anchors.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollAnchorStorage.defaultValue.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ScrollAnchorStorage.defaultValue.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 8) = result;
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t (*ScrollAnchorStorage.defaultValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollAnchorStorage.isEmpty.getter()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  else {
    return v0[24];
  }
}

double ScrollAnchorStorage.initialOffset.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(0);
}

uint64_t ScrollAnchorStorage.initialOffset.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(0, a1, a2);
}

uint64_t (*ScrollAnchorStorage.initialOffset.modify(void *a1))(double *a1, uint64_t a2)
{
  BOOL v2 = v1;
  a1[2] = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  int v7 = *((unsigned __int8 *)v2 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    if (v9)
    {
      BOOL v10 = (long long *)(*(void *)(v4 + 56) + 16 * v8);
      unint64_t v11 = (uint64_t *)v10 + 1;
LABEL_7:
      uint64_t v5 = *(void *)v10;
      uint64_t v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    BOOL v10 = &static UnitPoint.topLeading;
    unint64_t v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.initialOffset.modify;
}

uint64_t ScrollAnchorStorage.initialOffset.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 0);
}

uint64_t ScrollAnchorStorage.sizeChanges.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(1, a1, a2);
}

uint64_t (*ScrollAnchorStorage.sizeChanges.modify(void *a1))(double *a1, uint64_t a2)
{
  BOOL v2 = v1;
  a1[2] = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  int v7 = *((unsigned __int8 *)v2 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(1);
    if (v9)
    {
      BOOL v10 = (long long *)(*(void *)(v4 + 56) + 16 * v8);
      unint64_t v11 = (uint64_t *)v10 + 1;
LABEL_7:
      uint64_t v5 = *(void *)v10;
      uint64_t v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    BOOL v10 = &static UnitPoint.topLeading;
    unint64_t v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.sizeChanges.modify;
}

uint64_t ScrollAnchorStorage.sizeChanges.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 1);
}

uint64_t key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v7 = *a1;
  double v8 = a1[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *a2;
  *a2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a5, isUniquelyReferenced_nonNull_native, v7, v8);
  *a2 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t ScrollAnchorStorage.alignment.setter(double a1, double a2)
{
  return ScrollAnchorStorage.initialOffset.setter(2, a1, a2);
}

uint64_t ScrollAnchorStorage.initialOffset.setter(char a1, double a2, double a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, isUniquelyReferenced_nonNull_native, a2, a3);
  *uint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t (*ScrollAnchorStorage.alignment.modify(void *a1))(double *a1, uint64_t a2)
{
  BOOL v2 = v1;
  a1[2] = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  int v7 = *((unsigned __int8 *)v2 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(2);
    if (v9)
    {
      BOOL v10 = (long long *)(*(void *)(v4 + 56) + 16 * v8);
      uint64_t v11 = (uint64_t *)v10 + 1;
LABEL_7:
      uint64_t v5 = *(void *)v10;
      uint64_t v6 = *v11;
      goto LABEL_8;
    }
  }
  if (v7)
  {
    BOOL v10 = &static UnitPoint.topLeading;
    uint64_t v11 = (uint64_t *)&static UnitPoint.topLeading + 1;
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    goto LABEL_7;
  }
LABEL_8:
  *a1 = v5;
  a1[1] = v6;
  return ScrollAnchorStorage.alignment.modify;
}

uint64_t ScrollAnchorStorage.alignment.modify(double *a1, uint64_t a2)
{
  return ScrollAnchorStorage.initialOffset.modify(a1, a2, 2);
}

uint64_t ScrollAnchorStorage.initialOffset.modify(double *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (uint64_t *)*((void *)a1 + 2);
  double v5 = *a1;
  double v6 = a1[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, isUniquelyReferenced_nonNull_native, v5, v6);
  *uint64_t v4 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t ScrollAnchorStorage.updateRole(_:anchor:)(unsigned char *a1, double a2, double a3)
{
  if (*a1)
  {
    if (*a1 == 1)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      double v7 = a2;
      double v8 = a3;
      char v9 = 1;
    }
    else
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      double v7 = a2;
      double v8 = a3;
      char v9 = 2;
    }
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    double v7 = a2;
    double v8 = a3;
    char v9 = 0;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, isUniquelyReferenced_nonNull_native, v7, v8);
  *uint64_t v3 = v11;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ScrollAnchorStorage.reset()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0;
  *(void *)uint64_t v0 = v1;
  *(unsigned char *)(v0 + 24) = 1;
}

uint64_t EnvironmentValues.scrollAnchors.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void (*EnvironmentValues.scrollAnchors.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  v3[8] = 0;
  return EnvironmentValues.scrollAnchors.modify;
}

void EnvironmentValues.scrollAnchors.modify(uint64_t **a1, char a2)
{
  BOOL v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  char v6 = *((unsigned char *)*a1 + 24);
  double v7 = (uint64_t *)(*a1)[7];
  uint64_t v8 = *v7;
  if (a2)
  {
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v7, v3, v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v7[1])
    {
      uint64_t v9 = *(void *)v2[7];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v9);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v7, v3, v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v7[1])
    {
      uint64_t v10 = *(void *)v2[7];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v10);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v2);
}

uint64_t EnvironmentValues.initialOffsetScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(0);
}

uint64_t EnvironmentValues.sizeChangesScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(1);
}

uint64_t EnvironmentValues.alignmentScrollAnchor.getter()
{
  return EnvironmentValues.initialOffsetScrollAnchor.getter(2);
}

uint64_t EnvironmentValues.initialOffsetScrollAnchor.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)v12);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v12);
  }
  swift_release_n();
  uint64_t v5 = v12[0];
  uint64_t v6 = v12[1];
  int v7 = v13;
  if (*(void *)(v12[0] + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v9)
    {
      uint64_t v10 = (long long *)(*(void *)(v5 + 56) + 16 * v8);
LABEL_10:
      uint64_t v6 = *(void *)v10;
      goto LABEL_11;
    }
  }
  if (v7)
  {
    uint64_t v10 = &static UnitPoint.topLeading;
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    goto LABEL_10;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ScrollAnchorsKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v2 = byte_26B0E3CF0;
  *(void *)a1 = static EnvironmentValues.ScrollAnchorsKey.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_26B0E3CE0;
  *(unsigned char *)(a1 + 24) = v2;

  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type [ScrollAnchorStorage.Role] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A])
  {
    type metadata accessor for [ScrollAnchorStorage.Role]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ScrollAnchorStorage.Role] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ScrollAnchorStorage.Role]()
{
  if (!lazy cache variable for type metadata for [ScrollAnchorStorage.Role])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ScrollAnchorStorage.Role]);
    }
  }
}

void sub_245E38230(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_245E38248(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 0);
}

void sub_245E38264(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void keypath_getTm(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double (*a4)(uint64_t, uint64_t, uint64_t, void)@<X3>, uint64_t a5@<X8>)
{
  *(double *)a5 = a4(a1, a2, a3, a4);
  *(void *)(a5 + 8) = v6;
}

uint64_t sub_245E382CC(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 1);
}

void sub_245E382E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_245E38300(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ScrollAnchorStorage.initialOffset : ScrollAnchorStorage(a1, a2, a3, a4, 2);
}

unsigned char *storeEnumTagSinglePayload for ScrollAnchorStorage.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E383F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollAnchorStorage.Role()
{
  return &type metadata for ScrollAnchorStorage.Role;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollAnchorsKey()
{
  return &type metadata for EnvironmentValues.ScrollAnchorsKey;
}

uint64_t dispatch thunk of InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

BOOL CGAffineTransform.isRectilinear.getter()
{
  if (v0[1] == 0.0 && v0[2] == 0.0) {
    return 1;
  }
  if (*v0 == 0.0) {
    return v0[3] == 0.0;
  }
  return 0;
}

BOOL CGAffineTransform.isTranslation.getter()
{
  return *v0 == 1.0 && v0[1] == 0.0 && v0[2] == 0.0 && v0[3] == 1.0;
}

double CGAffineTransform.scale.getter()
{
  double v1 = *v0 * *v0 + v0[1] * v0[1];
  double v2 = v0[2] * v0[2] + v0[3] * v0[3];
  BOOL v3 = v2 == 1.0 && v1 == 1.0;
  double result = (sqrt(v1) + sqrt(v2)) * 0.5;
  if (v3) {
    return 1.0;
  }
  return result;
}

void __swiftcall CGAffineTransform.init(rotation:)(CGAffineTransform *__return_ptr retstr, SwiftUI::Angle rotation)
{
  __double2 v3 = __sincos_stret(rotation.radians);
  retstr->CGFloat a = v3.__cosval;
  retstr->CGFloat b = v3.__sinval;
  retstr->CGFloat c = -v3.__sinval;
  retstr->CGFloat d = v3.__cosval;
  retstr->tdouble x = 0.0;
  retstr->tCGFloat y = 0.0;
}

BOOL CGAffineTransform.isUniform.getter()
{
  double v1 = v0[1];
  if (v1 == 0.0 && v0[2] == 0.0)
  {
    double v2 = *v0;
    double v3 = v0[3];
  }
  else
  {
    double v2 = *v0;
    if (*v0 != 0.0) {
      return 0;
    }
    double v3 = v0[3];
    if (v3 != 0.0) {
      return 0;
    }
  }
  if (v2 == v3) {
    return v1 == v0[2];
  }
  return 0;
}

void __swiftcall CGAffineTransform.rotated(by:)(CGAffineTransform *__return_ptr retstr, SwiftUI::Angle by)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = *((_OWORD *)v2 + 1);
  long long v10 = *(_OWORD *)v2;
  CGFloat v4 = v2[4];
  CGFloat v5 = v2[5];
  __double2 v6 = __sincos_stret(by.radians);
  t1.CGFloat a = v6.__cosval;
  t1.CGFloat b = v6.__sinval;
  t1.CGFloat c = -v6.__sinval;
  t1.CGFloat d = v6.__cosval;
  t1.tdouble x = 0.0;
  t1.tCGFloat y = 0.0;
  *(_OWORD *)&t2.CGFloat a = v10;
  *(_OWORD *)&t2.CGFloat c = v9;
  t2.tdouble x = v4;
  t2.tCGFloat y = v5;
  CGAffineTransformConcat(&v11, &t1, &t2);
  long long v7 = *(_OWORD *)&v11.c;
  long long v8 = *(_OWORD *)&v11.tx;
  *(_OWORD *)&retstr->CGFloat a = *(_OWORD *)&v11.a;
  *(_OWORD *)&retstr->CGFloat c = v7;
  *(_OWORD *)&retstr->tdouble x = v8;
}

double *CGAffineTransform.encode(to:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  long long v4[2] = v1[2];
  return closure #1 in CGAffineTransform.encode(to:)((double *)v4, a1);
}

double *closure #1 in CGAffineTransform.encode(to:)(double *result, void *a2)
{
  double v3 = result;
  uint64_t v4 = 0;
  while (1)
  {
    double v6 = v3[v4];
    if (v4 == 3 || v4 == 0) {
      double v8 = 1.0;
    }
    else {
      double v8 = 0.0;
    }
    if (v6 == v8) {
      goto LABEL_4;
    }
    double v9 = fabs(v6);
    char v10 = v4 * 8 + 5;
    if (v9 >= 65536.0) {
      char v10 = v4 * 8 + 1;
    }
    char v11 = v10 + 8;
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    if (v12 >= v13)
    {
      double result = (double *)(v12 + 1);
      if (__OFADD__(v12, 1)) {
        goto LABEL_32;
      }
      if (v13 < (uint64_t)result)
      {
        double v18 = v9;
        char v17 = v11;
        uint64_t v16 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        char v11 = v17;
        double v9 = v18;
      }
      else
      {
        a2[1] = result;
        uint64_t v16 = (unsigned char *)(*a2 + v12);
      }
      unsigned char *v16 = v11 & 0x7D;
    }
    else
    {
      *(unsigned char *)(*a2 + v12) = v11;
      a2[1] = v12 + 1;
    }
    if (v9 < 65536.0) {
      break;
    }
    uint64_t v15 = a2[1];
    double result = (double *)(v15 + 8);
    if (__OFADD__(v15, 8)) {
      goto LABEL_31;
    }
    if (a2[2] < (uint64_t)result)
    {
      double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *double result = v6;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v15) = v6;
    }
LABEL_4:
    if (++v4 == 6) {
      return result;
    }
  }
  uint64_t v14 = a2[1];
  double result = (double *)(v14 + 4);
  if (!__OFADD__(v14, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      double result = (double *)(*a2 + v14);
    }
    else
    {
      double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    float v5 = v6;
    *(float *)double result = v5;
    goto LABEL_4;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

double CGAffineTransform.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = 0x3FF0000000000000uLL;
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = 0x3FF0000000000000;
  long long v10 = 0uLL;
  closure #1 in CGAffineTransform.init(from:)((unint64_t)&v8, a1, &v7);
  if (!v2)
  {
    double result = *(double *)&v8;
    long long v5 = v9;
    long long v6 = v10;
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

unint64_t closure #1 in CGAffineTransform.init(from:)(unint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  unint64_t v8 = result;
  while (1)
  {
    unint64_t v10 = a2[3];
    if (v10)
    {
      unint64_t v11 = a2[4];
      if (v6 < v11) {
        goto LABEL_12;
      }
      if (v11 < v6) {
        break;
      }
      a2[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_37;
    }
    unint64_t v10 = result;
    if (result <= 7) {
      break;
    }
LABEL_12:
    if (v10 <= 0x37)
    {
      uint64_t v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x245E38B2CLL);
      }
      if (v12 < 0) {
        goto LABEL_40;
      }
      unint64_t v13 = v10 & 7;
      if (v13 == 5)
      {
        uint64_t v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1)) {
          break;
        }
        float v17 = *v16;
        a2[1] = v16 + 1;
        double v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_41;
          }
          uint64_t v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
          if (v15 < (unint64_t)v14 + result) {
            break;
          }
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1) {
            break;
          }
          uint64_t v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1)) {
          break;
        }
        double v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          break;
        case 1uLL:
          unint64_t v9 = a2[1] + 8;
          if (a2[2] >= v9) {
            goto LABEL_4;
          }
          goto LABEL_36;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          unint64_t v9 = a2[1] + result;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a2[1] + 4;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2]) {
      goto LABEL_38;
    }
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  uint64_t v4 = swift_allocError();
  double result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CGAffineTransform(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  long long v4[2] = v1[2];
  return closure #1 in CGAffineTransform.encode(to:)((double *)v4, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance CGAffineTransform@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v8 = 0x3FF0000000000000uLL;
  *(void *)&long long v9 = 0;
  *((void *)&v9 + 1) = 0x3FF0000000000000;
  long long v10 = 0uLL;
  closure #1 in CGAffineTransform.init(from:)((unint64_t)&v8, a1, &v7);
  if (!v2)
  {
    double result = *(double *)&v8;
    long long v5 = v9;
    long long v6 = v10;
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

double specialized static _ShapeView._makeView(view:inputs:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_7:
    *(void *)a2 = MEMORY[0x263F8EE78];
    int v9 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = v9;
    return result;
  }
  long long v6 = (ValueMetadata **)(v3 + 32);
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  while (*v7 != &type metadata for DisplayList.Key)
  {
    v7 += 2;
    if (!--v8)
    {
      while (*v6 != &type metadata for ViewRespondersKey)
      {
        v6 += 2;
        if (!--v4) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  long long v10 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v13 = *(_OWORD *)a1;
  long long v12 = *(_OWORD *)(a1 + 16);
  long long v26 = *(_OWORD *)(a1 + 32);
  _OWORD v23[2] = *(_OWORD *)(a1 + 32);
  v23[3] = v11;
  v23[4] = *(_OWORD *)(a1 + 64);
  int v24 = *(_DWORD *)(a1 + 80);
  v23[0] = v13;
  v23[1] = v12;
  LOBYTE(v20) = 0;
  swift_beginAccess();
  unsigned int v14 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)v23, (unsigned __int8 *)&v20, 0x100000000);
  swift_endAccess();
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v16 = specialized static Animatable.makeAnimatable(value:inputs:)(OffsetAttribute2, (uint64_t)v25);
  *(void *)&v23[0] = __PAIR64__(AGGraphCreateOffsetAttribute2(), v16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
  lazy protocol witness table accessor for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init();
  unsigned int v17 = Attribute.init<A>(body:value:flags:update:)();
  specialized static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(v17, a1, v14, 0, &v21);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v18 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_19;
    }
LABEL_16:
    if ((BYTE4(v26) & 2) != 0)
    {
      unsigned int v20 = v17;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(0, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<AnyShape>>, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
      lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>();
      HIDWORD(v22) = Attribute.init<A>(body:value:flags:update:)();
      if ((LOBYTE(v22) & 0x80) == 0) {
        LODWORD(v22) |= 0x80u;
      }
    }
    goto LABEL_19;
  }
  if (static Semantics.forced >= v18) {
    goto LABEL_16;
  }
LABEL_19:
  *(void *)a2 = v21;
  double result = v22;
  *(double *)(a2 + 8) = v22;
  return result;
}

uint64_t specialized static View.makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  uint64_t v7 = (uint64_t)v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v54 = *(_OWORD *)(a2 + 48);
  long long v55 = v12;
  int v56 = *(_DWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v13;
  long long v53 = v11;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v14 = v35;
  if ((v59 & 1) == 0)
  {
    unint64_t v15 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v15, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  unsigned int v16 = (char *)v51;
  int v17 = DWORD2(v51);
  uint64_t v18 = v52;
  int v19 = DWORD2(v52);
  int v20 = HIDWORD(v52);
  int v21 = DWORD1(v53);
  int v33 = v53;
  uint64_t v22 = *((void *)&v53 + 1);
  uint64_t v23 = v54;
  int v24 = HIDWORD(v54);
  int v30 = v55;
  int v31 = DWORD2(v54);
  int v28 = DWORD2(v55);
  int v29 = DWORD1(v55);
  int v26 = v56;
  int v27 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v35 = v16;
  int v36 = v17;
  uint64_t v37 = v18;
  int v38 = v19;
  int v39 = v20;
  int v41 = v21;
  uint64_t v42 = v22;
  uint64_t v43 = v23;
  int v44 = v31;
  int v45 = v24;
  int v46 = v30;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  uint64_t v57 = v16;
  LODWORD(v58) = v17;
  uint64_t v59 = v18;
  int v60 = v19;
  int v61 = v20;
  int v62 = 0;
  int v63 = v21;
  uint64_t v64 = v22;
  uint64_t v65 = v23;
  int v66 = v31;
  int v67 = v24;
  int v68 = v30;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _ShapeView._makeView(view:inputs:)(v14, (uint64_t)&v57, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v40 = v33;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int ShouldRecordTree;
  int v33;
  char *v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  uint64_t v4 = v3;
  uint64_t v73 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v4, (uint64_t)&v57);
  uint64_t v7 = (uint64_t)v57;
  uint64_t v8 = v58;
  unsigned __int8 v9 = v59;
  unsigned int v10 = HIDWORD(v59);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v54 = *(_OWORD *)(a2 + 48);
  long long v55 = v12;
  int v56 = *(_DWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v51 = *(_OWORD *)a2;
  long long v52 = v13;
  long long v53 = v11;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v57) = v9;
  specialized static View.makeBody(view:inputs:fields:)(&v35, (uint64_t)&v57, a1, (uint64_t)&v51, v7, v8, v9 | ((unint64_t)v10 << 32));
  uint64_t v14 = v35;
  if ((v59 & 1) == 0)
  {
    unint64_t v15 = v57;
    LOBYTE(v57) = v9;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v7, v8, v9, v15, v58);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  unsigned int v16 = (char *)v51;
  int v17 = DWORD2(v51);
  uint64_t v18 = v52;
  int v19 = DWORD2(v52);
  int v20 = HIDWORD(v52);
  int v21 = DWORD1(v53);
  int v33 = v53;
  uint64_t v22 = *((void *)&v53 + 1);
  uint64_t v23 = v54;
  int v24 = HIDWORD(v54);
  int v30 = v55;
  int v31 = DWORD2(v54);
  int v28 = DWORD2(v55);
  int v29 = DWORD1(v55);
  int v26 = v56;
  int v27 = HIDWORD(v55);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v35 = v16;
  int v36 = v17;
  uint64_t v37 = v18;
  int v38 = v19;
  int v39 = v20;
  int v41 = v21;
  uint64_t v42 = v22;
  uint64_t v43 = v23;
  int v44 = v31;
  int v45 = v24;
  int v46 = v30;
  int v47 = v29;
  int v48 = v28;
  int v49 = v27;
  int v50 = v26;
  uint64_t v57 = v16;
  LODWORD(v58) = v17;
  uint64_t v59 = v18;
  int v60 = v19;
  int v61 = v20;
  int v62 = 0;
  int v63 = v21;
  uint64_t v64 = v22;
  uint64_t v65 = v23;
  int v66 = v31;
  int v67 = v24;
  int v68 = v30;
  int v69 = v29;
  int v70 = v28;
  int v71 = v27;
  int v72 = v26;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _ShapeView._makeView(view:inputs:)(v14, (uint64_t)&v57, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v40 = v33;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v35);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

uint64_t specialized static View.makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)((uint64_t)&type metadata for SummarySymbol, (uint64_t)&v54);
  uint64_t v5 = (uint64_t)v54;
  uint64_t v6 = v55;
  unsigned __int8 v7 = v56;
  unsigned int v8 = HIDWORD(v56);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 64);
  long long v51 = *(_OWORD *)(a2 + 48);
  long long v52 = v10;
  int v53 = *(_DWORD *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v48 = *(_OWORD *)a2;
  long long v49 = v11;
  long long v50 = v9;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v54) = v7;
  specialized static View.makeBody(view:inputs:fields:)(&v32, (uint64_t)&v54, a1, (uint64_t)&v48, v5, v6, v7 | ((unint64_t)v8 << 32));
  if ((v56 & 1) == 0)
  {
    long long v12 = v54;
    LOBYTE(v54) = v7;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(a1, v5, v6, v7, v12, v55);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  long long v13 = (char *)v48;
  int v14 = DWORD2(v48);
  uint64_t v15 = v49;
  int v16 = DWORD2(v49);
  int v17 = HIDWORD(v49);
  int v18 = DWORD1(v50);
  int v30 = v50;
  uint64_t v19 = *((void *)&v50 + 1);
  uint64_t v20 = v51;
  int v21 = HIDWORD(v51);
  int v27 = v52;
  int v28 = DWORD2(v51);
  int v25 = DWORD2(v52);
  int v26 = DWORD1(v52);
  int v23 = v53;
  int v24 = HIDWORD(v52);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AGSubgraphBeginTreeElement();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v32 = v13;
  int v33 = v14;
  uint64_t v34 = v15;
  int v35 = v16;
  int v36 = v17;
  int v38 = v18;
  uint64_t v39 = v19;
  uint64_t v40 = v20;
  int v41 = v28;
  int v42 = v21;
  int v43 = v27;
  int v44 = v26;
  int v45 = v25;
  int v46 = v24;
  int v47 = v23;
  long long v54 = v13;
  LODWORD(v55) = v14;
  uint64_t v56 = v15;
  int v57 = v16;
  int v58 = v17;
  int v59 = 0;
  int v60 = v18;
  uint64_t v61 = v19;
  uint64_t v62 = v20;
  int v63 = v28;
  int v64 = v21;
  int v65 = v27;
  int v66 = v26;
  int v67 = v25;
  int v68 = v24;
  int v69 = v23;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v54, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v37 = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v32);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

void specialized static View.makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(MEMORY[0x263F8E628], (uint64_t)&v4);
  char v3 = v5;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v4) = v3;
  specialized static View.makeBody(view:inputs:fields:)();
}

{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  unsigned __int8 v7 = *MEMORY[0x263EF8340];
  static DynamicPropertyCache.fields(of:)(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  outlined retain of _ViewInputs(a2);
  LOBYTE(v5) = v4;
  specialized static View.makeBody(view:inputs:fields:)();
}

void sub_245E3DE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,int a36,uint64_t a37,uint64_t a38,long long a39,uint64_t a40,int a41)
{
  if ((a33 & 1) == 0)
  {
    int v46 = a31;
    LOBYTE(a31) = v45;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v43, v42, v44, v45, v46, a32);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(v41);
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v48 = *(_DWORD *)(v41 + 8);
  uint64_t v49 = *(void *)(v41 + 16);
  int v50 = *(_DWORD *)(v41 + 36);
  uint64_t v51 = *(void *)(v41 + 40);
  uint64_t v52 = *(void *)(v41 + 48);
  uint64_t v53 = *(void *)(v41 + 24);
  long long v54 = *(_OWORD *)(v41 + 56);
  uint64_t v55 = *(void *)(v41 + 72);
  int v56 = *(_DWORD *)(v41 + 80);
  a31 = *(char **)v41;
  LODWORD(a32) = v48;
  a33 = v49;
  a34 = v53;
  a35 = 0;
  a36 = v50;
  a37 = v51;
  a38 = v52;
  a39 = v54;
  a40 = v55;
  a41 = v56;
  outlined retain of _ViewInputs(v41);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static View.makeView(view:inputs:)(a9, (uint64_t)&a31);
}

uint64_t sub_245E3DF7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v6 = v3;
  if (v2)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v1, &v5);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined release of _ViewInputs(v0);
    return outlined release of _ViewInputs(v0);
  }
  else
  {
    outlined release of _ViewInputs(v0);
    outlined release of _ViewInputs(v0);
    return outlined release of _ViewInputs(v0);
  }
}

void sub_245E3E114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  if ((*(unsigned char *)(v16 - 160) & 1) == 0)
  {
    int v17 = *(char **)(v16 - 176);
    uint64_t v18 = *(void *)(v16 - 168);
    *(unsigned char *)(v16 - 176) = v14;
    specialized _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)(v15, v12, v13, v14, v17, v18);
  }
  outlined consume of DynamicPropertyCache.Fields.Layout();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(v11);
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v20 = *(_DWORD *)(v11 + 8);
  uint64_t v21 = *(void *)(v11 + 16);
  int v22 = *(_DWORD *)(v11 + 36);
  long long v23 = *(_OWORD *)(v11 + 40);
  uint64_t v24 = *(void *)(v11 + 24);
  long long v25 = *(_OWORD *)(v11 + 56);
  uint64_t v26 = *(void *)(v11 + 72);
  int v27 = *(_DWORD *)(v11 + 80);
  *(void *)(v16 - 176) = *(void *)v11;
  *(_DWORD *)(v16 - 168) = v20;
  *(void *)(v16 - 160) = v21;
  *(void *)(v16 - 152) = v24;
  *(_DWORD *)(v16 - 144) = 0;
  *(_DWORD *)(v16 - 140) = v22;
  *(_OWORD *)(v16 - 136) = v23;
  *(_OWORD *)(v16 - 120) = v25;
  *(void *)(v16 - 104) = v26;
  *(_DWORD *)(v16 - 96) = v27;
  outlined retain of _ViewInputs(v11);
  specialized static View.makeView(view:inputs:)(a11, v16 - 176);
}

uint64_t sub_245E3E1F8()
{
  int v7 = v3;
  if (v2)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v5, &v6);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    outlined release of _ViewInputs(v1);
  }
  outlined release of _ViewInputs(v1);
  uint64_t result = outlined release of _ViewInputs(v1);
  *uint64_t v0 = v5[0];
  v0[1] = v5[1];
  return result;
}

uint64_t _IntelligenceSupportMakeSummarySymbol(char a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = *(uint64_t (**)(void, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared)
                                                          + 0xA8);
  int v7 = static CoreGlue2.shared;
  uint64_t v8 = v6(a1 & 1, a2, a3);

  return v8;
}

uint64_t _IntelligenceSupport.AnimatingText.Context.summarySymbol(isOn:foregroundColor:)(int a1, uint64_t a2)
{
  uint64_t v43 = a2;
  int v42 = a1;
  uint64_t v3 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  long long v10 = (char *)&v40 - v9;
  uint64_t v41 = *v2;
  uint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  uint64_t v53 = 0;
  MEMORY[0x24C522950](2, v8);
  uint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0, MEMORY[0x263F8EE78]);
  unint64_t v52 = v12;
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  uint64_t v46 = 37;
  unint64_t v47 = 0xE100000000000000;
  uint64_t v44 = 9509;
  unint64_t v45 = 0xE200000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v13._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  if (one-time initialization token for symbolImage != -1) {
    swift_once();
  }
  uint64_t v14 = static SummarySymbol.symbolImage;
  type metadata accessor for AttachmentTextStorage();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  uint64_t v53 = 1;
  *(void *)long long v10 = v15;
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  *((void *)v10 + 3) = v11;
  *((void *)v10 + 4) = 0;
  type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  v16._uint64_t countAndFlagsBits = 16421;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v10, (uint64_t)v6);
  unint64_t v18 = *(void *)(v12 + 16);
  unint64_t v17 = *(void *)(v12 + 24);
  if (v18 >= v17 >> 1) {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v18 + 1;
  outlined init with take of LocalizedStringKey.FormatArgument((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v18);
  unint64_t v52 = v12;
  outlined destroy of LocalizedStringKey.FormatArgument((uint64_t)v10);
  swift_release();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  uint64_t v46 = 37;
  unint64_t v47 = 0xE100000000000000;
  uint64_t v44 = 9509;
  unint64_t v45 = 0xE200000000000000;
  v19._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = v50;
  unint64_t v21 = v51;
  unint64_t v22 = v52;
  type metadata accessor for LocalizedTextStorage();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v23;
  *(void *)(v23 + 16) = v20;
  *(void *)(v23 + 24) = v21;
  *(unsigned char *)(v23 + 32) = 1;
  if (v42) {
    double v25 = 1.0;
  }
  else {
    double v25 = 0.0;
  }
  *(void *)(v23 + 40) = v22;
  *(void *)(v23 + 48) = 0;
  uint64_t v26 = v43;
  *(void *)(v23 + 56) = 0;
  *(void *)(v23 + 64) = 0;
  if (!v26)
  {
    uint64_t v26 = v41;
    swift_retain();
  }
  swift_retain();
  uint64_t v27 = specialized Text.customAttribute<A>(_:)(v26, v24, 0, 1, MEMORY[0x263F8EE78], v25);
  uint64_t v29 = v28;
  char v31 = v30;
  int v33 = v32;
  swift_release();
  swift_release();
  if (one-time initialization token for clear != -1) {
    swift_once();
  }
  uint64_t v34 = static Color.clear;
  swift_retain_n();
  outlined copy of Text.Storage(v27, v29, v31 & 1);
  swift_bridgeObjectRetain();
  int v35 = v33;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
  }
  unint64_t v37 = v35[2];
  unint64_t v36 = v35[3];
  if (v37 >= v36 >> 1) {
    int v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
  }
  v35[2] = v37 + 1;
  int v38 = &v35[2 * v37];
  v38[4] = v34;
  *((unsigned char *)v38 + 40) = 0;
  outlined consume of Text.Storage(v27, v29, v31 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized Text.customAttribute<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, double a6)
{
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_26FA54980, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
  uint64_t v12 = swift_allocObject();
  *(double *)(v12 + 16) = a6;
  *(void *)(v12 + 24) = a1;
  swift_retain();
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v14 = a5[2];
  unint64_t v13 = a5[3];
  if (v14 >= v13 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, a5);
  }
  a5[2] = v14 + 1;
  uint64_t v15 = &a5[2 * v14];
  void v15[4] = v12;
  *((unsigned char *)v15 + 40) = -64;
  swift_release();
  return a2;
}

uint64_t _IntelligenceSupport.AnimatingText.init(foregroundColor:body:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v4 = a2(&v12);
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v8 & 1;
  *(void *)(a3 + 24) = v10;
  return result;
}

double _IntelligenceSupport.AnimatingText.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  outlined copy of Text.Storage(*(void *)v1, v3, v5);
  uint64_t v7 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  *(void *)(a1 + 40) = 0;
  double result = *(double *)&static Alignment.topLeading;
  *(_OWORD *)(a1 + 48) = static Alignment.topLeading;
  return result;
}

uint64_t closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = Array<A>.summaryPlacements.getter(*a1);
  uint64_t v4 = v3[2];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  uint64_t v7 = one-time initialization token for v6;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  unsigned int v8 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v8) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v9 = AGMakeUniqueID();
LABEL_10:
  uint64_t result = swift_release();
  *a2 = 0;
  a2[1] = v4;
  a2[2] = partial apply for closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  a2[3] = v6;
  a2[4] = KeyPath;
  a2[5] = 0;
  a2[6] = v9;
  return result;
}

void *Array<A>.summaryPlacements.getter(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v54 = *(void *)(a1 + 16);
  if (!v54) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v1 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  int v63 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = &lazy cache variable for type metadata for DateProvider;
  uint64_t v53 = v1;
  while (1)
  {
    char v5 = (uint64_t *)(v1 + 32 * v2);
    uint64_t v6 = v5[1];
    unint64_t v7 = *(void *)(v6 + 16);
    if (v7) {
      break;
    }
LABEL_6:
    ++v2;
    uint64_t v1 = v53;
    if (v2 == v54) {
      goto LABEL_61;
    }
  }
  uint64_t v52 = v2;
  uint64_t v56 = v6 + 32;
  uint64_t v62 = *v5;
  swift_retain();
  swift_bridgeObjectRetain_n();
  unint64_t v8 = 0;
  uint64_t v55 = v6;
LABEL_10:
  if (v8 >= v7)
  {
    __break(1u);
LABEL_63:
    __break(1u);
  }
  uint64_t v9 = v56 + 48 * v8;
  uint64_t v11 = *(void **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  double v59 = *(double *)(v9 + 32);
  double v60 = *(double *)(v9 + 24);
  unint64_t v58 = v8 + 1;
  char v65 = v12;
  outlined copy of Text.Layout.Line.Line(*(void **)v9, v10, v12);
  outlined copy of Text.Layout.Line.Line(v11, v10, v12);
  CFArrayRef v13 = 0;
  char v57 = v12;
  while (1)
  {
    CFIndex v64 = (CFIndex)v13;
    if (v12)
    {
      unint64_t v14 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v11);
      if (!v14)
      {
        if (!v13)
        {
          char v12 = 1;
LABEL_9:
          outlined consume of Text.Layout.Line.Line(v11, v10, v12 & 1);
          outlined consume of Text.Layout.Line.Line(v11, v10, v57);
          unint64_t v7 = *(void *)(v55 + 16);
          unint64_t v8 = v58;
          if (v58 == v7)
          {
            swift_release();
            swift_bridgeObjectRelease_n();
            uint64_t v2 = v52;
            goto LABEL_6;
          }
          goto LABEL_10;
        }
        goto LABEL_22;
      }
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v11, v10, 0);
      swift_release();
      unint64_t v14 = (const __CTLine *)v11;
    }
    CFArrayRef RunCount = _CTLineGetRunCount(v14);

    if (v13 == RunCount) {
      goto LABEL_9;
    }
    if ((v12 & 1) == 0)
    {
      outlined copy of Text.Layout.Line.Line(v11, v10, 0);
      swift_release();
      outlined copy of Text.Layout.Line.Line(v11, v10, 0);

      outlined copy of Text.Layout.Line.Line(v11, v10, 0);
      outlined copy of Text.Layout.Line.Line(v11, v10, 0);
      swift_release();
      uint64_t v20 = (const __CTLine *)v11;
      unint64_t v17 = v11;
      goto LABEL_26;
    }
LABEL_22:
    id v16 = (id)_NSTextLineFragmentGetCTLine(v11);
    if (!v16) {
      goto LABEL_63;
    }
    unint64_t v17 = v16;
    outlined copy of Text.Layout.Line.Line(v11, v10, 1);
    unint64_t v18 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v11);
    CFArrayRef v19 = 0;
    if (v18)
    {
      uint64_t v20 = v18;
LABEL_26:
      CFArrayRef v19 = _CTLineGetRunCount(v20);

      goto LABEL_28;
    }
    char v12 = 1;
LABEL_28:
    outlined consume of Text.Layout.Line.Line(v11, v10, v12 & 1);
    if (v64 >= (uint64_t)v19) {
      goto LABEL_60;
    }
    uint64_t v21 = v3[269];
    id v22 = v17;
    swift_retain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = (const __CTLine *)v22;
    swift_retain();
    uint64_t v24 = (id)_CTLineGetRunAtIndex(v23, v64);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = (void *)MEMORY[0x24C522820](v25);
    swift_bridgeObjectRelease();
    CFDictionaryRef v27 = _CTRunGetAttributeValueForKey((const __CTRun *)v24, v26);

    if (v27)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      CGPoint originsBuffer = (CGPoint)0;
      long long v70 = 0u;
    }
    outlined init with take of Any?((uint64_t)&originsBuffer, (uint64_t)&buffer);
    swift_release();

    CFIndex v28 = v64;
    if (!v72)
    {
      outlined destroy of Any?((uint64_t)&buffer);
LABEL_13:
      swift_release_n();

      goto LABEL_14;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_13;
    }
    CGFloat x = originsBuffer.x;
    if (*(void *)&originsBuffer.x >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      if (!v30)
      {
LABEL_48:
        swift_bridgeObjectRelease_n();
        swift_release_n();

        uint64_t v3 = (void *)&lazy cache variable for type metadata for DateProvider;
        CFIndex v28 = v64;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((*(void *)&originsBuffer.x & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v30) {
        goto LABEL_48;
      }
    }
    if ((*(void *)&x & 0xC000000000000001) != 0) {
      break;
    }
    uint64_t v34 = 0;
    while (1)
    {
      uint64_t v35 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        goto LABEL_59;
      }
      type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_26FA54980, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
      uint64_t v36 = swift_dynamicCastClass();
      if (v36) {
        break;
      }
      ++v34;
      if (v35 == v30) {
        goto LABEL_48;
      }
    }
    uint64_t v37 = v36;
    swift_retain();
LABEL_51:
    swift_bridgeObjectRelease();
    uint64_t v61 = *(void *)(v37 + 16);
    uint64_t v38 = *(void *)(v37 + 24);
    swift_retain();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v39 = v23;
    swift_retain();
    swift_retain();
    uint64_t v40 = (id)_CTLineGetRunAtIndex(v39, v64);
    buffer.CGFloat x = 0.0;
    buffer.double y = 0.0;
    CGFloat descent = 0.0;
    CGFloat ascent = 0.0;
    CGFloat leading = 0.0;
    originsBuffer.CGFloat x = 0.0;
    originsBuffer.double y = 0.0;
    v74.location = 0;
    v74.length = 1;
    CTRunGetPositions((CTRunRef)v40, v74, &buffer);
    v75.location = 0;
    v75.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v40, v75, 0, &originsBuffer);
    double v41 = originsBuffer.x;
    double y = originsBuffer.y;
    double v43 = buffer.x;
    double v44 = buffer.y;
    v76.location = 0;
    v76.length = 0;
    double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v40, v76, &ascent, &descent, &leading);
    swift_release();

    double v47 = descent;
    CGFloat v46 = ascent;
    CGFloat v48 = leading;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
    }
    uint64_t v3 = (void *)&lazy cache variable for type metadata for DateProvider;
    unint64_t v50 = v63[2];
    unint64_t v49 = v63[3];
    if (v50 >= v49 >> 1) {
      int v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v63);
    }
    v63[2] = v50 + 1;
    unint64_t v51 = (double *)&v63[9 * v50];
    *((void *)v51 + 4) = v62;
    v51[5] = v60 + v43 - v41;
    v51[6] = v59 - (v44 - y);
    v51[7] = TypographicBounds;
    v51[8] = v46;
    v51[9] = fabs(v47);
    v51[10] = v48;
    *((void *)v51 + 11) = v61;
    *((void *)v51 + 12) = v38;
    swift_release();
    swift_release();

    CFIndex v28 = v64;
LABEL_14:
    CFArrayRef v13 = (const __CFArray *)(v28 + 1);
    char v12 = v65;
  }
  uint64_t v31 = 0;
  while (1)
  {
    MEMORY[0x24C523D60](v31, *(void *)&x);
    uint64_t v32 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for TextAttributeModifier<SummaryAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute, (uint64_t)&unk_26FA54980, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextAttributeModifier);
    uint64_t v33 = swift_dynamicCastClass();
    if (v33)
    {
      uint64_t v37 = v33;
      goto LABEL_51;
    }
    swift_unknownObjectRelease();
    ++v31;
    if (v32 == v30) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease();
  return v63;
}

unint64_t *closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(a2 + 16))
  {
    uint64_t v4 = a2 + 72 * v3;
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v6 = *(void *)(v4 + 88);
    uint64_t v7 = *(void *)(v4 + 96);
    double v8 = *(double *)(v4 + 48) - *(double *)(v4 + 64);
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v6;
    *(void *)(a3 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = v5;
    *(double *)(a3 + 48) = v8;
    return (unint64_t *)swift_retain();
  }
  __break(1u);
  return result;
}

double protocol witness for View.body.getter in conformance _IntelligenceSupport.AnimatingText@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  outlined copy of Text.Storage(*(void *)v1, v3, v5);
  uint64_t v7 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  *(void *)(a1 + 40) = 0;
  double result = *(double *)&static Alignment.topLeading;
  *(_OWORD *)(a1 + 48) = static Alignment.topLeading;
  return result;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.isOn.getter()
{
  return *v0;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.isOn.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.isOn.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id _IntelligenceSupport.AnimatingSummarySymbol.font.getter()
{
  return *(id *)(v0 + 8);
}

void _IntelligenceSupport.AnimatingSummarySymbol.font.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.font.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id _IntelligenceSupport.AnimatingSummarySymbol.color.getter()
{
  return *(id *)(v0 + 16);
}

void _IntelligenceSupport.AnimatingSummarySymbol.color.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*_IntelligenceSupport.AnimatingSummarySymbol.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.init(isOn:font:foregroundColor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

id _IntelligenceSupport.AnimatingSummarySymbol.body.getter@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = (void *)*((void *)v1 + 2);
  id v11 = (id)*((void *)v1 + 1);
  if (*v1) {
    double v5 = 1.0;
  }
  else {
    double v5 = 0.0;
  }
  type metadata accessor for ColorBox<CGColorRef>();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v11;
  uint64_t KeyPath = swift_getKeyPath();
  *(double *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = v7;
  id v9 = v4;

  return v11;
}

id protocol witness for View.body.getter in conformance _IntelligenceSupport.AnimatingSummarySymbol@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = (void *)*((void *)v1 + 2);
  id v11 = (id)*((void *)v1 + 1);
  if (*v1) {
    double v5 = 1.0;
  }
  else {
    double v5 = 0.0;
  }
  type metadata accessor for ColorBox<CGColorRef>();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v11;
  uint64_t KeyPath = swift_getKeyPath();
  *(double *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = v7;
  id v9 = v4;

  return v11;
}

uint64_t closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter(uint64_t *a1)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t result = swift_release();
    if (v4) {
      return result;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = swift_retain();
  char v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  uint64_t result = swift_release();
  if ((v7 & 1) == 0)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation, (uint64_t)&type metadata for BezierAnimation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for InternalAnimationBox);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2461E9BB0;
    *(_OWORD *)(v8 + 32) = xmmword_2461E9BC0;
    *(_OWORD *)(v8 + 48) = xmmword_2461C0DC0;
    *(void *)(v8 + 64) = 0;
    swift_retain();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(a1, v8);
    swift_release_n();
    return swift_release();
  }
  return result;
}

Swift::Int SummaryAttribute.hashValue.getter(uint64_t a1, double a2)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  double v5 = *(void (**)(unsigned char *))(*(void *)a1 + 136);
  swift_retain();
  v5(v7);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SummaryAttribute()
{
  return SummaryAttribute.hashValue.getter(*(void *)(v0 + 8), *(double *)v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SummaryAttribute(uint64_t a1)
{
  Swift::UInt64 v3 = v1[1];
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  double v5 = *(void (**)(uint64_t))(*(void *)v3 + 136);
  swift_retain();
  v5(a1);

  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SummaryAttribute()
{
  Swift::UInt64 v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void (**)(char *))(*(void *)v1 + 136);
  swift_retain();
  v4(v6);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SummaryAttribute(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 8)) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(double))(*(void *)v2 + 88))(*(double *)a1) & 1;
  }
}

double one-time initialization function for symbolImage()
{
  type metadata accessor for FontBox<Font.PlatformFontProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000013;
  *(void *)(v0 + 24) = 0x80000002462218F0;
  *(_DWORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 36) = 1;
  *(_OWORD *)(v0 + 40) = xmmword_24619B520;
  *(void *)(v0 + 56) = 0xD000000000000013;
  *(void *)(v0 + 64) = 0x80000002462218F0;
  double result = -0.0;
  *(_OWORD *)(v0 + 72) = xmmword_24619B530;
  *(unsigned char *)(v0 + 88) = 0;
  static SummarySymbol.symbolImage = v0;
  return result;
}

double SummarySymbol.gradient.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, (uint64_t)&type metadata for Color, MEMORY[0x263F8E0F8]);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BE290;
  *(void *)(inited + 32) = a1;
  LOBYTE(v9) = 0;
  *(void *)(inited + 40) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 1.0, 0.576470588, 0.0, 1.0);
  LOBYTE(v9) = 0;
  *(void *)(inited + 48) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 1.0, 0.325490196, 0.207843137, 1.0);
  LOBYTE(v9) = 0;
  *(void *)(inited + 56) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 0.733333333, 0.392156863, 1.0, 1.0);
  LOBYTE(v9) = 0;
  *(void *)(inited + 64) = specialized Color.init(_:red:green:blue:opacity:)(&v9, 0.356862745, 0.494117647, 1.0, 1.0);
  *(void *)(inited + 72) = a1;
  uint64_t v9 = inited;
  specialized Array._endMutation()();
  uint64_t v7 = v9;
  swift_retain_n();
  *(void *)a2 = specialized Gradient.init(colors:)(v7);
  double result = 1.0;
  *(_OWORD *)(a2 + 8) = xmmword_2461BCA80;
  *(double *)(a2 + 24) = (a3 * -1.1 * 180.0 + 180.0) * 0.0174532925;
  *(double *)(a2 + 32) = (270.0 - a3 * 180.0) * 0.0174532925;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SummarySymbol@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = v5;
  long long v11 = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v14[0] = v8[0];
  v14[1] = v6;
  _DWORD v14[2] = v9;
  v13[1] = v6;
  v13[2] = v9;
  v13[0] = v8[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v13);
  outlined release of _GraphInputs((uint64_t)v14);
  return specialized static View.makeView(view:inputs:)(v4, (uint64_t)v8, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SummarySymbol@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = v5;
  long long v11 = *(_OWORD *)(a2 + 64);
  char v12 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v14[0] = v8[0];
  v14[1] = v6;
  _DWORD v14[2] = v9;
  v13[1] = v6;
  v13[2] = v9;
  v13[0] = v8[0];
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v13);
  outlined release of _GraphInputs((uint64_t)v14);
  return specialized static View.makeViewList(view:inputs:)(v4, (uint64_t)v8, a3);
}

uint64_t protocol witness for View.body.getter in conformance SummarySymbol@<X0>(uint64_t a1@<X8>)
{
  double v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  if (one-time initialization token for symbolImage != -1) {
    swift_once();
  }
  uint64_t v5 = static SummarySymbol.symbolImage;
  swift_retain();
  SummarySymbol.gradient.getter(v4, (uint64_t)&v9, v3);
  uint64_t v6 = v9;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  long long v7 = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v4;

  return swift_retain();
}

double (*protocol witness for Animatable.animatableData.modify in conformance SummarySymbol(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

uint64_t specialized static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree)
  {
    type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2);
    AGSubgraphBeginTreeElement();
  }
  int v4 = *(_DWORD *)(a1 + 80);
  int v27 = *(_DWORD *)(a1 + 72);
  int v28 = *(_DWORD *)(a1 + 76);
  int v25 = *(_DWORD *)(a1 + 64);
  int v26 = *(_DWORD *)(a1 + 68);
  int v23 = *(_DWORD *)(a1 + 56);
  int v24 = *(_DWORD *)(a1 + 60);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 8);
  int v19 = *(_DWORD *)(a1 + 28);
  int v18 = *(_DWORD *)(a1 + 32);
  int v22 = *(_DWORD *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 16);
  v64[0] = *(_OWORD *)a1;
  v64[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v66 = *(_OWORD *)(a1 + 48);
  long long v67 = v11;
  long long v65 = v10;
  int v68 = v4;
  LODWORD(v65) = 0;
  swift_beginAccess();
  unint64_t v48 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>(0, &lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment, (uint64_t (*)(void, void *))type metadata accessor for _ForegroundStyleModifier2.ForegroundStyleEnvironment);
  lazy protocol witness table accessor for type _ForegroundStyleModifier2<AngularGradient, Color>.ForegroundStyleEnvironment and conformance _ForegroundStyleModifier2<A, B>.ForegroundStyleEnvironment();
  int v12 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = v13;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_WORD *)(v15 + 80) = 256;
  *(void *)(v15 + 88) = v14;
  swift_release();
  int v16 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v48 = v5;
  int v49 = v21;
  uint64_t v50 = v15;
  int v51 = v20;
  int v52 = v19;
  uint64_t v55 = v7;
  uint64_t v56 = v8;
  int v54 = v22;
  int v57 = v23;
  int v58 = v24;
  int v59 = v25;
  int v60 = v26;
  int v61 = v27;
  int v62 = v28;
  int v63 = v4;
  int v31 = v16;
  unint64_t v32 = v5;
  int v33 = v21;
  uint64_t v34 = v15;
  int v35 = v20;
  int v36 = v19;
  int v37 = 0;
  int v38 = v22;
  uint64_t v39 = v7;
  uint64_t v40 = v8;
  int v41 = v23;
  int v42 = v24;
  int v43 = v25;
  int v44 = v26;
  int v45 = v27;
  int v46 = v28;
  int v47 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Image._makeView(view:inputs:)(&v31, (uint64_t)&v32, a2);
  int v53 = 32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v48);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v65) = v18;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v64);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

{
  unsigned int OffsetAttribute2;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int ShouldRecordTree;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _OWORD v47[2];
  long long v48;
  long long v49;
  long long v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;

  long long v67 = *MEMORY[0x263EF8340];
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v4 = *(_DWORD *)(a1 + 80);
  int v27 = *(_DWORD *)(a1 + 72);
  int v28 = *(_DWORD *)(a1 + 76);
  int v25 = *(_DWORD *)(a1 + 64);
  int v26 = *(_DWORD *)(a1 + 68);
  int v23 = *(_DWORD *)(a1 + 56);
  int v24 = *(_DWORD *)(a1 + 60);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 16);
  int v20 = *(_DWORD *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 8);
  int v19 = *(_DWORD *)(a1 + 28);
  int v18 = *(_DWORD *)(a1 + 32);
  int v22 = *(_DWORD *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 16);
  v47[0] = *(_OWORD *)a1;
  v47[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  int v12 = *(_OWORD *)(a1 + 64);
  int v51 = v4;
  int v49 = v11;
  uint64_t v50 = v12;
  unint64_t v48 = v10;
  LODWORD(v48) = 0;
  swift_beginAccess();
  int v52 = __PAIR64__(*(_DWORD *)(v6 + 16), OffsetAttribute2);
  int v53 = 0;
  int v54 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for ChildEnvironment<Font?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for ChildEnvironment);
  lazy protocol witness table accessor for type ChildEnvironment<Font?> and conformance ChildEnvironment<A>();
  uint64_t v13 = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Font?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  int v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v14;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_WORD *)(v16 + 80) = 256;
  *(void *)(v16 + 88) = v15;
  swift_release();
  type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510]);
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v31 = v5;
  unint64_t v32 = v21;
  int v33 = v16;
  uint64_t v34 = v20;
  int v35 = v19;
  int v37 = v22;
  int v38 = v7;
  uint64_t v39 = v8;
  uint64_t v40 = v23;
  int v41 = v24;
  int v42 = v25;
  int v43 = v26;
  int v44 = v27;
  int v45 = v28;
  int v46 = v4;
  int v52 = v5;
  LODWORD(v53) = v21;
  int v54 = v16;
  uint64_t v55 = v20;
  uint64_t v56 = v19;
  int v57 = v22;
  int v58 = v7;
  int v59 = v8;
  int v60 = v23;
  int v61 = v24;
  int v62 = v25;
  int v63 = v26;
  CFIndex v64 = v27;
  long long v65 = v28;
  long long v66 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ModifiedContent<>._makeView(view:inputs:)((uint64_t)&v52, a2);
  int v36 = 32;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v31);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v48) = v18;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v47);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

{
  uint64_t OffsetAttribute2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int ShouldRecordTree;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  int v62;
  _OWORD v63[2];
  long long v64;
  long long v65;
  long long v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;

  Swift::String v83 = *MEMORY[0x263EF8340];
  _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v4 = *(_DWORD *)(a1 + 80);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  int v27 = *(_DWORD *)(a1 + 32);
  uint64_t v8 = *(_DWORD *)(a1 + 36);
  long long v9 = *(void *)(a1 + 40);
  long long v10 = *(void *)(a1 + 48);
  long long v11 = *(void *)(a1 + 24);
  int v12 = *(_OWORD *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 72);
  unint64_t v14 = *(_OWORD *)(a1 + 48);
  CFIndex v64 = *(_OWORD *)(a1 + 32);
  long long v65 = v14;
  long long v66 = *(_OWORD *)(a1 + 64);
  long long v67 = v4;
  uint64_t v15 = *(_OWORD *)(a1 + 16);
  v63[0] = *(_OWORD *)a1;
  v63[1] = v15;
  LODWORD(v64) = 0;
  int v52 = v5;
  int v53 = v6;
  int v54 = v7;
  uint64_t v55 = v11;
  uint64_t v56 = 0;
  int v57 = v8;
  int v58 = v9;
  int v59 = v10;
  int v60 = v12;
  int v61 = v13;
  int v62 = v4;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of _ViewInputs(a1);
  specialized static _ValueTransactionModifier._makeInputs(modifier:inputs:)(OffsetAttribute2, (uint64_t)&v52);
  int v31 = v52;
  int v16 = v54;
  int v28 = v55;
  uint64_t v29 = v53;
  uint64_t v30 = v56;
  unint64_t v17 = v57;
  uint64_t v34 = v59;
  int v35 = v58;
  int v18 = v60;
  int v19 = DWORD1(v60);
  int v20 = DWORD2(v60);
  int v21 = HIDWORD(v60);
  int v22 = v61;
  int v23 = HIDWORD(v61);
  int v24 = v62;
  int v33 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v37 = v31;
  int v38 = v29;
  uint64_t v39 = v16;
  uint64_t v40 = v28;
  int v43 = v35;
  int v44 = v34;
  int v45 = v18;
  int v46 = v19;
  int v47 = v20;
  unint64_t v48 = v21;
  int v49 = v22;
  uint64_t v50 = v23;
  int v51 = v24;
  int v41 = 0;
  int v42 = v17;
  int v68 = v31;
  uint64_t v69 = v29;
  long long v70 = v16;
  int v71 = v28;
  uint64_t v72 = HIDWORD(v28);
  uint64_t v73 = v17;
  CFRange v74 = v35;
  CFRange v75 = v34;
  CFRange v76 = v18;
  uint64_t v77 = v19;
  unint64_t v78 = v20;
  uint64_t v79 = v21;
  unint64_t v80 = v22;
  unint64_t v81 = v23;
  Swift::String v82 = v24;
  if (v17)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v25 = v33;
  }
  else
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sSnySiGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v25 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  specialized static View.makeView(view:inputs:)(v25, (uint64_t)&v68, a2);
  int v41 = v30;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, &v37);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LODWORD(v64) = v27;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v63);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    return outlined release of _ViewInputs(a1);
  }
}

uint64_t sub_245E44EBC()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in _IntelligenceSupport.AnimatingText()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in _IntelligenceSupport.AnimatingSummarySymbol()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for _IntelligenceSupport()
{
  return &type metadata for _IntelligenceSupport;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingText()
{
  return &type metadata for _IntelligenceSupport.AnimatingText;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingText.Context()
{
  return &type metadata for _IntelligenceSupport.AnimatingText.Context;
}

uint64_t initializeBufferWithCopyOfBuffer for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  double v3 = *(void **)(a2 + 8);
  int v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 16);
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for _IntelligenceSupport.AnimatingSummarySymbol(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;

  int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for _IntelligenceSupport.AnimatingSummarySymbol()
{
  return &type metadata for _IntelligenceSupport.AnimatingSummarySymbol;
}

uint64_t sub_245E45098()
{
  return lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>);
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    _sSnySiGMaTm_2(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_245E45154()
{
  return _s7SwiftUI15ModifiedContentVyACyAA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVAA25_ValueTransactionModifierVySdGGAA13_OffsetEffectVGACyxq_GAA4ViewA2aORzAA0sP0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>);
}

uint64_t _s7SwiftUI15ModifiedContentVyACyAA13SummarySymbol33_5039765D26D33F565D3CDFCA69D19B23LLVAA25_ValueTransactionModifierVySdGGAA13_OffsetEffectVGACyxq_GAA4ViewA2aORzAA0sP0R_rlWlTm_0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510]);
    lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SummarySymbol()
{
  return &type metadata for SummarySymbol;
}

uint64_t associated type witness table accessor for View.Body : View in SummarySymbol()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>)
  {
    _sSnySiGMaTm_2(255, &lazy cache variable for type metadata for ShapeStyleResolver<MeshGradient>, (uint64_t)&type metadata for MeshGradient, (uint64_t)&protocol witness table for MeshGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<MeshGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<ContainerRelativeShape._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>>, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<ContainerRelativeShape._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Circle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Circle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Circle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Ellipse._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Ellipse._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Ellipse._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Capsule._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Capsule._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Capsule._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<RoundedRectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<RoundedRectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<Rectangle._Inset>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<Rectangle._Inset>>, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<Rectangle._Inset>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<UnevenRoundedRectangle>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>>, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<UnevenRoundedRectangle>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init;
  if (!lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init)
  {
    type metadata accessor for FontBox<Font.PlatformFontProvider>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>.Init, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedShape<AnyShape>.Init and conformance AnimatedShape<A>.Init);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<AnimatedShape<AnyShape>>(255, &lazy cache variable for type metadata for LeafLayoutComputer<AnimatedShape<AnyShape>>, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<AnimatedShape<AnyShape>> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Font?(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>)
  {
    _sSnySiGMaTm_2(255, &lazy cache variable for type metadata for ShapeStyleResolver<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<AngularGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>)
  {
    _sSnySiGMaTm_2(255, &lazy cache variable for type metadata for ShapeStyleResolver<EllipticalGradient>, (uint64_t)&type metadata for EllipticalGradient, (uint64_t)&protocol witness table for EllipticalGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleResolver);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleResolver<EllipticalGradient> and conformance ShapeStyleResolver<A>);
  }
  return result;
}

uint64_t sub_245E45EB0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t *partial apply for closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in _IntelligenceSupport.AnimatingText.body.getter(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute;
  if (!lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummaryAttribute and conformance SummaryAttribute);
  }
  return result;
}

uint64_t destroy for SummaryPlacement()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SummaryPlacement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SummaryPlacement(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SummaryPlacement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryPlacement(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryPlacement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SummaryPlacement()
{
  return &type metadata for SummaryPlacement;
}

void *assignWithCopy for SummarySymbol(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *type metadata accessor for SummaryAttribute()
{
  return &unk_26FA54980;
}

uint64_t sub_245E461D4()
{
  return lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for SummaryAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SummaryAttribute and conformance SummaryAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

double _LuminanceToAlphaEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 1;
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(unsigned char *)(v2 + 132) = 16;
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245E463E0()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t static _LuminanceToAlphaEffect.== infix(_:_:)()
{
  return 1;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _LuminanceToAlphaEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 1;
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(unsigned char *)(v2 + 132) = 16;
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.luminanceToAlpha()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _LuminanceToAlphaEffect);
}

unint64_t instantiation function for generic protocol witness table for _LuminanceToAlphaEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect;
  if (!lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LuminanceToAlphaEffect and conformance _LuminanceToAlphaEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for _LuminanceToAlphaEffect()
{
  return &type metadata for _LuminanceToAlphaEffect;
}

uint64_t sub_245E46568()
{
  return swift_getWitnessTable();
}

uint64_t static CoreTesting.isRunning.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static CoreTesting.isRunning = a1;
  return result;
}

uint64_t (*static CoreTesting.isRunning.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static CoreTesting.needsRender.getter()
{
  return static CoreTesting.needsRender;
}

uint64_t (*static CoreTesting.needsRender.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static CoreTesting.needsRunLoopTurn.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for CoreTesting()
{
  return &type metadata for CoreTesting;
}

unint64_t specialized Dictionary.optimisticFilter(_:)(uint64_t (*a1)(long long *, unsigned char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (*(void *)(a3 + 16) <= 0x40uLL)
  {
    uint64_t v59 = a3 + 64;
    uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(a3 + 64);
    int64_t v57 = (unint64_t)(v7 + 63) >> 6;
    swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    int64_t v11 = 0;
    unint64_t v62 = 0;
    char v56 = 1;
    char v55 = 1;
    while (1)
    {
      if (v9)
      {
        unint64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        int64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        if (v14 >= v57) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v59 + 8 * v14);
        ++v11;
        if (!v15)
        {
          int64_t v11 = v14 + 1;
          if (v14 + 1 >= v57) {
            goto LABEL_30;
          }
          unint64_t v15 = *(void *)(v59 + 8 * v11);
          if (!v15)
          {
            int64_t v11 = v14 + 2;
            if (v14 + 2 >= v57) {
              goto LABEL_30;
            }
            unint64_t v15 = *(void *)(v59 + 8 * v11);
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v57)
              {
LABEL_30:
                swift_release();
                if (v56) {
                  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
                }
                if (v55)
                {
                  swift_bridgeObjectRetain();
                  return v3;
                }
                uint64_t v24 = 1 << *(unsigned char *)(v3 + 32);
                uint64_t v25 = -1;
                if (v24 < 64) {
                  uint64_t v25 = ~(-1 << v24);
                }
                unint64_t v26 = v25 & *(void *)(v3 + 64);
                int v27 = v66;
                int64_t v58 = (unint64_t)(v24 + 63) >> 6;
                swift_bridgeObjectRetain();
                unint64_t v28 = 0;
                int64_t v61 = 0;
                uint64_t v6 = (void *)MEMORY[0x263F8EE80];
                while (2)
                {
                  if (v26)
                  {
                    unint64_t v30 = __clz(__rbit64(v26));
                    v26 &= v26 - 1;
                    unint64_t v31 = v30 | (v61 << 6);
                    goto LABEL_43;
                  }
                  int64_t v36 = v61 + 1;
                  if (__OFADD__(v61, 1)) {
                    goto LABEL_78;
                  }
                  if (v36 < v58)
                  {
                    unint64_t v37 = *(void *)(v59 + 8 * v36);
                    if (v37)
                    {
LABEL_47:
                      unint64_t v26 = (v37 - 1) & v37;
                      unint64_t v31 = __clz(__rbit64(v37)) + (v36 << 6);
                      int64_t v61 = v36;
LABEL_43:
                      uint64_t v32 = *(void *)(v3 + 56);
                      int v33 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v31);
                      uint64_t v35 = *v33;
                      uint64_t v34 = v33[1];
                      *(void *)&long long v65 = v35;
                      *((void *)&v65 + 1) = v34;
                      outlined init with copy of AnyTrackedValue(v32 + 40 * v31, (uint64_t)v27);
LABEL_62:
                      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v65, (uint64_t)&v68);
                      Swift::UInt v39 = v68;
                      if (!v68)
                      {
                        swift_release();
                        return (unint64_t)v6;
                      }
                      Swift::UInt v40 = v69;
                      outlined init with take of ScrollStateRequest(v70, (uint64_t)&v65);
                      if (v28 == 0x8000000000000000) {
                        goto LABEL_82;
                      }
                      if (v28 <= 0x3F && ((v62 >> v28) & 1) != 0)
                      {
                        int v41 = v27;
                        outlined init with copy of AnyTrackedValue((uint64_t)&v65, (uint64_t)&v63);
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
                        uint64_t v45 = v6[2];
                        BOOL v46 = (v43 & 1) == 0;
                        uint64_t v47 = v45 + v46;
                        if (__OFADD__(v45, v46)) {
                          goto LABEL_79;
                        }
                        char v48 = v43;
                        if (v6[3] >= v47)
                        {
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                            specialized _NativeDictionary.copy()();
                          }
                        }
                        else
                        {
                          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
                          unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
                          if ((v48 & 1) != (v50 & 1)) {
                            goto LABEL_83;
                          }
                          unint64_t v44 = v49;
                        }
                        if (v48)
                        {
                          uint64_t v29 = v6[7] + 40 * v44;
                          __swift_destroy_boxed_opaque_existential_1(v29);
                          outlined init with take of ScrollStateRequest(&v63, v29);
                        }
                        else
                        {
                          v6[(v44 >> 6) + 8] |= 1 << v44;
                          int v51 = (Swift::UInt *)(v6[6] + 16 * v44);
                          Swift::UInt *v51 = v39;
                          v51[1] = v40;
                          outlined init with take of ScrollStateRequest(&v63, v6[7] + 40 * v44);
                          uint64_t v52 = v6[2];
                          BOOL v53 = __OFADD__(v52, 1);
                          uint64_t v54 = v52 + 1;
                          if (v53) {
                            goto LABEL_80;
                          }
                          v6[2] = v54;
                        }
                        swift_bridgeObjectRelease();
                        int v27 = v41;
                      }
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
                      ++v28;
                      continue;
                    }
                    int64_t v38 = v61 + 2;
                    ++v61;
                    if (v36 + 1 < v58)
                    {
                      unint64_t v37 = *(void *)(v59 + 8 * v38);
                      if (v37)
                      {
LABEL_50:
                        int64_t v36 = v38;
                        goto LABEL_47;
                      }
                      int64_t v61 = v36 + 1;
                      if (v36 + 2 < v58)
                      {
                        unint64_t v37 = *(void *)(v59 + 8 * (v36 + 2));
                        if (v37)
                        {
                          v36 += 2;
                          goto LABEL_47;
                        }
                        int64_t v38 = v36 + 3;
                        int64_t v61 = v36 + 2;
                        if (v36 + 3 < v58)
                        {
                          unint64_t v37 = *(void *)(v59 + 8 * v38);
                          if (!v37)
                          {
                            while (1)
                            {
                              int64_t v36 = v38 + 1;
                              if (__OFADD__(v38, 1)) {
                                goto LABEL_81;
                              }
                              if (v36 >= v58)
                              {
                                int64_t v61 = v58 - 1;
                                goto LABEL_61;
                              }
                              unint64_t v37 = *(void *)(v59 + 8 * v36);
                              ++v38;
                              if (v37) {
                                goto LABEL_47;
                              }
                            }
                          }
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                  break;
                }
LABEL_61:
                unint64_t v26 = 0;
                uint64_t v67 = 0;
                memset(v66, 0, sizeof(v66));
                long long v65 = 0u;
                goto LABEL_62;
              }
              unint64_t v15 = *(void *)(v59 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  int64_t v11 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_77;
                  }
                  if (v11 >= v57) {
                    goto LABEL_30;
                  }
                  unint64_t v15 = *(void *)(v59 + 8 * v11);
                  ++v16;
                  if (v15) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v11 = v16;
            }
          }
        }
LABEL_24:
        unint64_t v9 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      uint64_t v17 = *(void *)(v3 + 56);
      uint64_t v18 = v3;
      int v19 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * v13);
      Swift::UInt v20 = v19[1];
      Swift::UInt v68 = *v19;
      Swift::UInt v21 = v68;
      Swift::UInt v69 = v20;
      outlined init with copy of AnyTrackedValue(v17 + 40 * v13, (uint64_t)v70);
      *(void *)&long long v65 = v21;
      *((void *)&v65 + 1) = v20;
      outlined init with take of ScrollStateRequest(v70, (uint64_t)v66);
      *(void *)&long long v63 = v21;
      *((void *)&v63 + 1) = v20;
      outlined init with copy of AnyTrackedValue((uint64_t)v66, (uint64_t)v64);
      LOBYTE(v21) = a1(&v63, v64);
      outlined destroy of (key: EventID, value: EventType)((uint64_t)&v65);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      if (v21)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          goto LABEL_82;
        }
        char v56 = 0;
        uint64_t v22 = 1 << v10;
        if (v10 >= 0x40) {
          uint64_t v22 = 0;
        }
        v62 |= v22;
      }
      else
      {
        char v55 = 0;
      }
      uint64_t v3 = v18;
      ++v10;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)specialized _NativeDictionary.filter(_:)((uint64_t)a1, a2, v3);
  swift_bridgeObjectRelease();
  return (unint64_t)v6;
}

uint64_t key path setter for EventFilter.predicate : <A>EventFilter<A>(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@out Bool);
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t EventFilter.predicate.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t EventFilter.predicate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*EventFilter.predicate.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t EventFilter.init(predicate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static EventFilter._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v4 = a2[6];
  long long v5 = *(long long *)((char *)a2 + 108);
  long long v67 = a2[5];
  *(_OWORD *)Swift::UInt v68 = v4;
  *(_OWORD *)&v68[12] = v5;
  long long v6 = a2[1];
  long long v62 = *a2;
  long long v7 = a2[2];
  long long v9 = a2[3];
  long long v8 = a2[4];
  long long v63 = v6;
  long long v64 = v7;
  unsigned int v10 = *a1;
  long long v65 = v9;
  long long v66 = v8;
  *(void *)&long long v76 = __PAIR64__(*(unsigned int *)&v68[12], v10);
  uint64_t v60 = type metadata accessor for EventFilterEvents();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<FilteredEvents>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v59, v60, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  int v40 = v69;
  uint64_t v13 = v62;
  int v14 = DWORD2(v62);
  uint64_t v15 = v63;
  unsigned int v51 = DWORD2(v63);
  unsigned int v16 = HIDWORD(v63);
  unsigned int v35 = HIDWORD(v63);
  int v36 = DWORD2(v62);
  unsigned int v32 = DWORD1(v64);
  unsigned int v33 = v64;
  uint64_t v18 = *((void *)&v64 + 1);
  uint64_t v17 = v65;
  unsigned int v31 = DWORD2(v65);
  unsigned int v48 = v66;
  unsigned int v49 = HIDWORD(v65);
  unsigned int v46 = DWORD2(v66);
  unsigned int v47 = DWORD1(v66);
  int v44 = v67;
  unsigned int v45 = HIDWORD(v66);
  int v19 = (void *)*((void *)&v67 + 1);
  uint64_t v20 = *(void *)v68;
  int v42 = *(_DWORD *)&v68[8];
  int v43 = *(_DWORD *)&v68[16];
  int v50 = *(_DWORD *)&v68[20];
  int v41 = *(_DWORD *)&v68[24];
  outlined retain of _GestureInputs((uint64_t)&v62);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v19;
  swift_bridgeObjectRetain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v34 = v18;
  *(void *)&long long v69 = v13;
  DWORD2(v69) = v14;
  *(void *)&long long v70 = v15;
  *((void *)&v70 + 1) = __PAIR64__(v16, v51);
  *(void *)&long long v71 = __PAIR64__(v32, v33);
  *((void *)&v71 + 1) = v18;
  *(void *)&long long v72 = v17;
  *((void *)&v72 + 1) = __PAIR64__(v49, v31);
  *(void *)&long long v73 = __PAIR64__(v47, v48);
  *((void *)&v73 + 1) = __PAIR64__(v45, v46);
  LODWORD(v74) = v44;
  *((void *)&v74 + 1) = v21;
  *(void *)CFRange v75 = v20;
  *(_DWORD *)&v75[8] = v42;
  *(_DWORD *)&v75[12] = OffsetAttribute2;
  *(_DWORD *)&v75[16] = v43;
  *(_DWORD *)&v75[20] = v50;
  *(_DWORD *)&v75[24] = v41;
  outlined retain of _GestureInputs((uint64_t)&v69);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = v20;
  swift_bridgeObjectRelease();
  long long v80 = v73;
  long long v81 = v74;
  *(_OWORD *)Swift::String v82 = *(_OWORD *)v75;
  *(_OWORD *)&v82[12] = *(_OWORD *)&v75[12];
  long long v76 = v69;
  long long v77 = v70;
  long long v78 = v71;
  long long v79 = v72;
  a3(v53, &v76);
  outlined release of _GestureInputs((uint64_t)&v69);
  v52[0] = v53[0];
  v52[1] = v40;
  uint64_t v56 = type metadata accessor for GesturePhase();
  uint64_t v23 = type metadata accessor for EventFilterPhase();
  uint64_t v57 = v23;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v52, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v55, v23, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
  int v26 = v76;
  *(void *)&long long v76 = v13;
  DWORD2(v76) = v36;
  *(void *)&long long v77 = v15;
  *((void *)&v77 + 1) = __PAIR64__(v35, v51);
  *(void *)&long long v78 = __PAIR64__(v32, v33);
  *((void *)&v78 + 1) = v34;
  *(void *)&long long v79 = v17;
  *((void *)&v79 + 1) = __PAIR64__(v49, v31);
  *(void *)&long long v80 = __PAIR64__(v47, v48);
  *((void *)&v80 + 1) = __PAIR64__(v45, v46);
  LODWORD(v81) = v44;
  *((void *)&v81 + 1) = v21;
  *(void *)Swift::String v82 = v22;
  *(_DWORD *)&v82[8] = v42;
  *(_DWORD *)&v82[12] = OffsetAttribute2;
  *(_DWORD *)&v82[16] = v43;
  *(_DWORD *)&v82[20] = v50;
  *(_DWORD *)&v82[24] = v41;
  uint64_t result = outlined release of _GestureInputs((uint64_t)&v76);
  int v28 = HIDWORD(v53[0]);
  uint64_t v29 = v53[1];
  int v30 = v54;
  *(_DWORD *)a4 = v26;
  *(_DWORD *)(a4 + 4) = v28;
  *(void *)(a4 + 8) = v29;
  *(_DWORD *)(a4 + 16) = v30;
  return result;
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance EventFilter<A>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  return static EventFilter._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t Gesture.eventFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = type metadata accessor for EventFilter();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a3, v8, a4);
}

uint64_t Gesture.eventFilter(allowedTypes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  swift_bridgeObjectRetain();
  Gesture.eventFilter(_:)((uint64_t)partial apply for closure #1 in Gesture.eventFilter(allowedTypes:), v6, a2, a3);

  return swift_release();
}

uint64_t closure #1 in Gesture.eventFilter(allowedTypes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = a1;
  if (!v16) {
    return 0;
  }
  uint64_t v2 = a2;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = v2;
    long long v18 = *(_OWORD *)(v2 + 16 * v3 + 32);
    outlined init with copy of AnyTrackedValue(v17, (uint64_t)v19);
    uint64_t v5 = *((void *)&v18 + 1);
    uint64_t v6 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(*((void *)&v18 + 1) + 48);
    uint64_t v7 = v18;
    uint64_t v8 = type metadata accessor for Optional();
    uint64_t v9 = *(void *)(v8 - 8);
    double v10 = MEMORY[0x270FA5388](v8);
    uint64_t v12 = (char *)&v16 - v11;
    v6(v19, v7, v5, v10);
    uint64_t v13 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1) {
      break;
    }
    ++v3;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    memset(v20, 0, 40);
    outlined destroy of EventType?((uint64_t)v20);
    uint64_t v2 = v4;
    if (v16 == v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  *(_OWORD *)((char *)&v20[1] + 8) = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v20);
  (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, v7);
  swift_bridgeObjectRelease();
  outlined destroy of EventType?((uint64_t)v20);
  return 1;
}

uint64_t Gesture.eventFilter(allowedType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Gesture.eventFilter(allowedType:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in Gesture.eventFilter(allowedType:), a4);
}

BOOL closure #1 in Gesture.eventFilter(allowedType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  uint64_t v5 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(a3 + 48);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  double v10 = &v16[-v9 - 8];
  v5(v16, a2, a3, v8);
  uint64_t v11 = *(void *)(a2 - 8);
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2);
  if (v12 == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
  }
  else
  {
    *((void *)&v18 + 1) = a2;
    uint64_t v19 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, a2);
  }
  outlined destroy of EventType?((uint64_t)&v17);
  return v12 != 1;
}

uint64_t Gesture.eventFilter(excludedType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Gesture.eventFilter(allowedType:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in Gesture.eventFilter(excludedType:), a4);
}

uint64_t Gesture.eventFilter(allowedType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  Gesture.eventFilter(_:)(a4, v10, a3, a5);

  return swift_release();
}

BOOL closure #1 in Gesture.eventFilter(excludedType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  uint64_t v5 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(a3 + 48);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v16[-v9 - 8];
  v5(v16, a2, a3, v8);
  uint64_t v11 = *(void *)(a2 - 8);
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2);
  if (v12 == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
  }
  else
  {
    *((void *)&v18 + 1) = a2;
    uint64_t v19 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, a2);
  }
  outlined destroy of EventType?((uint64_t)&v17);
  return v12 == 1;
}

uint64_t Gesture.eventFilter<A>(_:allowOtherTypes:_:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(void *)(v16 + 40) = a7;
  *(unsigned char *)(v16 + 48) = a1;
  *(void *)(v16 + 56) = a2;
  *(void *)(v16 + 64) = a3;
  swift_retain();
  Gesture.eventFilter(_:)((uint64_t)partial apply for closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:), v16, a4, a8);

  return swift_release();
}

uint64_t closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1, char a2, uint64_t (*a3)(unsigned char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v21 = a3;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v22[-v14 - 8];
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v22[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v22);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(a8 + 48))(v22, a6, a8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a6) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v19, v15, a6);
    a2 = v21(v19);
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v19, a6);
  }
  return a2 & 1;
}

uint64_t Gesture.eventFilter<A>(forType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return Gesture.eventFilter<A>(_:allowOtherTypes:_:)(1, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t Gesture.eventFilter<A>(allowedType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return Gesture.eventFilter<A>(_:allowOtherTypes:_:)(0, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t EventFilterEvents.modifier.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for EventFilter();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;

  return swift_retain();
}

unint64_t EventFilterEvents.value.getter(unint64_t a1, uint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  type metadata accessor for _DictionaryStorage<EventID, EventType>(0, (unint64_t *)&lazy cache variable for type metadata for [EventID : EventType], MEMORY[0x263F8D060]);
  uint64_t v5 = *(void *)AGGraphGetValue();
  _OWORD v8[2] = a2;
  int v9 = v3;
  int v10 = v4;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized Dictionary.optimisticFilter(_:)((uint64_t (*)(long long *, unsigned char *))partial apply for closure #1 in EventFilterEvents.value.getter, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  return v6;
}

uint64_t closure #1 in EventFilterEvents.value.getter(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v7);
  EventFilterEvents.modifier.getter(&v5);
  char v3 = v5(v7);
  swift_release();
  outlined destroy of (key: EventID, value: EventType)((uint64_t)v6);
  return v3 & 1;
}

uint64_t EventFilterPhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

unint64_t protocol witness for Rule.value.getter in conformance EventFilterEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = EventFilterEvents.value.getter(*v2, *(void *)(a1 + 16));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  return result;
}

uint64_t EventFilterPhase.value.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(AGGraphGetValue() + 8) == 1)
  {
    type metadata accessor for GesturePhase();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    return EventFilterPhase.phase.getter(a1);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance EventFilterPhase<A>@<X0>(uint64_t a1@<X8>)
{
  return EventFilterPhase.value.getter(a1);
}

uint64_t type metadata accessor for EventFilterEvents()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<FilteredEvents>()
{
  if (!lazy cache variable for type metadata for Attribute<FilteredEvents>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<FilteredEvents>);
    }
  }
}

uint64_t type metadata accessor for EventFilterPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245E48118()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.eventFilter(allowedTypes:)(uint64_t a1)
{
  return closure #1 in Gesture.eventFilter(allowedTypes:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_245E48158()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Gesture.eventFilter(allowedType:)(uint64_t a1)
{
  return closure #1 in Gesture.eventFilter(allowedType:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_245E48170()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Gesture.eventFilter(excludedType:)(uint64_t a1)
{
  return closure #1 in Gesture.eventFilter(excludedType:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_245E48188@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@unowned Bool);
  a2[1] = v5;

  return swift_retain();
}

uint64_t sub_245E481F8()
{
  return 8;
}

void *sub_245E48204(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for FilteredEvents()
{
  return &type metadata for FilteredEvents;
}

uint64_t base witness table accessor for _AttributeBody in EventFilterPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in EventFilterEvents<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (uint64_t (*)(void *, unsigned char *))isStackAllocationSafe;
  v13[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, a3, v6);
    MEMORY[0x24C527CC0](v11, -1, -1);
  }
  return a2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, unsigned char *))
{
  uint64_t v23 = (unint64_t *)result;
  uint64_t v24 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 64);
  int64_t v27 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    unint64_t v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_17:
    uint64_t v17 = *(void *)(a3 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    v26[0] = v20;
    v26[1] = v19;
    outlined init with copy of AnyTrackedValue(v17 + 40 * v13, (uint64_t)v25);
    char v21 = a4(v26, v25);
    unint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (v4) {
      return result;
    }
    if (v21)
    {
      *(unint64_t *)((char *)v23 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      BOOL v14 = __OFADD__(v24++, 1);
      if (v14) {
        goto LABEL_30;
      }
    }
  }
  BOOL v14 = __OFADD__(v7++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v27) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  }
  unint64_t v15 = *(void *)(v8 + 8 * v7);
  if (v15)
  {
LABEL_16:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v16 = v7 + 1;
  if (v7 + 1 >= v27) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 2;
  if (v7 + 2 >= v27) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15) {
    goto LABEL_15;
  }
  int64_t v16 = v7 + 3;
  if (v7 + 3 >= v27) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
  }
  unint64_t v15 = *(void *)(v8 + 8 * v16);
  if (v15)
  {
LABEL_15:
    int64_t v7 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v27) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, a2, v24, a3);
    }
    unint64_t v15 = *(void *)(v8 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  unsigned int v45 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  int v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = v42 + 32;
  uint64_t v40 = v42 + 16;
  uint64_t v15 = result + 64;
  int64_t v38 = a4;
  uint64_t v16 = v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v37) {
        return v12;
      }
      unint64_t v20 = v36[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          return v12;
        }
        unint64_t v20 = v36[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            return v12;
          }
          unint64_t v20 = v36[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37) {
              return v12;
            }
            unint64_t v20 = v36[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v37) {
                  return v12;
                }
                unint64_t v20 = v36[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v43 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v24 = v41;
    uint64_t v23 = v42;
    uint64_t v25 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v25 * v18, v16);
    outlined init with copy of NamedImage.Cache.WeakCatalog(a4[7] + 8 * v18, (uint64_t)v47);
    int v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v45, v24, v16);
    outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v47, (uint64_t)v46);
    _sSo21NSAttributedStringKeyaABSHSCWlTm_1(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v26((char *)(*(void *)(v12 + 48) + v30 * v25), v45, v44);
    uint64_t result = outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v46, *(void *)(v12 + 56) + 8 * v30);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v43;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in EventFilterEvents.value.getter(void *a1, uint64_t a2)
{
  return closure #1 in EventFilterEvents.value.getter(a1, a2);
}

uint64_t outlined destroy of (key: EventID, value: EventType)(uint64_t a1)
{
  type metadata accessor for (key: EventID, value: EventType)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = type metadata accessor for EventType();
    unint64_t v7 = lazy protocol witness table accessor for type EventID and conformance EventID();
    unint64_t v8 = a3(a1, &type metadata for EventID, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_245E49B74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EventType) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for _DictionaryStorage<Subview.ID, ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Subview.ID, ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item>)
  {
    type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Subview.ID, ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_245E49CF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1)
{
  return closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(a1, *(unsigned char *)(v1 + 48), *(uint64_t (**)(unsigned char *))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t _sSo21NSAttributedStringKeyaABSHSCWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of static ContainerValueKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t DisplayList.ViewUpdater.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for ViewRendererBase.destroy(rootView:) in conformance DisplayList.ViewUpdater()
{
  swift_beginAccess();
  uint64_t v1 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(v0 + 32);
  DisplayList.ViewUpdater.ViewCache.reclaim(time:)(v2);
  swift_endAccess();
  return swift_unknownObjectRelease();
}

BOOL protocol witness for ViewRendererBase.viewCacheIsEmpty.getter in conformance DisplayList.ViewUpdater()
{
  swift_beginAccess();
  return *(void *)(*(void *)(v0 + 40) + 16) == 0;
}

uint64_t method lookup function for DisplayList.ViewUpdater(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayList.ViewUpdater);
}

uint64_t sub_245E49F7C()
{
  return swift_deallocObject();
}

uint64_t sub_245E49F8C()
{
  return swift_deallocObject();
}

uint64_t sub_245E49F9C()
{
  return swift_deallocObject();
}

uint64_t sub_245E49FAC()
{
  return swift_deallocObject();
}

__n128 __swift_memcpy18_2(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo.Seeds(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo.Seeds(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18) = v3;
  return result;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_unknownObjectRetain();
  id v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  long long v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 90);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewInfo.ID()
{
  return &type metadata for DisplayList.ViewUpdater.ViewInfo.ID;
}

double AnyViewFactory.encoding()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

{
  return AnyViewFactory.encoding()(a1);
}

uint64_t PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(a3, a4, a1, a2);
}

uint64_t PlatformViewFactory.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(a3, a4, a1, a2);
}

uint64_t RendererLeafView<>.content()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 16));
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
  *a3 = v7 | 0x6000000000000000;
  return result;
}

uint64_t PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  __int16 v3 = *(_WORD *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 10);
  unint64_t v9 = a2;
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = v4;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v6, &v9);

  return swift_release();
}

{
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  unint64_t v9;
  uint64_t vars8;

  uint64_t v2 = *(void *)a1;
  __int16 v3 = *(_WORD *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 10);
  unint64_t v9 = a2;
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = v4;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v6, &v9);

  return swift_release();
}

void _DisplayList_ViewFactory.identity.getter(_DWORD *a1@<X8>)
{
}

{
  *a1 = 0;
}

uint64_t RendererLeafView<>.content()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t *a3@<X8>)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 16));
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
  *a3 = v7 | 0xB000000000000000;
  return result;
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = _typeName(_:qualified:)();
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)(a1, v9, v10, v11, a5, a6);

  return swift_bridgeObjectRelease();
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = one-time initialization token for _shared;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static ViewDecoders._shared;
  unint64_t v13 = (os_unfair_lock_s *)((char *)static ViewDecoders._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = v12[3];
  void v12[3] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a5, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  void v12[3] = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v13);

  return swift_release();
}

uint64_t static ViewDecoders.registerStandard(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CodableViewFactory.encode(to:)(long long *a1)
{
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 16))(&v22, v4, v5);
  if (*((void *)&v22 + 1))
  {
    long long v25 = v22;
    outlined init with take of Decodable & Encodable((long long *)&v23, &v26);
    long long v6 = v25;
    outlined init with take of Decodable & Encodable((long long *)&v26, &v28);
    if (v6 == __PAIR128__(0xE000000000000000, 0) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      ProtobufEncoder.stringFieldAlways(_:_:)(1);
      swift_bridgeObjectRelease();
      if (v2)
      {
LABEL_12:
        unint64_t v13 = &v28;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
    }
    uint64_t v15 = v29;
    uint64_t v16 = __swift_project_boxed_opaque_existential_1(&v28, v29);
    uint64_t v17 = *((void *)a1 + 2);
    long long v25 = *a1;
    uint64_t v26 = v17;
    long long v27 = *(long long *)((char *)a1 + 24);
    uint64_t v18 = ProtobufEncoder.binaryPlistData<A>(for:)((uint64_t)v16, v15);
    if (!v2)
    {
      unint64_t v20 = v18;
      unint64_t v21 = v19;
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v20, v21);
      outlined consume of Data._Representation(v20, v21);
    }
    goto LABEL_12;
  }
  outlined destroy of (id: String, data: Decodable & Encodable)?((uint64_t)&v22, &lazy cache variable for type metadata for (id: String, data: Decodable & Encodable)?, (void (*)(uint64_t))type metadata accessor for (id: String, data: Decodable & Encodable));
  uint64_t v7 = *((void *)a1 + 2);
  long long v22 = *a1;
  uint64_t v23 = v7;
  long long v24 = *(long long *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)&v25);
  uint64_t v8 = v27;
  if (!(void)v27) {
    return outlined destroy of (id: String, data: Decodable & Encodable)?((uint64_t)&v25, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (void (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
  }
  uint64_t v9 = *((void *)&v27 + 1);
  __swift_project_boxed_opaque_existential_1(&v25, v27);
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v12, v8, v9);
  unint64_t v13 = &v25;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t CodableViewFactory.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v6 - 8);
  long long v58 = xmmword_2461B9DE0;
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v7 >= v8)
  {
    uint64_t v9 = 0;
    *(void *)(a1 + 24) = 0;
    unint64_t v11 = 0xC000000000000000;
LABEL_4:
    uint64_t result = outlined consume of Data._Representation(v9, v11);
    *(void *)(a2 + 24) = &type metadata for EmptyViewFactory;
    *(void *)(a2 + 32) = &protocol witness table for EmptyViewFactory;
    return result;
  }
  uint64_t v56 = a2;
  uint64_t v9 = 0;
  uint64_t v59 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0xC000000000000000;
  do
  {
    unint64_t v14 = *(void *)(a1 + 24);
    if (v14)
    {
      unint64_t v15 = *(void *)(a1 + 32);
      if (v7 < v15) {
        goto LABEL_14;
      }
      if (v15 < v7) {
        goto LABEL_50;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_51;
    }
    unint64_t v14 = v16;
    if (v16 < 8) {
      goto LABEL_50;
    }
LABEL_14:
    if (v14 >> 3 == 2)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_59;
      }
      long long v27 = *(void **)(a1 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
      }
      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1) {
        long long v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
      }
      v27[2] = v29 + 1;
      v27[v29 + 4] = v8;
      *(void *)(a1 + 40) = v27;
      uint64_t v30 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_62;
      }
      if (v30 < 0) {
        goto LABEL_69;
      }
      unint64_t v31 = *(void *)(a1 + 8) + v30;
      if (v8 < v31)
      {
LABEL_59:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_62:
        unint64_t v42 = *((void *)&v58 + 1);
        uint64_t v41 = v58;
LABEL_63:
        outlined consume of Data._Representation(v41, v42);
        return swift_bridgeObjectRelease();
      }
      *(void *)(a1 + 16) = v31;
      uint64_t v32 = Data.init(from:)(a1);
      uint64_t v34 = *(void **)(a1 + 40);
      if (!v34[2]) {
        goto LABEL_70;
      }
      uint64_t v9 = v32;
      unint64_t v11 = v33;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v35 = v34[2];
        if (!v35) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
        uint64_t v35 = v34[2];
        if (!v35)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_51:
          uint64_t v41 = v9;
          unint64_t v42 = v11;
          goto LABEL_63;
        }
      }
      uint64_t v36 = v35 - 1;
      uint64_t v37 = v34[v36 + 4];
      v34[2] = v36;
      *(void *)(a1 + 40) = v34;
      *(void *)(a1 + 16) = v37;
      outlined consume of Data._Representation(v58, *((unint64_t *)&v58 + 1));
      *(void *)&long long v58 = v9;
      *((void *)&v58 + 1) = v11;
    }
    else if (v14 >> 3 == 1)
    {
      swift_bridgeObjectRelease();
      if ((v14 & 7) != 2) {
        goto LABEL_58;
      }
      uint64_t v17 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_65;
      }
      uint64_t v18 = v17;
      if (v17 < 0)
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      uint64_t v10 = *(void *)(a1 + 8);
      if (v8 < v10 + v17)
      {
LABEL_58:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_65;
      }
      *(void *)(a1 + 8) = v10 + v17;
      if (v17)
      {
        uint64_t v19 = v10 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
        uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v22 = v21;
        if (__OFADD__(v19, v18)) {
          goto LABEL_71;
        }
        if (v19 + v18 < v19) {
          goto LABEL_72;
        }
        uint64_t v23 = v20;
        uint64_t v24 = Data._Representation.subscript.getter();
        unint64_t v26 = v25;
        outlined consume of Data._Representation(v23, v22);
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v26 = 0xC000000000000000;
      }
      static String.Encoding.utf8.getter();
      uint64_t v38 = String.init(data:encoding:)();
      if (!v39)
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v24, v26);
LABEL_65:
        uint64_t v54 = v9;
        unint64_t v55 = v11;
        return outlined consume of Data._Representation(v54, v55);
      }
      uint64_t v10 = v39;
      uint64_t v59 = v38;
      outlined consume of Data._Representation(v24, v26);
    }
    else
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_51;
          }
          break;
        case 1uLL:
          unint64_t v13 = *(void *)(a1 + 8) + 8;
          if (v8 < v13) {
            goto LABEL_50;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t v40 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_51;
          }
          if (v40 < 0) {
            goto LABEL_73;
          }
          unint64_t v13 = *(void *)(a1 + 8) + v40;
          if (v8 < v13) {
            goto LABEL_50;
          }
LABEL_6:
          *(void *)(a1 + 8) = v13;
          break;
        case 5uLL:
          unint64_t v13 = *(void *)(a1 + 8) + 4;
          if (v8 < v13) {
            goto LABEL_50;
          }
          goto LABEL_6;
        default:
          goto LABEL_50;
      }
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
  }
  while (v7 < v8);
  *(void *)(a1 + 24) = 0;
  if (!v10)
  {
    a2 = v56;
    goto LABEL_4;
  }
  uint64_t v43 = one-time initialization token for _shared;
  swift_bridgeObjectRetain();
  if (v43 != -1) {
LABEL_74:
  }
    swift_once();
  uint64_t v44 = static ViewDecoders._shared;
  unsigned int v45 = (os_unfair_lock_s *)((char *)static ViewDecoders._shared + 16);
  swift_retain();
  os_unfair_lock_lock(v45);
  uint64_t v46 = v44[3];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v45);
  swift_release();
  if (!*(void *)(v46 + 16) || (unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v10), (v48 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CodableViewFactory.Error and conformance CodableViewFactory.Error();
    swift_allocError();
    *BOOL v53 = v59;
    v53[1] = v10;
    swift_willThrow();
    unint64_t v55 = *((void *)&v58 + 1);
    uint64_t v54 = v58;
    return outlined consume of Data._Representation(v54, v55);
  }
  unsigned int v49 = (uint64_t *)(*(void *)(v46 + 56) + 24 * v47);
  uint64_t v50 = *v49;
  uint64_t v51 = v49[1];
  uint64_t v52 = v49[2];
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  specialized project #1 <A>(type:) in CodableViewFactory.init(from:)((long long *)a1, (uint64_t *)&v58, v50, v51, v52, (uint64_t *)v57);
  uint64_t result = outlined consume of Data._Representation(v58, *((unint64_t *)&v58 + 1));
  if (!v3) {
    return outlined init with take of ScrollStateRequest(v57, v56);
  }
  return result;
}

uint64_t specialized project #1 <A>(type:) in CodableViewFactory.init(from:)@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  long long v15 = *a1;
  swift_beginAccess();
  uint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  a6[3] = a3;
  a6[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  id v13 = (id)v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v10, v11);
  ProtobufDecoder.value<A>(fromBinaryPlist:type:)(a3, a4, (uint64_t)boxed_opaque_existential_1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = outlined consume of Data._Representation(v10, v11);
  if (v17) {
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a6);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableViewFactory(long long *a1)
{
  return CodableViewFactory.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableViewFactory@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CodableViewFactory.init(from:)(a1, a2);
}

ValueMetadata *EmptyViewFactory.viewType.getter()
{
  return &type metadata for EmptyView;
}

uint64_t EmptyViewFactory.MissingLayer.draw(in:)(CGContext *a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = one-time initialization token for shared;
  id v4 = v1;
  if (v3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v6 = static CoreGlue2.shared;
  v5(&v9);

  v8[0] = v9;
  v8[1] = v10;
  specialized static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)(a1, v8, 0, 1, v4);

  swift_release();
  return swift_release();
}

uint64_t EmptyViewFactory.platformLayerType.getter()
{
  return type metadata accessor for EmptyViewFactory.MissingLayer();
}

uint64_t protocol witness for PlatformLayerFactory.platformLayerType.getter in conformance EmptyViewFactory()
{
  return type metadata accessor for EmptyViewFactory.MissingLayer();
}

uint64_t EmptyViewFactory.makePlatformView()()
{
  return 0;
}

void EmptyViewFactory.features.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EmptyViewFactory.renderPlatformLayer(in:size:renderer:)(double a1, double a2)
{
  uint64_t v4 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v5 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v5, v4, 0, 1);
  GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
  RBDrawingStateDrawLayer();

  return swift_release();
}

void protocol witness for PlatformViewFactory.features.getter in conformance EmptyViewFactory(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EmptyViewFactory.makePlatformGroup()()
{
  return 0;
}

uint64_t EmptyViewFactory.needsUpdateFor(newValue:)()
{
  return 0;
}

uint64_t EmptyViewFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, unint64_t a2, double a3, double a4)
{
  uint64_t v7 = *(void *)a1;
  __int16 v8 = *(_WORD *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 10);
  uint64_t v10 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v11 = swift_retain();
  GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
  GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3));
  RBDrawingStateDrawLayer();
  swift_release();
  unint64_t v16 = a2;
  uint64_t v13 = v7;
  __int16 v14 = v8;
  char v15 = v9;
  swift_retain();
  DisplayList.GraphicsRenderer.render(list:in:)(&v13, &v16);

  return swift_release();
}

uint64_t protocol witness for PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:) in conformance EmptyViewFactory(uint64_t a1, unint64_t a2, double a3, double a4)
{
  return EmptyViewFactory.renderPlatformGroup(_:in:size:renderer:)(a1, a2, a3, a4);
}

uint64_t EmptyViewFactory.makeView()()
{
  type metadata accessor for AnyViewStorage<EmptyView>();

  return swift_allocObject();
}

uint64_t protocol witness for _DisplayList_ViewFactory.makeView() in conformance EmptyViewFactory()
{
  type metadata accessor for AnyViewStorage<EmptyView>();

  return swift_allocObject();
}

uint64_t specialized PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a4 + 112) != 2)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    specialized static Log.externalWarning(_:)(0xD000000000000026, 0x800000024621BB80);
    swift_bridgeObjectRelease();
    uint64_t v10 = RBDrawingStateBeginLayer();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v11 = swift_retain();
    GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v11, v10, 0, 1);
    GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1));
    RBDrawingStateDrawLayer();
    return swift_release();
  }
  return result;
}

uint64_t sub_245E4B830()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t type metadata accessor for EmptyViewFactory.MissingLayer()
{
  return self;
}

void type metadata accessor for AnyViewStorage<EmptyView>()
{
  if (!lazy cache variable for type metadata for AnyViewStorage<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for AnyViewStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyViewStorage<EmptyView>);
    }
  }
}

uint64_t dispatch thunk of AnyViewFactory.viewType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyViewFactory.encoding()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformLayerFactory.platformLayerType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformLayerFactory.updatePlatformLayer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PlatformViewFactory.makePlatformView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformViewFactory.updatePlatformView(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformViewFactory.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PlatformViewFactory.features.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PlatformGroupFactory.makePlatformGroup()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PlatformGroupFactory.needsUpdateFor(newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PlatformGroupFactory.updatePlatformGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PlatformGroupFactory.platformGroupContainer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of PlatformGroupFactory.features.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _DisplayList_ViewFactory.makeView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _DisplayList_ViewFactory.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ViewDecoders()
{
  return &type metadata for ViewDecoders;
}

ValueMetadata *type metadata accessor for EmptyViewFactory()
{
  return &type metadata for EmptyViewFactory;
}

uint64_t getEnumTagSinglePayload for CodableViewFactory.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CodableViewFactory.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for CodableViewFactory.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableViewFactory.Error()
{
  return &type metadata for CodableViewFactory.Error;
}

ValueMetadata *type metadata accessor for CodableViewFactory()
{
  return &type metadata for CodableViewFactory;
}

void type metadata accessor for AtomicBuffer<ViewDecoders>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<ViewDecoders>)
  {
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ViewDecoders>);
    }
  }
}

void type metadata accessor for (id: String, data: Decodable & Encodable)()
{
  if (!lazy cache variable for type metadata for (id: String, data: Decodable & Encodable))
  {
    type metadata accessor for Decodable & Encodable();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (id: String, data: Decodable & Encodable));
    }
  }
}

uint64_t outlined destroy of (id: String, data: Decodable & Encodable)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for (id: String, data: Decodable & Encodable)?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for (id: String, data: Decodable & Encodable)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

double AnyShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 80))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t AnyShape.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a5 + 88))(a1, a2 & 1);
}

uint64_t AnyShape.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t key path setter for AnyShape.animatableData : AnyShape(void *a1, uint64_t *a2)
{
  outlined init with copy of _AnyAnimatableData(a1, v8);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *a2;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(v8, v7);
    (*(void (**)(void *))(*(void *)v4 + 104))(v7);
    return outlined destroy of _AnyAnimatableData((uint64_t)v8);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 120))(v8);
    outlined destroy of _AnyAnimatableData((uint64_t)v8);
    *a2 = v6;
    return swift_release();
  }
}

uint64_t AnyShape.animatableData.setter(void *a1)
{
  uint64_t v2 = v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(void *))(*(void *)v5 + 104))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 120))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *uint64_t v2 = v7;
    return swift_release();
  }
}

void (*AnyShape.animatableData.modify(void *a1))(void **a1, char a2)
{
  unint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(void **)v1 + 96))();
  return AnyShape.animatableData.modify;
}

void AnyShape.animatableData.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a1 + 5;
  uint64_t v4 = (uint64_t *)(*a1)[15];
  if (a2)
  {
    outlined init with copy of _AnyAnimatableData(*a1, v3);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v3, v2 + 10);
      (*(void (**)(void *))(*(void *)v6 + 104))(v2 + 10);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
    }
    else
    {
      Swift::String v9 = (uint64_t *)v2[15];
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v6 + 120))(v3);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
      *Swift::String v9 = v10;
      swift_release();
    }
    goto LABEL_7;
  }
  int v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v4;
  if (v7)
  {
    outlined init with copy of _AnyAnimatableData(v2, v3);
    (*(void (**)(void *))(*(void *)v8 + 104))(v3);
LABEL_7:
    outlined destroy of _AnyAnimatableData((uint64_t)v2);
    goto LABEL_9;
  }
  uint64_t v11 = (uint64_t *)v2[15];
  uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v8 + 120))(v2);
  outlined destroy of _AnyAnimatableData((uint64_t)v2);
  *uint64_t v11 = v12;
  swift_release();
LABEL_9:

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance AnyShape()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnyShape(void *a1)
{
  uint64_t v2 = v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(void *))(*(void *)v5 + 104))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 120))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *uint64_t v2 = v7;
    return swift_release();
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnyShape(void *a1))(void **a1, char a2)
{
  unint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(void **)v1 + 96))();
  return AnyShape.animatableData.modify;
}

void AnyShapeBox.path(in:)()
{
}

void AnyShapeBox.sizeThatFits(_:)()
{
}

void AnyShapeBox.animatableData.getter()
{
}

void AnyShapeBox.animatableData.setter()
{
}

void AnyShapeBox.withAnimatableData(_:)()
{
}

uint64_t AnyShapeBox.deinit()
{
  return v0;
}

uint64_t AnyShapeBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t instantiation function for generic protocol witness table for AnyShape(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnyShape and conformance AnyShape();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245E4C514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t method lookup function for AnyShapeBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyShapeBox);
}

uint64_t _AnyShapeBox.animatableData.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  _AnyAnimatableData.update<A>(_:)(v4, *(void *)(v3 + 136), *(void *)(*(void *)(v3 + 144) + 8));
  swift_endAccess();
  return outlined destroy of _AnyAnimatableData(a1);
}

uint64_t _AnyShapeBox.withAnimatableData(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  _AnyAnimatableData.update<A>(_:)((uint64_t)v6, v3, *(void *)(*(void *)(v2 + 144) + 8));
  return _AnyShapeBox.__allocating_init(_:)((uint64_t)v6);
}

uint64_t _AnyShapeBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
}

uint64_t _AnyShapeBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));

  return swift_deallocClassInstance();
}

uint64_t Gesture.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v19 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for MapGesture();
  uint64_t v20 = (uint64_t (*)@<X0>(uint64_t@<X8>))v12;
  unint64_t v21 = (void *)a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = a5;
  uint64_t v13 = type metadata accessor for ModifierGesture();
  MEMORY[0x270FA5388](v13 - 8);
  char v15 = (char *)&v18 - v14;
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = AssociatedTypeWitness;
  uint64_t v16[3] = a4;
  v16[4] = a1;
  v16[5] = a2;
  swift_retain();
  uint64_t v20 = partial apply for closure #1 in MapGesture.init(_:);
  unint64_t v21 = v16;
  Gesture.modifier<A>(_:)((uint64_t)&v20, a3, v12, (uint64_t)v15);
  swift_release();
  return _MapGesture.init(_body:)((uint64_t)v15, v19);
}

uint64_t type metadata accessor for MapGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MapGesture.body.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t MapGesture.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MapGesture.body.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MapGesture.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t (*MapGesture.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)@<X0>(uint64_t a1@<X8>)@<X8>))@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((void *)result + 2) = a3;
  *((void *)result + 3) = a4;
  *((void *)result + 4) = a1;
  *((void *)result + 5) = a2;
  *a5 = partial apply for closure #1 in MapGesture.init(_:);
  a5[1] = result;
  return result;
}

uint64_t static MapGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  long long v6 = a2[5];
  long long v29 = a2[4];
  long long v30 = v6;
  long long v31 = a2[6];
  long long v7 = a2[1];
  long long v25 = *a2;
  long long v26 = v7;
  long long v8 = a2[3];
  long long v27 = a2[2];
  long long v28 = v8;
  uint64_t v10 = *(void *)((char *)a2 + 116);
  unsigned int v32 = *((_DWORD *)a2 + 28);
  unsigned int v9 = v32;
  uint64_t v33 = v10;
  a3(v19, &v25);
  uint64_t v11 = v19[1];
  int v12 = v20;
  uint64_t v13 = type metadata accessor for GesturePhase();
  uint64_t v14 = type metadata accessor for MapPhase();
  uint64_t v18 = v19[0];
  *(void *)&long long v25 = __PAIR64__(v19[0], v5);
  *((void *)&v25 + 1) = v9;
  uint64_t v22 = v13;
  uint64_t v23 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v25, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v21, v14, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  LODWORD(v14) = v19[0];
  *(void *)&long long v25 = v18;
  *((void *)&v25 + 1) = v11;
  LODWORD(v26) = v12;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.withPhase<A>(_:)(v14, a4);
  return swift_bridgeObjectRelease();
}

uint64_t MapPhase.modifier.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for MapGesture();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;

  return swift_retain();
}

uint64_t MapPhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t MapPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance MapGesture<A, B>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  return static MapGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t MapPhase.updateValue()(uint64_t a1)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v15 - v4;
  uint64_t v6 = type metadata accessor for GesturePhase();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unsigned int v9 = (char *)&v15 - v8;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    uint64_t v16 = v2;
    MapPhase.modifier.getter(v19);
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    uint64_t v11 = (void (*)(char *))v19[0];
    MapPhase.phase.getter((uint64_t)v5);
    v11(v5);
    swift_release();
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v16);
    MEMORY[0x270FA5388](v12);
    *(&v15 - 2) = a1;
    *(&v15 - 1) = swift_getWitnessTable();
    uint64_t v13 = v17;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v15 - 4), v17, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v14);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v9, v13);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance MapPhase<A, B>()
{
  return MapPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance MapPhase<A, B>()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance MapPhase<A, B>(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*protocol witness for ResettableGestureRule.lastResetSeed.modify in conformance MapPhase<A, B>())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MapPhase<A, B>()
{
  return specialized MapPhase.description.getter();
}

uint64_t Gesture.mapPhase<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = type metadata accessor for MapGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a3, v8, a4);
}

uint64_t _MapGesture.init(_body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for MapGesture();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ModifierGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_245E4D294()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MapGesture.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void (**)(char *))(v1 + 32);
  uint64_t v5 = type metadata accessor for GesturePhase();
  return GesturePhase.map<A>(_:)(v4, v5, v3, a1);
}

uint64_t Gesture.discrete(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(unsigned char *)(v8 + 32) = a1;
  swift_getAssociatedTypeWitness();
  Gesture.mapPhase<A>(_:)((uint64_t)partial apply for closure #1 in Gesture.discrete(_:), v8, a2, a4);

  return swift_release();
}

uint64_t closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for GesturePhase();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - v9;
  v13.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  if (a2)
  {
    uint64_t v17 = v12;
    uint64_t v23 = a3;
    v16(v10, a1, v7, v13.n128_f64[0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v19(v15, v10, AssociatedTypeWitness);
      int v20 = v23;
      v19(v23, v15, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, AssociatedTypeWitness);
      return swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a3 = v23;
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v16)(a3, a1, v7, v13);
}

double static _MapGesture._makeGesture(gesture:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v8 = *a1;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v41 = *(_OWORD *)(a2 + 64);
  long long v42 = v9;
  long long v43 = *(_OWORD *)(a2 + 96);
  uint64_t v44 = *(void *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v37 = *(_OWORD *)a2;
  long long v38 = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v39 = *(_OWORD *)(a2 + 32);
  long long v40 = v11;
  int v12 = *(_DWORD *)(a2 + 120);
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for MapGesture();
  uint64_t WitnessTable = swift_getWitnessTable();
  *((void *)&v25 + 1) = a3;
  *(void *)&long long v26 = WitnessTable;
  *((void *)&v26 + 1) = a4;
  uint64_t v15 = type metadata accessor for ModifierGesture();
  *(void *)&long long v25 = __PAIR64__(HIDWORD(v13), v8);
  type metadata accessor for _MapGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _MapGesture._makeGesture(gesture:inputs:), v15, v22);
  long long v29 = v41;
  long long v30 = v42;
  long long v31 = v43;
  uint64_t v32 = v44;
  long long v25 = v37;
  long long v26 = v38;
  long long v27 = v39;
  long long v28 = v40;
  int v33 = v12;
  static ModifierGesture._makeGesture(gesture:inputs:)((int *)v22, &v25, v13, a3, WitnessTable, a4, (uint64_t)&v34);
  if ((v12 & 8) != 0 && !(swift_conformsToProtocol2() ? v15 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v17 = 2;
    }
    else {
      char v17 = 1;
    }
    char v24 = v17;
    long long v29 = v41;
    long long v30 = v42;
    long long v31 = v43;
    uint64_t v32 = v44;
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    long long v28 = v40;
    int v33 = v12;
    *(double *)uint64_t v22 = v34;
    v22[1] = v35;
    int v23 = v36;
    type metadata accessor for _GestureOutputs();
    unint64_t v18 = _GestureOutputs.debugData.getter();
    LOBYTE(v22[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v15, &v24, 0x100000000, &v25, v18 | ((HIDWORD(v18) & 1) << 32), 0x100000000);
  }
  uint64_t v19 = v35;
  int v20 = v36;
  double result = v34;
  *(double *)a5 = v34;
  *(void *)(a5 + 8) = v19;
  *(_DWORD *)(a5 + 16) = v20;
  return result;
}

uint64_t closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v10[2] = type metadata accessor for _MapGesture();
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for MapGesture();
  uint64_t v13 = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = a4;
  uint64_t v11 = type metadata accessor for ModifierGesture();
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, v11, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v12;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _MapGesture<A, B>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static _MapGesture._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 32), a4);
}

uint64_t type metadata accessor for MapPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245E4D9F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in Gesture.discrete(_:)(a1, *(unsigned char *)(v2 + 32), a2);
}

uint64_t partial apply for closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static _MapGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for _MapGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for _MapGesture<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245E4DA6C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_245E4DA78(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_245E4DABC()
{
  return 16;
}

__n128 sub_245E4DAC8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _MapGesture()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for MapGesture();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ModifierGesture();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _MapGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E4DD18);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _MapGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245E4DF0CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *unint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for MapPhase<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in MapPhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t specialized MapPhase.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x209286E22070614DLL;
}

ValueMetadata *type metadata accessor for Text.Effect.Drawable()
{
  return &type metadata for Text.Effect.Drawable;
}

uint64_t type metadata accessor for Text.Effect.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Text.Effect.Configuration.StyleModifier.updateContent(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v11 = (char *)&v30 - v10;
  double v13 = MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a3, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for ()();
    unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))&v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      unint64_t v18 = (void *)*a1;
      uint64_t v19 = v17(*a1, a1[1], a1[2]);
      uint64_t v21 = v20;
      uint64_t v31 = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v31;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      return swift_release();
    }
  }
  else
  {
    char v24 = (void *)*a1;
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(a2, *a1, a1[1], a1[2]);
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t result = swift_release();
    *a1 = v25;
    a1[1] = v27;
    a1[2] = v29;
  }
  return result;
}

uint64_t Text.Effect.Configuration.updateContent(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Text.Effect.Configuration.StyleModifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v17 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v18 = a3;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  BidirectionalCollection.reversed()();
  uint64_t v10 = v19;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = MEMORY[0x24C522EA0](v11, v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    return swift_bridgeObjectRelease();
  }
  while (!__OFSUB__(v12--, 1))
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v12, v6);
    }
    else
    {
      uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
      if (v17 != 8) {
        goto LABEL_11;
      }
      uint64_t v19 = result;
      (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v9, &v19, v6);
      swift_unknownObjectRelease();
    }
    Text.Effect.Configuration.StyleModifier.updateContent(_:for:)(a1, a2, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (!v12) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Text.Effect.Configuration.drawable(for:timing:quantization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t, _OWORD *, _OWORD *);
  long long v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[3];
  uint64_t v34;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Text.Effect.DrawableFragment();
  FunctionTypeMetadata3 = swift_getFunctionTypeMetadata3();
  uint64_t v7 = swift_bridgeObjectRetain();
  if (!MEMORY[0x24C522EA0](v7, FunctionTypeMetadata3))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v8 = 0;
  uint64_t v9 = a5 + 40;
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (__OFADD__(v8, 1)) {
      break;
    }
    uint64_t v29 = v8 + 1;
    uint64_t v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, _OWORD *))(v9 - 8);
    uint64_t v12 = *(_OWORD *)(a1 + 16);
    v33[0] = *(_OWORD *)a1;
    v33[1] = v12;
    v33[2] = *(_OWORD *)(a1 + 32);
    double v34 = *(void *)(a1 + 48);
    double v13 = *(_OWORD *)(a3 + 16);
    v31[0] = *(_OWORD *)a3;
    v31[1] = v13;
    uint64_t v32 = *(void *)(a3 + 32);
    swift_retain();
    v11(&v30, a2, v33, v31);
    uint64_t v14 = v30;
    int v15 = *(void *)(v30 + 16);
    uint64_t v16 = v10[2];
    uint64_t v17 = v16 + v15;
    if (__OFADD__(v16, v15)) {
      goto LABEL_25;
    }
    int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v17 <= v10[3] >> 1)
    {
      if (*(void *)(v14 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v16 <= v17) {
        uint64_t v19 = v16 + v15;
      }
      else {
        uint64_t v19 = v16;
      }
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, v10);
      if (*(void *)(v14 + 16))
      {
LABEL_15:
        uint64_t v20 = v10[2];
        if ((v10[3] >> 1) - v20 < v15) {
          goto LABEL_27;
        }
        uint64_t v21 = (unint64_t)&v10[2 * v20 + 4];
        if (v14 + 32 < v21 + 16 * v15 && v21 < v14 + 32 + 16 * v15) {
          goto LABEL_29;
        }
        swift_arrayInitWithCopy();
        if (v15)
        {
          uint64_t v22 = v10[2];
          int v23 = __OFADD__(v22, v15);
          char v24 = v22 + v15;
          if (v23) {
            goto LABEL_28;
          }
          void v10[2] = v24;
        }
        goto LABEL_4;
      }
    }
    if (v15) {
      goto LABEL_26;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    v9 += 16;
    ++v8;
    if (v29 == MEMORY[0x24C522EA0](a5, FunctionTypeMetadata3))
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Text.Effect.Configuration.StyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for Text.Effect.Drawable.Fragment()
{
  return &type metadata for Text.Effect.Drawable.Fragment;
}

uint64_t type metadata completion function for Text.Effect.Configuration.StyleModifier()
{
  v2[4] = MEMORY[0x263F8EE70] + 64;
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.Configuration.StyleModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v7 = 16;
  }
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || (v7 | 1) > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v7);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)a2 + 2;
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      uint64_t v12 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      double v13 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      *((unsigned char *)a1 + v7) = 1;
    }
    else
    {
      uint64_t v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((unsigned char *)a1 + v7) = 0;
    }
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Text.Effect.Configuration.StyleModifier(_DWORD *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  unint64_t v4 = 16;
  if (((v3 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
    unint64_t v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + v4);
  uint64_t v6 = v4 & 0xFFFFFFF8;
  if (v5 >= 2 && v6 != 0) {
    unsigned int v5 = *a1 + 2;
  }
  if (v5 == 1) {
    (*(void (**)(_DWORD *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  }

  return swift_release();
}

void *initializeWithCopy for Text.Effect.Configuration.StyleModifier(void *a1, unint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
    unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v6 = 16;
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2 && (v6 & 0xFFFFFFF8) != 0) {
    unsigned int v7 = *(_DWORD *)a2 + 2;
  }
  if (v7 == 1)
  {
    (*(void (**)(void *, unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v9 = (void *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
    a2 = (a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    uint64_t v9 = a1;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *uint64_t v9 = *(void *)a2;
  v9[1] = v11;
  swift_retain();
  *((unsigned char *)a1 + v6) = v10;
  return a1;
}

_DWORD *assignWithCopy for Text.Effect.Configuration.StyleModifier(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = (unint64_t)a2;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v6 = *(void *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
      unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t v7 = 16;
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0) {
      unsigned int v8 = *a1 + 2;
    }
    if (v8 == 1) {
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    swift_release();
    unsigned int v10 = *(unsigned __int8 *)(v3 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 2) {
      unsigned int v10 = *(_DWORD *)v3 + 2;
    }
    if (v10 == 1)
    {
      (*(void (**)(_DWORD *, unint64_t, uint64_t))(v5 + 16))(a1, v3, AssociatedTypeWitness);
      uint64_t v12 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v3 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      uint64_t v12 = a1;
    }
    uint64_t v14 = *(void *)(v3 + 8);
    *uint64_t v12 = *(void *)v3;
    v12[1] = v14;
    *((unsigned char *)a1 + v7) = v13;
    swift_retain();
  }
  return a1;
}

_OWORD *initializeWithTake for Text.Effect.Configuration.StyleModifier(_OWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
    unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v6 = 16;
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2 && (v6 & 0xFFFFFFF8) != 0) {
    unsigned int v7 = *a2 + 2;
  }
  if (v7 == 1)
  {
    (*(void (**)(_OWORD *, _DWORD *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
    uint64_t v9 = (_OWORD *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
    a2 = (_DWORD *)(((unint64_t)a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    uint64_t v9 = a1;
  }
  *uint64_t v9 = *(_OWORD *)a2;
  *((unsigned char *)a1 + v6) = v10;
  return a1;
}

_DWORD *assignWithTake for Text.Effect.Configuration.StyleModifier(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = a2;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v6 = *(void *)(v5 + 64);
    if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
      unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t v7 = 16;
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0) {
      unsigned int v8 = *a1 + 2;
    }
    if (v8 == 1) {
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    swift_release();
    unsigned int v10 = *((unsigned __int8 *)v3 + v7);
    if ((v7 & 0xFFFFFFF8) != 0 && v10 >= 2) {
      unsigned int v10 = *v3 + 2;
    }
    if (v10 == 1)
    {
      (*(void (**)(_DWORD *, _DWORD *, uint64_t))(v5 + 32))(a1, v3, AssociatedTypeWitness);
      uint64_t v12 = (_OWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v3 = (_DWORD *)(((unint64_t)v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      uint64_t v12 = a1;
    }
    *uint64_t v12 = *(_OWORD *)v3;
    *((unsigned char *)a1 + v7) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Configuration.StyleModifier(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v5 == 16 || ((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0) {
    unint64_t v5 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v6 = v5 | 1;
  char v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    unsigned int v8 = (a2 + ~(-1 << v7) - 254) >> v7;
    if (v8 > 0xFFFE)
    {
      int v9 = *(_DWORD *)&a1[v6];
      if (!v9) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      int v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6]) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (!v8) {
      goto LABEL_20;
    }
  }
  int v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    unsigned int v13 = a1[v5];
    if (v13 >= 2) {
      return (v13 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_13:
  int v11 = (v9 - 1) << v7;
  if (v6 >= 4) {
    int v11 = 0;
  }
  if (v6 == 1) {
    int v12 = *a1;
  }
  else {
    int v12 = *(_DWORD *)a1;
  }
  return (v12 | v11) + 255;
}

void storeEnumTagSinglePayload for Text.Effect.Configuration.StyleModifier(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 == 16 || ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0) {
    unint64_t v7 = 16;
  }
  size_t v8 = v7 | 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = (a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8);
    if (v12 > 0xFFFE)
    {
      int v9 = 4;
    }
    else if (v12 >= 0xFF)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 != 0;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 <= 0xFE)
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v7] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v10 = a2 - 255;
  if (v8 < 4)
  {
    int v11 = (v10 >> (8 * v8)) + 1;
    v10 &= ~(-1 << (8 * v8));
    bzero(a1, v8);
    if (v8 == 1)
    {
      *a1 = v10;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
    int v11 = 1;
  }
  *(_DWORD *)a1 = v10;
LABEL_20:
  switch(v9)
  {
    case 1:
      a1[v8] = v11;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v11;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x245E4F3A4);
    case 4:
      *(_DWORD *)&a1[v8] = v11;
      break;
    default:
      return;
  }
}

uint64_t getEnumTag for Text.Effect.Configuration.StyleModifier(_DWORD *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = ((*(void *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v3 == 16 || ((*(void *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFF0) {
    unint64_t v3 = 16;
  }
  uint64_t result = *((unsigned __int8 *)a1 + v3);
  uint64_t v5 = v3 & 0xFFFFFFF8;
  if (result >= 2 && v5 != 0) {
    return (*a1 + 2);
  }
  return result;
}

void destructiveInjectEnumTag for Text.Effect.Configuration.StyleModifier(unsigned int *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v5 != 16 && ((*(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF0) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = 16;
  }
  if (a2 > 1)
  {
    if (v6) {
      char v7 = 2;
    }
    else {
      char v7 = a2;
    }
    if (v6) {
      unsigned int v8 = a2 - 2;
    }
    else {
      unsigned int v8 = 0;
    }
    *((unsigned char *)a1 + v6) = v7;
    bzero(a1, v6);
    *a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + v6) = a2;
  }
}

uint64_t Gesture.repeatCount(_:maximumDelay:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  swift_getAssociatedTypeWitness();
  RepeatGesture.init(count:maximumDelay:)(a1, (uint64_t)v11, a4);
  v10[0] = v11[0];
  v10[1] = v11[1];
  uint64_t v8 = type metadata accessor for RepeatGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a2, v8, a3);
}

uint64_t RepeatGesture.init(count:maximumDelay:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (result <= 0 || a3 < 0.0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)a2 = result;
    *(double *)(a2 + 8) = a3;
  }
  return result;
}

uint64_t type metadata accessor for RepeatGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RepeatGesture.count.getter()
{
  return *(void *)v0;
}

uint64_t RepeatGesture.count.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*RepeatGesture.count.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RepeatGesture.maximumDelay.getter()
{
  return *(double *)(v0 + 8);
}

void RepeatGesture.maximumDelay.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*RepeatGesture.maximumDelay.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static RepeatGesture._makeGesture(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  int v30 = *a1;
  long long v4 = a2[5];
  long long v61 = a2[4];
  long long v62 = v4;
  *(_OWORD *)long long v63 = a2[6];
  *(_OWORD *)&v63[12] = *(long long *)((char *)a2 + 108);
  long long v5 = a2[1];
  long long v57 = *a2;
  long long v58 = v5;
  long long v6 = a2[3];
  long long v59 = a2[2];
  long long v60 = v6;
  type metadata accessor for External<UInt32>();
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
  uint64_t v7 = v57;
  uint64_t v8 = v58;
  unsigned int v9 = DWORD2(v58);
  unsigned int v27 = Attribute.init<A>(body:value:flags:update:)();
  unsigned int v28 = DWORD2(v58);
  int v23 = DWORD2(v57);
  unsigned int v24 = DWORD1(v59);
  uint64_t v10 = *((void *)&v59 + 1);
  uint64_t v11 = v60;
  unsigned int v33 = v59;
  unsigned int v34 = DWORD2(v60);
  unsigned int v43 = v61;
  unsigned int v44 = HIDWORD(v60);
  unsigned int v41 = DWORD2(v61);
  unsigned int v42 = DWORD1(v61);
  unsigned int v40 = HIDWORD(v61);
  unsigned int v38 = HIDWORD(v58);
  int v39 = v62;
  unsigned int v13 = (void *)*((void *)&v62 + 1);
  uint64_t v12 = *(void *)v63;
  int v36 = *(_DWORD *)&v63[12];
  int v37 = *(_DWORD *)&v63[8];
  int v25 = *(_DWORD *)&v63[24];
  int v35 = *(_DWORD *)&v63[20];
  int v26 = *(_DWORD *)&v63[16];
  *(void *)&long long v71 = __PAIR64__(v27, *(unsigned int *)&v63[16]);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs((uint64_t)&v57);
  lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v13;
  swift_bridgeObjectRetain();
  int v29 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v64 = v7;
  DWORD2(v64) = v23;
  *(void *)&long long v65 = v8;
  *((void *)&v65 + 1) = __PAIR64__(v38, v9);
  *(void *)&long long v66 = __PAIR64__(v24, v33);
  *((void *)&v66 + 1) = v10;
  *(void *)&long long v67 = v11;
  *((void *)&v67 + 1) = __PAIR64__(v44, v34);
  *(void *)&long long v68 = __PAIR64__(v42, v43);
  *((void *)&v68 + 1) = __PAIR64__(v40, v41);
  LODWORD(v69) = v39;
  *((void *)&v69 + 1) = v14;
  *(void *)long long v70 = v12;
  *(_DWORD *)&v70[8] = v37;
  *(_DWORD *)&v70[12] = v36;
  *(_DWORD *)&v70[16] = v29;
  *(_DWORD *)&v70[20] = v35;
  *(_DWORD *)&v70[24] = v25;
  outlined retain of _GestureInputs((uint64_t)&v64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  long long v75 = v68;
  long long v76 = v69;
  *(_OWORD *)long long v77 = *(_OWORD *)v70;
  *(_OWORD *)&v77[12] = *(_OWORD *)&v70[12];
  long long v71 = v64;
  long long v72 = v65;
  long long v73 = v66;
  long long v74 = v67;
  a3(v45, &v71);
  outlined release of _GestureInputs((uint64_t)&v64);
  v51[0] = v30;
  v51[1] = v45[0];
  v51[2] = v23;
  v51[3] = v26;
  v51[4] = v27;
  BOOL v52 = (v25 & 0x10) != 0;
  uint64_t v53 = 0;
  char v54 = 1;
  int v55 = 0;
  int v56 = 0;
  uint64_t v48 = type metadata accessor for GesturePhase();
  uint64_t v15 = type metadata accessor for RepeatPhase();
  uint64_t v49 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v51, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v47, v15, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  int v18 = v71;
  *(void *)&long long v71 = v7;
  DWORD2(v71) = v23;
  *(void *)&long long v72 = v8;
  *((void *)&v72 + 1) = __PAIR64__(v38, v28);
  *(void *)&long long v73 = __PAIR64__(v24, v33);
  *((void *)&v73 + 1) = v10;
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = __PAIR64__(v44, v34);
  *(void *)&long long v75 = __PAIR64__(v42, v43);
  *((void *)&v75 + 1) = __PAIR64__(v40, v41);
  LODWORD(v76) = v39;
  *((void *)&v76 + 1) = v14;
  *(void *)long long v77 = v12;
  *(_DWORD *)&v77[8] = v37;
  *(_DWORD *)&v77[12] = v36;
  *(_DWORD *)&v77[16] = v29;
  *(_DWORD *)&v77[20] = v35;
  *(_DWORD *)&v77[24] = v25;
  uint64_t result = outlined release of _GestureInputs((uint64_t)&v71);
  int v20 = HIDWORD(v45[0]);
  uint64_t v21 = v45[1];
  int v22 = v46;
  *(_DWORD *)a4 = v18;
  *(_DWORD *)(a4 + 4) = v20;
  *(void *)(a4 + 8) = v21;
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance RepeatGesture<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(void *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  return static RepeatGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

_DWORD *protocol witness for Rule.value.getter in conformance RepeatResetSeed@<X0>(_DWORD *a1@<X8>)
{
  int v2 = *(_DWORD *)AGGraphGetValue();
  uint64_t result = (_DWORD *)AGGraphGetValue();
  *a1 = *result + v2;
  return result;
}

void RepeatPhase.resetPhase()()
{
  *(_DWORD *)(v0 + 36) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
}

uint64_t RepeatPhase.updateValue()(uint64_t a1)
{
  int v2 = v1;
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v93 = (char *)&v81 - v9;
  uint64_t v10 = type metadata accessor for GesturePhase();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unsigned int v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v81 - v15;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  Swift::String v82 = v7;
  uint64_t v92 = v16;
  uint64_t v88 = v5;
  double v18 = v1[3];
  int v19 = *((unsigned __int8 *)v1 + 32);
  if (v19 == 1)
  {
    int v20 = *((_DWORD *)v1 + 2);
  }
  else
  {
    int v20 = *((_DWORD *)v1 + 2);
    type metadata accessor for RepeatPhase();
    if (*(double *)AGGraphGetValue() > v18)
    {
      uint64_t v21 = (uint64_t)v92;
      uint64_t v22 = swift_storeEnumTagMultiPayload();
      MEMORY[0x270FA5388](v22);
      uint64_t v79 = a1;
      uint64_t WitnessTable = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v21, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v10, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v23);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v21, v10);
    }
  }
  uint64_t v89 = v4;
  uint64_t v91 = v11;
  int v25 = *(_DWORD *)v1;
  int v24 = *((_DWORD *)v1 + 1);
  int v27 = *((_DWORD *)v1 + 3);
  int v26 = *((_DWORD *)v1 + 4);
  int v28 = *((unsigned __int8 *)v1 + 20);
  uint64_t v30 = *((unsigned int *)v1 + 9);
  int v29 = *((_DWORD *)v1 + 10);
  int v94 = *(_DWORD *)v1;
  int v95 = v24;
  int v83 = v24;
  int v84 = v27;
  int v96 = v20;
  int v97 = v27;
  int v85 = v26;
  int v86 = v28;
  int v98 = v26;
  char v99 = v28;
  double v100 = v18;
  char v101 = v19;
  int v102 = v30;
  int v103 = v29;
  int v87 = v29;
  DelayedPhase.childPhase.getter((uint64_t)v13);
  uint64_t v90 = v10;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v53 = v88;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v93, v13, v89);
      v1[3] = 0.0;
      *((unsigned char *)v1 + 32) = 1;
      type metadata accessor for RepeatGesture();
      uint64_t Value = (void *)AGGraphGetValue();
      if (__OFSUB__(*Value, 1)) {
        __break(1u);
      }
      if (*Value - 1 > v30)
      {
        uint64_t v55 = (uint64_t)v92;
        int v56 = v93;
        uint64_t v36 = v89;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v92, v93, v89);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v36);
        uint64_t v57 = v90;
        uint64_t v58 = swift_storeEnumTagMultiPayload();
        MEMORY[0x270FA5388](v58);
        uint64_t v79 = a1;
        uint64_t WitnessTable = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v55, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v57, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v59);
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v55, v57);
        long long v60 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
        long long v61 = v56;
        goto LABEL_18;
      }
      int v94 = v25;
      int v95 = v83;
      int v96 = v20;
      int v97 = v84;
      int v98 = v85;
      char v99 = v86;
      double v100 = 0.0;
      char v101 = 1;
      int v102 = v30;
      int v103 = v87;
      uint64_t v67 = (uint64_t)v92;
      uint64_t v68 = DelayedPhase.childPhase.getter((uint64_t)v92);
      MEMORY[0x270FA5388](v68);
      uint64_t v79 = a1;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v69 = v90;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v67, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v90, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v70);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v67, v69);
      long long v60 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
      long long v61 = v93;
      uint64_t v66 = v89;
      goto LABEL_20;
    case 2u:
      uint64_t v37 = v88;
      uint64_t v36 = v89;
      unsigned int v38 = v82;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v82, v13, v89);
      uint64_t v39 = (v30 + 1);
      *((_DWORD *)v1 + 9) = v39;
      type metadata accessor for RepeatGesture();
      uint64_t v40 = AGGraphGetValue();
      if (*(void *)v40 > v39)
      {
        v1[3] = *(double *)AGGraphGetValue() + *(double *)(v40 + 8);
        *((unsigned char *)v1 + 32) = 0;
        uint64_t v41 = (uint64_t)v92;
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v92, v38, v36);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v41, 0, 1, v36);
        uint64_t v42 = v90;
        uint64_t v43 = swift_storeEnumTagMultiPayload();
        MEMORY[0x270FA5388](v43);
        unsigned int v44 = v38;
        uint64_t v79 = a1;
        uint64_t WitnessTable = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v41, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v42, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v45);
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v41, v42);
        if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
        {
          id v46 = (id)AGSubgraphGetCurrent();
          if (!v46) {
            goto LABEL_37;
          }
          unint64_t v47 = v46;
          id v48 = (id)AGSubgraphGetGraph();
        }
        else
        {
          id v48 = (id)AGGraphGetAttributeGraph();
        }
        if (AGGraphGetContext())
        {
          swift_retain();

          int v76 = *((_DWORD *)v2 + 4);
          int v77 = *((_DWORD *)v2 + 9);
          uint64_t v78 = swift_allocObject();
          *(_DWORD *)(v78 + 16) = v76;
          *(_DWORD *)(v78 + 20) = v77;
          GraphHost.continueTransaction(_:)((uint64_t)_s7SwiftUI11RepeatPhase33_BECD07FC80B4CA0BF429B041392E806ALLV11updateValueyyFyycfU0_TA_0, v78);
          swift_release();
          swift_release();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v44, v89);
          if ((_BYTE)v2[4]) {
            return result;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_37:
        LODWORD(WitnessTable) = 0;
        uint64_t v79 = 216;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x245E50854);
      }
      v1[3] = 0.0;
      *((unsigned char *)v1 + 32) = 1;
      int v94 = v25;
      int v95 = v83;
      int v96 = v20;
      int v97 = v84;
      int v98 = v85;
      char v99 = v86;
      double v100 = 0.0;
      char v101 = 1;
      int v102 = v39;
      int v103 = v87;
      uint64_t v62 = (uint64_t)v92;
      uint64_t v63 = DelayedPhase.childPhase.getter((uint64_t)v92);
      MEMORY[0x270FA5388](v63);
      uint64_t v79 = a1;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v64 = v90;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v62, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v90, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v65);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v62, v64);
      long long v60 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
      long long v61 = v38;
LABEL_18:
      uint64_t v66 = v36;
LABEL_20:
      uint64_t result = v60(v61, v66);
LABEL_21:
      if (((_BYTE)v2[4] & 1) == 0)
      {
LABEL_22:
        double v71 = v2[3];
        if (*((unsigned char *)v2 + 20) == 1)
        {
          uint64_t v72 = specialized static GestureGraph.current.getter();
          double v73 = *(double *)(v72 + 264);
          if (v71 < v73) {
            double v73 = v71;
          }
          *(double *)(v72 + 264) = v73;
        }
        else
        {
          uint64_t v74 = specialized static ViewGraph.current.getter();
          swift_beginAccess();
          double v75 = *(double *)(v74 + 400);
          if (v71 < v75) {
            double v75 = v71;
          }
          *(double *)(v74 + 400) = v75;
        }
        return swift_release();
      }
      return result;
    case 3u:
      int v94 = v25;
      int v95 = v83;
      int v96 = v20;
      int v97 = v84;
      int v98 = v85;
      char v99 = v86;
      double v100 = v18;
      char v101 = v19;
      int v102 = v30;
      int v103 = v87;
      uint64_t v49 = (uint64_t)v92;
      uint64_t v50 = DelayedPhase.childPhase.getter((uint64_t)v92);
      MEMORY[0x270FA5388](v50);
      uint64_t v79 = a1;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v51 = v90;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v49, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v81 - 4), v90, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v52);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 8))(v49, v51);
      goto LABEL_21;
    default:
      int v94 = v25;
      int v95 = v83;
      int v96 = v20;
      int v97 = v84;
      int v98 = v85;
      char v99 = v86;
      double v100 = v18;
      char v101 = v19;
      int v102 = v30;
      int v103 = v87;
      uint64_t v31 = (uint64_t)v92;
      uint64_t v32 = DelayedPhase.childPhase.getter((uint64_t)v92);
      MEMORY[0x270FA5388](v32);
      uint64_t v79 = a1;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v33 = v90;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v31, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v81 - 4), v90, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v34);
      int v35 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v35(v31, v33);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v33);
      if ((_BYTE)v2[4]) {
        return result;
      }
      goto LABEL_22;
  }
}

uint64_t closure #2 in RepeatPhase.updateValue()()
{
  return AGGraphSetValue();
}

void type metadata accessor for External<UInt32>()
{
  if (!lazy cache variable for type metadata for External<UInt32>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed()
{
  unint64_t result = lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed;
  if (!lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatResetSeed and conformance RepeatResetSeed);
  }
  return result;
}

uint64_t type metadata accessor for RepeatPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for RepeatPhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RepeatPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RepeatResetSeed()
{
  return &type metadata for RepeatResetSeed;
}

uint64_t instantiation function for generic protocol witness table for RepeatPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in RepeatPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E50A9C()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI11RepeatPhase33_BECD07FC80B4CA0BF429B041392E806ALLV11updateValueyyFyycfU0_TA_0()
{
  return AGGraphSetValue();
}

uint64_t static EmptyGesture._makeGesture(gesture:inputs:)@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GesturePhase();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - v6;
  long long v8 = a1[5];
  long long v19 = a1[4];
  long long v20 = v8;
  v21[0] = a1[6];
  *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)a1 + 108);
  long long v9 = a1[1];
  long long v15 = *a1;
  long long v16 = v9;
  long long v10 = a1[3];
  long long v17 = a1[2];
  long long v18 = v10;
  swift_storeEnumTagMultiPayload();
  char v14 = 4;
  uint64_t v11 = _GestureInputs.intern<A>(_:id:)((uint64_t)v7, &v14, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return _GestureOutputs.init(phase:)(v11, a2);
}

uint64_t instantiation function for generic protocol witness table for EmptyGesture<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance EmptyGesture<A>@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  return static EmptyGesture._makeGesture(gesture:inputs:)(a1, a2);
}

uint64_t type metadata accessor for EmptyGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FormatStyle.exactSizeVariant(_:)(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v37 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_getTupleTypeMetadata2();
  double v13 = MEMORY[0x270FA5388](v12);
  long long v15 = (char *)&v35 - v14;
  uint64_t v16 = *a2;
  long long v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v17(v11, v3, a3, v13);
  type metadata accessor for SizeAdaptiveFormatStyle();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v39, (uint64_t)v43);
    uint64_t v18 = v44;
    uint64_t v19 = v45;
    long long v20 = __swift_project_boxed_opaque_existential_1(v43, v44);
    uint64_t v35 = (uint64_t)&v35;
    uint64_t v21 = *(void *)(v18 - 8);
    uint64_t v38 = v16;
    uint64_t v22 = v21;
    double v23 = MEMORY[0x270FA5388](v20);
    int v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v27 = v26(v25, &v38, v18, v19, v23);
    *((void *)&v40 + 1) = v18;
    uint64_t v41 = v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
    (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v25, v18);
    char v42 = v27 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)();
    uint64_t v29 = TupleTypeMetadata2;
    swift_dynamicCast();
    LOBYTE(v29) = v7[*(int *)(v29 + 48)];
    uint64_t v30 = *(int *)(v12 + 48);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v31(v15, v7, a3);
    v15[v30] = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
  else
  {
    uint64_t v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    outlined destroy of SizeAdaptiveFormatStyle?((uint64_t)&v39, &lazy cache variable for type metadata for SizeAdaptiveFormatStyle?, (void (*)(uint64_t))type metadata accessor for SizeAdaptiveFormatStyle);
    uint64_t v32 = *(int *)(v12 + 48);
    ((void (*)(char *, uint64_t, uint64_t))v17)(v15, v3, a3);
    v15[v32] = v16 == 0;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }
  uint64_t v33 = v15[*(int *)(v12 + 48)];
  v31(v37, v15, a3);
  return v33;
}

unint64_t type metadata accessor for SizeAdaptiveFormatStyle()
{
  unint64_t result = lazy cache variable for type metadata for SizeAdaptiveFormatStyle;
  if (!lazy cache variable for type metadata for SizeAdaptiveFormatStyle)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  }
  return result;
}

void type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)()
{
  if (!lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool))
  {
    type metadata accessor for SizeAdaptiveFormatStyle();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool));
    }
  }
}

uint64_t FormatStyle.sizeVariant(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = *a1;
  return FormatStyle.exactSizeVariant(_:)(a3, &v4, a2);
}

Swift::Bool __swiftcall TextSizeVariant.adjust()()
{
  uint64_t v1 = *v0;
  if (*v0 && (BOOL v2 = __OFSUB__(v1, 1), --v1, v2))
  {
    __break(1u);
  }
  else
  {
    *unint64_t v0 = v1;
    return v1 == 0;
  }
  return result;
}

uint64_t specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(char *a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(char *), void (*a6)(uint64_t), void (*a7)(uint64_t), uint64_t a8, void (*a9)(char *), uint64_t a10, void (*a11)(uint64_t), char *a12, uint64_t (*a13)(void), unint64_t *a14, void (*a15)(uint64_t), uint64_t a16)
{
  v105 = a6;
  uint64_t v106 = a8;
  double v114 = a5;
  uint64_t v20 = a13(0);
  MEMORY[0x270FA5388](v20);
  double v115 = (char *)v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v98 - v23;
  MEMORY[0x270FA5388](v25);
  MEMORY[0x270FA5388](v26);
  Swift::Int v109 = (char *)v98 - v27;
  MEMORY[0x270FA5388](v28);
  MEMORY[0x270FA5388]((char *)v98 - v29);
  double v116 = (char *)v98 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)v98 - v32;
  MEMORY[0x270FA5388](v34);
  uint64_t v110 = (char *)v98 - v35;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)v98 - v37;
  double v43 = MEMORY[0x270FA5388](v39);
  CGFloat v120 = (char *)v98 - v44;
  uint64_t v111 = v45;
  uint64_t v47 = v45 + 16;
  id v46 = *(void (**)(char *, uint64_t, uint64_t, double))(v45 + 16);
  if (!v41)
  {
    v46(a1, (uint64_t)a2, v20, v43);
    return 1;
  }
  char v101 = v40;
  int v103 = v33;
  uint64_t v104 = v42;
  double v100 = a7;
  int v102 = a1;
  id v48 = a15;
  uint64_t v112 = v41;
  uint64_t v113 = a14;
  CGFloat v119 = (void (*)(char *, char *, uint64_t))v46;
  v46(v38, (uint64_t)a2, v20, v43);
  uint64_t v49 = *(void *)(a4 + 16);
  uint64_t v118 = v47;
  CGFloat v107 = a2;
  uint64_t v108 = a4;
  uint64_t v121 = v49;
  if (v49)
  {
    v98[0] = a15;
    v98[1] = a16;
    char v99 = v24;
    uint64_t v50 = (void (**)(char *, uint64_t))(v111 + 8);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v111 + 32);
    swift_bridgeObjectRetain();
    uint64_t v52 = a4 + 40;
    uint64_t v117 = (unint64_t)v51 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v53 = v49;
    char v54 = v116;
    do
    {
      uint64_t v55 = *(void (**)(char *))(v52 - 8);
      swift_retain();
      v55(v38);
      swift_release();
      (*v50)(v38, v20);
      int v56 = *v51;
      (*v51)(v38, v54, v20);
      v52 += 16;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    uint64_t v24 = v99;
    uint64_t v57 = v117;
    uint64_t v58 = v107;
    id v48 = (void (*)(uint64_t))v98[0];
  }
  else
  {
    int v56 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
    uint64_t v57 = (v111 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v58 = a2;
  }
  long long v60 = v120;
  uint64_t v117 = v57;
  v56(v120, v38, v20);
  long long v61 = (unint64_t *)lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(v113, v48);
  char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v63 = v110;
  uint64_t v64 = v119;
  v119(v110, v58, v20);
  uint64_t v65 = v103;
  v64(v103, v60, v20);
  uint64_t v113 = v61;
  if (v62)
  {
    uint64_t v66 = v63;
    uint64_t v67 = *(void (**)(char *, uint64_t))(v111 + 8);
    v67(v65, v20);
    v67(v66, v20);
    uint64_t v68 = v109;
    uint64_t v69 = v107;
    uint64_t v70 = (void (*)(uint64_t, char *, uint64_t))v119;
    v119(v109, v107, v20);
    double v71 = v104;
    v70((uint64_t)v104, v120, v20);
    uint64_t v72 = v69;
  }
  else
  {
    double v73 = v101;
    v114(v63);
    uint64_t v74 = v116;
    v100((uint64_t)v73);
    uint64_t v67 = *(void (**)(char *, uint64_t))(v111 + 8);
    v67(v73, v20);
    char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
    v67(v74, v20);
    v67(v65, v20);
    v67(v110, v20);
    int v76 = v107;
    int v77 = (void (*)(uint64_t, char *, uint64_t))v119;
    v119(v109, v107, v20);
    double v71 = v104;
    v77((uint64_t)v104, v120, v20);
    uint64_t v72 = v76;
    if (v75)
    {
      uint64_t v110 = (char *)v56;
      int v103 = a12;
      v105 = a11;
      uint64_t v78 = v101;
      uint64_t v79 = v109;
      a9(v109);
      long long v80 = v116;
      v105((uint64_t)v78);
      v67(v78, v20);
      char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
      v67(v80, v20);
      v67(v71, v20);
      v67(v79, v20);
      v119(v24, v72, v20);
      double v114 = (void (*)(char *))v67;
      if (v81)
      {
        Swift::String v82 = v116;
        v100((uint64_t)v24);
        v67(v24, v20);
        int v56 = (void (*)(char *, char *, uint64_t))v110;
        ((void (*)(char *, char *, uint64_t))v110)(v24, v82, v20);
        int v84 = v120;
        uint64_t v83 = v121;
      }
      else
      {
        int v84 = v120;
        uint64_t v83 = v121;
        int v56 = (void (*)(char *, char *, uint64_t))v110;
      }
      goto LABEL_16;
    }
    uint64_t v68 = v109;
  }
  v67(v71, v20);
  double v114 = (void (*)(char *))v67;
  v67(v68, v20);
  v119(v24, v72, v20);
  int v84 = v120;
  uint64_t v83 = v121;
LABEL_16:
  int v85 = v115;
  v119(v115, v24, v20);
  int v86 = v85;
  if (v83)
  {
    uint64_t v87 = swift_bridgeObjectRetain() + 40;
    uint64_t v88 = (void (*)(char *, uint64_t))v114;
    while (1)
    {
      uint64_t v121 = v83;
      uint64_t v89 = *(void (**)(char *))(v87 - 8);
      swift_retain();
      uint64_t v90 = (char *)v56;
      uint64_t v91 = v116;
      v89(v24);
      v88(v24, v20);
      uint64_t v92 = v91;
      int v56 = (void (*)(char *, char *, uint64_t))v90;
      ((void (*)(char *, char *, uint64_t))v90)(v24, v92, v20);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        swift_bridgeObjectRelease();
        swift_release();
        v88(v24, v20);
        v88(v120, v20);
        int v95 = v102;
        int v96 = v115;
        goto LABEL_27;
      }
      int v86 = v115;
      char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v88)(v86, v20);
      if ((v93 & 1) == 0)
      {
        uint64_t v94 = v112 - 1;
        if (__OFSUB__(v112, 1))
        {
          __break(1u);
          return result;
        }
        --v112;
        if (!v94)
        {
          swift_bridgeObjectRelease();
          v88(v120, v20);
          v56(v102, v24, v20);
          return 1;
        }
      }
      v119(v86, v24, v20);
      v87 += 16;
      uint64_t v83 = v121 - 1;
      if (v121 == 1)
      {
        swift_bridgeObjectRelease();
        int v84 = v120;
        break;
      }
    }
  }
  int v97 = (void (*)(char *, uint64_t))v114;
  ((void (*)(char *, uint64_t))v114)(v86, v20);
  v97(v84, v20);
  int v95 = v102;
  int v96 = v24;
LABEL_27:
  v56(v95, v96, v20);
  return 0;
}

uint64_t closure #1 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07118], MEMORY[0x263F07108], MEMORY[0x263F070C0]);
}

uint64_t closure #2 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07118], MEMORY[0x263F07110], MEMORY[0x263F070C0]);
}

uint64_t closure #3 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07150], MEMORY[0x263F07140], MEMORY[0x263F070D8]);
}

uint64_t closure #4 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07150], MEMORY[0x263F07148], MEMORY[0x263F070D8]);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance Date.FormatStyle(char *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (one-time initialization token for dateFormatStyleFieldRemovals != -1) {
    swift_once();
  }
  return specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(a1, v2, v4, (uint64_t)dateFormatStyleFieldRemovals._rawValue, (void (*)(char *))closure #1 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #2 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(char *))closure #3 in Date.FormatStyle.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #4 in Date.FormatStyle.withSizeVariant(_:), 0, MEMORY[0x263F07258], &lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258], MEMORY[0x263F07260]) & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  *(void *)(a1 + 8) = result;
  return result;
}

void one-time initialization function for dateFormatStyleFieldRemovals()
{
  dateFormatStyleFieldRemovals._rawuint64_t Value = &outlined read-only object #0 of one-time initialization function for dateFormatStyleFieldRemovals;
}

uint64_t closure #2 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071A0], MEMORY[0x263F07198], MEMORY[0x263F07208]);
}

uint64_t closure #3 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07138], MEMORY[0x263F07130], MEMORY[0x263F070D0]);
}

uint64_t closure #4 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071E0], MEMORY[0x263F071D8], MEMORY[0x263F07240]);
}

uint64_t closure #5 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F070F0], MEMORY[0x263F070E8], MEMORY[0x263F070A0]);
}

uint64_t closure #6 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071B0], MEMORY[0x263F071A8], MEMORY[0x263F07210]);
}

uint64_t closure #7 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071D0], MEMORY[0x263F071C8], MEMORY[0x263F07238]);
}

uint64_t closure #8 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07190], MEMORY[0x263F07188], MEMORY[0x263F07200]);
}

uint64_t closure #9 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07180], MEMORY[0x263F07178], MEMORY[0x263F071F8]);
}

uint64_t closure #10 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07128], MEMORY[0x263F07120], MEMORY[0x263F070C8]);
}

uint64_t closure #11 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07100], MEMORY[0x263F070F8], MEMORY[0x263F070B8]);
}

uint64_t closure #12 in variable initialization expression of dateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07170], MEMORY[0x263F07168], MEMORY[0x263F070E0]);
}

uint64_t closure #1 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07118], MEMORY[0x263F07108], MEMORY[0x263F07028]);
}

uint64_t closure #2 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07118], MEMORY[0x263F07110], MEMORY[0x263F07028]);
}

uint64_t closure #3 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07150], MEMORY[0x263F07140], MEMORY[0x263F07040]);
}

uint64_t closure #4 in Date.FormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07150], MEMORY[0x263F07148], MEMORY[0x263F07040]);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance Date.FormatStyle.Attributed(char *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (one-time initialization token for attributedDateFormatStyleFieldRemovals != -1) {
    swift_once();
  }
  return specialized static Date.FormatStyle.adapt<A>(_:to:fieldRemovals:addEra:removeEra:addYear:removeYear:)(a1, v2, v4, (uint64_t)attributedDateFormatStyleFieldRemovals._rawValue, (void (*)(char *))closure #1 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #2 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(char *))closure #3 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, (void (*)(uint64_t))closure #4 in Date.FormatStyle.Attributed.withSizeVariant(_:), 0, MEMORY[0x263F07090], &lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090], MEMORY[0x263F07098]) & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.FormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_1(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t WhitespaceRemovingFormatStyle<>.withSizeVariant(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v11;
  char v13 = (*(uint64_t (**)(char *, uint64_t *, uint64_t, double))(v12 + 16))(v10, &v16, v6, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a1, v3, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1, v10, v6);
  return v13 & 1;
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WhitespaceRemovingFormatStyle<>.withSizeVariant(_:)(a1, a2, a3);
}

uint64_t instantiation function for generic protocol witness table for <> WhitespaceRemovingFormatStyle<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void one-time initialization function for attributedDateFormatStyleFieldRemovals()
{
  attributedDateFormatStyleFieldRemovals._rawuint64_t Value = &outlined read-only object #0 of one-time initialization function for attributedDateFormatStyleFieldRemovals;
}

uint64_t closure #2 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071A0], MEMORY[0x263F07198], MEMORY[0x263F07060]);
}

uint64_t closure #3 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07138], MEMORY[0x263F07130], MEMORY[0x263F07038]);
}

uint64_t closure #4 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071E0], MEMORY[0x263F071D8], MEMORY[0x263F07078]);
}

uint64_t closure #5 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F070F0], MEMORY[0x263F070E8], MEMORY[0x263F07018]);
}

uint64_t closure #6 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071B0], MEMORY[0x263F071A8], MEMORY[0x263F07068]);
}

uint64_t closure #7 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F071D0], MEMORY[0x263F071C8], MEMORY[0x263F07070]);
}

uint64_t closure #8 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07190], MEMORY[0x263F07188], MEMORY[0x263F07058]);
}

uint64_t closure #9 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07180], MEMORY[0x263F07178], MEMORY[0x263F07050]);
}

uint64_t closure #10 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07128], MEMORY[0x263F07120], MEMORY[0x263F07030]);
}

uint64_t closure #11 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07100], MEMORY[0x263F070F8], MEMORY[0x263F07020]);
}

uint64_t closure #12 in variable initialization expression of attributedDateFormatStyleFieldRemovals(uint64_t a1)
{
  return closure #1 in Date.FormatStyle.withSizeVariant(_:)(a1, MEMORY[0x263F07170], MEMORY[0x263F07168], MEMORY[0x263F07048]);
}

uint64_t closure #1 in Date.FormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(double), void (*a4)(char *))
{
  uint64_t v6 = a2(0);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - v9;
  a3(v8);
  a4(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t Date.ISO8601FormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v48 = a1;
  uint64_t v3 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v14);
  MEMORY[0x270FA5388](v15);
  long long v17 = (char *)&v40 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v40 - v19;
  double v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v40 - v25;
  if (*a2)
  {
    uint64_t v42 = *a2;
    uint64_t v27 = *MEMORY[0x263F072A8];
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 104);
    long long v40 = v23;
    uint64_t v41 = v22;
    v28(v11, v27, v8, v24);
    Date.ISO8601FormatStyle.dateSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v30 = v43;
    uint64_t v29 = v44;
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v7, *MEMORY[0x263F072C0], v44);
    Date.ISO8601FormatStyle.timeSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v29);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    v31(v17, v12);
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    uint64_t v34 = v47;
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v45, *MEMORY[0x263F072C8], v47);
    Date.ISO8601FormatStyle.timeZoneSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
    v31(v20, v12);
    uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    v35(v48, v26, v12);
    uint64_t v36 = v40;
    v35((uint64_t)v40, v26, v12);
    uint64_t v37 = v41;
    v35((uint64_t)v41, v49, v12);
    if (v42 == 1)
    {
      lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle, MEMORY[0x263F072F0]);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      char v38 = 0;
    }
    v31(v37, v12);
    v31(v36, v12);
    v31(v26, v12);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, double))(v13 + 16))(v48, v49, v12, v24);
    char v38 = 1;
  }
  return v38 & 1;
}

uint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle, MEMORY[0x263F072F0]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle, MEMORY[0x263F072F0]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Date.ComponentsFormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for SizeAdaptiveFormatStyle?(0, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Style?, MEMORY[0x263F073C0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v40 = (uint64_t)&v33 - v7;
  uint64_t v8 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v38 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v33 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = type metadata accessor for Date.ComponentsFormatStyle();
  double v21 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = *a2;
  uint64_t v23 = *(void (**)(double))(v20 + 16);
  if (*a2)
  {
    uint64_t v34 = v20;
    uint64_t v35 = v18;
    uint64_t v36 = a1;
    uint64_t v39 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23(v21);
    double v24 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v25 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v27 = v39;
    while (1)
    {
      Date.ComponentsFormatStyle.style.getter();
      uint64_t v28 = v40;
      Date.ComponentsFormatStyle.Style.nextSmaller.getter(v40);
      uint64_t v29 = v28;
      uint64_t v30 = *v24;
      (*v24)(v13, v8);
      if ((*v25)(v29, 1, v8) == 1)
      {
        outlined destroy of SizeAdaptiveFormatStyle?(v29, &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Style?, MEMORY[0x263F073C0]);
        (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v36, v27, v35);
        return 0;
      }
      (*v37)(v16, v29, v8);
      (*v26)(v38, v16, v8);
      Date.ComponentsFormatStyle.style.setter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v16, v8);
      if (__OFSUB__(v22--, 1)) {
        break;
      }
      if (!v22)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v36, v39, v35);
        return 1;
      }
    }
    __break(1u);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, double))v23)(a1, v3, v21);
    return 1;
  }
  return result;
}

uint64_t Date.ComponentsFormatStyle.Style.nextSmaller.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v19 - v10, v2, v4, v9);
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style, MEMORY[0x263F073C0]);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if (v12)
  {
    v13(v11, v4);
    static Date.ComponentsFormatStyle.Style.wide.getter();
    uint64_t v14 = 0;
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.wide.getter();
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v7, v4);
    if (v15)
    {
      v13(v11, v4);
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      uint64_t v14 = 0;
    }
    else
    {
      static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v13(v7, v4);
      if ((v16 & 1) != 0
        || (static Date.ComponentsFormatStyle.Style.abbreviated.getter(),
            char v17 = dispatch thunk of static Equatable.== infix(_:_:)(),
            v13(v7, v4),
            (v17 & 1) != 0))
      {
        v13(v11, v4);
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        uint64_t v14 = 0;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        dispatch thunk of static Equatable.== infix(_:_:)();
        v13(v7, v4);
        v13(v11, v4);
        uint64_t v14 = 1;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v14, 1, v4);
}

uint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, MEMORY[0x263F07408]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, MEMORY[0x263F07408]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, MEMORY[0x263F07408]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Duration.UnitsFormatStyle.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SizeAdaptiveFormatStyle?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, MEMORY[0x263F07EF0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v66 = (char *)&v55 - v9;
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)&v55 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v68 = (char *)&v55 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v65 = (char *)&v55 - v20;
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle();
  double v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *a2;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, double))(v23 + 16);
  if (!v27)
  {
    v28(a1, v2, v24);
    return 1;
  }
  uint64_t v56 = v6;
  uint64_t v57 = v5;
  uint64_t v58 = v23;
  uint64_t v59 = v22;
  uint64_t v60 = a1;
  v28((uint64_t)v26, v2, v24);
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v30 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v63 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  char v62 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v67 = v26;
  while (1)
  {
    uint64_t v31 = v68;
    Duration.UnitsFormatStyle.unitWidth.getter();
    uint64_t v32 = *v29;
    (*v29)(v16, v31, v10);
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, MEMORY[0x263F07EF0]);
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v34 = *v30;
    (*v30)(v13, v10);
    if (v33)
    {
      v34(v16, v10);
      uint64_t v35 = (uint64_t)v66;
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
LABEL_8:
      uint64_t v38 = 0;
      goto LABEL_9;
    }
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v13, v10);
    if ((v36 & 1) != 0
      || (static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(),
          char v37 = dispatch thunk of static Equatable.== infix(_:_:)(),
          v34(v13, v10),
          (v37 & 1) != 0))
    {
      v34(v16, v10);
      uint64_t v35 = (uint64_t)v66;
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      goto LABEL_8;
    }
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v13, v10);
    v34(v16, v10);
    uint64_t v38 = 1;
    uint64_t v35 = (uint64_t)v66;
LABEL_9:
    (*v64)(v35, v38, 1, v10);
    v34(v68, v10);
    if ((*v63)(v35, 1, v10) == 1) {
      break;
    }
    uint64_t v39 = v65;
    (*v62)(v65, v35, v10);
    v32(v13, v39, v10);
    uint64_t v40 = v67;
    Duration.UnitsFormatStyle.unitWidth.setter();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v39, v10);
    BOOL v42 = __OFSUB__(v27--, 1);
    if (v42)
    {
      __break(1u);
      goto LABEL_33;
    }
    if (!v27)
    {
      uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
      uint64_t v54 = v60;
LABEL_27:
      v53(v54, v40, v59);
      return 1;
    }
  }
  outlined destroy of SizeAdaptiveFormatStyle?(v35, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, MEMORY[0x263F07EF0]);
  uint64_t v43 = v61;
  Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
  uint64_t v44 = Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v57);
  if (v44 >= 1)
  {
    uint64_t v45 = (uint64_t (*)(char *, void))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
    uint64_t result = v45(v69, 0);
    BOOL v42 = __OFSUB__(v27--, 1);
    if (v42)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (!v27)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v60, v67, v59);
      return 1;
    }
  }
  uint64_t v46 = v67;
  uint64_t v47 = Duration.UnitsFormatStyle.maximumUnitCount.getter();
  if (v48) {
    uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v49 = v47;
  }
  uint64_t v50 = *(void *)(Duration.UnitsFormatStyle.allowedUnits.getter() + 16);
  swift_bridgeObjectRelease();
  if (v50 >= v49) {
    uint64_t v51 = v49;
  }
  else {
    uint64_t v51 = v50;
  }
  if (v27 >= v51)
  {
    Duration.UnitsFormatStyle.maximumUnitCount.setter();
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v60, v46, v59);
    return 0;
  }
  uint64_t result = v51 - v27;
  uint64_t v52 = v60;
  if (!__OFSUB__(v51, v27))
  {
    uint64_t v40 = v67;
    Duration.UnitsFormatStyle.maximumUnitCount.setter();
    uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
    uint64_t v54 = v52;
    goto LABEL_27;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, MEMORY[0x263F07F20]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_1(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, MEMORY[0x263F07F20]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, MEMORY[0x263F07F20]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Duration.UnitsFormatStyle.Attributed.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SizeAdaptiveFormatStyle?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, MEMORY[0x263F07EF0]);
  MEMORY[0x270FA5388](v7 - 8);
  char v62 = (char *)&v51 - v8;
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v51 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v64 = (char *)&v51 - v17;
  MEMORY[0x270FA5388](v18);
  long long v61 = (char *)&v51 - v19;
  uint64_t v20 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  double v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *a2;
  uint64_t v27 = *(void (**)(uint64_t, void (**)(uint64_t, uint64_t, uint64_t, uint64_t), double))(v22 + 16);
  if (!*a2)
  {
    v27(a1, v60, v23);
    return 1;
  }
  uint64_t v52 = v5;
  uint64_t v53 = v4;
  uint64_t v54 = v22;
  uint64_t v55 = v21;
  uint64_t v56 = a1;
  v27((uint64_t)v25, v60, v23);
  uint64_t v28 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v29 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v59 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  uint64_t v63 = v25;
  while (1)
  {
    swift_getKeyPath();
    uint64_t v30 = v64;
    Duration.UnitsFormatStyle.Attributed.subscript.getter();
    swift_release();
    uint64_t v31 = *v28;
    (*v28)(v15, v30, v9);
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, MEMORY[0x263F07EF0]);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v33 = *v29;
    (*v29)(v12, v9);
    if (v32)
    {
      v33(v15, v9);
      uint64_t v34 = (uint64_t)v62;
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
LABEL_8:
      uint64_t v37 = 0;
      goto LABEL_9;
    }
    static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v12, v9);
    if ((v35 & 1) != 0
      || (static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter(),
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)(),
          v33(v12, v9),
          (v36 & 1) != 0))
    {
      v33(v15, v9);
      uint64_t v34 = (uint64_t)v62;
      static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      goto LABEL_8;
    }
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v12, v9);
    v33(v15, v9);
    uint64_t v37 = 1;
    uint64_t v34 = (uint64_t)v62;
LABEL_9:
    (*v60)(v34, v37, 1, v9);
    v33(v64, v9);
    if ((*v59)(v34, 1, v9) == 1) {
      break;
    }
    uint64_t v38 = v61;
    (*v58)(v61, v34, v9);
    swift_getKeyPath();
    v31(v12, v38, v9);
    uint64_t v39 = v63;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v38, v9);
    BOOL v41 = __OFSUB__(v26--, 1);
    if (v41)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (!v26)
    {
      uint64_t v49 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
      uint64_t v50 = v56;
LABEL_26:
      v49(v50, v39, v55);
      return 1;
    }
  }
  outlined destroy of SizeAdaptiveFormatStyle?(v34, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.UnitWidth?, MEMORY[0x263F07EF0]);
  swift_getKeyPath();
  BOOL v42 = v57;
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  uint64_t v43 = Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
  if (v43 >= 1)
  {
    swift_getKeyPath();
    uint64_t v44 = (void (*)(uint64_t *, void))Duration.UnitsFormatStyle.Attributed.subscript.modify();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
    v44(&v65, 0);
    uint64_t result = swift_release();
    BOOL v41 = __OFSUB__(v26--, 1);
    if (v41)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (!v26)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v56, v63, v55);
      return 1;
    }
  }
  swift_getKeyPath();
  uint64_t v45 = v63;
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  if (v66) {
    uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v46 = v65;
  }
  swift_getKeyPath();
  Duration.UnitsFormatStyle.Attributed.subscript.getter();
  swift_release();
  uint64_t v47 = *(void *)(v65 + 16);
  swift_bridgeObjectRelease();
  if (v47 >= v46) {
    uint64_t v47 = v46;
  }
  uint64_t result = swift_getKeyPath();
  if (v26 >= v47)
  {
    uint64_t v65 = 1;
    char v66 = 0;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v56, v45, v55);
    return 0;
  }
  uint64_t v48 = v56;
  if (!__OFSUB__(v47, v26))
  {
    uint64_t v65 = v47 - v26;
    char v66 = 0;
    uint64_t v39 = v63;
    Duration.UnitsFormatStyle.Attributed.subscript.setter();
    uint64_t v49 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
    uint64_t v50 = v48;
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t key path setter for Duration.UnitsFormatStyle.fractionalPartDisplay : Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return Duration.UnitsFormatStyle.fractionalPartDisplay.setter();
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.withSizeVariant(_:)(char *a1, uint64_t *a2)
{
  type metadata accessor for SizeAdaptiveFormatStyle?(0, &lazy cache variable for type metadata for Date.RelativeFormatStyle.UnitsStyle?, MEMORY[0x263F07310]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v48 = (char *)&v40 - v6;
  uint64_t v7 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v40 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v49 = (char *)&v40 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v47 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  double v21 = MEMORY[0x270FA5388](v18);
  double v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a2;
  uint64_t v25 = *(void (**)(char *, uint64_t, double))(v20 + 16);
  if (v24)
  {
    uint64_t v40 = v20;
    uint64_t v41 = v19;
    BOOL v42 = a1;
    v25(v23, v2, v21);
    uint64_t v26 = (void (**)(char *, char *, uint64_t))(v8 + 16);
    uint64_t v27 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v44 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v46 = v23;
    while (1)
    {
      uint64_t v28 = v49;
      Date.AnchoredRelativeFormatStyle.unitsStyle.getter();
      uint64_t v29 = *v26;
      (*v26)(v13, v28, v7);
      static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter();
      lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle, MEMORY[0x263F07310]);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *v27;
      (*v27)(v10, v7);
      if (v30) {
        break;
      }
      static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v10, v7);
      if (v33)
      {
        v31(v13, v7);
        uint64_t v32 = (uint64_t)v48;
        static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
        goto LABEL_9;
      }
      static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v10, v7);
      if (v34)
      {
        v31(v13, v7);
        uint64_t v32 = (uint64_t)v48;
        static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
        goto LABEL_9;
      }
      static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
      dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v10, v7);
      v31(v13, v7);
      uint64_t v35 = 1;
      uint64_t v32 = (uint64_t)v48;
LABEL_10:
      (*v45)(v32, v35, 1, v7);
      v31(v49, v7);
      if ((*v44)(v32, 1, v7) == 1)
      {
        outlined destroy of SizeAdaptiveFormatStyle?(v32, &lazy cache variable for type metadata for Date.RelativeFormatStyle.UnitsStyle?, MEMORY[0x263F07310]);
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v42, v46, v41);
        return 0;
      }
      char v36 = v47;
      (*v43)(v47, v32, v7);
      v29(v10, v36, v7);
      uint64_t v37 = v46;
      Date.AnchoredRelativeFormatStyle.unitsStyle.setter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v36, v7);
      if (__OFSUB__(v24--, 1))
      {
        __break(1u);
        return result;
      }
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v42, v37, v41);
        return 1;
      }
    }
    v31(v13, v7);
    uint64_t v32 = (uint64_t)v48;
    static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
LABEL_9:
    uint64_t v35 = 0;
    goto LABEL_10;
  }
  v25(a1, v2, v21);
  return 1;
}

uint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_1(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t SystemFormatStyle.Timer.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a2;
  uint64_t result = _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(v3, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v11 = *(int *)(v6 + 44);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = v12 + v9;
  if (__OFADD__(v12, v9))
  {
    __break(1u);
    goto LABEL_22;
  }
  *(void *)(a1 + v11) = v13;
  uint64_t v14 = *(void *)(v3 + *(int *)(v6 + 44));
  BOOL v15 = __OFSUB__(v14, 2);
  uint64_t v16 = v14 - 2;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v17 = v16 & ~(v16 >> 63);
  BOOL v15 = __OFSUB__(v9, v17);
  uint64_t v18 = v9 - v17;
  if (v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t result = _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v13 > 2)
  {
    uint64_t v19 = *(void *)&v8[*(int *)(v6 + 44)];
    uint64_t v20 = *(void *)&v8[*(int *)(v6 + 32)];
    if (v19 >= 3)
    {
      uint64_t v21 = v20 + 2;
      if (__OFADD__(v20, 2))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      BOOL v15 = __OFSUB__(v21, v19);
      uint64_t v22 = v21 - v19;
      if (v15)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v22 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v22;
      }
    }
    uint64_t result = outlined destroy of SystemFormatStyle.Stopwatch((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v23 = *(void *)(a1 + v11);
    uint64_t v24 = *(void *)(a1 + *(int *)(v6 + 32));
    if (v23 >= 3)
    {
      BOOL v15 = __OFADD__(v24, 2);
      uint64_t v25 = v24 + 2;
      if (v15)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      BOOL v15 = __OFSUB__(v25, v23);
      uint64_t v26 = v25 - v23;
      if (v15)
      {
LABEL_28:
        __break(1u);
        return result;
      }
      if (v26 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v26;
      }
    }
    if (!__OFSUB__(v20, v24)) {
      return v20 - v24 == v18;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  outlined destroy of SystemFormatStyle.Stopwatch((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  return 1;
}

BOOL protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a2;
  _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(v2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  uint64_t v16 = v12;
  SystemFormatStyle.Timer.withSizeVariant(_:)((uint64_t)v8, &v16);
  outlined assign with take of SystemFormatStyle.Timer((uint64_t)v8, (uint64_t)v11);
  _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0((uint64_t)v11, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  BOOL v13 = *(void *)&v11[*(int *)(v6 + 52)] < 6;
  outlined destroy of SystemFormatStyle.Stopwatch((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  return v13;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.Stopwatch(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.Timer(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t SystemFormatStyle.DateOffset.withSizeVariant(_:)(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.DateOffset(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset) & 1;
}

uint64_t SystemFormatStyle.DateOffset.withSizeVariant(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = v5;
  uint64_t v11 = a3(0);
  MEMORY[0x270FA5388](v11);
  BOOL v13 = (char *)&v32 - v12;
  uint64_t v14 = *a2;
  uint64_t result = _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(v8, a1, a4);
  uint64_t v16 = *(int *)(v11 + 32);
  uint64_t v17 = *(void *)(a1 + v16);
  uint64_t v18 = v17 + v14;
  if (__OFADD__(v17, v14))
  {
    __break(1u);
    goto LABEL_22;
  }
  *(void *)(a1 + v16) = v18;
  uint64_t v19 = *(void *)(v8 + *(int *)(v11 + 32));
  BOOL v20 = __OFSUB__(v19, 2);
  uint64_t v21 = v19 - 2;
  if (v20)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v22 = v21 & ~(v21 >> 63);
  BOOL v20 = __OFSUB__(v14, v22);
  uint64_t v23 = v14 - v22;
  if (v20)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t result = _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_0(v8, (uint64_t)v13, a4);
  if (v18 > 2)
  {
    uint64_t v24 = *(void *)&v13[*(int *)(v11 + 32)];
    uint64_t v25 = *(void *)&v13[*(int *)(v11 + 24)];
    if (v24 >= 3)
    {
      uint64_t v26 = v25 + 2;
      if (__OFADD__(v25, 2))
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      BOOL v20 = __OFSUB__(v26, v24);
      uint64_t v27 = v26 - v24;
      if (v20)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v27 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v27;
      }
    }
    uint64_t result = outlined destroy of SystemFormatStyle.Stopwatch((uint64_t)v13, a5);
    uint64_t v28 = *(void *)(a1 + v16);
    uint64_t v29 = *(void *)(a1 + *(int *)(v11 + 24));
    if (v28 >= 3)
    {
      BOOL v20 = __OFADD__(v29, 2);
      uint64_t v30 = v29 + 2;
      if (v20)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      BOOL v20 = __OFSUB__(v30, v28);
      uint64_t v31 = v30 - v28;
      if (v20)
      {
LABEL_28:
        __break(1u);
        return result;
      }
      if (v31 <= 1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v31;
      }
    }
    if (!__OFSUB__(v25, v29)) {
      return v25 - v29 == v23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  outlined destroy of SystemFormatStyle.Stopwatch((uint64_t)v13, a5);
  return 1;
}

uint64_t protocol witness for SizeAdaptiveFormatStyle.withSizeVariant(_:) in conformance SystemFormatStyle.DateReference(uint64_t a1, uint64_t *a2)
{
  return SystemFormatStyle.DateOffset.withSizeVariant(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference) & 1;
}

uint64_t outlined destroy of SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with take of SystemFormatStyle.Timer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SizeAdaptiveFormatStyle?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for SizeAdaptiveFormatStyle?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_245E55188()
{
  return Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
}

uint64_t sub_245E551B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.maximumUnitCount.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_245E551E4()
{
  return Duration.UnitsFormatStyle.maximumUnitCount.setter();
}

void type metadata accessor for SizeAdaptiveFormatStyle?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static AnyGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  long long v4 = a2[5];
  long long v5 = a2[3];
  long long v41 = a2[4];
  long long v42 = v4;
  long long v6 = a2[5];
  v43[0] = a2[6];
  *(_OWORD *)((char *)v43 + 12) = *(long long *)((char *)a2 + 108);
  long long v7 = a2[1];
  long long v37 = *a2;
  long long v38 = v7;
  long long v8 = a2[3];
  long long v10 = *a2;
  long long v9 = a2[1];
  long long v39 = a2[2];
  long long v40 = v8;
  long long v48 = v41;
  long long v49 = v6;
  *(_OWORD *)uint64_t v50 = a2[6];
  *(_OWORD *)&v50[12] = *(long long *)((char *)a2 + 108);
  long long v44 = v10;
  long long v45 = v9;
  int v11 = *a1;
  long long v46 = v39;
  long long v47 = v5;
  _GestureInputs.makeIndirectOutputs<A>()((uint64_t)&v26);
  unsigned int v13 = v26;
  unsigned int v12 = DWORD1(v26);
  uint64_t v14 = *((void *)&v26 + 1);
  int v15 = v27;
  long long v48 = v41;
  long long v49 = v42;
  *(_OWORD *)uint64_t v50 = v43[0];
  *(_OWORD *)&v50[12] = *(_OWORD *)((char *)v43 + 12);
  long long v44 = v37;
  long long v45 = v38;
  long long v46 = v39;
  long long v47 = v40;
  long long v20 = v26;
  int v21 = v27;
  outlined retain of _GestureInputs((uint64_t)&v37);
  swift_bridgeObjectRetain();
  AnyGestureInfo.init(gesture:inputs:outputs:oldInfo:)(v11, &v44, (uint64_t)&v20, 0, 0, 0, (uint64_t)&v26);
  uint64_t v23 = type metadata accessor for AnyGestureInfo.Value();
  uint64_t v16 = type metadata accessor for AnyGestureInfo();
  uint64_t v24 = v16;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v22, v16, MEMORY[0x263F8E628], v17, MEMORY[0x263F8E658], v18);
  long long v51 = v34;
  long long v52 = v35;
  v53[0] = v36[0];
  *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)v36 + 12);
  long long v48 = v30;
  long long v49 = v31;
  *(_OWORD *)uint64_t v50 = v32;
  *(_OWORD *)&v50[16] = v33;
  long long v44 = v26;
  long long v45 = v27;
  long long v46 = v28;
  long long v47 = v29;
  outlined release of AnyGestureInfo<A>((uint64_t)&v44);
  AGGraphGetFlags();
  AGGraphSetFlags();
  *(void *)&long long v26 = __PAIR64__(v12, v13);
  *((void *)&v26 + 1) = v14;
  LODWORD(v27) = v15;
  type metadata accessor for _GestureOutputs();
  LOBYTE(v20) = 0;
  uint64_t result = _GestureOutputs.setIndirectDependency(_:)();
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = v12;
  *(void *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 16) = v15;
  return result;
}

uint64_t AnyGesture.init<A>(_:)(uint64_t a1)
{
  return FontBox.__allocating_init(_:)(a1);
}

void AnyGestureInfo.init(gesture:inputs:outputs:oldInfo:)(int a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  long long v11 = a2[5];
  *(_OWORD *)(a7 + 72) = a2[4];
  *(_OWORD *)(a7 + 88) = v11;
  *(_OWORD *)(a7 + 104) = a2[6];
  *(_OWORD *)(a7 + 116) = *(_OWORD *)((char *)a2 + 108);
  long long v12 = a2[1];
  *(_OWORD *)(a7 + 8) = *a2;
  *(_OWORD *)(a7 + 24) = v12;
  long long v13 = a2[3];
  *(_OWORD *)(a7 + 40) = a2[2];
  *(_OWORD *)(a7 + 56) = v13;
  uint64_t v14 = *(void *)(a3 + 8);
  int v15 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a7 = a1;
  *(void *)(a7 + 136) = *(void *)a3;
  *(void *)(a7 + 144) = v14;
  *(_DWORD *)(a7 + 152) = v15;
  id v16 = (id)AGSubgraphGetCurrent();
  if (v16)
  {
    *(void *)(a7 + 160) = v16;
    *(void *)(a7 + 168) = a4;
    *(void *)(a7 + 176) = a5;
    *(_DWORD *)(a7 + 184) = a6;
  }
  else
  {
    outlined consume of AnyGestureInfo<()>.Value?(a4, a5);
    __break(1u);
  }
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance AnyGesture<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return static AnyGesture._makeGesture(gesture:inputs:)(a1, a2, a3);
}

void AnyGestureStorageBase.matches(_:)()
{
}

void AnyGestureStorageBase.makeChild(uniqueId:container:inputs:)()
{
}

void AnyGestureStorageBase.updateChild(context:)()
{
}

uint64_t AnyGestureStorageBase.deinit()
{
  return v0;
}

uint64_t AnyGestureStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL AnyGestureStorage.matches(_:)()
{
  return swift_dynamicCastClass() != 0;
}

double AnyGestureStorage.makeChild(uniqueId:container:inputs:)@<D0>(unsigned int a1@<W0>, unsigned int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v4;
  long long v7 = a3[5];
  long long v44 = a3[4];
  long long v45 = v7;
  long long v46 = a3[6];
  uint64_t v47 = *((void *)a3 + 14);
  long long v8 = a3[1];
  long long v40 = *a3;
  long long v41 = v8;
  long long v9 = a3[3];
  long long v42 = a3[2];
  long long v43 = v9;
  int v10 = *((_DWORD *)a3 + 30);
  uint64_t v11 = *(void *)(v6 + 120);
  uint64_t v12 = *(void *)(v6 + 128);
  *(void *)&long long v31 = __PAIR64__(a1, a2);
  uint64_t v28 = v11;
  uint64_t v29 = type metadata accessor for AnyGestureChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v27, v29, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
  _GraphValue.init(_:)(LODWORD(v24), v21);
  long long v35 = v44;
  long long v36 = v45;
  long long v37 = v46;
  uint64_t v38 = v47;
  long long v31 = v40;
  long long v32 = v41;
  long long v33 = v42;
  long long v34 = v43;
  int v39 = v10;
  (*(void (**)(double *__return_ptr, void *, long long *, uint64_t, uint64_t))(v12 + 32))(&v24, v21, &v31, v11, v12);
  if ((v10 & 8) != 0 && !(swift_conformsToProtocol2() ? v11 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      char v16 = 2;
    }
    else {
      char v16 = 1;
    }
    char v23 = v16;
    long long v35 = v44;
    long long v36 = v45;
    long long v37 = v46;
    uint64_t v38 = v47;
    long long v31 = v40;
    long long v32 = v41;
    long long v33 = v42;
    long long v34 = v43;
    int v39 = v10;
    *(double *)int v21 = v24;
    v21[1] = v25;
    int v22 = v26;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v17 = _GestureOutputs.debugData.getter();
    LOBYTE(v21[0]) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v11, &v23, 0x100000000, &v31, v17 | ((HIDWORD(v17) & 1) << 32), 0x100000000);
  }
  uint64_t v18 = v25;
  int v19 = v26;
  double result = v24;
  *(double *)a4 = v24;
  *(void *)(a4 + 8) = v18;
  *(_DWORD *)(a4 + 16) = v19;
  return result;
}

uint64_t AnyGestureStorage.updateChild(context:)(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = &v10[-v5];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v3 + 16))(&v10[-v5], v1 + *(void *)(v7 + 136), v2, v4);
  uint64_t v12 = v2;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in RuleContext.value.setter, (uint64_t)v11, v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
}

void AnyGestureInfo.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  double v4 = *(void **)(v1 + 168);
  if (!v4)
  {
    type metadata accessor for AnyGesture();
    unsigned int v9 = 0;
LABEL_6:
    AGGraphGetValue();
    uint64_t v11 = swift_retain();
    uint64_t v8 = AnyGestureInfo.makeItem(_:uniqueId:)(v11, v9);
    uint64_t v5 = v12;
    int v6 = v13;
    goto LABEL_7;
  }
  uint64_t v5 = *(void **)(v1 + 176);
  int v6 = *(_DWORD *)(v1 + 184);
  type metadata accessor for AnyGesture();
  uint64_t Value = (void *)AGGraphGetValue();
  if (((*(uint64_t (**)(void))(*(void *)v4 + 88))(*Value) & 1) == 0)
  {
    swift_retain();
    id v10 = v5;
    AnyGestureInfo.eraseItem(info:)();
    outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v4, v5);
    unsigned int v9 = v6 + 1;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)AGGraphGetValue();
  outlined copy of AnyGestureInfo<()>.Value?(v4, v5);
  swift_retain();
LABEL_7:
  uint64_t v14 = swift_release();
  uint64_t v19 = v8;
  id v20 = v5;
  int v21 = v6;
  MEMORY[0x270FA5388](v14);
  long long v18[2] = a1;
  v18[3] = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for AnyGestureInfo.Value();
  swift_retain();
  id v16 = v5;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v18, v15, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v17);
  swift_release();

  outlined consume of AnyGestureInfo<()>.Value?(*(void *)(v2 + 168), *(void **)(v2 + 176));
  *(void *)(v2 + 168) = v8;
  *(void *)(v2 + 176) = v16;
  *(_DWORD *)(v2 + 184) = v6;
}

uint64_t AnyGestureInfo.eraseItem(info:)()
{
  return AGSubgraphInvalidate();
}

uint64_t AnyGestureInfo.makeItem(_:uniqueId:)(uint64_t a1, unsigned int a2)
{
  id v5 = (id)AGSubgraphGetGraph();
  int v6 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v8 = result;
    AGGraphClearUpdate();
    id v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(v2, v8, a1, a2, v6, (uint64_t)&v10);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v10;
  }
  return result;
}

id closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  void (*v24)(uint64_t *__return_ptr, void, void, long long *);
  uint64_t v25;
  int v26;
  char v28;
  long long v29;
  long long v30;
  long long v33;
  long long v34;
  int v35;
  uint64_t v36;
  long long v37;
  int v38;
  uint64_t v42;
  unsigned char v43[16];
  uint64_t v44;
  uint64_t WitnessTable;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  _OWORD v52[2];
  long long v53;
  long long v54;
  unsigned char v55[48];
  unsigned char v56[44];
  long long v57;
  long long v58;
  unsigned char v59[48];
  unsigned char v60[44];
  uint64_t v61;
  uint64_t vars8;

  long long v61 = *MEMORY[0x263EF8340];
  long long v7 = *(_OWORD *)(a1 + 24);
  uint64_t v53 = *(_OWORD *)(a1 + 8);
  uint64_t v54 = v7;
  long long v8 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v55[32] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)uint64_t v56 = v8;
  *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v56[28] = *(_OWORD *)(a1 + 116);
  long long v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&unsigned char v55[16] = v9;
  long long v36 = v53;
  long long v35 = DWORD2(v53);
  uint64_t v38 = v8;
  long long v37 = *(_OWORD *)&v56[8];
  uint64_t v10 = *((void *)&v54 + 1);
  uint64_t v11 = *(void *)v55;
  long long v33 = *(_OWORD *)&v55[24];
  long long v34 = *(_OWORD *)&v55[8];
  uint64_t v12 = *(void *)&v55[40];
  uint64_t v13 = *(void *)&v56[24];
  uint64_t v14 = *(void *)&v56[36];
  swift_beginAccess();
  int v15 = *(_DWORD *)(v54 + 16);
  uint64_t v16 = *(void *)(v54 + 24);
  uint64_t v29 = *(_OWORD *)(v54 + 48);
  long long v30 = *(_OWORD *)(v54 + 32);
  uint64_t v17 = *(void *)(v54 + 64);
  uint64_t v18 = *(void *)(v54 + 72);
  char v19 = *(unsigned char *)(v54 + 80);
  uint64_t v28 = *(unsigned char *)(v54 + 81);
  uint64_t v20 = *(void *)(v54 + 88);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v15;
  *(void *)(v21 + 24) = v16;
  *(_OWORD *)(v21 + 32) = v30;
  *(_OWORD *)(v21 + 48) = v29;
  *(void *)(v21 + 64) = v17;
  *(void *)(v21 + 72) = v18;
  *(unsigned char *)(v21 + 80) = v19;
  *(unsigned char *)(v21 + 81) = v28;
  *(void *)(v21 + 88) = v20;
  outlined retain of _GestureInputs((uint64_t)&v53);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  LODWORD(v46) = *(_DWORD *)(a1 + 120);
  DWORD1(v46) = a2;
  long long v44 = type metadata accessor for AnyResetSeed();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v46, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v43, v44, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v23);
  *(void *)&uint64_t v57 = v36;
  DWORD2(v57) = v35;
  *(void *)&uint64_t v58 = v21;
  *((void *)&v58 + 1) = v10;
  *(void *)uint64_t v59 = v11;
  *(_OWORD *)&v59[8] = v34;
  *(_OWORD *)&v59[24] = v33;
  *(void *)&v59[40] = v12;
  *(_DWORD *)uint64_t v60 = v38;
  *(_OWORD *)&v60[8] = v37;
  *(void *)&v60[24] = v13;
  *(void *)&v60[36] = v14;
  uint64_t v50 = *(_OWORD *)&v59[32];
  long long v51 = *(_OWORD *)v60;
  v52[0] = *(_OWORD *)&v60[16];
  *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)&v60[28];
  long long v46 = v57;
  uint64_t v47 = v58;
  uint64_t v48 = *(_OWORD *)v59;
  long long v49 = *(_OWORD *)&v59[16];
  double v24 = *(void (**)(uint64_t *__return_ptr, void, void, long long *))(*(void *)a3 + 96);
  outlined retain of _GestureInputs((uint64_t)&v57);
  v24(&v42, a4, a2, &v46);
  outlined release of _GestureInputs((uint64_t)&v57);
  uint64_t v25 = *(void *)(a1 + 144);
  int v26 = *(_DWORD *)(a1 + 152);
  *(void *)&long long v46 = *(void *)(a1 + 136);
  *((void *)&v46 + 1) = v25;
  LODWORD(v47) = v26;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.attachIndirectOutputs(_:)((uint64_t)&v42);
  outlined release of _GestureInputs((uint64_t)&v57);
  swift_bridgeObjectRelease();
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a5;
  *(_DWORD *)(a6 + 16) = a4;
  swift_retain();

  return a5;
}

uint64_t AnyResetSeed.info.getter()
{
  type metadata accessor for AnyGestureInfo.Value();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = (void *)Value[1];
  swift_retain();
  id v3 = v2;
  return v1;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance AnyGestureInfo<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t AnyResetSeed.value.getter()
{
  int v0 = *(_DWORD *)AGGraphGetValue();
  AnyResetSeed.info.getter();
  uint64_t v2 = v1;
  int v4 = v3;
  swift_release();

  return (v4 + v0);
}

uint64_t AnyGestureChild.info.getter()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnyGestureInfo.Value();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  uint64_t v2 = (void *)Value[1];
  swift_retain();
  id v3 = v2;
  return v1;
}

uint64_t protocol witness for Rule.value.getter in conformance AnyResetSeed<A>@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = AnyResetSeed.value.getter();
  *a1 = result;
  return result;
}

void AnyGestureChild.updateValue()()
{
  int v1 = *(_DWORD *)(v0 + 4);
  AnyGestureChild.info.getter();
  id v3 = v2;
  int v5 = v4;
  swift_release();

  if (v1 == v5)
  {
    uint64_t v6 = AnyGestureChild.info.getter();

    if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(void))(*(void *)v6 + 104))();
      swift_release();
    }
  }
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance AnyGestureChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyGestureChild<A>()
{
  return specialized AnyGestureChild.description.getter();
}

uint64_t type metadata accessor for AnyGestureInfo.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyGestureInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of AnyGestureInfo<A>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 168);
  int v4 = *(void **)(a1 + 176);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of AnyGestureInfo<()>.Value?(v3, v4);
  return a1;
}

uint64_t type metadata accessor for AnyGestureStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for AnyGesture<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyGestureStorageBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AnyGestureStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyGestureStorageBase);
}

void destroy for AnyGestureInfo(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 168))
  {
    swift_release();
    uint64_t v2 = *(void **)(a1 + 176);
  }
}

uint64_t initializeWithCopy for AnyGestureInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v5 = a2 + 168;
  uint64_t v14 = *(void *)(a2 + 168);
  id v7 = *(void **)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  long long v8 = *(void **)(a2 + 160);
  *(void *)(a1 + 160) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v8;
  if (v14)
  {
    uint64_t v11 = *(void **)(a2 + 176);
    *(void *)(a1 + 168) = v14;
    *(void *)(a1 + 176) = v11;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    swift_retain();
    id v12 = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v5;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v5 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for AnyGestureInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void **)(a2 + 96);
  uint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  id v6 = v4;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  id v7 = *(void **)(a2 + 160);
  long long v8 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 168);
  if (!*(void *)(a1 + 168))
  {
    if (v10)
    {
      *(void *)(a1 + 168) = v10;
      uint64_t v14 = *(void **)(a2 + 176);
      *(void *)(a1 + 176) = v14;
      *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
      swift_retain();
      id v15 = v14;
      return a1;
    }
LABEL_7:
    long long v17 = *(_OWORD *)(a2 + 168);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v17;
    return a1;
  }
  if (!v10)
  {
    uint64_t v16 = type metadata accessor for AnyGestureInfo.Value();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1 + 168, v16);
    goto LABEL_7;
  }
  *(void *)(a1 + 168) = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void **)(a2 + 176);
  id v12 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v11;
  id v13 = v11;

  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy188_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 172) = *(long long *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for AnyGestureInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  long long v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  long long v5 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);

  uint64_t v6 = *(void *)(a2 + 168);
  if (!*(void *)(a1 + 168)) {
    goto LABEL_5;
  }
  if (!v6)
  {
    uint64_t v8 = type metadata accessor for AnyGestureInfo.Value();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1 + 168, v8);
LABEL_5:
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    return a1;
  }
  *(void *)(a1 + 168) = v6;
  swift_release();
  long long v7 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);

  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyGestureInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 188)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyGestureInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 188) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 188) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void destroy for AnyGestureInfo.Value(uint64_t a1)
{
  swift_release();
  unint64_t v2 = *(void **)(a1 + 8);
}

uint64_t initializeBufferWithCopyOfBuffer for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  id v4 = *(void **)(a2 + 8);
  long long v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AnyGestureInfo.Value(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in AnyGestureInfo<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized AnyGestureChild.description.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t type metadata accessor for AnyResetSeed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in RuleContext.value.setter()
{
  return AGGraphSetOutputValue();
}

uint64_t type metadata accessor for AnyGestureChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in AnyGestureChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AnyResetSeed<A>()
{
  return swift_getWitnessTable();
}

uint64_t SubscriptionLifetime.shouldAcceptCompletion(for:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = type metadata accessor for SubscriptionLifetime.StateType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v18 - v10;
  uint64_t v12 = (uint64_t)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v12, v5);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    MEMORY[0x270FA5388](EnumCaseMultiPayload);
    strcpy((char *)&v18[-6], "to subscriber subscription subscriptionID ");
    v18[1] = v4;
    long long v18[2] = type metadata accessor for AnyCancellable();
    v18[3] = type metadata accessor for Subscription();
    void v18[4] = MEMORY[0x263F8D6C8];
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    swift_release();
    uint64_t v15 = (uint64_t)&v11[*(int *)(TupleTypeMetadata + 64)];
    uint64_t v16 = *(void *)&v11[*(int *)(TupleTypeMetadata + 80)];
    __swift_destroy_boxed_opaque_existential_1(v15);
    (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v11, v4);
    uint64_t result = 0;
    if (v16 == a1)
    {
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
      swift_endAccess();
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return 0;
  }
  return result;
}

uint64_t SubscriptionLifetime.Connection.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (SubscriptionLifetime.shouldAcceptCompletion(for:)(*(void *)(v2 + *(int *)(a2 + 60)))) {
      dispatch thunk of Subscriber.receive(completion:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance SubscriptionLifetime<A>.Connection<A1>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CombineIdentifier();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

void protocol witness for Cancellable.cancel() in conformance SubscriptionLifetime<A>()
{
}

uint64_t method lookup function for SubscriptionLifetime(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SubscriptionLifetime);
}

uint64_t dispatch thunk of SubscriptionLifetime.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for SubscriptionLifetime.Connection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for CombineIdentifier() - 8);
  unsigned __int8 v7 = *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 80);
  LOBYTE(v6) = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (v6 | v7) & 0xF8 | 7u;
  uint64_t v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t assignWithCopy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CombineIdentifier();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  unint64_t v8 = (*(void *)(v7 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_weakCopyAssign();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 8 + v9) & ~v12;
  uint64_t v14 = (v12 + 8 + v8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  *(void *)((*(void *)(v11 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 40)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CombineIdentifier();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  unint64_t v8 = (*(void *)(v7 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_weakTakeAssign();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 8 + v9) & ~v12;
  uint64_t v14 = (v12 + 8 + v8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  *(void *)((*(void *)(v11 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SubscriptionLifetime.StateType(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 8;
  unint64_t v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (v10 | 1) > 0x18)
  {
    uint64_t v13 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    uint64_t v4 = (void *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v14 = __src[v10];
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      uint64_t v18 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      char v19 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v18 = *v19;
      unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = *(void *)(v21 + 24);
      *(void *)(v20 + 24) = v22;
      *(void *)(v20 + 32) = *(void *)(v21 + 32);
      uint64_t v23 = **(void (***)(unint64_t, unint64_t, uint64_t))(v22 - 8);
      swift_retain();
      v23(v20, v21, v22);
      *(void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 47) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v4 + v10) = 1;
      return v4;
    }
    if (v14)
    {
      memcpy(__dst, __src, v10 | 1);
      return v4;
    }
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v16 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v17 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    void *v16 = *v17;
    *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *((unsigned char *)v4 + v10) = 0;
  }
  swift_retain();
  return v4;
}

unsigned __int8 *assignWithCopy for SubscriptionLifetime.StateType(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = ((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v10;
    }
    unsigned int v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = *(_DWORD *)__dst + 2;
    }
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_release();
    }
    unsigned int v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      uint64_t v18 = (void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v19 = (void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v18 = *v19;
      unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = *(void *)(v21 + 24);
      *(void *)(v20 + 24) = v22;
      *(void *)(v20 + 32) = *(void *)(v21 + 32);
      uint64_t v23 = **(void (***)(unint64_t, unint64_t, uint64_t))(v22 - 8);
      swift_retain();
      v23(v20, v21, v22);
      *(void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 47) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      uint64_t v16 = (void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v17 = (void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      void *v16 = *v17;
      *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 0;
      swift_retain();
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for SubscriptionLifetime.StateType(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 8;
  unint64_t v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = *(_DWORD *)__src + 2;
  }
  if (v11 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    uint64_t v15 = (void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v20 = *(_OWORD *)v18;
    long long v19 = *(_OWORD *)(v18 + 16);
    *(void *)(v17 + 32) = *(void *)(v18 + 32);
    *(_OWORD *)unint64_t v17 = v20;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v18 + 47) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    uint64_t v13 = (void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 0;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for SubscriptionLifetime.StateType(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = (((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = v3 + 8;
  unint64_t v5 = ((v3 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v6 = v5 | 1;
  char v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    unsigned int v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      int v9 = *(_DWORD *)&a1[v6];
      if (!v9) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      int v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6]) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (!v8) {
      goto LABEL_20;
    }
  }
  int v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    unsigned int v13 = a1[v5];
    if (v13 >= 3) {
      return (v13 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_13:
  int v11 = (v9 - 1) << v7;
  if (v6 >= 4) {
    int v11 = 0;
  }
  if (v6 == 1) {
    int v12 = *a1;
  }
  else {
    int v12 = *(_DWORD *)a1;
  }
  return (v12 | v11) + 254;
}

void storeEnumTagSinglePayload for SubscriptionLifetime.StateType(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = (((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v5 + 8;
  unint64_t v7 = ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 | 1;
  if (a3 < 0xFE)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = (a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8);
    if (v12 > 0xFFFE)
    {
      int v9 = 4;
    }
    else if (v12 >= 0xFF)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 != 0;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 <= 0xFD)
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v7] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v10 = a2 - 254;
  if (v8 < 4)
  {
    int v11 = (v10 >> (8 * v8)) + 1;
    v10 &= ~(-1 << (8 * v8));
    bzero(a1, v8);
    if (v8 == 1)
    {
      *a1 = v10;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
    int v11 = 1;
  }
  *(_DWORD *)a1 = v10;
LABEL_20:
  switch(v9)
  {
    case 1:
      a1[v8] = v11;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v11;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x245E580E4);
    case 4:
      *(_DWORD *)&a1[v8] = v11;
      break;
    default:
      return;
  }
}

uint64_t getEnumTag for SubscriptionLifetime.StateType(_DWORD *a1, uint64_t a2)
{
  unint64_t v2 = (((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = v2 + 8;
  unint64_t v4 = ((v2 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  uint64_t v5 = v4 & 0xFFFFFFF8;
  uint64_t v6 = *((unsigned __int8 *)a1 + v4);
  if (v6 >= 2 && v5 != 0) {
    return (*a1 + 2);
  }
  return v6;
}

void destructiveInjectEnumTag for SubscriptionLifetime.StateType(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = (((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v5 = v4 + 8;
  size_t v6 = ((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 <= v5) {
    size_t v6 = v5;
  }
  if (a2 > 1)
  {
    if (v6) {
      char v7 = 2;
    }
    else {
      char v7 = a2;
    }
    if (v6) {
      unsigned int v8 = a2 - 2;
    }
    else {
      unsigned int v8 = 0;
    }
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in SubscriptionLifetime<A>.Connection<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized static Map2Gesture._makeGesture(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  AGGraphCreateOffsetAttribute2();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  specialized static Map2Gesture._makeGesture(modifier:inputs:body:)(OffsetAttribute2, a2, (uint64_t)&v37);
  unsigned int v7 = v37;
  unsigned int v30 = HIDWORD(v37);
  unint64_t v8 = v38;
  int v33 = v39;
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a2, (uint64_t)&v37);
  unsigned int v9 = v37;
  unsigned int v29 = HIDWORD(v37);
  unint64_t v10 = v38;
  int v31 = *(_DWORD *)(a2 + 120);
  int v32 = v39;
  long long v43 = &type metadata for TappableEvent;
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  uint64_t v44 = v11;
  long long v45 = &type metadata for TappableEvent;
  uint64_t v46 = lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  uint64_t KeyPath = swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v13)
  {
    LODWORD(v37) = a1;
    unint64_t v38 = KeyPath;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_1(0, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38]);
    type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>();
    lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>);
    unsigned int v14 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    unsigned int v14 = AGGraphCreateOffsetAttribute2();
  }
  unsigned int v15 = v14;
  swift_release();
  unsigned int v16 = *(_DWORD *)(a2 + 112);
  unint64_t v37 = __PAIR64__(v7, v15);
  unint64_t v38 = __PAIR64__(v16, v9);
  LODWORD(v39) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _s7SwiftUI12GesturePhaseOyytGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(0, &lazy cache variable for type metadata for Map2Phase<TappableEvent, CGFloat, TappableEvent>);
  lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(&lazy protocol witness table cache variable for type Map2Phase<TappableEvent, CGFloat, TappableEvent> and conformance Map2Phase<A, B, C>, &lazy cache variable for type metadata for Map2Phase<TappableEvent, CGFloat, TappableEvent>);
  int v17 = Attribute.init<A>(body:value:flags:update:)();
  int v18 = *MEMORY[0x263F288F8];
  uint64_t v19 = MEMORY[0x263F8EE78];
  int v34 = *MEMORY[0x263F288F8];
  if ((v31 & 8) != 0)
  {
    BOOL v20 = v30 == v18;
    if (v30 == v18) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v30;
    }
    BOOL v22 = v29 == v18;
    if (v22) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v29;
    }
    LOBYTE(v37) = v22;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(4, 0x100000000, a2, v21 | ((unint64_t)v20 << 32), v23 | ((unint64_t)v22 << 32));
  }
  uint64_t v41 = v19;
  int v42 = 0;
  unint64_t v37 = v8;
  LODWORD(v38) = v33;
  unint64_t v39 = v10;
  int v40 = v32;
  uint64_t v24 = *(void *)(a2 + 96);
  uint64_t v35 = v24;
  int v36 = *(_DWORD *)(a2 + 104);
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    outlined retain of LinearGradient((uint64_t)&v35);
    int v26 = (uint64_t *)(v24 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v37, *(v26 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v26, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v26 += 2;
      --v25;
    }
    while (v25);
    outlined release of LinearGradient((uint64_t)&v35);
    uint64_t v19 = v41;
    int v27 = v42;
  }
  else
  {
    int v27 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v17;
  *(_DWORD *)(a3 + 4) = v34;
  *(void *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 16) = v27;
  return result;
}

{
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  char v12;
  unsigned int OffsetAttribute2;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t result;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  ValueMetadata *v42;
  uint64_t v43;
  ValueMetadata *v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a2, (uint64_t)&v36);
  size_t v6 = v36;
  unsigned int v29 = HIDWORD(v36);
  unsigned int v7 = v37;
  int v32 = v38;
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((_DWORD *)a2, (uint64_t)&v36);
  unint64_t v8 = v36;
  uint64_t v28 = HIDWORD(v36);
  unsigned int v9 = v37;
  unsigned int v30 = *(_DWORD *)(a2 + 120);
  int v31 = v38;
  int v42 = &type metadata for TappableEvent;
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  long long v43 = v10;
  uint64_t v44 = &type metadata for TappableEvent;
  long long v45 = lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  uint64_t KeyPath = swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v12)
  {
    LODWORD(v36) = a1;
    unint64_t v37 = KeyPath;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_1(0, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538]);
    type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>();
    lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>);
    int OffsetAttribute2 = Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  }
  unsigned int v14 = OffsetAttribute2;
  swift_release();
  unsigned int v15 = *(_DWORD *)(a2 + 112);
  int v36 = __PAIR64__(v6, v14);
  unint64_t v37 = __PAIR64__(v15, v8);
  LODWORD(v38) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _s7SwiftUI12GesturePhaseOyytGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(0, &lazy cache variable for type metadata for Map2Phase<TappableEvent, Double, TappableEvent>);
  lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(&lazy protocol witness table cache variable for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>, &lazy cache variable for type metadata for Map2Phase<TappableEvent, Double, TappableEvent>);
  unsigned int v16 = Attribute.init<A>(body:value:flags:update:)();
  int v17 = *MEMORY[0x263F288F8];
  int v18 = MEMORY[0x263F8EE78];
  int v33 = *MEMORY[0x263F288F8];
  if ((v30 & 8) != 0)
  {
    uint64_t v19 = v29 == v17;
    if (v29 == v17) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v29;
    }
    uint64_t v21 = v28 == v17;
    if (v21) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v28;
    }
    LOBYTE(v36) = v21;
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(4, 0x100000000, a2, v20 | ((unint64_t)v19 << 32), v22 | ((unint64_t)v21 << 32));
  }
  int v40 = v18;
  uint64_t v41 = 0;
  int v36 = v7;
  LODWORD(v37) = v32;
  unint64_t v38 = v9;
  unint64_t v39 = v31;
  uint64_t v23 = *(void *)(a2 + 96);
  int v34 = v23;
  uint64_t v35 = *(_DWORD *)(a2 + 104);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    outlined retain of LinearGradient((uint64_t)&v34);
    uint64_t v25 = (uint64_t *)(v23 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v36, *(v25 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v25, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v25 += 2;
      --v24;
    }
    while (v24);
    outlined release of LinearGradient((uint64_t)&v34);
    int v18 = v40;
    int v26 = v41;
  }
  else
  {
    int v26 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v16;
  *(_DWORD *)(a3 + 4) = v33;
  *(void *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 16) = v26;
  return result;
}

uint64_t static Map2Gesture._makeGesture(modifier:inputs:body:)@<X0>(__int32 *a1@<X0>, long long *a2@<X1>, void (*a3)(int32x2_t *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int32x2_t *a8@<X8>)
{
  uint64_t v58 = a5;
  uint64_t v59 = a7;
  uint64_t v67 = a8;
  uint64_t v99 = *MEMORY[0x263EF8340];
  long long v10 = a2[3];
  long long v11 = a2[1];
  long long v95 = a2[2];
  long long v96 = v10;
  long long v12 = a2[3];
  long long v13 = a2[5];
  long long v97 = a2[4];
  long long v98 = v13;
  long long v14 = a2[1];
  long long v93 = *a2;
  long long v94 = v14;
  long long v84 = v12;
  long long v85 = v97;
  long long v86 = a2[5];
  v82[0] = v93;
  __int32 v15 = *a1;
  uint64_t v16 = *((void *)a2 + 12);
  int v17 = *((_DWORD *)a2 + 26);
  int v18 = *((_DWORD *)a2 + 27);
  unsigned int v20 = *((_DWORD *)a2 + 28);
  int v19 = *((_DWORD *)a2 + 29);
  int v57 = *((_DWORD *)a2 + 30);
  v82[1] = v11;
  long long v83 = v95;
  uint64_t v87 = v16;
  int v88 = v17;
  int v89 = v18;
  unsigned int v90 = v20;
  int v91 = v19;
  int v92 = v57;
  a3(&v75, v82);
  int32x2_t v21 = v75;
  uint64_t v66 = v76;
  int v65 = v77;
  uint64_t v78 = a4;
  uint64_t v79 = v58;
  uint64_t v80 = a6;
  uint64_t v81 = v59;
  LODWORD(v62) = v15;
  v75.i32[0] = v15;
  uint64_t v63 = a4;
  uint64_t v64 = a6;
  *(void *)&v82[0] = a4;
  *((void *)&v82[0] + 1) = v58;
  *(void *)&v82[1] = a6;
  *((void *)&v82[1] + 1) = v59;
  uint64_t v22 = v59;
  uint64_t v53 = type metadata accessor for Map2Gesture();
  uint64_t v61 = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:), v58, &v71);
  long long v84 = v96;
  long long v85 = v97;
  long long v86 = v98;
  v82[0] = v93;
  v82[1] = v94;
  long long v83 = v95;
  uint64_t v68 = v16;
  uint64_t v87 = v16;
  int v54 = v17;
  int v55 = v18;
  int v88 = v17;
  int v23 = v57;
  int v89 = v18;
  unsigned int v70 = v20;
  unsigned int v90 = v20;
  int v56 = v19;
  int v91 = v19;
  int v92 = v57;
  uint64_t v24 = (*(void *(**)(int32x2_t *__return_ptr, int32x2_t *, _OWORD *, uint64_t, uint64_t))(v22 + 32))(&v75, &v71, v82, v58, v22);
  if ((v57 & 8) != 0)
  {
    uint64_t v24 = (void *)swift_conformsToProtocol2();
    if (!(v24 ? v58 : 0))
    {
      _gestureModifierProtocolDescriptor();
      uint64_t v26 = swift_conformsToProtocol();
      long long v84 = v96;
      long long v85 = v97;
      long long v86 = v98;
      v82[0] = v93;
      if (v26) {
        char v27 = 2;
      }
      else {
        char v27 = 1;
      }
      v74[0] = v27;
      v82[1] = v94;
      long long v83 = v95;
      uint64_t v87 = v68;
      int v88 = v54;
      int v89 = v55;
      unsigned int v90 = v70;
      int v91 = v56;
      int v92 = v57;
      int32x2_t v71 = v75;
      uint64_t v72 = v76;
      int v73 = v77;
      swift_getAssociatedTypeWitness();
      type metadata accessor for _GestureOutputs();
      unint64_t v28 = _GestureOutputs.debugData.getter();
      v71.i8[0] = 1;
      uint64_t v24 = (void *)_GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v58, v74, 0x100000000, v82, v28 | ((HIDWORD(v28) & 1) << 32), 0x100000000);
    }
  }
  int32x2_t v29 = v75;
  uint64_t v60 = v76;
  int v69 = v77;
  MEMORY[0x270FA5388](v24);
  uint64_t v52 = v22;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  v75.i32[0] = v62;
  _GraphValue.subscript.getter(KeyPath, v82);
  swift_release();
  int v31 = v82[0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v82[0]) = v31;
  *(int32x2_t *)((char *)v82 + 4) = vzip1_s32(v21, v29);
  *(void *)((char *)v82 + 12) = v70;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v33 = v23;
  v49[2] = type metadata accessor for GesturePhase();
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v50 = type metadata accessor for Map2Phase();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v82, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v49, v50, MEMORY[0x263F8E628], v34, MEMORY[0x263F8E658], v35);
  _GestureOutputs.init(phase:)(v75.u32[0], (uint64_t)&v75);
  uint64_t v36 = v68;
  uint64_t v37 = v66;
  int v38 = v65;
  int v39 = v33;
  uint64_t v40 = v60;
  if ((v39 & 8) != 0)
  {
    long long v84 = v96;
    long long v85 = v97;
    long long v86 = v98;
    v82[0] = v93;
    v74[0] = 4;
    v82[1] = v94;
    long long v83 = v95;
    uint64_t v87 = v68;
    int v88 = v54;
    int v89 = v55;
    unsigned int v90 = v70;
    int v91 = v56;
    int v92 = v39;
    swift_bridgeObjectRetain();
    int32x2_t v71 = v21;
    uint64_t v72 = v37;
    int v73 = v38;
    type metadata accessor for _GestureOutputs();
    unint64_t v41 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    int32x2_t v71 = v29;
    uint64_t v72 = v40;
    int v73 = v69;
    type metadata accessor for _GestureOutputs();
    unint64_t v42 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    type metadata accessor for _GestureOutputs();
    v71.i8[0] = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v53, v74, 0x100000000, v82, v41 | ((HIDWORD(v41) & 1) << 32), v42 | ((HIDWORD(v42) & 1) << 32));
  }
  int32x2_t v43 = (int32x2_t)MEMORY[0x263F8EE78];
  *(void *)&long long v83 = MEMORY[0x263F8EE78];
  DWORD2(v83) = 0;
  *(void *)&v82[0] = v37;
  *(void *)&v82[1] = v40;
  DWORD2(v82[0]) = v38;
  DWORD2(v82[1]) = v69;
  uint64_t v44 = *(void *)(v36 + 16);
  if (v44)
  {
    swift_bridgeObjectRetain();
    long long v45 = (uint64_t *)(v36 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)v82, *(v45 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v45, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v45 += 2;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    int32x2_t v43 = (int32x2_t)v83;
    int v46 = DWORD2(v83);
  }
  else
  {
    int v46 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v48 = v67;
  *uint64_t v67 = v75;
  v48[1] = v43;
  v48[2].i32[0] = v46;
  return result;
}

uint64_t closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  void v10[2] = type metadata accessor for Map2Gesture();
  void v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t key path getter for Map2Gesture.body : <A, B, C>Map2Gesture<A, B, C>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(a1 + *(int *)(type metadata accessor for Map2Gesture() + 52));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_retain();
}

uint64_t key path setter for Map2Gesture.body : <A, B, C>Map2Gesture<A, B, C>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for Map2Gesture() + 52));
  swift_retain();
  uint64_t result = swift_release();
  *uint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t Map2Phase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance Map2Gesture<A, B, C>@<X0>(__int32 *a1@<X0>, long long *a2@<X1>, void (*a3)(int32x2_t *__return_ptr, _OWORD *)@<X2>, uint64_t *a4@<X4>, int32x2_t *a5@<X8>)
{
  return static Map2Gesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t Map2Phase.updateValue()(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v22 - v3;
  uint64_t v5 = type metadata accessor for GesturePhase();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v8 = type metadata accessor for GesturePhase();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    uint64_t v22 = v8;
    uint64_t v23 = v9;
    uint64_t v13 = (void (*)(char *, char *))specialized Map2Phase.body.getter();
    uint64_t Value = AGGraphGetValue();
    uint64_t v15 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, Value, v5);
    uint64_t v16 = v27;
    uint64_t v17 = AGGraphGetValue();
    uint64_t v18 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v4, v17, v16);
    swift_retain();
    v13(v7, v4);
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v16);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v7, v5);
    MEMORY[0x270FA5388](v19);
    *(&v22 - 2) = a1;
    *(&v22 - 1) = swift_getWitnessTable();
    uint64_t v20 = v22;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v22 - 4), v22, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v21);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, v20);
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance Map2Phase<A, B, C>()
{
  return Map2Phase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance Map2Phase<A, B, C>(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Map2Phase<A, B, C>()
{
  return specialized Map2Phase.description.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance Map2Phase<A, B, C>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t Gesture.combined<A, B>(with:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v29 = a9;
  v26[1] = a7;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  v26[0] = a1;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = a8;
  uint64_t v17 = type metadata accessor for Map2Gesture();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v26 - v20;
  (*(void (**)(char *, void, uint64_t, double))(v13 + 16))(v15, v26[0], a5, v19);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v15, a5);
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = a8;
  uint64_t v22 = &v21[*(int *)(type metadata accessor for Map2Gesture() + 52)];
  uint64_t v23 = v28;
  *(void *)uint64_t v22 = v27;
  *((void *)v22 + 1) = v23;
  swift_getWitnessTable();
  Gesture.modifier<A>(_:)((uint64_t)v21, a4, v17, v29);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  swift_retain();
  return v24(v21, v17);
}

uint64_t type metadata accessor for Map2Gesture()
{
  return swift_getGenericMetadata();
}

uint64_t Gesture.zip<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a2;
  void v12[3] = a3;
  void v12[4] = a4;
  v12[5] = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  Gesture.combined<A, B>(with:body:)(a1, (uint64_t)partial apply for closure #1 in Gesture.zip<A>(with:), (uint64_t)v12, a2, a3, TupleTypeMetadata2, a4, a5, a6);

  return swift_release();
}

uint64_t closure #1 in Gesture.zip<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for GesturePhase();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return GesturePhase.and<A>(_:)(a1, v4, AssociatedTypeWitness, a2);
}

uint64_t sub_245E59AEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.zip<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in Gesture.zip<A>(with:)(a1, a2);
}

uint64_t GesturePhase.and<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v10[2] = *(void *)(a2 + 16);
  void v10[3] = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return GesturePhase.and<A, B>(_:value:)(a1, (void (*)(char *, char *))partial apply for closure #1 in GesturePhase.and<A>(_:), (uint64_t)v10, a2, a3, TupleTypeMetadata2, a4);
}

{
  void v5[4];

  _OWORD v5[2] = *(void *)(a2 + 16);
  v5[3] = a3;
  return GesturePhase.and<A, B>(_:value:)(a1, (void (*)(char *, char *))_ViewInputs.base.modify, (uint64_t)v5, a2, a3, MEMORY[0x263F8EE60] + 8, a4);
}

uint64_t Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Gesture.gated<A>(by:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in Gesture.gated<A>(by:), a6);
}

uint64_t closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for GesturePhase();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - v9, a2, v6, v8);
  LODWORD(a2) = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for GesturePhase();
  if (a2 == 3) {
    return swift_storeEnumTagMultiPayload();
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a3, a1);
  }
}

uint64_t Gesture.enabled<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Gesture.gated<A>(by:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in Gesture.enabled<A>(by:), a6);
}

uint64_t closure #1 in Gesture.enabled<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for GesturePhase();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v15 - v9, a2, v6, v8);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (EnumCaseMultiPayload)
    {
      swift_getAssociatedTypeWitness();
      type metadata accessor for GesturePhase();
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_getAssociatedTypeWitness();
      uint64_t v14 = type metadata accessor for GesturePhase();
      GesturePhase.unwrapped.getter(v14, a3);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_getAssociatedTypeWitness();
    uint64_t v12 = type metadata accessor for GesturePhase();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a3, a1, v12);
  }
}

uint64_t Gesture.ended<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Gesture.gated<A>(by:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in Gesture.ended<A>(by:), a6);
}

uint64_t Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  _DWORD v14[2] = a2;
  _OWORD v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Gesture.combined<A, B>(with:body:)(a1, a6, (uint64_t)v14, a2, a3, AssociatedTypeWitness, a4, a5, a7);

  return swift_release();
}

uint64_t closure #1 in Gesture.ended<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for GesturePhase();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - v8;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for GesturePhase();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v19 - v13, a2, v10, v12);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    uint64_t v17 = v9;
    uint64_t v18 = v21;
    if (EnumCaseMultiPayload)
    {
      return swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_beginAccess();
      if ((static CoreTesting.isRunning & 1) != 0
        || (specialized static GestureContainerFeature.isEnabled.getter() & 1) != 0)
      {
        GesturePhase.paused()(v6, a3);
      }
      else
      {
        uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
        v20(v17, v18, v6);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          (*(void (**)(void))(*(void *)(AssociatedTypeWitness - 8) + 32))();
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v20(a3, v18, v6);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
        }
      }
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(a3, v21, v6);
  }
}

uint64_t GesturePhase.and<A, B>(_:value:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  v46[1] = a3;
  uint64_t v47 = a2;
  uint64_t v54 = a7;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v14 = *(void *)(a4 + 16);
  long long v51 = (char *)v46 - v15;
  uint64_t v52 = v14;
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v50 = (char *)v46 - v17;
  uint64_t v55 = a6;
  uint64_t v53 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v48 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GesturePhase();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = *(void *)(TupleTypeMetadata2 - 8);
  v23.n128_f64[0] = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v25 = (char *)v46 - v24;
  uint64_t v27 = (char *)v46 + *(int *)(v26 + 48) - v24;
  uint64_t v28 = *(void *)(a4 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
  uint64_t v49 = v8;
  v29((char *)v46 - v24, v8, a4, v23);
  uint64_t v30 = *(void *)(v20 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v46[0] = a1;
  v31(v27, a1, v20);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v20);
LABEL_5:
    type metadata accessor for GesturePhase();
    return swift_storeEnumTagMultiPayload();
  }
  int v33 = EnumCaseMultiPayload;
  int v34 = swift_getEnumCaseMultiPayload();
  if (v34 == 3)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, a4);
    goto LABEL_5;
  }
  if (!v33)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, a4);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v20);
    goto LABEL_13;
  }
  if (v34 != 2)
  {
    if (!v34)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v20);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v25, a4);
LABEL_13:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v54, 1, 1, v55);
      type metadata accessor for GesturePhase();
      return swift_storeEnumTagMultiPayload();
    }
    goto LABEL_16;
  }
  if (v33 != 2)
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, TupleTypeMetadata2);
    char v36 = 1;
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v25, a4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v20);
  char v36 = 2;
LABEL_17:
  int v38 = v50;
  uint64_t v37 = v51;
  GesturePhase.unwrapped.getter(a4, v50);
  uint64_t v39 = v52;
  uint64_t v40 = *(void *)(v52 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v52);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    GesturePhase.unwrapped.getter(v20, v37);
    uint64_t v41 = *(void *)(a5 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v37, 1, a5);
    if (result != 1)
    {
      unint64_t v42 = v48;
      v47(v38, v37);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v37, a5);
      uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v39);
      char v56 = 0;
      char v57 = v36;
      MEMORY[0x270FA5388](v43);
      v46[-4] = v39;
      v46[-3] = a5;
      uint64_t v44 = v55;
      v46[-2] = v55;
      v46[-1] = v42;
      _s7SwiftUI12GesturePhaseOyytGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
      GesturePhase.withValue<A>(_:)(v45, v44, v54);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v42, v44);
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in GesturePhase.and<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1, a3);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);

  return v11(v10, a2, a4);
}

uint64_t partial apply for closure #1 in GesturePhase.and<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in GesturePhase.and<A>(_:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t sub_245E5AAD4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Gesture.gated<A>(by:)(a1, a2, a3);
}

uint64_t sub_245E5AAF0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.enabled<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in Gesture.enabled<A>(by:)(a1, a2, a3);
}

uint64_t sub_245E5AB0C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture.ended<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in Gesture.ended<A>(by:)(a1, a2, a3);
}

uint64_t partial apply for implicit closure #1 in GesturePhase.and<A, B>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 32) - 8) + 16))(a1, *(void *)(v1 + 40));
}

uint64_t sub_245E5ABAC()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E5AC70()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E5AD74()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for Map2Gesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Map2Gesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    double v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *double v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Map2Gesture(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Map2Gesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Map2Gesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E5B388);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Map2Gesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245E5B57CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static Map2Gesture._makeGesture(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_245E5B5B8()
{
  return 32;
}

__n128 sub_245E5B5C4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for Map2Phase()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>()
{
  if (!lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>)
  {
    _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_1(255, &lazy cache variable for type metadata for (_:_:), &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38]);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, (_:_:)>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Map2Phase<TappableEvent, Double, TappableEvent> and conformance Map2Phase<A, B, C>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    _s7SwiftUI12GesturePhaseOyytGMaTm_0(255, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    _s7SwiftUI12GesturePhaseOyytGMaTm_0(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>()
{
  if (!lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>)
  {
    _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, &lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_1(255, &lazy cache variable for type metadata for (_:_:), (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538]);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)>);
    }
  }
}

void _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type Focus<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (_:_:)> and conformance Focus<A, B>(a4, a5);
    unint64_t v8 = type metadata accessor for Map2Gesture();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Map2Phase<TappableEvent, CGFloat, TappableEvent>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Map2Phase();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for Map2Phase<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in Map2Phase<A, B, C>()
{
  return swift_getWitnessTable();
}

unint64_t specialized Map2Phase.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x9286E2203270614DLL;
}

uint64_t specialized Map2Phase.body.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t Gesture.duration(minimum:maximum:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  swift_getAssociatedTypeWitness();
  *(double *)unint64_t v10 = a3;
  *(double *)&v10[1] = a4;
  char v11 = 0;
  uint64_t v8 = type metadata accessor for DurationGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a1, v8, a2);
}

uint64_t DurationGesture.init(minimumDuration:maximumDuration:trackFromEventStart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(unsigned char *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata accessor for DurationGesture()
{
  return __swift_instantiateGenericMetadata();
}

double DurationGesture.minimumDuration.getter()
{
  return *(double *)v0;
}

void DurationGesture.minimumDuration.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*DurationGesture.minimumDuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double DurationGesture.maximumDuration.getter()
{
  return *(double *)(v0 + 8);
}

void DurationGesture.maximumDuration.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*DurationGesture.maximumDuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DurationGesture.trackFromEventStart.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t DurationGesture.trackFromEventStart.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*DurationGesture.trackFromEventStart.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static DurationGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  unint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 80);
  *(_OWORD *)int v34 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)&v34[12] = *(_OWORD *)(a2 + 96);
  int v9 = *(_DWORD *)(a2 + 120);
  unint64_t v26 = v6;
  int32x2_t v27 = *(int32x2_t *)(a2 + 8);
  int32x2_t v10 = v27;
  uint64_t v28 = v7;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v29 = *(_OWORD *)(a2 + 24);
  long long v30 = v11;
  long long v31 = *(_OWORD *)(a2 + 56);
  uint64_t v32 = *(void *)(a2 + 72);
  int v33 = v8;
  int32x2_t v35 = *(int32x2_t *)(a2 + 112);
  int32x2_t v12 = v35;
  int v36 = v9;
  a3(v21, &v26);
  int32x2_t v13 = (int32x2_t)v21[1];
  int v14 = v22;
  uint64_t v15 = type metadata accessor for DurationPhase();
  unint64_t v20 = v21[0];
  unint64_t v26 = __PAIR64__(v21[0], v5);
  int32x2_t v27 = vzip1_s32(v10, v12);
  LOBYTE(v28) = (v9 & 0x10) != 0;
  *(void *)&long long v29 = 0;
  BYTE8(v29) = 1;
  HIDWORD(v29) = 0;
  uint64_t v24 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<GesturePhase<Double>>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v23, v15, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  int v18 = v21[0];
  unint64_t v26 = v20;
  int32x2_t v27 = v13;
  LODWORD(v28) = v14;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.withPhase<A>(_:)(v18, a4);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DurationGesture<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  return static DurationGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t DurationPhase.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v38 - v7;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    double v10 = v0[3];
    if ((_BYTE)v0[4])
    {
      char v11 = *((unsigned char *)v0 + 16);
      int v12 = *((_DWORD *)v0 + 9);
      long long v42 = *(_OWORD *)v0;
      char v43 = v11;
      double v44 = v10;
      char v45 = 1;
      int v46 = v12;
      DelayedPhase.childPhase.getter((uint64_t)v8);
      BOOL v13 = GesturePhase.isActive.getter(v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      char v14 = *((unsigned char *)v1 + 16);
      int v15 = *((_DWORD *)v1 + 9);
      long long v38 = *(_OWORD *)v1;
      if (v13
        || (double v10 = v1[3],
            char v16 = *((unsigned char *)v1 + 32),
            type metadata accessor for DurationGesture(),
            uint64_t v17 = AGGraphGetValue(),
            long long v18 = v38,
            *(unsigned char *)(v17 + 16) == 1))
      {
        uint64_t Value = (double *)AGGraphGetValue();
        long long v18 = v38;
        int v20 = 0;
        char v16 = 0;
        double v21 = *Value;
        v1[3] = *Value;
        double v10 = v21;
        *((unsigned char *)v1 + 32) = 0;
      }
      else
      {
        int v20 = 1;
      }
      double v22 = 0.0;
    }
    else
    {
      long long v38 = *(_OWORD *)v0;
      char v14 = *((unsigned char *)v0 + 16);
      int v15 = *((_DWORD *)v0 + 9);
      int v20 = 0;
      char v16 = 0;
      double v22 = *(double *)AGGraphGetValue() - v10;
      long long v18 = v38;
    }
    long long v38 = v18;
    long long v42 = v18;
    char v43 = v14;
    double v44 = v10;
    char v45 = v16;
    int v46 = v15;
    DelayedPhase.childPhase.getter((uint64_t)v5);
    char v24 = 3;
    double v25 = 0.0;
    char v26 = 0;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if (v20)
        {
          __break(1u);
LABEL_38:
          __break(1u);
          JUMPOUT(0x245E5C320);
        }
        type metadata accessor for DurationGesture();
        int32x2_t v27 = (unint64_t *)AGGraphGetValue();
        char v26 = 0;
        char v24 = 0;
        v23.n128_u64[0] = *v27;
        if (*(double *)v27 > v22) {
          goto LABEL_15;
        }
        v23.n128_u64[0] = v27[1];
        if (v23.n128_f64[0] <= v22)
        {
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
          char v26 = 0;
          char v24 = 3;
        }
        else
        {
          char v26 = 0;
          char v24 = 1;
LABEL_15:
          (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v23);
          if (((_BYTE)v1[4] & 1) == 0)
          {
            double v28 = v1[3];
            if (v20)
            {
              type metadata accessor for DurationGesture();
            }
            else
            {
              type metadata accessor for DurationGesture();
              double v31 = *(double *)AGGraphGetValue();
              if (v31 > v22)
              {
                double v32 = v28 + v31;
                if (*((unsigned char *)v1 + 16) == 1)
                {
LABEL_29:
                  uint64_t v36 = specialized static GestureGraph.current.getter();
                  double v37 = *(double *)(v36 + 264);
                  if (v32 < v37) {
                    double v37 = v32;
                  }
                  *(double *)(v36 + 264) = v37;
LABEL_32:
                  swift_release();
                  goto LABEL_33;
                }
LABEL_25:
                uint64_t v33 = specialized static ViewGraph.current.getter();
                swift_beginAccess();
                double v34 = *(double *)(v33 + 400);
                if (v32 < v34) {
                  double v34 = v32;
                }
                *(double *)(v33 + 400) = v34;
                goto LABEL_32;
              }
            }
            char v35 = *((unsigned char *)v1 + 16);
            double v32 = v28 + *(double *)(AGGraphGetValue() + 8);
            if (v35) {
              goto LABEL_29;
            }
            goto LABEL_25;
          }
LABEL_33:
          double v25 = v22;
        }
LABEL_34:
        double v39 = v25;
        char v40 = v26;
        char v41 = v24;
        type metadata accessor for GesturePhase<Double>();
        uint64_t result = AGGraphSetOutputValue();
        break;
      case 2u:
        if (v20) {
          goto LABEL_38;
        }
        type metadata accessor for DurationGesture();
        long long v29 = (unint64_t *)AGGraphGetValue();
        v30.n128_u64[0] = *v29;
        if (*(double *)v29 <= v22)
        {
          v30.n128_u64[0] = v29[1];
          if (v30.n128_f64[0] > v22)
          {
            (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
            char v26 = 0;
            char v24 = 2;
            goto LABEL_33;
          }
        }
        (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v30);
        char v26 = 0;
        goto LABEL_34;
      case 3u:
        goto LABEL_34;
      default:
        char v24 = 0;
        char v26 = v20;
        goto LABEL_15;
    }
  }
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance DurationPhase<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = -256;
}

uint64_t type metadata accessor for DurationPhase()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for GesturePhase<Double>()
{
  if (!lazy cache variable for type metadata for GesturePhase<Double>)
  {
    unint64_t v0 = type metadata accessor for GesturePhase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>);
    }
  }
}

void type metadata accessor for Attribute<GesturePhase<Double>>()
{
  if (!lazy cache variable for type metadata for Attribute<GesturePhase<Double>>)
  {
    type metadata accessor for GesturePhase<Double>();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<Double>>);
    }
  }
}

uint64_t getEnumTagSinglePayload for DurationGesture(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t instantiation function for generic protocol witness table for DurationPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DurationPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t Gesture.category(_:includeChildren:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = v7;
  char v11 = a2;
  uint64_t v8 = type metadata accessor for CategoryGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)&v10, a3, v8, a4);
}

uint64_t type metadata accessor for CategoryGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Gesture.categoryReader(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = type metadata accessor for GestureCategoryReader();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)v10, a3, v8, a4);
}

uint64_t GestureCategoryReader.init(callback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t type metadata accessor for GestureCategoryReader()
{
  return __swift_instantiateGenericMetadata();
}

void CategoryGesture.category.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *CategoryGesture.category.setter(void *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*CategoryGesture.category.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CategoryGesture.includeChildren.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CategoryGesture.includeChildren.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*CategoryGesture.includeChildren.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static CategoryGesture._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, double))type metadata accessor for CategoryGesture.Combiner, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12, a5);
}

uint64_t CategoryGesture.Combiner.value.getter@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for CategoryGesture();
  uint64_t result = AGGraphGetValue();
  uint64_t v5 = *(void *)result;
  if (*(unsigned char *)(result + 8) == 1)
  {
    uint64_t result = HIDWORD(a1);
    if (*MEMORY[0x263F288F8] == HIDWORD(a1))
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t result = AGGraphGetValue();
      uint64_t v6 = *(void *)result;
    }
    v5 |= v6;
  }
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance CategoryGesture<A>.Combiner<A1>@<X0>(void *a1@<X8>)
{
  return CategoryGesture.Combiner.value.getter(*v1, a1);
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance CategoryGesture<A>@<D0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

uint64_t key path setter for GestureCategoryReader.callback : <A>GestureCategoryReader<A>(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout CGRect) -> (@out ());
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t GestureCategoryReader.callback.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t GestureCategoryReader.callback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GestureCategoryReader.callback.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static GestureCategoryReader._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static CategoryGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, double))type metadata accessor for GestureCategoryReader.Reader, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, a5);
}

double static CategoryGesture._makeGesture(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X4>, uint64_t (*a5)(void, uint64_t, uint64_t, double)@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unsigned int v11 = *a1;
  long long v12 = a2[3];
  long long v37 = a2[2];
  long long v38 = v12;
  long long v13 = a2[5];
  long long v39 = a2[4];
  long long v40 = v13;
  long long v14 = a2[1];
  long long v35 = *a2;
  long long v36 = v14;
  uint64_t v15 = *((void *)a2 + 12);
  int v16 = *((_DWORD *)a2 + 26);
  long long v43 = *(long long *)((char *)a2 + 108);
  uint64_t v41 = v15;
  int v42 = v16;
  a3(&v33, &v35);
  long long v35 = v33;
  LODWORD(v36) = v34;
  uint64_t v17 = type metadata accessor for _GestureOutputs();
  uint64_t v18 = _GestureOutputs.subscript.getter((uint64_t)&type metadata for GestureCategory.Key, v17, (uint64_t)&type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key);
  uint64_t v19 = *(void *)(v15 + 16);
  if (v19)
  {
    uint64_t v20 = 32;
    while (*(ValueMetadata **)(v15 + v20) != &type metadata for GestureCategory.Key)
    {
      v20 += 16;
      if (!--v19) {
        goto LABEL_9;
      }
    }
    unsigned int v21 = *MEMORY[0x263F288F8];
    if ((v18 & 0x100000000) == 0) {
      unsigned int v21 = v18;
    }
    *(void *)&long long v35 = __PAIR64__(v21, v11);
    double v22 = MEMORY[0x270FA5388](v18);
    uint64_t v30 = a5(0, a4, a4, v22);
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<GestureCategory>();
    uint64_t v24 = v23;
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, a6, (uint64_t)&v29, v30, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
    LOBYTE(v35) = 0;
    PreferencesOutputs.subscript.setter(v32, &type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key);
    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t v26 = *((void *)&v33 + 1);
  int v27 = v34;
  double result = *(double *)&v33;
  *(void *)a7 = v33;
  *(void *)(a7 + 8) = v26;
  *(_DWORD *)(a7 + 16) = v27;
  return result;
}

uint64_t GestureCategoryReader.Reader.modifier.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for GestureCategoryReader();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;

  return swift_retain();
}

uint64_t *GestureCategoryReader.Reader.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v6 = a1;
  unint64_t v8 = HIDWORD(a1);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(_DWORD *)(v9 + 32) = v6;
  *(_DWORD *)(v9 + 36) = v8;
  specialized static Update.begin()();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in GestureCategoryReader.Reader.value.getter;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = one-time initialization token for actions;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  long long v12 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  }
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
  }
  void v12[2] = v14 + 1;
  uint64_t v15 = &v12[2 * v14];
  void v15[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v15[5] = v10;
  static Update.actions = v12;
  swift_bridgeObjectRelease();
  static Update.end()();
  double result = (uint64_t *)swift_release();
  if (*MEMORY[0x263F288F8] == v8)
  {
    uint64_t v17 = 0;
  }
  else
  {
    double result = (uint64_t *)AGGraphGetValue();
    uint64_t v17 = *result;
  }
  *a4 = v17;
  return result;
}

uint64_t closure #1 in GestureCategoryReader.Reader.value.getter(uint64_t a1)
{
  int v1 = HIDWORD(a1);
  GestureCategoryReader.Reader.modifier.getter(&v6);
  uint64_t v2 = v6;
  if (*MEMORY[0x263F288F8] == v1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)AGGraphGetValue();
  }
  uint64_t v5 = v3;
  v2(&v5);

  return swift_release();
}

uint64_t *protocol witness for Rule.value.getter in conformance GestureCategoryReader<A>.Reader<A1>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return GestureCategoryReader.Reader.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance GestureCategoryReader<A>@<D0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static GestureCategoryReader._makeGesture(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

uint64_t type metadata accessor for CategoryGesture.Combiner()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<GestureCategory>()
{
  if (!lazy cache variable for type metadata for Attribute<GestureCategory>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GestureCategory>);
    }
  }
}

uint64_t type metadata accessor for GestureCategoryReader.Reader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245E5CEF0@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  a2[1] = (uint64_t (*)())v5;

  return swift_retain();
}

uint64_t sub_245E5CF60()
{
  return 8;
}

void *sub_245E5CF6C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in GestureCategoryReader<A>.Reader<A1>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in CategoryGesture<A>.Combiner<A1>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245E5CFB0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GestureCategoryReader.Reader.value.getter()
{
  return closure #1 in GestureCategoryReader.Reader.value.getter(*(void *)(v0 + 32));
}

uint64_t sub_245E5CFCC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Path.offsetBy(dx:dy:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  if (a2 == 0.0 && a3 == 0.0)
  {
    long long v9 = *(_OWORD *)(v3 + 16);
    long long v10 = *(_OWORD *)v3;
    char v5 = *(unsigned char *)(v3 + 32);
    outlined init with take of Path.Storage(v3, (uint64_t)&v13);
    uint64_t result = _s7SwiftUI4PathVWOsTm_0((uint64_t)&v13, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    long long v8 = v9;
    long long v7 = v10;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v13, a2, a3);
    uint64_t result = Path.applying(_:)(&v13.a, (uint64_t)v11);
    long long v7 = v11[0];
    long long v8 = v11[1];
    char v5 = v12;
  }
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t static Path.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of Path.Storage(a1, (uint64_t)v5);
  outlined init with take of Path.Storage(a2, (uint64_t)v4);
  return specialized static Path.Storage.== infix(_:_:)((uint64_t)v5, (uint64_t)v4) & 1;
}

Swift::Void __swiftcall Path.addEllipse(in:transform:)(__C::CGRect in, CGAffineTransform *transform)
{
}

void Path.contains(points:eoFill:origin:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v53 = a5;
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (!a2)
  {
LABEL_13:
    *a3 = 0;
    return;
  }
  CGFloat v8 = *(double *)v5;
  double v7 = *(double *)(v5 + 8);
  double v9 = *(double *)(v5 + 16);
  double v10 = *(double *)(v5 + 24);
  double v11 = a4;
  switch(*(unsigned char *)(v5 + 32))
  {
    case 1:
      uint64_t v14 = 0;
      if (a1)
      {
        unint64_t v22 = 0;
        double v23 = v8;
        double v24 = v7;
        double v25 = v9;
        CGFloat v26 = v10;
        int v27 = (double *)(a1 + 8);
        uint64_t v28 = 16 * a2;
        *(CGFloat *)&long long v51 = v8;
        *(double *)&long long v50 = v9;
        double v52 = a4;
        do
        {
          double v29 = *v27;
          double v30 = *(v27 - 1) - v11;
          v61.origin.CGFloat x = v23;
          v61.origin.double y = v24;
          v61.size.CGFloat width = v25;
          v61.size.CGFloat height = v26;
          double Width = CGRectGetWidth(v61);
          v62.origin.CGFloat x = v23;
          v62.origin.double y = v24;
          v62.size.CGFloat width = v25;
          v62.size.CGFloat height = v26;
          if (Width == CGRectGetHeight(v62))
          {
            double v32 = v23;
          }
          else
          {
            v63.origin.CGFloat x = v23;
            v63.origin.double y = v24;
            v63.size.CGFloat width = v25;
            v63.size.CGFloat height = v26;
            double Height = CGRectGetHeight(v63);
            v64.origin.CGFloat x = v23;
            v64.origin.double y = v24;
            v64.size.CGFloat width = v25;
            v64.size.CGFloat height = v26;
            double v34 = Height / CGRectGetWidth(v64);
            double v32 = v34 * v23;
            double v25 = v34 * v25;
            double v30 = v30 * v34;
          }
          v65.origin.CGFloat x = v32;
          v65.origin.double y = v24;
          v65.size.CGFloat width = v25;
          v65.size.CGFloat height = v26;
          double v35 = v32 + CGRectGetWidth(v65) * 0.5;
          v66.origin.CGFloat x = v32;
          v66.origin.double y = v24;
          v66.size.CGFloat width = v25;
          v66.size.CGFloat height = v26;
          double v36 = v29 - v53 - (CGRectGetHeight(v66) * 0.5 + v24);
          v67.origin.CGFloat x = v32;
          v67.origin.double y = v24;
          v67.size.CGFloat width = v25;
          v67.size.CGFloat height = v26;
          CGFloat v37 = CGRectGetWidth(v67) * 0.5;
          double v38 = v37 * v37;
          if (v22 < 0x40) {
            uint64_t v39 = 1 << v22;
          }
          else {
            uint64_t v39 = 0;
          }
          double v11 = v52;
          if ((v30 - v35) * (v30 - v35) + v36 * v36 < v38) {
            v14 |= v39;
          }
          else {
            v14 &= ~v39;
          }
          double v23 = *(double *)&v51;
          double v25 = *(double *)&v50;
          v27 += 2;
          ++v22;
          v28 -= 16;
        }
        while (v28);
      }
      goto LABEL_36;
    case 2:
      long long v51 = *(_OWORD *)(*(void *)&v8 + 16);
      long long v50 = *(_OWORD *)(*(void *)&v8 + 32);
      uint64_t v40 = *(void *)(*(void *)&v8 + 48);
      uint64_t v41 = *(void *)(*(void *)&v8 + 56);
      int v42 = *(unsigned __int8 *)(*(void *)&v8 + 64);
      CGAffineTransformMakeTranslation(&v57, -a4, -v53);
      uint64_t v43 = swift_retain();
      MEMORY[0x270FA5388](v43);
      RBPathStorageInit();
      v54[0] = v51;
      v54[1] = v50;
      uint64_t v55 = v40;
      uint64_t v56 = v41;
      if (v42) {
        uint64_t v44 = 9;
      }
      else {
        uint64_t v44 = 8;
      }
      MEMORY[0x24C526C30](v48, v44, v54, 0);
      if (one-time initialization token for temporaryPathCallbacks == -1)
      {
        if (a1)
        {
LABEL_31:
          uint64_t v45 = RBPathContainsPoints();
          MEMORY[0x24C526C60](v48);
          *a3 = v45;
          _s7SwiftUI4PathVWOsTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          return;
        }
      }
      else
      {
        swift_once();
        if (a1) {
          goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_44;
    case 3:
    case 4:
      goto LABEL_47;
    case 5:
      CGAffineTransformMakeTranslation(&v57, -a4, -v53);
      if (*(unsigned char *)(*(void *)&v8 + 16))
      {
        if (*(unsigned char *)(*(void *)&v8 + 16) != 1)
        {
          uint64_t v46 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v46 != -1) {
LABEL_44:
          }
            swift_once();
          goto LABEL_40;
        }
      }
      else if (!*(void *)(*(void *)&v8 + 24))
      {
        goto LABEL_46;
      }
      swift_retain();
LABEL_40:
      if (a1)
      {
        uint64_t v47 = RBPathContainsPoints();
        _s7SwiftUI4PathVWOsTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        *a3 = v47;
        return;
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      int v49 = 0;
      v48[14] = 580;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x245E5D6ECLL);
    case 6:
      goto LABEL_13;
    default:
      if (a1)
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        CGFloat v15 = v10;
        CGFloat v16 = v9;
        CGFloat v17 = v7;
        uint64_t v18 = (double *)(a1 + 8);
        for (uint64_t i = 16 * a2 - 16; ; i -= 16)
        {
          v59.double y = *v18 - v53;
          v59.CGFloat x = *(v18 - 1) - v11;
          v60.origin.CGFloat x = v8;
          v60.origin.double y = v17;
          v60.size.CGFloat width = v16;
          v60.size.CGFloat height = v15;
          BOOL v20 = CGRectContainsPoint(v60, v59);
          if (v13 < 0x40)
          {
            uint64_t v21 = 1 << v13;
            if (!v20)
            {
LABEL_5:
              v14 &= ~v21;
              if (!i) {
                goto LABEL_36;
              }
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v21 = 0;
            if (!v20) {
              goto LABEL_5;
            }
          }
          v14 |= v21;
          if (!i) {
            goto LABEL_36;
          }
LABEL_6:
          v18 += 2;
          ++v13;
        }
      }
      uint64_t v14 = 0;
LABEL_36:
      *a3 = v14;
      return;
  }
}

uint64_t Path.formTrivialUnion(_:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t *)result;
  uint64_t v3 = *(uint64_t *)(result + 24);
  uint64_t v40 = *(uint64_t *)(result + 8);
  uint64_t v41 = *(uint64_t *)(result + 16);
  int v4 = *(unsigned __int8 *)(result + 32);
  uint64_t v5 = v1;
  uint64_t v6 = result;
  switch(*(unsigned char *)(result + 32))
  {
    case 2:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = *(void *)(v2 + 32);
      uint64_t v10 = *(void *)(v2 + 40);
      goto LABEL_4;
    case 3:
    case 4:
      goto LABEL_36;
    case 5:
      if (!*(unsigned char *)(v2 + 16))
      {
        if (!*(void *)(v2 + 24))
        {
          __break(1u);
LABEL_36:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245E5DADCLL);
        }
        goto LABEL_8;
      }
      if (*(unsigned char *)(v2 + 16) == 1)
      {
LABEL_8:
        swift_retain();
        goto LABEL_13;
      }
      uint64_t v11 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
LABEL_13:
      IsEmptdouble y = RBPathIsEmpty();
      uint64_t result = _s7SwiftUI4PathVWOsTm_0(v6, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      if (IsEmpty) {
        return result;
      }
LABEL_14:
      uint64_t v13 = *(void *)v5;
      double v14 = *(double *)(v5 + 16);
      int v15 = *(unsigned __int8 *)(v5 + 32);
      if (v15 == 2)
      {
        CGFloat v17 = *(double *)(v13 + 16);
        CGFloat v18 = *(double *)(v13 + 24);
        CGFloat v19 = *(double *)(v13 + 32);
        double v22 = *(double *)(v13 + 40);
        double v20 = *(double *)(v13 + 48);
        double v21 = *(double *)(v13 + 56);
        SwiftUI::RoundedCornerStyle v16 = *(unsigned char *)(v13 + 64);
      }
      else if (v15 == 1)
      {
        CGFloat v19 = *(double *)(v5 + 16);
        double v22 = *(double *)(v5 + 24);
        if (v14 != v22) {
          goto LABEL_33;
        }
        SwiftUI::RoundedCornerStyle v16 = SwiftUI_RoundedCornerStyle_circular;
        CGFloat v18 = *(double *)(v5 + 8);
        CGFloat v17 = *(double *)v5;
        double v20 = v14 * 0.5;
        double v21 = v14 * 0.5;
      }
      else
      {
        if (*(unsigned char *)(v5 + 32)) {
          goto LABEL_33;
        }
        SwiftUI::RoundedCornerStyle v16 = SwiftUI_RoundedCornerStyle_circular;
        CGFloat v17 = *(double *)v5;
        CGFloat v18 = *(double *)(v5 + 8);
        CGFloat v19 = *(double *)(v5 + 16);
        double v20 = 0.0;
        double v21 = 0.0;
        double v22 = *(double *)(v5 + 24);
      }
      switch(v4)
      {
        case 2:
          uint64_t v37 = *(void *)(v5 + 24);
          uint64_t v38 = *(void *)(v5 + 16);
          uint64_t v39 = *(void *)(v5 + 8);
          CGFloat v24 = *(double *)(v2 + 16);
          CGFloat v26 = *(double *)(v2 + 24);
          CGFloat v25 = *(double *)(v2 + 32);
          CGFloat v29 = *(double *)(v2 + 40);
          double v27 = *(double *)(v2 + 48);
          double v28 = *(double *)(v2 + 56);
          SwiftUI::RoundedCornerStyle v23 = *(unsigned char *)(v2 + 64);
          break;
        case 1:
          CGFloat v25 = *(double *)&v41;
          CGFloat v29 = *(double *)&v3;
          if (*(double *)&v41 != *(double *)&v3) {
            goto LABEL_33;
          }
          uint64_t v37 = *(void *)(v5 + 24);
          uint64_t v38 = *(void *)(v5 + 16);
          uint64_t v39 = *(void *)(v5 + 8);
          SwiftUI::RoundedCornerStyle v23 = SwiftUI_RoundedCornerStyle_circular;
          CGFloat v26 = *(double *)&v40;
          CGFloat v24 = *(double *)&v2;
          double v27 = *(double *)&v41 * 0.5;
          double v28 = *(double *)&v41 * 0.5;
          break;
        case 0:
          uint64_t v37 = *(void *)(v5 + 24);
          uint64_t v38 = *(void *)(v5 + 16);
          uint64_t v39 = *(void *)(v5 + 8);
          SwiftUI::RoundedCornerStyle v23 = SwiftUI_RoundedCornerStyle_circular;
          CGFloat v24 = *(double *)&v2;
          CGFloat v26 = *(double *)&v40;
          CGFloat v25 = *(double *)&v41;
          double v27 = 0.0;
          double v28 = 0.0;
          CGFloat v29 = *(double *)&v3;
          break;
        default:
LABEL_33:
          uint64_t v43 = 0x3FF0000000000000;
          CGFloat v44 = 0.0;
          CGFloat v45 = 0.0;
          uint64_t v46 = 0x3FF0000000000000;
          double v47 = 0.0;
          double v48 = 0.0;
          return Path.addPath(_:transform:)(v6, (double *)&v43);
      }
      uint64_t v43 = *(void *)&v17;
      CGFloat v44 = v18;
      CGFloat v45 = v19;
      uint64_t v46 = *(void *)&v22;
      double v47 = v20;
      double v48 = v21;
      SwiftUI::RoundedCornerStyle v49 = v16;
      CGFloat v35 = v25;
      uint64_t v36 = *(void *)&v24;
      v42.rect.origin.CGFloat x = v24;
      v42.rect.origin.double y = v26;
      CGFloat v30 = v26;
      v42.rect.size.CGFloat width = v25;
      v42.rect.size.CGFloat height = v29;
      double v33 = v28;
      double v34 = v27;
      v42.cornerSize.CGFloat width = v27;
      v42.cornerSize.CGFloat height = v28;
      SwiftUI::RoundedCornerStyle v31 = v23;
      v42.style = v23;
      uint64_t result = FixedRoundedRect.contains(_:)(&v42);
      if (result) {
        return result;
      }
      uint64_t v43 = v36;
      CGFloat v44 = v30;
      CGFloat v45 = v35;
      uint64_t v46 = *(void *)&v29;
      double v47 = v34;
      double v48 = v33;
      SwiftUI::RoundedCornerStyle v49 = v31;
      v42.rect.origin.CGFloat x = v17;
      v42.rect.origin.double y = v18;
      v42.rect.size.CGFloat width = v19;
      v42.rect.size.CGFloat height = v22;
      v42.cornerSize.CGFloat width = v20;
      v42.cornerSize.CGFloat height = v21;
      v42.style = v16;
      if (!FixedRoundedRect.contains(_:)(&v42)) {
        goto LABEL_33;
      }
      outlined consume of Path.Storage(v13, v39, v38, v37, v15);
      long long v32 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
      *(_OWORD *)(v5 + 16) = v32;
      *(unsigned char *)(v5 + 32) = *(unsigned char *)(v6 + 32);
      return outlined copy of Path.Storage(v2, v40, v41, v3, v4);
    case 6:
      return result;
    default:
      uint64_t v7 = *(void *)result;
      uint64_t v8 = *(void *)(result + 8);
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v10 = *(void *)(result + 24);
LABEL_4:
      uint64_t result = CGRectIsNull(*(CGRect *)&v7);
      if (result) {
        return result;
      }
      goto LABEL_14;
  }
}

double Path.init(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = RBPathRetain();
  uint64_t v4 = v3;
  type metadata accessor for Path.PathBox();
  uint64_t v5 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(unsigned char *)(v5 + 16) = 1;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v4;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 5;
  return result;
}

void __swiftcall Path.rect()(__C::CGRect_optional *__return_ptr retstr)
{
  outlined init with take of Path.Storage(v1, (uint64_t)v8);
  outlined init with take of Path.Storage((uint64_t)v8, (uint64_t)v9);
  v3.i32[0] = 0;
  v4.i32[0] = v10;
  int8x16_t v5 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vmvnq_s8(vceqq_s8(v4, v3)), 0);
  CGSize v6 = (CGSize)vbicq_s8(v9[1], v5);
  Swift::Bool v7 = v10 != 0;
  retstr->value.origin = (CGPoint)vbicq_s8(v9[0], v5);
  retstr->value.size = v6;
  retstr->is_nil = v7;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Path.PathBox.Kind()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Path.PathBox.Kind()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Path.PathBox.Kind()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance Path.PathBox.Kind@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 <= 3) {
    char v3 = 0x2010003u >> (8 * v2);
  }
  else {
    char v3 = 3;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Path.PathBox.Kind(unsigned char *a1@<X8>)
{
  *a1 = *v1 + 1;
}

double Path.PathBox.__allocating_init(takingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(unsigned char *)(v4 + 16) = 1;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  return result;
}

uint64_t Path.PathBox.init(takingPath:)(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return v2;
}

uint64_t Path.PathBox.deinit()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1) {
      RBPathRelease();
    }
    else {
      MEMORY[0x24C526C60](v0 + 24);
    }
    return v0;
  }
  char v1 = *(void **)(v0 + 24);
  if (v1)
  {

    return v0;
  }
  __break(1u);
  return result;
}

void Path.PathBox.prepareBuffer()()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) != 1) {
      return;
    }
  }
  else
  {
    char v1 = *(void **)(v0 + 24);
    if (!v1)
    {
      __break(1u);
      return;
    }
    RBPathMakeWithCGPath();
  }
  RBPathStorageInit();
  RBPathStorageAppendPath();
  *(unsigned char *)(v0 + 16) = 2;

  RBPathRelease();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Path.PathBox(uint64_t *a1, uint64_t *a2)
{
  return specialized static Path.PathBox.== infix(_:_:)(*a1, *a2);
}

uint64_t static StrokedPath.== infix(_:_:)()
{
  return 1;
}

uint64_t static TrimmedPath.== infix(_:_:)()
{
  return 1;
}

uint64_t Path.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Path.Storage(v1, a1);
}

__n128 Path.storage.setter(uint64_t a1)
{
  outlined init with take of Path.Storage(a1, (uint64_t)&v7);
  __n128 v6 = v7;
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  char v4 = v10;
  outlined consume of Path.Storage(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  __n128 result = v6;
  *(__n128 *)uint64_t v1 = v6;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*Path.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Path.init(storage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of Path.Storage(a1, (uint64_t)v6);
  char v3 = v7;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 32) = v3;
  return result;
}

uint64_t Path.init(box:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t Path.init(roundedRect:cornerSize:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  char v15 = *a1;
  if (CGRectIsNull(*(CGRect *)&a3))
  {
    uint64_t result = 0;
    char v17 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
  }
  else if (a7 == 0.0 && a8 == 0.0 {
         || (v18.origin.x = a3, v18.origin.double y = a4, v18.size.width = a5, v18.size.height = a6, CGRectIsInfinite(v18)))
  }
  {
    char v17 = 0;
    uint64_t result = *(void *)&a3;
  }
  else
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    char v17 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = a7;
    *(double *)(result + 56) = a8;
    a5 = 0.0;
    a6 = 0.0;
    *(unsigned char *)(result + 64) = v15;
  }
  *(void *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = v17;
  return result;
}

void *Path.init(roundedRect:cornerRadii:style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  char v19 = *a1;
  long long v24 = 0u;
  long long v25 = 0u;
  char v20 = 6;
  char v26 = 6;
  uint64_t v27 = 0x3FF0000000000000;
  long long v28 = 0u;
  uint64_t v29 = 0x3FF0000000000000;
  long long v30 = 0u;
  uint64_t result = (void *)CGRectIsNull(*(CGRect *)&a3);
  long long v22 = 0uLL;
  long long v23 = 0uLL;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized Path.withMutableBuffer(do:)((uint64_t)&v24, &v27, v19, a3, a4, a5, a6, a7, a8, a9, a10);
    long long v22 = v24;
    long long v23 = v25;
    char v20 = v26;
  }
  *(_OWORD *)a2 = v22;
  *(_OWORD *)(a2 + 16) = v23;
  *(unsigned char *)(a2 + 32) = v20;
  return result;
}

uint64_t Path.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized Path.init(_:)(a1, a2, (uint64_t)v5);
  return outlined init with take of Path?((uint64_t)v5, a3);
}

uint64_t Path.description.getter()
{
  uint64_t v0 = Path.cgPath.getter();
  uint64_t v1 = (void *)_CGPathCopyDescription(v0, 0.0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3)
{
  return specialized Path.withMutableBuffer(do:)(a1, 0, a2, a3);
}

{
  uint64_t vars8;

  return specialized Path.withMutableBuffer(do:)(a1, 1u, a2, a3);
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  char v4 = (void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 != 5)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(unsigned char *)(v12 + 16) = 2;
    RBPathStorageInit();
    int v13 = *(unsigned __int8 *)(v12 + 16);
    swift_retain();
    if (v13 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    outlined copy of Path.Storage(v2, v3, v10, v11, v5);
    Path.append(to:)(v12 + 24);
    outlined consume of Path.Storage(v2, v3, v10, v11, v5);
    uint64_t v6 = v12;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v6 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 24) = 0u;
    uint64_t result = (void *)(v6 + 24);
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    int v8 = *(unsigned __int8 *)(v2 + 16);
    *(unsigned char *)(v6 + 16) = v8;
    if (v8)
    {
      if (v8 == 1)
      {
        swift_retain();
        *(void *)(v6 + 24) = RBPathRetain();
        *(void *)(v6 + 32) = v9;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      double v14 = *(void **)(v2 + 24);
      if (!v14)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v14;
      id v15 = v14;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  *(void *)a1 = v6;
  v4[1] = 0;
  long long v4[2] = 0;
  *char v4 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v6 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  MEMORY[0x24C526C30](v6 + 24, 4, 0, 0);

  return (void *)swift_release();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)a1;
  uint64_t v12 = (void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 8);
  int v13 = *(unsigned __int8 *)(a1 + 32);
  if (v13 != 5)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(unsigned char *)(v20 + 16) = 2;
    RBPathStorageInit();
    int v21 = *(unsigned __int8 *)(v20 + 16);
    swift_retain();
    if (v21 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    v29[4] = v10;
    v29[5] = v11;
    v29[6] = v18;
    v29[7] = v19;
    char v30 = v13;
    outlined copy of Path.Storage(v10, v11, v18, v19, v13);
    Path.append(to:)(v20 + 24);
    outlined consume of Path.Storage(v10, v11, v18, v19, v13);
    uint64_t v14 = v20;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v14 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    uint64_t result = (void *)(v14 + 24);
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    int v16 = *(unsigned __int8 *)(v10 + 16);
    *(unsigned char *)(v14 + 16) = v16;
    if (v16)
    {
      if (v16 == 1)
      {
        swift_retain();
        *(void *)(v14 + 24) = RBPathRetain();
        *(void *)(v14 + 32) = v17;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      long long v22 = *(void **)(v10 + 24);
      if (!v22)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v22;
      id v23 = v22;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  unsigned __int8 v28 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v24, v25, v26, v27, v28);
  *(void *)a1 = v14;
  v12[1] = 0;
  void v12[2] = 0;
  *uint64_t v12 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v14 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)uint64_t v29 = a2;
  *(double *)&v29[1] = a3;
  *(double *)&v29[2] = a4;
  *(double *)&v29[3] = a5;
  MEMORY[0x24C526C30](v14 + 24, 2, v29, 0);
  return (void *)swift_release();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, unsigned __int8 a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v7 = a3;
  uint64_t v12 = a2;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)a1;
  id v15 = (void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 8);
  int v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 != 5)
  {
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 24) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 40) = 0u;
    *(unsigned char *)(v24 + 16) = 2;
    RBPathStorageInit();
    int v25 = *(unsigned __int8 *)(v24 + 16);
    swift_retain();
    if (v25 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    uint64_t v38 = v14;
    uint64_t v39 = v16;
    uint64_t v40 = v22;
    uint64_t v41 = v23;
    char v42 = v17;
    outlined copy of Path.Storage(v14, v16, v22, v23, v17);
    Path.append(to:)(v24 + 24);
    outlined consume of Path.Storage(v14, v16, v22, v23, v17);
    uint64_t v18 = v24;
    unsigned __int8 v7 = a3;
    uint64_t v12 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v18 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 24) = 0u;
    uint64_t result = (void *)(v18 + 24);
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    int v20 = *(unsigned __int8 *)(v14 + 16);
    *(unsigned char *)(v18 + 16) = v20;
    if (v20)
    {
      if (v20 == 1)
      {
        swift_retain();
        *(void *)(v18 + 24) = RBPathRetain();
        *(void *)(v18 + 32) = v21;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      uint64_t v26 = *(void **)(v14 + 24);
      if (!v26)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v26;
      id v27 = v26;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = *(void *)(a1 + 24);
  unsigned __int8 v32 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v28, v29, v30, v31, v32);
  *(void *)a1 = v18;
  v15[1] = 0;
  _OWORD v15[2] = 0;
  *id v15 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v18 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  long long v33 = v12[1];
  v37[0] = *v12;
  v37[1] = v33;
  v37[2] = v12[2];
  *(double *)uint64_t v36 = a4;
  *(double *)&v36[1] = a5;
  *(double *)&_OWORD v36[2] = a6;
  *(double *)&v36[3] = a7;
  MEMORY[0x24C526C30](v18 + 24, v7, v36, v37);
  return (void *)swift_release();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  char v9 = a3;
  uint64_t v16 = a2;
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = (void *)(a1 + 8);
  uint64_t v20 = *(void *)(a1 + 8);
  int v21 = *(unsigned __int8 *)(a1 + 32);
  if (v21 != 5)
  {
    uint64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 24) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *(unsigned char *)(v28 + 16) = 2;
    RBPathStorageInit();
    int v29 = *(unsigned __int8 *)(v28 + 16);
    swift_retain();
    if (v29 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    uint64_t v42 = v18;
    uint64_t v43 = v20;
    uint64_t v44 = v26;
    uint64_t v45 = v27;
    char v46 = v21;
    outlined copy of Path.Storage(v18, v20, v26, v27, v21);
    Path.append(to:)(v28 + 24);
    outlined consume of Path.Storage(v18, v20, v26, v27, v21);
    uint64_t v22 = v28;
    char v9 = a3;
    uint64_t v16 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v22 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 24) = 0u;
    uint64_t result = (void *)(v22 + 24);
    *(_OWORD *)(v22 + 104) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    int v24 = *(unsigned __int8 *)(v18 + 16);
    *(unsigned char *)(v22 + 16) = v24;
    if (v24)
    {
      if (v24 == 1)
      {
        swift_retain();
        *(void *)(v22 + 24) = RBPathRetain();
        *(void *)(v22 + 32) = v25;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      uint64_t v30 = *(void **)(v18 + 24);
      if (!v30)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v30;
      id v31 = v30;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *(void *)(a1 + 8);
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v35 = *(void *)(a1 + 24);
  unsigned __int8 v36 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v32, v33, v34, v35, v36);
  *(void *)a1 = v22;
  v19[1] = 0;
  void v19[2] = 0;
  *uint64_t v19 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v22 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  long long v37 = v16[1];
  v41[0] = *v16;
  v41[1] = v37;
  v41[2] = v16[2];
  *(double *)uint64_t v40 = a4;
  *(double *)&v40[1] = a5;
  *(double *)&v40[2] = a6;
  *(double *)&v40[3] = a7;
  *(double *)&v40[4] = a8;
  *(double *)&v40[5] = a9;
  MEMORY[0x24C526C30](v22 + 24, v9 & 1 | 8u, v40, v41);
  return (void *)swift_release();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8)
{
  char v8 = a3;
  char v9 = a2;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)a1;
  int v17 = (void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 8);
  int v19 = *(unsigned __int8 *)(a1 + 32);
  if (v19 != 5)
  {
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(unsigned char *)(v26 + 16) = 2;
    RBPathStorageInit();
    int v27 = *(unsigned __int8 *)(v26 + 16);
    swift_retain();
    if (v27 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    v40[5] = v16;
    void v40[6] = v18;
    v40[7] = v24;
    v40[8] = v25;
    char v41 = v19;
    outlined copy of Path.Storage(v16, v18, v24, v25, v19);
    Path.append(to:)(v26 + 24);
    outlined consume of Path.Storage(v16, v18, v24, v25, v19);
    uint64_t v20 = v26;
    char v8 = a3;
    char v9 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v20 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 24) = 0u;
    uint64_t result = (void *)(v20 + 24);
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    int v22 = *(unsigned __int8 *)(v16 + 16);
    *(unsigned char *)(v20 + 16) = v22;
    if (v22)
    {
      if (v22 == 1)
      {
        swift_retain();
        *(void *)(v20 + 24) = RBPathRetain();
        *(void *)(v20 + 32) = v23;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      uint64_t v28 = *(void **)(v16 + 24);
      if (!v28)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v28;
      id v29 = v28;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v30 = *(void *)a1;
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 24);
  unsigned __int8 v34 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v30, v31, v32, v33, v34);
  *(void *)a1 = v20;
  v17[1] = 0;
  v17[2] = 0;
  *int v17 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v20 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(double *)uint64_t v40 = a4;
  *(double *)&v40[1] = a5;
  *(double *)&v40[2] = a6;
  *(double *)&v40[3] = a7;
  *(double *)&v40[4] = a8;
  long long v35 = v9[1];
  v39[0] = *v9;
  v39[1] = v35;
  if (v8) {
    uint64_t v36 = 13;
  }
  else {
    uint64_t v36 = 14;
  }
  v39[2] = v9[2];
  MEMORY[0x24C526C30](v20 + 24, v36, v40, v39);
  return (void *)swift_release();
}

void *Path.withMutableBuffer(do:)(void (*a1)(uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)v1;
  int v5 = (void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 8);
  int v7 = *(unsigned __int8 *)(v1 + 32);
  if (v7 != 5)
  {
    uint64_t v12 = *(void *)(v1 + 16);
    uint64_t v13 = *(void *)(v1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(unsigned char *)(v14 + 16) = 2;
    RBPathStorageInit();
    int v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)(v14 + 24);
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    uint64_t v8 = v14;
    uint64_t v3 = a1;
LABEL_9:
    swift_release();
    goto LABEL_10;
  }
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(unsigned char *)(v1 + 32) = 6;
  uint64_t v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    uint64_t result = (void *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    int v10 = *(unsigned __int8 *)(v4 + 16);
    *(unsigned char *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(void *)(v8 + 24) = RBPathRetain();
        *(void *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      int v21 = *(void **)(v4 + 24);
      if (!v21)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v21;
      id v22 = v21;
    }
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v16 = *(void *)v2;
  uint64_t v17 = *(void *)(v2 + 8);
  uint64_t v18 = *(void *)(v2 + 16);
  uint64_t v19 = *(void *)(v2 + 24);
  unsigned __int8 v20 = *(unsigned char *)(v2 + 32);
  swift_retain();
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  *(void *)uint64_t v2 = v8;
  v5[1] = 0;
  _OWORD v5[2] = 0;
  *int v5 = 0;
  *(unsigned char *)(v2 + 32) = 5;
  if (*(unsigned char *)(v8 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  v3(v8 + 24);

  return (void *)swift_release();
}

Swift::Bool __swiftcall Path.contains(_:eoFill:)(CGPoint _, Swift::Bool eoFill)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  double v3 = *(double *)v2;
  double y = _.y;
  double x = _.x;
  char v6 = 0;
  switch(*(unsigned char *)(v2 + 32))
  {
    case 1:
      double v7 = *(double *)v2;
      CGFloat v8 = *(double *)(v2 + 8);
      CGFloat v9 = *(double *)(v2 + 16);
      CGFloat v10 = *(double *)(v2 + 24);
      return ellipseContains(in:contains:)(v7, v8, v9, v10, x, y);
    case 2:
      long long v12 = *(_OWORD *)(*(void *)&v3 + 16);
      long long v21 = *(_OWORD *)(*(void *)&v3 + 32);
      long long v22 = v12;
      uint64_t v13 = *(void *)(*(void *)&v3 + 48);
      uint64_t v14 = *(void *)(*(void *)&v3 + 56);
      int v15 = *(unsigned __int8 *)(*(void *)&v3 + 64);
      uint64_t v16 = swift_retain();
      MEMORY[0x270FA5388](v16);
      RBPathStorageInit();
      v23[0] = v22;
      v23[1] = v21;
      uint64_t v24 = v13;
      uint64_t v25 = v14;
      if (v15) {
        uint64_t v17 = 9;
      }
      else {
        uint64_t v17 = 8;
      }
      MEMORY[0x24C526C30](v19, v17, v23, 0);
      if (one-time initialization token for temporaryPathCallbacks != -1) {
        swift_once();
      }
      char v6 = RBPathContainsPoint();
      MEMORY[0x24C526C60](v19);
      goto LABEL_20;
    case 3:
    case 4:
      goto LABEL_23;
    case 5:
      if (!*(unsigned char *)(*(void *)&v3 + 16))
      {
        if (!*(void *)(*(void *)&v3 + 24))
        {
          __break(1u);
LABEL_23:
          int v20 = 0;
          v19[14] = 531;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245E5F98CLL);
        }
        goto LABEL_14;
      }
      if (*(unsigned char *)(*(void *)&v3 + 16) == 1)
      {
LABEL_14:
        swift_retain();
        goto LABEL_19;
      }
      uint64_t v18 = one-time initialization token for bufferCallbacks;
      swift_retain();
      if (v18 != -1) {
        swift_once();
      }
LABEL_19:
      char v6 = RBPathContainsPoint();
LABEL_20:
      _s7SwiftUI4PathVWOsTm_0(v2, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      return v6;
    case 6:
      return v6;
    default:
      v28.double x = _.x;
      v28.double y = _.y;
      return CGRectContainsPoint(*(CGRect *)v2, v28);
  }
}

BOOL ellipseContains(in:contains:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  double v11 = a1;
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  v19.origin.double x = v11;
  v19.origin.double y = a2;
  v19.size.CGFloat width = a3;
  v19.size.CGFloat height = a4;
  if (Width != CGRectGetHeight(v19))
  {
    v20.origin.double x = v11;
    v20.origin.double y = a2;
    v20.size.CGFloat width = a3;
    v20.size.CGFloat height = a4;
    double Height = CGRectGetHeight(v20);
    v21.origin.double x = v11;
    v21.origin.double y = a2;
    v21.size.CGFloat width = a3;
    v21.size.CGFloat height = a4;
    double v14 = Height / CGRectGetWidth(v21);
    double v11 = v14 * v11;
    a3 = v14 * a3;
    a5 = v14 * a5;
  }
  v22.origin.double x = v11;
  v22.origin.double y = a2;
  v22.size.CGFloat width = a3;
  v22.size.CGFloat height = a4;
  double v15 = v11 + CGRectGetWidth(v22) * 0.5;
  v23.origin.double x = v11;
  v23.origin.double y = a2;
  v23.size.CGFloat width = a3;
  v23.size.CGFloat height = a4;
  double v16 = a6 - (CGRectGetHeight(v23) * 0.5 + a2);
  v24.origin.double x = v11;
  v24.origin.double y = a2;
  v24.size.CGFloat width = a3;
  v24.size.CGFloat height = a4;
  CGFloat v17 = CGRectGetWidth(v24);
  return (a5 - v15) * (a5 - v15) + v16 * v16 < v17 * 0.5 * (v17 * 0.5);
}

void Path.contains(points:eoFill:origin:)(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Path.Element(long long *a1, long long *a2)
{
  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v4);
  outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)v5);
  return specialized static Path.Element.== infix(_:_:)(v4, v5);
}

uint64_t Path.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  Path.retainRBPath()();
  swift_retain();
  RBPathApply();
  swift_release();
  RBPathRelease();
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Path.forEach(_:)(void (**a1)(long long *), uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v2 = *a1;
      long long v10 = *(_OWORD *)*(void *)(a2 + 8);
      long long v11 = 0u;
      long long v12 = 0u;
      char v13 = 0;
      goto LABEL_8;
    case 1:
      uint64_t v2 = *a1;
      long long v10 = *(_OWORD *)*(void *)(a2 + 8);
      long long v11 = 0u;
      long long v12 = 0u;
      char v3 = 1;
      goto LABEL_7;
    case 2:
      uint64_t v2 = *a1;
      uint64_t v4 = *(long long **)(a2 + 8);
      long long v5 = *v4;
      long long v10 = v4[1];
      long long v11 = v5;
      long long v12 = 0uLL;
      char v3 = 2;
      goto LABEL_7;
    case 3:
      uint64_t v2 = *a1;
      char v6 = *(long long **)(a2 + 8);
      long long v7 = v6[1];
      long long v8 = *v6;
      long long v10 = v6[2];
      long long v11 = v8;
      long long v12 = v7;
      char v3 = 3;
      goto LABEL_7;
    case 4:
      uint64_t v2 = *a1;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      char v3 = 4;
LABEL_7:
      char v13 = v3;
LABEL_8:
      swift_retain();
      v2(&v10);
      swift_release();
      break;
    default:
      return 1;
  }
  return 1;
}

uint64_t @objc closure #1 in closure #1 in closure #1 in Path.forEach(_:)(void (**a1)(long long *), uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in Path.forEach(_:)(a1, a2) & 1;
}

uint64_t Path.mix(with:by:)@<X0>(uint64_t a1@<X8>)
{
  Path.retainRBPath()();
  Path.retainRBPath()();
  uint64_t v2 = RBPathCopyInterpolatedPath();
  uint64_t v4 = v3;
  if (RBPathIsNull(v2, v3))
  {
    uint64_t v5 = 0;
    char v6 = -1;
  }
  else
  {
    type metadata accessor for Path.PathBox();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(unsigned char *)(v5 + 16) = 1;
    char v6 = 5;
    *(void *)(v5 + 24) = v2;
    *(void *)(v5 + 32) = v4;
  }
  RBPathRelease();
  uint64_t result = RBPathRelease();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

void __swiftcall Path.roundedRect()(SwiftUI::FixedRoundedRect_optional *__return_ptr retstr)
{
  outlined init with take of Path.Storage(v1, (uint64_t)v8);
  outlined init with take of Path.Storage((uint64_t)v8, (uint64_t)&v9);
  switch(v11)
  {
    case 2:
      uint64_t v4 = *(CGSize **)&v9.x;
      SwiftUI::RoundedCornerStyle v5 = *(unsigned char *)(*(void *)&v9.x + 64);
      CGSize v6 = *(CGSize *)(*(void *)&v9.x + 32);
      retstr->value.rect.origin = *(CGPoint *)(*(void *)&v9.x + 16);
      retstr->value.rect.size = v6;
      retstr->value.cornerSize = v4[3];
      retstr->value.style = v5;
      return;
    case 1:
      CGSize v7 = v10;
      if (v10.width == v10.height)
      {
        retstr->value.rect.origin = v9;
        retstr->value.rect.size = v7;
        retstr->value.cornerSize.CGFloat width = v7.width * 0.5;
        retstr->value.cornerSize.CGFloat height = v7.width * 0.5;
        retstr->value.style = SwiftUI_RoundedCornerStyle_circular;
        return;
      }
      break;
    case 0:
      CGSize v3 = v10;
      retstr->value.rect.origin = v9;
      retstr->value.rect.size = v3;
      retstr->value.cornerSize.CGFloat width = 0.0;
      retstr->value.cornerSize.CGFloat height = 0.0;
      retstr->value.style = SwiftUI_RoundedCornerStyle_circular;
      return;
  }
  retstr->value.rect.size = 0u;
  retstr->value.cornerSize = 0u;
  retstr->value.rect.origin = 0u;
  retstr->value.style = SwiftUI_RoundedCornerStyle_unknownDefault;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Path.Storage(uint64_t a1, uint64_t a2)
{
  outlined init with take of Path.Storage(a1, (uint64_t)v4);
  outlined init with take of Path.Storage(a2, (uint64_t)v5);
  return specialized static Path.Storage.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Path@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized Path.init(_:)(a1, a2, (uint64_t)v5);
  return outlined init with take of Path?((uint64_t)v5, a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Path()
{
  uint64_t v0 = Path.cgPath.getter();
  uint64_t v1 = (void *)_CGPathCopyDescription(v0, 0.0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t @objc closure #7 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks()
{
  swift_retain();
  uint64_t BezierOrder = RBPathStorageGetBezierOrder();
  swift_release();
  return BezierOrder;
}

__n128 Path.path(in:)@<Q0>(uint64_t a1@<X8>)
{
  outlined init with take of Path.Storage(v1, (uint64_t)v5);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v5, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(v1 + 32);
  return result;
}

void Path.encode(to:)()
{
  outlined init with take of Path.Storage(v0, (uint64_t)v12);
  outlined init with take of Path.Storage((uint64_t)v12, (uint64_t)&v17);
  switch(v21)
  {
    case 1:
      double v1 = v17;
      double v2 = v18;
      double v3 = v19;
      double v4 = v20;
      Swift::UInt v5 = 18;
      goto LABEL_4;
    case 2:
      long long v6 = *(_OWORD *)(*(void *)&v17 + 32);
      long long v13 = *(_OWORD *)(*(void *)&v17 + 16);
      long long v14 = v6;
      long long v15 = *(_OWORD *)(*(void *)&v17 + 48);
      char v16 = *(unsigned char *)(*(void *)&v17 + 64);
      specialized ProtobufEncoder.messageField<A>(_:_:)(3);
      return;
    case 3:
    case 4:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x245E60290);
    case 5:
      Path.retainRBPath()();
      uint64_t v7 = RBPathCopyData();
      if (v7)
      {
        long long v8 = (void *)v7;
        uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v11 = v10;
        ProtobufEncoder.dataField(_:_:)(4, v9, v10);

        outlined consume of Data._Representation(v9, v11);
      }
      RBPathRelease();
      return;
    case 6:
      return;
    default:
      double v1 = v17;
      double v2 = v18;
      double v3 = v19;
      double v4 = v20;
      Swift::UInt v5 = 10;
LABEL_4:
      ProtobufEncoder.encodeVarint(_:)(v5);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
      return;
  }
}

double Path.init(from:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Path.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Path()
{
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance Path@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Path.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t StrokedPath.init(path:style:)(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
}

Swift::Void __swiftcall Path.addQuadCurve(to:control:)(CGPoint to, CGPoint control)
{
  specialized Path.withMutableBuffer(do:)(v2, control.x, control.y, to.x, to.y);
}

Swift::Void __swiftcall Path.closeSubpath()()
{
  specialized Path.withMutableBuffer(do:)(v0);
}

Swift::Void __swiftcall Path.addRect(_:transform:)(__C::CGRect _, CGAffineTransform *transform)
{
}

void Path.addEllipse(in:transform:)(double *a1, __int8 a2, unsigned __int8 a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v15 = a1[2];
  double v20 = a1[1];
  double v21 = *a1;
  double v16 = a1[3];
  CGFloat v17 = a1[4];
  CGFloat v18 = a1[5];
  if (!CGRectIsNull(*(CGRect *)&a4))
  {
    if (v7[2].i8[0] == 6
      && (int8x16_t v19 = vorrq_s8(*v7, v7[1]),
          !*(void *)&vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)))
      && (v20 == 0.0 && v15 == 0.0 || v21 == 0.0 && v16 == 0.0))
    {
      v22.CGFloat a = v21;
      v22.CGFloat b = v20;
      v22.CGFloat c = v15;
      v22.CGFloat d = v16;
      v22.tdouble x = v17;
      v22.tdouble y = v18;
      v23.origin.double x = a4;
      v23.origin.double y = a5;
      v23.size.CGFloat width = a6;
      v23.size.CGFloat height = a7;
      *(CGRect *)v7->i8 = CGRectApplyAffineTransform(v23, &v22);
      v7[2].i8[0] = a2;
    }
    else
    {
      specialized Path.withMutableBuffer(do:)((uint64_t)v7, a1, a3, a4, a5, a6, a7);
    }
  }
}

Swift::Void __swiftcall Path.addRoundedRect(in:cornerSize:style:transform:)(__C::CGRect in, CGSize cornerSize, SwiftUI::RoundedCornerStyle style, CGAffineTransform *transform)
{
  int8x16_t size = (int8x16_t)__PAIR128__(v7, *(unint64_t *)&cornerSize.height);
  CGSize v34 = (CGSize)__PAIR128__(v6, *(unint64_t *)&cornerSize.width);
  double height = in.size.height;
  double width = in.size.width;
  double y = in.origin.y;
  double x = in.origin.x;
  double c = transform->c;
  double b = transform->b;
  double a = transform->a;
  double d = transform->d;
  tdouble x = transform->tx;
  tdouble y = transform->ty;
  char v16 = *(unsigned char *)style;
  if (!CGRectIsNull((CGRect)in))
  {
    CGFloat v30 = ty;
    if (v4[2].i8[0] == 6
      && (int8x16_t v17 = vorrq_s8(*v4, v4[1]),
          !*(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)))
      && (b == 0.0 && c == 0.0 || a == 0.0 && d == 0.0))
    {
      v35.double a = a;
      v35.double b = b;
      v35.double c = c;
      v35.double d = d;
      v35.tdouble x = tx;
      v35.tdouble y = ty;
      v37.origin.double x = x;
      v37.origin.double y = y;
      v37.size.double width = width;
      v37.size.double height = height;
      CGRect v38 = CGRectApplyAffineTransform(v37, &v35);
      CGFloat v18 = v38.origin.x;
      CGFloat v19 = v38.origin.y;
      CGFloat v20 = v38.size.width;
      CGFloat v21 = v38.size.height;
      CGFloat v22 = v34.width;
      if ((~*(void *)&v34.width & 0x7FF0000000000000) != 0)
      {
        uint64_t v23 = size.i64[0];
        if ((~size.i64[0] & 0x7FF0000000000000) != 0)
        {
          v35.double a = a;
          v35.double b = b;
          v35.double c = c;
          v35.double d = d;
          v35.tdouble x = tx;
          v35.tdouble y = v30;
          CGSize v26 = CGSizeApplyAffineTransform(*(CGSize *)&v22, &v35);
          *(CGFloat *)v25.i64 = v26.height;
          *(CGFloat *)v24.i64 = v26.width;
          v27.f64[0] = NAN;
          v27.f64[1] = NAN;
          int8x16_t v28 = (int8x16_t)vnegq_f64(v27);
          size.i64[0] = vbslq_s8(v28, v25, size).u64[0];
          *(void *)&v34.double width = vbslq_s8(v28, v24, (int8x16_t)v34).u64[0];
        }
      }
      uint64_t v29 = swift_allocObject();
      *(CGFloat *)(v29 + 16) = v18;
      *(CGFloat *)(v29 + 24) = v19;
      *(CGFloat *)(v29 + 32) = v20;
      *(CGFloat *)(v29 + 40) = v21;
      *(CGFloat *)(v29 + 48) = v34.width;
      *(void *)(v29 + 56) = size.i64[0];
      *(unsigned char *)(v29 + 64) = v16;
      v4->i64[0] = v29;
      v4[1].i64[0] = 0;
      v4[1].i64[1] = 0;
      v4->i64[1] = 0;
      v4[2].i8[0] = 2;
    }
    else
    {
      specialized Path.withMutableBuffer(do:)((uint64_t)v4, transform, v16, x, y, width, height, v34.width, *(double *)size.i64);
    }
  }
}

Swift::Void __swiftcall Path.addRects(_:transform:)(Swift::OpaquePointer _, CGAffineTransform *transform)
{
  uint64_t v3 = *((void *)_._rawValue + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      double a = transform->a;
      double b = transform->b;
      double c = transform->c;
      long long v18 = *(_OWORD *)&transform->d;
      tdouble y = transform->ty;
      double v11 = *((double *)_._rawValue + 4);
      double v10 = *((double *)_._rawValue + 5);
      double v13 = *((double *)_._rawValue + 6);
      double v12 = *((double *)_._rawValue + 7);
      v21.origin.double x = v11;
      v21.origin.double y = v10;
      v21.size.double width = v13;
      v21.size.double height = v12;
      if (!CGRectIsNull(v21))
      {
        if (v2[2].i8[0] != 6) {
          goto LABEL_19;
        }
        int8x16_t v14 = vorrq_s8(*v2, v2[1]);
        if (vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL))) {
          goto LABEL_19;
        }
        BOOL v15 = a == 0.0;
        if (*(double *)&v18 != 0.0) {
          BOOL v15 = 0;
        }
        BOOL v16 = c == 0.0 && b == 0.0;
        if (!v16 && !v15)
        {
LABEL_19:
          specialized Path.withMutableBuffer(do:)((uint64_t)v2, transform, 5u, v11, v10, v13, v12);
        }
        else
        {
          v19.double a = a;
          v19.double b = b;
          v19.double c = c;
          *(_OWORD *)&v19.double d = v18;
          v19.tdouble y = ty;
          v22.origin.double x = v11;
          v22.origin.double y = v10;
          v22.size.double width = v13;
          v22.size.double height = v12;
          *(CGRect *)v2->i8 = CGRectApplyAffineTransform(v22, &v19);
          v2[2].i8[0] = 0;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      specialized Path.withMutableBuffer(do:)((uint64_t)v2, (uint64_t)_._rawValue, transform);
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall Path.addLines(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    specialized Path.withMutableBuffer(do:)(v1, (uint64_t)a1._rawValue);
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in Path.addLines(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    __break(1u);
  }
  long long v10 = *(_OWORD *)(a2 + 32);
  uint64_t result = MEMORY[0x24C526C30](a1, 0, &v10, 0);
  uint64_t v6 = v2 - 1;
  if (v6)
  {
    unint64_t v7 = (long long *)(a2 + 48);
    do
    {
      long long v8 = *v7++;
      long long v9 = v8;
      uint64_t result = MEMORY[0x24C526C30](a1, 1, &v9, 0);
      --v6;
    }
    while (v6);
  }
  return result;
}

void *Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(char a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7)
{
  return specialized Path.withMutableBuffer(do:)(v7, a2, a1, a3, a4, a5, a6, a7);
}

void *Path.addArc(tangent1End:tangent2End:radius:transform:)(_OWORD *a1, double a2, double a3, double a4, double a5, double a6)
{
  return specialized Path.withMutableBuffer(do:)(v6, a1, a2, a3, a4, a5, a6);
}

uint64_t Path.addPath(_:transform:)(uint64_t result, double *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = result;
  if (v3[2].i8[0] == 6
    && (int8x16_t v6 = vorrq_s8(*v3, v3[1]), !*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL))))
  {
    uint64_t result = Path.applying(_:)(a2, (uint64_t)v15);
    int8x16_t v12 = (int8x16_t)v15[1];
    *uint64_t v3 = (int8x16_t)v15[0];
    v3[1] = v12;
    v3[2].i8[0] = v16;
  }
  else
  {
    uint64_t v7 = *(void **)result;
    switch(*(unsigned char *)(result + 32))
    {
      case 2:
        long long v8 = (void *)v7[2];
        uint64_t v9 = v7[3];
        uint64_t v10 = v7[4];
        uint64_t v11 = v7[5];
        goto LABEL_7;
      case 3:
      case 4:
        goto LABEL_20;
      case 5:
        if (!*((unsigned char *)v7 + 16))
        {
          if (!v7[3])
          {
            __break(1u);
LABEL_20:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x245E60C10);
          }
          goto LABEL_12;
        }
        if (*((unsigned char *)v7 + 16) == 1)
        {
LABEL_12:
          swift_retain();
          goto LABEL_17;
        }
        uint64_t v13 = one-time initialization token for bufferCallbacks;
        swift_retain();
        if (v13 != -1) {
          swift_once();
        }
LABEL_17:
        IsEmptdouble y = RBPathIsEmpty();
        uint64_t result = _s7SwiftUI4PathVWOsTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        if ((IsEmpty & 1) == 0)
        {
LABEL_8:
          _s7SwiftUI4PathVWOsTm_0(v5, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          specialized Path.withMutableBuffer(do:)((uint64_t)v3, a2);
          uint64_t result = _s7SwiftUI4PathVWOsTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        }
        break;
      case 6:
        return result;
      default:
        long long v8 = *(void **)result;
        uint64_t v9 = *(void *)(result + 8);
        uint64_t v10 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
LABEL_7:
        uint64_t result = CGRectIsNull(*(CGRect *)&v8);
        if ((result & 1) == 0) {
          goto LABEL_8;
        }
        return result;
    }
  }
  return result;
}

uint64_t Path.currentPoint.getter()
{
  outlined init with take of Path.Storage(v0, (uint64_t)v5);
  outlined init with take of Path.Storage((uint64_t)v5, (uint64_t)v6);
  if (!v7) {
    return v6[0].i64[0];
  }
  if (v7 == 6)
  {
    int8x16_t v1 = vorrq_s8(v6[0], v6[1]);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))) {
      return 0;
    }
  }
  CGPathRef v2 = Path.cgPath.getter();
  if (CGPathIsEmpty(v2))
  {

    return 0;
  }
  uint64_t v4 = *(_OWORD *)&CGPathGetCurrentPoint(v2);

  return v4;
}

uint64_t Path.dilatedGlyphPath(with:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  v13[5] = *MEMORY[0x263EF8340];
  if (a2 == 0.0 && a3 == 0.0)
  {
    char v7 = *(unsigned char *)(v3 + 32);
    uint64_t v9 = *(void *)(v3 + 16);
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v10 = *(void *)v3;
    uint64_t v11 = *(void *)(v3 + 8);
    outlined init with take of Path.Storage(v3, (uint64_t)v13);
    uint64_t result = _s7SwiftUI4PathVWOsTm_0((uint64_t)v13, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  }
  else
  {
    type metadata accessor for Path.PathBox();
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(unsigned char *)(v10 + 16) = 2;
    RBPathStorageInit();
    *(double *)uint64_t v13 = a2;
    *(double *)&v13[1] = a3;
    MEMORY[0x24C526C30](v10 + 24, 22, v13, 0);
    Path.append(to:)(v10 + 24);
    uint64_t result = MEMORY[0x24C526C30](v10 + 24, 16, 0, 0);
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    char v7 = 5;
  }
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

uint64_t Path.normalized(eoFill:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(unsigned char *)(v4 + 16) = 2;
  RBPathStorageInit();
  v6[0] = 0;
  v6[1] = a1;
  MEMORY[0x24C526C30](v4 + 24, 20, 0, v6);
  Path.append(to:)(v4 + 24);
  uint64_t result = MEMORY[0x24C526C30](v4 + 24, 16, 0, 0);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 5;
  return result;
}

uint64_t Path.intersection(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 1;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.union(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 2;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.subtracting(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 3;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.symmetricDifference(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 4;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.lineIntersection(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 5;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.lineSubtraction(_:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  type metadata accessor for Path.PathBox();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(unsigned char *)(v6 + 16) = 2;
  RBPathStorageInit();
  v8[0] = 6;
  v8[1] = a2;
  MEMORY[0x24C526C30](v6 + 24, 20, 0, v8);
  Path.append(to:)(v6 + 24);
  outlined init with take of Path.Storage(a1, (uint64_t)v9);
  _s7SwiftUI4PathVWOsTm_0((uint64_t)v9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  MEMORY[0x24C526C30](v6 + 24, 21, 0, 0);
  Path.append(to:)(v6 + 24);
  _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  uint64_t result = MEMORY[0x24C526C30](v6 + 24, 16, 0, 0);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 5;
  return result;
}

uint64_t Path.mapPoints(_:)@<X0>(void (*a1)(void **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v2;
  CGFloat v8 = *(double *)(v3 + 8);
  CGFloat v7 = *(double *)(v3 + 16);
  CGFloat v9 = *(double *)(v3 + 24);
  char v10 = *(unsigned char *)(v3 + 32);
  outlined init with take of Path.Storage(v3, (uint64_t)v79);
  uint64_t result = outlined init with take of Path.Storage((uint64_t)v79, (uint64_t)&v80);
  switch(v82)
  {
    case 0:
      int8x16_t v12 = v80;
      int8x16_t v13 = v81;
      _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_2461C6AA0;
      *(int8x16_t *)(v14 + 32) = v12;
      *(double *)(v14 + 48) = *(double *)v12.i64 + *(double *)v13.i64;
      *(void *)(v14 + 56) = v12.i64[1];
      *(double *)(v14 + 64) = *(double *)v12.i64 + *(double *)v13.i64;
      *(double *)(v14 + 72) = *(double *)&v12.i64[1] + *(double *)&v13.i64[1];
      *(void *)(v14 + 80) = v12.i64[0];
      *(double *)(v14 + 88) = *(double *)&v12.i64[1] + *(double *)&v13.i64[1];
      uint64_t v72 = (void *)v14;
      a1(&v72);
      BOOL v15 = v72;
      uint64_t v16 = swift_bridgeObjectRetain();
      specialized CGRect.init(exactCornerPoints:)(v16, (uint64_t)v76);
      outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if (v78)
      {
        if (!v15[2]) {
          goto LABEL_47;
        }
        uint64_t v17 = v15[4];
        uint64_t v18 = v15[5];
        uint64_t v69 = type metadata accessor for Path.PathBox();
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(unsigned char *)(v19 + 16) = 2;
        RBPathStorageInit();
        BOOL v20 = *(unsigned char *)(v19 + 16) == 2;
        uint64_t v67 = a2;
        if (v20)
        {
          long long v73 = (unint64_t)v19;
          long long v74 = 0uLL;
          char v75 = 5;
        }
        else
        {
          swift_retain();
          Path.PathBox.prepareBuffer()();
          swift_release();
          if (*(unsigned char *)(v19 + 16) != 2)
          {
            swift_retain();
            Path.PathBox.prepareBuffer()();
LABEL_30:
            *(void *)&long long v71 = v17;
            *((void *)&v71 + 1) = v18;
            MEMORY[0x24C526C30](v19 + 24, 0, &v71, 0);
            swift_release();
            uint64_t v54 = 3;
            long long v55 = 0uLL;
            while ((unint64_t)(v54 - 2) < v72[2])
            {
              long long v70 = *(_OWORD *)&v72[2 * v54];
              long long v73 = v55;
              long long v74 = v55;
              char v75 = 6;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                uint64_t v56 = swift_allocObject();
                *(_OWORD *)(v56 + 24) = 0u;
                *(_OWORD *)(v56 + 104) = 0u;
                *(_OWORD *)(v56 + 88) = 0u;
                *(_OWORD *)(v56 + 72) = 0u;
                *(_OWORD *)(v56 + 56) = 0u;
                *(_OWORD *)(v56 + 40) = 0u;
                int v57 = *(unsigned __int8 *)(v19 + 16);
                *(unsigned char *)(v56 + 16) = v57;
                if (v57)
                {
                  if (v57 == 1)
                  {
                    swift_retain();
                    *(void *)(v56 + 24) = RBPathRetain();
                    *(void *)(v56 + 32) = v58;
                    swift_release();
                  }
                  else
                  {
                    RBPathStorageInit();
                  }
                }
                else
                {
                  CGPoint v59 = *(void **)(v19 + 24);
                  if (!v59)
                  {
                    __break(1u);
                    JUMPOUT(0x245E622E8);
                  }
                  *(void *)(v56 + 24) = v59;
                  id v60 = v59;
                }
                swift_release();
                uint64_t v19 = v56;
              }
              long long v61 = v73;
              long long v62 = v74;
              unsigned __int8 v63 = v75;
              swift_retain();
              outlined consume of Path.Storage(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63);
              long long v73 = (unint64_t)v19;
              long long v74 = 0uLL;
              char v75 = 5;
              if (*(unsigned char *)(v19 + 16) != 2) {
                Path.PathBox.prepareBuffer()();
              }
              long long v71 = v70;
              MEMORY[0x24C526C30](v19 + 24, 1, &v71, 0);
              swift_release();
              ++v54;
              long long v55 = 0uLL;
              if (v54 == 6)
              {
                specialized Path.withMutableBuffer(do:)((uint64_t)&v73);
                CGFloat v8 = *((double *)&v73 + 1);
                uint64_t v6 = v73;
                CGFloat v9 = *((double *)&v74 + 1);
                CGFloat v7 = *(double *)&v74;
                char v10 = v75;
                uint64_t result = swift_bridgeObjectRelease();
                a2 = v67;
                goto LABEL_23;
              }
            }
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
          }
        }
        swift_retain();
        goto LABEL_30;
      }
      CGFloat x = v77.origin.x;
      CGFloat y = v77.origin.y;
      CGFloat width = v77.size.width;
      CGFloat height = v77.size.height;
      BOOL IsNull = CGRectIsNull(v77);
      uint64_t result = swift_bridgeObjectRelease();
      if (IsNull)
      {
LABEL_25:
        uint64_t v6 = 0;
        CGFloat v8 = 0.0;
        CGFloat v7 = 0.0;
        CGFloat v9 = 0.0;
        char v10 = 6;
      }
      else
      {
        char v10 = 0;
        uint64_t v6 = *(void *)&x;
        CGFloat v8 = y;
        CGFloat v7 = width;
        CGFloat v9 = height;
      }
LABEL_23:
      *(void *)a2 = v6;
      *(CGFloat *)(a2 + 8) = v8;
      *(CGFloat *)(a2 + 16) = v7;
      *(CGFloat *)(a2 + 24) = v9;
      *(unsigned char *)(a2 + 32) = v10;
      return result;
    case 1:
      CGPoint v21 = (CGPoint)v80;
      CGSize v22 = (CGSize)v81;
      _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_2461C6AA0;
      *(CGPoint *)(v23 + 32) = v21;
      *(double *)(v23 + 48) = v21.x + v22.width;
      *(CGFloat *)(v23 + 56) = v21.y;
      *(double *)(v23 + 64) = v21.x + v22.width;
      *(double *)(v23 + 72) = v21.y + v22.height;
      *(CGFloat *)(v23 + 80) = v21.x;
      *(double *)(v23 + 88) = v21.y + v22.height;
      *(void *)&long long v73 = v23;
      a1((void **)&v73);
      specialized CGRect.init(exactCornerPoints:)(v73, (uint64_t)v76);
      uint64_t result = outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if (v78) {
        goto LABEL_17;
      }
      CGFloat v24 = v77.origin.x;
      CGFloat v25 = v77.origin.y;
      CGFloat v26 = v77.size.width;
      *(CGFloat *)&long long v70 = v77.size.height;
      double v27 = CGRectGetWidth(v77);
      v84.origin = v21;
      v84.int8x16_t size = v22;
      if (v27 != CGRectGetWidth(v84)) {
        goto LABEL_17;
      }
      v85.origin.CGFloat x = v24;
      v85.origin.CGFloat y = v25;
      v85.size.CGFloat width = v26;
      *(void *)&v85.size.CGFloat height = v70;
      double v28 = CGRectGetHeight(v85);
      v86.origin = v21;
      v86.int8x16_t size = v22;
      if (v28 != CGRectGetHeight(v86)) {
        goto LABEL_17;
      }
      v87.origin.CGFloat x = v24;
      v87.origin.CGFloat y = v25;
      v87.size.CGFloat width = v26;
      *(void *)&v87.size.CGFloat height = v70;
      uint64_t result = CGRectIsNull(v87);
      if (result) {
        goto LABEL_25;
      }
      v88.origin.CGFloat x = v24;
      v88.origin.CGFloat y = v25;
      v88.size.CGFloat width = v26;
      *(void *)&v88.size.CGFloat height = v70;
      uint64_t result = CGRectIsInfinite(v88);
      uint64_t v6 = *(void *)&v24;
      CGFloat v8 = v25;
      CGFloat v7 = v26;
      CGFloat v9 = *(double *)&v70;
      char v10 = result ^ 1;
      goto LABEL_23;
    case 2:
      double v29 = *(double *)(v80.i64[0] + 16);
      double v30 = *(double *)(v80.i64[0] + 24);
      double v31 = *(double *)(v80.i64[0] + 32);
      double v32 = *(double *)(v80.i64[0] + 40);
      *(void *)&long long v70 = *(void *)(v80.i64[0] + 48);
      uint64_t v69 = *(void *)(v80.i64[0] + 56);
      char v33 = *(unsigned char *)(v80.i64[0] + 64);
      _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_2461C6AA0;
      *(double *)(v34 + 32) = v29;
      *(double *)(v34 + 40) = v30;
      *(double *)(v34 + 48) = v29 + v31;
      *(double *)(v34 + 56) = v30;
      *(double *)(v34 + 64) = v29 + v31;
      *(double *)(v34 + 72) = v30 + v32;
      *(double *)(v34 + 80) = v29;
      *(double *)(v34 + 88) = v30 + v32;
      *(void *)&long long v73 = v34;
      a1((void **)&v73);
      specialized CGRect.init(exactCornerPoints:)(v73, (uint64_t)v76);
      uint64_t result = outlined init with take of CGRect?((uint64_t)v76, (uint64_t)&v77);
      if (v78) {
        goto LABEL_17;
      }
      CGFloat v35 = v77.origin.y;
      CGFloat v36 = v77.size.width;
      CGFloat v37 = v77.size.height;
      CGFloat v68 = v77.origin.x;
      double v38 = CGRectGetWidth(v77);
      v89.origin.CGFloat x = v29;
      v89.origin.CGFloat y = v30;
      v89.size.CGFloat width = v31;
      v89.size.CGFloat height = v32;
      if (v38 != CGRectGetWidth(v89)) {
        goto LABEL_17;
      }
      v90.origin.CGFloat x = v68;
      v90.origin.CGFloat y = v35;
      v90.size.CGFloat width = v36;
      v90.size.CGFloat height = v37;
      double v39 = CGRectGetHeight(v90);
      v91.origin.CGFloat x = v29;
      v91.origin.CGFloat y = v30;
      v91.size.CGFloat width = v31;
      v91.size.CGFloat height = v32;
      if (v39 != CGRectGetHeight(v91)) {
        goto LABEL_17;
      }
      uint64_t result = swift_allocObject();
      uint64_t v6 = result;
      CGFloat v8 = 0.0;
      CGFloat v7 = 0.0;
      CGFloat v9 = 0.0;
      *(CGFloat *)(result + 16) = v68;
      *(CGFloat *)(result + 24) = v35;
      *(CGFloat *)(result + 32) = v36;
      *(CGFloat *)(result + 40) = v37;
      uint64_t v40 = v69;
      *(void *)(result + 48) = v70;
      *(void *)(result + 56) = v40;
      char v10 = 2;
      *(unsigned char *)(result + 64) = v33;
      goto LABEL_23;
    case 6:
      int8x16_t v41 = vorrq_s8(v80, v81);
      if (vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL))) {
        goto LABEL_17;
      }
      goto LABEL_23;
    default:
LABEL_17:
      *(void *)&long long v71 = MEMORY[0x263F8EE78];
      MEMORY[0x270FA5388](result);
      CGRect v66 = &v71;
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = partial apply for closure #1 in Path.mapPoints(_:);
      *(void *)(v42 + 24) = v65;
      Path.retainRBPath()();
      *(void *)&long long v73 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
      *((void *)&v73 + 1) = v42;
      swift_retain();
      RBPathApply();
      swift_release();
      RBPathRelease();
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        goto LABEL_45;
      }
      a1((void **)&v71);
      CGMutablePathRef Mutable = CGPathCreateMutable();
      uint64_t v72 = 0;
      MEMORY[0x270FA5388](Mutable);
      v65[0] = v45;
      v65[1] = &v71;
      CGRect v66 = (long long *)&v72;
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = partial apply for closure #2 in Path.mapPoints(_:);
      *(void *)(v46 + 24) = &v64;
      Path.retainRBPath()();
      *(void *)&long long v73 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
      *((void *)&v73 + 1) = v46;
      swift_retain();
      RBPathApply();
      swift_release();
      RBPathRelease();
      char v47 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v47) {
        goto LABEL_46;
      }
      double v48 = Mutable;
      if (CGPathIsEmpty(v48))
      {

        uint64_t v6 = 0;
        char v10 = 6;
      }
      else
      {
        type metadata accessor for Path.PathBox();
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 24) = 0u;
        *(_OWORD *)(v6 + 104) = 0u;
        *(_OWORD *)(v6 + 88) = 0u;
        *(_OWORD *)(v6 + 72) = 0u;
        *(_OWORD *)(v6 + 56) = 0u;
        *(_OWORD *)(v6 + 40) = 0u;
        *(unsigned char *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = v48;

        char v10 = 5;
      }
      uint64_t result = swift_bridgeObjectRelease();
      CGFloat v8 = 0.0;
      CGFloat v7 = 0.0;
      CGFloat v9 = 0.0;
      goto LABEL_23;
  }
}

__n128 closure #1 in Path.mapPoints(_:)(long long *a1, void **a2)
{
  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)&v21);
  switch(v24)
  {
    case 2:
      __n128 v18 = v21;
      __n128 v20 = v22;
      uint64_t v4 = *a2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = v4;
      }
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      unint64_t v7 = v11 + 1;
      if (v11 >= v10 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v4);
      }
      long long v4[2] = v7;
      *(__n128 *)&v4[2 * v11 + 4] = v18;
      *a2 = v4;
      unint64_t v6 = v4[3];
      int64_t v8 = v11 + 2;
      if (v8 <= (uint64_t)(v6 >> 1)) {
        goto LABEL_5;
      }
      goto LABEL_19;
    case 3:
      __n128 v17 = v21;
      __n128 v19 = v22;
      __n128 v20 = v23;
      uint64_t v4 = *a2;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v4;
      if ((v12 & 1) == 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = v4;
      }
      unint64_t v14 = v4[2];
      unint64_t v13 = v4[3];
      unint64_t v15 = v14 + 1;
      if (v14 >= v13 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v4);
      }
      long long v4[2] = v15;
      *(__n128 *)&v4[2 * v14 + 4] = v17;
      *a2 = v4;
      unint64_t v16 = v4[3];
      unint64_t v7 = v14 + 2;
      if ((uint64_t)(v14 + 2) > (uint64_t)(v16 >> 1)) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v14 + 2, 1, v4);
      }
      long long v4[2] = v7;
      *(__n128 *)&v4[2 * v15 + 4] = v19;
      *a2 = v4;
      unint64_t v6 = v4[3];
      int64_t v8 = v14 + 3;
      if ((uint64_t)(v14 + 3) > (uint64_t)(v6 >> 1)) {
        goto LABEL_19;
      }
      goto LABEL_5;
    case 4:
      return result;
    default:
      __n128 v20 = v21;
      uint64_t v4 = *a2;
      char v5 = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v4;
      if ((v5 & 1) == 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        *a2 = v4;
      }
      unint64_t v7 = v4[2];
      unint64_t v6 = v4[3];
      int64_t v8 = v7 + 1;
      if (v7 < v6 >> 1) {
        goto LABEL_5;
      }
LABEL_19:
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v8, 1, v4);
LABEL_5:
      long long v4[2] = v8;
      __n128 result = v20;
      *(__n128 *)&v4[2 * v7 + 4] = v20;
      *a2 = v4;
      return result;
  }
}

void closure #2 in Path.mapPoints(_:)(long long *a1, CGPath *a2, uint64_t a3, unint64_t *a4)
{
  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)v39);
  switch(v39[48])
  {
    case 1:
      unint64_t v11 = *a4;
      if ((*a4 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      if (v11 >= *(void *)(*(void *)a3 + 16)) {
        goto LABEL_23;
      }
      uint64_t v12 = *(void *)a3 + 16 * v11;
      unint64_t v13 = *(void *)(v12 + 32);
      unint64_t v14 = *(void *)(v12 + 40);
      transform.double a = 1.0;
      transform.double b = 0.0;
      transform.double c = 0.0;
      transform.double d = 1.0;
      transform.tCGFloat x = 0.0;
      transform.tCGFloat y = 0.0;
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v14, v13), &transform);
      goto LABEL_8;
    case 2:
      unint64_t v15 = *a4;
      if ((*a4 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(*(void *)a3 + 16);
      if (v15 >= v16) {
        goto LABEL_25;
      }
      unint64_t v17 = v15 + 1;
      if (v15 + 1 >= v16) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)a3 + 32;
      __n128 v19 = (unint64_t *)(v18 + 16 * v15);
      unint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      __n128 v22 = (unint64_t *)(v18 + 16 * v17);
      unint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      transform.double a = 1.0;
      transform.double b = 0.0;
      transform.double c = 0.0;
      transform.double d = 1.0;
      transform.tCGFloat x = 0.0;
      transform.tCGFloat y = 0.0;
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v21, v20), (CGPoint)__PAIR128__(v24, v23), &transform);
      *a4 += 2;
      return;
    case 3:
      unint64_t v25 = *a4;
      if ((*a4 & 0x8000000000000000) != 0) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void *)(*(void *)a3 + 16);
      if (v25 >= v26) {
        goto LABEL_28;
      }
      unint64_t v27 = v25 + 1;
      if (v25 + 1 >= v26) {
        goto LABEL_29;
      }
      unint64_t v28 = v25 + 2;
      if (v25 + 2 >= v26) {
        goto LABEL_30;
      }
      uint64_t v29 = *(void *)a3 + 32;
      double v30 = (unint64_t *)(v29 + 16 * v25);
      unint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      char v33 = (unint64_t *)(v29 + 16 * v27);
      unint64_t v34 = *v33;
      unint64_t v35 = v33[1];
      CGFloat v36 = (unint64_t *)(v29 + 16 * v28);
      unint64_t v37 = *v36;
      unint64_t v38 = v36[1];
      transform.double a = 1.0;
      transform.double b = 0.0;
      transform.double c = 0.0;
      transform.double d = 1.0;
      transform.tCGFloat x = 0.0;
      transform.tCGFloat y = 0.0;
      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v32, v31), (CGPoint)__PAIR128__(v35, v34), (CGPoint)__PAIR128__(v38, v37), &transform);
      *a4 += 3;
      return;
    case 4:
      CGPathCloseSubpath(a2);
      return;
    default:
      unint64_t v7 = *a4;
      if ((*a4 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        JUMPOUT(0x245E62770);
      }
      if (v7 >= *(void *)(*(void *)a3 + 16)) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)a3 + 16 * v7;
      unint64_t v9 = *(void *)(v8 + 32);
      unint64_t v10 = *(void *)(v8 + 40);
      transform.double a = 1.0;
      transform.double b = 0.0;
      transform.double c = 0.0;
      transform.double d = 1.0;
      transform.tCGFloat x = 0.0;
      transform.tCGFloat y = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v10, v9), &transform);
LABEL_8:
      ++*a4;
      return;
  }
}

uint64_t static RBPath.withTemporaryPath<A>(do:builder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  closure #1 in static RBPath.withTemporaryPath<A>(do:builder:)((uint64_t)v13, 128, 128, v8, v9, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t closure #1 in static RBPath.withTemporaryPath<A>(do:builder:)(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  if (result)
  {
    uint64_t v8 = result;
    RBPathStorageInit();
    a4(v8);
    if (one-time initialization token for temporaryPathCallbacks != -1) {
      swift_once();
    }
    a6(v8, temporaryPathCallbacks);
    return MEMORY[0x24C526C60](v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double one-time initialization function for temporaryPathCallbacks()
{
  uint64_t v0 = swift_slowAlloc();
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 8) = @objc closure #1 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 16) = @objc closure #2 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 24) = @objc closure #3 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 32) = @objc closure #4 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 40) = @objc closure #5 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 48) = @objc closure #6 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 64) = @objc closure #7 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 72) = @objc closure #8 in closure #1 in variable initialization expression of temporaryPathCallbacks;
  *(void *)(v0 + 80) = 0;
  temporaryPathCallbacks = v0;
  return result;
}

void @objc closure #1 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
}

void @objc closure #2 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
}

uint64_t @objc closure #5 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  return MEMORY[0x270F5ADA8]();
}

uint64_t @objc closure #6 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  return MEMORY[0x270F5ADB0]();
}

id @objc closure #8 in closure #1 in variable initialization expression of temporaryPathCallbacks()
{
  id v0 = (id)MEMORY[0x24C526CA0]();
  id v1 = v0;
  if (v0) {

  }
  return v1;
}

uint64_t specialized static Path.PathBox.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(void *)(a1 + 24))
    {
      __break(1u);
      goto LABEL_17;
    }
    int v3 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_12;
    }
LABEL_7:
    if (*(void *)(a2 + 24)) {
      return RBPathEqualToPath();
    }
LABEL_17:
    __break(1u);
    JUMPOUT(0x245E62C28);
  }
  if (*(unsigned char *)(a1 + 16) != 1)
  {
    if (one-time initialization token for bufferCallbacks != -1) {
      swift_once();
    }
    int v3 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_7;
  }
LABEL_12:
  if (v3 != 1 && one-time initialization token for bufferCallbacks != -1) {
    swift_once();
  }
  return RBPathEqualToPath();
}

uint64_t sub_245E62C44()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Path.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 32);
  outlined copy of Path.Storage(*(void *)a1, v4, v5, v6, v7);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  return a2;
}

BOOL specialized static Path.Element.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)&v19);
  switch(v23)
  {
    case 1:
      double v3 = v19.f64[1];
      double v4 = v19.f64[0];
      outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)&v15);
      if (v18 != 1) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 2:
      float64x2_t v6 = v19;
      double v7 = v20.f64[1];
      double v8 = v20.f64[0];
      outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)&v15);
      if (v18 != 2) {
        goto LABEL_23;
      }
      if (v6.f64[0] != v15.f64[0] || v6.f64[1] != v15.f64[1]) {
        goto LABEL_23;
      }
      double v10 = v16.f64[1];
      double v11 = v16.f64[0];
      goto LABEL_18;
    case 3:
      float64x2_t v13 = v19;
      float64x2_t v14 = v20;
      double v8 = v21;
      double v7 = v22;
      outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)&v15);
      if (v18 != 3
        || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v13, v15), (int32x4_t)vceqq_f64(v14, v16))), 0xFuLL))) & 1) == 0)
      {
        goto LABEL_23;
      }
      double v10 = *(double *)&v17.i64[1];
      double v11 = *(double *)v17.i64;
LABEL_18:
      BOOL result = v7 == v10 && v8 == v11;
      break;
    case 4:
      outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)&v15);
      if (v18 != 4) {
        goto LABEL_23;
      }
      int8x16_t v12 = vorrq_s8((int8x16_t)v16, v17);
      if (*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | *(void *)&v15.f64[1] | *(void *)&v15.f64[0]) {
        goto LABEL_23;
      }
      BOOL result = 1;
      break;
    default:
      double v3 = v19.f64[1];
      double v4 = v19.f64[0];
      outlined init with take of GraphicsContext.GradientGeometry(a2, (uint64_t)&v15);
      if (v18) {
LABEL_23:
      }
        BOOL result = 0;
      else {
LABEL_5:
      }
        BOOL result = v3 == v15.f64[1] && v4 == v15.f64[0];
      break;
  }
  return result;
}

unint64_t specialized Path.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3 = (id *)result;
  uint64_t v73 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if (v4 >= v5) {
    goto LABEL_75;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = 0;
  uint64_t v9 = 0;
  unsigned __int8 v69 = 6;
  while (2)
  {
    unint64_t v10 = (unint64_t)v3[3];
    if (!v10) {
      goto LABEL_9;
    }
    id v11 = v3[4];
    if (v4 >= (unint64_t)v11)
    {
      if ((unint64_t)v11 < v4) {
        goto LABEL_77;
      }
      v3[3] = 0;
LABEL_9:
      BOOL result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_78;
      }
      unint64_t v10 = result;
      if (result < 8)
      {
LABEL_77:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_78:
        uint64_t v49 = v6;
        uint64_t v50 = v7;
        uint64_t v51 = (uint64_t)v8;
        uint64_t v52 = v9;
        return outlined consume of Path.Storage(v49, v50, v51, v52, v69);
      }
    }
    switch(v10 >> 3)
    {
      case 1uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v68 = v9;
        uint64_t v12 = v7;
        uint64_t v7 = (uint64_t)v8;
        double v8 = (char *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v14 = *((void *)v8 + 2);
        unint64_t v13 = *((void *)v8 + 3);
        unint64_t v10 = v14 + 1;
        if (v14 >= v13 >> 1) {
          double v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v10;
        *(void *)&v8[8 * v14 + 32] = v5;
        v3[5] = v8;
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_79;
        }
        if (v15 < 0)
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
        }
        else
        {
          double v8 = (char *)v7;
          unint64_t v16 = (unint64_t)v3[1] + v15;
          if (v5 < v16) {
            goto LABEL_80;
          }
          v3[2] = (id)v16;
          long long v71 = 0u;
          long long v72 = 0u;
          closure #1 in CGRect.init(from:)((unint64_t)&v71, v3, &v70);
          uint64_t v7 = v12;
          unint64_t v10 = (unint64_t)v3[5];
          if (*(void *)(v10 + 16))
          {
            uint64_t v17 = (uint64_t)v8;
            unint64_t v5 = *((void *)&v71 + 1);
            uint64_t v65 = v71;
            uint64_t v67 = *((void *)&v72 + 1);
            double v8 = (char *)v72;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v18 = *(void *)(v10 + 16);
              if (!v18) {
                goto LABEL_100;
              }
              goto LABEL_23;
            }
            unint64_t v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
            uint64_t v18 = *(void *)(v10 + 16);
            if (v18)
            {
LABEL_23:
              uint64_t v19 = v18 - 1;
              float64x2_t v20 = *(void **)(v10 + 8 * v19 + 32);
              *(void *)(v10 + 16) = v19;
              BOOL result = outlined consume of Path.Storage(v6, v12, v17, v68, v69);
              unsigned __int8 v69 = 0;
              v3[5] = (id)v10;
              v3[2] = v20;
              goto LABEL_3;
            }
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
            __break(1u);
            int v57 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
            uint64_t v58 = v57[2];
            if (v58) {
              goto LABEL_90;
            }
            __break(1u);
            int v57 = v3[5];
            unint64_t v5 = v68;
            if (v57[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v58 = v57[2];
                if (v58)
                {
LABEL_90:
                  uint64_t v59 = v58 - 1;
                  id v60 = (void *)v57[v59 + 4];
                  long long v57[2] = v59;
                  BOOL result = outlined consume of Path.Storage(v6, v7, (uint64_t)v8, v5, v69);
                  v3[5] = v57;
                  v3[2] = v60;
                  return result;
                }
LABEL_108:
                __break(1u);
                __break(1u);
                unsigned __int8 v63 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
                uint64_t v64 = v63[2];
                if (!v64) {
                  __break(1u);
                }
                uint64_t v61 = v64 - 1;
                long long v62 = (void *)v63[v61 + 4];
                v63[2] = v61;
                outlined consume of Path.Storage(v68, v6, v67, v7, v69);
                v3[5] = v63;
                v3[2] = v62;
                return swift_deallocUninitializedObject();
              }
            }
            else
            {
              __break(1u);
            }
            int v57 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
            uint64_t v58 = v57[2];
            if (v58) {
              goto LABEL_90;
            }
            goto LABEL_108;
          }
        }
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      case 2uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v68 = v9;
        uint64_t v12 = v7;
        uint64_t v7 = (uint64_t)v8;
        double v8 = (char *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v22 = *((void *)v8 + 2);
        unint64_t v21 = *((void *)v8 + 3);
        unint64_t v10 = v22 + 1;
        if (v22 >= v21 >> 1) {
          double v8 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v10;
        *(void *)&v8[8 * v22 + 32] = v5;
        v3[5] = v8;
        uint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
LABEL_79:
          uint64_t v49 = v6;
          uint64_t v50 = v12;
          uint64_t v51 = v7;
          goto LABEL_81;
        }
        if (v23 < 0) {
          goto LABEL_94;
        }
        double v8 = (char *)v7;
        unint64_t v24 = (unint64_t)v3[1] + v23;
        if (v5 < v24)
        {
LABEL_80:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          uint64_t v49 = v6;
          uint64_t v50 = v12;
          uint64_t v51 = (uint64_t)v8;
LABEL_81:
          uint64_t v52 = v68;
          return outlined consume of Path.Storage(v49, v50, v51, v52, v69);
        }
        v3[2] = (id)v24;
        long long v71 = 0u;
        long long v72 = 0u;
        closure #1 in CGRect.init(from:)((unint64_t)&v71, v3, &v70);
        uint64_t v7 = v12;
        unint64_t v10 = (unint64_t)v3[5];
        if (!*(void *)(v10 + 16)) {
          goto LABEL_98;
        }
        uint64_t v25 = (uint64_t)v8;
        unint64_t v5 = *((void *)&v71 + 1);
        uint64_t v65 = v71;
        uint64_t v67 = *((void *)&v72 + 1);
        double v8 = (char *)v72;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v26 = *(void *)(v10 + 16);
          if (!v26) {
            goto LABEL_101;
          }
        }
        else
        {
          unint64_t v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
          uint64_t v26 = *(void *)(v10 + 16);
          if (!v26) {
            goto LABEL_101;
          }
        }
        uint64_t v27 = v26 - 1;
        unint64_t v28 = *(void **)(v10 + 8 * v27 + 32);
        *(void *)(v10 + 16) = v27;
        BOOL result = outlined consume of Path.Storage(v6, v12, v25, v68, v69);
        v3[5] = (id)v10;
        v3[2] = v28;
        unsigned __int8 v69 = 1;
LABEL_3:
        uint64_t v6 = v65;
        uint64_t v7 = v5;
        uint64_t v9 = v67;
LABEL_4:
        unint64_t v4 = (unint64_t)v3[1];
        unint64_t v5 = (unint64_t)v3[2];
        if (v4 >= v5) {
          goto LABEL_76;
        }
        continue;
      case 3uLL:
        uint64_t v67 = (uint64_t)v8;
        double v8 = (char *)swift_allocObject();
        if ((v10 & 7) != 2)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          uint64_t v53 = v6;
          uint64_t v54 = v7;
          uint64_t v55 = v67;
          uint64_t v56 = v9;
          goto LABEL_86;
        }
        uint64_t v68 = v6;
        uint64_t v6 = v7;
        unint64_t v10 = (unint64_t)v3[5];
        uint64_t v7 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, (void *)v10);
        }
        unint64_t v30 = *(void *)(v10 + 16);
        unint64_t v29 = *(void *)(v10 + 24);
        if (v30 >= v29 >> 1) {
          unint64_t v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, (void *)v10);
        }
        *(void *)(v10 + 16) = v30 + 1;
        *(void *)(v10 + 8 * v30 + 32) = v5;
        v3[5] = (id)v10;
        uint64_t v31 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_85;
        }
        if (v31 < 0) {
          goto LABEL_95;
        }
        unint64_t v32 = (unint64_t)v3[1] + v31;
        if (v5 >= v32)
        {
          v3[2] = (id)v32;
          FixedRoundedRect.init(from:)((unint64_t)v3, (uint64_t)(v8 + 16));
          unint64_t v10 = (unint64_t)v3[5];
          if (!*(void *)(v10 + 16)) {
            goto LABEL_99;
          }
          BOOL result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v33 = *(void *)(v10 + 16);
            if (!v33) {
              goto LABEL_74;
            }
            goto LABEL_50;
          }
          BOOL result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v10);
          unint64_t v10 = result;
          uint64_t v33 = *(void *)(result + 16);
          if (v33)
          {
LABEL_50:
            uint64_t v34 = v33 - 1;
            unint64_t v35 = *(void **)(v10 + 8 * v34 + 32);
            *(void *)(v10 + 16) = v34;
            BOOL result = outlined consume of Path.Storage(v68, v6, v67, v7, v69);
            uint64_t v7 = 0;
            uint64_t v9 = 0;
            v3[5] = (id)v10;
            v3[2] = v35;
            unsigned __int8 v69 = 2;
            uint64_t v6 = (uint64_t)v8;
            double v8 = 0;
            goto LABEL_4;
          }
LABEL_74:
          __break(1u);
LABEL_75:
          uint64_t v6 = 0;
          uint64_t v7 = 0;
          double v8 = 0;
          uint64_t v9 = 0;
          unsigned __int8 v69 = 6;
LABEL_76:
          v3[3] = 0;
          *(void *)a2 = v6;
          *(void *)(a2 + 8) = v7;
          *(void *)(a2 + 16) = v8;
          *(void *)(a2 + 24) = v9;
          *(unsigned char *)(a2 + 32) = v69;
          return result;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_85:
        uint64_t v55 = v67;
        uint64_t v53 = v68;
        uint64_t v54 = v6;
        uint64_t v56 = v7;
LABEL_86:
        outlined consume of Path.Storage(v53, v54, v55, v56, v69);
        return swift_deallocUninitializedObject();
      case 4uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v36 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_78;
        }
        unint64_t v10 = v36;
        if (v36 < 0) {
          goto LABEL_96;
        }
        unint64_t v37 = v3[1];
        if (v5 < (unint64_t)&v37[v36]) {
          goto LABEL_77;
        }
        uint64_t v67 = (uint64_t)v8;
        uint64_t v68 = v9;
        v3[1] = &v37[v36];
        if (v36)
        {
          double v8 = (char *)(v37 - (unsigned char *)objc_msgSend(objc_retainAutorelease(*v3), sel_bytes));
          uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v40 = v39;
          if (__OFADD__(v8, v10)) {
            goto LABEL_102;
          }
          if ((uint64_t)&v8[v10] < (uint64_t)v8) {
            goto LABEL_103;
          }
          uint64_t v41 = v38;
          unint64_t v10 = Data._Representation.subscript.getter();
          unint64_t v43 = v42;
          outlined consume of Data._Representation(v41, v40);
        }
        else
        {
          unint64_t v43 = 0xC000000000000000;
        }
        isdouble a = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v45 = RBPathMakeWithData();
        uint64_t v47 = v46;
        outlined consume of Data._Representation(v10, v43);
        outlined consume of Path.Storage(v6, v7, v67, v68, v69);

        type metadata accessor for Path.PathBox();
        BOOL result = swift_allocObject();
        uint64_t v6 = result;
        uint64_t v7 = 0;
        double v8 = 0;
        *(_OWORD *)(result + 24) = 0u;
        *(_OWORD *)(result + 104) = 0u;
        *(_OWORD *)(result + 88) = 0u;
        *(_OWORD *)(result + 72) = 0u;
        *(_OWORD *)(result + 56) = 0u;
        *(_OWORD *)(result + 40) = 0u;
        *(unsigned char *)(result + 16) = 1;
        unsigned __int8 v69 = 5;
        *(void *)(result + 24) = v45;
        *(void *)(result + 32) = v47;
        uint64_t v9 = 0;
        goto LABEL_4;
      default:
        switch(v10 & 7)
        {
          case 0uLL:
            BOOL result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_78;
            }
            goto LABEL_4;
          case 1uLL:
            unint64_t v48 = (unint64_t)v3[1] + 8;
            if (v5 < v48) {
              goto LABEL_77;
            }
            goto LABEL_68;
          case 2uLL:
            BOOL result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_78;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_104;
            }
            unint64_t v48 = (unint64_t)v3[1] + result;
            if (v5 < v48) {
              goto LABEL_77;
            }
LABEL_68:
            v3[1] = (id)v48;
            break;
          case 5uLL:
            unint64_t v48 = (unint64_t)v3[1] + 4;
            if (v5 < v48) {
              goto LABEL_77;
            }
            goto LABEL_68;
          default:
            goto LABEL_77;
        }
        goto LABEL_4;
    }
  }
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v26 = a2[1];
  long long v27 = *a2;
  long long v25 = a2[2];
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 5)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(unsigned char *)(v14 + 16) = 2;
    RBPathStorageInit();
    int v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    uint64_t v29 = v4;
    uint64_t v30 = v6;
    uint64_t v31 = v12;
    uint64_t v32 = v13;
    char v33 = v7;
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)(v14 + 24);
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    uint64_t v8 = v14;
    uint64_t v2 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    BOOL result = (void *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    int v10 = *(unsigned __int8 *)(v4 + 16);
    *(unsigned char *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(void *)(v8 + 24) = RBPathRetain();
        *(void *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      unint64_t v16 = *(void **)(v4 + 24);
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *BOOL result = v16;
      id v17 = v16;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  unsigned __int8 v22 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v18, v19, v20, v21, v22);
  *(void *)a1 = v8;
  v5[1] = 0;
  _OWORD v5[2] = 0;
  *unint64_t v5 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v8 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  *(_OWORD *)&v28.double a = v27;
  *(_OWORD *)&v28.double c = v26;
  *(_OWORD *)&v28.tCGFloat x = v25;
  if (CGAffineTransformIsIdentity(&v28))
  {
    Path.append(to:)(v8 + 24);
  }
  else
  {
    long long v23 = v2[1];
    *(_OWORD *)&v28.double a = *v2;
    *(_OWORD *)&v28.double c = v23;
    *(_OWORD *)&v28.tCGFloat x = v2[2];
    MEMORY[0x24C526C30](v8 + 24, 17, 0, &v28);
    Path.append(to:)(v8 + 24);
    MEMORY[0x24C526C30](v8 + 24, 16, 0, 0);
  }
  return (void *)swift_release();
}

uint64_t specialized Path.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  int v7 = (void *)MEMORY[0x24C522820](a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v8 = (char *)objc_msgSend(v7, sel_UTF8String);
  id v9 = v7;
  if (v8 && (_CGPathParseString(Mutable, v8) & 1) != 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(unsigned char *)(result + 16) = 0;
    char v11 = 5;
    *(void *)(result + 24) = Mutable;
  }
  else
  {

    uint64_t result = 0;
    char v11 = -1;
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = v11;
  return result;
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Path?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Path?()
{
  if (!lazy cache variable for type metadata for Path?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Path?);
    }
  }
}

uint64_t sub_245E63CFC()
{
  return swift_deallocObject();
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = a2;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v29 = (void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(a1 + 32);
  if (v8 != 5)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(unsigned char *)(v15 + 16) = 2;
    RBPathStorageInit();
    int v16 = *(unsigned __int8 *)(v15 + 16);
    swift_retain();
    if (v16 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    uint64_t v32 = v6;
    uint64_t v33 = v7;
    uint64_t v34 = v14;
    uint64_t v35 = v13;
    char v36 = v8;
    outlined copy of Path.Storage(v6, v7, v14, v13, v8);
    Path.append(to:)(v15 + 24);
    outlined consume of Path.Storage(v6, v7, v14, v13, v8);
    uint64_t v9 = v15;
    uint64_t v4 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v9 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 24) = 0u;
    uint64_t result = (void *)(v9 + 24);
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    int v11 = *(unsigned __int8 *)(v6 + 16);
    *(unsigned char *)(v9 + 16) = v11;
    if (v11)
    {
      if (v11 == 1)
      {
        swift_retain();
        *(void *)(v9 + 24) = RBPathRetain();
        *(void *)(v9 + 32) = v12;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      id v17 = *(void **)(v6 + 24);
      if (!v17)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v17;
      id v18 = v17;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 24);
  unsigned __int8 v23 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v19, v20, v21, v22, v23);
  *(void *)a1 = v9;
  v29[1] = 0;
  v29[2] = 0;
  *uint64_t v29 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v9 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  uint64_t v24 = *(void *)(v4 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    long long v25 = (long long *)(v4 + 48);
    do
    {
      long long v26 = *v25;
      v31[0] = *(v25 - 1);
      v31[1] = v26;
      long long v27 = a3[1];
      v30[0] = *a3;
      v30[1] = v27;
      v30[2] = a3[2];
      MEMORY[0x24C526C30](v9 + 24, 5, v31, v30);
      v25 += 2;
      --v24;
    }
    while (v24);
    swift_release();
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    return (void *)swift_release();
  }
}

void *specialized Path.withMutableBuffer(do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 5)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 24);
    type metadata accessor for Path.PathBox();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(unsigned char *)(v14 + 16) = 2;
    RBPathStorageInit();
    int v15 = *(unsigned __int8 *)(v14 + 16);
    swift_retain();
    if (v15 != 2) {
      Path.PathBox.prepareBuffer()();
    }
    outlined copy of Path.Storage(v4, v6, v12, v13, v7);
    Path.append(to:)(v14 + 24);
    outlined consume of Path.Storage(v4, v6, v12, v13, v7);
    uint64_t v8 = v14;
    uint64_t v2 = a2;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 6;
  uint64_t v8 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Path.PathBox();
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 24) = 0u;
    uint64_t result = (void *)(v8 + 24);
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    int v10 = *(unsigned __int8 *)(v4 + 16);
    *(unsigned char *)(v8 + 16) = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        swift_retain();
        *(void *)(v8 + 24) = RBPathRetain();
        *(void *)(v8 + 32) = v11;
        swift_release();
      }
      else
      {
        RBPathStorageInit();
      }
    }
    else
    {
      int v16 = *(void **)(v4 + 24);
      if (!v16)
      {
        __break(1u);
        return result;
      }
      *uint64_t result = v16;
      id v17 = v16;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  unsigned __int8 v22 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined consume of Path.Storage(v18, v19, v20, v21, v22);
  *(void *)a1 = v8;
  v5[1] = 0;
  _OWORD v5[2] = 0;
  *unint64_t v5 = 0;
  *(unsigned char *)(a1 + 32) = 5;
  if (*(unsigned char *)(v8 + 16) != 2) {
    Path.PathBox.prepareBuffer()();
  }
  closure #1 in Path.addLines(_:)(v8 + 24, v2);

  return (void *)swift_release();
}

uint64_t method lookup function for Path.PathBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Path.PathBox);
}

uint64_t dispatch thunk of Path.PathBox.__allocating_init(takingPath:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t assignWithTake for Path(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of Path.Storage(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Path(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Path(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Path.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for Path.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Path.Storage()
{
  return &type metadata for Path.Storage;
}

uint64_t getEnumTagSinglePayload for Path.Element(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Path.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Path.Element(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for Path.Element(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Path.Element()
{
  return &type metadata for Path.Element;
}

ValueMetadata *type metadata accessor for StrokedPath()
{
  return &type metadata for StrokedPath;
}

ValueMetadata *type metadata accessor for TrimmedPath()
{
  return &type metadata for TrimmedPath;
}

unsigned char *storeEnumTagSinglePayload for Path.PathBox.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E6460CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Path.PathBox.Kind()
{
  return &unk_26FA76D58;
}

unint64_t lazy protocol witness table accessor for type Path.PathBox.Kind and conformance Path.PathBox.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind;
  if (!lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Path.PathBox.Kind and conformance Path.PathBox.Kind);
  }
  return result;
}

double partial apply for closure #1 in Path.mapPoints(_:)(long long *a1)
{
  *(void *)&double result = closure #1 in Path.mapPoints(_:)(a1, (void **)*(void *)(v1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_245E646A4()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in Path.mapPoints(_:)(long long *a1)
{
  closure #2 in Path.mapPoints(_:)(a1, *(CGPath **)(v1 + 16), *(void *)(v1 + 24), *(unint64_t **)(v1 + 32));
}

uint64_t sub_245E646C0()
{
  return swift_deallocObject();
}

void _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

SwiftUI::RoundedRectangle __swiftcall RoundedRectangle.init(cornerSize:style:)(CGSize cornerSize, SwiftUI::RoundedCornerStyle style)
{
  *(CGFloat *)uint64_t v2 = cornerSize.width;
  *(CGFloat *)(v2 + 8) = cornerSize.height;
  *(unsigned char *)(v2 + 16) = *(unsigned char *)style;
  result.cornerSize.CGFloat height = cornerSize.height;
  result.cornerSize.CGFloat width = cornerSize.width;
  result.style = style;
  return result;
}

unsigned char *RoundedRectangle.init(cornerRadius:style:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a3;
  *(unsigned char *)(a2 + 16) = *result;
  return result;
}

double RoundedRectangle.cornerSize.getter()
{
  return *(double *)v0;
}

void RoundedRectangle.cornerSize.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*RoundedRectangle.cornerSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void RoundedRectangle.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *RoundedRectangle.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*RoundedRectangle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t sub_245E647C0()
{
  return swift_deallocObject();
}

void RoundedRectangle.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void RoundedRectangle.animatableData.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

__n128 (*RoundedRectangle.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

unsigned char *UnevenRoundedRectangle.init(cornerRadii:style:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = *result;
  return result;
}

double UnevenRoundedRectangle.cornerRadii.getter()
{
  return *(double *)v0;
}

void UnevenRoundedRectangle.cornerRadii.setter(double a1, double a2, double a3, double a4)
{
  *unsigned int v4 = a1;
  v4[1] = a2;
  long long v4[2] = a3;
  long long v4[3] = a4;
}

uint64_t (*UnevenRoundedRectangle.cornerRadii.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void UnevenRoundedRectangle.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *UnevenRoundedRectangle.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*UnevenRoundedRectangle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *UnevenRoundedRectangle.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v11 = *(double *)v5;
  double v12 = *(double *)(v5 + 8);
  double v14 = *(double *)(v5 + 16);
  double v13 = *(double *)(v5 + 24);
  char v15 = *(unsigned char *)(v5 + 32);
  long long v20 = 0u;
  long long v21 = 0u;
  char v16 = 6;
  char v22 = 6;
  uint64_t v23 = 0x3FF0000000000000;
  long long v24 = 0u;
  uint64_t v25 = 0x3FF0000000000000;
  long long v26 = 0u;
  SwiftUI::RoundedRectangle result = (void *)CGRectIsNull(*(CGRect *)&a2);
  long long v18 = 0uLL;
  long long v19 = 0uLL;
  if ((result & 1) == 0)
  {
    SwiftUI::RoundedRectangle result = specialized Path.withMutableBuffer(do:)((uint64_t)&v20, &v23, v15, a2, a3, a4, a5, v11, v12, v14, v13);
    long long v18 = v20;
    long long v19 = v21;
    char v16 = v22;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

void UnevenRoundedRectangle.animatableData.setter(double a1, double a2, double a3, double a4)
{
  *unsigned int v4 = a1;
  v4[1] = a2;
  long long v4[2] = a3;
  long long v4[3] = a4;
}

uint64_t (*UnevenRoundedRectangle.animatableData.modify(void *a1))()
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)int v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnevenRoundedRectangle(void *a1))()
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)int v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

SwiftUI::Capsule __swiftcall Capsule.init(style:)(SwiftUI::Capsule style)
{
  *uint64_t v1 = *(unsigned char *)style.style;
  return style;
}

void Capsule.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Capsule.style.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Capsule.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Capsule.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL Ellipse.path(in:)@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8 = a2;
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    char v11 = 6;
    CGFloat v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.CGFloat x = v8;
    v12.origin.CGFloat y = a3;
    v12.size.CGFloat width = a4;
    v12.size.CGFloat height = a5;
    BOOL result = CGRectIsInfinite(v12);
    char v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Ellipse@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGFloat v8 = a2;
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  if (result)
  {
    char v11 = 6;
    CGFloat v8 = 0.0;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    v12.origin.CGFloat x = v8;
    v12.origin.CGFloat y = a3;
    v12.size.CGFloat width = a4;
    v12.size.CGFloat height = a5;
    BOOL result = CGRectIsInfinite(v12);
    char v11 = !result;
  }
  *(CGFloat *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

double Circle.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  specialized Circle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

void Circle.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double Circle.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result = *(double *)&a3;
  double v5 = 10.0;
  if ((a4 & 1) == 0) {
    double v5 = *(double *)&a3;
  }
  if (*(double *)&a3 >= *(double *)&a1) {
    double result = *(double *)&a1;
  }
  if (a4) {
    double result = *(double *)&a1;
  }
  if (a2) {
    return v5;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Ellipse(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  *(void *)(a1 + 8) = result;
  return result;
}

__n128 sub_245E64C90@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_245E64C9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_245E64CA8@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_245E64CB4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for Ellipse()
{
  return &type metadata for Ellipse;
}

uint64_t DisplayList.ViewRenderer.__allocating_init(platform:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *a1;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = 1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t DisplayList.ViewRenderer.viewCacheIsEmpty.getter()
{
  if (!*(void *)(v0 + 64)) {
    return 1;
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  char v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4 & 1;
}

void DisplayList.ViewRenderer.Environment.init(contentsScale:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double DisplayList.ViewRenderer.Environment.contentsScale.getter()
{
  return *(double *)v0;
}

void DisplayList.ViewRenderer.Environment.contentsScale.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*DisplayList.ViewRenderer.Environment.contentsScale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static DisplayList.ViewRenderer.Environment.invalid.getter@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for invalid != -1) {
    swift_once();
  }
  double result = *(double *)&static DisplayList.ViewRenderer.Environment.invalid;
  *a1 = static DisplayList.ViewRenderer.Environment.invalid;
  return result;
}

BOOL static DisplayList.ViewRenderer.Environment.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t DisplayList.ViewRenderer.configuration.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 32);
  *a1 = *(void *)(v1 + 24);
  a1[1] = v3;
  return swift_retain();
}

uint64_t key path setter for DisplayList.ViewRenderer.configuration : DisplayList.ViewRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v2;
  *(void *)(v4 + 32) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(unsigned char *)(v4 + 80) = 1;
  return result;
}

uint64_t DisplayList.ViewRenderer.configuration.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_beginAccess();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  uint64_t result = swift_release();
  *(unsigned char *)(v1 + 80) = 1;
  return result;
}

uint64_t (*DisplayList.ViewRenderer.configuration.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return DisplayList.ViewRenderer.configuration.modify;
}

uint64_t DisplayList.ViewRenderer.configuration.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    *(unsigned char *)(*(void *)(a1 + 24) + 80) = 1;
  }
  return result;
}

uint64_t DisplayList.ViewRenderer.host.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 40);
}

void (*DisplayList.ViewRenderer.host.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  v3[3] = v4;
  v3[4] = v5;
  return DisplayList.ViewRenderer.host.modify;
}

void DisplayList.ViewRenderer.host.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 48) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    uint64_t v4 = v3[5];
    swift_endAccess();
    swift_unknownObjectRelease();
    *(unsigned char *)(v4 + 80) = 1;
  }

  free(v3);
}

uint64_t DisplayList.ViewRenderer.exportedObject(rootView:)(uint64_t a1)
{
  specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(a1);
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_unknownObjectRetain();
  uint64_t v5 = v4(ObjectType, v2);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t DisplayList.ViewRenderer.deinit()
{
  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v0 + 40);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DisplayList.ViewRasterizer.init(platform:host:rootView:options:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  uint64_t v24 = *a1;
  char v8 = *(unsigned char *)a5;
  int v9 = *(_DWORD *)(a5 + 4);
  char v10 = *(unsigned char *)(a5 + 8);
  int v23 = *(unsigned __int8 *)(a5 + 9);
  int v11 = *(unsigned __int8 *)(a5 + 11);
  int v21 = *(unsigned __int8 *)(a5 + 10);
  int v22 = *(unsigned __int8 *)(a5 + 12);
  uint64_t v12 = *(void *)(a5 + 16);
  *(void *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 40) = 0;
  double v13 = (uint64_t *)(v5 + 40);
  *(_WORD *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 16) = v7;
  uint64_t v19 = v5;
  *(void *)(v5 + 32) = a3;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v5 + 48) = v8;
  *(_DWORD *)(v5 + 52) = v9;
  *(unsigned char *)(v5 + 56) = v10;
  *(unsigned char *)(v5 + 57) = v23;
  *(unsigned char *)(v5 + 58) = v21;
  *(unsigned char *)(v5 + 59) = v11;
  *(unsigned char *)(v5 + 60) = v22;
  *(void *)(v5 + 64) = v12;
  if (v11) {
    char v14 = 1;
  }
  else {
    char v14 = 3;
  }
  v25[0] = v14;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  *(void *)(v5 + 72) = DisplayList.GraphicsRenderer.init(platformViewMode:)(v25);
  if (v21) {
    int v15 = 163;
  }
  else {
    int v15 = 161;
  }
  if (v23) {
    v15 |= 4u;
  }
  if (v22) {
    v15 |= 8u;
  }
  v25[0] = v8;
  int v26 = v9;
  char v27 = v10;
  int v28 = v15;
  char v29 = v12;
  uint64_t v16 = (*(uint64_t (**)(char *))((v24 & 0xFFFFFFFFFFFFFFFCLL) + 112))(v25);
  swift_beginAccess();
  *double v13 = v16;
  uint64_t result = swift_unknownObjectRelease();
  long long v18 = (void *)*v13;
  if (*v13)
  {
    swift_unknownObjectRetain();
    CoreViewAddSubview(v24 & 3, a4, v18, 0);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.exportedObject.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 40))
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))((v1 & 0xFFFFFFFFFFFFFFFCLL) + 136);
    uint64_t v4 = swift_unknownObjectRetain();
    uint64_t v5 = v3(v4);
    swift_unknownObjectRelease();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.render(rootView:from:time:version:maxVersion:environment:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X5>, double *a6@<X8>)
{
  uint64_t v7 = v6;
  if (*(double *)a5 != *(double *)(v7 + 88))
  {
    *(void *)(v7 + 88) = *a5;
    *(_WORD *)(v7 + 80) = 0;
  }
  uint64_t v9 = *a4;
  uint64_t v10 = *a2;
  __int16 v11 = *((_WORD *)a2 + 4);
  char v48 = *((unsigned char *)a2 + 10);
  uint64_t v12 = (void **)(v7 + 40);
  double v13 = *a3;
  uint64_t result = swift_beginAccess();
  int v15 = *(void **)(v7 + 40);
  if (!v15)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (objc_msgSend(*(id *)(v7 + 40), sel_respondsToSelector_, sel_frame))
  {
    objc_msgSend(v15, sel_frame);
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    if (objc_msgSend(a1, sel_respondsToSelector_, sel_bounds))
    {
      objc_msgSend(a1, sel_bounds);
      v59.origin.CGFloat x = v24;
      v59.origin.CGFloat y = v25;
      v59.size.CGFloat width = v26;
      v59.size.CGFloat height = v27;
      v58.origin.CGFloat x = v17;
      v58.origin.CGFloat y = v19;
      v58.size.CGFloat width = v21;
      v58.size.CGFloat height = v23;
      uint64_t result = CGRectEqualToRect(v58, v59);
      if (result)
      {
LABEL_13:
        if (v9)
        {
          if (*(unsigned __int16 *)(v7 + 80) != ((unsigned __int16)(2 * ((33 * WORD1(v9)) ^ v9)) | 1)) {
            goto LABEL_18;
          }
        }
        else if (*(_WORD *)(v7 + 80))
        {
          goto LABEL_18;
        }
        double v29 = *(double *)(*(void *)(v7 + 72) + 80);
        if (v29 >= v13)
        {
LABEL_37:
          *a6 = v29;
          return result;
        }
LABEL_18:
        uint64_t v57 = *(void *)(v7 + 16);
        int v30 = *(_DWORD *)(v7 + 52);
        char v31 = *(unsigned char *)(v7 + 56);
        uint64_t v32 = *(void *)(v7 + 64);
        if (*(unsigned char *)(v7 + 58)) {
          int v33 = 163;
        }
        else {
          int v33 = 161;
        }
        if (*(unsigned char *)(v7 + 57)) {
          int v34 = v33 | 4;
        }
        else {
          int v34 = v33;
        }
        if (*(unsigned char *)(v7 + 60)) {
          v34 |= 8u;
        }
        LOBYTE(v50) = *(unsigned char *)(v7 + 48);
        DWORD1(v50) = v30;
        BYTE8(v50) = v31;
        HIDWORD(v50) = v34;
        LOBYTE(v51) = v32;
        double v35 = *(double *)(v7 + 88);
        uint64_t result = swift_beginAccess();
        if (*(void *)(v7 + 40))
        {
          specialized DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:)((uint64_t *)(v7 + 40), (char *)&v50, v35);
          uint64_t v37 = v36;
          swift_endAccess();
          uint64_t v38 = *(void *)(v7 + 72);
          uint64_t v39 = swift_allocObject();
          MEMORY[0x24C527E00](v7 + 24);
          *(void *)(v39 + 24) = *(void *)(v7 + 32);
          swift_unknownObjectWeakInit();
          swift_unknownObjectRetain();
          swift_retain();
          swift_unknownObjectRelease();
          uint64_t v40 = swift_allocObject();
          *(void *)(v40 + 16) = v7;
          *(double *)(v40 + 24) = v13;
          *(void *)(v40 + 32) = v10;
          *(_WORD *)(v40 + 40) = v11;
          *(unsigned char *)(v40 + 42) = v48;
          *(void *)(v40 + 48) = v38;
          *(void *)(v40 + 56) = v39;
          uint64_t ObjectType = swift_getObjectType();
          v53[0] = partial apply for closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:);
          v53[1] = v40;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          _OWORD v53[2] = 0;
          char v56 = 0;
          unint64_t v42 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(v37 + 40);
          swift_bridgeObjectRetain();
          if (v42(v53, 0, ObjectType, v37))
          {
            if (one-time initialization token for infinity != -1) {
              swift_once();
            }
            double v13 = *(double *)&static Time.infinity;
          }
          if (MEMORY[0x24C527E00](v7 + 24))
          {
            uint64_t v43 = *(void *)(v7 + 32);
            uint64_t v44 = swift_getObjectType();
            unint64_t v45 = type metadata accessor for ViewGraphRenderObserver();
            (*(void (**)(long long *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v43 + 8) + 16))(&v50, v45, v45, v44);
            swift_unknownObjectRelease();
            if (*((void *)&v51 + 1))
            {
              outlined init with take of ScrollStateRequest(&v50, (uint64_t)v53);
              uint64_t v46 = v54;
              uint64_t v47 = v55;
              __swift_project_boxed_opaque_existential_1(v53, v54);
              (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
              swift_unknownObjectRelease();
              swift_release();
              uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
LABEL_36:
              double v29 = v13;
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v52 = 0;
            long long v50 = 0u;
            long long v51 = 0u;
          }
          swift_release();
          swift_unknownObjectRelease();
          uint64_t result = outlined destroy of ViewGraphRenderObserver?((uint64_t)&v50);
          goto LABEL_36;
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_bounds);
    if ((result & 1) == 0) {
      goto LABEL_13;
    }
    objc_msgSend(a1, sel_bounds);
  }
  uint64_t v28 = *(void *)(v7 + 16);
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, sel_bounds);
  if ((result & 1) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_bounds);
  if (*v12)
  {
    uint64_t result = CoreViewSetFrame(v28 & 3, *v12);
    *(_WORD *)(v7 + 80) = 0;
    goto LABEL_13;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(unint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, __n128 *a5, uint64_t a6, double a7, double a8, double a9)
{
  uint64_t v44 = a1;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  CGFloat v17 = &v38[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v18 - 8);
  uint64_t v42 = v18;
  MEMORY[0x270FA5388](v18);
  double v20 = &v38[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  Swift::Bool value = printTree.value;
  if (printTree.value != 2)
  {
    swift_endAccess();
    if (!value) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  double v22 = getenv("SWIFTUI_PRINT_TREE");
  if (!v22)
  {
    printTree.Swift::Bool value = 0;
    swift_endAccess();
    goto LABEL_8;
  }
  int v23 = atoi(v22);
  printTree.Swift::Bool value = v23 != 0;
  swift_endAccess();
  if (v23)
  {
LABEL_6:
    unsigned int v39 = HIWORD(a4);
    type metadata accessor for _ContiguousArrayStorage<Any>();
    uint64_t v24 = swift_allocObject();
    uint64_t v40 = a6;
    CGFloat v25 = (void *)v24;
    *(_OWORD *)(v24 + 16) = xmmword_2461B9DC0;
    aBlocuint64_t k = 0.0;
    unint64_t v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v26._uint64_t countAndFlagsBits = 0x2077656956;
    v26._object = (void *)0xE500000000000000;
    String.append(_:)(v26);
    double v51 = *(double *)&a2;
    _print_unlocked<A, B>(_:_:)();
    v27._uint64_t countAndFlagsBits = 544497952;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    double v51 = a9;
    _print_unlocked<A, B>(_:_:)();
    v28._uint64_t countAndFlagsBits = 2618;
    v28._object = (void *)0xE200000000000000;
    String.append(_:)(v28);
    double v51 = *(double *)&a3;
    __int16 v52 = a4;
    char v53 = v39;
    v29._uint64_t countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    unint64_t v30 = *(void *)&aBlock;
    unint64_t v31 = v46;
    v25[7] = MEMORY[0x263F8D310];
    char v25[4] = v30;
    v25[5] = v31;
    print(_:separator:terminator:)();
    a6 = v40;
    swift_bridgeObjectRelease();
  }
LABEL_8:
  aBlocuint64_t k = a9;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)((unint64_t *)&aBlock, a5, (uint64_t)a5, a3, a4 & 0xFFFFFF, v44);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  double v33 = fmax(a5[5].n128_f64[0] - a9, 0.000001);
  if (v33 < INFINITY)
  {
    type metadata accessor for OS_dispatch_queue();
    int v34 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v35 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x24C527E00](a6 + 16);
    *(void *)(v35 + 24) = *(void *)(a6 + 24);
    swift_unknownObjectWeakInit();
    swift_unknownObjectRelease();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v35;
    *(double *)(v36 + 24) = v33;
    uint64_t v49 = partial apply for closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:);
    uint64_t v50 = v36;
    aBlocuint64_t k = MEMORY[0x263EF8330];
    unint64_t v46 = 1107296256;
    uint64_t v47 = thunk for @escaping @callee_guaranteed () -> ();
    char v48 = &block_descriptor_22;
    uint64_t v37 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlocuint64_t k = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    type metadata accessor for ViewGraphRenderObserver?(0, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C523600](0, v20, v17, v37);
    _Block_release(v37);

    (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v17, v15);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v41 + 8))(v20, v42);
  }
  return result;
}

uint64_t closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(uint64_t a1, double a2)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  if (result)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, double))(*(void *)(v6 + 8) + 32))(ObjectType, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t DisplayList.ViewRasterizer.__deallocating_deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewRendererBase.destroy(rootView:) in conformance DisplayList.ViewRasterizer()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 40);
  if (v3) {
    return CoreViewRemoveFromSuperview(v1 & 3, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_245E65FAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 32);
  *a2 = *(void *)(v3 + 24);
  a2[1] = v4;
  return swift_retain();
}

uint64_t sub_245E66004@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  uint64_t v6 = *(void *)(v3 + 48);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_245E66060(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  uint64_t result = swift_unknownObjectWeakAssign();
  *(unsigned char *)(v3 + 80) = 1;
  return result;
}

uint64_t method lookup function for DisplayList.ViewRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayList.ViewRenderer);
}

uint64_t dispatch thunk of DisplayList.ViewRenderer.__allocating_init(platform:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for DisplayList.ViewRenderer.Environment()
{
  return &type metadata for DisplayList.ViewRenderer.Environment;
}

uint64_t type metadata accessor for DisplayList.ViewRasterizer()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DisplayList.ViewRenderer.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E661F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DisplayList.ViewRenderer.State()
{
  return &unk_26FA42D48;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewRenderer.State and conformance DisplayList.ViewRenderer.State);
  }
  return result;
}

uint64_t sub_245E66288()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_245E662C0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(unint64_t *a1, double a2, double a3)
{
  return closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(a1, *(void *)(v3 + 16), *(void *)(v3 + 32), *(unsigned __int16 *)(v3 + 40) | (*(unsigned __int8 *)(v3 + 42) << 16), *(__n128 **)(v3 + 48), *(void *)(v3 + 56), a2, a3, *(double *)(v3 + 24));
}

uint64_t outlined destroy of ViewGraphRenderObserver?(uint64_t a1)
{
  type metadata accessor for ViewGraphRenderObserver?(0, &lazy cache variable for type metadata for ViewGraphRenderObserver?, (uint64_t (*)(uint64_t))type metadata accessor for ViewGraphRenderObserver, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_245E663B4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)()
{
  return closure #1 in closure #1 in DisplayList.ViewRasterizer.drawingContent(list:time:)(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

void type metadata accessor for ViewGraphRenderObserver?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  v9[0] = a8;
  v9[1] = 0.0;
  int8x16_t v9[2] = 10.0;
  *(void *)&v9[3] = MEMORY[0x263F8EE78];
  v9[4] = 0.0;
  return InsettableShape.strokeBorder<A>(_:style:antialiased:)(a1, v9, a2, a3, a4, a5, a6, a7);
}

uint64_t InsettableShape.strokeBorder<A>(_:style:antialiased:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a7;
  int v22 = a3;
  uint64_t v23 = a8;
  uint64_t v24 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v13 = (char *)&v20 - v12;
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for _StrokedShape();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  CGFloat v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 32))(v21, a6, *a2 * 0.5);
  Shape.stroke(style:)((uint64_t)a2, AssociatedTypeWitness, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  swift_getWitnessTable();
  if (v22) {
    __int16 v18 = 256;
  }
  else {
    __int16 v18 = 0;
  }
  Shape.fill<A>(_:style:)(v24, v18, v14, v25, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t InsettableShape.strokeBorder(style:antialiased:)@<X0>(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v17 = a3;
  int v18 = a2;
  uint64_t v19 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for _StrokedShape();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(v17, a4, *a1 * 0.5);
  Shape.stroke(style:)((uint64_t)a1, AssociatedTypeWitness, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  swift_getWitnessTable();
  if (v18) {
    uint64_t v15 = 256;
  }
  else {
    uint64_t v15 = 0;
  }
  Shape.fill(style:)(v15, v11, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t InsettableShape.strokeBorder(lineWidth:antialiased:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  v6[0] = a5;
  v6[1] = 0.0;
  unsigned char v6[2] = 10.0;
  *(void *)&v6[3] = MEMORY[0x263F8EE78];
  v6[4] = 0.0;
  return InsettableShape.strokeBorder(style:antialiased:)(v6, a1, a2, a3, a4);
}

void Rectangle._Inset.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Rectangle._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL Rectangle._Inset.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGRect v17 = CGRectInset(*(CGRect *)&a2, a3, a3);
  double x = v17.origin.x;
  double y = v17.origin.y;
  double width = v17.size.width;
  double height = v17.size.height;
  BOOL result = CGRectIsNull(v17);
  double v12 = 0.0;
  if (result) {
    double v13 = 0.0;
  }
  else {
    double v13 = x;
  }
  if (result) {
    double v14 = 0.0;
  }
  else {
    double v14 = y;
  }
  if (result) {
    double v15 = 0.0;
  }
  else {
    double v15 = width;
  }
  if (!result) {
    double v12 = height;
  }
  *(double *)a1 = v13;
  *(double *)(a1 + 8) = v14;
  if (result) {
    char v16 = 6;
  }
  else {
    char v16 = 0;
  }
  *(double *)(a1 + 16) = v15;
  *(double *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

uint64_t (*Rectangle._Inset.animatableData.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

void RoundedRectangle.inset(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a2;
}

uint64_t RoundedRectangle._Inset.init(base:amount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3 = *(unsigned char *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(unsigned char *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = a3;
  return result;
}

__n128 RoundedRectangle._Inset.base.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 RoundedRectangle._Inset.base.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*RoundedRectangle._Inset.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RoundedRectangle._Inset.amount.getter()
{
  return *(double *)(v0 + 24);
}

void RoundedRectangle._Inset.amount.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*RoundedRectangle._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t sub_245E66AE4()
{
  return swift_deallocObject();
}

void RoundedRectangle._Inset.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double RoundedRectangle._Inset.animatableData.getter()
{
  return *(double *)v0;
}

void RoundedRectangle._Inset.animatableData.setter(double a1, double a2, double a3)
{
  *char v3 = a1;
  v3[1] = a2;
  v3[3] = a3;
}

uint64_t (*RoundedRectangle._Inset.animatableData.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  return RoundedRectangle._Inset.animatableData.modify;
}

double RoundedRectangle._Inset.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  double v4 = *(double *)(v2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(unsigned char *)(a1 + 16) = v3;
  double result = v4 + a2;
  *(double *)(a1 + 24) = result;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  double v4 = *(double *)(v2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(unsigned char *)(a1 + 16) = v3;
  double result = v4 + a2;
  *(double *)(a1 + 24) = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance RoundedRectangle._Inset(uint64_t a1)
{
  double result = *(double *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(double *)(v1 + 24) = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance RoundedRectangle._Inset(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  return RoundedRectangle._Inset.animatableData.modify;
}

double RoundedRectangle._Inset.animatableData.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  double result = *(double *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(double *)(v1 + 24) = result;
  return result;
}

void UnevenRoundedRectangle.inset(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 32);
  long long v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = a2;
}

uint64_t UnevenRoundedRectangle._Inset.init(base:amount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3 = *(unsigned char *)(result + 32);
  long long v4 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v3;
  *(double *)(a2 + 40) = a3;
  return result;
}

__n128 UnevenRoundedRectangle._Inset.base.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 UnevenRoundedRectangle._Inset.base.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*UnevenRoundedRectangle._Inset.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UnevenRoundedRectangle._Inset.amount.getter()
{
  return *(double *)(v0 + 40);
}

void UnevenRoundedRectangle._Inset.amount.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*UnevenRoundedRectangle._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *UnevenRoundedRectangle._Inset.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v7 = *(double *)(v5 + 8);
  double v24 = *(double *)v5;
  double v9 = *(double *)(v5 + 16);
  double v8 = *(double *)(v5 + 24);
  char v10 = *(unsigned char *)(v5 + 32);
  double v11 = *(double *)(v5 + 40);
  CGRect v32 = CGRectInset(*(CGRect *)&a2, v11, v11);
  double x = v32.origin.x;
  double y = v32.origin.y;
  double width = v32.size.width;
  double height = v32.size.height;
  long long v25 = 0u;
  long long v26 = 0u;
  char v16 = 6;
  char v27 = 6;
  uint64_t v28 = 0x3FF0000000000000;
  long long v29 = 0u;
  uint64_t v30 = 0x3FF0000000000000;
  long long v31 = 0u;
  __n128 result = (void *)CGRectIsNull(v32);
  long long v18 = 0uLL;
  long long v19 = 0uLL;
  if ((result & 1) == 0)
  {
    if (v8 - v11 > 0.0) {
      double v20 = v8 - v11;
    }
    else {
      double v20 = 0.0;
    }
    if (v9 - v11 > 0.0) {
      double v21 = v9 - v11;
    }
    else {
      double v21 = 0.0;
    }
    if (v7 - v11 > 0.0) {
      double v22 = v7 - v11;
    }
    else {
      double v22 = 0.0;
    }
    if (v24 - v11 > 0.0) {
      double v23 = v24 - v11;
    }
    else {
      double v23 = 0.0;
    }
    __n128 result = specialized Path.withMutableBuffer(do:)((uint64_t)&v25, &v28, v10, x, y, width, height, v23, v22, v21, v20);
    long long v18 = v25;
    long long v19 = v26;
    char v16 = v27;
  }
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

double UnevenRoundedRectangle._Inset.animatableData.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double UnevenRoundedRectangle._Inset.animatableData.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*UnevenRoundedRectangle._Inset.animatableData.modify(void *a1))()
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *(void *)(v1 + 40);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  v3[4] = v4;
  return UnevenRoundedRectangle._Inset.animatableData.modify;
}

double UnevenRoundedRectangle._Inset.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 32);
  double v4 = *(double *)(v2 + 40);
  long long v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v3;
  double result = v4 + a2;
  *(double *)(a1 + 40) = result;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 32);
  double v4 = *(double *)(v2 + 40);
  long long v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v3;
  double result = v4 + a2;
  *(double *)(a1 + 40) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  UnevenRoundedRectangle._Inset.path(in:)((uint64_t)v5, a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(double *)(a1 + 32) = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance UnevenRoundedRectangle._Inset(uint64_t a1)
{
  double result = *(double *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  *(double *)(v1 + 40) = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance UnevenRoundedRectangle._Inset(void *a1))()
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *(void *)(v1 + 40);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  v3[4] = v4;
  return UnevenRoundedRectangle._Inset.animatableData.modify;
}

double UnevenRoundedRectangle._Inset.animatableData.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[4];
  long long v4 = *((_OWORD *)v1 + 1);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 16) = v4;
  *(void *)(v2 + 40) = v3;
  free(v1);
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance UnevenRoundedRectangle(uint64_t a1@<X8>, double a2@<D0>)
{
  char v3 = *(unsigned char *)(v2 + 32);
  long long v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = a2;
}

void Capsule.inset(by:)(unint64_t *a1@<X8>, double a2@<D0>)
{
  *a1 = *(void *)&a2 & 0xFFFFFFFFFFFFFFFELL | *v2;
}

void Capsule._Inset.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Capsule._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Capsule._Inset.animatableData.getter(double a1)
{
  *(void *)&double result = *(void *)&a1 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void Capsule._Inset.animatableData.setter(double a1)
{
  *uint64_t v1 = *(void *)&a1 & 0xFFFFFFFFFFFFFFFELL | *v1 & 1;
}

uint64_t (*Capsule._Inset.animatableData.modify(unint64_t *a1))()
{
  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
  a1[1] = (unint64_t)v1;
  return Capsule._Inset.animatableData.modify;
}

double Capsule._Inset.inset(by:)(double a1, double a2)
{
  *(void *)&double result = COERCE_UNSIGNED_INT64(COERCE_DOUBLE(*(void *)&a2 & 0xFFFFFFFFFFFFFFFELL) + a1) & 0xFFFFFFFFFFFFFFFELL | LOBYTE(a2) & 1;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance Capsule._Inset@<D0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  double result = COERCE_DOUBLE(*v2 & 0xFFFFFFFFFFFFFFFELL) + a2;
  *a1 = *(void *)&result & 0xFFFFFFFFFFFFFFFELL | *v2 & 1;
  return result;
}

void *protocol witness for Animatable.animatableData.setter in conformance Capsule._Inset(void *result)
{
  *uint64_t v1 = *result & 0xFFFFFFFFFFFFFFFELL | *v1 & 1;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance Capsule._Inset(unint64_t *a1))()
{
  *a1 = *v1 & 0xFFFFFFFFFFFFFFFELL;
  a1[1] = (unint64_t)v1;
  return Capsule._Inset.animatableData.modify;
}

uint64_t Capsule._Inset.animatableData.modify(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result & 0xFFFFFFFFFFFFFFFELL | **(void **)(result + 8) & 1;
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance Capsule(unint64_t *a1@<X8>, double a2@<D0>)
{
  *a1 = *(void *)&a2 & 0xFFFFFFFFFFFFFFFELL | *v2;
}

void Ellipse._Inset.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Ellipse._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL Ellipse._Inset.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGRect v13 = CGRectInset(*(CGRect *)&a2, a3, a3);
  CGFloat x = v13.origin.x;
  CGFloat y = v13.origin.y;
  CGFloat width = v13.size.width;
  CGFloat height = v13.size.height;
  BOOL result = CGRectIsNull(v13);
  if (result)
  {
    char v12 = 6;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    v14.origin.CGFloat x = x;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    BOOL result = CGRectIsInfinite(v14);
    char v12 = !result;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

uint64_t (*Ellipse._Inset.animatableData.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewSize.width.modify;
}

BOOL protocol witness for Shape.path(in:) in conformance Ellipse._Inset@<W0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRect v13 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  CGFloat x = v13.origin.x;
  CGFloat y = v13.origin.y;
  CGFloat width = v13.size.width;
  CGFloat height = v13.size.height;
  BOOL result = CGRectIsNull(v13);
  if (result)
  {
    char v12 = 6;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    v14.origin.CGFloat x = x;
    v14.origin.CGFloat y = y;
    v14.size.CGFloat width = width;
    v14.size.CGFloat height = height;
    BOOL result = CGRectIsInfinite(v14);
    char v12 = !result;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

void Circle.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void Circle._Inset.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Circle._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Circle._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGRect v11 = CGRectInset(*(CGRect *)&a2, a3, a3);
  specialized Circle.path(in:)((uint64_t)v9, v11.origin.x, v11.origin.y, v11.size.width, v11.size.height);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

void Circle._Inset.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void Circle._Inset.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*Circle._Inset.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double Circle._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

double protocol witness for InsettableShape.inset(by:) in conformance Circle._Inset@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double result = *v2 + a2;
  *a1 = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance Circle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRect v11 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  specialized Circle.path(in:)((uint64_t)v9, v11.origin.x, v11.origin.y, v11.size.width, v11.size.height);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

void protocol witness for InsettableShape.inset(by:) in conformance Circle(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double Rectangle.outset(by:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = -a2;
  a1[1] = -a3;
  double result = -a5;
  a1[2] = -a4;
  a1[3] = -a5;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle.AsymmetricalInset@<W0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  v13.origin.CGFloat x = specialized CGRect.inset(by:layoutDirection:)(*v5, v5[1], v5[2], v5[3], a2, a3, a4, a5);
  CGFloat x = v13.origin.x;
  CGFloat y = v13.origin.y;
  CGFloat width = v13.size.width;
  CGFloat height = v13.size.height;
  BOOL result = CGRectIsNull(v13);
  if (result)
  {
    char v12 = 6;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    char v12 = 0;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Rectangle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for UnevenRoundedRectangle._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in UnevenRoundedRectangle._Inset()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in UnevenRoundedRectangle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for Ellipse._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Ellipse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in Circle()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_245E677D0@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245E677DC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245E677E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(double *)(a2 + 16) = result;
  return result;
}

double sub_245E677FC(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(double *)(a2 + 24) = result;
  return result;
}

double sub_245E67810@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(double *)(a2 + 32) = result;
  return result;
}

double sub_245E67824(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(double *)(a2 + 40) = result;
  return result;
}

void *sub_245E67838@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = *result & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void *sub_245E67848(void *result, unint64_t *a2)
{
  *a2 = *result & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for RoundedRectangle._Inset(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for UnevenRoundedRectangle._Inset(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnevenRoundedRectangle._Inset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnevenRoundedRectangle._Inset()
{
  return &type metadata for UnevenRoundedRectangle._Inset;
}

ValueMetadata *type metadata accessor for Ellipse._Inset()
{
  return &type metadata for Ellipse._Inset;
}

_UNKNOWN **sub_245E67954()
{
  return &protocol witness table for _ShapeView<A, B>;
}

_UNKNOWN **sub_245E67960()
{
  return &protocol witness table for _ShapeView<A, B>;
}

ValueMetadata *type metadata accessor for Rectangle.AsymmetricalInset()
{
  return &type metadata for Rectangle.AsymmetricalInset;
}

unint64_t instantiation function for generic protocol witness table for Rectangle.AsymmetricalInset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL static _VAlignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double _VAlignment.value.getter(char a1)
{
  return dbl_2461EBFD8[a1];
}

void _VAlignment.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int _VAlignment.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t _AlignmentLayout.horizontal.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_AlignmentLayout.horizontal.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AlignmentLayout.vertical.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t _AlignmentLayout.vertical.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*_AlignmentLayout.vertical.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_AlignmentLayout __swiftcall _AlignmentLayout.init(horizontal:vertical:)(SwiftUI::TextAlignment_optional horizontal, SwiftUI::_VAlignment_optional vertical)
{
  return (SwiftUI::_AlignmentLayout)(horizontal.value | (*(_WORD *)&vertical << 8));
}

double _AlignmentLayout.placement(of:in:)@<D0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  char v3 = a2;
  double v5 = *(double *)(a1 + 16);
  unsigned int v6 = a2 >> 8;
  char v7 = *(unsigned char *)(a1 + 48);
  long long v18 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v19);
  uint64_t v8 = v19;
  char v9 = v20;
  uint64_t v10 = v21;
  char v11 = v22;
  double v12 = dbl_2461EBFF0[v3];
  double v13 = dbl_2461EBFF0[(char)v6];
  if (v7)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v15 = *InputValue;
    double v16 = InputValue[1];
  }
  else
  {
    double v15 = v5;
    double v16 = *(double *)&v18;
  }
  double result = v12 * v15;
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 24) = v11;
  *(double *)(a3 + 32) = v12;
  *(double *)(a3 + 40) = v13;
  *(double *)(a3 + 48) = result;
  *(double *)(a3 + 56) = v13 * v16;
  return result;
}

double _AlignmentLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 a4)
{
  int v4 = a4;
  double v5 = *(double *)a1;
  int v6 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  if (a4 != 3 && (a4 & 0xFF00) != 0x300 && (v6 & 1) == 0 && (*(unsigned char *)(a1 + 24) & 1) == 0) {
    return *(double *)a1;
  }
  int v10 = *((_DWORD *)a3 + 2);
  uint64_t v16 = *a3;
  int v17 = v10;
  double v12 = v5;
  char v13 = v6;
  uint64_t v14 = v7;
  char v15 = v8;
  LayoutProxy.size(in:)((uint64_t *)&v12);
  if (v4 == 3) {
    int v11 = 1;
  }
  else {
    int v11 = v6;
  }
  if (!v11) {
    return v5;
  }
  return result;
}

uint64_t _AlignmentLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  Swift::UInt32 v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 4);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v6)
  {
LABEL_7:
    if (v5 == *MEMORY[0x263F288F8])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      Inputuint64_t Value = &static LayoutComputer.defaultValue;
    }
    else
    {
      Inputuint64_t Value = (long long *)AGGraphGetInputValue();
    }
    uint64_t v9 = *(void *)InputValue;
    uint64_t v10 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    if (!lockAssertionsAreEnabled) {
      goto LABEL_23;
    }
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (_MovableLockIsOwner(static Update._lock))
    {
LABEL_23:
      (*(void (**)(void))(*(void *)v9 + 112))();
      return swift_release();
    }
    goto LABEL_32;
  }
  if (v5 == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    char v8 = &static LayoutComputer.defaultValue;
  }
  else
  {
    char v8 = (long long *)AGGraphGetInputValue();
  }
  uint64_t v12 = *(void *)v8;
  uint64_t v13 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_31;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_31:
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 112))(&v17);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    Swift::UInt32 v18 = v4;
    uint64_t v19 = KeyPath;
    type metadata accessor for EnvironmentFetch<LayoutDirection>();
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v4);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
    v16[0] = 0;
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
    unsigned __int8 v15 = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    v16[0] = v15;
    AbsoluteEdge.Set.init(_:layoutDirection:)(v16, &v18);
    uint64_t result = (uint64_t)Spacing.reset(_:)(&v18);
    *a3 = v17;
    return result;
  }
LABEL_32:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _AlignmentLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return _AlignmentLayout.spacing(in:child:)(a1, a2, a3);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _AlignmentLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return _AlignmentLayout.placement(of:in:)(a1, *v2, a2);
}

double protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance _AlignmentLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _AlignmentLayout.sizeThatFits(in:context:child:)(a1, a2, a3, *v3);
}

void type metadata accessor for EnvironmentFetch<LayoutDirection>()
{
  if (!lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentFetch();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _VAlignment and conformance _VAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment;
  if (!lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VAlignment and conformance _VAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _AlignmentLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for _VAlignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E68470);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _VAlignment()
{
  return &type metadata for _VAlignment;
}

uint64_t getEnumTagSinglePayload for _AlignmentLayout(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 65283 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65283 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65283;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *(unsigned __int8 *)a1;
  }
  int v7 = v6 - 4;
  if (*(unsigned __int8 *)a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for _AlignmentLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65283 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65283 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 253;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E68618);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _AlignmentLayout()
{
  return &type metadata for _AlignmentLayout;
}

uint64_t StateOrBinding.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  State.init(wrappedValue:)(a1, a2, a3);
  type metadata accessor for StateOrBinding();

  return swift_storeEnumTagMultiPayload();
}

uint64_t StateOrBinding.wrappedValue.getter(uint64_t a1)
{
  return StateOrBinding.wrappedValue.getter(a1, (void (*)(uint64_t))State.wrappedValue.getter, (void (*)(uint64_t))Binding.wrappedValue.getter);
}

uint64_t key path setter for StateOrBinding.wrappedValue : <A>StateOrBinding<A>(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  int v3 = (char *)&v7 - v2;
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - v2, v1);
  uint64_t v5 = type metadata accessor for StateOrBinding();
  return StateOrBinding.wrappedValue.setter((uint64_t)v3, v5);
}

uint64_t StateOrBinding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = type metadata accessor for State();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - v12;
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v3, a2, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v17, v6);
    uint64_t v19 = v23;
    specialized Binding.wrappedValue.setter(v23);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v19, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    uint64_t v21 = v23;
    specialized State.wrappedValue.setter(v23, v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v21, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

void (*StateOrBinding.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  long long v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  StateOrBinding.wrappedValue.getter(a2);
  return StateOrBinding.wrappedValue.modify;
}

void StateOrBinding.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    StateOrBinding.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    StateOrBinding.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t StateOrBinding.projectedValue.getter(uint64_t a1)
{
  return StateOrBinding.wrappedValue.getter(a1, (void (*)(uint64_t))State.projectedValue.getter, (void (*)(uint64_t))Binding.projectedValue.getter);
}

uint64_t StateOrBinding.wrappedValue.getter(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t))
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for State();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - v12;
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v4, a1, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v17, v6);
    v21(v6);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    v20(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_245E68EB4()
{
  uint64_t v0 = type metadata accessor for StateOrBinding();
  return StateOrBinding.wrappedValue.getter(v0);
}

uint64_t sub_245E68EF4()
{
  return 8;
}

void *sub_245E68F00(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for StateOrBinding(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  int v10 = v8 + 16;
  if (((v9 + 16) & (unint64_t)~v9) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v11 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v11 = ((v8 + 16) & ~(unint64_t)v8) + v7;
  }
  int v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || v11 + 1 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v15 + ((v9 & 0xF8 ^ 0x1F8) & v10));
LABEL_27:
    swift_retain();
    return v4;
  }
  unsigned int v16 = a2[v11];
  unsigned int v17 = v16 - 2;
  if (v16 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v18 = v11;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_22;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_22:
        int v20 = (v19 | (v17 << (8 * v11))) + 2;
        unsigned int v16 = v19 + 2;
        if (v11 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 != 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    *(void *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    *((unsigned char *)v4 + v11) = 0;
    goto LABEL_27;
  }
  *a1 = *(void *)a2;
  uint64_t v21 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v21 = *v22;
  uint64_t v23 = ((unint64_t)v21 + v9 + 8) & ~v9;
  uint64_t v24 = ((unint64_t)v22 + v9 + 8) & ~v9;
  long long v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v25(v23, v24, v5);
  *((unsigned char *)v4 + v11) = 1;
  return v4;
}

unsigned __int8 *assignWithCopy for StateOrBinding(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
      unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else {
      unint64_t v9 = ((v8 + 16) & ~v8) + v7;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4) {
LABEL_15:
          }
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          else {
LABEL_17:
          }
            unsigned int v10 = v13 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v8;
    if (v10 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v14, v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      swift_release();
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          if (v9 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v18 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_31:
            unsigned int v15 = (v18 | (v16 << (8 * v9))) + 2;
            break;
          }
LABEL_35:
          if (v18 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
LABEL_33:
      *(void *)a1 = *(void *)a2;
      int v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v20 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *int v19 = *v20;
      uint64_t v21 = ((unint64_t)v19 + v8 + 8) & v14;
      uint64_t v22 = ((unint64_t)v20 + v8 + 8) & v14;
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v23(v21, v22, v5);
      a1[v9] = 1;
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      a1[v9] = 0;
      swift_retain();
    }
  }
  return a1;
}

void *initializeWithTake for StateOrBinding(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v7 + 16) & (unint64_t)~v7) + v6 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v8 = ((v7 + 16) & ~v7) + v6;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    *a1 = *(void *)a2;
    uint64_t v14 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v15 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v14 = *v15;
    (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)v14 + v7 + 8) & ~v7, ((unint64_t)v15 + v7 + 8) & ~v7);
    char v16 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *))(v5 + 32))(a1, a2);
    char v16 = 0;
    *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  *((unsigned char *)a1 + v8) = v16;
  return a1;
}

unsigned __int8 *assignWithTake for StateOrBinding(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    if (((v8 + 16) & (unint64_t)~v8) + v7 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
      unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else {
      unint64_t v9 = ((v8 + 16) & ~v8) + v7;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4) {
LABEL_15:
          }
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          else {
LABEL_17:
          }
            unsigned int v10 = v13 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v8;
    if (v10 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v14, v5);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      swift_release();
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          if (v9 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v18 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_31:
            unsigned int v15 = (v18 | (v16 << (8 * v9))) + 2;
            break;
          }
LABEL_35:
          if (v18 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
LABEL_33:
      uint64_t v20 = *(void *)a2;
      unint64_t v19 = (unint64_t)(a2 + 15);
      *(void *)a1 = v20;
      uint64_t v21 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v21 = *(void *)(v19 & 0xFFFFFFFFFFFFFFF8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v21 + v8 + 8) & v14, ((v19 & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v14, v5);
      char v22 = 1;
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v22 = 0;
      *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    }
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for StateOrBinding(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v6 = ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v6 <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = v6;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_23:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 2) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_23;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 255;
}

void storeEnumTagSinglePayload for StateOrBinding(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v8 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v8 <= v7) {
    unint64_t v8 = v7;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v11 = a2 - 255;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245E69CF8);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t specialized Collection.isEmpty.getter()
{
  uint64_t v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *v0 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v3), (v5 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    uint64_t v6 = *(void *)v4;
    if (*(void *)(*(void *)v4 + 16))
    {
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 16 * v7);
        swift_endAccess();
        return *(void *)(v9 + 16) == 0;
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  Swift::UInt64 v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = *v1 + 48;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v4 + 48) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(v3, v5), (v7 & 1) == 0))
  {
    swift_endAccess();
    __break(1u);
LABEL_10:
    uint64_t result = swift_endAccess();
    __break(1u);
    return result;
  }
  swift_endAccess();
  swift_beginAccess();
  uint64_t v8 = *(void *)v6;
  if (!*(void *)(*(void *)v6 + 16)) {
    goto LABEL_10;
  }
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
  if ((v10 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v9);
  uint64_t result = swift_endAccess();
  if (*(void *)(v11 + 16))
  {
    swift_retain();
    swift_retain();
    uint64_t result = specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v4, v3, v5, 0, v14);
    long long v13 = v14[1];
    *(_OWORD *)a1 = v14[0];
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v14[2];
    *(void *)(a1 + 48) = v15;
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized Collection.isEmpty.getter();
  if (result)
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    uint64_t v4 = *v1;
    Swift::UInt64 v5 = v1[1];
    uint64_t v6 = v1[2];
    swift_beginAccess();
    uint64_t v7 = *(void *)(v4 + 48);
    if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6), (v9 & 1) != 0))
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v8);
      swift_endAccess();
      unint64_t v11 = specialized RandomAccessCollection<>.index(before:)(*(void *)(v10 + 16));
      swift_retain();
      swift_retain();
      uint64_t result = specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v4, v5, v6, v11, v13);
      long long v12 = v13[1];
      *(_OWORD *)a1 = v13[0];
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v13[2];
      *(void *)(a1 + 48) = v14;
    }
    else
    {
      uint64_t result = swift_endAccess();
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    uint64_t v6 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
    uint64_t v13 = *(void *)(v6 - 8);
    outlined init with copy of AlignedTimelineSchedule.Entries(a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v5, a2, (uint64_t (*)(void))type metadata accessor for Text.Effect.SegmentInteraction.Element);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    uint64_t v10 = v6;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Text.Effect.SegmentInteraction.Element();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v10 = v11;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v7(v8, v9, 1, v10);
}

void specialized BidirectionalCollection.last.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(const __CTLine **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  if (v5)
  {
    uint64_t v6 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(*(void **)v1);
    if (!v6) {
      goto LABEL_9;
    }
  }
  else
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    uint64_t v6 = v3;
  }
  CFArrayRef RunCount = _CTLineGetRunCount(v6);

  if (!RunCount)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (v5)
  {
    uint64_t v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
    if (!v8)
    {
      uint64_t v9 = -1;
      goto LABEL_13;
    }
  }
  else
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    uint64_t v8 = v3;
  }
  CFArrayRef v10 = _CTLineGetRunCount(v8);

  uint64_t v9 = (uint64_t)v10 - 1;
  if (__OFSUB__(v10, 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v5 & 1) == 0)
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    uint64_t v11 = v3;
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
  if (!v11)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_16:
  CFArrayRef v12 = _CTLineGetRunCount(v11);

  if (v9 < 0 || v9 >= (uint64_t)v12) {
    goto LABEL_23;
  }
  if ((v5 & 1) == 0)
  {
    outlined retain of Text.Layout.Line(v1);
    swift_release();
    outlined retain of Text.Layout.Line(v1);

    goto LABEL_22;
  }
  uint64_t v13 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v3);
  if (v13)
  {
    uint64_t v3 = v13;
    uint64_t v4 = 0;
LABEL_22:
    int v14 = *(_DWORD *)(v1 + 40);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v9;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 24);
    *(_DWORD *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v4;
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D132OIegnrzr_TR073_sSS7SwiftUIE14tupleOfDoublesSaySS5label_Sd5valuetGSgyF14decomposeTupleL_H32SSG6labels_AH6valuestyFSSSshcfu_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x24C522930](v5, v6, v7, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      unint64_t v13 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SdtG_SS5label_Sd5valuets5NeverOTg506_sSSSdh33Iggyod_SS_SdtSS5label_Sd5valuets5f45OIegnrzr_TR76_sSS7SwiftUIE14tupleOfDoublesSayl25_Sd5valuetGSgyFSSAC_SdADtj1_K15XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v4 - 2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v7 = *v4;
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = (void *)(v12 + 24 * v9);
      void v10[4] = v6;
      v10[5] = v5;
      void v10[6] = v7;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      unint64_t v9 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v9 + 1, 1);
      }
      v4 += 4;
      *(void *)(v13 + 16) = v9 + 1;
      uint64_t v11 = (void *)(v13 + 32 * v9);
      v11[4] = v5;
      v11[5] = v6;
      v11[6] = v8;
      v11[7] = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_SS5valuetG_SSs5NeverOTg5032_sS3SIgggo_SS4name_SS5valuetSSs5F131OIegnrzr_TR107_s7SwiftUI32CustomRecursiveStringConvertiblePAAE21_recursiveDescription6indent7roundedSSSi_SbtFS2S_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v28 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  char v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v25 = v1;
    uint64_t v35 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t result = v35;
    long long v26 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v7 = a1 + 56;
    do
    {
      uint64_t v8 = *(void *)(v7 - 24);
      uint64_t v9 = *(void *)(v7 - 16);
      uint64_t v29 = *(void *)(v7 - 8);
      uint64_t v30 = result;
      uint64_t v33 = 0;
      unint64_t v34 = 0xE000000000000000;
      uint64_t v31 = v8;
      uint64_t v32 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v10 = v27;
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v11 = MEMORY[0x263F8D310];
      uint64_t v12 = StringProtocol.components(separatedBy:)();
      (*v26)(v10, v28);
      uint64_t v31 = v12;
      uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
      type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for [String], v11, MEMORY[0x263F8D488]);
      lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], v13);
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      uint64_t v14 = String.escapeXML()();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = v14;
      unint64_t v34 = v16;
      v17._uint64_t countAndFlagsBits = 8765;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = String.escapeXML()();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 34;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v30;
      uint64_t v20 = v33;
      unint64_t v21 = v34;
      uint64_t v35 = v30;
      unint64_t v23 = *(void *)(v30 + 16);
      unint64_t v22 = *(void *)(v30 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t result = v35;
      }
      v7 += 32;
      *(void *)(result + 16) = v23 + 1;
      uint64_t v24 = result + 16 * v23;
      *(void *)(v24 + 32) = v20;
      *(void *)(v24 + 40) = v21;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 88);
  uint64_t v4 = v3();
  uint64_t v5 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, v2, v4);
  if (v6)
  {
    uint64_t v8 = swift_retain();
    uint64_t v7 = ((uint64_t (*)(uint64_t))v3)(v8);
    swift_release();
  }
  else
  {
    uint64_t v7 = v5;
  }
  uint64_t result = v3();
  if (result < v7) {
    goto LABEL_11;
  }
  uint64_t v9 = result;
  uint64_t result = v3();
  if (result < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 < 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >= v9) {
    return v7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1)
{
  unint64_t v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1;
    Swift::UInt64 v3 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v6 = *v1 + 48;
    swift_beginAccess();
    if (!*(void *)(*(void *)(v4 + 48) + 16)) {
      goto LABEL_10;
    }
    specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
    swift_endAccess();
    swift_beginAccess();
    uint64_t v8 = *(void *)v6;
    if (!*(void *)(*(void *)v6 + 16)) {
      goto LABEL_11;
    }
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if ((v10 & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v9);
    swift_endAccess();
    if (v2 < *(void *)(v11 + 16)) {
      return v2;
    }
  }
  __break(1u);
LABEL_10:
  swift_endAccess();
  __break(1u);
LABEL_11:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  BOOL v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  unint64_t v2 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 48 * v5;
    uint64_t v8 = *(void *)(v6 + 16);
    char v7 = *(void *)(v6 + 24);
    unint64_t v2 = __OFADD__(v7, v8);
    unint64_t v9 = v7 + v8;
    if (v2)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    char v10 = *(void *)(v4 + 72);
    if (result >= v9)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    char v10 = 0;
    if (result >= 0) {
      goto LABEL_10;
    }
  }
  if (result < v10) {
    goto LABEL_10;
  }
  return result;
}

void specialized RandomAccessCollection<>.index(before:)(uint64_t a1)
{
  uint64_t v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  id v3 = *(id *)v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v3, *(void *)(v1 + 8), 0);
    swift_release();
    goto LABEL_6;
  }
  id v3 = (id)_NSTextLineFragmentGetCTLine(*(void **)v1);
  if (v3)
  {
LABEL_6:
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v3);

    goto LABEL_7;
  }
  CFArrayRef RunCount = 0;
LABEL_7:
  if (v2 < 0 || v2 >= (uint64_t)RunCount) {
    goto LABEL_11;
  }
}

uint64_t recursiveDescriptionName(_:)()
{
  uint64_t v0 = _typeName(_:qualified:)();
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized Collection.first.getter(v0, v2);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v3 == 40 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_10;
      }
    }
    unint64_t v7 = specialized Collection.dropFirst(_:)(1uLL, v0, v2);
    unint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v14 = specialized Collection<>.firstIndex(of:)(32, 0xE100000000000000, v7, v9);
    char v16 = v15;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      if (v9 >> 14 < v14 >> 14)
      {
        __break(1u);
        return result;
      }
      type metadata accessor for EmptyCollection<Character>(0, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x263F8D120], MEMORY[0x263F8DDD8]);
      lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>();
      MEMORY[0x24C523860](v14, v9);
    }
    uint64_t v0 = MEMORY[0x24C522930](v7, v9, v11, v13);
    unint64_t v2 = v18;
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(60, 0xE100000000000000, v0, v2);
  char v20 = v19;
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = String.subscript.getter();
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v0 = MEMORY[0x24C522930](v21, v23, v25, v27);
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance ViewResponder()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CustomRecursiveStringConvertible.descriptionAttributes.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CustomRecursiveStringConvertible.hideFromDescription.getter()
{
  return 0;
}

uint64_t CustomRecursiveStringConvertible.descriptionName.getter()
{
  swift_getDynamicType();

  return recursiveDescriptionName(_:)();
}

uint64_t CustomRecursiveStringConvertible.descriptionChildren.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CustomRecursiveStringConvertible.recursiveDescription.getter()
{
  return CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(0, 0)._countAndFlagsBits;
}

Swift::String __swiftcall CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(Swift::Int indent, Swift::Bool rounded)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for CharacterSet();
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (indent < 0)
  {
LABEL_25:
    __break(1u);
    swift_release();
    uint64_t v55 = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v61 = v9;
    v65._uint64_t countAndFlagsBits = indent;
    v65._object = (void *)538976288;
    unint64_t v66 = 0xE400000000000000;
    uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8EDC0];
    type metadata accessor for EmptyCollection<Character>(0, &lazy cache variable for type metadata for Repeated<String>, MEMORY[0x263F8D310], MEMORY[0x263F8EDC0]);
    lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>(&lazy protocol witness table cache variable for type Repeated<String> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<String>, v12);
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    unsigned __int8 v63 = v14;
    uint64_t v64 = v13;
    uint64_t v15 = v4[2](v5, (uint64_t)v4);
    uint64_t v16 = v15;
    if (rounded)
    {
      uint64_t v17 = specialized Sequence<>.roundedAttributes()(v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = v17;
    }
    if (indent) {
      unint64_t v18 = (void *)MEMORY[0x263F8EE78];
    }
    else {
      unint64_t v18 = specialized CustomRecursiveStringConvertible.topLevelAttributes.getter();
    }
    v65._uint64_t countAndFlagsBits = v16;
    specialized Array.append<A>(contentsOf:)((uint64_t)v18);
    uint64_t countAndFlagsBits = v65._countAndFlagsBits;
    swift_getKeyPath();
    v65._uint64_t countAndFlagsBits = countAndFlagsBits;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v65);
    uint64_t v62 = v8;
    Swift::Int v59 = indent;
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(void *)(v65._countAndFlagsBits + 16))
    {
      uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS4name_SS5valuetG_SSs5NeverOTg5032_sS3SIgggo_SS4name_SS5valuetSSs5F131OIegnrzr_TR107_s7SwiftUI32CustomRecursiveStringConvertiblePAAE21_recursiveDescription6indent7roundedSSSi_SbtFS2S_SStXEfU_Tf3nnnpf_nTf1cn_n(v65._countAndFlagsBits);
      swift_release();
      v65._uint64_t countAndFlagsBits = v20;
      uint64_t v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
      type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
      lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], v21);
      uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      v65._uint64_t countAndFlagsBits = 32;
      v65._object = (void *)0xE100000000000000;
      v25._uint64_t countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      object = v65._object;
      uint64_t v60 = v65._countAndFlagsBits;
    }
    else
    {
      swift_release();
      uint64_t v60 = 0;
      object = (void *)0xE000000000000000;
    }
    v65._uint64_t countAndFlagsBits = v4[1](v5, (uint64_t)v4);
    v65._object = v27;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v28 = v5;
    uint64_t v29 = MEMORY[0x263F8D310];
    uint64_t v30 = StringProtocol.components(separatedBy:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v62);
    v65._uint64_t countAndFlagsBits = v30;
    uint64_t v31 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
    type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for [String], v29, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], v31);
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = String.escapeXML()();
    unint64_t v34 = v33;
    uint64_t v35 = v28;
    swift_bridgeObjectRelease();
    uint64_t v36 = v63;
    v65._uint64_t countAndFlagsBits = v64;
    v65._object = v63;
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = 60;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    swift_bridgeObjectRetain();
    uint64_t v62 = v32;
    v38._uint64_t countAndFlagsBits = v32;
    v38._object = v34;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v39._uint64_t countAndFlagsBits = v60;
    v39._object = object;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String v69 = v65;
    uint64_t v40 = v4[4];
    uint64_t v41 = *(void *)(v40(v35, (uint64_t)v4) + 16);
    swift_bridgeObjectRelease();
    if (v41)
    {
      v42._uint64_t countAndFlagsBits = 2622;
      v42._object = (void *)0xE200000000000000;
      String.append(_:)(v42);
      uint64_t v43 = v40(v35, (uint64_t)v4);
      uint64_t v44 = *(void *)(v43 + 16);
      if (v44)
      {
        uint64_t v45 = v43 + 32;
        Swift::Int v46 = v59 + 1;
        BOOL v47 = __OFADD__(v59, 1);
        while (1)
        {
          outlined init with copy of AnyTrackedValue(v45, (uint64_t)&v65);
          uint64_t v48 = v67;
          uint64_t v49 = v68;
          __swift_project_boxed_opaque_existential_1(&v65, v67);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v49 + 40))(v48, v49) & 1) == 0)
          {
            __swift_project_boxed_opaque_existential_1(&v65, v67);
            if (v47)
            {
              __break(1u);
              goto LABEL_25;
            }
            Swift::String v50 = CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(v46, rounded);
            String.append(_:)(v50);
            swift_bridgeObjectRelease();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
          v45 += 40;
          if (!--v44)
          {
            swift_bridgeObjectRelease();
            uint64_t v36 = v63;
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_22:
      v52._uint64_t countAndFlagsBits = v64;
      v52._object = v36;
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v65._uint64_t countAndFlagsBits = 12092;
      v65._object = (void *)0xE200000000000000;
      v53._uint64_t countAndFlagsBits = v62;
      v53._object = v34;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._uint64_t countAndFlagsBits = 2622;
      v54._object = (void *)0xE200000000000000;
      String.append(_:)(v54);
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 171847456;
      v51._object = (void *)0xE400000000000000;
      String.append(_:)(v51);
    }
    uint64_t v55 = v69._countAndFlagsBits;
    char v56 = v69._object;
  }
  result._object = v56;
  result._uint64_t countAndFlagsBits = v55;
  return result;
}

uint64_t CustomRecursiveStringConvertible.roundedRecursiveDescription.getter()
{
  return CustomRecursiveStringConvertible._recursiveDescription(indent:rounded:)(0, 1)._countAndFlagsBits;
}

uint64_t specialized Sequence<>.roundedAttributes()(uint64_t a1)
{
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  double v100 = (char *)&v98 - v3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v98 = a1;
    uint64_t v99 = 0;
    uint64_t v6 = a1 + 32;
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = v5;
    uint64_t v101 = v4;
    uint64_t v102 = a1 + 32;
    while (1)
    {
      uint64_t v104 = v9;
      uint64_t v13 = (uint64_t *)(v6 + 32 * v8);
      uint64_t v103 = *v13;
      uint64_t v14 = v13[2];
      uint64_t v105 = v13[1];
      uint64_t v106 = 0;
      uint64_t v15 = v13[3];
      MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
      if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v14 & 0x1000000000000000)) {
        break;
      }
      if ((v15 & 0x2000000000000000) == 0)
      {
        if ((v14 & 0x1000000000000000) != 0) {
          uint64_t v16 = (unsigned char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v16 = (unsigned char *)_StringObject.sharedUTF8.getter();
        }
        switch(*v16)
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            goto LABEL_12;
          default:
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            int v92 = (unsigned char *)_swift_stdlib_strtod_clocale();
            if (v92) {
              BOOL v17 = *v92 == 0;
            }
            else {
LABEL_12:
            }
              BOOL v17 = 0;
            BOOL v110 = v17;
            break;
        }
        goto LABEL_14;
      }
      uint64_t v108 = v14;
      uint64_t v109 = v15 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v14)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          goto LABEL_17;
        default:
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          long long v93 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (v93) {
            BOOL v18 = *v93 == 0;
          }
          else {
LABEL_17:
          }
            BOOL v18 = 0;
          BOOL v110 = v18;
          swift_bridgeObjectRelease();
          break;
      }
LABEL_19:
      if (v110)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = Double.description.getter();
        uint64_t v15 = v19;
LABEL_28:
        uint64_t v9 = v104;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
          uint64_t v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v33 = v9[2];
        unint64_t v32 = v9[3];
        if (v33 >= v32 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v9);
          uint64_t v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        _OWORD v9[2] = v33 + 1;
        uint64_t v10 = &v9[4 * v33];
        void v10[6] = v14;
        uint64_t v11 = v10 + 6;
        goto LABEL_4;
      }
      unint64_t v20 = (unint64_t)String.tupleOfDoubles()();
      if (!v20) {
        goto LABEL_28;
      }
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      int64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v23 = v8;
        uint64_t v108 = (uint64_t)v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
        uint64_t v24 = v108;
        Swift::String v25 = (double *)(v21 + 48);
        do
        {
          uint64_t v27 = *((void *)v25 - 2);
          uint64_t v26 = *((void *)v25 - 1);
          double v28 = *v25;
          uint64_t v108 = v24;
          unint64_t v30 = *(void *)(v24 + 16);
          unint64_t v29 = *(void *)(v24 + 24);
          swift_bridgeObjectRetain();
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            uint64_t v24 = v108;
          }
          *(void *)(v24 + 16) = v30 + 1;
          unint64_t v31 = v24 + 24 * v30;
          *(void *)(v31 + 32) = v27;
          *(void *)(v31 + 40) = v26;
          *(double *)(v31 + 48) = round(v28 * 256.0) * 0.00390625;
          v25 += 3;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease();
        uint64_t v5 = (void *)MEMORY[0x263F8EE78];
        uint64_t v8 = v23;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = (uint64_t)v5;
      }
      int64_t v34 = *(void *)(v24 + 16);
      uint64_t v9 = v104;
      if (!v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v70 = (uint64_t)v5;
        goto LABEL_64;
      }
      if (v34 != 4) {
        goto LABEL_52;
      }
      uint64_t v108 = v103;
      uint64_t v109 = v105;
      uint64_t v106 = 0x726F6C6F63;
      unint64_t v107 = 0xE500000000000000;
      uint64_t v35 = type metadata accessor for Locale();
      uint64_t v36 = (uint64_t)v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v100, 1, 1, v35);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      char v38 = v37;
      _s10Foundation6LocaleVSgWOhTm_0(v36, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
      swift_bridgeObjectRelease();
      if (v38)
      {
LABEL_52:
        uint64_t v68 = v8;
        int64_t v69 = v34;
LABEL_53:
        uint64_t v106 = (uint64_t)v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69, 0);
        uint64_t v70 = v106;
        uint64_t v71 = v24 + 48;
        do
        {
          uint64_t v73 = *(void *)(v71 - 16);
          unint64_t v72 = *(void *)(v71 - 8);
          uint64_t v74 = HIBYTE(v72) & 0xF;
          if ((v72 & 0x2000000000000000) == 0) {
            uint64_t v74 = v73 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v108 = 0;
          uint64_t v109 = 0xE000000000000000;
          if (v74)
          {
            swift_bridgeObjectRetain();
            v75._uint64_t countAndFlagsBits = v73;
            v75._object = (void *)v72;
            String.append(_:)(v75);
            v76._uint64_t countAndFlagsBits = 8250;
            v76._object = (void *)0xE200000000000000;
            String.append(_:)(v76);
            Double.write<A>(to:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Double.write<A>(to:)();
          }
          uint64_t v77 = v108;
          uint64_t v78 = v109;
          uint64_t v106 = v70;
          unint64_t v80 = *(void *)(v70 + 16);
          unint64_t v79 = *(void *)(v70 + 24);
          if (v80 >= v79 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
            uint64_t v70 = v106;
          }
          *(void *)(v70 + 16) = v80 + 1;
          unint64_t v81 = v70 + 16 * v80;
          *(void *)(v81 + 32) = v77;
          *(void *)(v81 + 40) = v78;
          v71 += 24;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        uint64_t v5 = (void *)MEMORY[0x263F8EE78];
        uint64_t v8 = v68;
        uint64_t v9 = v104;
LABEL_64:
        uint64_t v108 = v70;
        char v82 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
        type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], v82);
        uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
        CGRect v85 = v84;
        swift_bridgeObjectRelease();
        uint64_t v108 = 40;
        uint64_t v109 = 0xE100000000000000;
        v86._uint64_t countAndFlagsBits = v83;
        v86._object = v85;
        String.append(_:)(v86);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v87._uint64_t countAndFlagsBits = 41;
        v87._object = (void *)0xE100000000000000;
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        uint64_t v88 = v108;
        uint64_t v15 = v109;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v4 = v101;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
          uint64_t v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        uint64_t v6 = v102;
        unint64_t v90 = v9[2];
        unint64_t v89 = v9[3];
        if (v90 >= v89 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, v9);
          uint64_t v9 = (void *)isUniquelyReferenced_nonNull_native;
        }
        _OWORD v9[2] = v90 + 1;
        CGRect v91 = &v9[4 * v90];
        v91[6] = v88;
        uint64_t v11 = v91 + 6;
        goto LABEL_4;
      }
      uint64_t v108 = (uint64_t)v5;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
      uint64_t v39 = v108;
      double v40 = *(double *)(v24 + 48);
      unint64_t v42 = *(void *)(v108 + 16);
      unint64_t v41 = *(void *)(v108 + 24);
      unint64_t v43 = v41 >> 1;
      unint64_t v44 = v42 + 1;
      if (v41 >> 1 <= v42)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
        uint64_t v39 = v108;
        unint64_t v41 = *(void *)(v108 + 24);
        unint64_t v43 = v41 >> 1;
      }
      float v45 = v40;
      *(void *)(v39 + 16) = v44;
      *(float *)(v39 + 4 * v42 + 32) = v45;
      double v46 = *(double *)(v24 + 72);
      uint64_t v108 = v39;
      int64_t v47 = v42 + 2;
      if (v43 <= v44)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v47, 1);
        uint64_t v39 = v108;
      }
      float v48 = v46;
      *(void *)(v39 + 16) = v47;
      *(float *)(v39 + 4 * v44 + 32) = v48;
      double v49 = *(double *)(v24 + 96);
      uint64_t v108 = v39;
      unint64_t v51 = *(void *)(v39 + 16);
      unint64_t v50 = *(void *)(v39 + 24);
      unint64_t v52 = v50 >> 1;
      unint64_t v53 = v51 + 1;
      if (v50 >> 1 <= v51)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
        uint64_t v39 = v108;
        unint64_t v50 = *(void *)(v108 + 24);
        unint64_t v52 = v50 >> 1;
      }
      float v54 = v49;
      *(void *)(v39 + 16) = v53;
      *(float *)(v39 + 4 * v51 + 32) = v54;
      double v55 = *(double *)(v24 + 120);
      uint64_t v108 = v39;
      if (v52 <= v53)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 2, 1);
        uint64_t v39 = v108;
      }
      float v56 = v55;
      *(void *)(v39 + 16) = v51 + 2;
      *(float *)(v39 + 32 + 4 * v53) = v56;
      if (!v51)
      {
        __break(1u);
LABEL_79:
        __break(1u);
        JUMPOUT(0x245E6C000);
      }
      if (v51 == 1) {
        goto LABEL_79;
      }
      float v57 = *(float *)(v39 + 32);
      float v58 = *(float *)(v39 + 36);
      float v59 = *(float *)(v39 + 40);
      float v60 = *(float *)(v39 + 44);
      swift_bridgeObjectRelease();
      uint64_t v61 = colorNameForColorComponents(_:)(v57, v58, v59, v60);
      if (!v62)
      {
        uint64_t v68 = v8;
        int64_t v69 = 4;
        goto LABEL_53;
      }
      uint64_t v63 = v61;
      uint64_t v15 = v62;
      swift_bridgeObjectRelease();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104[2] + 1, 1, v104);
        uint64_t v104 = (void *)isUniquelyReferenced_nonNull_native;
      }
      uint64_t v4 = v101;
      uint64_t v6 = v102;
      unint64_t v65 = v104[2];
      unint64_t v64 = v104[3];
      if (v65 >= v64 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v104);
        uint64_t v104 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v66 = v104;
      Swift::String v104[2] = v65 + 1;
      uint64_t v67 = &v66[4 * v65];
      v67[6] = v63;
      uint64_t v11 = v67 + 6;
      uint64_t v9 = v66;
LABEL_4:
      uint64_t v12 = v105;
      *(v11 - 2) = v103;
      *(v11 - 1) = v12;
      ++v8;
      v11[1] = v15;
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v94 = v99;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v99 = v94;
    uint64_t v6 = v102;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
LABEL_77:
  uint64_t v95 = swift_bridgeObjectRetain();
  uint64_t v96 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(v95);
  swift_bridgeObjectRelease_n();
  return v96;
}

uint64_t Sequence<>.roundedAttributes()(uint64_t a1)
{
  uint64_t v107 = 0;
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v108 = (char *)&v106 - v4;
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v106 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v1, a1, v10);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v13 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = dispatch thunk of IteratorProtocol.next()();
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v112 = v117;
  if (v117)
  {
    uint64_t v110 = AssociatedConformanceWitness;
    uint64_t v111 = v116;
    uint64_t v18 = v118;
    uint64_t v17 = v119;
    uint64_t v113 = (void *)MEMORY[0x263F8EE78];
    uint64_t v109 = v12;
    while (1)
    {
      v114[0] = 0;
      MEMORY[0x270FA5388](v15);
      vars0 = v114;
      if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v18 & 0x1000000000000000)) {
        break;
      }
      if ((v17 & 0x2000000000000000) == 0)
      {
        if ((v18 & 0x1000000000000000) != 0) {
          uint64_t v26 = (unsigned char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v26 = (unsigned char *)_StringObject.sharedUTF8.getter();
        }
        switch(*v26)
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            swift_bridgeObjectRetain();
            goto LABEL_15;
          default:
            swift_bridgeObjectRetain();
            uint64_t v103 = (unsigned char *)_swift_stdlib_strtod_clocale();
            if (v103) {
              BOOL v27 = *v103 == 0;
            }
            else {
LABEL_15:
            }
              BOOL v27 = 0;
            BOOL v115 = v27;
            break;
        }
        goto LABEL_17;
      }
      uint64_t v116 = v18;
      uint64_t v117 = v17 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v18)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          goto LABEL_20;
        default:
          swift_bridgeObjectRetain();
          uint64_t v104 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (v104) {
            BOOL v28 = *v104 == 0;
          }
          else {
LABEL_20:
          }
            BOOL v28 = 0;
          BOOL v115 = v28;
          swift_bridgeObjectRelease();
          break;
      }
LABEL_22:
      if (v115)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = Double.description.getter();
        uint64_t v17 = v30;
        int64_t v22 = v113;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v32 = v22[2];
        unint64_t v31 = v22[3];
        int64_t v33 = v32 + 1;
        if (v32 < v31 >> 1) {
          goto LABEL_6;
        }
LABEL_5:
        int64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v33, 1, v22);
        goto LABEL_6;
      }
      unint64_t v34 = (unint64_t)String.tupleOfDoubles()();
      if (!v34)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
        }
        unint64_t v76 = v113[2];
        unint64_t v75 = v113[3];
        if (v76 >= v75 >> 1) {
          uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v75 > 1), v76 + 1, 1, v113);
        }
        uint64_t v77 = v113;
        v113[2] = v76 + 1;
        uint64_t v78 = &v77[4 * v76];
        v78[6] = v18;
        uint64_t v24 = v78 + 6;
        goto LABEL_7;
      }
      unint64_t v35 = v34;
      uint64_t v36 = v13;
      swift_bridgeObjectRelease();
      int64_t v37 = *(void *)(v35 + 16);
      if (v37)
      {
        uint64_t v116 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
        uint64_t v38 = v116;
        uint64_t v39 = (double *)(v35 + 48);
        do
        {
          uint64_t v41 = *((void *)v39 - 2);
          uint64_t v40 = *((void *)v39 - 1);
          double v42 = *v39;
          uint64_t v116 = v38;
          unint64_t v44 = *(void *)(v38 + 16);
          unint64_t v43 = *(void *)(v38 + 24);
          swift_bridgeObjectRetain();
          if (v44 >= v43 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
            uint64_t v38 = v116;
          }
          *(void *)(v38 + 16) = v44 + 1;
          unint64_t v45 = v38 + 24 * v44;
          *(void *)(v45 + 32) = v41;
          *(void *)(v45 + 40) = v40;
          *(double *)(v45 + 48) = round(v42 * 256.0) * 0.00390625;
          v39 += 3;
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease();
        uint64_t v16 = MEMORY[0x263F8EE78];
        int64_t v46 = *(void *)(v38 + 16);
        if (!v46)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v16;
        int64_t v46 = *(void *)(v16 + 16);
        if (!v46) {
          goto LABEL_68;
        }
      }
      if (v46 != 4) {
        goto LABEL_56;
      }
      uint64_t v116 = v111;
      uint64_t v117 = v112;
      v114[0] = 0x726F6C6F63;
      v114[1] = 0xE500000000000000;
      uint64_t v47 = type metadata accessor for Locale();
      uint64_t v48 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v108, 1, 1, v47);
      vars0 = (void *)lazy protocol witness table accessor for type String and conformance String();
      uint64_t vars8 = vars0;
      StringProtocol.range<A>(of:options:range:locale:)();
      char v50 = v49;
      _s10Foundation6LocaleVSgWOhTm_0(v48, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
      swift_bridgeObjectRelease();
      if (v50)
      {
LABEL_56:
        int64_t v79 = v46;
LABEL_57:
        v114[0] = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
        uint64_t v80 = v114[0];
        uint64_t v81 = v38 + 48;
        do
        {
          uint64_t v83 = *(void *)(v81 - 16);
          unint64_t v82 = *(void *)(v81 - 8);
          uint64_t v84 = HIBYTE(v82) & 0xF;
          if ((v82 & 0x2000000000000000) == 0) {
            uint64_t v84 = v83 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v116 = 0;
          uint64_t v117 = 0xE000000000000000;
          if (v84)
          {
            swift_bridgeObjectRetain();
            v85._uint64_t countAndFlagsBits = v83;
            v85._object = (void *)v82;
            String.append(_:)(v85);
            v86._uint64_t countAndFlagsBits = 8250;
            v86._object = (void *)0xE200000000000000;
            String.append(_:)(v86);
            Double.write<A>(to:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Double.write<A>(to:)();
          }
          uint64_t v87 = v116;
          uint64_t v88 = v117;
          v114[0] = v80;
          unint64_t v90 = *(void *)(v80 + 16);
          unint64_t v89 = *(void *)(v80 + 24);
          if (v90 >= v89 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
            uint64_t v80 = v114[0];
          }
          *(void *)(v80 + 16) = v90 + 1;
          uint64_t v91 = v80 + 16 * v90;
          *(void *)(v91 + 32) = v87;
          *(void *)(v91 + 40) = v88;
          v81 += 24;
          --v46;
        }
        while (v46);
        swift_bridgeObjectRelease();
        uint64_t v16 = MEMORY[0x263F8EE78];
LABEL_69:
        int v92 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
        type metadata accessor for EmptyCollection<Character>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [String], v92);
        uint64_t v93 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v95 = v94;
        swift_bridgeObjectRelease();
        uint64_t v116 = 40;
        uint64_t v117 = 0xE100000000000000;
        v96._uint64_t countAndFlagsBits = v93;
        v96._object = v95;
        String.append(_:)(v96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v97._uint64_t countAndFlagsBits = 41;
        v97._object = (void *)0xE100000000000000;
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        uint64_t v98 = v116;
        uint64_t v17 = v117;
        uint64_t v99 = v113;
        uint64_t v13 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
        }
        uint64_t v12 = v109;
        unint64_t v101 = v99[2];
        unint64_t v100 = v99[3];
        if (v101 >= v100 >> 1) {
          uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v100 > 1), v101 + 1, 1, v99);
        }
        v99[2] = v101 + 1;
        uint64_t v113 = v99;
        uint64_t v102 = &v99[4 * v101];
        v102[6] = v98;
        uint64_t v24 = v102 + 6;
        goto LABEL_7;
      }
      uint64_t v116 = v16;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
      uint64_t v51 = v116;
      double v52 = *(double *)(v38 + 48);
      unint64_t v54 = *(void *)(v116 + 16);
      unint64_t v53 = *(void *)(v116 + 24);
      unint64_t v55 = v53 >> 1;
      unint64_t v56 = v54 + 1;
      if (v53 >> 1 <= v54)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        uint64_t v51 = v116;
        unint64_t v53 = *(void *)(v116 + 24);
        unint64_t v55 = v53 >> 1;
      }
      float v57 = v52;
      *(void *)(v51 + 16) = v56;
      *(float *)(v51 + 4 * v54 + 32) = v57;
      double v58 = *(double *)(v38 + 72);
      uint64_t v116 = v51;
      int64_t v59 = v54 + 2;
      if (v55 <= v56)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v59, 1);
        uint64_t v51 = v116;
      }
      float v60 = v58;
      *(void *)(v51 + 16) = v59;
      *(float *)(v51 + 4 * v56 + 32) = v60;
      double v61 = *(double *)(v38 + 96);
      uint64_t v116 = v51;
      unint64_t v63 = *(void *)(v51 + 16);
      unint64_t v62 = *(void *)(v51 + 24);
      unint64_t v64 = v62 >> 1;
      unint64_t v65 = v63 + 1;
      if (v62 >> 1 <= v63)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        uint64_t v51 = v116;
        unint64_t v62 = *(void *)(v116 + 24);
        unint64_t v64 = v62 >> 1;
      }
      float v66 = v61;
      *(void *)(v51 + 16) = v65;
      *(float *)(v51 + 4 * v63 + 32) = v66;
      double v67 = *(double *)(v38 + 120);
      uint64_t v116 = v51;
      if (v64 <= v65)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 2, 1);
        uint64_t v51 = v116;
      }
      float v68 = v67;
      *(void *)(v51 + 16) = v63 + 2;
      *(float *)(v51 + 32 + 4 * v65) = v68;
      if (!v63)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        JUMPOUT(0x245E6CCE8);
      }
      if (v63 == 1) {
        goto LABEL_82;
      }
      float v69 = *(float *)(v51 + 32);
      float v70 = *(float *)(v51 + 36);
      float v71 = *(float *)(v51 + 40);
      float v72 = *(float *)(v51 + 44);
      swift_bridgeObjectRelease();
      uint64_t v73 = colorNameForColorComponents(_:)(v69, v70, v71, v72);
      if (!v74)
      {
        int64_t v79 = 4;
        goto LABEL_57;
      }
      uint64_t v29 = v73;
      uint64_t v17 = v74;
      swift_bridgeObjectRelease();
      int64_t v22 = v113;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      }
      uint64_t v13 = v36;
      unint64_t v32 = v22[2];
      unint64_t v31 = v22[3];
      int64_t v33 = v32 + 1;
      uint64_t v12 = v109;
      if (v32 >= v31 >> 1) {
        goto LABEL_5;
      }
LABEL_6:
      void v22[2] = v33;
      uint64_t v113 = v22;
      uint64_t v23 = &v22[4 * v32];
      v23[6] = v29;
      uint64_t v24 = v23 + 6;
LABEL_7:
      uint64_t v25 = v112;
      *(v24 - 2) = v111;
      *(v24 - 1) = v25;
      v24[1] = v17;
      uint64_t v15 = dispatch thunk of IteratorProtocol.next()();
      uint64_t v18 = v118;
      uint64_t v17 = v119;
      uint64_t v111 = v116;
      uint64_t v112 = v117;
      if (!v117) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v105 = v107;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v107 = v105;
    uint64_t v12 = v109;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v113 = (void *)MEMORY[0x263F8EE78];
LABEL_4:
  (*(void (**)(char *, uint64_t))(v106 + 8))(v12, v13);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SStG_SS4name_SS5valuets5NeverOTg5037_sS4SIgggoo_SS_SStSS4name_SS5valuets5f44OIegnrzr_TR083_sST7SwiftUISS4name_SS5valuet7b49RtzrlE17roundedAttributesSaySSAB_SSACtGyFSSAB_O12j1_K16XEfU2_Tf3nnnpf_nTf1cn_n(v19);
  swift_bridgeObjectRelease_n();
  return v20;
}

uint64_t String.escapeXML()()
{
  uint64_t v0 = String.count.getter();
  MEMORY[0x24C522950](v0);
  swift_bridgeObjectRetain();
  Swift::String_optional v1 = String.Iterator.next()();
  if (v1.value._object)
  {
    uint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
    object = v1.value._object;
    while ((countAndFlagsBits != 34 || object != (void *)0xE100000000000000)
         && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (countAndFlagsBits == 38 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = 0x3B706D6126;
        unint64_t v5 = 0xE500000000000000;
        goto LABEL_8;
      }
      if (countAndFlagsBits == 39 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = 0x3B736F706126;
        goto LABEL_7;
      }
      if (countAndFlagsBits == 60 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = 997485606;
LABEL_23:
        unint64_t v5 = 0xE400000000000000;
        goto LABEL_8;
      }
      if (countAndFlagsBits == 62 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = 997484326;
        goto LABEL_23;
      }
      if (countAndFlagsBits == 10 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = 28252;
      }
      else
      {
        if ((countAndFlagsBits != 13 || object != (void *)0xE100000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          MEMORY[0x24C522A00](countAndFlagsBits, object);
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        uint64_t v4 = 29276;
      }
      unint64_t v5 = 0xE200000000000000;
LABEL_8:
      String.append(_:)(*(Swift::String *)&v4);
LABEL_9:
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object) {
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = 0x3B746F757126;
LABEL_7:
    unint64_t v5 = 0xE600000000000000;
    goto LABEL_8;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t BridgeStringConvertible.bridgeDescriptionChildren.getter()
{
  return MEMORY[0x263F8EE78];
}

Swift::OpaquePointer_optional __swiftcall String.tupleOfDoubles()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized Collection.first.getter(v3, v2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_37;
  }
  if (v4 == 40 && v6 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized BidirectionalCollection.last.getter(v3, v2);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_37;
  }
  if (v9 == 41 && v11 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_37:
    uint64_t v28 = 0;
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v13 = decomposeTuple #1 () in String.tupleOfDoubles()(v3, v2);
  uint64_t v14 = (void *)v13;
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    uint64_t v30 = (void *)v13;
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t *)(v16 + 40);
    uint64_t v20 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v22 = *(v19 - 1);
      uint64_t v21 = *v19;
      MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
      if ((v21 & 0x1000000000000000) == 0)
      {
        if ((v21 & 0x2000000000000000) != 0)
        {
          switch((char)v22)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
LABEL_22:
              swift_bridgeObjectRetain();
              goto LABEL_23;
            default:
              swift_bridgeObjectRetain();
              uint64_t v23 = (unsigned char *)_swift_stdlib_strtod_clocale();
              if (v23) {
LABEL_30:
              }
                BOOL v31 = *v23 == 0;
              else {
LABEL_23:
              }
                BOOL v31 = 0;
              break;
          }
          goto LABEL_24;
        }
        if ((v22 & 0x1000000000000000) != 0)
        {
          switch(*(unsigned char *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_22;
            default:
              swift_bridgeObjectRetain();
              uint64_t v23 = (unsigned char *)_swift_stdlib_strtod_clocale();
              if (!v23) {
                goto LABEL_23;
              }
              goto LABEL_30;
          }
        }
      }
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
LABEL_24:
      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      if (v31)
      {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          uint64_t v20 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v25 = v20[2];
        unint64_t v24 = v20[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v20);
          uint64_t v20 = (void *)isUniquelyReferenced_nonNull_native;
        }
        v20[2] = v25 + 1;
        v20[v25 + 4] = 0;
      }
      v19 += 2;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = *(void *)(v16 + 16);
        uint64_t v14 = v30;
        goto LABEL_34;
      }
    }
  }
  uint64_t v26 = 0;
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
LABEL_34:
  swift_bridgeObjectRelease();
  if (v26 != v20[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  uint64_t v27 = specialized _copySequenceToContiguousArray<A>(_:)(v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SdtG_SS5label_Sd5valuets5NeverOTg506_sSSSdh33Iggyod_SS_SdtSS5label_Sd5valuets5f45OIegnrzr_TR76_sSS7SwiftUIE14tupleOfDoublesSayl25_Sd5valuetGSgyFSSAC_SdADtj1_K15XEfU_Tf3nnnpf_nTf1cn_n(v27);
  swift_release();
LABEL_38:
  uint64_t v29 = (void *)v28;
  result.value._rawuint64_t Value = v29;
  result.is_nil = v7;
  return result;
}

uint64_t decomposeTuple #1 () in String.tupleOfDoubles()(uint64_t a1, unint64_t a2)
{
  uint64_t v82 = type metadata accessor for CharacterSet();
  uint64_t v78 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v81 = (char *)v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized Collection.dropFirst(_:)(1uLL, a1, a2);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t result = Substring.distance(from:to:)();
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v9) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = result;
    }
    if (v10 >> 14 >= v5 >> 14)
    {
      unint64_t v11 = Substring.subscript.getter();
      unint64_t v13 = v12;
      uint64_t v14 = swift_bridgeObjectRelease();
      uint64_t v84 = 44;
      unint64_t v85 = 0xE100000000000000;
      MEMORY[0x270FA5388](v14);
      v77[-2] = &v84;
      swift_bridgeObjectRetain();
      uint64_t v15 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)&v77[-4], v11, v13);
      swift_bridgeObjectRelease();
      uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySsG_SSs5NeverOTg5012_sSsSSIeggo_f4SSs5D132OIegnrzr_TR073_sSS7SwiftUIE14tupleOfDoublesSaySS5label_Sd5valuetGSgyF14decomposeTupleL_H32SSG6labels_AH6valuestyFSSSshcfu_Tf3nnnpf_nTf1cn_n(v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v16 + 16);
      v77[1] = v16;
      if (v17)
      {
        uint64_t v18 = (unint64_t *)(v16 + 40);
        uint64_t v19 = (void *)MEMORY[0x263F8EE78];
        uint64_t v20 = (void *)MEMORY[0x263F8EE78];
        do
        {
          uint64_t v22 = *(v18 - 1);
          unint64_t v21 = *v18;
          swift_bridgeObjectRetain();
          specialized Collection<>.firstIndex(of:)(58, 0xE100000000000000, v22, v21);
          if (v23)
          {
            uint64_t v44 = 0;
            unint64_t v43 = 0xE000000000000000;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v24 = String.subscript.getter();
            uint64_t v80 = v20;
            uint64_t v26 = v25;
            uint64_t v28 = v27;
            uint64_t v30 = v29;
            swift_bridgeObjectRelease();
            uint64_t v79 = MEMORY[0x24C522930](v24, v26, v28, v30);
            unint64_t v32 = v31;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            unint64_t v33 = String.index(after:)();
            swift_bridgeObjectRelease();
            unint64_t v34 = specialized Collection.suffix(from:)(v33, v22, v21);
            uint64_t v36 = v35;
            uint64_t v38 = v37;
            uint64_t v39 = v19;
            uint64_t v41 = v40;
            swift_bridgeObjectRelease();
            uint64_t v42 = v38;
            unint64_t v43 = v32;
            uint64_t v44 = v79;
            uint64_t v22 = MEMORY[0x24C522930](v34, v36, v42, v41);
            unint64_t v21 = v45;
            uint64_t v19 = v39;
            uint64_t v20 = v80;
            swift_bridgeObjectRelease();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
          }
          unint64_t v47 = v20[2];
          unint64_t v46 = v20[3];
          if (v47 >= v46 >> 1) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v20);
          }
          v20[2] = v47 + 1;
          uint64_t v48 = &v20[2 * v47];
          v48[4] = v44;
          v48[5] = v43;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
          }
          unint64_t v50 = v19[2];
          unint64_t v49 = v19[3];
          if (v50 >= v49 >> 1) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v19);
          }
          v18 += 2;
          void v19[2] = v50 + 1;
          uint64_t v51 = &v19[2 * v50];
          v51[4] = v22;
          _DWORD v51[5] = v21;
          --v17;
        }
        while (v17);
      }
      else
      {
        uint64_t v19 = (void *)MEMORY[0x263F8EE78];
        uint64_t v20 = (void *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      int64_t v52 = v20[2];
      uint64_t v53 = MEMORY[0x263F8EE78];
      uint64_t v79 = (uint64_t)v19;
      uint64_t v80 = v20;
      if (v52)
      {
        uint64_t v83 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
        unint64_t v54 = (void (**)(char *, uint64_t))(v78 + 8);
        unint64_t v55 = v20 + 5;
        do
        {
          unint64_t v56 = *v55;
          uint64_t v84 = *(v55 - 1);
          unint64_t v85 = v56;
          swift_bridgeObjectRetain();
          float v57 = v81;
          static CharacterSet.whitespaces.getter();
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v58 = StringProtocol.trimmingCharacters(in:)();
          uint64_t v60 = v59;
          (*v54)(v57, v82);
          swift_bridgeObjectRelease();
          uint64_t v61 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v61 + 16) + 1, 1);
            uint64_t v61 = v83;
          }
          unint64_t v63 = *(void *)(v61 + 16);
          unint64_t v62 = *(void *)(v61 + 24);
          if (v63 >= v62 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
            uint64_t v61 = v83;
          }
          v55 += 2;
          *(void *)(v61 + 16) = v63 + 1;
          uint64_t v64 = v61 + 16 * v63;
          *(void *)(v64 + 32) = v58;
          *(void *)(v64 + 40) = v60;
          --v52;
        }
        while (v52);
        swift_bridgeObjectRelease();
        uint64_t v19 = (void *)v79;
        uint64_t v53 = MEMORY[0x263F8EE78];
        int64_t v65 = *(void *)(v79 + 16);
        if (v65) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v61 = MEMORY[0x263F8EE78];
        int64_t v65 = v19[2];
        if (v65)
        {
LABEL_30:
          uint64_t v83 = v53;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65, 0);
          float v66 = (void (**)(char *, uint64_t))(v78 + 8);
          double v67 = v19 + 5;
          do
          {
            unint64_t v68 = *v67;
            uint64_t v84 = *(v67 - 1);
            unint64_t v85 = v68;
            swift_bridgeObjectRetain();
            float v69 = v81;
            static CharacterSet.whitespaces.getter();
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v70 = StringProtocol.trimmingCharacters(in:)();
            uint64_t v72 = v71;
            (*v66)(v69, v82);
            swift_bridgeObjectRelease();
            uint64_t v73 = v83;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v73 + 16) + 1, 1);
              uint64_t v73 = v83;
            }
            unint64_t v75 = *(void *)(v73 + 16);
            unint64_t v74 = *(void *)(v73 + 24);
            if (v75 >= v74 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
              uint64_t v73 = v83;
            }
            v67 += 2;
            *(void *)(v73 + 16) = v75 + 1;
            uint64_t v76 = v73 + 16 * v75;
            *(void *)(v76 + 32) = v70;
            *(void *)(v76 + 40) = v72;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v61;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v61;
    }
  }
  __break(1u);
  return result;
}

uint64_t colorNameForColorComponents(_:)(float a1, float a2, float a3, float a4)
{
  if (a1 == 0.0 && a2 == 0.0 && a3 == 0.0)
  {
    if (a4 == 0.0) {
      return 0x7261656C63;
    }
    if (a4 == 1.0) {
      return 0x6B63616C62;
    }
  }
  BOOL v5 = a1 == 1.0;
  if (a2 != 1.0) {
    BOOL v5 = 0;
  }
  if (v5 && a3 == 1.0 && a4 == 1.0) {
    return 0x6574696877;
  }
  if (a1 == 0.03125 && a2 == 0.03125 && a3 == 0.03125 && a4 == 1.0) {
    return 2036429415;
  }
  if (a1 != 1.0) {
    goto LABEL_41;
  }
  if (a2 == 0.0 && a3 == 0.0 && a4 == 1.0) {
    return 6579570;
  }
  uint64_t result = 0x722D6D6574737973;
  if ((a2 != 0.042969 || a3 != 0.03125 || a4 != 1.0) && (a2 != 0.058594 || a3 != 0.042969 || a4 != 1.0))
  {
    if (a1 != 0.0) {
      goto LABEL_43;
    }
LABEL_41:
    if (a2 == 1.0 && a3 == 0.0 && a4 == 1.0) {
      return 0x6E65657267;
    }
    if (a2 == 0.0 && a3 == 1.0 && a4 == 1.0)
    {
      return 1702194274;
    }
    else
    {
LABEL_43:
      if (a3 != 0.0) {
        BOOL v5 = 0;
      }
      if (v5 && a4 == 1.0)
      {
        return 0x776F6C6C6579;
      }
      else
      {
        uint64_t result = 0x656C70727570;
        if ((a1 != 0.214 || a2 != 0.0 || a3 != 0.214 || a4 != 1.0)
          && (a1 != 0.21484 || a2 != 0.0 || a3 != 0.21484 || a4 != 1.0))
        {
          if (a1 == 1.0 && a2 == 0.21484 && a3 == 0.0 && a4 == 1.0)
          {
            return 0x65676E61726FLL;
          }
          else if (a1 == 0.0 && a2 == 1.0 && a3 == 1.0 && a4 == 1.0)
          {
            return 1818322292;
          }
          else if (a1 == 0.21484 && a2 == 0.21484 && a3 == 1.0 && a4 == 1.0)
          {
            return 0x6F6769646E69;
          }
          else if (a1 == 1.0 && a2 == 0.0 && a3 == 0.21484 && a4 == 1.0)
          {
            return 1802398064;
          }
          else
          {
            BOOL v9 = a1 == 0.046875;
            if (a2 != 0.046875) {
              BOOL v9 = 0;
            }
            if (a3 != 0.054688) {
              BOOL v9 = 0;
            }
            if (v9 && a4 == 0.29688) {
              return 0xD000000000000010;
            }
            else {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Color.Resolved.name.getter(float a1, float a2, float a3, float a4)
{
  return colorNameForColorComponents(_:)(roundf(a1 * 256.0) * 0.0039062, roundf(a2 * 256.0) * 0.0039062, roundf(a3 * 256.0) * 0.0039062, roundf(a4 * 256.0) * 0.0039062);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unint64_t v2 = (void *)MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = result + 32;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v2 + 4;
    uint64_t v29 = v1;
    while (1)
    {
      uint64_t v8 = v3 + 24 * v4;
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      int v11 = *(unsigned __int8 *)(v8 + 16);
      if (v11)
      {
        if (v11 != 1)
        {
          ++v4;
          uint64_t v13 = v9;
LABEL_18:
          if (v6) {
            goto LABEL_31;
          }
          goto LABEL_19;
        }
        uint64_t v12 = v10 - 1;
        if (__OFSUB__(v10, 1)) {
          goto LABEL_41;
        }
        uint64_t v13 = v12 - v5;
        if (__OFSUB__(v12, v5)) {
          goto LABEL_42;
        }
        BOOL v14 = __OFADD__(v5++, 1);
        if (v14) {
          goto LABEL_43;
        }
        BOOL v14 = __OFSUB__(v10, v9);
        uint64_t v15 = v10 - v9;
        if (v14) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v13 = v9 + v5;
        if (__OFADD__(v9, v5)) {
          goto LABEL_45;
        }
        BOOL v14 = __OFADD__(v5++, 1);
        if (v14) {
          goto LABEL_46;
        }
        BOOL v14 = __OFSUB__(v10, v9);
        uint64_t v15 = v10 - v9;
        if (v14) {
          goto LABEL_47;
        }
      }
      if (v5 < v15) {
        goto LABEL_18;
      }
      uint64_t v5 = 0;
      ++v4;
      if (v6) {
        goto LABEL_31;
      }
LABEL_19:
      unint64_t v16 = v2[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_40;
      }
      int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      type metadata accessor for EmptyCollection<Character>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8E0F8]);
      uint64_t v19 = (void *)swift_allocObject();
      int64_t v20 = _swift_stdlib_malloc_size(v19);
      uint64_t v21 = v20 - 32;
      if (v20 < 32) {
        uint64_t v21 = v20 - 25;
      }
      uint64_t v22 = v21 >> 3;
      void v19[2] = v18;
      void v19[3] = 2 * (v21 >> 3);
      unint64_t v23 = (unint64_t)(v19 + 4);
      uint64_t v24 = v2[3] >> 1;
      if (v2[2])
      {
        uint64_t v25 = v2 + 4;
        if (v19 != v2 || v23 >= (unint64_t)v25 + 8 * v24) {
          memmove(v19 + 4, v25, 8 * v24);
        }
        void v2[2] = 0;
      }
      unint64_t v7 = (void *)(v23 + 8 * v24);
      uint64_t v6 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
      uint64_t result = swift_release();
      unint64_t v2 = v19;
      uint64_t v1 = v29;
LABEL_31:
      BOOL v14 = __OFSUB__(v6--, 1);
      if (v14)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        return result;
      }
      *v7++ = v13;
      if (v4 >= v1)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_35:
  unint64_t v26 = v2[3];
  if (v26 >= 2)
  {
    unint64_t v27 = v26 >> 1;
    BOOL v14 = __OFSUB__(v27, v6);
    uint64_t v28 = v27 - v6;
    if (v14) {
      goto LABEL_48;
    }
    void v2[2] = v28;
  }
  return (uint64_t)v2;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  if (*(void *)(result + 16))
  {
    unint64_t v2 = *(void *)(result + 16);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v31 = v1;
    uint64_t v6 = (uint64_t)(v1 + 4);
    unint64_t v27 = v2;
    unint64_t v7 = result + 72;
    while (1)
    {
      uint64_t v8 = *(void **)(v7 - 40);
      uint64_t v9 = *(void *)(v7 - 32);
      uint64_t v10 = *(void *)(v7 + 16);
      int v11 = *(_DWORD *)(v7 + 44);
      uint64_t v12 = *(void *)(v7 + 48);
      uint64_t v13 = *(unsigned char *)(v7 + 56);
      uint64_t v38 = *(void **)(v7 - 16);
      uint64_t v39 = *(void **)(v7 - 24);
      uint64_t v36 = *(void *)v7;
      uint64_t v37 = *(void *)(v7 - 8);
      uint64_t v42 = *(void *)(v7 + 24);
      uint64_t v35 = *(void *)(v7 + 32);
      unint64_t v34 = *(unsigned char *)(v7 + 40);
      uint64_t v40 = *(void *)(v7 + 64);
      uint64_t v41 = v12;
      unint64_t v32 = v10;
      unint64_t v33 = *(void *)(v7 + 8);
      if (v4)
      {
        BOOL v14 = v3;
        outlined copy of _ShapeStyle_Pack.Fill(v8, v9, *(void **)(v7 - 24), *(void **)(v7 - 16), *(void *)(v7 - 8), *(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(unsigned char *)(v7 + 40));
        outlined copy of GraphicsBlendMode?(v12, v13);
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v3 = v14;
        uint64_t v15 = v13;
        goto LABEL_20;
      }
      uint64_t v30 = *(unsigned char *)(v7 + 56);
      unint64_t v16 = v31[3];
      if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_29;
      }
      uint64_t v28 = *(void *)(v7 - 32);
      uint64_t v29 = *(void **)(v7 - 40);
      int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: _ShapeStyle_Pack.Style)>();
      uint64_t v19 = (void *)swift_allocObject();
      int64_t v20 = (uint64_t)(_swift_stdlib_malloc_size(v19) - 32) / 120;
      void v19[2] = v18;
      void v19[3] = 2 * v20;
      uint64_t v21 = v31[3] >> 1;
      uint64_t v6 = (uint64_t)&v19[15 * v21 + 4];
      uint64_t v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v21;
      if (!v31[2])
      {
        uint64_t v8 = v29;
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        uint64_t v15 = v30;
        outlined copy of GraphicsBlendMode?(v41, v30);
        swift_bridgeObjectRetain();
        uint64_t v9 = v28;
        uint64_t result = swift_release();
        unint64_t v31 = v19;
        uint64_t v3 = v27;
        goto LABEL_20;
      }
      if (v19 < v31 || v19 + 4 >= &v31[15 * v21 + 4])
      {
        uint64_t v9 = v28;
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        outlined copy of GraphicsBlendMode?(v41, v30);
      }
      else
      {
        outlined copy of _ShapeStyle_Pack.Fill(v29, v28, v39, v38, v37, v36, v33, v10, v42, v35, v34);
        outlined copy of GraphicsBlendMode?(v41, v30);
        uint64_t v9 = v28;
        if (v19 == v31) {
          goto LABEL_19;
        }
      }
      memmove(v19 + 4, v31 + 4, 120 * v21);
LABEL_19:
      swift_bridgeObjectRetain();
      _OWORD v31[2] = 0;
      uint64_t result = swift_release();
      unint64_t v31 = v19;
      uint64_t v3 = v27;
      uint64_t v8 = v29;
      uint64_t v15 = v30;
LABEL_20:
      unint64_t v23 = __OFSUB__(v4--, 1);
      if (v23)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        return result;
      }
      *(void *)uint64_t v6 = v5;
      *(void *)(v6 + 8) = v8;
      *(void *)(v6 + 16) = v9;
      *(void *)(v6 + 24) = v39;
      *(void *)(v6 + 32) = v38;
      *(void *)(v6 + 40) = v37;
      *(void *)(v6 + 48) = v36;
      *(void *)(v6 + 56) = v33;
      *(void *)(v6 + 64) = v32;
      *(void *)(v6 + 72) = v42;
      *(void *)(v6 + 80) = v35;
      *(unsigned char *)(v6 + 88) = v34;
      *(_DWORD *)(v6 + 92) = v11;
      *(void *)(v6 + 96) = v41;
      *(unsigned char *)(v6 + 104) = v15;
      *(void *)(v6 + 112) = v40;
      v6 += 120;
      v7 += 112;
      if (v3 == ++v5)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v1 = v31;
        goto LABEL_24;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_24:
  uint64_t v24 = v1[3];
  if (v24 >= 2)
  {
    uint64_t v25 = v24 >> 1;
    unint64_t v23 = __OFSUB__(v25, v4);
    unint64_t v26 = v25 - v4;
    if (v23) {
      goto LABEL_30;
    }
    void v1[2] = v26;
  }
  return (uint64_t)v1;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v64 = v2;
  uint64_t v70 = *(void (***)(char *, uint64_t, uint64_t))(v2 - 8);
  MEMORY[0x270FA5388](v2);
  float v69 = (char *)&v61 - v3;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v68 = (char *)&v61 - v5;
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence.Iterator, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence.Iterator);
  uint64_t v67 = v6 - 8;
  MEMORY[0x270FA5388](v6 - 8);
  float v66 = (char *)&v61 - v7;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v61 - v14;
  uint64_t v65 = type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator(0) - 8;
  MEMORY[0x270FA5388](v65);
  int64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void **)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  char v20 = *(unsigned char *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 32);
  LODWORD(v62) = *(_DWORD *)(a1 + 40);
  uint64_t v23 = a1 + *(int *)(type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns(0) + 24);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  unint64_t v63 = (uint64_t *)v15;
  v24(v15, v23, v9);
  *(void *)int64_t v17 = v18;
  *((void *)v17 + 1) = v19;
  v17[16] = v20;
  *((void *)v17 + 3) = v21;
  *((void *)v17 + 4) = v22;
  *((_DWORD *)v17 + 10) = v62;
  v24(v12, (uint64_t)v15, v9);
  outlined copy of Text.Layout.Line.Line(v18, v19, v20);
  uint64_t v25 = v69;
  RangeSet.ranges.getter();
  unint64_t v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  unint64_t v27 = v12;
  uint64_t v28 = v64;
  v26(v27, v9);
  uint64_t v29 = v70;
  uint64_t v30 = (uint64_t)v68;
  v70[4](v68, (uint64_t)v25, v28);
  unint64_t v31 = v66;
  v29[2](&v66[*(int *)(v67 + 56)], v30, v28);
  *unint64_t v31 = 0;
  v31[1] = 0;
  v26((char *)v63, v9);
  outlined destroy of RangeSet<Int><>.IndexSequence(v30);
  unint64_t v32 = (uint64_t *)&v17[*(int *)(v65 + 28)];
  outlined init with take of RangeSet<Int><>.IndexSequence.Iterator((uint64_t)v31, (uint64_t)v32);
  uint64_t v33 = *v32;
  uint64_t v34 = RangeSet.Ranges.count.getter();
  uint64_t v35 = MEMORY[0x263F8EE78];
  if (v33 < v34)
  {
    uint64_t v65 = MEMORY[0x263F8EE78];
    uint64_t v35 = v32[1];
    uint64_t v36 = *(char **)v17;
    uint64_t v67 = *((void *)v17 + 1);
    LODWORD(v68) = v17[16];
    uint64_t v37 = *((void *)v17 + 3);
    uint64_t v38 = *((void *)v17 + 4);
    unint64_t v62 = v17;
    LODWORD(v66) = *((_DWORD *)v17 + 10);
    RangeSet.Ranges.subscript.getter();
    int64_t v17 = (char *)(v71 + v35);
    if (!__OFADD__(v71, v35))
    {
      uint64_t v39 = 0;
      uint64_t v40 = MEMORY[0x263F8EE78] + 32;
      float v69 = v36;
      unint64_t v63 = v32;
      do
      {
        BOOL v41 = __OFADD__(v35++, 1);
        if (v41)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
        RangeSet.Ranges.subscript.getter();
        if (__OFSUB__(v72, v71)) {
          goto LABEL_36;
        }
        if (v35 >= v72 - v71)
        {
          uint64_t v35 = 0;
          *unint64_t v32 = ++v33;
        }
        uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))v17;
        if (v68)
        {
          uint64_t v42 = v33;
          uint64_t v43 = v67;
          outlined copy of Text.Layout.Line.Line(v36, v67, 1);
          uint64_t v44 = (char *)(id)_NSTextLineFragmentGetCTLine(v36);
          if (!v44) {
            goto LABEL_40;
          }
          unint64_t v45 = v44;
          outlined consume of Text.Layout.Line.Line(v36, v43, 1);
          uint64_t v46 = 0;
          if (v39) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v42 = v33;
          uint64_t v47 = v67;
          outlined copy of Text.Layout.Line.Line(v36, v67, 0);
          outlined copy of Text.Layout.Line.Line(v36, v47, 0);

          swift_release();
          unint64_t v45 = v36;
          uint64_t v46 = v47;
          if (v39)
          {
            unint64_t v45 = v69;
            uint64_t v46 = v47;
            goto LABEL_24;
          }
        }
        uint64_t v48 = (void *)v65;
        unint64_t v49 = *(void *)(v65 + 24);
        if ((uint64_t)((v49 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_38;
        }
        int64_t v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
        if (v50 <= 1) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = v50;
        }
        type metadata accessor for EmptyCollection<Character>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Layout.Run>, (uint64_t)&type metadata for Text.Layout.Run, MEMORY[0x263F8E0F8]);
        int64_t v52 = (void *)swift_allocObject();
        uint64_t v53 = (uint64_t)(_swift_stdlib_malloc_size(v52) - 32) / 48;
        _DWORD v52[2] = v51;
        v52[3] = 2 * v53;
        unint64_t v54 = (unint64_t)(v52 + 4);
        uint64_t v55 = v48[3] >> 1;
        if (v48[2])
        {
          unint64_t v56 = v48 + 4;
          if (v52 != v48 || v54 >= (unint64_t)v56 + 48 * v55) {
            memmove(v52 + 4, v56, 48 * v55);
          }
          v48[2] = 0;
        }
        uint64_t v40 = v54 + 48 * v55;
        uint64_t v39 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
        swift_release();
        uint64_t v65 = (uint64_t)v52;
        unint64_t v32 = v63;
LABEL_24:
        BOOL v41 = __OFSUB__(v39--, 1);
        if (v41) {
          goto LABEL_37;
        }
        float v57 = v70;
        *(void *)uint64_t v40 = v45;
        *(void *)(v40 + 8) = v57;
        *(void *)(v40 + 16) = v37;
        *(void *)(v40 + 24) = v38;
        *(_DWORD *)(v40 + 32) = v66;
        *(void *)(v40 + 40) = v46;
        if (v42 >= RangeSet.Ranges.count.getter())
        {
          v32[1] = v35;
          int64_t v17 = v62;
          uint64_t v35 = v65;
          goto LABEL_31;
        }
        uint64_t v33 = v42;
        v40 += 48;
        RangeSet.Ranges.subscript.getter();
        int64_t v17 = (char *)(v71 + v35);
        uint64_t v36 = v69;
      }
      while (!__OFADD__(v71, v35));
    }
    __break(1u);
  }
  uint64_t v39 = 0;
LABEL_31:
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v17, type metadata accessor for Text.Effect.RenderSegmentation.StaticRuns.Iterator);
  unint64_t v58 = *(void *)(v35 + 24);
  if (v58 >= 2)
  {
    unint64_t v59 = v58 >> 1;
    BOOL v41 = __OFSUB__(v59, v39);
    uint64_t v60 = v59 - v39;
    if (v41) {
      goto LABEL_39;
    }
    *(void *)(v35 + 16) = v60;
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v45 - v3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v11, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  uint64_t v46 = v11;
  TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v4);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  void v45[2] = v6 + 48;
  uint64_t v48 = v13;
  int v14 = v13(v4, 1, v5);
  uint64_t v15 = (void *)MEMORY[0x263F8EE78];
  if (v14 != 1)
  {
    uint64_t v16 = 0;
    uint64_t v47 = (v12 + 32) & ~v12;
    uint64_t v23 = MEMORY[0x263F8EE78] + v47;
    uint64_t v49 = v5;
    uint64_t v50 = v6;
    uint64_t v24 = v6 + 32;
    uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v45[0] = v4;
    v45[1] = v12 | 7;
    unint64_t v26 = (void *)MEMORY[0x263F8EE78];
    uint64_t v17 = (uint64_t)v46;
    while (1)
    {
      uint64_t v29 = v5;
      uint64_t v30 = v24;
      unint64_t v31 = v25;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v25)(v8, v4, v29);
      if (v16)
      {
        uint64_t v15 = v26;
        BOOL v21 = __OFSUB__(v16--, 1);
        if (v21) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v32 = v26[3];
        if ((uint64_t)((v32 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
        if (v33 <= 1) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = v33;
        }
        _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
        uint64_t v35 = *(void *)(v50 + 72);
        uint64_t v36 = v47;
        uint64_t v15 = (void *)swift_allocObject();
        uint64_t result = _swift_stdlib_malloc_size(v15);
        if (!v35) {
          goto LABEL_34;
        }
        uint64_t v37 = result - v36;
        if (result - v36 == 0x8000000000000000 && v35 == -1) {
          goto LABEL_35;
        }
        uint64_t v39 = v37 / v35;
        _OWORD v15[2] = v34;
        v15[3] = 2 * (v37 / v35);
        uint64_t v40 = (char *)v15 + v36;
        uint64_t v41 = v26[3] >> 1;
        uint64_t v42 = v41 * v35;
        if (v26[2])
        {
          if (v15 < v26 || v40 >= (char *)v26 + v47 + v42)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v15 != v26)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          void v26[2] = 0;
        }
        uint64_t v23 = (uint64_t)&v40[v42];
        uint64_t v44 = (v39 & 0x7FFFFFFFFFFFFFFFLL) - v41;
        uint64_t result = swift_release();
        uint64_t v4 = (char *)v45[0];
        uint64_t v17 = (uint64_t)v46;
        BOOL v21 = __OFSUB__(v44, 1);
        uint64_t v16 = v44 - 1;
        if (v21)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }
      uint64_t v27 = v49;
      v31(v23, v8, v49);
      v23 += *(void *)(v50 + 72);
      TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v4);
      int v28 = v48(v4, 1, v27);
      uint64_t v25 = v31;
      uint64_t v24 = v30;
      uint64_t v5 = v27;
      unint64_t v26 = v15;
      if (v28 == 1) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)v46;
LABEL_3:
  outlined destroy of AlignedTimelineSchedule.Entries(v17, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  uint64_t result = _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v4, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  unint64_t v19 = v15[3];
  if (v19 >= 2)
  {
    unint64_t v20 = v19 >> 1;
    BOOL v21 = __OFSUB__(v20, v16);
    uint64_t v22 = v20 - v16;
    if (v21) {
      goto LABEL_36;
    }
    _OWORD v15[2] = v22;
  }
  return (uint64_t)v15;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void v58[2];
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (**v63)(uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  char *v69;
  char *v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;

  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v65 = (uint64_t)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v58 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v58 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v64 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v70 = (char *)v58 - v14;
  uint64_t v15 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = *(unsigned __int8 *)(v11 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v18, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
  unint64_t v20 = *(int *)(v16 + 32);
  float v66 = v18;
  BOOL v21 = (uint64_t)&v18[v20];
  outlined init with copy of Date?(v21, (uint64_t)v6);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  unint64_t v59 = v6;
  uint64_t v23 = v6;
  uint64_t v24 = v10;
  uint64_t v71 = v22;
  uint64_t v25 = v22((uint64_t)v23, 1, v10);
  unint64_t v26 = (char *)MEMORY[0x263F8EE78];
  if (v25 == 1)
  {
    uint64_t v72 = 0;
    uint64_t v27 = (uint64_t)v59;
LABEL_29:
    _s10Foundation6LocaleVSgWOhTm_0(v27, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v24);
LABEL_31:
    unint64_t v54 = v72;
    outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v66, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
    uint64_t result = _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    uint64_t v55 = *((void *)v26 + 3);
    if (v55 < 2) {
      return (uint64_t)v26;
    }
    unint64_t v56 = v55 >> 1;
    int64_t v52 = __OFSUB__(v56, v54);
    float v57 = v56 - v54;
    if (!v52)
    {
      *((void *)v26 + 2) = v57;
      return (uint64_t)v26;
    }
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v60 = (v19 + 32) & ~v19;
    uint64_t v61 = v21;
    int v28 = MEMORY[0x263F8EE78] + v60;
    uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
    unint64_t v62 = v11 + 48;
    unint64_t v63 = (void (**)(uint64_t, uint64_t))(v11 + 8);
    v58[0] = v11 + 32;
    v58[1] = v19 | 7;
    unint64_t v68 = v29;
    float v69 = (char *)MEMORY[0x263F8EE78];
    uint64_t v27 = (uint64_t)v59;
    uint64_t v67 = v11;
    while (1)
    {
      uint64_t v30 = (uint64_t)v9;
      unint64_t v31 = v24;
      unint64_t v32 = (uint64_t)v64;
      int64_t v33 = v27;
      v29((uint64_t)v64, (char *)v27, v31);
      uint64_t v34 = v65;
      outlined init with copy of Date?(v21, v65);
      TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v32);
      uint64_t v35 = v32;
      uint64_t v24 = v31;
      uint64_t v9 = (char *)v30;
      uint64_t v36 = v71;
      (*v63)(v35, v24);
      outlined init with take of Date?(v34, v30);
      if (v36(v30, 1, v24) == 1)
      {
        unint64_t v26 = v69;
        goto LABEL_31;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v70, v30, v24);
      uint64_t v38 = v72;
      if (v72)
      {
        unint64_t v26 = v69;
        BOOL v21 = v61;
      }
      else
      {
        uint64_t v39 = v69;
        uint64_t v40 = *((void *)v69 + 3);
        if ((uint64_t)((v40 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_36;
        }
        uint64_t v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
        if (v41 <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v41;
        }
        _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
        uint64_t v43 = *(void *)(v67 + 72);
        uint64_t v44 = v60;
        unint64_t v26 = (char *)swift_allocObject();
        uint64_t result = _swift_stdlib_malloc_size(v26);
        if (!v43) {
          goto LABEL_37;
        }
        unint64_t v45 = result - v44;
        if (result - v44 == 0x8000000000000000 && v43 == -1) {
          goto LABEL_38;
        }
        uint64_t v47 = v45 / v43;
        *((void *)v26 + 2) = v42;
        *((void *)v26 + 3) = 2 * (v45 / v43);
        uint64_t v48 = &v26[v44];
        uint64_t v49 = *((void *)v39 + 3) >> 1;
        uint64_t v50 = v49 * v43;
        if (*((void *)v39 + 2))
        {
          if (v26 < v39 || v48 >= &v39[v60 + v50])
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v26 != v39)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *((void *)v39 + 2) = 0;
        }
        int v28 = (uint64_t)&v48[v50];
        uint64_t v38 = (v47 & 0x7FFFFFFFFFFFFFFFLL) - v49;
        uint64_t result = swift_release();
        uint64_t v9 = (char *)v30;
        int64_t v33 = (uint64_t)v59;
        BOOL v21 = v61;
      }
      int64_t v52 = __OFSUB__(v38, 1);
      uint64_t v72 = v38 - 1;
      uint64_t v11 = v67;
      if (v52) {
        break;
      }
      v68(v28, v70, v24);
      v28 += *(void *)(v11 + 72);
      outlined init with copy of Date?(v21, v33);
      uint64_t v53 = v71(v33, 1, v24);
      uint64_t v27 = v33;
      uint64_t v29 = v68;
      float v69 = v26;
      if (v53 == 1) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void, void, void);
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void (**v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t result;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  void *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void v77[2];
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (**v81)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v82)(char *, uint64_t);
  void (**v83)(char *, uint64_t);
  unsigned int v84;
  void (**v85)(char *, uint64_t);
  void (**v86)(char *, uint64_t);
  unsigned int v87;
  void (**v88)(char *, void, uint64_t);
  void (**v89)(char *, void, uint64_t);
  void (**v90)(char *, void, uint64_t);
  unsigned int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void (*v103)(void, void, void);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);

  uint64_t v94 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v111 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  unint64_t v101 = (char *)v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v100 = type metadata accessor for Calendar.RepeatedTimePolicy();
  unint64_t v85 = *(void (***)(char *, uint64_t))(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v99 = (char *)v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v4 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  Swift::String v97 = (char *)v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v96 = type metadata accessor for Calendar();
  uint64_t v82 = *(void (***)(char *, uint64_t))(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v7 = (char *)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v95 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v77 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v77 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v79 = (char *)v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  BOOL v21 = (char *)v77 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v107 = (char *)v77 - v23;
  uint64_t v24 = type metadata accessor for EveryMinuteTimelineSchedule.Entries(0);
  MEMORY[0x270FA5388](v24 - 8);
  unint64_t v26 = (char *)v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(unsigned __int8 *)(v17 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v26, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  uint64_t v109 = v26;
  outlined init with copy of Date?((uint64_t)v26, (uint64_t)v12);
  int v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v102 = v12;
  uint64_t v112 = v28;
  uint64_t v29 = v28((uint64_t)v12, 1, v16);
  uint64_t v30 = MEMORY[0x263F8EE78];
  if (v29 != 1)
  {
    uint64_t v108 = 0;
    uint64_t v78 = (v27 + 32) & ~v27;
    uint64_t v110 = MEMORY[0x263F8EE78] + v78;
    int64_t v33 = *(void (**)(void, void, void))(v17 + 32);
    uint64_t v91 = *MEMORY[0x263F07780];
    unint64_t v90 = (void (**)(char *, void, uint64_t))(v4 + 104);
    unint64_t v89 = (void (**)(char *, void, uint64_t))(v85 + 13);
    uint64_t v88 = (void (**)(char *, void, uint64_t))(v111 + 104);
    uint64_t v87 = *MEMORY[0x263F07800];
    Swift::String v86 = (void (**)(char *, uint64_t))(v111 + 8);
    ++v85;
    uint64_t v84 = *MEMORY[0x263F077E0];
    uint64_t v83 = (void (**)(char *, uint64_t))(v4 + 8);
    ++v82;
    uint64_t v81 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v77[1] = v27 | 7;
    uint64_t v34 = (void *)MEMORY[0x263F8EE78];
    unint64_t v31 = (uint64_t)v102;
    int v92 = v17;
    uint64_t v93 = v15;
    uint64_t v105 = v17 + 48;
    uint64_t v106 = v21;
    uint64_t v103 = v33;
    uint64_t v104 = v17 + 32;
    uint64_t v80 = v16;
    while (1)
    {
      uint64_t v111 = (unint64_t)v34;
      v33(v21, v31, v16);
      static Calendar.current.getter();
      uint64_t v35 = v7;
      if (one-time initialization token for zeroSecondComponents != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for DateComponents();
      __swift_project_value_buffer(v36, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
      uint64_t v38 = v97;
      uint64_t v37 = v98;
      (*v90)(v97, v91, v98);
      uint64_t v40 = v99;
      uint64_t v39 = v100;
      (*v89)(v99, v87, v100);
      uint64_t v41 = v101;
      uint64_t v42 = v94;
      (*v88)(v101, v84, v94);
      uint64_t v43 = (uint64_t)v95;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*v86)(v41, v42);
      (*v85)(v40, v39);
      (*v83)(v38, v37);
      (*v82)(v35, v96);
      uint64_t v16 = v80;
      uint64_t v44 = v112(v43, 1, v80);
      unint64_t v45 = v81;
      uint64_t v46 = v35;
      if (v44 == 1)
      {
        uint64_t v47 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        _s10Foundation6LocaleVSgWOhTm_0(v43, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
        uint64_t v48 = (uint64_t)v109;
        _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v109, &lazy cache variable for type metadata for Date?, v47);
        uint64_t v49 = *v45;
        (*v45)(v48, 1, 1, v16);
        uint64_t v15 = v93;
        int64_t v33 = v103;
      }
      else
      {
        uint64_t v50 = v79;
        int64_t v33 = v103;
        v103(v79, v43, v16);
        uint64_t v51 = (uint64_t)v109;
        _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v109, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
        v33(v51, v50, v16);
        uint64_t v49 = *v45;
        (*v45)(v51, 0, 1, v16);
        uint64_t v15 = v93;
      }
      BOOL v21 = v106;
      v33(v15, v106, v16);
      v49((uint64_t)v15, 0, 1, v16);
      int64_t v52 = v112((uint64_t)v15, 1, v16);
      unint64_t v32 = v92;
      if (v52 == 1)
      {
        uint64_t v30 = v111;
        goto LABEL_34;
      }
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v33)(v107, v15, v16);
      if (v108)
      {
        unint64_t v54 = (void *)v111;
        uint64_t v55 = v108 - 1;
        if (__OFSUB__(v108, 1)) {
          goto LABEL_38;
        }
        goto LABEL_31;
      }
      unint64_t v56 = *(void *)(v111 + 24);
      if ((uint64_t)((v56 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_39;
      }
      float v57 = v56 & 0xFFFFFFFFFFFFFFFELL;
      if (v57 <= 1) {
        unint64_t v58 = 1;
      }
      else {
        unint64_t v58 = v57;
      }
      _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
      unint64_t v59 = *(void *)(v32 + 72);
      uint64_t v60 = v78;
      unint64_t v54 = (void *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v54);
      if (!v59) {
        goto LABEL_40;
      }
      uint64_t v61 = result - v60;
      if (result - v60 == 0x8000000000000000 && v59 == -1) {
        goto LABEL_41;
      }
      unint64_t v62 = v61 / v59;
      _OWORD v54[2] = v58;
      v54[3] = 2 * (v61 / v59);
      unint64_t v63 = (char *)v54 + v60;
      uint64_t v64 = v111;
      uint64_t v65 = *(void *)(v111 + 24) >> 1;
      float v66 = v65 * v59;
      if (*(void *)(v111 + 16)) {
        break;
      }
LABEL_30:
      uint64_t v110 = (uint64_t)&v63[v66];
      uint64_t result = swift_release();
      uint64_t v67 = (v62 & 0x7FFFFFFFFFFFFFFFLL) - v65;
      uint64_t v46 = v35;
      BOOL v21 = v106;
      int64_t v33 = v103;
      unint64_t v68 = __OFSUB__(v67, 1);
      uint64_t v55 = v67 - 1;
      if (v68)
      {
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
LABEL_31:
      uint64_t v108 = v55;
      float v69 = v54;
      uint64_t v70 = v15;
      uint64_t v71 = v46;
      uint64_t v72 = v110;
      v33(v110, v107, v16);
      uint64_t v110 = v72 + *(void *)(v32 + 72);
      uint64_t v7 = v71;
      uint64_t v15 = v70;
      uint64_t v30 = (uint64_t)v69;
      unint64_t v31 = (uint64_t)v102;
      outlined init with copy of Date?((uint64_t)v109, (uint64_t)v102);
      uint64_t v73 = v112(v31, 1, v16);
      uint64_t v34 = v69;
      if (v73 == 1) {
        goto LABEL_3;
      }
    }
    if ((unint64_t)v54 < v111 || (unint64_t)v63 >= v111 + v60 + v66)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v54 == (void *)v111)
      {
LABEL_29:
        *(void *)(v64 + 16) = 0;
        goto LABEL_30;
      }
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v64 = v111;
    goto LABEL_29;
  }
  uint64_t v108 = 0;
  unint64_t v31 = (uint64_t)v102;
  unint64_t v32 = v17;
LABEL_3:
  _s10Foundation6LocaleVSgWOhTm_0(v31, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v15, 1, 1, v16);
LABEL_34:
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v109, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v15, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  unint64_t v74 = *(void *)(v30 + 24);
  uint64_t result = v30;
  if (v74 >= 2)
  {
    unint64_t v75 = v74 >> 1;
    unint64_t v68 = __OFSUB__(v75, v108);
    uint64_t v76 = v75 - v108;
    if (v68) {
      goto LABEL_42;
    }
    *(void *)(v30 + 16) = v76;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t (**v18)(char *, char *, uint64_t);
  void *v19;
  BOOL v20;
  uint64_t (*v21)(char *, char *, uint64_t);
  uint64_t result;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (**v44)(char *, uint64_t, uint64_t);
  void (**v45)(char *, void, uint64_t, uint64_t);
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;

  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v39 - v3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  uint64_t v43 = (v12 + 32) & ~v12;
  int v14 = MEMORY[0x263F8EE78] + v43;
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v11, type metadata accessor for PeriodicTimelineSchedule.Entries);
  uint64_t v15 = 0;
  uint64_t v16 = v8;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v47 = v6 + 16;
  uint64_t v48 = v11;
  unint64_t v45 = (void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v17;
  uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v18 = (uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v41 = v6;
  uint64_t v42 = v12 | 7;
  uint64_t v40 = v16;
  v17(v4, v11, v5);
  while (1)
  {
    (*v45)(v4, 0, 1, v5);
    static Date.+= infix(_:_:)();
    if ((*v44)(v4, 1, v5) == 1) {
      goto LABEL_28;
    }
    BOOL v21 = *v18;
    uint64_t result = (*v18)(v16, v4, v5);
    if (v15)
    {
      unint64_t v19 = v13;
      unint64_t v20 = __OFSUB__(v15--, 1);
      if (v20) {
        break;
      }
      goto LABEL_3;
    }
    uint64_t v23 = v13[3];
    if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (v24 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v24;
    }
    _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
    unint64_t v26 = *(void *)(v6 + 72);
    uint64_t v27 = v43;
    unint64_t v19 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v19);
    if (!v26) {
      goto LABEL_33;
    }
    int v28 = result - v27;
    if (result - v27 == 0x8000000000000000 && v26 == -1) {
      goto LABEL_34;
    }
    uint64_t v30 = v28 / v26;
    void v19[2] = v25;
    void v19[3] = 2 * (v28 / v26);
    unint64_t v31 = (char *)v19 + v27;
    unint64_t v32 = v13[3] >> 1;
    int64_t v33 = v32 * v26;
    if (v13[2])
    {
      if (v19 < v13 || v31 >= (char *)v13 + v43 + v33)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v19 != v13)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      void v13[2] = 0;
    }
    int v14 = (uint64_t)&v31[v33];
    uint64_t v35 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
    swift_release();
    uint64_t v16 = v40;
    uint64_t v6 = v41;
    unint64_t v20 = __OFSUB__(v35, 1);
    uint64_t v15 = v35 - 1;
    if (v20) {
      break;
    }
LABEL_3:
    v21((char *)v14, v16, v5);
    v14 += *(void *)(v6 + 72);
    uint64_t v13 = v19;
    v46(v4, v48, v5);
  }
  __break(1u);
LABEL_28:
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v48, type metadata accessor for PeriodicTimelineSchedule.Entries);
  uint64_t result = _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v4, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v36 = v13[3];
  if (v36 < 2) {
    return (uint64_t)v13;
  }
  uint64_t v37 = v36 >> 1;
  unint64_t v20 = __OFSUB__(v37, v15);
  uint64_t v38 = v37 - v15;
  if (!v20)
  {
    void v13[2] = v38;
    return (uint64_t)v13;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  void *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  void (**v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v44)(uint64_t);
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  void (*v47)(uint64_t, char *, uint64_t);
  uint64_t v48;
  int v49;
  uint64_t result;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (**v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v78)(char *, uint64_t);
  void (**v79)(char *, uint64_t);
  unsigned int v80;
  void (**v81)(char *, uint64_t);
  void (**v82)(char *, uint64_t);
  void (**v83)(char *, void, uint64_t);
  void (**v84)(char *, void, uint64_t);
  unsigned int v85;
  void (**v86)(char *, void, uint64_t);
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;

  uint64_t v98 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v2 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  Swift::String v97 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v96 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v4 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v95 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v6 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v93 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v92 = type metadata accessor for Calendar();
  uint64_t v108 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v91 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v104 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v70 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v106 = (char *)&v70 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v72 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v105 = (char *)&v70 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v102 = (char *)&v70 - v22;
  unint64_t v90 = type metadata accessor for AlignedTimelineSchedule.Entries();
  MEMORY[0x270FA5388](v90);
  uint64_t v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(unsigned __int8 *)(v17 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
  outlined init with copy of Date?((uint64_t)v24, (uint64_t)v13);
  uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  unint64_t v26 = v71(v13, 1, v16);
  uint64_t v27 = (void *)MEMORY[0x263F8EE78];
  if (v26 != 1)
  {
    uint64_t v103 = 0;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v73 = (v25 + 32) & ~v25;
    uint64_t v107 = MEMORY[0x263F8EE78] + v73;
    uint64_t v87 = *MEMORY[0x263F07780];
    Swift::String v86 = (void (**)(char *, void, uint64_t))(v6 + 104);
    unint64_t v85 = *MEMORY[0x263F07800];
    uint64_t v84 = (void (**)(char *, void, uint64_t))(v4 + 104);
    uint64_t v83 = (void (**)(char *, void, uint64_t))(v2 + 104);
    uint64_t v82 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v81 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v80 = *MEMORY[0x263F077E0];
    uint64_t v79 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v78 = (void (**)(char *, uint64_t))(v108 + 8);
    uint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v70 = v25 | 7;
    uint64_t v30 = v29;
    unint64_t v31 = (void *)MEMORY[0x263F8EE78];
    int v28 = (uint64_t)v24;
    unint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71;
    unint64_t v74 = v13;
    uint64_t v88 = v16;
    unint64_t v89 = v17;
    uint64_t v99 = v29;
    unint64_t v100 = v17 + 48;
    uint64_t v76 = v17 + 32;
    unint64_t v75 = v24;
    while (1)
    {
      uint64_t v108 = (unint64_t)v31;
      v30(v105, v13, v16);
      int64_t v33 = v91;
      static Calendar.current.getter();
      unint64_t v101 = v28 + *(int *)(v90 + 24);
      uint64_t v35 = v93;
      uint64_t v34 = v94;
      uint64_t v36 = (uint64_t)v104;
      (*v86)(v93, v87, v94);
      uint64_t v38 = v95;
      uint64_t v37 = v96;
      (*v84)(v95, v85, v96);
      uint64_t v40 = v97;
      uint64_t v39 = v98;
      (*v83)(v97, v80, v98);
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*v82)(v40, v39);
      (*v81)(v38, v37);
      uint64_t v41 = v36;
      uint64_t v16 = v88;
      (*v79)(v35, v34);
      (*v78)(v33, v92);
      uint64_t v42 = v32(v41, 1, v16);
      uint64_t v43 = v77;
      if (v42 == 1)
      {
        uint64_t v44 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
        _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v104, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
        int v28 = (uint64_t)v75;
        _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v75, &lazy cache variable for type metadata for Date?, v44);
        unint64_t v45 = *v43;
        (*v43)(v28, 1, 1, v16);
        uint64_t v30 = v99;
      }
      else
      {
        uint64_t v46 = v72;
        uint64_t v47 = (void (*)(uint64_t, char *, uint64_t))v99;
        v99(v72, v104, v16);
        int v28 = (uint64_t)v75;
        _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v75, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
        v47(v28, v46, v16);
        unint64_t v45 = *v43;
        (*v43)(v28, 0, 1, v16);
        uint64_t v30 = (void (*)(char *, char *, uint64_t))v47;
      }
      uint64_t v48 = (uint64_t)v106;
      v30(v106, v105, v16);
      v45(v48, 0, 1, v16);
      uint64_t v49 = v32(v48, 1, v16);
      uint64_t v17 = v89;
      if (v49 == 1)
      {
        uint64_t v27 = (void *)v108;
        goto LABEL_31;
      }
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v30)(v102, v106, v16);
      if (v103)
      {
        uint64_t v27 = (void *)v108;
        uint64_t v13 = v74;
        uint64_t v51 = v103 - 1;
        if (__OFSUB__(v103, 1)) {
          goto LABEL_35;
        }
        goto LABEL_28;
      }
      int64_t v52 = *(void *)(v108 + 24);
      if ((uint64_t)((v52 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_36;
      }
      uint64_t v53 = v52 & 0xFFFFFFFFFFFFFFFELL;
      if (v53 <= 1) {
        unint64_t v54 = 1;
      }
      else {
        unint64_t v54 = v53;
      }
      _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
      uint64_t v55 = *(void *)(v17 + 72);
      unint64_t v56 = v73;
      uint64_t v27 = (void *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v27);
      if (!v55) {
        goto LABEL_37;
      }
      float v57 = result - v56;
      if (result - v56 == 0x8000000000000000 && v55 == -1) {
        goto LABEL_38;
      }
      unint64_t v58 = v57 / v55;
      v27[2] = v54;
      v27[3] = 2 * (v57 / v55);
      unint64_t v59 = (char *)v27 + v56;
      uint64_t v60 = v108;
      uint64_t v61 = *(void *)(v108 + 24) >> 1;
      unint64_t v62 = v61 * v55;
      if (*(void *)(v108 + 16)) {
        break;
      }
LABEL_27:
      uint64_t v107 = (uint64_t)&v59[v62];
      uint64_t result = swift_release();
      unint64_t v63 = (v58 & 0x7FFFFFFFFFFFFFFFLL) - v61;
      uint64_t v13 = v74;
      uint64_t v30 = v99;
      unint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71;
      uint64_t v64 = __OFSUB__(v63, 1);
      uint64_t v51 = v63 - 1;
      if (v64)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
LABEL_28:
      uint64_t v103 = v51;
      uint64_t v65 = v107;
      v30((char *)v107, v102, v16);
      uint64_t v107 = v65 + *(void *)(v17 + 72);
      outlined init with copy of Date?(v28, (uint64_t)v13);
      float v66 = v32((uint64_t)v13, 1, v16);
      unint64_t v31 = v27;
      if (v66 == 1) {
        goto LABEL_29;
      }
    }
    if ((unint64_t)v27 < v108 || (unint64_t)v59 >= v108 + v73 + v62)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v27 == (void *)v108)
      {
LABEL_26:
        *(void *)(v60 + 16) = 0;
        goto LABEL_27;
      }
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v60 = v108;
    goto LABEL_26;
  }
  uint64_t v103 = 0;
  int v28 = (uint64_t)v24;
LABEL_29:
  _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v106, 1, 1, v16);
LABEL_31:
  outlined destroy of AlignedTimelineSchedule.Entries(v28, (uint64_t (*)(void))type metadata accessor for AlignedTimelineSchedule.Entries);
  uint64_t result = _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v106, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v67 = v27[3];
  if (v67 >= 2)
  {
    unint64_t v68 = v67 >> 1;
    uint64_t v64 = __OFSUB__(v68, v103);
    float v69 = v68 - v103;
    if (v64) {
      goto LABEL_39;
    }
    v27[2] = v69;
  }
  return (uint64_t)v27;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  void *v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void v66[3];
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(uint64_t, void, uint64_t, uint64_t);
  void (**v72)(char *, uint64_t);
  void (**v73)(char *, uint64_t);
  unsigned int v74;
  void (**v75)(char *, uint64_t);
  void (**v76)(char *, uint64_t);
  void (**v77)(char *, void, uint64_t);
  void (**v78)(char *, void, uint64_t);
  unsigned int v79;
  void (**v80)(char *, void, uint64_t);
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;

  unint64_t v90 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v2 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v87 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v86 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v99 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v91 = (char *)v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v96 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v5 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  unint64_t v89 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Calendar();
  uint64_t v7 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  unint64_t v85 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v84 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v66 - v12;
  MEMORY[0x270FA5388](v14);
  unint64_t v100 = (uint64_t)v66 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v95 = (char *)v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v83);
  unint64_t v20 = (char *)v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v21 = *(unsigned __int8 *)(v17 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v20, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  Swift::String v97 = v20;
  outlined init with copy of Date?((uint64_t)v20, (uint64_t)v13);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v23 = v22(v13, 1, v16);
  uint64_t v24 = (void *)MEMORY[0x263F8EE78];
  if (v23 != 1)
  {
    unint64_t v26 = v2;
    uint64_t v25 = 0;
    uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
    uint64_t v67 = (v21 + 32) & ~v21;
    uint64_t v98 = MEMORY[0x263F8EE78] + v67;
    uint64_t v81 = *MEMORY[0x263F07780];
    uint64_t v80 = (void (**)(char *, void, uint64_t))(v5 + 104);
    uint64_t v79 = *MEMORY[0x263F07800];
    uint64_t v78 = (void (**)(char *, void, uint64_t))(v99 + 104);
    uint64_t v77 = (void (**)(char *, void, uint64_t))(v26 + 104);
    uint64_t v76 = (void (**)(char *, uint64_t))(v26 + 8);
    unint64_t v75 = (void (**)(char *, uint64_t))(v99 + 8);
    unint64_t v74 = *MEMORY[0x263F077E0];
    uint64_t v73 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v72 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v71 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56);
    _OWORD v66[2] = v21 | 7;
    int v28 = (void *)MEMORY[0x263F8EE78];
    uint64_t v29 = v27;
    unint64_t v68 = v13;
    uint64_t v82 = v16;
    float v69 = v17;
    int v92 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v22;
    v66[1] = v17 + 32;
    v66[0] = v27;
    uint64_t v70 = v17 + 48;
    while (1)
    {
      uint64_t v99 = (unint64_t)v28;
      uint64_t v93 = v25;
      v29(v100, v13, v16);
      uint64_t v30 = v85;
      static Calendar.current.getter();
      unint64_t v31 = (uint64_t)v97;
      uint64_t v94 = &v97[*(int *)(v83 + 20)];
      unint64_t v32 = v89;
      (*v80)(v89, v81, v96);
      int64_t v33 = v91;
      uint64_t v34 = v86;
      (*v78)(v91, v79, v86);
      uint64_t v35 = v87;
      uint64_t v36 = v90;
      (*v77)(v87, v74, v90);
      uint64_t v37 = (uint64_t)v84;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*v76)(v35, v36);
      uint64_t v38 = v34;
      uint64_t v16 = v82;
      (*v75)(v33, v38);
      uint64_t v39 = v100;
      uint64_t v40 = v92;
      (*v73)(v32, v96);
      (*v72)(v30, v88);
      outlined assign with take of Date?(v37, v31);
      (*v71)(v39, 0, 1, v16);
      if (v40(v39, 1, v16) == 1)
      {
        uint64_t v25 = v93;
        uint64_t v24 = (void *)v99;
        goto LABEL_30;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v95, v100, v16);
      if (v93)
      {
        uint64_t v24 = (void *)v99;
        uint64_t v13 = v68;
        uint64_t v42 = v69;
        uint64_t v25 = v93 - 1;
        if (__OFSUB__(v93, 1)) {
          goto LABEL_34;
        }
        goto LABEL_27;
      }
      uint64_t v43 = *(void *)(v99 + 24);
      uint64_t v44 = v69;
      if ((uint64_t)((v43 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_35;
      }
      unint64_t v45 = v43 & 0xFFFFFFFFFFFFFFFELL;
      if (v45 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v45;
      }
      _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
      uint64_t v47 = v44;
      uint64_t v48 = *(void *)(v44 + 72);
      uint64_t v49 = v67;
      uint64_t v24 = (void *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v24);
      if (!v48) {
        goto LABEL_36;
      }
      uint64_t v50 = result - v49;
      if (result - v49 == 0x8000000000000000 && v48 == -1) {
        goto LABEL_37;
      }
      int64_t v52 = v49;
      uint64_t v53 = v50 / v48;
      void v24[2] = v46;
      v24[3] = 2 * (v50 / v48);
      unint64_t v54 = (char *)v24 + v49;
      uint64_t v55 = v99;
      unint64_t v56 = *(void *)(v99 + 24) >> 1;
      float v57 = v56 * v48;
      uint64_t v40 = v92;
      uint64_t v42 = v47;
      if (*(void *)(v99 + 16)) {
        break;
      }
LABEL_26:
      uint64_t v98 = (uint64_t)&v54[v57];
      unint64_t v58 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v56;
      uint64_t result = swift_release();
      uint64_t v13 = v68;
      uint64_t v29 = (void (*)(uint64_t, char *, uint64_t))v66[0];
      unint64_t v59 = __OFSUB__(v58, 1);
      uint64_t v25 = v58 - 1;
      if (v59)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return result;
      }
LABEL_27:
      uint64_t v60 = v42;
      uint64_t v61 = v98;
      v29(v98, v95, v16);
      uint64_t v98 = v61 + *(void *)(v60 + 72);
      uint64_t v17 = v60;
      outlined init with copy of Date?((uint64_t)v97, (uint64_t)v13);
      unint64_t v62 = v40((uint64_t)v13, 1, v16);
      int v28 = v24;
      if (v62 == 1) {
        goto LABEL_28;
      }
    }
    if ((unint64_t)v24 < v99 || (unint64_t)v54 >= v99 + v52 + v57)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v24 == (void *)v99)
      {
LABEL_25:
        *(void *)(v55 + 16) = 0;
        goto LABEL_26;
      }
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v55 = v99;
    goto LABEL_25;
  }
  uint64_t v25 = 0;
LABEL_28:
  _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v100, 1, 1, v16);
LABEL_30:
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v97, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  uint64_t result = _s10Foundation6LocaleVSgWOhTm_0(v100, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  unint64_t v63 = v24[3];
  if (v63 >= 2)
  {
    uint64_t v64 = v63 >> 1;
    unint64_t v59 = __OFSUB__(v64, v25);
    uint64_t v65 = v64 - v25;
    if (v59) {
      goto LABEL_38;
    }
    void v24[2] = v65;
  }
  return (uint64_t)v24;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  const void *v61;
  Swift::UInt64 v62;
  uint64_t result;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  char *v72;
  char *v73;
  char *v74;
  Swift::UInt64 v75;

  uint64_t v2 = type metadata accessor for FragmentRangeSequence(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v67 - v11;
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v5, type metadata accessor for FragmentRangeSequence);
  outlined init with copy of AlignedTimelineSchedule.Entries((uint64_t)v5, (uint64_t)v12, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v13 = *(int *)(v3 + 32);
  int v14 = &v5[*(int *)(v3 + 28)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v17 = &v12[v7[7]];
  *(void *)uint64_t v17 = v16;
  *((void *)v17 + 1) = v15;
  uint64_t v18 = &v12[v7[8]];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v5[v13];
  unint64_t v19 = v7[9];
  uint64_t v72 = v12;
  unint64_t v20 = &v12[v19];
  *(void *)unint64_t v20 = v16;
  *((void *)v20 + 1) = v15;
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v5, type metadata accessor for FragmentRangeSequence);
  BOOL v21 = v20;
  uint64_t v22 = 0;
  uint64_t v70 = v9;
  uint64_t v71 = (void *)MEMORY[0x263F8EE78];
  uint64_t v23 = (void *)(MEMORY[0x263F8EE78] + 32);
  uint64_t v73 = v20;
  unint64_t v74 = v18;
  while (1)
  {
    uint64_t v24 = *(void *)v21;
    uint64_t v25 = *(void *)v18;
    if (*(void *)v21 >= *(void *)v18)
    {
      if (__OFSUB__(v25, v24)) {
        goto LABEL_57;
      }
      if (v25 != v24 || *((void *)v21 + 1) >= *((void *)v18 + 1))
      {
        outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v72, type metadata accessor for FragmentRangeSequence.Iterator);
        uint64_t result = (uint64_t)v71;
        uint64_t v64 = v71[3];
        if (v64 < 2) {
          return result;
        }
        uint64_t v65 = v64 >> 1;
        uint64_t v48 = __OFSUB__(v65, v22);
        float v66 = v65 - v22;
        if (!v48)
        {
          uint64_t result = (uint64_t)v71;
          v71[2] = v66;
          return result;
        }
        goto LABEL_62;
      }
    }
    outlined init with copy of AlignedTimelineSchedule.Entries((uint64_t)v72, (uint64_t)v9, type metadata accessor for FragmentRangeSequence.Iterator);
    uint64_t v27 = *v9;
    unint64_t v26 = v9[1];
    int v28 = v9[2];
    swift_beginAccess();
    uint64_t v29 = *(void *)(v27 + 48);
    if (!*(void *)(v29 + 16)) {
      goto LABEL_63;
    }
    swift_retain_n();
    swift_retain();
    uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28);
    if ((v31 & 1) == 0) {
      break;
    }
    unint64_t v32 = *(void *)(*(void *)(v29 + 56) + 16 * v30);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v24 & 0x8000000000000000) != 0) {
      goto LABEL_50;
    }
    int64_t v33 = *(void *)(v32 + 16);
    if (v24 >= v33) {
      goto LABEL_51;
    }
    unint64_t v75 = v26;
    uint64_t v34 = v32 + 32;
    uint64_t v35 = 0;
    if (v24)
    {
      uint64_t v36 = v24;
      while (1)
      {
        uint64_t v37 = *(void *)(*(void *)(*(void *)v34 + 96) + 16);
        uint64_t v48 = __OFADD__(v35, v37);
        v35 += v37;
        if (v48) {
          break;
        }
        v34 += 8;
        if (!--v36) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      swift_retain();
      swift_retain();
      goto LABEL_65;
    }
LABEL_14:
    uint64_t v38 = *(void *)(v32 + 32 + 8 * v24);
    swift_retain();
    swift_bridgeObjectRelease();
    outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
    BOOL v21 = v73;
    uint64_t v18 = v74;
    uint64_t v39 = *(void *)v73;
    if (__OFSUB__(*(void *)v74, *(void *)v73)) {
      goto LABEL_52;
    }
    if (*(void *)v74 == *(void *)v73)
    {
      uint64_t v40 = v33;
      uint64_t v41 = *((void *)v73 + 1);
      uint64_t v42 = *((void *)v74 + 1);
      if (v42 < v41) {
        goto LABEL_58;
      }
      uint64_t v43 = v38;
      uint64_t v44 = *(void *)(*(void *)(v38 + 96) + 16);
      uint64_t v48 = __OFADD__(v35, v44);
      unint64_t v45 = v35 + v44;
      uint64_t v46 = v48;
    }
    else
    {
      uint64_t v47 = *(void *)(*(void *)(v38 + 96) + 16);
      uint64_t v48 = __OFADD__(v35, v47);
      unint64_t v45 = v35 + v47;
      uint64_t v46 = v48;
      if (v48) {
        goto LABEL_59;
      }
      uint64_t v40 = v33;
      uint64_t v41 = *((void *)v73 + 1);
      if (v45 < v35 || v45 < v41) {
        goto LABEL_60;
      }
      uint64_t v43 = v38;
      uint64_t v42 = v45;
    }
    if (v46) {
      goto LABEL_53;
    }
    if (v45 < v35) {
      goto LABEL_54;
    }
    *((void *)v73 + 1) = v45;
    uint64_t v48 = __OFADD__(v39, 1);
    uint64_t v50 = v39 + 1;
    if (v48) {
      goto LABEL_55;
    }
    *(void *)BOOL v21 = v50;
    if (!v22)
    {
      uint64_t v51 = v71;
      int64_t v52 = v71[3];
      if ((uint64_t)((v52 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_61;
      }
      float v69 = v42;
      uint64_t v53 = v52 & 0xFFFFFFFFFFFFFFFELL;
      if (v53 <= 1) {
        unint64_t v54 = 1;
      }
      else {
        unint64_t v54 = v53;
      }
      _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)>, (uint64_t (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>), MEMORY[0x263F8E0F8]);
      uint64_t v55 = (void *)swift_allocObject();
      unint64_t v56 = (uint64_t)(_swift_stdlib_malloc_size(v55) - 32) / 72;
      v55[2] = v54;
      v55[3] = 2 * v56;
      float v57 = (unint64_t)(v55 + 4);
      unint64_t v58 = v51[2];
      unint64_t v59 = v51;
      uint64_t v60 = v51[3] >> 1;
      if (v58)
      {
        uint64_t v61 = v59 + 4;
        if (v55 != v59 || v57 >= (unint64_t)v61 + 72 * v60)
        {
          unint64_t v68 = v56;
          memmove(v55 + 4, v61, 72 * v60);
          unint64_t v56 = v68;
        }
        v71[2] = 0;
      }
      uint64_t v23 = (void *)(v57 + 72 * v60);
      uint64_t v22 = (v56 & 0x7FFFFFFFFFFFFFFFLL) - v60;
      swift_release();
      uint64_t v71 = v55;
      BOOL v21 = v73;
      uint64_t v18 = v74;
      uint64_t v43 = v38;
      uint64_t v42 = v69;
    }
    uint64_t v48 = __OFSUB__(v22--, 1);
    if (v48) {
      goto LABEL_56;
    }
    unint64_t v62 = v75;
    *uint64_t v23 = v27;
    v23[1] = v62;
    _OWORD v23[2] = v28;
    v23[3] = v43;
    v23[4] = v24;
    _OWORD v23[5] = v40;
    v23[6] = v35;
    v23[7] = v41;
    v23[8] = v42;
    v23 += 9;
    uint64_t v9 = v70;
  }
  swift_release();
LABEL_65:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  long long v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  Swift::UInt64 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  Swift::UInt64 v57;
  unint64_t v58;
  uint64_t result;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  Swift::UInt64 v69;

  uint64_t v2 = type metadata accessor for ClusterIndexSequence(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v63 - v11;
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v5, type metadata accessor for ClusterIndexSequence);
  outlined init with copy of AlignedTimelineSchedule.Entries((uint64_t)v5, (uint64_t)v12, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v13 = *(int *)(v3 + 32);
  int v14 = &v5[*(int *)(v3 + 28)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v17 = &v12[v7[7]];
  *(void *)uint64_t v17 = v16;
  *((void *)v17 + 1) = v15;
  uint64_t v18 = *(_OWORD *)&v5[v13];
  uint64_t v67 = &v12[v7[8]];
  *(_OWORD *)uint64_t v67 = v18;
  unint64_t v19 = v7[9];
  uint64_t v65 = v12;
  unint64_t v20 = &v12[v19];
  *(void *)unint64_t v20 = v16;
  *((void *)v20 + 1) = v15;
  outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v5, type metadata accessor for ClusterIndexSequence);
  BOOL v21 = 0;
  uint64_t v64 = (char *)MEMORY[0x263F8EE78];
  uint64_t v22 = (char *)(MEMORY[0x263F8EE78] + 32);
  float v66 = v20;
  while (1)
  {
    uint64_t v23 = *(void *)v20;
    uint64_t v24 = *(void *)v67;
    if (*(void *)v20 >= *(void *)v67)
    {
      if (__OFSUB__(v24, v23)) {
        goto LABEL_48;
      }
      if (v24 != v23 || *((void *)v20 + 1) >= *((void *)v67 + 1))
      {
        outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v65, type metadata accessor for ClusterIndexSequence.Iterator);
        uint64_t result = (uint64_t)v64;
        uint64_t v60 = *((void *)v64 + 3);
        if (v60 < 2) {
          return result;
        }
        uint64_t v61 = v60 >> 1;
        uint64_t v38 = __OFSUB__(v61, v21);
        unint64_t v62 = v61 - v21;
        if (!v38)
        {
          uint64_t result = (uint64_t)v64;
          *((void *)v64 + 2) = v62;
          return result;
        }
        goto LABEL_51;
      }
    }
    outlined init with copy of AlignedTimelineSchedule.Entries((uint64_t)v65, (uint64_t)v9, type metadata accessor for ClusterIndexSequence.Iterator);
    unint64_t v26 = *v9;
    uint64_t v25 = v9[1];
    uint64_t v27 = v9[2];
    swift_beginAccess();
    int v28 = *(void *)(v26 + 48);
    if (!*(void *)(v28 + 16)) {
      goto LABEL_52;
    }
    swift_retain_n();
    swift_retain();
    uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
    if ((v30 & 1) == 0) {
      break;
    }
    unint64_t v31 = *(void *)(*(void *)(v28 + 56) + 16 * v29);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((v23 & 0x8000000000000000) != 0) {
      goto LABEL_41;
    }
    unint64_t v32 = *(void *)(v31 + 16);
    if (v23 >= v32) {
      goto LABEL_42;
    }
    float v69 = v25;
    int64_t v33 = v31 + 32;
    uint64_t v34 = *(void *)(v31 + 32 + 8 * v23);
    uint64_t v35 = 0;
    if (v23)
    {
      uint64_t v36 = v23;
      while (1)
      {
        uint64_t v37 = *(void *)(*(void *)(*(void *)v33 + 96) + 16);
        uint64_t v38 = __OFADD__(v35, v37);
        v35 += v37;
        if (v38) {
          break;
        }
        v33 += 8;
        if (!--v36) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      swift_retain();
      swift_retain();
      goto LABEL_54;
    }
LABEL_14:
    unint64_t v68 = v32;
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v39 = v9;
    outlined destroy of AlignedTimelineSchedule.Entries((uint64_t)v9, type metadata accessor for Text.Effect.BaseContent);
    unint64_t v20 = v66;
    uint64_t v40 = *((void *)v66 + 1);
    uint64_t v41 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      goto LABEL_43;
    }
    *((void *)v66 + 1) = v41;
    uint64_t v42 = *(void *)(*(void *)(v34 + 96) + 16);
    uint64_t v38 = __OFADD__(v35, v42);
    uint64_t v43 = v35 + v42;
    if (v38) {
      goto LABEL_44;
    }
    if (v43 < v35) {
      goto LABEL_45;
    }
    if (__OFSUB__(v43, v41)) {
      goto LABEL_46;
    }
    if (v43 == v41)
    {
      if (__OFADD__(*(void *)v20, 1)) {
        goto LABEL_49;
      }
      ++*(void *)v20;
    }
    if (!v21)
    {
      uint64_t v44 = v64;
      unint64_t v45 = *((void *)v64 + 3);
      if ((uint64_t)((v45 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_50;
      }
      unint64_t v63 = v34;
      uint64_t v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
      if (v46 <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v46;
      }
      type metadata accessor for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>();
      uint64_t v48 = (char *)swift_allocObject();
      uint64_t v49 = _swift_stdlib_malloc_size(v48);
      uint64_t v50 = v49 - 32;
      if (v49 < 32) {
        uint64_t v50 = v49 + 31;
      }
      uint64_t v51 = v50 >> 6;
      *((void *)v48 + 2) = v47;
      *((void *)v48 + 3) = 2 * (v50 >> 6);
      int64_t v52 = v48 + 32;
      uint64_t v53 = *((void *)v44 + 2);
      unint64_t v54 = v44;
      uint64_t v55 = *((void *)v44 + 3) >> 1;
      if (v53)
      {
        unint64_t v56 = v54 + 32;
        if (v48 != v54 || v52 >= &v56[64 * v55]) {
          memmove(v48 + 32, v56, v55 << 6);
        }
        *((void *)v64 + 2) = 0;
      }
      uint64_t v22 = &v52[64 * v55];
      BOOL v21 = (v51 & 0x7FFFFFFFFFFFFFFFLL) - v55;
      swift_release();
      uint64_t v64 = v48;
      unint64_t v20 = v66;
      uint64_t v34 = v63;
    }
    uint64_t v38 = __OFSUB__(v21--, 1);
    if (v38) {
      goto LABEL_47;
    }
    float v57 = v69;
    *(void *)uint64_t v22 = v26;
    *((void *)v22 + 1) = v57;
    *((void *)v22 + 2) = v27;
    *((void *)v22 + 3) = v34;
    unint64_t v58 = v68;
    *((void *)v22 + 4) = v23;
    *((void *)v22 + 5) = v58;
    *((void *)v22 + 6) = v35;
    *((void *)v22 + 7) = v40;
    v22 += 64;
    uint64_t v9 = v39;
  }
  swift_release();
LABEL_54:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void v65[2];
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  void (**v68)(char *, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (**v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t);

  _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v70 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v65 - v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v65 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v73 = (char *)v65 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  float v69 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v65 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v81 = (char *)v65 - v19;
  uint64_t v72 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x270FA5388](v72);
  BOOL v21 = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  outlined init with copy of AlignedTimelineSchedule.Entries(a1, (uint64_t)v21, type metadata accessor for EverySecondEntries);
  uint64_t v83 = v21;
  outlined init with copy of Date?((uint64_t)v21, (uint64_t)v9);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  unint64_t v74 = v9;
  uint64_t v67 = v23;
  uint64_t v24 = v23((uint64_t)v9, 1, v12);
  uint64_t v25 = (char *)MEMORY[0x263F8EE78];
  uint64_t v77 = v13;
  if (v24 != 1)
  {
    uint64_t v71 = v6;
    unint64_t v26 = 0;
    float v66 = (v22 + 32) & ~v22;
    uint64_t v29 = MEMORY[0x263F8EE78] + v66;
    uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    unint64_t v68 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v82 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v65[1] = v22 | 7;
    uint64_t v79 = (char *)MEMORY[0x263F8EE78];
    uint64_t v80 = v13 + 48;
    uint64_t v27 = (uint64_t)v83;
    unint64_t v31 = v17;
    unint64_t v75 = v13 + 32;
    uint64_t v76 = v17;
    int v28 = (uint64_t)v74;
    unint64_t v32 = v67;
    uint64_t v84 = v30;
    while (1)
    {
      uint64_t v78 = v26;
      int64_t v33 = (void (*)(char *, uint64_t, uint64_t))v30;
      v30(v31, v28, v12);
      uint64_t v34 = (uint64_t)v71;
      outlined init with copy of Date?(v27 + *(int *)(v72 + 20), (uint64_t)v71);
      if (v32(v34, 1, v12) == 1) {
        break;
      }
      uint64_t v35 = v69;
      v33(v69, v34, v12);
      lazy protocol witness table accessor for type Date and conformance Date();
      uint64_t v36 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v68)(v35, v12);
      if (v36) {
        goto LABEL_7;
      }
      uint64_t v40 = (uint64_t)v83;
      _s10Foundation6LocaleVSgWOhTm_0((uint64_t)v83, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
      uint64_t v39 = *v82;
      (*v82)(v40, 1, 1, v12);
      uint64_t v38 = v76;
LABEL_9:
      uint64_t v41 = (uint64_t)v73;
      int v28 = (uint64_t)v74;
      unint64_t v31 = v38;
      uint64_t v42 = v84;
      v84(v73, (uint64_t)v38, v12);
      v39(v41, 0, 1, v12);
      if (v32(v41, 1, v12) == 1)
      {
        uint64_t v27 = (uint64_t)v83;
        unint64_t v26 = v78;
        uint64_t v25 = v79;
        goto LABEL_34;
      }
      uint64_t result = v42(v81, v41, v12);
      uint64_t v44 = v78;
      if (v78)
      {
        uint64_t v25 = v79;
        goto LABEL_30;
      }
      unint64_t v45 = v79;
      uint64_t v46 = *((void *)v79 + 3);
      if ((uint64_t)((v46 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_39;
      }
      uint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
      if (v47 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v47;
      }
      _s10Foundation6LocaleVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x263F07490], MEMORY[0x263F8E0F8]);
      uint64_t v49 = *(void *)(v77 + 72);
      uint64_t v50 = v66;
      uint64_t v25 = (char *)swift_allocObject();
      uint64_t result = _swift_stdlib_malloc_size(v25);
      if (!v49) {
        goto LABEL_40;
      }
      uint64_t v51 = result - v50;
      if (result - v50 == 0x8000000000000000 && v49 == -1) {
        goto LABEL_41;
      }
      uint64_t v53 = v51 / v49;
      *((void *)v25 + 2) = v48;
      *((void *)v25 + 3) = 2 * (v51 / v49);
      unint64_t v54 = &v25[v50];
      uint64_t v55 = *((void *)v45 + 3) >> 1;
      unint64_t v56 = v55 * v49;
      unint64_t v31 = v76;
      if (*((void *)v45 + 2))
      {
        if (v25 < v45 || v54 >= &v45[v50 + v56])
        {
          float v57 = v51 / v49;
          unint64_t v58 = v55 * v49;
          swift_arrayInitWithTakeFrontToBack();
LABEL_27:
          unint64_t v56 = v58;
          uint64_t v53 = v57;
        }
        else if (v25 != v45)
        {
          float v57 = v51 / v49;
          unint64_t v58 = v55 * v49;
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_27;
        }
        *((void *)v45 + 2) = 0;
      }
      uint64_t v29 = (uint64_t)&v54[v56];
      uint64_t v44 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
      uint64_t result = swift_release();
      unint64_t v32 = v67;
LABEL_30:
      unint64_t v59 = __OFSUB__(v44, 1);
      unint64_t v26 = v44 - 1;
      uint64_t v60 = v77;
      if (v59)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v84((char *)v29, (uint64_t)v81, v12);
      v29 += *(void *)(v60 + 72);
      uint64_t v27 = (uint64_t)v83;
      outlined init with copy of Date?((uint64_t)v83, v28);
      uint64_t v61 = v32(v28, 1, v12);
      uint64_t v30 = v84;
      uint64_t v79 = v25;
      if (v61 == 1) {
        goto LABEL_32;
      }
    }
    _s10Foundation6LocaleVSgWOhTm_0(v34, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
LABEL_7:
    uint64_t v37 = (uint64_t)v70;
    uint64_t v38 = v76;
    Date.addingTimeInterval(_:)();
    uint64_t v39 = *v82;
    (*v82)(v37, 0, 1, v12);
    outlined assign with take of Date?(v37, (uint64_t)v83);
    goto LABEL_9;
  }
  unint64_t v26 = 0;
  uint64_t v27 = (uint64_t)v83;
  int v28 = (uint64_t)v74;
LABEL_32:
  _s10Foundation6LocaleVSgWOhTm_0(v28, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  uint64_t v41 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v73, 1, 1, v12);
LABEL_34:
  outlined destroy of AlignedTimelineSchedule.Entries(v27, type metadata accessor for EverySecondEntries);
  uint64_t result = _s10Foundation6LocaleVSgWOhTm_0(v41, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  unint64_t v62 = *((void *)v25 + 3);
  if (v62 >= 2)
  {
    unint64_t v63 = v62 >> 1;
    unint64_t v59 = __OFSUB__(v63, v26);
    uint64_t v64 = v63 - v26;
    if (v59) {
      goto LABEL_42;
    }
    *((void *)v25 + 2) = v64;
  }
  return (uint64_t)v25;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[2];
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= v3) {
    uint64_t v5 = a1[2];
  }
  else {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  if (v5)
  {
    _s10Foundation6LocaleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Double), MEMORY[0x263F8E0F8]);
    uint64_t v8 = (void *)swift_allocObject();
    uint64_t v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32) / 24;
    _OWORD v8[2] = v5;
    void v8[3] = 2 * v9;
    uint64_t v10 = a1[5];
    uint64_t v11 = *(void *)(a2 + 32);
    v8[4] = a1[4];
    void v8[5] = v10;
    v8[6] = v11;
    if (v5 == 1)
    {
      uint64_t v12 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      swift_bridgeObjectRetain();
      if (v3 == 1) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v34 = v8;
      uint64_t v31 = v9 & 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v32 = v4;
      unint64_t v13 = v4 - 1;
      if (v4 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v4;
      }
      unint64_t v15 = v3 - 1;
      unint64_t v33 = v3;
      if (v3 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v3;
      }
      if (v3 != 1)
      {
        uint64_t v2 = 0;
        uint64_t v17 = a2 + 40;
        uint64_t v18 = a1 + 7;
        uint64_t v19 = v16 - 1;
        uint64_t v20 = v14 - 1;
        uint64_t v21 = v5 - 2;
        uint64_t v22 = 7;
        while (v19 != v2)
        {
          if (v13 == v2) {
            goto LABEL_34;
          }
          if (v20 == v2) {
            goto LABEL_31;
          }
          uint64_t v23 = &v34[v22];
          uint64_t v24 = *v18;
          uint64_t v25 = *(void *)(v17 + 8 * v2);
          *uint64_t v23 = *(v18 - 1);
          v23[1] = v24;
          _OWORD v23[2] = v25;
          if (v21 == v2) {
            goto LABEL_24;
          }
          swift_bridgeObjectRetain();
          ++v2;
          v18 += 2;
          v22 += 3;
          if (v15 == v2) {
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v4 = v32;
      uint64_t v12 = v31 - v2 - 2;
      unint64_t v3 = v33;
      uint64_t v8 = v34;
      if (v33 <= v32) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    uint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
    if (!v3) {
      goto LABEL_26;
    }
  }
  if (v3 <= v4)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  unint64_t v26 = v8[3];
  if (v26 < 2) {
    return (uint64_t)v8;
  }
  unint64_t v27 = v26 >> 1;
  BOOL v28 = __OFSUB__(v27, v12);
  unint64_t v29 = v27 - v12;
  if (!v28)
  {
    _OWORD v8[2] = v29;
    return (uint64_t)v8;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = swift_bridgeObjectRetain();
  __break(1u);
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

unint64_t lazy protocol witness table accessor for type EmptyCollection<Character> and conformance EmptyCollection<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>;
  if (!lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>)
  {
    type metadata accessor for EmptyCollection<Character>(255, &lazy cache variable for type metadata for EmptyCollection<Character>, MEMORY[0x263F8D120], MEMORY[0x263F8DDD8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>);
  }
  return result;
}

unint64_t specialized Collection.suffix(from:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst)
{
  unint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 31;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 5;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 5;
  uint64_t v38 = a1;
  uint64_t v37 = __dst;
  if (v8 >= v10 >> 5)
  {
    if (v9 >= -31)
    {
      if (__dst != __src || &__src[32 * v11] <= __dst) {
        memmove(__dst, __src, 32 * v11);
      }
      uint64_t v25 = __dst;
      uint64_t v18 = &__dst[32 * v11];
      uint64_t v36 = v18;
      uint64_t v38 = v5;
      if (a1 < v5 && v9 >= 32)
      {
        uint64_t v19 = (char *)(a3 - 32);
        uint64_t v20 = v5;
        do
        {
          uint64_t v30 = v18;
          v18 -= 32;
          v20 -= 32;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          uint64_t v31 = v5;
          if (v34 == v32 && v35 == v33) {
            char v27 = 0;
          }
          else {
            char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          uint64_t v21 = v19 + 32;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v27)
          {
            uint64_t v18 = v30;
            if (v21 != v31 || v19 >= v31)
            {
              long long v22 = *((_OWORD *)v20 + 1);
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
              *((_OWORD *)v19 + 1) = v22;
            }
            uint64_t v38 = v20;
          }
          else
          {
            uint64_t v36 = v18;
            if (v21 < v30 || v19 >= v30 || v21 != v30)
            {
              long long v23 = *((_OWORD *)v18 + 1);
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
              *((_OWORD *)v19 + 1) = v23;
            }
            uint64_t v20 = v31;
          }
          if (v20 <= a1) {
            break;
          }
          v19 -= 32;
          unint64_t v5 = v20;
        }
        while (v18 > v25);
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, (const void **)&v37, &v36);
      return 1;
    }
  }
  else if (v6 >= -31)
  {
    if (__dst != a1 || &a1[32 * v8] <= __dst) {
      memmove(__dst, a1, 32 * v8);
    }
    BOOL v28 = &__dst[32 * v8];
    uint64_t v36 = v28;
    if ((unint64_t)v5 < a3 && v6 >= 32)
    {
      uint64_t v12 = __dst;
      unint64_t v13 = a1;
      while (1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v34 == v32 && v35 == v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v14)
          {
            unint64_t v15 = v5 + 32;
            if (v13 < v5 || v13 >= v15 || v13 != v5)
            {
              long long v16 = *((_OWORD *)v5 + 1);
              *(_OWORD *)unint64_t v13 = *(_OWORD *)v5;
              *((_OWORD *)v13 + 1) = v16;
            }
            goto LABEL_24;
          }
        }
        unint64_t v15 = v5;
        if (v13 != v12)
        {
          long long v17 = *((_OWORD *)v12 + 1);
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
          *((_OWORD *)v13 + 1) = v17;
        }
        v12 += 32;
        uint64_t v37 = v12;
LABEL_24:
        v13 += 32;
        if (v12 < v28)
        {
          unint64_t v5 = v15;
          if ((unint64_t)v15 < a3) {
            continue;
          }
        }
        uint64_t v38 = v13;
        goto LABEL_50;
      }
    }
    goto LABEL_50;
  }
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = result;
  if (a3 != a2)
  {
    uint64_t v16 = *a4;
    uint64_t v4 = (void *)(*a4 + 32 * a3 + 24);
LABEL_6:
    uint64_t v6 = v14;
    unint64_t v15 = v4;
    uint64_t v17 = a3;
    while (1)
    {
      uint64_t v7 = (long long *)(v4 - 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      if (v20 == v18 && v21 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v17;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v15 + 4;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = v17;
      if ((v22 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v16) {
        break;
      }
      long long v9 = *v7;
      long long v8 = *(_OWORD *)(v4 - 5);
      *(v4 - 4) = *v4;
      v4 -= 4;
      uint64_t v10 = v4[1];
      uint64_t v11 = v4[2];
      uint64_t v12 = v4[3];
      void v7[2] = v9;
      void v7[3] = v8;
      *(v4 - 3) = v10;
      *(v4 - 2) = v11;
      *(v4 - 1) = v12;
      if (v17 == ++v6) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    long long v8 = *a4 + 16 * a3;
LABEL_5:
    long long v9 = v8;
    uint64_t v10 = v6;
    while (1)
    {
      swift_getAtKeyPath();
      uint64_t result = swift_getAtKeyPath();
      if (v14 >= v13)
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t v11 = *(void *)v9;
      uint64_t v12 = *(unsigned char *)(v9 + 8);
      *(_OWORD *)long long v9 = *(_OWORD *)(v9 - 16);
      *(unsigned char *)(v9 - 8) = v12;
      *(void *)(v9 - 16) = v11;
      v9 -= 16;
      if (v4 == ++v10) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  swift_retain_n();
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_148;
    }
    if (v3)
    {
      swift_retain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    swift_release_n();
    return swift_release();
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_156;
  }
  Swift::Int v112 = v3;
  Swift::Int v108 = v4;
  uint64_t v115 = v1;
  uint64_t v105 = a1;
  if (v3 < 2)
  {
    long long v8 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v107 = MEMORY[0x263F8EE78];
    if (v3 == 1) {
      goto LABEL_13;
    }
    unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_112:
    if (v11 >= 2)
    {
      uint64_t v92 = *v105;
      uint64_t v125 = *v105;
      do
      {
        unint64_t v93 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_143;
        }
        if (!v92) {
          goto LABEL_155;
        }
        uint64_t v94 = v8;
        uint64_t v95 = v8 + 32;
        uint64_t v96 = *(void *)&v8[16 * v93 + 32];
        uint64_t v97 = *(void *)&v95[16 * v11 - 8];
        uint64_t v98 = (char *)(v92 + 32 * v96);
        uint64_t v99 = (char *)(v92 + 32 * *(void *)&v95[16 * v11 - 16]);
        unint64_t v100 = v92 + 32 * v97;
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v98, v99, v100, __dst);
        if (v115) {
          goto LABEL_109;
        }
        swift_release();
        if (v97 < v96) {
          goto LABEL_144;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
        }
        if (v93 >= *((void *)v94 + 2)) {
          goto LABEL_145;
        }
        unint64_t v101 = &v94[16 * v93 + 32];
        *(void *)unint64_t v101 = v96;
        *((void *)v101 + 1) = v97;
        unint64_t v102 = *((void *)v94 + 2);
        if (v11 > v102) {
          goto LABEL_146;
        }
        long long v8 = v94;
        memmove(&v94[16 * v11 + 16], &v94[16 * v11 + 32], 16 * (v102 - v11));
        *((void *)v94 + 2) = v102 - 1;
        unint64_t v11 = v102 - 1;
        uint64_t v92 = v125;
      }
      while (v102 > 2);
    }
    swift_bridgeObjectRelease();
LABEL_124:
    *(void *)(v107 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v6 = v5 >> 1;
  type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
  uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v7 + 16) = v6;
  uint64_t v107 = v7;
  __dst = (char *)(v7 + 32);
LABEL_13:
  Swift::Int v9 = 0;
  uint64_t v106 = *a1 + 48;
  uint64_t v104 = *a1 + 24;
  long long v8 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v10 = v112;
  uint64_t v118 = *a1;
  while (1)
  {
    Swift::Int v12 = v9;
    Swift::Int v13 = v9 + 1;
    Swift::Int v111 = v9;
    if (v9 + 1 < v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      if (v121 == v119 && v122 == v120) {
        int v123 = 0;
      }
      else {
        int v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Int v13 = v12 + 2;
      Swift::Int v10 = v112;
      if (v12 + 2 < v112)
      {
        uint64_t v14 = v106 + 32 * v12;
        while (1)
        {
          Swift::Int v15 = v13;
          v14 += 32;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v121 != v119) {
            goto LABEL_26;
          }
          if (v122 == v120) {
            int v16 = 0;
          }
          else {
LABEL_26:
          }
            int v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v123 ^ v16)) {
            break;
          }
          ++v13;
          Swift::Int v10 = v112;
          if (v112 == v15 + 1)
          {
            Swift::Int v13 = v112;
            goto LABEL_31;
          }
        }
        Swift::Int v10 = v112;
LABEL_31:
        Swift::Int v12 = v111;
      }
      if (v123)
      {
        if (v13 < v12) {
          goto LABEL_149;
        }
        if (v12 < v13)
        {
          uint64_t v17 = 32 * v13;
          uint64_t v18 = 32 * v12;
          Swift::Int v19 = v13;
          Swift::Int v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v118) {
                goto LABEL_154;
              }
              uint64_t v21 = (_OWORD *)(v118 + v18);
              uint64_t v22 = v118 + v17;
              long long v23 = *(_OWORD *)(v118 + v18);
              uint64_t v24 = *(void *)(v118 + v18 + 16);
              uint64_t v25 = *(void *)(v118 + v18 + 24);
              long long v26 = *(_OWORD *)(v118 + v17 - 16);
              _OWORD *v21 = *(_OWORD *)(v118 + v17 - 32);
              v21[1] = v26;
              *(_OWORD *)(v22 - 32) = v23;
              *(void *)(v22 - 16) = v24;
              *(void *)(v22 - 8) = v25;
            }
            ++v20;
            v17 -= 32;
            v18 += 32;
          }
          while (v20 < v19);
        }
      }
    }
    if (v13 < v10)
    {
      if (__OFSUB__(v13, v12)) {
        goto LABEL_147;
      }
      if (v13 - v12 < v108) {
        break;
      }
    }
LABEL_61:
    if (v13 < v12) {
      goto LABEL_142;
    }
    Swift::Int v117 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v39 = *((void *)v8 + 2);
    unint64_t v38 = *((void *)v8 + 3);
    unint64_t v11 = v39 + 1;
    uint64_t v40 = v118;
    if (v39 >= v38 >> 1)
    {
      uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v8);
      uint64_t v40 = v118;
      long long v8 = v91;
    }
    *((void *)v8 + 2) = v11;
    uint64_t v41 = &v8[16 * v39 + 32];
    *(void *)uint64_t v41 = v12;
    *((void *)v41 + 1) = v13;
    if (v39)
    {
      uint64_t v42 = v8 + 32;
      while (1)
      {
        unint64_t v43 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v48 = &v42[16 * v11];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_131;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_132;
          }
          unint64_t v55 = v11 - 2;
          unint64_t v56 = &v42[16 * v11 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_134;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_137;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v42[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_141;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_99;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v72 = *((void *)v8 + 4);
            uint64_t v73 = *((void *)v8 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_93;
          }
          uint64_t v45 = *((void *)v8 + 4);
          uint64_t v44 = *((void *)v8 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_133;
        }
        unint64_t v55 = v11 - 2;
        uint64_t v61 = &v42[16 * v11 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_136;
        }
        uint64_t v67 = &v42[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_139;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_140;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_99:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_101;
        }
LABEL_93:
        if (v66) {
          goto LABEL_135;
        }
        unint64_t v74 = &v42[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_138;
        }
        if (v77 < v65) {
          goto LABEL_15;
        }
LABEL_101:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v40) {
          goto LABEL_153;
        }
        uint64_t v83 = &v42[16 * v82];
        uint64_t v84 = *(void *)v83;
        unint64_t v85 = v43;
        Swift::String v86 = &v42[16 * v43];
        uint64_t v87 = *((void *)v86 + 1);
        uint64_t v88 = (char *)(v40 + 32 * *(void *)v83);
        unint64_t v89 = (char *)(v40 + 32 * *(void *)v86);
        unint64_t v124 = v40 + 32 * v87;
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v88, v89, v124, __dst);
        if (v115)
        {
LABEL_109:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_124;
        }
        swift_release();
        if (v87 < v84) {
          goto LABEL_128;
        }
        if (v85 > *((void *)v8 + 2)) {
          goto LABEL_129;
        }
        *(void *)uint64_t v83 = v84;
        uint64_t v42 = v8 + 32;
        *(void *)&v8[16 * v82 + 40] = v87;
        unint64_t v90 = *((void *)v8 + 2);
        if (v85 >= v90) {
          goto LABEL_130;
        }
        unint64_t v11 = v90 - 1;
        memmove(v86, v86 + 16, 16 * (v90 - 1 - v85));
        *((void *)v8 + 2) = v90 - 1;
        uint64_t v40 = v118;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    Swift::Int v10 = v112;
    Swift::Int v9 = v117;
    if (v117 >= v112) {
      goto LABEL_112;
    }
  }
  if (__OFADD__(v12, v108)) {
    goto LABEL_150;
  }
  if (v12 + v108 >= v10) {
    Swift::Int v27 = v10;
  }
  else {
    Swift::Int v27 = v12 + v108;
  }
  if (v27 >= v12)
  {
    if (v13 != v27)
    {
      uint64_t v109 = v8;
      Swift::Int v110 = v27;
      BOOL v28 = (void *)(v104 + 32 * v13);
      do
      {
        Swift::Int v116 = v13;
        Swift::Int v29 = v12;
        double v114 = v28;
        uint64_t v30 = v28;
        while (1)
        {
          uint64_t v31 = (long long *)(v30 - 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v121 == v119 && v122 == v120) {
            break;
          }
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0) {
            goto LABEL_52;
          }
          if (!v118) {
            goto LABEL_152;
          }
          long long v34 = *v31;
          long long v33 = *(_OWORD *)(v30 - 5);
          *(v30 - 4) = *v30;
          v30 -= 4;
          uint64_t v35 = v30[1];
          uint64_t v36 = v30[2];
          uint64_t v37 = v30[3];
          _OWORD v31[2] = v34;
          v31[3] = v33;
          *(v30 - 3) = v35;
          *(v30 - 2) = v36;
          *(v30 - 1) = v37;
          if (v116 == ++v29) {
            goto LABEL_52;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_52:
        Swift::Int v13 = v116 + 1;
        BOOL v28 = v114 + 4;
        Swift::Int v12 = v111;
      }
      while (v116 + 1 != v110);
      Swift::Int v13 = v110;
      long long v8 = v109;
    }
    goto LABEL_61;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  swift_release_n();
  __break(1u);
LABEL_153:
  swift_release_n();
  __break(1u);
LABEL_154:
  swift_release_n();
  __break(1u);
LABEL_155:
  swift_release_n();
  __break(1u);
LABEL_156:
  swift_release_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  Swift::Int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  Swift::Int v81;
  Swift::Int v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t result;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  Swift::Int v100;
  Swift::Int v101;
  Swift::Int v102;
  char *__dst;
  unint64_t v104;
  Swift::Int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;

  Swift::Int v3 = a1[1];
  swift_retain_n();
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if (v3)
    {
      swift_retain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    swift_release_n();
    return swift_release();
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  unint64_t v100 = v4;
  unint64_t v101 = v3;
  uint64_t v97 = a1;
  Swift::Int v108 = v1;
  if (v3 < 2)
  {
    long long v8 = (char *)MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v99 = MEMORY[0x263F8EE78];
    if (v3 == 1) {
      goto LABEL_13;
    }
    Swift::Int v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_107:
    if (v12 >= 2)
    {
      Swift::String v86 = *v97;
      Swift::Int v110 = *v97;
      do
      {
        uint64_t v87 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_137;
        }
        if (!v86) {
          goto LABEL_149;
        }
        uint64_t v88 = (uint64_t)v8;
        unint64_t v89 = *(void *)&v8[16 * v87 + 32];
        unint64_t v90 = *(void *)&v8[16 * v12 + 24];
        uint64_t v91 = (char *)(v86 + 16 * v89);
        uint64_t v92 = (char *)(v86 + 16 * *(void *)&v8[16 * v12 + 16]);
        unint64_t v93 = v86 + 16 * v90;
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v91, v92, v93, __dst);
        if (v108) {
          goto LABEL_104;
        }
        swift_release();
        if (v90 < v89) {
          goto LABEL_138;
        }
        long long v8 = (char *)v88;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v88);
        }
        if (v87 >= *((void *)v8 + 2)) {
          goto LABEL_139;
        }
        uint64_t v94 = &v8[16 * v87 + 32];
        *(void *)uint64_t v94 = v89;
        *((void *)v94 + 1) = v90;
        uint64_t v95 = *((void *)v8 + 2);
        if (v12 > v95) {
          goto LABEL_140;
        }
        memmove(&v8[16 * v12 + 16], &v8[16 * v12 + 32], 16 * (v95 - v12));
        *((void *)v8 + 2) = v95 - 1;
        Swift::Int v12 = v95 - 1;
        Swift::String v86 = v110;
      }
      while (v95 > 2);
    }
    swift_bridgeObjectRelease();
    *(void *)(v99 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v6 = v5 >> 1;
  uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v7 + 16) = v6;
  uint64_t v99 = v7;
  __dst = (char *)(v7 + 32);
LABEL_13:
  Swift::Int v9 = 0;
  Swift::Int v10 = *a1;
  uint64_t v98 = *a1 + 24;
  long long v8 = (char *)MEMORY[0x263F8EE78];
  unint64_t v11 = v3;
  uint64_t v109 = *a1;
  while (1)
  {
    Swift::Int v13 = v9;
    uint64_t v14 = v9 + 1;
    if (v9 + 1 < v11)
    {
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < v11)
      {
        uint64_t v105 = v13;
        Swift::Int v15 = v98 + 16 * v13;
        while (1)
        {
          v15 += 16;
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v112 < v111 == v112 >= v111) {
            break;
          }
          if (v11 == ++v14)
          {
            uint64_t v14 = v11;
            break;
          }
        }
        Swift::Int v13 = v105;
      }
      Swift::Int v10 = v109;
      if (v112 < v111)
      {
        if (v14 < v13) {
          goto LABEL_143;
        }
        int v16 = v14;
        if (v13 < v14)
        {
          uint64_t v17 = 16 * v14 - 16;
          uint64_t v18 = 16 * v13;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != --v16)
            {
              if (!v109) {
                goto LABEL_148;
              }
              uint64_t v21 = (_OWORD *)(v109 + v18);
              uint64_t v22 = (_OWORD *)(v109 + v17);
              long long v23 = *(void *)(v109 + v18);
              uint64_t v24 = *(unsigned char *)(v109 + v18 + 8);
              if (v18 != v17 || v21 >= v22 + 1) {
                _OWORD *v21 = *v22;
              }
              Swift::Int v20 = v109 + v17;
              *(void *)Swift::Int v20 = v23;
              *(unsigned char *)(v20 + 8) = v24;
            }
            ++v19;
            v17 -= 16;
            v18 += 16;
          }
          while (v19 < v16);
        }
      }
    }
    uint64_t v25 = v14;
    if (v14 >= v11) {
      goto LABEL_47;
    }
    if (__OFSUB__(v14, v13)) {
      goto LABEL_141;
    }
    if (v14 - v13 < v100) {
      break;
    }
    uint64_t v25 = v14;
LABEL_47:
    if (v25 < v13) {
      goto LABEL_136;
    }
LABEL_48:
    unint64_t v102 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    BOOL v28 = *((void *)v8 + 2);
    Swift::Int v27 = *((void *)v8 + 3);
    Swift::Int v12 = v28 + 1;
    Swift::Int v10 = v109;
    if (v28 >= v27 >> 1)
    {
      unint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v8);
      Swift::Int v10 = v109;
      long long v8 = v85;
    }
    *((void *)v8 + 2) = v12;
    Swift::Int v29 = v8 + 32;
    uint64_t v30 = &v8[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v25;
    if (v28)
    {
      while (1)
      {
        uint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          unint64_t v38 = *((void *)v36 - 7);
          uint64_t v42 = __OFSUB__(v38, v37);
          unint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_125;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          uint64_t v42 = __OFSUB__(v40, v41);
          long long v34 = v40 - v41;
          uint64_t v35 = v42;
          if (v42) {
            goto LABEL_126;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          uint64_t v42 = __OFSUB__(v45, v46);
          char v47 = v45 - v46;
          if (v42) {
            goto LABEL_128;
          }
          uint64_t v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_131;
          }
          if (v48 >= v39)
          {
            char v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            uint64_t v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_135;
            }
            uint64_t v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v8 + 4);
            uint64_t v61 = *((void *)v8 + 5);
            uint64_t v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            BOOL v54 = v42;
            goto LABEL_78;
          }
          long long v33 = *((void *)v8 + 4);
          char v32 = *((void *)v8 + 5);
          uint64_t v42 = __OFSUB__(v32, v33);
          long long v34 = v32 - v33;
          uint64_t v35 = v42;
        }
        if (v35) {
          goto LABEL_127;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        uint64_t v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        BOOL v54 = v52;
        if (v52) {
          goto LABEL_130;
        }
        unint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        unint64_t v56 = *((void *)v55 + 1);
        uint64_t v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_133;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_134;
        }
        if (v53 + v58 >= v34)
        {
          uint64_t v59 = v34 < v58;
LABEL_84:
          if (v59) {
            uint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_129;
        }
        uint64_t v62 = &v29[16 * v31];
        BOOL v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        uint64_t v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_132;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        uint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v10) {
          goto LABEL_147;
        }
        BOOL v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v31;
        unint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        uint64_t v76 = (char *)(v10 + 16 * *(void *)v74);
        uint64_t v104 = v10 + 16 * v75;
        uint64_t v106 = (char *)(v10 + 16 * *(void *)v71);
        swift_retain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v106, v76, v104, __dst);
        if (v1)
        {
LABEL_104:
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v99 + 16) = 0;
          swift_release_n();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        swift_release();
        if (v75 < v72) {
          goto LABEL_122;
        }
        if (v73 > *((void *)v8 + 2)) {
          goto LABEL_123;
        }
        *(void *)BOOL v71 = v72;
        Swift::Int v29 = v8 + 32;
        *(void *)&v8[16 * v70 + 40] = v75;
        uint64_t v77 = *((void *)v8 + 2);
        if (v73 >= v77) {
          goto LABEL_124;
        }
        Swift::Int v12 = v77 - 1;
        memmove(v74, v74 + 16, 16 * (v77 - 1 - v73));
        *((void *)v8 + 2) = v77 - 1;
        Swift::Int v10 = v109;
        if (v77 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v12 = 1;
LABEL_15:
    unint64_t v11 = v101;
    Swift::Int v9 = v102;
    if (v102 >= v101) {
      goto LABEL_107;
    }
  }
  if (__OFADD__(v13, v100)) {
    goto LABEL_144;
  }
  if (v13 + v100 >= v11) {
    uint64_t v25 = v11;
  }
  else {
    uint64_t v25 = v13 + v100;
  }
  if (v25 >= v13)
  {
    long long v26 = v14;
    if (v14 == v25)
    {
      uint64_t v25 = v14;
      if (v14 < v13) {
        goto LABEL_136;
      }
    }
    else
    {
      uint64_t v78 = v13;
      uint64_t v107 = v8;
      uint64_t v79 = v10 + 16 * v26;
      do
      {
        uint64_t v80 = v79;
        uint64_t v81 = v78;
        while (1)
        {
          unint64_t v82 = v26;
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v112 >= v111) {
            break;
          }
          if (!v109) {
            goto LABEL_146;
          }
          long long v26 = v82;
          uint64_t v83 = *(void *)v80;
          uint64_t v84 = *(unsigned char *)(v80 + 8);
          *(_OWORD *)uint64_t v80 = *(_OWORD *)(v80 - 16);
          *(unsigned char *)(v80 - 8) = v84;
          *(void *)(v80 - 16) = v83;
          v80 -= 16;
          if (v82 == ++v81) {
            goto LABEL_96;
          }
        }
        long long v26 = v82;
LABEL_96:
        ++v26;
        v79 += 16;
      }
      while (v26 != v25);
      long long v8 = v107;
      Swift::Int v13 = v78;
      if (v25 < v78) {
        goto LABEL_136;
      }
    }
    goto LABEL_48;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  swift_release_n();
  __break(1u);
LABEL_147:
  swift_release_n();
  __break(1u);
LABEL_148:
  swift_release_n();
  __break(1u);
LABEL_149:
  swift_release_n();
  __break(1u);
LABEL_150:
  swift_release_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  swift_release();
  *a1 = v2;
  return swift_release_n();
}

uint64_t lazy protocol witness table accessor for type Repeated<String> and conformance Repeated<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EmptyCollection<Character>(255, a2, MEMORY[0x263F8D310], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *specialized CustomRecursiveStringConvertible.topLevelAttributes.getter()
{
  if ((byte_268F027C9 & 8) == 0) {
    return (void *)MEMORY[0x263F8EE78];
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x58);
  uint64_t v1 = static CoreGlue2.shared;
  char v2 = v0();

  if (v2 == 2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  if (v2) {
    uint64_t v4 = 0x6E6564646968;
  }
  else {
    uint64_t v4 = 0x656C6269736976;
  }
  if (v2) {
    unint64_t v5 = 0xE600000000000000;
  }
  else {
    unint64_t v5 = 0xE700000000000000;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v6 = v3[2];
  unint64_t v7 = v3[3];
  unint64_t v8 = v6 + 1;
  if (v6 >= v7 >> 1)
  {
    unint64_t v13 = v3[2];
    unint64_t v14 = v5;
    unint64_t v11 = v6 + 1;
    Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v6 + 1, 1, v3);
    unint64_t v8 = v11;
    unint64_t v6 = v13;
    unint64_t v5 = v14;
    uint64_t v3 = v12;
  }
  v3[2] = v8;
  Swift::Int v9 = &v3[4 * v6];
  v9[4] = 0x6142737574617473;
  double v9[5] = 0xE900000000000072;
  v9[6] = v4;
  v9[7] = v5;
  return v3;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.defaultDescriptionAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.descriptionChildren.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CustomRecursiveStringConvertible.hideFromDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of BridgeStringConvertible.bridgeDescriptionChildren.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t outlined destroy of RangeSet<Int><>.IndexSequence(uint64_t a1)
{
  type metadata accessor for RangeSet<Int><>.IndexSequence(0, &lazy cache variable for type metadata for RangeSet<Int><>.IndexSequence, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for RangeSet<>.IndexSequence);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for EmptyCollection<Character>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for (String, Double)()
{
  if (!lazy cache variable for type metadata for (String, Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
    }
  }
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)>);
    }
  }
}

uint64_t outlined destroy of AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AlignedTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)()
{
  if (!lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>))
  {
    type metadata accessor for Range<Text.Effect.ClusterIndex>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>));
    }
  }
}

void type metadata accessor for Range<Text.Effect.ClusterIndex>()
{
  if (!lazy cache variable for type metadata for Range<Text.Effect.ClusterIndex>)
  {
    lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex();
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Effect.ClusterIndex>);
    }
  }
}

uint64_t _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(a1, (uint64_t)a2, v3, *a2, a3);
}

uint64_t EventBindingSource.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return EventBindingSource.as<A>(_:)(a1, a2);
}

uint64_t EventBindingSource.as<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t static EventBindingBridgeFactoryInput.defaultValue.getter()
{
  return 0;
}

uint64_t specialized _ViewInputs.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a3;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized closure #1 in PropertyList.subscript.getter(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a5, v9, v11);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of EventBindingSource.attach(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of EventBindingSource.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EventBindingSource.didUpdate(phase:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of EventBindingSource.didUpdate(gestureCategory:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of EventBindingSource.didBind(to:id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of static EventBindingBridgeFactory.makeEventBindingBridge(bindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for EventBindingBridgeFactoryInput()
{
  return &type metadata for EventBindingBridgeFactoryInput;
}

uint64_t FormatStyle.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v11((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v9);
  type metadata accessor for CalendarDependentFormatStyle();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v16, (uint64_t)v19);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    *((void *)&v17 + 1) = v12;
    uint64_t v18 = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    v14(a1, v12, v13);
    swift_dynamicCast();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    outlined destroy of CalendarDependentFormatStyle?((uint64_t)&v16);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a3, v4, a2);
  }
}

unint64_t type metadata accessor for CalendarDependentFormatStyle()
{
  unint64_t result = lazy cache variable for type metadata for CalendarDependentFormatStyle;
  if (!lazy cache variable for type metadata for CalendarDependentFormatStyle)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CalendarDependentFormatStyle);
  }
  return result;
}

uint64_t outlined destroy of CalendarDependentFormatStyle?(uint64_t a1)
{
  type metadata accessor for CalendarDependentFormatStyle?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CalendarDependentFormatStyle?()
{
  if (!lazy cache variable for type metadata for CalendarDependentFormatStyle?)
  {
    type metadata accessor for CalendarDependentFormatStyle();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CalendarDependentFormatStyle?);
    }
  }
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F07220], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.VerbatimFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F07378], a3);
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(uint64_t a1)
{
  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, MEMORY[0x263F073A0]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, MEMORY[0x263F073A0]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, MEMORY[0x263F073A0]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed(a1, a2, MEMORY[0x263F07010], a3);
}

uint64_t WhitespaceRemovingFormatStyle<>.withCalendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(v13 - 8) + 16))(a4, v4, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v8, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a4, v12, v8);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WhitespaceRemovingFormatStyle<>.withCalendar(_:)(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed(a1, a2, MEMORY[0x263F07340], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))(a4, v4, a2, v11);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13, KeyPath);
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F07440], a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))(a4, v4, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset(a1, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset, a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset(a1, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference, a3);
}

uint64_t protocol witness for CalendarDependentFormatStyle.withCalendar(_:) in conformance SystemFormatStyle.DateOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  _s7SwiftUI17SystemFormatStyleO13DateReferenceVWOcTm_1(v4, a4, a3);
  uint64_t v8 = a4 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);

  return v10(v8, a1, v9);
}

uint64_t _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double CATransform3D.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 40) = v2;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  double result = 1.0;
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = xmmword_2461BCA80;
  *(_OWORD *)(a2 + 96) = v7;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v5;
  return result;
}

__n128 ProjectionTransform.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 40) = 0;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = 0x3FF0000000000000;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  long long v5;
  __n128 result;

  long long v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  long long v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  __n128 result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = v4;
  return result;
}

BOOL ProjectionTransform.isInvertible.getter()
{
  double v1 = v0[2];
  double v2 = v0[5];
  if (v1 == 0.0 && v2 == 0.0 && v0[8] == 1.0) {
    double v3 = *v0 * v0[4] - v0[1] * v0[3];
  }
  else {
    double v3 = v1 * (v0[7] * v0[3] - v0[4] * v0[6])
  }
       + (v0[4] * v0[8] - v2 * v0[7]) * *v0
       - v0[1] * (v0[8] * v0[3] - v2 * v0[6]);
  return v3 != 0.0;
}

BOOL ProjectionTransform.isAffine.getter()
{
  return v0[2] == 0.0 && v0[5] == 0.0 && v0[8] == 1.0;
}

__n128 CGAffineTransform.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void ProjectionTransform.init()(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x3FF0000000000000;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0x3FF0000000000000;
}

double ProjectionTransform.concatenating(_:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3 = v2[1];
  double v4 = a1[1];
  double v6 = a1[2];
  double v5 = a1[3];
  double v7 = a1[6];
  double v8 = a1[7];
  double v9 = v2[2];
  double v10 = v2[3];
  double v11 = *v2 * *a1 + v3 * v5 + v9 * v7;
  double v12 = a1[4];
  double v13 = a1[5];
  double v14 = *v2 * v4 + v3 * v12 + v9 * v8;
  double v15 = a1[8];
  double v16 = *v2 * v6 + v3 * v13 + v9 * v15;
  double v17 = v2[4];
  double v18 = v2[5];
  double v19 = *a1 * v10 + v5 * v17 + v7 * v18;
  double v20 = v4 * v10 + v12 * v17 + v8 * v18;
  double v21 = v6 * v10 + v13 * v17 + v15 * v18;
  double v22 = v2[6];
  double v23 = v2[7];
  double v24 = v2[8];
  double v25 = *a1 * v22 + v5 * v23 + v7 * v24;
  *a2 = v11;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v19;
  a2[4] = v20;
  a2[5] = v21;
  a2[6] = v25;
  double result = v6 * v22 + v13 * v23 + v15 * v24;
  a2[7] = v4 * v22 + v12 * v23 + v8 * v24;
  a2[8] = result;
  return result;
}

double ProjectionTransform.m11.getter()
{
  return *(double *)v0;
}

void ProjectionTransform.m11.setter(double a1)
{
  *double v1 = a1;
}

uint64_t (*ProjectionTransform.m11.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m12.getter()
{
  return *(double *)(v0 + 8);
}

void ProjectionTransform.m12.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*ProjectionTransform.m12.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m13.getter()
{
  return *(double *)(v0 + 16);
}

void ProjectionTransform.m13.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*ProjectionTransform.m13.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m21.getter()
{
  return *(double *)(v0 + 24);
}

void ProjectionTransform.m21.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*ProjectionTransform.m21.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m22.getter()
{
  return *(double *)(v0 + 32);
}

void ProjectionTransform.m22.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*ProjectionTransform.m22.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m23.getter()
{
  return *(double *)(v0 + 40);
}

void ProjectionTransform.m23.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*ProjectionTransform.m23.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m31.getter()
{
  return *(double *)(v0 + 48);
}

void ProjectionTransform.m31.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*ProjectionTransform.m31.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m32.getter()
{
  return *(double *)(v0 + 56);
}

void ProjectionTransform.m32.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*ProjectionTransform.m32.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ProjectionTransform.m33.getter()
{
  return *(double *)(v0 + 64);
}

void ProjectionTransform.m33.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*ProjectionTransform.m33.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL ProjectionTransform.isIdentity.getter()
{
  return *v0 == 1.0
      && v0[1] == 0.0
      && v0[2] == 0.0
      && v0[3] == 0.0
      && v0[4] == 1.0
      && v0[5] == 0.0
      && v0[6] == 0.0
      && v0[7] == 0.0
      && v0[8] == 1.0;
}

double ProjectionTransform.determinant.getter()
{
  double v1 = v0[2];
  double v2 = v0[5];
  if (v1 == 0.0 && v2 == 0.0 && v0[8] == 1.0) {
    return *v0 * v0[4] - v0[1] * v0[3];
  }
  else {
    return v1 * (v0[7] * v0[3] - v0[4] * v0[6])
  }
         + (v0[4] * v0[8] - v2 * v0[7]) * *v0
         - v0[1] * (v0[8] * v0[3] - v2 * v0[6]);
}

Swift::Bool __swiftcall ProjectionTransform.invert()()
{
  double v1 = v0[4];
  double v2 = v0[5];
  double v4 = v0[7];
  double v3 = v0[8];
  double v5 = v0[6];
  double v6 = v1 * v3 - v2 * v4;
  double v7 = v0[2];
  double v8 = v0[3];
  double v9 = v3 * v8 - v2 * v5;
  double v10 = v4 * v8 - v1 * v5;
  double v12 = *v0;
  double v11 = v0[1];
  double v13 = v7 * v10 + v6 * *v0 - v11 * v9;
  if (v13 != 0.0)
  {
    *uint64_t v0 = v6 * (1.0 / v13);
    v0[1] = -(1.0 / v13 * (v3 * v11 - v4 * v7));
    v0[2] = (v2 * v11 - v1 * v7) * (1.0 / v13);
    v0[3] = -(1.0 / v13 * v9);
    v0[4] = (v3 * v12 - v5 * v7) * (1.0 / v13);
    v0[5] = -(1.0 / v13 * (v2 * v12 - v8 * v7));
    v0[6] = v10 * (1.0 / v13);
    v0[7] = -(1.0 / v13 * (v4 * v12 - v5 * v11));
    v0[8] = (v1 * v12 - v8 * v11) * (1.0 / v13);
  }
  return v13 != 0.0;
}

double ProjectionTransform.inverted()@<D0>(uint64_t a1@<X8>)
{
  long long v6 = *((_OWORD *)v1 + 2);
  long long v7 = *((_OWORD *)v1 + 3);
  double v8 = v1[8];
  long long v4 = *(_OWORD *)v1;
  long long v5 = *((_OWORD *)v1 + 1);
  if (!ProjectionTransform.invert()())
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  double result = v8;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(double *)(a1 + 64) = v8;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProjectionTransform(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  void v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return specialized static ProjectionTransform.== infix(_:_:)((double *)v7, (double *)v9);
}

double ProjectionTransform.dot(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 * a4 + a2 * a5 + a3 * a6;
}

double CGPoint.applying(_:)(uint64_t a1, double a2, double a3)
{
  double v3 = *(double *)(a1 + 64) + *(double *)(a1 + 16) * a2 + *(double *)(a1 + 40) * a3;
  double v4 = 1.0;
  if (v3 != 1.0)
  {
    if (v3 <= 0.0) {
      double v4 = INFINITY;
    }
    else {
      double v4 = 1.0 / v3;
    }
  }
  *(void *)&double result = *(_OWORD *)&vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 48), vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, a2), vmulq_n_f64(*(float64x2_t *)(a1 + 24), a3))), v4);
  return result;
}

double CGPoint.unapplying(_:)(double *a1, double result, double a3)
{
  double v3 = a1[3];
  double v5 = a1[4];
  double v4 = a1[5];
  double v6 = *a1 * v5 + v3 * (a1[2] * a3 - a1[1]) - *a1 * v4 * a3 + (a1[1] * v4 - a1[2] * v5) * result;
  if (v6 != 0.0) {
    return ((v4 * a3 - v5) * a1[6] + v3 * a1[7] + (v5 * a1[8] - v4 * a1[7]) * result - v3 * a1[8] * a3) / v6;
  }
  return result;
}

double *ProjectionTransform.encode(to:)(void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v2 = *(_OWORD *)(v1 + 48);
  uint64_t v5[2] = *(_OWORD *)(v1 + 32);
  long long v5[3] = v2;
  uint64_t v6 = *(void *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  v5[0] = *(_OWORD *)v1;
  v5[1] = v3;
  return closure #1 in ProjectionTransform.encode(to:)((double *)v5, a1);
}

double *closure #1 in ProjectionTransform.encode(to:)(double *result, void *a2)
{
  long long v3 = result;
  unint64_t v4 = 0;
  for (char i = 8; ; i += 8)
  {
    if (v4 > 8 || (double v7 = 1.0, ((1 << v4) & 0x111) == 0)) {
      double v7 = 0.0;
    }
    double v8 = v3[v4];
    if (v8 == v7) {
      goto LABEL_4;
    }
    double v9 = fabs(v8);
    char v10 = v9 >= 65536.0 ? i + 1 : i + 5;
    uint64_t v11 = a2[1];
    uint64_t v12 = a2[2];
    if (v11 >= v12)
    {
      double result = (double *)(v11 + 1);
      if (__OFADD__(v11, 1)) {
        goto LABEL_30;
      }
      if (v12 < (uint64_t)result)
      {
        double v16 = v9;
        double v15 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        double v9 = v16;
      }
      else
      {
        a2[1] = result;
        double v15 = (unsigned char *)(*a2 + v11);
      }
      *double v15 = v10 & 0x7D;
    }
    else
    {
      *(unsigned char *)(*a2 + v11) = v10;
      a2[1] = v11 + 1;
    }
    if (v9 < 65536.0) {
      break;
    }
    uint64_t v14 = a2[1];
    double result = (double *)(v14 + 8);
    if (__OFADD__(v14, 8)) {
      goto LABEL_29;
    }
    if (a2[2] < (uint64_t)result)
    {
      double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *double result = v8;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v14) = v8;
    }
LABEL_4:
    if (++v4 == 9) {
      return result;
    }
  }
  uint64_t v13 = a2[1];
  double result = (double *)(v13 + 4);
  if (!__OFADD__(v13, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      double result = (double *)(*a2 + v13);
    }
    else
    {
      double result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    float v6 = v8;
    *(float *)double result = v6;
    goto LABEL_4;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

double ProjectionTransform.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = 0x3FF0000000000000uLL;
  long long v10 = 0uLL;
  long long v11 = 0x3FF0000000000000uLL;
  long long v12 = 0uLL;
  double v13 = 1.0;
  closure #1 in ProjectionTransform.init(from:)((unint64_t)&v9, a1, &v8);
  if (!v2)
  {
    double result = v13;
    long long v5 = v10;
    long long v6 = v11;
    long long v7 = v12;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v7;
    *(double *)(a2 + 64) = result;
  }
  return result;
}

unint64_t closure #1 in ProjectionTransform.init(from:)(unint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  unint64_t v8 = result;
  while (1)
  {
    unint64_t v10 = a2[3];
    if (v10)
    {
      unint64_t v11 = a2[4];
      if (v6 < v11) {
        goto LABEL_12;
      }
      if (v11 < v6) {
        break;
      }
      a2[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_37;
    }
    unint64_t v10 = result;
    if (result <= 7) {
      break;
    }
LABEL_12:
    if (v10 <= 0x4F)
    {
      uint64_t v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x245E76448);
      }
      if (v12 < 0) {
        goto LABEL_40;
      }
      unint64_t v13 = v10 & 7;
      if (v13 == 5)
      {
        double v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1)) {
          break;
        }
        float v17 = *v16;
        a2[1] = v16 + 1;
        double v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_41;
          }
          uint64_t v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
          if (v15 < (unint64_t)v14 + result) {
            break;
          }
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1) {
            break;
          }
          uint64_t v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1)) {
          break;
        }
        double v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          break;
        case 1uLL:
          unint64_t v9 = a2[1] + 8;
          if (a2[2] >= v9) {
            goto LABEL_4;
          }
          goto LABEL_36;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          unint64_t v9 = a2[1] + result;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a2[1] + 4;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2]) {
      goto LABEL_38;
    }
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  uint64_t v4 = swift_allocError();
  double result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ProjectionTransform(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  unsigned char v6[2] = *(_OWORD *)(v1 + 32);
  v6[3] = v4;
  uint64_t v7 = v2;
  return closure #1 in ProjectionTransform.encode(to:)((double *)v6, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance ProjectionTransform@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v9 = 0x3FF0000000000000uLL;
  long long v10 = 0uLL;
  long long v11 = 0x3FF0000000000000uLL;
  long long v12 = 0uLL;
  double v13 = 1.0;
  closure #1 in ProjectionTransform.init(from:)((unint64_t)&v9, a1, &v8);
  if (!v2)
  {
    double result = v13;
    long long v5 = v10;
    long long v6 = v11;
    long long v7 = v12;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v7;
    *(double *)(a2 + 64) = result;
  }
  return result;
}

BOOL specialized static ProjectionTransform.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

ValueMetadata *type metadata accessor for ProjectionTransform()
{
  return &type metadata for ProjectionTransform;
}

SwiftUI::LuminanceCurveEffect::Curve __swiftcall LuminanceCurveEffect.Curve.init(_:)(SwiftUI::LuminanceCurveEffect::Curve result)
{
  *uint64_t v1 = result;
  return result;
}

BOOL static LuminanceCurveEffect.Curve.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

__n128 LuminanceCurveEffect.curve.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 LuminanceCurveEffect.curve.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*LuminanceCurveEffect.curve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float LuminanceCurveEffect.amount.getter()
{
  return *(float *)(v0 + 16);
}

void LuminanceCurveEffect.amount.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*LuminanceCurveEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall LuminanceCurveEffect.init(curve:amount:)(SwiftUI::LuminanceCurveEffect *__return_ptr retstr, SwiftUI::LuminanceCurveEffect::Curve curve, Swift::Float amount)
{
  retstr->curve = *v3;
  retstr->amount = curve.values._0;
}

double LuminanceCurveEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = *((unsigned int *)v1 + 4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v5;
  double result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(unsigned char *)(v6 + 132) = 13;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_245E76758()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance LuminanceCurveEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = *((unsigned int *)v1 + 4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v5;
  double result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 116) = 0u;
  *(unsigned char *)(v6 + 132) = 13;
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.luminanceCurve(_:amount:)(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  *(float *)long long v7 = a2;
  *(float *)&v7[1] = a3;
  *(float *)&void v7[2] = a4;
  *(float *)&void v7[3] = a5;
  *(float *)&_OWORD v7[4] = a6;
  return View.modifier<A>(_:)(v7, a1, &type metadata for LuminanceCurveEffect);
}

unint64_t instantiation function for generic protocol witness table for LuminanceCurveEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LuminanceCurveEffect and conformance LuminanceCurveEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LuminanceCurveEffect and conformance LuminanceCurveEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect;
  if (!lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LuminanceCurveEffect and conformance LuminanceCurveEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for LuminanceCurveEffect()
{
  return &type metadata for LuminanceCurveEffect;
}

ValueMetadata *type metadata accessor for LuminanceCurveEffect.Curve()
{
  return &type metadata for LuminanceCurveEffect.Curve;
}

uint64_t sub_245E76920()
{
  return swift_getWitnessTable();
}

double SpringAnimation.mass.getter()
{
  return *(double *)v0;
}

void SpringAnimation.mass.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SpringAnimation.mass.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.stiffness.getter()
{
  return *(double *)(v0 + 8);
}

void SpringAnimation.stiffness.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpringAnimation.stiffness.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.damping.getter()
{
  return *(double *)(v0 + 16);
}

void SpringAnimation.damping.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpringAnimation.damping.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SpringAnimation.initialVelocity.getter()
{
  return *(double *)(v0 + 24);
}

void SpringAnimation.initialVelocity.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*SpringAnimation.initialVelocity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void SpringAnimation.init(mass:stiffness:damping:initialVelocity:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

void SpringAnimation.init(mass:stiffness:damping:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
}

uint64_t specialized SpringAnimation.animate<A>(value:time:context:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  SpringModel.duration(epsilon:)(0.001);
  if (v9 <= a3 || (double v10 = SpringModel.sample(at:)(a3), (~*(void *)&v10 & 0x7FF0000000000000) == 0))
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  if ((~*(void *)&a5 & 0x7FF0000000000000) == 0)
  {
    if (a3 < 0.0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (6.28318531 / sqrt(a5) <= a3) {
LABEL_8:
  }
    *(unsigned char *)(a1 + 17) = 1;
LABEL_9:
  *(double *)&uint64_t result = v10 * a2;
  return result;
}

void SpringAnimation.function.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  SpringModel.duration(epsilon:)(0.001);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = 5;
}

void SpringAnimation.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *v0;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int SpringAnimation.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpringAnimation()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpringAnimation()
{
  return Hasher._finalize()();
}

void *SpringAnimation.encode(to:)(void *result)
{
  Swift::UInt64 v2 = v1;
  Swift::UInt64 v3 = result;
  double v5 = *v2;
  double v4 = v2[1];
  double v7 = v2[2];
  double v6 = v2[3];
  if (*v2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v8 = v3[1];
    uint64_t result = (void *)(v8 + 8);
    if (__OFADD__(v8, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v8) = v5;
      goto LABEL_5;
    }
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)uint64_t result = v5;
  }
LABEL_5:
  if (v4 == 100.0) {
    goto LABEL_9;
  }
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  uint64_t v9 = v3[1];
  uint64_t result = (void *)(v9 + 8);
  if (__OFADD__(v9, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v9) = v4;
    goto LABEL_9;
  }
  uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)uint64_t result = v4;
LABEL_9:
  if (v7 == 20.0) {
    goto LABEL_13;
  }
  ProtobufEncoder.encodeVarint(_:)(0x19uLL);
  uint64_t v10 = v3[1];
  uint64_t result = (void *)(v10 + 8);
  if (__OFADD__(v10, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(double *)(*v3 + v10) = v7;
LABEL_13:
    if (v6 == 0.0) {
      return result;
    }
LABEL_14:
    ProtobufEncoder.encodeVarint(_:)(0x21uLL);
    uint64_t v11 = v3[1];
    uint64_t result = (void *)(v11 + 8);
    if (__OFADD__(v11, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(double *)(*v3 + v11) = v6;
      return result;
    }
    uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *(double *)uint64_t result = v6;
    return result;
  }
  uint64_t result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *(double *)uint64_t result = v7;
  if (v6 != 0.0) {
    goto LABEL_14;
  }
  return result;
}

unint64_t SpringAnimation.init(from:)@<X0>(unint64_t result@<X0>, double *a2@<X8>)
{
  Swift::UInt64 v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  double v7 = 1.0;
  double v8 = 20.0;
  if (v5 < v6)
  {
    double v9 = 100.0;
    double v10 = 0.0;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v11 = v3[4];
        if (v5 < v11) {
          goto LABEL_15;
        }
        if (v11 < v5) {
          goto LABEL_71;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      switch(result >> 3)
      {
        case 1uLL:
          unint64_t v12 = result & 7;
          switch(v12)
          {
            case 5uLL:
              double v20 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v20 + 1);
              if (v6 < (unint64_t)(v20 + 1)) {
                goto LABEL_71;
              }
              float v21 = *v20;
              v3[1] = v5;
              double v7 = v21;
              goto LABEL_8;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                JUMPOUT(0x245E772ECLL);
              }
              double v13 = (double *)v3[1];
              if (v6 < (unint64_t)v13 + result) {
                goto LABEL_71;
              }
              v3[3] = 9;
              v3[4] = (char *)v13 + result;
              break;
            case 1uLL:
              double v13 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v13 + 1);
          if (v6 < (unint64_t)(v13 + 1)) {
            goto LABEL_71;
          }
          double v7 = *v13;
          goto LABEL_7;
        case 2uLL:
          unint64_t v14 = result & 7;
          switch(v14)
          {
            case 5uLL:
              double v22 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v22 + 1);
              if (v6 < (unint64_t)(v22 + 1)) {
                goto LABEL_71;
              }
              float v23 = *v22;
              v3[1] = v5;
              double v9 = v23;
              goto LABEL_8;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_74;
              }
              unint64_t v15 = (double *)v3[1];
              if (v6 < (unint64_t)v15 + result) {
                goto LABEL_71;
              }
              v3[3] = 17;
              v3[4] = (char *)v15 + result;
              break;
            case 1uLL:
              unint64_t v15 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v15 + 1);
          if (v6 < (unint64_t)(v15 + 1)) {
            goto LABEL_71;
          }
          double v9 = *v15;
          goto LABEL_7;
        case 3uLL:
          unint64_t v16 = result & 7;
          switch(v16)
          {
            case 5uLL:
              double v24 = (float *)v3[1];
              unint64_t v5 = (unint64_t)(v24 + 1);
              if (v6 < (unint64_t)(v24 + 1)) {
                goto LABEL_71;
              }
              float v25 = *v24;
              v3[1] = v5;
              double v8 = v25;
              goto LABEL_8;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_75;
              }
              float v17 = (double *)v3[1];
              if (v6 < (unint64_t)v17 + result) {
                goto LABEL_71;
              }
              v3[3] = 25;
              v3[4] = (char *)v17 + result;
              break;
            case 1uLL:
              float v17 = (double *)v3[1];
              break;
            default:
              goto LABEL_71;
          }
          unint64_t v5 = (unint64_t)(v17 + 1);
          if (v6 < (unint64_t)(v17 + 1)) {
            goto LABEL_71;
          }
          double v8 = *v17;
          goto LABEL_7;
        case 4uLL:
          unint64_t v18 = result & 7;
          if (v18 == 5)
          {
            long long v26 = (float *)v3[1];
            unint64_t v5 = (unint64_t)(v26 + 1);
            if (v6 < (unint64_t)(v26 + 1)) {
              goto LABEL_71;
            }
            float v27 = *v26;
            v3[1] = v5;
            double v10 = v27;
          }
          else
          {
            if (v18 == 2)
            {
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
              double v19 = (double *)v3[1];
              if (v6 < (unint64_t)v19 + result) {
                goto LABEL_71;
              }
              v3[3] = 33;
              v3[4] = (char *)v19 + result;
            }
            else
            {
              if (v18 != 1) {
                goto LABEL_71;
              }
              double v19 = (double *)v3[1];
            }
            unint64_t v5 = (unint64_t)(v19 + 1);
            if (v6 < (unint64_t)(v19 + 1)) {
              goto LABEL_71;
            }
            double v10 = *v19;
LABEL_7:
            v3[1] = v5;
          }
LABEL_8:
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_8;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_6;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_77;
              }
              unint64_t v5 = v3[1] + result;
LABEL_6:
              if (v6 >= v5) {
                goto LABEL_7;
              }
              goto LABEL_71;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_6;
            default:
              goto LABEL_71;
          }
      }
    }
  }
  double v10 = 0.0;
  double v9 = 100.0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v8;
  a2[3] = v10;
  return result;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SpringAnimation(void *a1)
{
  return SpringAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance SpringAnimation@<X0>(unint64_t a1@<X0>, double *a2@<X8>)
{
  return SpringAnimation.init(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAnimation.leafProtobufTag.getter in conformance SpringAnimation()
{
  return 2;
}

ValueMetadata *type metadata accessor for SpringAnimation()
{
  return &type metadata for SpringAnimation;
}

uint64_t specialized static Animation.interpolatingSpring(duration:bounce:initialVelocity:)(double a1, double a2, double a3)
{
  if (a1 <= 0.0) {
    double v4 = INFINITY;
  }
  else {
    double v4 = 6.28318531 / a1 * (6.28318531 / a1);
  }
  double v5 = INFINITY;
  double v6 = 1.0;
  double v7 = 1.0 - a2;
  if (a2 > 1.0) {
    double v7 = 0.0;
  }
  if (a2 != 0.0) {
    double v6 = v7;
  }
  if (a2 < 0.0) {
    double v6 = 1.0 / (a2 + 1.0);
  }
  if (a2 > -1.0) {
    double v5 = v6;
  }
  double v8 = sqrt(v4);
  double v9 = (v8 + v8) * v5;
  type metadata accessor for InternalAnimationBox<SpringAnimation>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x3FF0000000000000;
  *(double *)(result + 24) = v4;
  *(double *)(result + 32) = v9;
  *(double *)(result + 40) = a3;
  return result;
}

double EdgeInsets.init()()
{
  return 0.0;
}

float64x2_t EdgeInsets.formPointwiseMin(_:)(float64x2_t a1, float64_t a2, float64x2_t a3, float64_t a4)
{
  a1.f64[1] = a2;
  float64x2_t result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v4, a1), (int8x16_t)a1, *(int8x16_t *)v4);
  a3.f64[1] = a4;
  int8x16_t v6 = vbslq_s8((int8x16_t)vcgtq_f64(v4[1], a3), (int8x16_t)a3, (int8x16_t)v4[1]);
  *double v4 = result;
  v4[1] = (float64x2_t)v6;
  return result;
}

double EdgeInsets.subtracting(_:)(double a1, double a2, double a3, double a4, double a5)
{
  return a5 - a1;
}

void EdgeInsets.top.setter(double a1)
{
  *Swift::UInt64 v1 = a1;
}

uint64_t (*EdgeInsets.top.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.leading.getter(double a1, double a2)
{
  return a2;
}

void EdgeInsets.leading.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*EdgeInsets.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.bottom.getter(double a1, double a2, double a3)
{
  return a3;
}

void EdgeInsets.bottom.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*EdgeInsets.bottom.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double EdgeInsets.trailing.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

void EdgeInsets.trailing.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*EdgeInsets.trailing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static OptionalEdgeInsets.zero.getter@<W0>(uint64_t a1@<X8>)
{
  Swift::Bool v2 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  Swift::Bool v3 = Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Swift::Bool v4 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  BOOL result = Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = !v2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = !v3;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = !v4;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = !result;
  return result;
}

uint64_t OptionalEdgeInsets.top.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.top.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.leading.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.bottom.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.bottom.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.trailing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.trailing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OptionalEdgeInsets.init(top:leading:bottom:trailing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  return result;
}

uint64_t (*OptionalEdgeInsets.subscript.modify(uint64_t a1, char a2))(uint64_t result, char a2)
{
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 9) = a2;
  Swift::Bool v3 = (char *)(v2 + 1);
  switch(a2)
  {
    case 1:
      Swift::Bool v3 = (char *)(v2 + 3);
      v2 += 2;
      break;
    case 2:
      Swift::Bool v3 = (char *)(v2 + 5);
      v2 += 4;
      break;
    case 3:
      Swift::Bool v3 = (char *)(v2 + 7);
      v2 += 6;
      break;
    default:
      break;
  }
  char v4 = *v3;
  *(void *)a1 = *v2;
  *(unsigned char *)(a1 + 8) = v4;
  return OptionalEdgeInsets.subscript.modify;
}

uint64_t OptionalEdgeInsets.subscript.modify(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 8);
  if (a2)
  {
    switch(*(unsigned char *)(result + 9))
    {
      case 1:
        goto LABEL_7;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_6;
      default:
        goto LABEL_4;
    }
  }
  switch(*(unsigned char *)(result + 9))
  {
    case 1:
LABEL_7:
      uint64_t v7 = *(void *)(result + 16);
      char v4 = (unsigned char *)(v7 + 24);
      Swift::Bool v3 = (void *)(v7 + 16);
      break;
    case 2:
LABEL_5:
      uint64_t v5 = *(void *)(result + 16);
      char v4 = (unsigned char *)(v5 + 40);
      Swift::Bool v3 = (void *)(v5 + 32);
      break;
    case 3:
LABEL_6:
      uint64_t v6 = *(void *)(result + 16);
      char v4 = (unsigned char *)(v6 + 56);
      Swift::Bool v3 = (void *)(v6 + 48);
      break;
    default:
LABEL_4:
      Swift::Bool v3 = *(void **)(result + 16);
      char v4 = v3 + 1;
      break;
  }
  *Swift::Bool v3 = *(void *)result;
  *char v4 = v2;
  return result;
}

BOOL OptionalEdgeInsets.in(axes:)@<W0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  uint64_t v5 = v1[2];
  char v6 = *((unsigned char *)v1 + 24);
  uint64_t v7 = v1[4];
  char v8 = *((unsigned char *)v1 + 40);
  uint64_t v9 = v1[6];
  char v10 = *((unsigned char *)v1 + 56);
  if (!Axis.Set.contains(_:)(SwiftUI_Axis_vertical))
  {
    char v8 = 1;
    char v4 = 1;
    uint64_t v7 = 0;
    uint64_t v3 = 0;
  }
  BOOL result = Axis.Set.contains(_:)(SwiftUI_Axis_horizontal);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  if (result) {
    char v12 = v10;
  }
  else {
    char v12 = 1;
  }
  if (result) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 16) = v13;
  if (result) {
    char v14 = v6;
  }
  else {
    char v14 = 1;
  }
  if (result) {
    uint64_t v15 = v9;
  }
  else {
    uint64_t v15 = 0;
  }
  *(unsigned char *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 56) = v12;
  return result;
}

uint64_t OptionalEdgeInsets.in(edges:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3 = a1;
  uint64_t v4 = v2[2];
  char v5 = *((unsigned char *)v2 + 24);
  uint64_t v6 = v2[4];
  char v7 = *((unsigned char *)v2 + 40);
  uint64_t v8 = v2[6];
  uint64_t result = *((unsigned __int8 *)v2 + 56);
  uint64_t v10 = byte_26FA5B5D0;
  if (byte_26FA5B5D0 - 9 < 0xEF
    || byte_26FA5B5D0 < 0
    || byte_26FA5B5D0 > 7u
    || ((1 << byte_26FA5B5D0) & ~v3) == 0)
  {
LABEL_9:
    char v11 = *((unsigned char *)v2 + 8);
    uint64_t v10 = *v2;
  }
  else
  {
    char v11 = 1;
    switch(byte_26FA5B5D0)
    {
      case 1:
        uint64_t v4 = 0;
        char v5 = 1;
        goto LABEL_9;
      case 2:
        uint64_t v6 = 0;
        char v7 = 1;
        goto LABEL_9;
      case 3:
        uint64_t v8 = 0;
        uint64_t result = 1;
        goto LABEL_9;
      default:
        break;
    }
  }
  uint64_t v12 = byte_26FA5B5D1;
  if (byte_26FA5B5D1 - 9 < 0xEF
    || byte_26FA5B5D1 < 0
    || byte_26FA5B5D1 >= 8u
    || ((1 << byte_26FA5B5D1) & ~v3) == 0)
  {
LABEL_18:
    char v13 = v11;
    uint64_t v12 = v10;
  }
  else
  {
    char v13 = 1;
    switch(byte_26FA5B5D1)
    {
      case 1:
        uint64_t v4 = 0;
        char v5 = 1;
        goto LABEL_18;
      case 2:
        uint64_t v6 = 0;
        char v7 = 1;
        goto LABEL_18;
      case 3:
        uint64_t v8 = 0;
        uint64_t result = 1;
        goto LABEL_18;
      default:
        break;
    }
  }
  uint64_t v14 = byte_26FA5B5D2;
  if (byte_26FA5B5D2 - 9 < 0xEF
    || byte_26FA5B5D2 < 0
    || byte_26FA5B5D2 >= 8u
    || ((1 << byte_26FA5B5D2) & ~v3) == 0)
  {
LABEL_27:
    char v15 = v13;
    uint64_t v14 = v12;
  }
  else
  {
    char v15 = 1;
    switch(byte_26FA5B5D2)
    {
      case 1:
        uint64_t v4 = 0;
        char v5 = 1;
        goto LABEL_27;
      case 2:
        uint64_t v6 = 0;
        char v7 = 1;
        goto LABEL_27;
      case 3:
        uint64_t v8 = 0;
        uint64_t result = 1;
        goto LABEL_27;
      default:
        break;
    }
  }
  uint64_t v16 = byte_26FA5B5D3;
  if (byte_26FA5B5D3 - 9 < 0xEF
    || byte_26FA5B5D3 < 0
    || byte_26FA5B5D3 >= 8u
    || ((1 << byte_26FA5B5D3) & ~v3) == 0)
  {
LABEL_36:
    char v17 = v15;
    uint64_t v16 = v14;
  }
  else
  {
    char v17 = 1;
    switch(byte_26FA5B5D3)
    {
      case 1:
        uint64_t v4 = 0;
        char v5 = 1;
        goto LABEL_36;
      case 2:
        uint64_t v6 = 0;
        char v7 = 1;
        goto LABEL_36;
      case 3:
        uint64_t v8 = 0;
        uint64_t result = 1;
        goto LABEL_36;
      default:
        break;
    }
  }
  *(void *)a2 = v16;
  *(unsigned char *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(unsigned char *)(a2 + 56) = result;
  return result;
}

double OptionalEdgeInsets.in(axes:)()
{
  double v1 = *(double *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::Bool v3 = Axis.Set.contains(_:)(SwiftUI_Axis_vertical);
  if (v2) {
    double v4 = 0.0;
  }
  else {
    double v4 = v1;
  }
  if (v3) {
    double v5 = v4;
  }
  else {
    double v5 = 0.0;
  }
  Axis.Set.contains(_:)(SwiftUI_Axis_horizontal);
  return v5;
}

void OptionalEdgeInsets.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt64 v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt64 v5 = *(void *)(v0 + 48);
  int v6 = *(unsigned __int8 *)(v0 + 56);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_19:
    Hasher._combine(_:)(0);
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
  Swift::UInt64 v10 = *(void *)v0;
  Hasher._combine(_:)(1u);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v10;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if (v2) {
    goto LABEL_19;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if (!v4)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v3;
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    if (!v6) {
      goto LABEL_11;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_20:
  Hasher._combine(_:)(0);
  if (v6) {
    goto LABEL_21;
  }
LABEL_11:
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v5;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
}

Swift::Int OptionalEdgeInsets.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OptionalEdgeInsets()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalEdgeInsets()
{
  return Hasher._finalize()();
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

uint64_t *(*EdgeInsets.subscript.modify(uint64_t a1, char a2))(uint64_t *result, char a2)
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  Swift::UInt64 v3 = v2 + 1;
  switch(a2)
  {
    case 1:
      break;
    case 2:
      Swift::UInt64 v3 = v2 + 2;
      break;
    case 3:
      Swift::UInt64 v3 = v2 + 3;
      break;
    default:
      Swift::UInt64 v3 = v2;
      break;
  }
  *(void *)a1 = *v3;
  return EdgeInsets.subscript.modify;
}

uint64_t *EdgeInsets.subscript.modify(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if (a2)
  {
    switch(*((unsigned char *)result + 16))
    {
      case 1:
        goto LABEL_7;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_6;
      default:
        goto LABEL_4;
    }
  }
  switch(*((unsigned char *)result + 16))
  {
    case 1:
LABEL_7:
      *(void *)(result[1] + 8) = v2;
      break;
    case 2:
LABEL_5:
      *(void *)(result[1] + 16) = v2;
      break;
    case 3:
LABEL_6:
      *(void *)(result[1] + 24) = v2;
      break;
    default:
LABEL_4:
      *(void *)result[1] = v2;
      break;
  }
  return result;
}

double EdgeInsets.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

double EdgeInsets.merge(_:)(unsigned char *a1)
{
  if (!a1[8]) {
    return *(double *)a1;
  }
  return result;
}

float64x2_t EdgeInsets.formPointwiseMax(_:)(float64x2_t a1, float64_t a2, float64x2_t a3, float64_t a4)
{
  a1.f64[1] = a2;
  float64x2_t result = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(a1, *v4), (int8x16_t)a1, *(int8x16_t *)v4);
  a3.f64[1] = a4;
  int8x16_t v6 = vbslq_s8((int8x16_t)vcgeq_f64(a3, v4[1]), (int8x16_t)a3, (int8x16_t)v4[1]);
  *int v4 = result;
  v4[1] = (float64x2_t)v6;
  return result;
}

void EdgeInsets.hash(into:)(double a1, double a2, double a3, double a4)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&a4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
}

double specialized CGRect.inset(by:layoutDirection:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v11 = a5;
  v21.origin.CGFloat x = a5;
  v21.origin.CGFloat y = a6;
  v21.size.CGFloat width = a7;
  v21.size.CGFloat height = a8;
  if (!CGRectIsNull(v21))
  {
    v22.origin.CGFloat x = v11;
    v22.origin.CGFloat y = a6;
    v22.size.CGFloat width = a7;
    v22.size.CGFloat height = a8;
    CGRect v23 = CGRectStandardize(v22);
    if (a2 == a4) {
      double v16 = a4;
    }
    else {
      double v16 = a2;
    }
    double v11 = v16 + v23.origin.x;
    double v17 = v23.origin.y + a1;
    double v18 = v23.size.width - (a2 + a4);
    double v19 = v23.size.height - (a1 + a3);
    v24.origin.CGFloat x = v16 + v23.origin.x;
    v24.origin.CGFloat y = v23.origin.y + a1;
    v24.size.CGFloat width = v18;
    v24.size.CGFloat height = v19;
    if (CGRectGetWidth(v24) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
    v25.origin.CGFloat x = v11;
    v25.origin.CGFloat y = v17;
    v25.size.CGFloat width = v18;
    v25.size.CGFloat height = v19;
    if (CGRectGetHeight(v25) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
  }
  return v11;
}

double CGRect.outset(by:layoutDirection:)(void (*a1)(uint64_t *__return_ptr, double), double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double v12 = a6;
  v29.origin.double x = a6;
  v29.origin.double y = a7;
  v29.size.double width = a8;
  v29.size.CGFloat height = a9;
  if (!CGRectIsNull(v29))
  {
    v30.origin.double x = v12;
    v30.origin.double y = a7;
    v30.size.double width = a8;
    v30.size.CGFloat height = a9;
    CGRect v31 = CGRectStandardize(v30);
    double x = v31.origin.x;
    double y = v31.origin.y;
    double width = v31.size.width;
    double v21 = -a5;
    if (a3 != a5)
    {
      CGFloat height = v31.size.height;
      a1(&v28, v21);
      v31.size.CGFloat height = height;
      if ((_BYTE)v28) {
        double v23 = a5;
      }
      else {
        double v23 = a3;
      }
      double v21 = -v23;
    }
    double v12 = x + v21;
    double v24 = y - a2;
    double v25 = width - (-a5 - a3);
    double v26 = v31.size.height - (-a4 - a2);
    v32.origin.double x = v12;
    v32.origin.double y = v24;
    v32.size.double width = v25;
    v32.size.CGFloat height = v26;
    if (CGRectGetWidth(v32) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
    v33.origin.double x = v12;
    v33.origin.double y = v24;
    v33.size.double width = v25;
    v33.size.CGFloat height = v26;
    if (CGRectGetHeight(v33) < 0.0) {
      return *MEMORY[0x263F001A0];
    }
  }
  return v12;
}

__C::CGRect __swiftcall CGRect.outset(bySize:)(CGSize bySize)
{
  double v5 = v4;
  double v6 = v3;
  double v7 = v2;
  double v8 = v1;
  double height = bySize.height;
  double width = bySize.width;
  v15.origin.double x = v1;
  v15.origin.double y = v2;
  v15.size.double width = v3;
  v15.size.double height = v4;
  if (!CGRectIsNull(v15))
  {
    v16.origin.double x = v8;
    v16.origin.double y = v7;
    v16.size.double width = v6;
    v16.size.double height = v5;
    CGRect v17 = CGRectStandardize(v16);
    double v8 = v17.origin.x - width;
    double v7 = v17.origin.y - height;
    double v6 = v17.size.width - (-width - width);
    double v5 = v17.size.height - (-height - height);
    v17.origin.double x = v17.origin.x - width;
    v17.origin.double y = v17.origin.y - height;
    v17.size.double width = v6;
    v17.size.double height = v5;
    if (CGRectGetWidth(v17) < 0.0
      || (v18.origin.x = v8, v18.origin.double y = v7, v18.size.width = v6, v18.size.height = v5, CGRectGetHeight(v18) < 0.0))
    {
      double v8 = *MEMORY[0x263F001A0];
      double v7 = *(double *)(MEMORY[0x263F001A0] + 8);
      double v6 = *(double *)(MEMORY[0x263F001A0] + 16);
      double v5 = *(double *)(MEMORY[0x263F001A0] + 24);
    }
  }
  double v11 = v8;
  double v12 = v7;
  double v13 = v6;
  double v14 = v5;
  result.size.double height = v14;
  result.size.double width = v13;
  result.origin.double y = v12;
  result.origin.double x = v11;
  return result;
}

void EdgeInsets.animatableData.setter(double a1, double a2, double a3, double a4)
{
  *CGFloat v4 = a1;
  v4[1] = a2;
  long long v4[2] = a3;
  long long v4[3] = a4;
}

uint64_t (*EdgeInsets.animatableData.modify(void *a1))()
{
  CGFloat v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)CGFloat v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

double *EdgeInsets.encode(to:)(void *a1, double a2, double a3, double a4, double a5)
{
  _OWORD v6[4] = *(double *)MEMORY[0x263EF8340];
  v6[0] = a2;
  v6[1] = a3;
  unsigned char v6[2] = a4;
  v6[3] = a5;
  return closure #1 in EdgeInsets.encode(to:)(v6, a1);
}

double *closure #1 in EdgeInsets.encode(to:)(double *result, void *a2)
{
  CGFloat v3 = result;
  uint64_t v4 = 0;
  while (1)
  {
    double v6 = v3[v4];
    if (v6 == 0.0) {
      goto LABEL_4;
    }
    double v7 = fabs(v6);
    char v8 = v4 * 8 + 5;
    if (v7 >= 65536.0) {
      char v8 = v4 * 8 + 1;
    }
    char v9 = v8 + 8;
    uint64_t v10 = a2[1];
    uint64_t v11 = a2[2];
    if (v10 >= v11)
    {
      __C::CGRect result = (double *)(v10 + 1);
      if (__OFADD__(v10, 1)) {
        goto LABEL_26;
      }
      if (v11 < (uint64_t)result)
      {
        double v16 = v7;
        char v15 = v9;
        double v14 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
        char v9 = v15;
        double v7 = v16;
      }
      else
      {
        a2[1] = result;
        double v14 = (unsigned char *)(*a2 + v10);
      }
      unsigned char *v14 = v9 & 0x7D;
    }
    else
    {
      *(unsigned char *)(*a2 + v10) = v9;
      a2[1] = v10 + 1;
    }
    if (v7 < 65536.0) {
      break;
    }
    uint64_t v13 = a2[1];
    __C::CGRect result = (double *)(v13 + 8);
    if (__OFADD__(v13, 8)) {
      goto LABEL_25;
    }
    if (a2[2] < (uint64_t)result)
    {
      __C::CGRect result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
      *__C::CGRect result = v6;
    }
    else
    {
      a2[1] = result;
      *(double *)(*a2 + v13) = v6;
    }
LABEL_4:
    if (++v4 == 4) {
      return result;
    }
  }
  uint64_t v12 = a2[1];
  __C::CGRect result = (double *)(v12 + 4);
  if (!__OFADD__(v12, 4))
  {
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      __C::CGRect result = (double *)(*a2 + v12);
    }
    else
    {
      __C::CGRect result = (double *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    float v5 = v6;
    *(float *)__C::CGRect result = v5;
    goto LABEL_4;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

double EdgeInsets.init(from:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  closure #1 in EdgeInsets.init(from:)((unint64_t)v4, a1, &v3);
  if (!v1) {
    return *(double *)v4;
  }
  return result;
}

unint64_t closure #1 in EdgeInsets.init(from:)(unint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  unint64_t v8 = result;
  while (1)
  {
    unint64_t v10 = a2[3];
    if (v10)
    {
      unint64_t v11 = a2[4];
      if (v6 < v11) {
        goto LABEL_12;
      }
      if (v11 < v6) {
        break;
      }
      a2[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_37;
    }
    unint64_t v10 = result;
    if (result <= 7) {
      break;
    }
LABEL_12:
    if (v10 <= 0x27)
    {
      uint64_t v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x245E789BCLL);
      }
      if (v12 < 0) {
        goto LABEL_40;
      }
      unint64_t v13 = v10 & 7;
      if (v13 == 5)
      {
        double v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1)) {
          break;
        }
        float v17 = *v16;
        a2[1] = v16 + 1;
        double v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_41;
          }
          double v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
          if (v15 < (unint64_t)v14 + result) {
            break;
          }
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1) {
            break;
          }
          double v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1)) {
          break;
        }
        double v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          break;
        case 1uLL:
          unint64_t v9 = a2[1] + 8;
          if (a2[2] >= v9) {
            goto LABEL_4;
          }
          goto LABEL_36;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          unint64_t v9 = a2[1] + result;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a2[1] + 4;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2]) {
      goto LABEL_38;
    }
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  uint64_t v4 = swift_allocError();
  double result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EdgeInsets(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  long long v2 = v1[1];
  v4[0] = *v1;
  v4[1] = v2;
  return closure #1 in EdgeInsets.encode(to:)((double *)v4, a1);
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance EdgeInsets@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v7 = 0u;
  long long v8 = 0u;
  closure #1 in EdgeInsets.init(from:)((unint64_t)&v7, a1, &v6);
  if (!v2)
  {
    double result = *(double *)&v7;
    long long v5 = v8;
    *a2 = v7;
    a2[1] = v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OptionalEdgeInsets and conformance OptionalEdgeInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets;
  if (!lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionalEdgeInsets and conformance OptionalEdgeInsets);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for EdgeInsets(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets();
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_245E78B30@<X0>(void *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)(result + 1);
  switch(*a2)
  {
    case 1:
      uint64_t v3 = (char *)(result + 3);
      result += 2;
      break;
    case 2:
      uint64_t v3 = (char *)(result + 5);
      result += 4;
      break;
    case 3:
      uint64_t v3 = (char *)(result + 7);
      result += 6;
      break;
    default:
      break;
  }
  char v4 = *v3;
  *(void *)a3 = *result;
  *(unsigned char *)(a3 + 8) = v4;
  return result;
}

uint64_t *sub_245E78B9C(uint64_t *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  char v4 = *((unsigned char *)result + 8);
  switch(*a3)
  {
    case 1:
      *(void *)(a2 + 16) = v3;
      *(unsigned char *)(a2 + 24) = v4;
      break;
    case 2:
      *(void *)(a2 + 32) = v3;
      *(unsigned char *)(a2 + 40) = v4;
      break;
    case 3:
      *(void *)(a2 + 48) = v3;
      *(unsigned char *)(a2 + 56) = v4;
      break;
    default:
      *(void *)a2 = v3;
      *(unsigned char *)(a2 + 8) = v4;
      break;
  }
  return result;
}

uint64_t sub_245E78C08()
{
  return 0;
}

double sub_245E78C18@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1 + 1;
  switch(*a2)
  {
    case 1:
      break;
    case 2:
      uint64_t v3 = a1 + 2;
      break;
    case 3:
      uint64_t v3 = a1 + 3;
      break;
    default:
      uint64_t v3 = a1;
      break;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

uint64_t *sub_245E78C70(uint64_t *result, void *a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  switch(*a3)
  {
    case 1:
      a2[1] = v3;
      break;
    case 2:
      a2 += 2;
      goto LABEL_4;
    case 3:
      a2[3] = v3;
      break;
    default:
LABEL_4:
      *a2 = v3;
      break;
  }
  return result;
}

uint64_t sub_245E78CC4()
{
  return 0;
}

__n128 sub_245E78CD4@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_245E78CE0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for OptionalEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OptionalEdgeInsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 57) = v3;
  return result;
}

SwiftUI::Spacing __swiftcall Spacing.init(minima:)(SwiftUI::Spacing minima)
{
  v1->minima._rawuint64_t Value = minima.minima._rawValue;
  return minima;
}

unsigned __int8 *Spacing.incorporate(_:of:)(unsigned __int8 *result)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = *result;
  if (*result)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized Sequence.filter(_:)(v4, v3);
    uint64_t v6 = specialized _arrayForceCast<A, B>(_:)(v5);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, isUniquelyReferenced_nonNull_native, (void (*)(_OWORD *__return_ptr, id *, void *))specialized max<A>(_:_:));
    *uint64_t v2 = v8;
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

void *Spacing.Key.init(category:edge:)@<X0>(void *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  *(void *)a3 = *result;
  *(unsigned char *)(a3 + 8) = v3;
  return result;
}

void Spacing.Value.init(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  int v4 = a2;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = MEMORY[0x263F8EE78];
  int64_t v22 = v9;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v3 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v9) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v3;
    if (!v14)
    {
      int64_t v3 = v13 + 1;
      if (v13 + 1 >= v9) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v3);
      if (!v14)
      {
        int64_t v3 = v13 + 2;
        if (v13 + 2 >= v9) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v3);
        if (!v14)
        {
          int64_t v3 = v13 + 3;
          if (v13 + 3 >= v9) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v3);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v3 << 6);
LABEL_22:
    uint64_t v16 = *(void *)(v2 + 48) + 16 * v12;
    unsigned int v17 = *(unsigned __int8 *)(v16 + 8);
    if (v17 - 9 < 0xEF || (v17 & 0x80) != 0 || v17 > 7 || ((1 << v17) & ~v4) == 0)
    {
      uint64_t v18 = *(void *)(v2 + 56) + 40 * v12;
      uint64_t v27 = *(void *)v18;
      uint64_t v28 = *(void *)v16;
      uint64_t v25 = *(void *)(v18 + 16);
      uint64_t v26 = *(void *)(v18 + 8);
      uint64_t v24 = *(void *)(v18 + 24);
      char v23 = *(unsigned char *)(v18 + 32);
      __n128 result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        __n128 result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
      }
      unint64_t v20 = *(void *)(v10 + 16);
      unint64_t v19 = *(void *)(v10 + 24);
      if (v20 >= v19 >> 1) {
        __n128 result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      }
      *(void *)(v10 + 16) = v20 + 1;
      uint64_t v21 = v10 + 56 * v20;
      *(void *)(v21 + 32) = v28;
      *(unsigned char *)(v21 + 40) = v17;
      *(void *)(v21 + 48) = v27;
      *(void *)(v21 + 56) = v26;
      *(void *)(v21 + 64) = v25;
      *(void *)(v21 + 72) = v24;
      *(unsigned char *)(v21 + 80) = v23;
      int64_t v9 = v22;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v9)
  {
LABEL_32:
    swift_release();
    return v10;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v3);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

unsigned char *Spacing.reset(_:layoutDirection:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v4 = *a2;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v4, &v3);
  return Spacing.reset(_:)(&v3);
}

uint64_t Spacing.clear(_:layoutDirection:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v7 = *a2;
  uint64_t result = AbsoluteEdge.Set.init(_:layoutDirection:)(&v7, &v8);
  unsigned __int8 v4 = (unint64_t *)v8;
  if (v8)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized _NativeDictionary.filter(_:)(v5, v4);
    uint64_t result = swift_bridgeObjectRelease_n();
    *uint64_t v2 = v6;
  }
  return result;
}

void Spacing.isLayoutDirectionSymmetric.getter()
{
  int64_t v1 = 0;
  uint64_t v2 = *v0;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v1 << 6);
LABEL_25:
    uint64_t v14 = *(void *)(v2 + 48) + 16 * v10;
    if (*(void *)v14)
    {
      uint64_t v15 = *(void *)(v2 + 56) + 40 * v10;
      float64x2_t v16 = *(float64x2_t *)v15;
      float64x2_t v17 = *(float64x2_t *)(v15 + 16);
      int v18 = *(unsigned __int8 *)(v15 + 32);
      int v19 = *(unsigned __int8 *)(v14 + 8);
      if (v19 == 1)
      {
        Swift::UInt8 v20 = 3;
        if (!*(void *)(v2 + 16)) {
          return;
        }
        goto LABEL_31;
      }
      if (v19 == 3)
      {
        Swift::UInt8 v20 = 1;
        if (!*(void *)(v2 + 16)) {
          return;
        }
LABEL_31:
        float64x2_t v40 = v17;
        float64x2_t v42 = v16;
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)v14, v20);
        if ((v22 & 1) == 0) {
          return;
        }
        uint64_t v23 = *(void *)(v2 + 56) + 40 * v21;
        float64x2_t v24 = *(float64x2_t *)v23;
        int v25 = *(unsigned __int8 *)(v23 + 32);
        if (v18)
        {
          int32x4_t v26 = (int32x4_t)vceqq_f64(v42, v24);
          int32x4_t v27 = (int32x4_t)vceqq_f64(v40, *(float64x2_t *)(v23 + 16));
          if (v18 == 1)
          {
            if (v25 != 1) {
              return;
            }
          }
          else if (v25 != 2)
          {
            return;
          }
          if ((~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32(v26, v27)), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)return; {
        }
          }
        else
        {
          if (*(unsigned char *)(v23 + 32)) {
            BOOL v8 = 0;
          }
          else {
            BOOL v8 = v42.f64[0] == v24.f64[0];
          }
          if (!v8) {
            return;
          }
        }
      }
    }
  }
  int64_t v11 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_53:
    __break(1u);
    return;
  }
  if (v11 >= v7) {
    goto LABEL_39;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v11);
  ++v1;
  if (v12) {
    goto LABEL_24;
  }
  int64_t v1 = v11 + 1;
  if (v11 + 1 >= v7) {
    goto LABEL_39;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v1);
  if (v12) {
    goto LABEL_24;
  }
  int64_t v1 = v11 + 2;
  if (v11 + 2 >= v7) {
    goto LABEL_39;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v1);
  if (v12)
  {
LABEL_24:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v1 << 6);
    goto LABEL_25;
  }
  int64_t v13 = v11 + 3;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v1 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_53;
        }
        if (v1 >= v7) {
          goto LABEL_39;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v1);
        ++v13;
        if (v12) {
          goto LABEL_24;
        }
      }
    }
    int64_t v1 = v13;
    goto LABEL_24;
  }
LABEL_39:
  if (!*(void *)(v2 + 16)) {
    return;
  }
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 1u);
  long long v29 = 0uLL;
  if ((v30 & 1) == 0)
  {
    int v34 = 255;
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    if (*(void *)(v2 + 16)) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  uint64_t v31 = *(void *)(v2 + 56) + 40 * v28;
  long long v32 = *(_OWORD *)v31;
  long long v33 = *(_OWORD *)(v31 + 16);
  int v34 = *(unsigned __int8 *)(v31 + 32);
  if (!*(void *)(v2 + 16))
  {
LABEL_45:
    int v39 = 255;
    long long v38 = 0uLL;
    goto LABEL_47;
  }
LABEL_42:
  long long v41 = v33;
  long long v43 = v32;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(0, 3u);
  if (v36)
  {
    uint64_t v37 = *(void *)(v2 + 56) + 40 * v35;
    long long v29 = *(_OWORD *)v37;
    long long v38 = *(_OWORD *)(v37 + 16);
    int v39 = *(unsigned __int8 *)(v37 + 32);
    long long v33 = v41;
    long long v32 = v43;
  }
  else
  {
    int v39 = 255;
    long long v38 = 0uLL;
    long long v33 = v41;
    long long v32 = v43;
    long long v29 = 0uLL;
  }
LABEL_47:
  v46[0] = v29;
  v46[1] = v38;
  char v47 = v39;
  if (v34 != 255)
  {
    v44[0] = v32;
    v44[1] = v33;
    char v45 = v34;
    if (v39 != 255) {
      specialized static Spacing.Value.== infix(_:_:)((uint64_t)v44, (uint64_t)v46);
    }
  }
}

uint64_t Spacing.description.getter()
{
  uint64_t result = 0x20676E6963617053;
  uint64_t v2 = *v0;
  if (*(void *)(*v0 + 16))
  {
    uint64_t v37 = 0x20676E6963617053;
    unint64_t v38 = 0xEA00000000000A5BLL;
    swift_getKeyPath();
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = (uint64_t)v3;
    specialized MutableCollection<>.sort(by:)(&v32._countAndFlagsBits);
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t v4 = *(void *)(v32._countAndFlagsBits + 16);
    if (v4)
    {
      uint64_t v5 = (Swift::UInt8 *)(v32._countAndFlagsBits + 40);
      while (1)
      {
        Swift::UInt v15 = *((void *)v5 - 1);
        Swift::UInt8 v16 = *v5;
        if (v15)
        {
          uint64_t v17 = _typeName(_:qualified:)();
          int v19 = v18;
        }
        else
        {
          int v19 = (void *)0xE700000000000000;
          uint64_t v17 = 0x746C7561666564;
        }
        v32._uint64_t countAndFlagsBits = 0;
        v32._object = (void *)0xE000000000000000;
        v20._uint64_t countAndFlagsBits = 40;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        v21._uint64_t countAndFlagsBits = v17;
        v21._object = v19;
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = 8236;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        LOBYTE(v35) = v16;
        _print_unlocked<A, B>(_:_:)();
        v23._uint64_t countAndFlagsBits = 41;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        if (!*(void *)(v2 + 16)) {
          break;
        }
        uint64_t countAndFlagsBits = v32._countAndFlagsBits;
        object = v32._object;
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
        if ((v27 & 1) == 0) {
          goto LABEL_16;
        }
        uint64_t v28 = *(void *)(v2 + 56) + 40 * v26;
        uint64_t v29 = *(void *)v28;
        if (*(unsigned char *)(v28 + 32))
        {
          int64_t v7 = *(void **)(v28 + 8);
          uint64_t v6 = *(void *)(v28 + 16);
          uint64_t v8 = *(void *)(v28 + 24);
          uint64_t v35 = 0;
          unint64_t v36 = 0xE000000000000000;
          v32._uint64_t countAndFlagsBits = v29;
          v32._object = v7;
          uint64_t v33 = v6;
          uint64_t v34 = v8;
          _print_unlocked<A, B>(_:_:)();
          uint64_t v9 = v35;
          unint64_t v10 = (void *)v36;
        }
        else
        {
          uint64_t v9 = Double.description.getter();
          unint64_t v10 = v30;
        }
        v5 += 16;
        v32._uint64_t countAndFlagsBits = 8224;
        v32._object = (void *)0xE200000000000000;
        v11._uint64_t countAndFlagsBits = countAndFlagsBits;
        v11._object = object;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 2112032;
        v12._object = (void *)0xE300000000000000;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = v9;
        v13._object = v10;
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14._uint64_t countAndFlagsBits = 10;
        v14._object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        if (!--v4) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      swift_release();
      uint64_t result = swift_release();
      __break(1u);
    }
    else
    {
LABEL_13:
      swift_release();
      v31._uint64_t countAndFlagsBits = 93;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      return v37;
    }
  }
  return result;
}

uint64_t specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  while (1)
  {
    double v5 = a3;
    uint64_t v6 = *(void *)&a3;
    uint64_t v7 = *(void *)&a3 & 0x7FF0000000000000;
    uint64_t v8 = *(void *)&a3 & 0xFFFFFFFFFFFFFLL;
    if ((*(void *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000 && v8 != 0) {
      return 0;
    }
    a3 = a1;
    uint64_t v10 = (*(void *)&a1 >> 52) & 0x7FFLL;
    uint64_t v11 = *(void *)&a1 & 0xFFFFFFFFFFFFFLL;
    if ((*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v10 == 2047) {
      return 0;
    }
    a1 = v5;
    if (!v8)
    {
      a1 = v5;
      if (v7 == 0x7FF0000000000000) {
        break;
      }
    }
  }
  if (!v11 && v10 == 2047) {
    return v5 == a3;
  }
  uint64_t v13 = Double.exponent.getter();
  v15.n128_u64[0] = specialized Double.init(sign:exponent:significand:)(v6 < 0, v13, 1.0);
  v16.n128_f64[0] = a3 * 0.5;
  if (!(v10 | v11)) {
    v16.n128_f64[0] = a3;
  }
  if (v10 == 2047) {
    v16.n128_f64[0] = a3;
  }
  v14.n128_f64[0] = a2;

  return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v16, v14, v15);
}

CGFloat defaultSpacingValue.getter()
{
  if (one-time initialization token for defaultSpacingValue != -1) {
    swift_once();
  }
  return defaultSpacingValue.width;
}

uint64_t Spacing.Category.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void Spacing.Category.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Spacing.Category.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int Spacing.Category.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Spacing.Key.category.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *Spacing.Key.category.setter(void *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Spacing.Key.category.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Spacing.Key.edge.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *Spacing.Key.edge.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Spacing.Key.edge.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Spacing.Key.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int Spacing.Key.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Spacing.Key()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Spacing.Key()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 8);
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double Spacing.TextMetrics.ascend.getter()
{
  return *(double *)v0;
}

void Spacing.TextMetrics.ascend.setter(double a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*Spacing.TextMetrics.ascend.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.descend.getter()
{
  return *(double *)(v0 + 8);
}

void Spacing.TextMetrics.descend.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Spacing.TextMetrics.descend.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.leading.getter()
{
  return *(double *)(v0 + 16);
}

void Spacing.TextMetrics.leading.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*Spacing.TextMetrics.leading.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Spacing.TextMetrics.pixelLength.getter()
{
  return *(double *)(v0 + 24);
}

void Spacing.TextMetrics.pixelLength.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*Spacing.TextMetrics.pixelLength.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Spacing.TextMetrics.init(ascend:descend:leading:pixelLength:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

double Spacing.TextMetrics.lineSpacing.getter()
{
  return *v0 + v0[1] + v0[2];
}

BOOL static Spacing.TextMetrics.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] < *a2 + a2[1] + a2[2];
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] < *a2 + a2[1] + a2[2];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a2 + a2[1] + a2[2] >= *a1 + a1[1] + a1[2];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a1 + a1[1] + a1[2] >= *a2 + a2[1] + a2[2];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Spacing.TextMetrics(double *a1, double *a2)
{
  return *a2 + a2[1] + a2[2] < *a1 + a1[1] + a1[2];
}

uint64_t Spacing.Value.value.getter()
{
  if (v0[32]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t Spacing.Value.distance(to:)(uint64_t *a1)
{
  uint64_t result = *a1;
  int v4 = *((unsigned __int8 *)a1 + 32);
  double v5 = *(double *)v1;
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v7 = a1[1];
    uint64_t v6 = a1[2];
    uint64_t v8 = a1[3];
    uint64_t v10 = *(void *)(v1 + 8);
    uint64_t v9 = *(void *)(v1 + 16);
    uint64_t v11 = *(void *)(v1 + 24);
    if (*(unsigned char *)(v1 + 32) == 1)
    {
      if (v4)
      {
        if (v4 == 2)
        {
          double v16 = *(double *)v1;
          uint64_t v17 = v10;
          uint64_t v18 = v9;
          uint64_t v19 = v11;
          double v12 = *(double *)&result;
          uint64_t v13 = v7;
          uint64_t v14 = v6;
          uint64_t v15 = v8;
LABEL_13:
          *(double *)&uint64_t result = specialized static Spacing.TextMetrics.spacing(top:bottom:)((uint64_t)&v16, (uint64_t)&v12);
          return result;
        }
LABEL_15:
        *(double *)&uint64_t result = 0.0;
      }
    }
    else if (v4)
    {
      if (v4 == 1)
      {
        double v16 = *(double *)&result;
        uint64_t v17 = v7;
        uint64_t v18 = v6;
        uint64_t v19 = v8;
        double v12 = v5;
        uint64_t v13 = v10;
        uint64_t v14 = v9;
        uint64_t v15 = v11;
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*((unsigned char *)a1 + 32))
  {
    return *(uint64_t *)v1;
  }
  else
  {
    *(double *)&uint64_t result = *(double *)&result + v5;
  }
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return !specialized static Spacing.Value.< infix(_:_:)(a2, a1);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return !specialized static Spacing.Value.< infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Spacing.Value(uint64_t a1, uint64_t a2)
{
  return specialized static Spacing.Value.< infix(_:_:)(a2, a1);
}

unsigned char *Spacing.clear(_:)(unsigned char *result)
{
  Swift::UInt8 v2 = (unint64_t *)*result;
  if (*result)
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    int v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
    uint64_t result = (unsigned char *)swift_bridgeObjectRelease_n();
    *uint64_t v1 = v4;
  }
  return result;
}

uint64_t Spacing.minima.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Spacing.minima.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Spacing.minima.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t static Spacing.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Spacing(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t static Spacing.all(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
  *(void *)(inited + 32) = 0;
  *(unsigned char *)(inited + 40) = 1;
  *(double *)(inited + 48) = a2;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 80) = 0;
  *(unsigned char *)(inited + 96) = 3;
  *(double *)(inited + 104) = a2;
  *(void *)(inited + 144) = 0;
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0;
  *(void *)(inited + 112) = 0;
  *(unsigned char *)(inited + 136) = 0;
  *(double *)(inited + 160) = a2;
  *(void *)(inited + 200) = 0;
  *(void *)(inited + 168) = 0;
  *(void *)(inited + 176) = 0;
  *(unsigned char *)(inited + 192) = 0;
  *(void *)(inited + 184) = 0;
  *(unsigned char *)(inited + 208) = 2;
  *(double *)(inited + 216) = a2;
  *(void *)(inited + 232) = 0;
  *(void *)(inited + 240) = 0;
  *(void *)(inited + 224) = 0;
  *(unsigned char *)(inited + 248) = 0;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

uint64_t static Spacing.horizontal(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  *(void *)(inited + 32) = 0;
  *(unsigned char *)(inited + 40) = 1;
  *(double *)(inited + 48) = a2;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 80) = 0;
  *(unsigned char *)(inited + 96) = 3;
  *(double *)(inited + 104) = a2;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0;
  *(void *)(inited + 112) = 0;
  *(unsigned char *)(inited + 136) = 0;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

uint64_t static Spacing.vertical(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>)
{
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  *(void *)(inited + 32) = 0;
  *(unsigned char *)(inited + 40) = 0;
  *(double *)(inited + 48) = a2;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 64) = 0;
  *(void *)(inited + 72) = 0;
  *(void *)(inited + 56) = 0;
  *(unsigned char *)(inited + 80) = 0;
  *(unsigned char *)(inited + 96) = 2;
  *(double *)(inited + 104) = a2;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0;
  *(void *)(inited + 112) = 0;
  *(unsigned char *)(inited + 136) = 0;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  *a1 = v5;
  return result;
}

void *static Spacing.Category.textToText.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for textToText, &static Spacing.Category.textToText, a1);
}

void *static Spacing.Category.edgeAboveText.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeAboveText, &static Spacing.Category.edgeAboveText, a1);
}

void *static Spacing.Category.edgeBelowText.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeBelowText, &static Spacing.Category.edgeBelowText, a1);
}

void *static Spacing.Category.textBaseline.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for textBaseline, &static Spacing.Category.textBaseline, a1);
}

void *static Spacing.Category.edgeLeftText.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeLeftText, &static Spacing.Category.edgeLeftText, a1);
}

void *static Spacing.Category.edgeRightText.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for edgeRightText, &static Spacing.Category.edgeRightText, a1);
}

void one-time initialization function for leftTextBaseline()
{
  static Spacing.Category.leftTextBaseline = (uint64_t)&unk_26FA7F410;
}

void *static Spacing.Category.leftTextBaseline.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for leftTextBaseline, &static Spacing.Category.leftTextBaseline, a1);
}

void one-time initialization function for rightTextBaseline()
{
  static Spacing.Category.rightTextBaseline = (uint64_t)&unk_26FA7F430;
}

void *static Spacing.Category.rightTextBaseline.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for rightTextBaseline, &static Spacing.Category.rightTextBaseline, a1);
}

BOOL specialized static Spacing.Key.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)a1)
  {
    if (v2) {
      BOOL v3 = *(void *)a1 == v2;
    }
    else {
      BOOL v3 = 0;
    }
    if (!v3) {
      return 0;
    }
  }
  else if (v2)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8);
}

BOOL specialized static Spacing.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v2 = *(float64x2_t *)a1;
  float64x2_t v3 = *(float64x2_t *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(unsigned char *)(a1 + 32)) {
    return !*(unsigned char *)(a2 + 32) && v2.f64[0] == v3.f64[0];
  }
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    if (v4 != 1) {
      return 0;
    }
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v2, v3), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1;
  }
  if (v4 == 2) {
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v2, v3), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1;
  }
  return 0;
}

BOOL specialized static Spacing.Value.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  unint64_t v4 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    double v5 = *(double *)(a1 + 16);
    double v8 = *(double *)(a2 + 8);
    double v7 = *(double *)(a2 + 16);
    if (*(unsigned char *)(a1 + 32) == 1)
    {
      if (v4 != 1)
      {
        unint64_t v9 = 1;
        return v9 < v4;
      }
    }
    else if (v4 != 2)
    {
      unint64_t v9 = 2;
      return v9 < v4;
    }
    double v6 = *(double *)(a1 + 8);
    BOOL v10 = v2 == v3 && v6 == v8;
    return (!v10 || v5 != v7 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) && v2 + v6 + v5 < v3 + v8 + v7;
  }
  else
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unint64_t v9 = 0;
      return v9 < v4;
    }
    BOOL v10 = v2 == v3;
    BOOL v14 = v2 < v3;
    return !v10 && v14;
  }
}

unsigned char *sub_245E7A460@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

double specialized Double.init(sign:exponent:significand:)(char a1, uint64_t a2, double a3)
{
  double result = -a3;
  if ((a1 & 1) == 0) {
    double result = a3;
  }
  uint64_t v5 = (*(void *)&a3 >> 52) & 0x7FFLL;
  if (v5 != 2047 && v5 | *(void *)&a3 & 0xFFFFFFFFFFFFFLL)
  {
    if (a2 >= -1022)
    {
      if (a2 >= 1024)
      {
        if (a2 >= 3069) {
          a2 = 3069;
        }
        do
        {
          a2 -= 1023;
          double result = result * 8.98846567e307;
        }
        while ((unint64_t)a2 > 0x3FF);
      }
    }
    else
    {
      if (a2 <= -3066) {
        uint64_t v6 = -3066;
      }
      else {
        uint64_t v6 = a2;
      }
      do
      {
        a2 = v6 + 1022;
        double result = result * 2.22507386e-308;
        BOOL v7 = __CFADD__(v6, 2044);
        v6 += 1022;
      }
      while (!v7);
    }
    return result * COERCE_DOUBLE(((a2 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  swift_release();
  *a1 = v2;
  return swift_release_n();
}

double specialized static Spacing.TextMetrics.spacing(top:bottom:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = *(double *)a1;
  double v9 = *(double *)(a1 + 24);
  double v10 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v17 = *(_OWORD *)(a1 + 8);
  long long v18 = v12;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v13 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    double v14 = 0.0;
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return v14;
    }
  }
  else
  {
    double v14 = 0.0;
    if (static Semantics.forced < v13) {
      return v14;
    }
  }
  double v21 = v8;
  long long v22 = v17;
  double v23 = v9;
  v19[0] = v10;
  v19[1] = v11;
  long long v20 = v18;
  if ((Spacing.TextMetrics.isAlmostEqual(to:)(v19) & 1) == 0)
  {
    *(double *)&long long v15 = *(double *)&v17 + v10 + v11 + *(double *)&v18 - v11 - *(double *)&v17 - v10;
    long long v18 = v15;
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8E218], v4);
  double v21 = *(double *)&v18;
  specialized FloatingPoint.round(_:toMultipleOf:)(v7, v9);
  double v14 = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t lazy protocol witness table accessor for type Spacing.Category and conformance Spacing.Category()
{
  unint64_t result = lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category;
  if (!lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Category and conformance Spacing.Category);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Spacing.TextMetrics and conformance Spacing.TextMetrics()
{
  unint64_t result = lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics;
  if (!lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.TextMetrics and conformance Spacing.TextMetrics);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Spacing.Value and conformance Spacing.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value;
  if (!lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Value and conformance Spacing.Value);
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing()
{
  return &type metadata for Spacing;
}

ValueMetadata *type metadata accessor for Spacing.Category()
{
  return &type metadata for Spacing.Category;
}

uint64_t getEnumTagSinglePayload for Spacing.Key(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Spacing.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing.Key()
{
  return &type metadata for Spacing.Key;
}

ValueMetadata *type metadata accessor for Spacing.TextMetrics()
{
  return &type metadata for Spacing.TextMetrics;
}

uint64_t getEnumTagSinglePayload for Spacing.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Spacing.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Spacing.Value()
{
  return &type metadata for Spacing.Value;
}

void *type metadata accessor for Spacing.Category.EdgeBelowText()
{
  return &unk_26FA7F3D0;
}

void *type metadata accessor for Spacing.Category.EdgeAboveText()
{
  return &unk_26FA7F3B0;
}

void *type metadata accessor for Spacing.Category.EdgeRightText()
{
  return &unk_26FA7F3F0;
}

void *type metadata accessor for Spacing.Category.EdgeLeftText()
{
  return &unk_26FA7F370;
}

void *type metadata accessor for Spacing.Category.TextToText()
{
  return &unk_26FA7F350;
}

void *type metadata accessor for Spacing.Category.TextBaseline()
{
  return &unk_26FA7F390;
}

void *type metadata accessor for Spacing.Category.TextLeftBaseline()
{
  return &unk_26FA7F410;
}

void *type metadata accessor for Spacing.Category.TextRightBaseline()
{
  return &unk_26FA7F430;
}

uint64_t PlatformDrawableOptions.isAccelerated.getter()
{
  return *(_DWORD *)(v0 + 12) & 1;
}

void PlatformDrawableContent.State.init()(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = 0;
}

uint64_t PlatformDrawableOptions.isOpaque.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 1) & 1;
}

uint64_t PlatformDrawableOptions.rendersAsynchronously.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

void PlatformDrawableContent.State.mode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *PlatformDrawableContent.State.mode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PlatformDrawableContent.State.mode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformDrawableContent.State._renderer.getter()
{
  return swift_retain();
}

uint64_t PlatformDrawableContent.State._renderer.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*PlatformDrawableContent.State._renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *PlatformDrawableContent.State.init(platformViewMode:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *result;
  *(void *)(a2 + 8) = 0;
  return result;
}

uint64_t PlatformDrawableContent.State.renderer()()
{
  if (!*(void *)(v0 + 8))
  {
    char v2 = *(unsigned char *)v0;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    *(void *)(v0 + 8) = DisplayList.GraphicsRenderer.init(platformViewMode:)(&v2);
  }

  return swift_retain();
}

uint64_t PlatformDrawableOptions.rendersFirstFrameAsynchronously.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 4) & 1;
}

BOOL static PlatformDrawableOptions.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4);
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v6 = *(unsigned char *)a2;
  int v7 = *(_DWORD *)(a2 + 4);
  char v8 = *(unsigned char *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 12);
  char v10 = *(unsigned char *)(a2 + 16);
  v17[0] = *(unsigned char *)a1;
  int v18 = v2;
  char v19 = v3;
  int v20 = v4;
  char v21 = v5;
  v12[0] = v6;
  int v13 = v7;
  char v14 = v8;
  int v15 = v9;
  char v16 = v10;
  return specialized static RasterizationOptions.== infix(_:_:)(v17, v12);
}

uint64_t dispatch thunk of PlatformDrawable.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PlatformDrawable.options.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PlatformDrawable.options.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static PlatformDrawable.allowsContentsMultiplyColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PlatformDrawable.update(content:required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PlatformDrawable.makeAsyncUpdate(content:required:layer:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of PlatformDrawable.setContentsScale(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PlatformDrawable.drawForTesting(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

ValueMetadata *type metadata accessor for PlatformDrawableContent()
{
  return &type metadata for PlatformDrawableContent;
}

uint64_t assignWithCopy for PlatformDrawableContent.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PlatformDrawableContent.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformDrawableContent.State()
{
  return &type metadata for PlatformDrawableContent.State;
}

ValueMetadata *type metadata accessor for PlatformDrawableOptions()
{
  return &type metadata for PlatformDrawableOptions;
}

void destroy for PlatformDrawableContent(uint64_t a1)
{
}

uint64_t initializeWithCopy for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v4, v5, v6, v7, v8);
  int v9 = *(void **)a1;
  char v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of PlatformDrawableContent.Storage(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of PlatformDrawableContent.Storage(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformDrawableContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformDrawableContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PlatformDrawableContent.Storage(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 4u) {
    return *(unsigned __int8 *)(a1 + 40);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for PlatformDrawableContent.Storage(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)uint64_t result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlatformDrawableContent.Storage()
{
  return &type metadata for PlatformDrawableContent.Storage;
}

Swift::Void __swiftcall DisplayList.insertLayerFilters(matrices:version:premultiplied:)(Swift::OpaquePointer matrices, SwiftUI::DisplayList::Version version, Swift::Bool premultiplied)
{
  int64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = (char *)matrices._rawValue + 64;
  uint64_t v7 = 1 << *((unsigned char *)matrices._rawValue + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *((void *)matrices._rawValue + 8);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v10) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)&v6[8 * v13];
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)&v6[8 * v4];
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)&v6[8 * v4];
        if (!v14)
        {
          int64_t v4 = v13 + 3;
          if (v13 + 3 >= v10) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)&v6[8 * v4];
          if (!v14)
          {
            int64_t v4 = v13 + 4;
            if (v13 + 4 >= v10) {
              goto LABEL_25;
            }
            unint64_t v14 = *(void *)&v6[8 * v4];
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    v5 |= *(unsigned char *)(*((void *)matrices._rawValue + 6) + v12);
  }
  int64_t v15 = v13 + 5;
  if (v15 < v10)
  {
    unint64_t v14 = *(void *)&v6[8 * v15];
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        if (v4 >= v10) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)&v6[8 * v4];
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_29:
      __break(1u);
    }
    int64_t v4 = v15;
    goto LABEL_24;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  ForegroundTransform.apply(to:)(v3);

  swift_bridgeObjectRelease();
}

uint64_t ForegroundTransform.apply(to:)(uint64_t *a1)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t);
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  CGFloat *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  CGFloat *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  CGFloat *v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  CGFloat *v85;
  __int16 v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  CGFloat *v98;
  double v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float32x4_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  BOOL v116;
  float v117;
  float v118;
  __double2 v119;
  float cosval;
  float sinval;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  uint16x4_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int64_t v140;
  _OWORD *v141;
  long long v142;
  long long v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int64_t v147;
  unint64_t v148;
  int64_t v149;
  Swift::UInt8 v150;
  int8x16_t *v151;
  int8x16_t v152;
  int8x16_t v153;
  char isUniquelyReferenced_nonNull_native;
  char v155;
  unint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  char v160;
  unint64_t v161;
  char v162;
  _OWORD *v163;
  long long v164;
  long long v165;
  long long v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  void *v173;
  unint64_t v174;
  unint64_t v175;
  CGFloat *v176;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v181;
  uint64_t v182;
  uint64_t result;
  __int16 v184;
  char v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  unint64_t v207;
  void *v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216[2];
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v228;
  char v229;
  char v230;
  int64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int16 v247;
  char v248;
  _DWORD v249[14];
  float32x4_t v250;
  float v251;
  float v252;
  _DWORD v253[14];
  float32x4_t v254;
  float v255;
  float v256;
  _DWORD v257[14];
  float32x4_t v258;
  float v259;
  float v260;
  long long v261;
  long long v262;
  long long v263;
  long long v264;
  long long v265;
  int8x16_t v266[5];
  long long v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float32x4_t v278;
  float v279;
  float v280;
  uint64_t v281;
  __int16 v282;
  char v283;
  uint64_t v284;
  char v285;
  unsigned __int8 v286;
  void *v287;
  void *v288;
  unsigned __int8 v289;
  CGRect v290;
  uint64_t v291;
  uint64_t v292;
  CGRect v293;
  CGRect v294;
  CGRect v295;
  CGRect v296;

  uint64_t v2 = v1;
  v292 = *MEMORY[0x263EF8340];
  CGSize v3 = *(CGSize *)(MEMORY[0x263F001A0] + 16);
  v290.origin = (CGPoint)*MEMORY[0x263F001A0];
  uint64_t v4 = *(void *)(v1 + 16);
  v287 = (void *)MEMORY[0x263F8EE78];
  double v288 = (void *)MEMORY[0x263F8EE78];
  v289 = 0;
  v290.int8x16_t size = v3;
  v291 = v4;
  uint64_t v5 = *a1;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_210;
  }
  unint64_t v6 = 0;
  uint64_t v242 = v5;
  unint64_t v243 = v5 + 32;
  CGFloat v232 = v1;
  Swift::Int v241 = *(void *)(v5 + 16);
  while (2)
  {
    if (v6 >= *(void *)(v5 + 16))
    {
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
    }
    uint64_t v7 = v243 + 72 * v6;
    CGFloat v9 = *(double *)v7;
    CGFloat v8 = *(double *)(v7 + 8);
    CGFloat v11 = *(double *)(v7 + 16);
    CGFloat v10 = *(double *)(v7 + 24);
    uint64_t v12 = *(void *)(v7 + 32);
    unint64_t v13 = *(void *)(v7 + 40);
    unint64_t v14 = *(void *)(v7 + 48);
    uint64_t v245 = *(void *)(v7 + 56);
    int v15 = *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16);
    uint64_t v16 = *(unsigned int *)(v7 + 68);
    uint64_t v244 = v6 + 1;
    switch(v14 >> 62)
    {
      case 1uLL:
        switch(BYTE4(v14))
        {
          case 2u:
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            swift_bridgeObjectRelease();
            long long v22 = v13;
            break;
          case 7u:
            long long v22 = *(unsigned __int8 *)(v13 + 26);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined consume of DisplayList.Effect(v13, v14, 7);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v13, v14);
            break;
          case 0x11u:
            int v20 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v13 + 120);
            char v21 = outlined copy of DisplayList.Item.Value(v13, v14);
            v20(&v281, v21);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined consume of DisplayList.Effect(v13, v14, 17);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v13, v14);
            long long v22 = v281;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Effect(v13, v14, SBYTE4(v14));
            swift_bridgeObjectRetain();
            outlined consume of DisplayList.Effect(v13, v14, SBYTE4(v14));
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Item.Value(v13, v14);
            long long v22 = 0;
            break;
        }
        unsigned int v17 = v22 | ((v15 & 0xFF0000u) >> 16);
        goto LABEL_27;
      case 2uLL:
        uint64_t v18 = *(void *)(v13 + 16);
        if (!v18) {
          goto LABEL_15;
        }
        if (v18 == 1)
        {
          uint64_t v19 = 0;
          unsigned int v17 = 0;
LABEL_20:
          uint64_t v29 = v18 - v19;
          char v30 = (unsigned __int8 *)(v13 + 40 * v19 + 66);
          do
          {
            Swift::String v31 = *v30;
            v30 += 40;
            v17 |= v31;
            --v29;
          }
          while (v29);
          goto LABEL_22;
        }
        double v23 = 0;
        float64x2_t v24 = 0;
        uint64_t v19 = v18 & 0x7FFFFFFFFFFFFFFELL;
        int v25 = (unsigned __int8 *)(v13 + 106);
        unint64_t v26 = v18 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          char v27 = *(v25 - 40);
          uint64_t v28 = *v25;
          v25 += 80;
          v23 |= v27;
          v24 |= v28;
          v26 -= 2;
        }
        while (v26);
        unsigned int v17 = v24 | v23;
        if (v18 != v19) {
          goto LABEL_20;
        }
LABEL_22:
        outlined copy of DisplayList.Item.Value(v13, v14);
LABEL_27:
        Swift::String v32 = *(unsigned __int8 *)(v2 + 8);
        uint64_t v33 = v32 & v17;
        if (*(unsigned char *)(v2 + 25)) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = v33 == 0;
        }
        if (v34)
        {
          if (v289 != *(unsigned __int8 *)(v2 + 25))
          {
            ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
            v289 = *(unsigned char *)(v2 + 25);
          }
          uint64_t v35 = v288;
          outlined copy of DisplayList.Item.Value(v13, v14);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
          }
          uint64_t v37 = v35[2];
          unint64_t v36 = v35[3];
          if (v37 >= v36 >> 1) {
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
          }
          v35[2] = v37 + 1;
          unint64_t v38 = (CGFloat *)&v35[9 * v37];
          v38[4] = v9;
          v38[5] = v8;
          v38[6] = v11;
          v38[7] = v10;
          *((void *)v38 + 8) = v12;
          *((void *)v38 + 9) = v13;
          *((void *)v38 + 10) = v14;
          *((void *)v38 + 11) = v245;
          *((unsigned char *)v38 + 98) = BYTE2(v15);
          *((_WORD *)v38 + 48) = v15;
          *((_DWORD *)v38 + 25) = v16;
          double v288 = v35;
          v294.origin.double x = v9;
          v294.origin.double y = v8;
          v294.size.double width = v11;
          v294.size.double height = v10;
          v290 = CGRectUnion(v290, v294);
          int v39 = v291;
          if (v12 > v291) {
            int v39 = v12;
          }
          v291 = v39;
LABEL_41:
          float64x2_t v40 = v13;
          long long v41 = v14;
LABEL_42:
          outlined consume of DisplayList.Item.Value(v40, v41);
          goto LABEL_43;
        }
        break;
      case 3uLL:
        outlined consume of DisplayList.Item.Value(v13, v14);
        goto LABEL_16;
      default:
        if (v13 >> 60 == 9)
        {
          unsigned int v17 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
          goto LABEL_22;
        }
LABEL_15:
        outlined copy of DisplayList.Item.Value(v13, v14);
LABEL_16:
        unsigned int v17 = 0;
        goto LABEL_27;
    }
    switch(v14 >> 62)
    {
      case 1uLL:
        CGFloat v235 = v12;
        double v246 = v245;
        double v247 = v15;
        double v248 = BYTE2(v15);
        if (BYTE4(v14) == 2)
        {
          outlined copy of DisplayList.Item.Value(v13, v14);
          if (one-time initialization token for all != -1) {
            swift_once();
          }
          id v239 = v16;
          if ((static _ForegroundLayerLevel.all & v13 & v32 & ((static _ForegroundLayerLevel.all & v13 & v32)
                                                                                             - 1)) == 0)
          {
            unint64_t v74 = *(void *)(v2 + 16);
            uint64_t v75 = *(unsigned char *)(v2 + 24);
            CGFloat v281 = *(void *)v2;
            LOBYTE(v282) = v32;
            double v284 = v74;
            v285 = v75;
            v286 = static _ForegroundLayerLevel.all & v13 & v32;
            swift_bridgeObjectRetain();
            ForegroundTransform.apply(to:)(&v246);
            swift_bridgeObjectRelease();
            LOBYTE(v76) = 2;
LABEL_84:
            uint64_t v77 = v13;
            uint64_t v78 = v14;
            goto LABEL_85;
          }
LABEL_83:
          uint64_t v76 = HIDWORD(v14);
          ForegroundTransform.apply(to:)(&v246);
          goto LABEL_84;
        }
        if (BYTE4(v14) != 9)
        {
LABEL_69:
          id v239 = v16;
          outlined copy of DisplayList.Item.Value(v13, v14);
          goto LABEL_83;
        }
        BOOL v54 = *(double *)(v13 + 16);
        uint64_t v53 = *(void *)(v13 + 24);
        unint64_t v55 = *(void *)(v13 + 32);
        unint64_t v56 = *(void *)(v13 + 40);
        uint64_t v57 = *(void *)(v13 + 48);
        uint64_t v58 = *(void *)(v13 + 56);
        uint64_t v59 = *(void *)(v13 + 64);
        uint64_t v60 = *(void *)(v13 + 72);
        uint64_t v61 = *(void *)(v13 + 80);
        uint64_t v62 = *(void *)(v13 + 88);
        uint64_t v63 = *(void *)(v13 + 96);
        BOOL v64 = *(void *)(v13 + 104);
        uint64_t v65 = *(void *)(v13 + 112);
        char v66 = *(void *)(v13 + 120);
        uint64_t v67 = *(_DWORD *)(v13 + 128);
        uint64_t v68 = *(unsigned __int8 *)(v2 + 24);
        switch(*(unsigned char *)(v13 + 132))
        {
          case 4:
            if ((v68 ^ v63)) {
              goto LABEL_190;
            }
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            LODWORD(v118) = HIDWORD(*(void *)(v13 + 88));
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            Swift::Int v108 = *(float *)&v200;
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            v107.i64[0] = v212;
            v107.i64[1] = v203;
            Swift::Int v117 = *((float *)&v215 + 1);
            uint64_t v106 = *(float *)&v215;
            LODWORD(v115) = HIDWORD(*(void *)(v13 + 56));
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v114 = *(float *)&v218;
            uint64_t v113 = *((float *)&v221 + 1);
            Swift::Int v112 = *(float *)&v221;
            LODWORD(v111) = HIDWORD(*(void *)(v13 + 40));
            LOBYTE(v224) = *(void *)(v13 + 40);
            LODWORD(v105) = *(void *)(v13 + 40);
            LODWORD(v104) = HIDWORD(*(void *)(v13 + 32));
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            Swift::Int v110 = *(float *)&v206;
            LODWORD(v109) = HIDWORD(*(void *)(v13 + 24));
            LODWORD(v103) = v209;
            LODWORD(v102) = HIDWORD(*(void *)(v13 + 16));
            double v186 = *(uint64_t *)(v13 + 16);
            LODWORD(v101) = v186;
            goto LABEL_127;
          case 5:
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            specialized _ColorMatrix.init(colorMultiply:premultiplied:)(v68, (uint64_t)v249, *(float *)&v54, *((float *)&v54 + 1), *(float *)&v53, *((float *)&v53 + 1));
            unint64_t v101 = *(float *)v249;
            unint64_t v102 = *(float *)&v249[1];
            uint64_t v103 = *(float *)&v249[2];
            uint64_t v109 = *(float *)&v249[3];
            Swift::Int v110 = *(float *)&v249[4];
            uint64_t v104 = *(float *)&v249[5];
            uint64_t v105 = *(float *)&v249[6];
            Swift::Int v111 = *(float *)&v249[7];
            Swift::Int v112 = *(float *)&v249[8];
            uint64_t v113 = *(float *)&v249[9];
            double v114 = *(float *)&v249[10];
            uint64_t v115 = *(float *)&v249[11];
            uint64_t v106 = *(float *)&v249[12];
            Swift::Int v117 = *(float *)&v249[13];
            uint64_t v107 = v250;
            Swift::Int v108 = v251;
            uint64_t v118 = v252;
            goto LABEL_127;
          case 6:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            uint64_t v119 = __sincos_stret(v54);
            cosval = v119.__cosval;
            sinval = v119.__sinval;
            unint64_t v101 = (float)((float)(cosval * 0.7873) + 0.2126) - (float)(sinval * 0.2126);
            uint64_t v122 = 0.7152 - (float)(cosval * 0.7152);
            unint64_t v102 = v122 - (float)(sinval * 0.7152);
            int v123 = 0.0722 - (float)(cosval * 0.0722);
            uint64_t v103 = (float)(sinval * 0.9278) + v123;
            unint64_t v124 = 0.2126 - (float)(cosval * 0.2126);
            uint64_t v104 = (float)(sinval * 0.143) + v124;
            uint64_t v105 = (float)(sinval * 0.14) + (float)((float)(cosval * 0.2848) + 0.7152);
            Swift::Int v111 = v123 + (float)(sinval * -0.283);
            double v114 = v124 - (float)(sinval * 0.7873);
            uint64_t v115 = (float)(sinval * 0.7152) + v122;
            uint64_t v106 = (float)(sinval * 0.0722) + (float)((float)(cosval * 0.9278) + 0.0722);
            uint64_t v107 = 0uLL;
            Swift::Int v108 = 1.0;
            uint64_t v109 = 0.0;
            Swift::Int v110 = 0.0;
            Swift::Int v112 = 0.0;
            uint64_t v113 = 0.0;
            goto LABEL_124;
          case 7:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            uint64_t v99 = *(double *)&v186;
            if (v54 <= 0.0) {
              uint64_t v99 = 0.0;
            }
            unint64_t v100 = v99;
            unint64_t v101 = (float)(v100 * 0.7873) + 0.2126;
            unint64_t v102 = 0.7152 - (float)(v100 * 0.7152);
            uint64_t v103 = 0.0722 - (float)(v100 * 0.0722);
            uint64_t v104 = 0.2126 - (float)(v100 * 0.2126);
            uint64_t v105 = (float)(v100 * 0.2848) + 0.7152;
            uint64_t v106 = (float)(v100 * 0.9278) + 0.0722;
            uint64_t v107 = 0uLL;
            Swift::Int v108 = 1.0;
            uint64_t v109 = 0.0;
            Swift::Int v110 = 0.0;
            Swift::Int v111 = v103;
            Swift::Int v112 = 0.0;
            uint64_t v113 = 0.0;
            double v114 = v104;
            uint64_t v115 = v102;
            goto LABEL_124;
          case 8:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            Swift::Int v110 = v54;
            uint64_t v107 = (float32x4_t)LODWORD(v110);
            unint64_t v102 = 0.0;
            unint64_t v101 = 1.0;
            uint64_t v103 = 0.0;
            uint64_t v109 = 0.0;
            uint64_t v104 = 0.0;
            uint64_t v105 = 1.0;
            Swift::Int v111 = 0.0;
            Swift::Int v112 = 0.0;
            uint64_t v113 = v110;
            double v114 = 0.0;
            uint64_t v115 = 0.0;
            uint64_t v106 = 1.0;
            goto LABEL_117;
          case 9:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            unint64_t v101 = v54;
            Swift::Int v108 = 1.0;
            Swift::Int v110 = (float)(1.0 - v101) * 0.5;
            v107.i32[1] = 0;
            v107.i64[1] = 0;
            v107.f32[0] = v110;
            unint64_t v102 = 0.0;
            uint64_t v103 = 0.0;
            uint64_t v109 = 0.0;
            uint64_t v104 = 0.0;
            uint64_t v105 = v101;
            Swift::Int v111 = 0.0;
            Swift::Int v112 = 0.0;
            uint64_t v113 = v110;
            double v114 = 0.0;
            uint64_t v115 = 0.0;
            uint64_t v106 = v101;
LABEL_124:
            Swift::Int v117 = 0.0;
            uint64_t v118 = 0.0;
            goto LABEL_127;
          case 0xA:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v186 = *(uint64_t *)(v13 + 16);
            uint64_t v125 = v54;
            specialized _ColorMatrix.init(colorMonochrome:amount:bias:)((uint64_t)v253, 1.0, 1.0, 1.0, 1.0, v125, 0.0);
            unint64_t v101 = *(float *)v253;
            unint64_t v102 = *(float *)&v253[1];
            uint64_t v103 = *(float *)&v253[2];
            uint64_t v109 = *(float *)&v253[3];
            Swift::Int v110 = *(float *)&v253[4];
            uint64_t v104 = *(float *)&v253[5];
            uint64_t v105 = *(float *)&v253[6];
            Swift::Int v111 = *(float *)&v253[7];
            Swift::Int v112 = *(float *)&v253[8];
            uint64_t v113 = *(float *)&v253[9];
            double v114 = *(float *)&v253[10];
            uint64_t v115 = *(float *)&v253[11];
            uint64_t v106 = *(float *)&v253[12];
            Swift::Int v117 = *(float *)&v253[13];
            uint64_t v107 = v254;
            Swift::Int v108 = v255;
            uint64_t v118 = v256;
            goto LABEL_127;
          case 0xB:
            if (v68) {
              goto LABEL_190;
            }
            v224 = *(void *)(v13 + 40);
            v187 = *(_DWORD *)(v13 + 128);
            v188 = *(void *)(v13 + 120);
            CGFloat v191 = *(void *)(v13 + 112);
            CGFloat v194 = *(void *)(v13 + 104);
            v197 = *(void *)(v13 + 96);
            char v200 = *(void *)(v13 + 88);
            v203 = *(void *)(v13 + 80);
            CGFloat v212 = *(void *)(v13 + 72);
            long long v215 = *(void *)(v13 + 64);
            long long v218 = *(void *)(v13 + 56);
            CFIndex v221 = *(void *)(v13 + 48);
            double v206 = *(void **)(v13 + 32);
            CGFloat v209 = *(void *)(v13 + 24);
            double v186 = *(uint64_t *)(v13 + 16);
            specialized _ColorMatrix.init(colorMonochrome:amount:bias:)((uint64_t)v257, *(float *)&v54, *((float *)&v54 + 1), *(float *)&v53, *((float *)&v53 + 1), *(float *)&v55, *((float *)&v55 + 1));
            unint64_t v101 = *(float *)v257;
            unint64_t v102 = *(float *)&v257[1];
            uint64_t v103 = *(float *)&v257[2];
            uint64_t v109 = *(float *)&v257[3];
            Swift::Int v110 = *(float *)&v257[4];
            uint64_t v104 = *(float *)&v257[5];
            uint64_t v105 = *(float *)&v257[6];
            Swift::Int v111 = *(float *)&v257[7];
            Swift::Int v112 = *(float *)&v257[8];
            uint64_t v113 = *(float *)&v257[9];
            double v114 = *(float *)&v257[10];
            uint64_t v115 = *(float *)&v257[11];
            uint64_t v106 = *(float *)&v257[12];
            Swift::Int v117 = *(float *)&v257[13];
            uint64_t v107 = v258;
            Swift::Int v108 = v259;
            uint64_t v118 = v260;
            goto LABEL_127;
          case 0xD:
          case 0xE:
            goto LABEL_190;
          case 0xF:
            if ((v56 & 4) != 0) {
              goto LABEL_69;
            }
            uint64_t v222 = *(void *)(v13 + 48);
            v225 = *(void *)(v13 + 40);
            *(void *)long long v216 = *(void *)(v13 + 64);
            long long v219 = *(void *)(v13 + 56);
            CGFloat v210 = *(void *)(v13 + 24);
            v213 = *(void *)(v13 + 72);
            double v204 = *(void *)(v13 + 80);
            double v207 = *(void *)(v13 + 32);
            uint64_t v198 = *(void *)(v13 + 96);
            v201 = *(void *)(v13 + 88);
            CGFloat v192 = *(void *)(v13 + 112);
            CGFloat v195 = *(void *)(v13 + 104);
            CGFloat v189 = *(void *)(v13 + 120);
            uint64_t v53 = (unint64_t)*(id *)&v54;
            LOBYTE(v56) = v225;
            char v66 = v189;
            uint64_t v65 = v192;
            BOOL v64 = v195;
            uint64_t v63 = v198;
            uint64_t v62 = v201;
            uint64_t v61 = v204;
            unint64_t v55 = v207;
            LODWORD(v53) = v210;
            uint64_t v60 = v213;
            uint64_t v59 = *(void *)v216;
            uint64_t v58 = v219;
            uint64_t v57 = v222;
            goto LABEL_190;
          case 0x10:
            if (v53 | *(void *)&v54 | v55 | v56 | v57 | v58 | v59 | v60 | v61 | v62 | v63 | v64 | v65 | v66) {
              Swift::Int v116 = 0;
            }
            else {
              Swift::Int v116 = v67 == 0;
            }
            if (v116) {
              goto LABEL_69;
            }
            if (v67
              || *(void *)&v54 != 1
              || v55 | v53 | v56 | v57 | v58 | v59 | v60 | v61 | v62 | v63 | v64 | v65 | v66)
            {
              if (v68)
              {
LABEL_190:
                CGFloat v226 = v56;
                CGFloat v190 = v66;
                CGFloat v193 = v65;
                CGFloat v196 = v64;
                uint64_t v199 = v63;
                v202 = v62;
                double v205 = v61;
                uint64_t v208 = (void *)v55;
                CGFloat v211 = v53;
                long long v214 = v60;
                long long v217 = v59;
                Swift::UInt64 v220 = v58;
                v223 = v57;
                outlined copy of DisplayList.Item.Value(v13, v14);
                outlined copy of DisplayList.Effect(v13, v14, 9);
                swift_bridgeObjectRelease();
                CGFloat v170 = *(void *)(v2 + 16);
                CGFloat v281 = *(void *)v2;
                LOBYTE(v282) = v32;
                double v284 = v170;
                v285 = v68;
                CGFloat v171 = one-time initialization token for all;
                swift_bridgeObjectRetain();
                if (v171 != -1) {
                  swift_once();
                }
                if (static _ForegroundLayerLevel.all & v33)
                {
                  CGFloat v172 = 1;
                }
                else if ((static _ForegroundLayerLevel.all & v33 & 0x10) != 0)
                {
                  CGFloat v172 = 16;
                }
                else if ((static _ForegroundLayerLevel.all & v33 & 0x20) != 0)
                {
                  CGFloat v172 = 32;
                }
                else
                {
                  CGFloat v172 = static _ForegroundLayerLevel.all & v33 & 0x40;
                }
                v286 = v172;
                if (v289 != v172)
                {
                  ForegroundTransform.NewList.flushPendingItems(transform:)((uint64_t)&v281);
                  v289 = v286;
                }
                CGFloat v173 = v288;
                outlined copy of DisplayList.Item.Value(v13, v14);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  CGFloat v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v173[2] + 1, 1, v173);
                }
                id v175 = v173[2];
                CGFloat v174 = v173[3];
                if (v175 >= v174 >> 1) {
                  CGFloat v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v174 > 1), v175 + 1, 1, v173);
                }
                v173[2] = v175 + 1;
                uint64_t v176 = (CGFloat *)&v173[9 * v175];
                v176[4] = v9;
                v176[5] = v8;
                v176[6] = v11;
                v176[7] = v10;
                *((void *)v176 + 8) = v12;
                *((void *)v176 + 9) = v13;
                *((void *)v176 + 10) = v14;
                *((void *)v176 + 11) = v245;
                *((unsigned char *)v176 + 98) = BYTE2(v15);
                *((_WORD *)v176 + 48) = v15;
                *((_DWORD *)v176 + 25) = v16;
                double v288 = v173;
                v296.origin.double x = v9;
                v296.origin.double y = v8;
                v296.size.double width = v11;
                v296.size.double height = v10;
                v293 = CGRectUnion(v290, v296);
                double x = v293.origin.x;
                double y = v293.origin.y;
                double width = v293.size.width;
                double height = v293.size.height;
                outlined consume of DisplayList.Effect(v13, v14, 9);
                outlined consume of GraphicsFilter(*(void **)&v54, v211, v208, v226, v223, v220, v217, v214, v205, v202, v199, v196, v193, v190, v67, SBYTE2(v67));
                v290.origin.double x = x;
                v290.origin.double y = y;
                v290.size.double width = width;
                v290.size.double height = height;
                uint64_t v181 = v291;
                if (v12 > v291) {
                  uint64_t v181 = v12;
                }
                v291 = v181;
                outlined consume of DisplayList.Item.Value(v13, v14);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v13, v14, 9);
                goto LABEL_43;
              }
              v187 = *(_DWORD *)(v13 + 128);
              v188 = *(void *)(v13 + 120);
              CGFloat v191 = *(void *)(v13 + 112);
              CGFloat v194 = *(void *)(v13 + 104);
              v197 = *(void *)(v13 + 96);
              char v200 = *(void *)(v13 + 88);
              v203 = *(void *)(v13 + 80);
              double v206 = *(void **)(v13 + 32);
              CGFloat v209 = *(void *)(v13 + 24);
              double v186 = *(uint64_t *)(v13 + 16);
              CGFloat v212 = *(void *)(v13 + 72);
              long long v215 = *(void *)(v13 + 64);
              long long v218 = *(void *)(v13 + 56);
              CFIndex v221 = *(void *)(v13 + 48);
              LOBYTE(v224) = *(void *)(v13 + 40);
              Swift::Int v110 = 1.0;
              uint64_t v107 = (float32x4_t)xmmword_2461ECA30;
              unint64_t v102 = 0.0;
              unint64_t v101 = -1.0;
              uint64_t v103 = 0.0;
              uint64_t v109 = 0.0;
              uint64_t v104 = 0.0;
              uint64_t v105 = -1.0;
              Swift::Int v111 = 0.0;
              Swift::Int v112 = 0.0;
              uint64_t v113 = 1.0;
              double v114 = 0.0;
              uint64_t v115 = 0.0;
              uint64_t v106 = -1.0;
LABEL_117:
              Swift::Int v117 = 0.0;
              Swift::Int v108 = 1.0;
              uint64_t v118 = 0.0;
            }
            else
            {
              if (v68) {
                goto LABEL_190;
              }
              v187 = 0;
              v188 = *(void *)(v13 + 120);
              CGFloat v191 = *(void *)(v13 + 112);
              CGFloat v194 = *(void *)(v13 + 104);
              v197 = *(void *)(v13 + 96);
              char v200 = *(void *)(v13 + 88);
              v203 = *(void *)(v13 + 80);
              double v206 = *(void **)(v13 + 32);
              CGFloat v209 = *(void *)(v13 + 24);
              double v186 = 1;
              CGFloat v212 = *(void *)(v13 + 72);
              long long v215 = *(void *)(v13 + 64);
              long long v218 = *(void *)(v13 + 56);
              CFIndex v221 = *(void *)(v13 + 48);
              LOBYTE(v224) = *(void *)(v13 + 40);
              unint64_t v101 = 0.0;
              uint64_t v107 = (float32x4_t)xmmword_2461ECA40;
              unint64_t v102 = 0.0;
              uint64_t v103 = 0.0;
              uint64_t v109 = 0.0;
              Swift::Int v110 = 0.0;
              uint64_t v104 = 0.0;
              uint64_t v105 = 0.0;
              Swift::Int v111 = 0.0;
              Swift::Int v112 = 0.0;
              uint64_t v113 = 0.0;
              double v114 = 0.0;
              uint64_t v115 = 0.0;
              uint64_t v106 = 0.0;
              Swift::Int v117 = 0.0;
              Swift::Int v108 = 0.0;
              uint64_t v118 = 0.0;
            }
LABEL_127:
            *(void *)&v267 = __PAIR64__(LODWORD(v102), LODWORD(v101));
            *((void *)&v267 + 1) = __PAIR64__(LODWORD(v109), LODWORD(v103));
            double v268 = v110;
            double v269 = v104;
            double v270 = v105;
            uint64_t v271 = v111;
            v272 = v112;
            v273 = v113;
            long long v274 = v114;
            long long v275 = v115;
            long long v276 = v106;
            long long v277 = v117;
            long long v278 = v107;
            long long v279 = v108;
            CGFloat v280 = v118;
            CGFloat v126 = *(void *)(v2 + 16);
            CGFloat v234 = *(void *)v2;
            CGFloat v281 = *(void *)v2;
            LOBYTE(v282) = v32;
            double v284 = v126;
            v285 = v68;
            v286 = 0;
            CGFloat v127 = v109 == 0.0;
            CGFloat v128 = v111 == 0.0;
            v129 = v115 == 0.0;
            if (v110 != 0.0) {
              CGFloat v127 = 0;
            }
            if (v112 != 0.0) {
              CGFloat v128 = 0;
            }
            if (v106 != 1.0) {
              v129 = 0;
            }
            uint64_t v34 = v101 == 1.0;
            uint64_t v130 = (uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v107)));
            v130.i16[0] = vmaxv_u16(v130);
            uint64_t v131 = (v102 == 0.0) & ~v130.i32[0];
            if (!v34) {
              uint64_t v131 = 0;
            }
            if (v103 != 0.0) {
              uint64_t v131 = 0;
            }
            if (v104 != 0.0) {
              CGFloat v127 = 0;
            }
            if (v113 != 0.0) {
              CGFloat v128 = 0;
            }
            if (v114 != 0.0) {
              CGFloat v128 = 0;
            }
            if (v117 != 0.0) {
              v129 = 0;
            }
            char v132 = v131 & v127;
            if (v105 != 1.0) {
              char v132 = 0;
            }
            v133 = v132 & (v128 && v129);
            if (v108 != 1.0) {
              v133 = 0;
            }
            id v239 = v16;
            if (v133 == 1 && v118 == 0.0)
            {
              outlined copy of DisplayList.Item.Value(v13, v14);
              swift_bridgeObjectRetain();
              outlined copy of DisplayList.Effect(v13, v14, 9);
              goto LABEL_187;
            }
            CGFloat v228 = v234 + 64;
            v134 = 1 << *(unsigned char *)(v234 + 32);
            if (v134 < 64) {
              v135 = ~(-1 << v134);
            }
            else {
              v135 = -1;
            }
            double v136 = v135 & *(void *)(v234 + 64);
            swift_bridgeObjectRetain();
            outlined copy of DisplayList.Item.Value(v13, v14);
            swift_bridgeObjectRetain();
            outlined copy of DisplayList.Effect(v13, v14, 9);
            uint64_t v140 = 0;
            CGFloat v231 = (unint64_t)(v134 + 63) >> 6;
            break;
          default:
            goto LABEL_69;
        }
        while (1)
        {
          if (v136)
          {
            CGFloat v144 = v16;
            CGFloat v145 = __clz(__rbit64(v136));
            v136 &= v136 - 1;
            CGFloat v146 = v145 | (v140 << 6);
            goto LABEL_174;
          }
          CGFloat v147 = v140 + 1;
          if (__OFADD__(v140, 1)) {
            goto LABEL_215;
          }
          if (v147 >= v231)
          {
            CGFloat v281 = v234;
            swift_release();
            uint64_t v2 = v232;
            goto LABEL_187;
          }
          v148 = *(void *)(v228 + 8 * v147);
          ++v140;
          uint64_t v2 = v232;
          if (!v148)
          {
            uint64_t v140 = v147 + 1;
            if (v147 + 1 >= v231) {
              goto LABEL_186;
            }
            v148 = *(void *)(v228 + 8 * v140);
            if (!v148)
            {
              uint64_t v140 = v147 + 2;
              if (v147 + 2 >= v231) {
                goto LABEL_186;
              }
              v148 = *(void *)(v228 + 8 * v140);
              if (!v148) {
                break;
              }
            }
          }
LABEL_173:
          CGFloat v144 = v16;
          double v136 = (v148 - 1) & v148;
          CGFloat v146 = __clz(__rbit64(v148)) + (v140 << 6);
LABEL_174:
          long long v150 = *(unsigned char *)(*(void *)(v234 + 48) + v146);
          long long v151 = (int8x16_t *)(*(void *)(v234 + 56) + 80 * v146);
          long long v152 = v151[3];
          v266[2] = v151[2];
          v266[3] = v152;
          v266[4] = v151[4];
          long long v153 = v151[1];
          v266[0] = *v151;
          v266[1] = v153;
          specialized static _ColorMatrix.* infix(_:_:)(v266, &v267, (uint64_t)&v261, v153, v137, v138, v139);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          CFIndex v156 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
          CGFloat v157 = *(void *)(v234 + 16);
          CGFloat v158 = (v155 & 1) == 0;
          CGFloat v159 = v157 + v158;
          if (__OFADD__(v157, v158)) {
            goto LABEL_213;
          }
          v160 = v155;
          if (*(void *)(v234 + 24) >= v159)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if (v155) {
                goto LABEL_156;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              if (v160) {
                goto LABEL_156;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v159, isUniquelyReferenced_nonNull_native);
            v161 = specialized __RawDictionaryStorage.find<A>(_:)(v150);
            if ((v160 & 1) != (v162 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              JUMPOUT(0x245E7DB14);
            }
            CFIndex v156 = v161;
            if (v160)
            {
LABEL_156:
              CGFloat v141 = (_OWORD *)(*(void *)(v234 + 56) + 80 * v156);
              CGFloat v142 = v264;
              v141[2] = v263;
              v141[3] = v142;
              v141[4] = v265;
              uint64_t v143 = v262;
              *CGFloat v141 = v261;
              v141[1] = v143;
              goto LABEL_157;
            }
          }
          *(void *)(v234 + 8 * (v156 >> 6) + 64) |= 1 << v156;
          *(unsigned char *)(*(void *)(v234 + 48) + v156) = v150;
          CGFloat v163 = (_OWORD *)(*(void *)(v234 + 56) + 80 * v156);
          CGFloat v164 = v265;
          CGFloat v165 = v263;
          v163[3] = v264;
          v163[4] = v164;
          CGFloat v166 = v262;
          *CGFloat v163 = v261;
          v163[1] = v166;
          v163[2] = v165;
          CGFloat v167 = *(void *)(v234 + 16);
          CGFloat v168 = __OFADD__(v167, 1);
          CGFloat v169 = v167 + 1;
          if (v168) {
            goto LABEL_214;
          }
          *(void *)(v234 + 16) = v169;
LABEL_157:
          swift_bridgeObjectRelease();
          uint64_t v16 = v144;
        }
        long long v149 = v147 + 3;
        if (v149 < v231)
        {
          v148 = *(void *)(v228 + 8 * v149);
          if (!v148)
          {
            while (1)
            {
              uint64_t v140 = v149 + 1;
              if (__OFADD__(v149, 1)) {
                goto LABEL_216;
              }
              if (v140 >= v231) {
                goto LABEL_186;
              }
              v148 = *(void *)(v228 + 8 * v140);
              ++v149;
              if (v148) {
                goto LABEL_173;
              }
            }
          }
          uint64_t v140 = v149;
          goto LABEL_173;
        }
LABEL_186:
        CGFloat v281 = v234;
        swift_release();
LABEL_187:
        ForegroundTransform.apply(to:)(&v246);
        outlined consume of DisplayList.Effect(v13, v14, 9);
        outlined consume of GraphicsFilter((void *)v186, v209, v206, v224, v221, v218, v215, v212, v203, v200, v197, v194, v191, v188, v187, SBYTE2(v187));
        swift_bridgeObjectRelease();
        outlined consume of DisplayList.Effect(v13, v14, 9);
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        LOBYTE(v76) = 19;
LABEL_85:
        uint64_t v79 = v246;
        uint64_t v80 = v247;
        CGFloat v229 = v248;
        uint64_t v81 = v291;
        if (v291 <= v235) {
          uint64_t v81 = v235;
        }
        CGFloat v236 = v81;
        outlined copy of DisplayList.Effect(v77, v78, v76);
        ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
        unint64_t v82 = v287;
        outlined copy of DisplayList.Effect(v77, v78, v76);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82[2] + 1, 1, v82);
        }
        uint64_t v84 = v82[2];
        uint64_t v83 = v82[3];
        if (v84 >= v83 >> 1) {
          unint64_t v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v83 > 1), v84 + 1, 1, v82);
        }
        _OWORD v82[2] = v84 + 1;
        unint64_t v85 = (CGFloat *)&v82[9 * v84];
        v85[4] = v9;
        v85[5] = v8;
        v85[6] = v11;
        v85[7] = v10;
        *((void *)v85 + 8) = v236;
        *((void *)v85 + 9) = v77;
        *((void *)v85 + 10) = v78 | ((unint64_t)v76 << 32) | 0x4000000000000000;
        *((void *)v85 + 11) = v79;
        *((unsigned char *)v85 + 98) = v229;
        *((_WORD *)v85 + 48) = v80;
        *((_DWORD *)v85 + 25) = v239;
        outlined consume of DisplayList.Effect(v77, v78, v76);
        outlined consume of DisplayList.Item.Value(v13, v14);
        outlined consume of DisplayList.Effect(v77, v78, v76);
        swift_bridgeObjectRelease();
        v287 = v82;
        uint64_t v2 = v232;
LABEL_43:
        float64x2_t v42 = v241;
        uint64_t v5 = v242;
LABEL_44:
        unint64_t v6 = v244;
        if (v244 != v42) {
          continue;
        }
LABEL_210:
        swift_bridgeObjectRelease();
        ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
        double v182 = (uint64_t)v287;
        swift_bridgeObjectRelease();
        uint64_t result = DisplayList.init(_:)(v182, (uint64_t)&v281);
        double v184 = v282;
        double v185 = v283;
        *a1 = v281;
        *((_WORD *)a1 + 4) = v184;
        *((unsigned char *)a1 + 10) = v185;
        return result;
      case 2uLL:
        BOOL v238 = v16;
        uint64_t v48 = v12;
        uint64_t v49 = *(void *)(v13 + 16);
        outlined copy of DisplayList.Item.Value(v13, v14);
        if (!v49)
        {
          uint64_t v52 = (void *)v13;
LABEL_71:
          if (v291 <= v48) {
            uint64_t v69 = v48;
          }
          else {
            uint64_t v69 = v291;
          }
          ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
          uint64_t v70 = v287;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70[2] + 1, 1, v70);
          }
          uint64_t v72 = v70[2];
          BOOL v71 = v70[3];
          if (v72 >= v71 >> 1) {
            uint64_t v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v71 > 1), v72 + 1, 1, v70);
          }
          long long v70[2] = v72 + 1;
          uint64_t v73 = (CGFloat *)&v70[9 * v72];
          v73[4] = v9;
          v73[5] = v8;
          v73[6] = v11;
          v73[7] = v10;
          *((void *)v73 + 8) = v69;
          *((void *)v73 + 9) = v52;
          *((_OWORD *)v73 + 5) = xmmword_24619B530;
          *((unsigned char *)v73 + 98) = 0;
          *((_WORD *)v73 + 48) = 0;
          *((_DWORD *)v73 + 25) = v238;
          outlined consume of DisplayList.Item.Value(v13, v14);
          swift_bridgeObjectRelease();
          v287 = v70;
          goto LABEL_43;
        }
        uint64_t v50 = 0;
        uint64_t v51 = 7;
        uint64_t v52 = (void *)v13;
        while (1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew()(v52);
          }
          if (v50 >= v52[2]) {
            break;
          }
          ++v50;
          ForegroundTransform.apply(to:)(&v52[v51]);
          v51 += 5;
          if (v49 == v50) {
            goto LABEL_71;
          }
        }
        __break(1u);
        goto LABEL_212;
      case 3uLL:
        float64x2_t v40 = v13;
        long long v41 = v14;
        goto LABEL_42;
      default:
        switch(v13 >> 60)
        {
          case 9uLL:
            uint64_t v240 = v16;
            Swift::String v86 = *(_WORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v87 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
            unint64_t v89 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v88 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            CGFloat v237 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            CGFloat v233 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
            unint64_t v90 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
            uint64_t v91 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
            CGFloat v230 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            CGFloat v281 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            CGFloat v282 = v86;
            CGFloat v283 = v87;
            outlined copy of DisplayList.Item.Value(v13, v14);
            outlined copy of DisplayList.Item.Value(v13, v14);
            swift_bridgeObjectRetain();
            ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
            ForegroundTransform.apply(to:)(&v281);
            uint64_t v92 = swift_allocObject();
            unint64_t v93 = v282;
            uint64_t v94 = v283;
            *(void *)(v92 + 16) = v281;
            *(_WORD *)(v92 + 24) = v93;
            *(unsigned char *)(v92 + 26) = v94;
            *(void *)(v92 + 32) = v89;
            *(void *)(v92 + 40) = v88;
            *(unsigned char *)(v92 + 48) = v237;
            *(_DWORD *)(v92 + 52) = v233;
            *(unsigned char *)(v92 + 56) = v90;
            *(_DWORD *)(v92 + 60) = v91;
            *(unsigned char *)(v92 + 64) = v230;
            swift_retain();
            outlined consume of DisplayList.Item.Value(v13, v14);
            uint64_t v95 = v287;
            if (v291 > v12) {
              uint64_t v12 = v291;
            }
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95[2] + 1, 1, v95);
            }
            uint64_t v97 = v95[2];
            uint64_t v96 = v95[3];
            uint64_t v2 = v232;
            if (v97 >= v96 >> 1) {
              uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v96 > 1), v97 + 1, 1, v95);
            }
            v95[2] = v97 + 1;
            uint64_t v98 = (CGFloat *)&v95[9 * v97];
            v98[4] = v9;
            v98[5] = v8;
            v98[6] = v11;
            v98[7] = v10;
            *((void *)v98 + 8) = v12;
            *((void *)v98 + 9) = v92 | 0x9000000000000000;
            *((void *)v98 + 10) = (unsigned __int16)v14;
            v98[11] = 0.0;
            *((unsigned char *)v98 + 98) = 0;
            *((_WORD *)v98 + 48) = 0;
            *((_DWORD *)v98 + 25) = v240;
            outlined consume of DisplayList.Item.Value(v13, v14);
            swift_release();
            outlined consume of DisplayList.Item.Value(v13, v14);
            swift_release();
            v287 = v95;
            uint64_t v5 = v242;
            float64x2_t v42 = v241;
            goto LABEL_44;
          case 0xCuLL:
            goto LABEL_49;
          default:
            swift_retain();
LABEL_49:
            if (v289)
            {
              ForegroundTransform.NewList.flushPendingItems(transform:)(v2);
              v289 = *(unsigned char *)(v2 + 25);
            }
            long long v43 = v288;
            outlined copy of DisplayList.Item.Value(v13, v14);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
            }
            char v45 = v43[2];
            uint64_t v44 = v43[3];
            if (v45 >= v44 >> 1) {
              long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
            }
            _OWORD v43[2] = v45 + 1;
            uint64_t v46 = (CGFloat *)&v43[9 * v45];
            v46[4] = v9;
            v46[5] = v8;
            v46[6] = v11;
            v46[7] = v10;
            *((void *)v46 + 8) = v12;
            *((void *)v46 + 9) = v13;
            *((void *)v46 + 10) = v14;
            *((void *)v46 + 11) = v245;
            *((unsigned char *)v46 + 98) = BYTE2(v15);
            *((_WORD *)v46 + 48) = v15;
            *((_DWORD *)v46 + 25) = v16;
            double v288 = v43;
            v295.origin.double x = v9;
            v295.origin.double y = v8;
            v295.size.double width = v11;
            v295.size.double height = v10;
            v290 = CGRectUnion(v290, v295);
            char v47 = v291;
            if (v12 > v291) {
              char v47 = v12;
            }
            v291 = v47;
            outlined consume of DisplayList.Item.Value(v13, v14);
            goto LABEL_41;
        }
    }
  }
}

uint64_t DisplayList.applyViewGraphTransform(time:version:)(uint64_t result, uint64_t *a2)
{
  if ((*(_WORD *)(v2 + 8) & 0x60) != 0)
  {
    uint64_t v3 = *a2;
    int v5 = result;
    uint64_t v6 = v3;
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v4 = 0;
    specialized DisplayList.transform(_:)(v2, (uint64_t)&v5, &v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ForegroundTransform.NewList.flushPendingItems(transform:)(uint64_t result)
{
  uint64_t v4 = *(void **)(v1 + 8);
  if (v4[2])
  {
    uint64_t v5 = v1;
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    if (!*(void *)(*(void *)result + 16)) {
      goto LABEL_5;
    }
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned char *)(v5 + 16));
    if ((v9 & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v10 = *(void *)(v7 + 56) + 80 * v8;
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v12 = *(_OWORD *)(v10 + 48);
    long long v54 = *(_OWORD *)(v10 + 32);
    long long v55 = v12;
    long long v56 = *(_OWORD *)(v10 + 64);
    long long v52 = *(_OWORD *)v10;
    long long v53 = v11;
    uint64_t v13 = *(void *)v10;
    uint64_t v14 = *(void *)(v10 + 8);
    uint64_t v15 = *(void *)(v10 + 16);
    uint64_t v16 = *(void *)(v10 + 24);
    uint64_t v18 = *(void *)(v10 + 32);
    uint64_t v17 = *(void *)(v10 + 40);
    uint64_t v39 = *(void *)(v10 + 56);
    uint64_t v40 = *(void *)(v10 + 48);
    uint64_t v37 = *(void *)(v10 + 72);
    uint64_t v38 = *(void *)(v10 + 64);
    if (_ColorMatrix.isIdentity.getter())
    {
LABEL_5:
      uint64_t v19 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v19);
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v5 + 8) = MEMORY[0x263F8EE78];
      long long v20 = *(_OWORD *)(MEMORY[0x263F001A0] + 16);
      *(_OWORD *)(v5 + 24) = *MEMORY[0x263F001A0];
      *(_OWORD *)(v5 + 40) = v20;
      *(void *)(v5 + 56) = *(void *)(v6 + 16);
      return result;
    }
    char v21 = (void *)v4[2];
    if (v21)
    {
      float64x2_t v36 = *(float64x2_t *)(v5 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      }
      long long v22 = 0;
      unint64_t v23 = v4[2];
      uint64_t v24 = 4;
      while ((unint64_t)v22 < v23)
      {
        long long v22 = (void *)((char *)v22 + 1);
        *(float64x2_t *)&v4[v24] = vsubq_f64(*(float64x2_t *)&v4[v24], v36);
        v24 += 9;
        if (v21 == v22)
        {
          uint64_t v25 = v17;
          *(void *)(v5 + 8) = v4;
          goto LABEL_16;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v25 = v17;
LABEL_16:
      uint64_t v17 = swift_allocObject();
      uint64_t v26 = *(unsigned __int8 *)(v6 + 24);
      *(void *)(v17 + 16) = v13;
      *(void *)(v17 + 24) = v14;
      *(void *)(v17 + 32) = v15;
      *(void *)(v17 + 40) = v16;
      *(void *)(v17 + 48) = v18;
      *(void *)(v17 + 56) = v25;
      *(void *)(v17 + 64) = v40;
      *(void *)(v17 + 72) = v39;
      *(void *)(v17 + 80) = v38;
      *(void *)(v17 + 88) = v37;
      *(void *)(v17 + 96) = v26;
      *(unsigned char *)(v17 + 132) = 4;
      uint64_t v27 = swift_bridgeObjectRetain();
      DisplayList.init(_:)(v27, (uint64_t)&v41);
      uint64_t v28 = v41;
      int v29 = (unsigned __int16)v42;
      char v30 = BYTE2(v42);
      uint64_t v31 = *(void *)(v5 + 24);
      uint64_t v32 = *(void *)(v5 + 32);
      uint64_t v2 = *(void *)(v5 + 40);
      uint64_t v3 = *(void *)(v5 + 48);
      uint64_t v15 = *(void *)(v5 + 56);
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>();
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 32) = 0;
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_2461B9DC0;
      *(void *)(v13 + 32) = v31;
      *(void *)(v13 + 40) = v32;
      *(void *)(v13 + 48) = v2;
      *(void *)(v13 + 56) = v3;
      *(void *)(v13 + 64) = v15;
      *(_OWORD *)(v13 + 72) = xmmword_2461D9D10;
      *(void *)(v13 + 88) = v28;
      *(unsigned char *)(v13 + 98) = v30;
      *(_WORD *)(v13 + 96) = v29;
      *(_DWORD *)(v13 + 100) = 0;
      outlined copy of DisplayList.Effect(2, 0, 19);
      swift_bridgeObjectRetain();
      outlined copy of DisplayList.Effect(2, 0, 19);
      swift_retain();
      uint64_t v41 = v31;
      uint64_t v42 = v32;
      uint64_t v43 = v2;
      uint64_t v44 = v3;
      uint64_t v45 = v15;
      long long v46 = xmmword_2461D9D10;
      uint64_t v47 = v28;
      char v49 = v30;
      __int16 v48 = v29;
      int v50 = 0;
      DisplayList.Item.properties.getter(&v51);
      outlined consume of DisplayList.Effect(2, 0, 19);
      swift_bridgeObjectRelease();
      LODWORD(v16) = v29 | (v51 << 16);
      char v21 = *(void **)v5;
      outlined copy of DisplayList.Effect(v17, 0, 9);
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_17;
      }
    }
    char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
LABEL_17:
    unint64_t v34 = v21[2];
    unint64_t v33 = v21[3];
    if (v34 >= v33 >> 1) {
      char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v21);
    }
    void v21[2] = v34 + 1;
    uint64_t v35 = &v21[9 * v34];
    v35[4] = 0;
    v35[5] = 0;
    v35[6] = v2;
    v35[7] = v3;
    v35[8] = v15;
    v35[9] = v17;
    v35[10] = 0x4000000900000000;
    v35[11] = v13;
    *((unsigned char *)v35 + 98) = BYTE2(v16);
    *((_WORD *)v35 + 48) = v16;
    *((_DWORD *)v35 + 25) = 0;
    swift_release();
    outlined consume of DisplayList.Effect(v17, 0, 9);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v21;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #1 in ViewGraphTransform.apply(to:)(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 40);
  unint64_t v4 = *(void *)(result + 48);
  int v5 = *(unsigned __int16 *)(result + 64) | (*(unsigned __int8 *)(result + 66) << 16);
  uint64_t v6 = a3;
  uint64_t v8 = result;
  switch(v4 >> 62)
  {
    case 1uLL:
      char v25 = *(_WORD *)(result + 64);
      uint64_t v101 = *(void *)(result + 56);
      __int16 v102 = v5;
      char v103 = BYTE2(v5);
      if (BYTE4(v4) != 7)
      {
        if (BYTE4(v4) != 15)
        {
          if (BYTE4(v4) == 16)
          {
            double v26 = *(double *)(v3 + 24);
            double v27 = *(double *)(v3 + 32);
            double v28 = *(double *)(v3 + 40);
            double v29 = *(double *)(v3 + 48);
            if ((v5 & 0x60) != 0 || (v5 & 0x80) != 0 && *(void *)(*(void *)(a2 + 16) + 16))
            {
              uint64_t v104 = 0;
              outlined copy of DisplayList.Item.Value(v3, v4);
              outlined copy of DisplayList.Effect(v3, v4, 16);
              swift_retain();
              specialized DisplayList.transform(_:)(&v101, a2, &v104);
              uint64_t v30 = v104;
            }
            else
            {
              outlined copy of DisplayList.Item.Value(v3, v4);
              outlined copy of DisplayList.Effect(v3, v4, 16);
              swift_retain();
              uint64_t v30 = 0;
            }
            unsigned int v65 = *(_DWORD *)a2;
            uint64_t v104 = *(void *)(a2 + 8);
            DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v101, v65, &v104, v26, v27, v28, v29);
            uint64_t v66 = a2;
            char v68 = v67;
            outlined consume of DisplayList.Effect(v3, v4, 16);
            swift_release();
            if (v68) {
              uint64_t v30 = *(void *)(v66 + 8);
            }
            outlined consume of DisplayList.Effect(v3, v4, 16);
            uint64_t v69 = v3;
LABEL_97:
            uint64_t result = outlined consume of DisplayList.Item.Value(v69, v4);
            unint64_t v3 = 0;
            LODWORD(v4) = 0;
            LOBYTE(v58) = 19;
            goto LABEL_101;
          }
          unint64_t v58 = HIDWORD(v4);
          if ((v5 & 0x60) != 0 || (v5 & 0x80) != 0 && *(void *)(*(void *)(a2 + 16) + 16))
          {
            uint64_t v104 = 0;
            uint64_t result = specialized DisplayList.transform(_:)(&v101, a2, &v104);
            uint64_t v30 = v104;
          }
          else
          {
            uint64_t v30 = 0;
          }
          goto LABEL_101;
        }
        uint64_t v47 = *(void *)(v3 + 16);
        uint64_t v48 = *(void *)(v3 + 24);
        int v49 = *(_DWORD *)(v3 + 32);
        uint64_t v50 = *(void *)(result + 32);
        uint64_t v51 = a2 + 16;
        long long v52 = *(void **)(a2 + 16);
        outlined copy of DisplayList.Item.Value(v3, v4);
        outlined copy of DisplayList.Effect(v3, v4, 15);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v51 = v52;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
          *(void *)uint64_t v51 = v52;
        }
        unint64_t v55 = v52[2];
        unint64_t v54 = v52[3];
        unint64_t v56 = v55 + 1;
        if (v55 >= v54 >> 1)
        {
          uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v52);
          unint64_t v56 = v55 + 1;
          long long v52 = v83;
        }
        _DWORD v52[2] = v56;
        uint64_t v57 = &v52[4 * v55];
        v57[4] = v47;
        v57[5] = v48;
        *((_DWORD *)v57 + 12) = v49;
        v57[7] = v50;
        *(void *)uint64_t v51 = v52;
        if ((v25 & 0x60) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v6 = a3;
LABEL_43:
          uint64_t v104 = 0;
          specialized DisplayList.transform(_:)(&v101, a2, &v104);
          uint64_t v30 = v104;
LABEL_93:
          if (!*(void *)(*(void *)v51 + 16))
          {
            __break(1u);
            JUMPOUT(0x245E7E9ACLL);
          }
          specialized Array._customRemoveLast()((uint64_t)&v104);
          if (v109) {
            specialized Array.remove(at:)(*(void *)(*(void *)v51 + 16) - 1, (uint64_t)&v104);
          }
          outlined consume of DisplayList.Effect(v3, v4, 15);
          outlined consume of DisplayList.Effect(v3, v4, 15);
          uint64_t v69 = v3;
          goto LABEL_97;
        }
        uint64_t v6 = a3;
        if (v25 < 0)
        {
          uint64_t v75 = v52[2];
          swift_bridgeObjectRelease();
          if (v75) {
            goto LABEL_43;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v30 = 0;
        goto LABEL_93;
      }
      uint64_t v43 = *(void *)(v3 + 16);
      __int16 v44 = *(_WORD *)(v3 + 24);
      char v45 = *(unsigned char *)(v3 + 26);
      int v46 = *(_DWORD *)(v3 + 28);
      uint64_t v104 = v43;
      LOWORD(v105) = v44;
      BYTE2(v105) = v45;
      int v91 = v46;
      if ((v5 & 0x60) != 0 || (v5 & 0x80) != 0 && *(void *)(*(void *)(a2 + 16) + 16))
      {
        uint64_t v100 = 0;
        swift_bridgeObjectRetain();
        outlined copy of DisplayList.Item.Value(v3, v4);
        swift_bridgeObjectRetain();
        outlined copy of DisplayList.Effect(v3, v4, 7);
        specialized DisplayList.transform(_:)(&v101, a2, &v100);
        uint64_t v30 = v100;
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined copy of DisplayList.Item.Value(v3, v4);
        swift_bridgeObjectRetain();
        outlined copy of DisplayList.Effect(v3, v4, 7);
        uint64_t v30 = 0;
      }
      if ((v44 & 0x60) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_68:
        uint64_t v100 = 0;
        specialized DisplayList.transform(_:)(&v104, a2, &v100);
        outlined consume of DisplayList.Effect(v3, v4, 7);
        if (v100 > v30) {
          uint64_t v30 = v100;
        }
        uint64_t v43 = v104;
        __int16 v44 = v105;
        char v45 = BYTE2(v105);
        goto LABEL_100;
      }
      if ((v44 & 0x80) != 0)
      {
        uint64_t v76 = *(void *)(*(void *)(a2 + 16) + 16);
        swift_bridgeObjectRelease();
        if (v76) {
          goto LABEL_68;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      outlined consume of DisplayList.Effect(v3, v4, 7);
LABEL_100:
      LOBYTE(v58) = 7;
      uint64_t v77 = swift_allocObject();
      *(void *)(v77 + 16) = v43;
      *(_WORD *)(v77 + 24) = v44;
      *(unsigned char *)(v77 + 26) = v45;
      *(_DWORD *)(v77 + 28) = v91;
      outlined consume of DisplayList.Effect(v3, v4, 7);
      uint64_t result = outlined consume of DisplayList.Item.Value(v3, v4);
      LODWORD(v4) = 0;
      unint64_t v3 = v77;
      uint64_t v6 = a3;
LABEL_101:
      uint64_t v78 = v101;
      __int16 v79 = v102;
      char v80 = v103;
      *(void *)(v8 + 48) = v4 | ((unint64_t)v58 << 32) | 0x4000000000000000;
      *(void *)(v8 + 56) = v78;
      *(unsigned char *)(v8 + 66) = v80;
      *(_WORD *)(v8 + 64) = v79;
      uint64_t v81 = *(void *)(v8 + 32);
      if (v30 > v81) {
        uint64_t v81 = v30;
      }
      *(void *)(v8 + 32) = v81;
      *(void *)(v8 + 40) = v3;
      uint64_t v82 = *v6;
      if (v30 > *v6) {
        uint64_t v82 = v30;
      }
      *uint64_t v6 = v82;
      return result;
    case 2uLL:
      uint64_t v31 = a2 + 16;
      if (!*(void *)(*(void *)(a2 + 16) + 16)) {
        return result;
      }
      unint64_t v90 = *(void *)(result + 48);
      swift_bridgeObjectRetain();
      specialized Array._customRemoveLast()((uint64_t)&v104);
      uint64_t v93 = a2 + 16;
      if (v109)
      {
        specialized Array.remove(at:)(*(void *)(*(void *)v31 + 16) - 1, (uint64_t)&v104);
        int v32 = v104;
        int v33 = HIDWORD(v104);
        int v35 = v105;
        int v34 = v106;
        int v36 = v107;
        uint64_t v88 = v108;
        uint64_t v37 = *(void *)(v3 + 16);
        if (!v37) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v88 = v108;
        int v34 = v106;
        int v36 = v107;
        int v33 = HIDWORD(v104);
        int v35 = v105;
        int v32 = v104;
        uint64_t v37 = *(void *)(v3 + 16);
        if (!v37)
        {
LABEL_34:
          outlined consume of DisplayList.Item.Value(v3, v90);
          outlined consume of DisplayList.Item.Value(v3, v90);
          *(_OWORD *)(v8 + 40) = xmmword_2461B9DE0;
          *(void *)(v8 + 56) = 0;
          *(unsigned char *)(v8 + 66) = 0;
          *(_WORD *)(v8 + 64) = 0;
          goto LABEL_82;
        }
      }
      unint64_t v38 = v3 + 36;
      while (1)
      {
        BOOL v39 = *(_DWORD *)(v38 - 4) == v32 && *(_DWORD *)v38 == v33;
        BOOL v40 = v39 && *(_DWORD *)(v38 + 4) == v35;
        BOOL v41 = v40 && *(_DWORD *)(v38 + 8) == v34;
        if (v41 && *(_DWORD *)(v38 + 12) == v36) {
          break;
        }
        v38 += 40;
        if (!--v37) {
          goto LABEL_34;
        }
      }
      uint64_t v59 = *(void *)(v38 + 20);
      __int16 v85 = *(_WORD *)(v38 + 28);
      char v86 = *(unsigned char *)(v38 + 30);
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Item.Value(v3, v90);
      uint64_t v84 = v59;
      uint64_t v104 = v59;
      __int16 v60 = v85;
      LOWORD(v105) = v85;
      BYTE2(v105) = v86;
      if ((v85 & 0x60) != 0 || (v85 & 0x80) != 0 && *(void *)(*(void *)v93 + 16))
      {
        uint64_t v101 = 0;
        specialized DisplayList.transform(_:)(&v104, a2, &v101);
        outlined consume of DisplayList.Item.Value(v3, v90);
        uint64_t v61 = v101;
        if (v101 <= *(void *)(v8 + 32)) {
          uint64_t v61 = *(void *)(v8 + 32);
        }
        *(void *)(v8 + 32) = v61;
        uint64_t v62 = v104;
        __int16 v60 = v105;
        char v63 = BYTE2(v105);
      }
      else
      {
        outlined consume of DisplayList.Item.Value(v3, v90);
        uint64_t v62 = v84;
        char v63 = v86;
      }
      *(_OWORD *)(v8 + 40) = xmmword_2461B9DD0;
      *(void *)(v8 + 56) = v62;
      *(unsigned char *)(v8 + 66) = v63;
      *(_WORD *)(v8 + 64) = v60;
LABEL_82:
      uint64_t v70 = *(void *)(v8 + 32);
      if (v88 > v70) {
        uint64_t v70 = v88;
      }
      *(void *)(v8 + 32) = v70;
      if (v70 <= *a3) {
        uint64_t v70 = *a3;
      }
      *a3 = v70;
      BOOL v71 = *(void **)v93;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v93 = v71;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
        BOOL v71 = (void *)result;
        *(void *)uint64_t v93 = result;
      }
      unint64_t v73 = v71[2];
      unint64_t v72 = v71[3];
      if (v73 >= v72 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v72 > 1), v73 + 1, 1, v71);
        BOOL v71 = (void *)result;
      }
      v71[2] = v73 + 1;
      unint64_t v74 = &v71[4 * v73];
      *((_DWORD *)v74 + 8) = v32;
      *((_DWORD *)v74 + 9) = v33;
      *((_DWORD *)v74 + 10) = v35;
      *((_DWORD *)v74 + 11) = v34;
      *((_DWORD *)v74 + 12) = v36;
      v74[7] = v88;
      *(void *)uint64_t v93 = v71;
      return result;
    case 3uLL:
      return result;
    default:
      if (v3 >> 60 == 9)
      {
        __int16 v10 = *(_WORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        char v11 = *(unsigned char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        uint64_t v12 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
        char v14 = *(unsigned char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        int v15 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
        char v16 = *(unsigned char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        int v17 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
        char v18 = *(unsigned char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
        uint64_t v104 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        LOWORD(v105) = v10;
        BYTE2(v105) = v11;
        if ((v10 & 0x60) != 0 || (v10 & 0x80) != 0 && *(void *)(*(void *)(a2 + 16) + 16))
        {
          uint64_t v101 = 0;
          int v92 = v17;
          char v89 = v18;
          char v87 = v16;
          outlined copy of DisplayList.Item.Value(v3, v4);
          swift_bridgeObjectRetain();
          specialized DisplayList.transform(_:)(&v104, a2, &v101);
          uint64_t v19 = v101;
          if (v101 <= *(void *)(v8 + 32)) {
            uint64_t v20 = *(void *)(v8 + 32);
          }
          else {
            uint64_t v20 = v101;
          }
          *(void *)(v8 + 32) = v20;
          uint64_t v21 = swift_allocObject();
          __int16 v22 = v105;
          char v23 = BYTE2(v105);
          *(void *)(v21 + 16) = v104;
          *(_WORD *)(v21 + 24) = v22;
          *(unsigned char *)(v21 + 26) = v23;
          *(void *)(v21 + 32) = v12;
          *(void *)(v21 + 40) = v13;
          *(unsigned char *)(v21 + 48) = v14;
          *(_DWORD *)(v21 + 52) = v15;
          *(unsigned char *)(v21 + 56) = v87;
          *(_DWORD *)(v21 + 60) = v92;
          *(unsigned char *)(v21 + 64) = v89;
          outlined consume of DisplayList.Item.Value(v3, v4);
          if (v20) {
            uint64_t v24 = (2 * (((33 * WORD1(v20)) ^ v20) & 0x7FFFLL)) | 1;
          }
          else {
            uint64_t v24 = 0;
          }
          *(void *)(v8 + 40) = v21 | 0x9000000000000000;
          *(void *)(v8 + 48) = v24;
          *(void *)(v8 + 56) = 0;
          *(unsigned char *)(v8 + 66) = 0;
          *(_WORD *)(v8 + 64) = 0;
          uint64_t v64 = *a3;
          if (v19 > *a3) {
            uint64_t v64 = v19;
          }
          *a3 = v64;
          return outlined consume of DisplayList.Item.Value(v3, v4);
        }
      }
      return result;
  }
}

uint64_t sub_245E7E9BC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E7E9F4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E7EA2C()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>);
    }
  }
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EnvironmentalViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance EnvironmentalViewChild<A>()
{
  return specialized EnvironmentalViewChild.description.getter();
}

uint64_t dispatch thunk of EnvironmentalView.body(environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

unint64_t specialized EnvironmentalViewChild.description.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

uint64_t EnvironmentReader.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static EnvironmentReader._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v9 = *a1;
  int v5 = *((_DWORD *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v7 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return 1;
    }
  }
  else if (static Semantics.forced < v7)
  {
    return 1;
  }
  long long v10 = v9;
  int v11 = v5;
  uint64_t v12 = v6;
  return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a3 + 40))(&v10, a2, a3);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EnvironmentReader<A>(long long *a1, uint64_t a2)
{
  return static EnvironmentReader._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t key path getter for _AppearanceActionModifier.appear : _AppearanceActionModifier@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _AppearanceActionModifier.appear : _AppearanceActionModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t _AppearanceActionModifier.appear.getter(uint64_t a1)
{
  return a1;
}

uint64_t _AppearanceActionModifier.appear.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v2);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_AppearanceActionModifier.appear.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _AppearanceActionModifier.disappear : _AppearanceActionModifier@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _AppearanceActionModifier.disappear : _AppearanceActionModifier(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t _AppearanceActionModifier.disappear.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _AppearanceActionModifier.disappear.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_AppearanceActionModifier.disappear.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _AppearanceActionModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v9 = *MEMORY[0x263F288F8];
  LODWORD(v14) = *a1;
  uint64_t v15 = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  LOBYTE(v19) = 0;
  DWORD1(v19) = 0;
  DWORD2(v19) = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  uint64_t v13 = a2[3];
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v10 = AGGraphSetFlags();
  uint64_t v14 = v5;
  LODWORD(v15) = v6;
  uint64_t v16 = v7;
  uint64_t v11 = a2[4];
  uint64_t v17 = v13;
  uint64_t v18 = v11;
  long long v19 = *(_OWORD *)(a2 + 5);
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v8;
  return a3(v10, &v14);
}

uint64_t AppearanceEffect.init(modifier:phase:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = a2;
  *(void *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 48) = v3;
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance _AppearanceActionModifier.MergedCallbacks(void *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void closure #2 in AppearanceEffect.appeared()()
{
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x263F288F8])
  {
    AGGraphGetAttributeInfo();
    if (*(void *)(v0 + 8) != 1) {
      AppearanceEffect.disappeared()();
    }
  }
}

void static AppearanceEffect.willRemove(attribute:)()
{
  AGGraphGetAttributeInfo();
  if (*(void *)(v0 + 8) != 1) {
    AppearanceEffect.disappeared()();
  }
}

void *assignWithTake for _AppearanceActionModifier(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _AppearanceActionModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AppearanceActionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v5 = (long long *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    if (v6)
    {
      if (v6 == 1)
      {
        long long v8 = *v7;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_25:
        *uint64_t v5 = v8;
        goto LABEL_26;
      }
      uint64_t v11 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v11;
      swift_retain();
    }
    else
    {
      *uint64_t v5 = *v7;
    }
    uint64_t v12 = *(void *)(a2 + 24);
    if (!v12)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      goto LABEL_26;
    }
LABEL_22:
    uint64_t v15 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v15;
    swift_retain();
    goto LABEL_26;
  }
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        uint64_t v10 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = v10;
        swift_retain();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    else if (v6)
    {
      uint64_t v13 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v13;
      swift_retain();
      goto LABEL_18;
    }
    *uint64_t v5 = *v7;
LABEL_18:
    uint64_t v5 = (long long *)(a1 + 24);
    uint64_t v12 = *(void *)(a2 + 24);
    if (*(void *)(a1 + 24))
    {
      if (v12)
      {
        uint64_t v14 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = v14;
        swift_retain();
        swift_release();
        goto LABEL_26;
      }
      swift_release();
    }
    else if (v12)
    {
      goto LABEL_22;
    }
    long long v8 = *(_OWORD *)(a2 + 24);
    goto LABEL_25;
  }
  outlined destroy of _AppearanceActionModifier((void *)(a1 + 8));
  long long v9 = v7[1];
  *uint64_t v5 = *v7;
  v5[1] = v9;
LABEL_26:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

void *outlined destroy of _AppearanceActionModifier(void *a1)
{
  return a1;
}

uint64_t assignWithTake for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4 == 1) {
    goto LABEL_4;
  }
  if (v6 != 1)
  {
    if (v4)
    {
      if (v6)
      {
        uint64_t v10 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = v10;
        swift_release();
        goto LABEL_13;
      }
      swift_release();
    }
    else if (v6)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v11;
      goto LABEL_13;
    }
    *uint64_t v5 = *v7;
LABEL_13:
    uint64_t v12 = *(void *)(a2 + 24);
    if (*(void *)(a1 + 24))
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = v13;
        swift_release();
        goto LABEL_5;
      }
      swift_release();
    }
    else if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v14;
      goto LABEL_5;
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_5;
  }
  outlined destroy of _AppearanceActionModifier((void *)(a1 + 8));
LABEL_4:
  long long v8 = v7[1];
  *uint64_t v5 = *v7;
  v5[1] = v8;
LABEL_5:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AppearanceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 52) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppearanceEffect()
{
  return &type metadata for AppearanceEffect;
}

uint64_t sub_245E7F7F4()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for _AppearanceActionModifier.MergedCallbacks()
{
  return &unk_26FA6D838;
}

uint64_t sub_245E7F86C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245E7F8A4()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in AppearanceEffect.appeared()()
{
}

uint64_t _PreferenceValue.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v7(a2, WeakValue, AssociatedTypeWitness);
}

uint64_t _PreferenceValue.attribute.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_PreferenceValue.attribute.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _PreferenceValue.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _DelayedPreferenceView.transform.getter(uint64_t a1)
{
  return a1;
}

uint64_t _DelayedPreferenceView.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_DelayedPreferenceView.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PreferenceValueAttribute.init(source:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DelayedPreferenceChild<A, B>()
{
  return specialized DelayedPreferenceChild.description.getter();
}

uint64_t View.preferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, _UNKNOWN **a10)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  int v35 = a9;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  double v17 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v10, v19, v17);
  unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = a4;
  *((void *)v22 + 3) = a5;
  *((void *)v22 + 4) = a6;
  *((void *)v22 + 5) = a7;
  uint64_t v23 = v32;
  *((void *)v22 + 6) = v32;
  *((void *)v22 + 7) = a10;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v22[v20], v18, a4);
  uint64_t v24 = &v22[v21];
  uint64_t v25 = v34;
  *(void *)uint64_t v24 = v33;
  *((void *)v24 + 1) = v25;
  uint64_t v26 = type metadata accessor for _DetachedKey();
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = v23;
  BOOL v39 = a10;
  uint64_t v27 = type metadata accessor for _PreferenceReadingView();
  uint64_t v36 = v26;
  uint64_t v37 = a4;
  uint64_t v38 = v27;
  BOOL v39 = &protocol witness table for _DetachedKey<A>;
  uint64_t v40 = v31;
  BOOL v41 = &protocol witness table for _PreferenceReadingView<A, B>;
  type metadata accessor for _DetachedView();
  double v28 = v35;
  void *v35 = partial apply for closure #1 in View.preferenceValue<A, B>(_:_:);
  v28[1] = v22;
  return swift_retain();
}

uint64_t closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = type metadata accessor for _DetachedKey();
  double v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  unsigned __int8 v17[4] = a6;
  v17[5] = a7;
  v17[6] = a9;
  v17[7] = a10;
  v17[8] = *a1;
  v17[9] = a2;
  v17[10] = a3;
  uint64_t v18 = type metadata accessor for _PreferenceReadingView();
  View._detached<A, B>(with:_:)(v16, (uint64_t)partial apply for closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:), (uint64_t)v17, a4, v16, v18, a7, (uint64_t)&protocol witness table for _DetachedKey<A>, a8, (uint64_t)&protocol witness table for _PreferenceReadingView<A, B>);
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  long long v17 = *(_OWORD *)(a1 + 80);
  v26[4] = *(_OWORD *)(a1 + 64);
  v26[5] = v17;
  uint64_t v27 = *(void *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v18;
  long long v19 = *(_OWORD *)(a1 + 48);
  void v26[2] = *(_OWORD *)(a1 + 32);
  v26[3] = v19;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  *(void *)(v20 + 24) = a5;
  *(void *)(v20 + 32) = a6;
  *(void *)(v20 + 40) = a7;
  *(void *)(v20 + 48) = a9;
  *(void *)(v20 + 56) = a10;
  *(void *)(v20 + 64) = a2;
  *(void *)(v20 + 72) = a3;
  long long v21 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v20 + 144) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v20 + 160) = v21;
  *(void *)(v20 + 176) = *(void *)(a1 + 96);
  long long v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 96) = v22;
  long long v23 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v20 + 112) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v20 + 128) = v23;
  type metadata accessor for _PreferenceValue();
  _PreferenceValue._force<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:), v20, a8);
  swift_retain();
  outlined retain of _DetachedPlaceholder<_DetachedKey<A1>>((uint64_t)v26);
  return swift_release();
}

uint64_t PreferenceValueAttribute.source.getter()
{
  return *(void *)v0;
}

uint64_t PreferenceValueAttribute.source.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*PreferenceValueAttribute.source.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static PreferenceValueAttribute.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(a1 + 16))();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v4(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t PreferenceValueAttribute.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v8(a2, WeakValue, AssociatedTypeWitness);
}

uint64_t PreferenceValueAttribute.description.getter()
{
  return specialized PreferenceValueAttribute.description.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PreferenceValueAttribute<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceValueAttribute.initialValue.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreferenceValueAttribute<A>()
{
  return specialized PreferenceValueAttribute.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance PreferenceValueAttribute<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  static PreferenceValueAttribute.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t sub_245E80368()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)((char *)v2
                 + ((*(void *)(*(void *)(v2[2] - 8) + 64)
                   + ((*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in View.preferenceValue<A, B>(_:_:)(a1, *v3, v3[1], v2[2], v2[3], v2[4], v2[5], a2, v2[6], v2[7]);
}

uint64_t specialized DelayedPreferenceChild.description.getter()
{
  v0._uint64_t countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A79616C6544;
}

uint64_t specialized PreferenceValueAttribute.description.getter()
{
  v0._uint64_t countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 36;
}

uint64_t sub_245E8054C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_245E80558(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_245E8059C()
{
  return 32;
}

__n128 sub_245E805A8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

_UNKNOWN **sub_245E805B4()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

_UNKNOWN **sub_245E805C0()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

uint64_t sub_245E805CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)(a1, v2[9], v2[10], v2[2], v2[3], v2[4], v2[5], a2, v2[6], v2[7]);
}

uint64_t sub_245E8063C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in View.preferenceValue<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 160);
  _OWORD v7[4] = *(_OWORD *)(v1 + 144);
  _DWORD v7[5] = v3;
  uint64_t v8 = *(void *)(v1 + 176);
  long long v4 = *(_OWORD *)(v1 + 96);
  v7[0] = *(_OWORD *)(v1 + 80);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(v1 + 128);
  void v7[2] = *(_OWORD *)(v1 + 112);
  void v7[3] = v5;
  return v2(a1, v7);
}

uint64_t outlined retain of _DetachedPlaceholder<_DetachedKey<A1>>(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance LineLimitModifier(unsigned int *a1, uint64_t a2)
{
  return specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(*a1, a2);
}

uint64_t _EnvironmentKeyTransformModifier.keyPath.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_EnvironmentKeyTransformModifier.keyPath.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _EnvironmentKeyTransformModifier.transform : <A>_EnvironmentKeyTransformModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t (*)())swift_allocObject();
  *((void *)v8 + 2) = v5;
  *((void *)v8 + 3) = v7;
  *((void *)v8 + 4) = v6;
  *a4 = _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0;
  a4[1] = v8;

  return swift_retain();
}

uint64_t key path setter for _EnvironmentKeyTransformModifier.transform : <A>_EnvironmentKeyTransformModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = v5;
  void v8[3] = v7;
  v8[4] = v6;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@inout A) -> (@out ());
  *(void *)(a2 + 16) = v8;
  return result;
}

uint64_t _EnvironmentKeyTransformModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _EnvironmentKeyTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_EnvironmentKeyTransformModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t a2)
{
  return specialized static EnvironmentModifier._makeInputs(modifier:inputs:)(*a1, a2);
}

uint64_t sub_245E809A8()
{
  return 8;
}

void *sub_245E809B4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of static EnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_245E809D4()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for ChildEnvironment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v9 + 7 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v15 = *v16;
    long long v17 = (void *)(((unint64_t)v15 + v8 + 4) & ~v8);
    long long v18 = (const void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
    *(void *)(((unint64_t)v17 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

_DWORD *assignWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *assignWithTake for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChildEnvironment(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2)
  {
    unint64_t v12 = ((v11 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v8;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E812D4);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        return v8 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  unint64_t v20 = ((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v22 = *(void *)((v11 + v20) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if ((v22 + 1) >= 2) {
      return v22;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v20);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for ChildEnvironment(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + 7 + ((v11 + 8) & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x245E815A0);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
        if (v9 < 0x7FFFFFFE)
        {
          long long v23 = (void *)((v12 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *long long v23 = 0;
            *(_DWORD *)long long v23 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *long long v23 = a2;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v24 = a2 + 1;
          uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v26 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
          v25(v26, v24);
        }
        else
        {
          if (v12 <= 3) {
            int v20 = ~(-1 << (8 * v12));
          }
          else {
            int v20 = -1;
          }
          if (v12)
          {
            int v21 = v20 & (~v9 + a2);
            if (v12 <= 3) {
              int v22 = v12;
            }
            else {
              int v22 = 4;
            }
            bzero((void *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11), v12);
            switch(v22)
            {
              case 2:
                *(_WORD *)unint64_t v19 = v21;
                break;
              case 3:
                *(_WORD *)unint64_t v19 = v21;
                *(unsigned char *)(v19 + 2) = BYTE2(v21);
                break;
              case 4:
                *(_DWORD *)unint64_t v19 = v21;
                break;
              default:
                *(unsigned char *)unint64_t v19 = v21;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_245E815D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout A) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

ValueMetadata *type metadata accessor for JitterTextEffect()
{
  return &type metadata for JitterTextEffect;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in JitterTextEffect()
{
  return &protocol witness table for JitterTextEffect.Timing;
}

uint64_t protocol witness for Text.Effect.DurationProvider.duration.getter in conformance JitterTextEffect.Timing()
{
  return 0x4000000000000000;
}

uint64_t closure #1 in JitterTextEffect.configuration(_:)(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v54 = *a2;
  long long v55 = v2;
  long long v56 = a2[2];
  uint64_t v57 = *((void *)a2 + 6);
  uint64_t v3 = specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)((uint64_t)&v54);
  uint64_t v5 = v4;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(unsigned char *)(v6 + 64) = 1;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  uint64_t v53 = swift_allocObject();
  *(_DWORD *)(v53 + 16) = 7;
  uint64_t v10 = *((void *)&v55 + 1);
  v58[0] = *((void *)&v55 + 1);
  CFIndex v12 = *(void *)(*((void *)&v55 + 1) + 16);
  uint64_t v11 = *(void *)(*((void *)&v55 + 1) + 24);
  swift_retain_n();
  double v13 = 0.0;
  double v14 = 0.0;
  uint64_t v50 = v5;
  uint64_t v51 = v3;
  if (v12 != v11)
  {
    while (1)
    {
      unsigned int v15 = *(void **)(v10 + 32);
      uint64_t v16 = *(void *)(v10 + 40);
      if (*(unsigned char *)(v10 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v10 + 32), *(void *)(v10 + 40), 1);
        id v17 = (id)_NSTextLineFragmentGetCTLine(v15);
        if (!v17) {
          goto LABEL_38;
        }
        id v18 = v17;
        outlined consume of Text.Layout.Line.Line(v15, v16, 1);
        unsigned int v15 = v18;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v10 + 32), *(void *)(v10 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v15, v16, 0);

        swift_release();
      }
      if (v12 < *(void *)(v10 + 16) || v12 >= *(void *)(v10 + 24)) {
        break;
      }
      CFIndex v19 = v12 + 1;
      swift_retain();
      int v20 = v15;
      int v21 = (id)_CTLineGetRunAtIndex(v20, v12);
      int v22 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      double Size = CTFontGetSize(v22);
      swift_release();

      if (v14 <= Size) {
        double v14 = Size;
      }
      CFIndex v12 = v19;
      if (v19 == *(void *)(v10 + 24))
      {
        double v14 = v14 * 0.2;
        uint64_t v5 = v50;
        uint64_t v3 = v51;
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_12:
  outlined release of ViewTransform((uint64_t)v58);
  outlined release of ViewTransform((uint64_t)v58);
  CFIndex v25 = *(void *)(v10 + 16);
  uint64_t v24 = *(void *)(v10 + 24);
  swift_retain_n();
  if (v25 != v24)
  {
    double v26 = 0.0;
    while (1)
    {
      uint64_t v27 = *(void **)(v10 + 32);
      uint64_t v28 = *(void *)(v10 + 40);
      if (*(unsigned char *)(v10 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v10 + 32), *(void *)(v10 + 40), 1);
        id v29 = (id)_NSTextLineFragmentGetCTLine(v27);
        if (!v29) {
          goto LABEL_39;
        }
        id v30 = v29;
        outlined consume of Text.Layout.Line.Line(v27, v28, 1);
        uint64_t v27 = v30;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v10 + 32), *(void *)(v10 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v27, v28, 0);

        swift_release();
      }
      if (v25 < *(void *)(v10 + 16) || v25 >= *(void *)(v10 + 24)) {
        break;
      }
      CFIndex v31 = v25 + 1;
      swift_retain();
      uint64_t v32 = v27;
      uint64_t v33 = (id)_CTLineGetRunAtIndex(v32, v25);
      uint64_t v34 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      double v35 = CTFontGetSize(v34);
      swift_release();

      if (v26 <= v35) {
        double v26 = v35;
      }
      CFIndex v25 = v31;
      if (v31 == *(void *)(v10 + 24))
      {
        double v13 = v26 * 0.3;
        uint64_t v5 = v50;
        uint64_t v3 = v51;
        goto LABEL_24;
      }
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_24:
  outlined release of ViewTransform((uint64_t)v58);
  outlined release of ViewTransform((uint64_t)v58);
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v3;
  *(void *)(v36 + 24) = v5;
  *(void *)(v36 + 32) = v52;
  *(void *)(v36 + 40) = v6;
  *(void *)(v36 + 48) = v7;
  *(double *)(v36 + 56) = v14;
  *(void *)(v36 + 64) = v53;
  *(void *)(v36 + 72) = v8;
  *(double *)(v36 + 80) = v13;
  *(void *)(v36 + 88) = v9;
  uint64_t v37 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, MEMORY[0x263F8E0F8]);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_2461B9DC0;
  *(void *)(v38 + 32) = partial apply for closure #1 in closure #1 in JitterTextEffect.configuration(_:);
  unint64_t v39 = v38 + 32;
  *(void *)(v38 + 40) = v36;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, v37);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v38;
  int64_t v41 = *(void *)(v38 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41, 1, MEMORY[0x263F8EE78]);
  uint64_t v43 = v42;
  if (!*(void *)(v38 + 16))
  {
    if (v41)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v43;
  }
  uint64_t v44 = v42[2];
  if ((v42[3] >> 1) - v44 < v41)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  unint64_t v45 = (unint64_t)&v42[2 * v44 + 4];
  if (v39 >= v45 + 16 * v41 || v45 >= v39 + 16 * v41)
  {
    swift_arrayInitWithCopy();
    if (v41)
    {
      uint64_t v46 = v43[2];
      BOOL v47 = __OFADD__(v46, v41);
      uint64_t v48 = v46 + v41;
      if (v47) {
        goto LABEL_37;
      }
      _OWORD v43[2] = v48;
    }
    goto LABEL_32;
  }
LABEL_40:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in JitterTextEffect.configuration(_:)(unint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  double v20 = a2[8];
  double v21 = a2[5] - a2[4];
  if (v21 >= 0.0)
  {
    double v23 = v21 / v20;
    double v22 = 0.0;
    if (v23 < 0.0) {
      goto LABEL_8;
    }
  }
  else
  {
    double v22 = 0.0;
    double v23 = 0.0 / v20;
    if (v23 < 0.0) {
      goto LABEL_8;
    }
  }
  if (v23 <= 1.0) {
    double v22 = v23;
  }
  else {
    double v22 = 1.0;
  }
LABEL_8:
  Text.Effect.ClusterTransformMap.subscript.getter(a1, a3, a4, (uint64_t)v57);
  unint64_t result = outlined init with take of Text.Effect.ClusterTransformMap.Element?((uint64_t)v57, (uint64_t)v59);
  if (v64)
  {
    double v25 = *a2;
    if (__OFSUB__(*(void *)a2, a1))
    {
      __break(1u);
      return result;
    }
    int32x2_t v26 = vdup_n_s32(*(void *)&v25 == a1);
    v27.i64[0] = v26.u32[0];
    v27.i64[1] = v26.u32[1];
    int8x16_t v28 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v27, 0x3FuLL));
    float64x2_t v55 = (float64x2_t)vandq_s8(*(int8x16_t *)(a2 + 26), v28);
    float64x2_t v56 = (float64x2_t)vandq_s8(*(int8x16_t *)(a2 + 28), v28);
    if (*(void *)&v25 == a1) {
      double v29 = a2[30];
    }
    else {
      double v29 = 0.0;
    }
    if (*(void *)&v25 == a1) {
      double v30 = a2[31];
    }
    else {
      double v30 = 0.0;
    }
  }
  else
  {
    float64x2_t v55 = v60;
    float64x2_t v56 = v61;
    double v29 = v62;
    double v30 = v63;
  }
  CFIndex v31 = (double *)(a5 + 16);
  uint64_t v32 = (double *)(a7 + 16);
  uint64_t v33 = (double *)(a11 + 16);
  uint64_t v34 = (double *)(a12 + 16);
  swift_beginAccess();
  if (*v31 != v22
    || (swift_beginAccess(), (*(unsigned char *)(a6 + 64) & 1) != 0)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a6 + 16), v55), (int32x4_t)vceqq_f64(*(float64x2_t *)(a6 + 32), v56))), 0xFuLL))) & 1) == 0|| *(double *)(a6 + 48) != v29|| *(double *)(a6 + 56) != v30)
  {
    double v35 = (unsigned int *)(a8 + 16);
    swift_beginAccess();
    *(float64x2_t *)(a6 + 16) = v55;
    *(float64x2_t *)(a6 + 32) = v56;
    *(double *)(a6 + 48) = v29;
    *(double *)(a6 + 56) = v30;
    *(unsigned char *)(a6 + 64) = 0;
    swift_beginAccess();
    *CFIndex v31 = v22;
    swift_beginAccess();
    unsigned int v36 = 214013 * *v35 + 2531011;
    unsigned int *v35 = v36;
    double v37 = ((double)HIWORD(v36) * 0.0000152590219 + -0.5 + (double)HIWORD(v36) * 0.0000152590219 + -0.5) * a9;
    double v38 = pow(v22, 0.75);
    double v39 = fabs(sqrt(v22));
    if (v22 == -INFINITY) {
      double v39 = INFINITY;
    }
    long double v40 = sin(v39 + v38);
    long double v41 = (1.0 - v22) * v40 * ((1.0 - v22) * v40);
    swift_beginAccess();
    *uint64_t v32 = v41 * v37;
    swift_beginAccess();
    unsigned int v42 = 214013 * *v35 + 2531011;
    unsigned int *v35 = v42;
    double v43 = v41 * (((double)HIWORD(v42) * 0.0000152590219 + -0.5 + (double)HIWORD(v42) * 0.0000152590219 + -0.5) * a10);
    swift_beginAccess();
    *uint64_t v33 = v43;
    swift_beginAccess();
    unsigned int v44 = 214013 * *v35 + 2531011;
    unsigned int *v35 = v44;
    double v45 = v41 * (((double)HIWORD(v44) * 0.0000152590219 + -0.5 + (double)HIWORD(v44) * 0.0000152590219 + -0.5) * 0.25);
    swift_beginAccess();
    *uint64_t v34 = v45;
  }
  v69.origin.double x = v55.f64[0];
  v69.size.double width = v56.f64[0];
  v69.size.double height = v56.f64[1] + v29;
  v69.origin.double y = v55.f64[1] - v56.f64[1];
  CGFloat MidX = CGRectGetMidX(v69);
  swift_beginAccess();
  double v47 = *v34;
  swift_beginAccess();
  double v48 = *v32;
  swift_beginAccess();
  double v49 = *v33;
  v65[0] = 0;
  *(double *)&v65[1] = v48;
  *(double *)&void v65[2] = v49;
  *(double *)&v65[3] = v47;
  *(CGFloat *)&v65[4] = MidX;
  *(double *)&v65[5] = v55.f64[1] - v56.f64[1];
  __asm { FMOV            V0.2D, #1.0 }
  long long v66 = _Q0;
  uint64_t v67 = 0x3FF0000000000000;
  char v68 = 1;
  Text.Effect.TransformContext.record(position:for:)((uint64_t)v65, a1, (uint64_t)v58);
  return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v58, 0, 0, 0, 1);
}

uint64_t protocol witness for static TextEffect.name.getter in conformance JitterTextEffect()
{
  return 0x72657474696ALL;
}

unint64_t instantiation function for generic protocol witness table for JitterTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect();
  unint64_t result = lazy protocol witness table accessor for type JitterTextEffect and conformance JitterTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized JitterTextEffect.configuration(_:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = partial apply for closure #1 in JitterTextEffect.configuration(_:);
  *(void *)(v0 + 24) = 0;
  uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  void v1[2] = v3 + 1;
  uint64_t v4 = &v1[2 * v3];
  v4[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  void v4[5] = v0;
  return MEMORY[0x263F8EE78];
}

uint64_t sub_245E82284()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *, _OWORD *))(v4 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v7;
  void v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  long long v8 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v8;
  uint64_t v13 = *(void *)(a3 + 32);
  uint64_t result = v6(a1, v10, v12);
  *a4 = result;
  return result;
}

uint64_t sub_245E82324()
{
  return swift_deallocObject();
}

uint64_t sub_245E82334()
{
  return swift_deallocObject();
}

uint64_t sub_245E82344()
{
  return swift_deallocObject();
}

uint64_t sub_245E82354()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in JitterTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  return closure #1 in closure #1 in JitterTextEffect.configuration(_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 64), *(double *)(v2 + 56), *(double *)(v2 + 80), *(void *)(v2 + 72), *(void *)(v2 + 88));
}

ValueMetadata *type metadata accessor for JitterTextEffect.Timing()
{
  return &type metadata for JitterTextEffect.Timing;
}

uint64_t View._detached<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a8;
  uint64_t v25 = a2;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x270FA5388](a1);
  double v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v10, v21, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v20, a4);
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v29 = v24;
  uint64_t v30 = a7;
  uint64_t v31 = a10;
  double v22 = (void *)(a9 + *(int *)(type metadata accessor for _DetachedView() + 68));
  *double v22 = v25;
  v22[1] = a3;
  return swift_retain();
}

uint64_t static _Detachable.detachedProperties.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _Detachable.detachedProperties.getter(a1);
}

{
  uint64_t result;

  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _DetachableProperties.all;
  return result;
}

uint64_t _DetachableProperties.rawValue.getter()
{
  return *v0;
}

uint64_t _DetachableProperties.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _DetachableProperties.position.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _DetachableProperties.dimensions.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _DetachableProperties.environment.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _DetachableProperties.transaction.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _DetachableProperties.layout.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static _DetachableProperties.all.getter@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _DetachableProperties.all;
  return result;
}

uint64_t _DetachedView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t _DetachedView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*_DetachedView.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _DetachedView.transform : <A, B, C>_DetachedView<A, B, C>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(a1 + *(int *)(type metadata accessor for _DetachedView() + 68));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_retain();
}

uint64_t key path setter for _DetachedView.transform : <A, B, C>_DetachedView<A, B, C>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for _DetachedView() + 68));
  swift_retain();
  uint64_t result = swift_release();
  *uint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t _DetachedView.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 68));
  swift_retain();
  return v2;
}

uint64_t _DetachedView.transform.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 68));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_DetachedView.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _DetachedView.init(content:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for _DetachedView();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 68));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t type metadata accessor for _DetachedView()
{
  return swift_getGenericMetadata();
}

uint64_t static _DetachedView._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  void (*v21)(long long *__return_ptr, uint64_t, unint64_t);
  unsigned int v22;
  int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int ShouldRecordTree;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t *v77;
  long long v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t WitnessTable;
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  _OWORD *v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  long long v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned char v152[12];
  unsigned int v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;

  uint64_t v125 = a7;
  CGFloat v126 = a8;
  uint64_t v121 = a5;
  *(void *)&Swift::Int v112 = a3;
  *((void *)&v112 + 1) = a4;
  uint64_t v96 = a9;
  CGFloat v163 = *MEMORY[0x263EF8340];
  LODWORD(v103) = *a1;
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  Swift::Int v116 = *((_DWORD *)a2 + 6);
  LODWORD(v117) = v10;
  unsigned int v12 = *((_DWORD *)a2 + 7);
  int v13 = *((_DWORD *)a2 + 8);
  unsigned int v14 = *((_DWORD *)a2 + 9);
  unint64_t v16 = a2[5];
  unint64_t v15 = a2[6];
  unsigned int v17 = *((_DWORD *)a2 + 15);
  int v107 = *((_DWORD *)a2 + 14);
  uint64_t v108 = v12;
  unsigned int v19 = *((_DWORD *)a2 + 16);
  unsigned int v18 = *((_DWORD *)a2 + 17);
  int v105 = *((_DWORD *)a2 + 18);
  int v106 = v18;
  unsigned int v20 = *((_DWORD *)a2 + 19);
  double v114 = *((_DWORD *)a2 + 20);
  uint64_t v115 = v20;
  uint64_t v21 = *(void (**)(void *__return_ptr, void, void))(a6 + 16);
  uint64_t v122 = a6;
  v21(&v132, a3, a6);
  double v22 = v14 & 0xFFFFFFFD;
  double v23 = v14 | 2;
  if ((v132 & 0x10) != 0) {
    double v23 = v14;
  }
  LODWORD(v104) = v23;
  if ((v132 & 0x10) == 0) {
    double v22 = v14;
  }
  uint64_t v93 = v22;
  uint64_t v94 = v19;
  uint64_t v120 = v132;
  char v109 = v9;
  int v123 = v15;
  uint64_t v118 = v16;
  uint64_t v119 = v11;
  uint64_t v97 = v13;
  uint64_t v95 = v17;
  if (v132)
  {
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    LODWORD(v124) = v13;
    uint64_t v101 = v19;
    __int16 v102 = v17;
    uint64_t v100 = v106;
    uint64_t v24 = v120;
    if ((v120 & 2) != 0) {
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v132) = v17;
    *(void *)((char *)&v132 + 4) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewTransform> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    __int16 v102 = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v132) = v19;
    *(void *)((char *)&v132 + 4) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewOrigin> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
    uint64_t v101 = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v124) = v97 | 0xC;
    LODWORD(v132) = v106;
    *(void *)((char *)&v132 + 4) = 0;
    uint64_t v100 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v24 = v120;
    if ((v120 & 2) != 0)
    {
LABEL_7:
      uint64_t v99 = v105;
      goto LABEL_10;
    }
  }
  DWORD2(v132) = 0;
  *(void *)&char v132 = v105;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
  lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<ViewSize> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize);
  uint64_t v99 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v124) = v124 | 0x10;
LABEL_10:
  uint64_t v25 = MEMORY[0x263F8EE78];
  if ((v24 & 4) != 0)
  {
    uint64_t v29 = v119;
  }
  else
  {
    swift_beginAccess();
    uint64_t v26 = *(_DWORD *)(v119 + 16);
    DWORD2(v132) = 0;
    *(void *)&char v132 = v26;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<EnvironmentValues> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues);
    uint64_t v27 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(v25);
    type metadata accessor for SwitchRule<ViewTransform>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v29 = swift_allocObject();
    *(_DWORD *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v25;
    uint64_t v24 = v120;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_WORD *)(v29 + 80) = 256;
    *(void *)(v29 + 88) = v28;
    swift_release();
    LODWORD(v124) = v124 | 0x20;
  }
  uint64_t v30 = v108;
  if ((v24 & 8) == 0)
  {
    LODWORD(v132) = v108;
    *(void *)((char *)&v132 + 4) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<Transaction> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction);
    uint64_t v30 = Attribute.init<A>(body:value:flags:update:)();
  }
  DWORD2(v132) = 0;
  *(void *)&char v132 = v107;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
  lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(&lazy protocol witness table cache variable for type SwitchRule<PreferenceKeys> and conformance SwitchRule<A>, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  uint64_t v31 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v32 = swift_bridgeObjectRelease();
  char v89 = &v89;
  MEMORY[0x270FA5388](v32);
  uint64_t v33 = *((void *)&v112 + 1);
  v84[1] = v112;
  __int16 v85 = v121;
  char v86 = v122;
  char v87 = v125;
  uint64_t v88 = v126;
  LODWORD(v149) = v103;
  char v132 = v112;
  v133 = v121;
  v134 = v122;
  v135 = v125;
  double v136 = v126;
  unint64_t v90 = type metadata accessor for _DetachedView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _DetachedView._makeView(view:inputs:), v33, &v131);
  uint64_t v34 = v131;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  unsigned int v36 = v109;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  double v37 = v123;
  swift_bridgeObjectRetain();
  uint64_t v113 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&char v132 = v36;
  DWORD2(v132) = v117;
  v133 = v29;
  v134 = __PAIR64__(v30, v116);
  HIDWORD(v135) = v104;
  double v136 = MEMORY[0x263F8EE88];
  double v137 = v37;
  double v138 = __PAIR64__(v102, v31);
  double v139 = v101;
  uint64_t v140 = v100;
  CGFloat v141 = v99;
  CGFloat v142 = v115;
  uint64_t v143 = v114;
  LODWORD(v111) = v34;
  CGFloat v127 = v34;
  long long v149 = v36;
  LODWORD(v150) = v117;
  long long v151 = v29;
  *(_DWORD *)long long v152 = v116;
  *(void *)&v152[4] = v30;
  long long v153 = v104;
  long long v154 = MEMORY[0x263F8EE88];
  Swift::UInt64 v155 = v37;
  int v91 = v31;
  CFIndex v156 = v31;
  CGFloat v157 = v102;
  CGFloat v158 = v101;
  CGFloat v159 = v100;
  v160 = v99;
  v161 = v115;
  v162 = v114;
  double v38 = v33;
  double v39 = v125;
  long double v40 = *(void (**)(void *__return_ptr, void, void, void, void))(v125 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40(&v128, &v127, &v149, v38, v39);
  LODWORD(v135) = v124;
  int v92 = v30;
  if (v113)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v128, (uint64_t)&v132);
    long double v41 = v36;
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    long double v41 = v36;
  }
  unsigned int v42 = v29;
  swift_release();
  double v43 = swift_release();
  uint64_t v98 = v129;
  Swift::Int v110 = v130;
  Swift::Int v111 = v128;
  MEMORY[0x270FA5388](v43);
  unsigned int v44 = v112;
  __int16 v79 = v112;
  uint64_t v83 = v126;
  uint64_t KeyPath = swift_getKeyPath();
  char v89 = v84;
  LODWORD(v132) = v103;
  *((void *)&v132 + 1) = KeyPath;
  MEMORY[0x270FA5388](KeyPath);
  type metadata accessor for _DetachedPlaceholder();
  swift_getFunctionTypeMetadata1();
  uint64_t v46 = type metadata accessor for Focus();
  swift_getWitnessTable();
  double v47 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  double v48 = v123;
  swift_bridgeObjectRetain();
  double v49 = v111;
  swift_bridgeObjectRetain();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v79, v46, MEMORY[0x263F8E628], v47, MEMORY[0x263F8E658], v50);
  unint64_t v90 = 0;
  swift_release();
  uint64_t v51 = swift_release();
  char v103 = v84;
  LODWORD(v132) = v149;
  *((void *)&v132 + 1) = v41;
  LODWORD(v133) = v117;
  v134 = v42;
  v135 = __PAIR64__(v92, v116);
  double v136 = __PAIR64__(v104, v124);
  double v137 = MEMORY[0x263F8EE88];
  double v138 = v48;
  double v139 = v91;
  uint64_t v140 = v102;
  CGFloat v141 = v101;
  CGFloat v142 = v100;
  uint64_t v143 = v99;
  CGFloat v144 = v115;
  CGFloat v145 = v114;
  CGFloat v146 = v49;
  CGFloat v147 = v98;
  v148 = v110;
  MEMORY[0x270FA5388](v51);
  char v80 = v121;
  long long v149 = v44;
  long long v150 = v121;
  uint64_t v52 = v121;
  long long v151 = v122;
  *(void *)long long v152 = v126;
  uint64_t v53 = type metadata accessor for DetachedChild();
  uint64_t v81 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v54 = type metadata accessor for Attribute();
  swift_retain();
  uint64_t v104 = v42;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v79, v53, MEMORY[0x263F8E628], v54, MEMORY[0x263F8E658], v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  float64x2_t v56 = v52;
  swift_release();
  _GraphValue.init(_:)(v149, &v131);
  uint64_t v57 = v131;
  swift_retain();
  unint64_t v58 = v119;
  swift_retain();
  uint64_t v59 = v118;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v113) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&char v132 = v41;
  DWORD2(v132) = v117;
  v133 = v58;
  v134 = __PAIR64__(v108, v116);
  HIDWORD(v135) = v93;
  double v136 = v59;
  double v137 = v48;
  double v138 = __PAIR64__(v95, v107);
  double v139 = v94;
  uint64_t v140 = v106;
  CGFloat v141 = v105;
  CGFloat v142 = v115;
  uint64_t v143 = v114;
  CGFloat v127 = v57;
  long long v149 = v41;
  LODWORD(v150) = v117;
  long long v151 = v58;
  *(_DWORD *)long long v152 = v116;
  *(void *)&v152[4] = v108;
  long long v153 = v93;
  long long v154 = v59;
  Swift::UInt64 v155 = v48;
  CFIndex v156 = v107;
  CGFloat v157 = v95;
  CGFloat v158 = v94;
  CGFloat v159 = v106;
  v160 = v105;
  v161 = v115;
  v162 = v114;
  float64x2_t v60 = v126;
  float64x2_t v61 = *(void (**)(void *__return_ptr, void, void, void, void))(v126 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61(&v128, &v127, &v149, v56, v60);
  LODWORD(v135) = v97;
  if (v113)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v128, (uint64_t)&v132);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  double v62 = v48;
  double v63 = v120;
  swift_release();
  swift_release();
  char v64 = v128;
  unsigned int v65 = v129;
  long long v66 = v130;
  CGFloat v128 = MEMORY[0x263F8EE78];
  uint64_t v67 = *MEMORY[0x263F288F8];
  v129 = 0;
  uint64_t v130 = v67;
  char v68 = *(void *)(v62 + 16);
  if (v68)
  {
    unint64_t v124 = v98 | (v110 << 32);
    Swift::Int v117 = v66;
    CGRect v69 = v65 | (v66 << 32);
    swift_bridgeObjectRetain();
    uint64_t v70 = (uint64_t *)(v62 + 40);
    BOOL v71 = v121;
    unint64_t v72 = v122;
    unint64_t v73 = v112;
    unint64_t v74 = v111;
    do
    {
      specialized connectOutput #1 <A, B, C><A1>(key:) in static _DetachedView._makeView(view:inputs:)(*(v70 - 1), (uint64_t)&v128, v74, v124, v64, v69, v73, *((uint64_t *)&v73 + 1), v71, (ValueMetadata *)*(v70 - 1), v72, v125, v126, *v70);
      v70 += 2;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease();
    double v63 = v120;
    LODWORD(v66) = v117;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v63 & 0x10) != 0)
  {
    uint64_t v76 = v110;
    uint64_t v130 = v110;
    uint64_t v75 = v129;
    LODWORD(v66) = v110;
  }
  else
  {
    uint64_t v130 = v66;
    uint64_t v75 = v129;
    uint64_t v76 = v66;
  }
  if ((v75 & 0x80) == 0)
  {
    v75 |= 0x80u;
    v129 = v75;
    LODWORD(v66) = v76;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  swift_beginAccess();
  uint64_t v77 = v96;
  char *v96 = v128;
  *((_DWORD *)v77 + 2) = v75;
  *((_DWORD *)v77 + 3) = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static _DetachedView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  _OWORD v12[2] = type metadata accessor for _DetachedView();
  void v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t specialized connectOutput #1 <A, B, C><A1>(key:) in static _DetachedView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ValueMetadata *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, uint64_t, uint64_t))(a11 + 8))(a10, a10, a14, a7);
  unint64_t v14 = _ViewOutputs.subscript.getter((uint64_t)a10, (uint64_t)a10, a14);
  swift_beginAccess();
  _ViewOutputs.subscript.setter(v14 | ((HIDWORD(v14) & 1) << 32), a10, (uint64_t)a10, a14);
  return swift_endAccess();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DetachedView<A, B, C>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static _DetachedView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), a4);
}

uint64_t View._detached<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  double v16 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v18, v7, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v18, a3);
  v21[0] = &type metadata for _EmptyDetached;
  v21[1] = a3;
  void v21[2] = a4;
  v21[3] = &protocol witness table for _EmptyDetached;
  v21[4] = a5;
  v21[5] = a6;
  unsigned int v19 = (void *)(a7 + *(int *)(type metadata accessor for _DetachedView() + 68));
  *unsigned int v19 = a1;
  v19[1] = a2;
  return swift_retain();
}

BOOL static _DetachedKey.matches<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == a2;
}

BOOL protocol witness for static _Detachable.matches<A>(key:) in conformance _DetachedKey<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _DetachedKey.matches<A>(key:)(a1, *(void *)(a4 + 16), a2);
}

uint64_t static _EmptyDetached.matches<A>(key:)()
{
  return 0;
}

void static _EmptyDetached.detachedProperties.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DetachedChild.value.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)&v46 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v46 - v11;
  type metadata accessor for ObservationTracking._AccessList?();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v50 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v20);
  long long v54 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v49 = (char *)&v46 - v23;
  long long v24 = v2[4];
  long long v25 = v2[5];
  long long v26 = v2[2];
  v61[3] = v2[3];
  v61[4] = v24;
  long long v27 = v2[6];
  v61[5] = v25;
  v61[6] = v27;
  long long v28 = v2[1];
  v61[0] = *v2;
  v61[1] = v28;
  v61[2] = v26;
  uint64_t v56 = *(void *)(a1 + 16);
  uint64_t v57 = v19;
  long long v58 = *(_OWORD *)(a1 + 32);
  uint64_t v59 = v61;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    a1 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, 1, 1, v4);
  MEMORY[0x270FA5388](v30);
  *(&v46 - 4) = v19;
  *(&v46 - 3) = (uint64_t)partial apply for closure #1 in DetachedChild.value.getter;
  *(&v46 - 2) = (uint64_t)&v55;
  unint64_t v31 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v46 - 6), v13, v31, v19, MEMORY[0x263F8E4E0], (uint64_t)v60);
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v18, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v15);
  }
  else
  {
    uint64_t v32 = v52;
    double v47 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v47(v52, v15, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v51, v32, v4);
    swift_beginAccess();
    uint64_t v33 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1)
    {
      uint64_t v33 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, (unint64_t)v33);
      static ObservationRegistrar.lastestAccessLists = v33;
    }
    *((void *)v33 + 2) = v36 + 1;
    v47(&v33[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v36], v51, v4);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v52, v4);
  }
  double v37 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  double v38 = v49;
  v37(v49, v54, v19);
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  v37(v53, v38, v19);
  uint64_t v39 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v39)
  {
    unsigned int v42 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v40 = v5 + 16;
    long double v41 = v42;
    double v43 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v40 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 64));
    uint64_t v44 = *(void *)(v40 + 56);
    long long v54 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    do
    {
      v41(v7, v43, v4);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v7, a1, v19);
      (*(void (**)(char *, uint64_t))(v40 - 8))(v7, v4);
      v43 += v44;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DetachedChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v14[8] = a2;
  v14[9] = a3;
  v14[10] = a4;
  v14[11] = a5;
  type metadata accessor for DetachedChild();
  _DWORD v14[2] = a2;
  _OWORD v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a1;
  type metadata accessor for _DetachedPlaceholder();
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in DetachedChild.value.getter, (uint64_t)v14, FunctionTypeMetadata1, a3, a6);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DetachedChild<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v26 = *a1;
  int v27 = *((_DWORD *)a2 + 2);
  uint64_t v32 = a2[2];
  uint64_t v33 = *a2;
  unsigned int v7 = *((_DWORD *)a2 + 8);
  uint64_t v28 = a2[3];
  unsigned int v29 = *((_DWORD *)a2 + 9);
  uint64_t v30 = a2[6];
  uint64_t v31 = a2[5];
  unsigned int v9 = *((_DWORD *)a2 + 14);
  unsigned int v8 = *((_DWORD *)a2 + 15);
  unsigned int v10 = *((_DWORD *)a2 + 16);
  unsigned int v11 = *((_DWORD *)a2 + 17);
  unsigned int v12 = *((_DWORD *)a2 + 18);
  unsigned int v13 = *((_DWORD *)a2 + 19);
  int v14 = *((_DWORD *)a2 + 20);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v51, a3, a4);
  if ((v51 & 1) == 0)
  {
    LODWORD(v36) = v26;
    *(void *)&long long v51 = v33;
    DWORD2(v51) = v27;
    *(void *)&long long v52 = v32;
    *((void *)&v52 + 1) = v28;
    *(void *)&long long v53 = __PAIR64__(v29, v7);
    *((void *)&v53 + 1) = v31;
    *(void *)&long long v54 = v30;
    *((void *)&v54 + 1) = __PAIR64__(v8, v9);
    *(void *)&long long v55 = __PAIR64__(v11, v10);
    *((void *)&v55 + 1) = __PAIR64__(v13, v12);
    int v56 = v14;
    return static _DetachedPlaceholder.makeStub(view:inputs:)((int *)&v36, (uint64_t *)&v51, (uint64_t)a5);
  }
  unint64_t v22 = __PAIR64__(v8, v9);
  *(void *)&long long v23 = __PAIR64__(v11, v10);
  *((void *)&v23 + 1) = __PAIR64__(v13, v12);
  unsigned int v24 = v7;
  unsigned int v16 = specialized _GraphInputs.intern<A>(_:id:)(0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  *(_DWORD *)(v17 + 32) = v26;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v36 = v33;
  int v37 = v27;
  uint64_t v38 = v32;
  uint64_t v39 = v28;
  uint64_t v42 = v31;
  uint64_t v43 = v30;
  unsigned int v44 = v9;
  int v45 = HIDWORD(v22);
  int v46 = v23;
  unsigned int v47 = v11;
  unsigned int v48 = v12;
  unsigned int v49 = v13;
  int v50 = v14;
  unsigned int v40 = 0;
  unsigned int v41 = v29;
  *(void *)&long long v51 = v33;
  DWORD2(v51) = v27;
  *(void *)&long long v52 = v32;
  *((void *)&v52 + 1) = v28;
  DWORD1(v53) = v29;
  *((void *)&v53 + 1) = v31;
  *(void *)&long long v54 = v30;
  *((void *)&v54 + 1) = v22;
  long long v55 = v23;
  int v56 = v14;
  if ((v29 & 0x20) != 0)
  {
LABEL_12:
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = (uint64_t)a5;
    specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v16, (uint64_t)&v51, (void (*)(uint64_t *__return_ptr, uint64_t, long long *))partial apply for closure #1 in static _DetachedPlaceholder._makeView(view:inputs:), a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unsigned int v40 = v24;
    if (ShouldRecordTree) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(v30 + 16);
  if (v19)
  {
    uint64_t v20 = (ValueMetadata **)(v30 + 32);
    while (*v20 != &type metadata for DisplayList.Key)
    {
      v20 += 2;
      if (!--v19) {
        goto LABEL_10;
      }
    }
    goto LABEL_12;
  }
LABEL_10:
  v34[2] = v53;
  v34[3] = v54;
  v34[4] = v55;
  int v35 = v56;
  v34[0] = v51;
  v34[1] = v52;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = (uint64_t)a5;
  closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)((uint64_t)v34, v26, (uint64_t)a5);
  unsigned int v40 = v24;
  if (ShouldRecordTree)
  {
LABEL_13:
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(v21, (uint64_t)&v36);
    AGSubgraphEndTreeElement();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 80);
  int v17 = a2;
  uint64_t v9 = v3;
  int v10 = v4;
  uint64_t v11 = v5;
  long long v7 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = v7;
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = v6;
  return static _DetachedPlaceholder.makeStub(view:inputs:)(&v17, &v9, a3);
}

uint64_t static _DetachedPlaceholder.makeStub(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int v28 = *a1;
  unint64_t v4 = a2[2];
  unsigned int v5 = *((_DWORD *)a2 + 6);
  unsigned int v6 = *((_DWORD *)a2 + 7);
  unsigned int v7 = *((_DWORD *)a2 + 9);
  unsigned int v26 = *((_DWORD *)a2 + 8);
  int v27 = *((_DWORD *)a2 + 2);
  unint64_t v9 = a2[5];
  unint64_t v8 = a2[6];
  unsigned int v24 = *((_DWORD *)a2 + 15);
  unsigned int v25 = *((_DWORD *)a2 + 14);
  unsigned int v10 = *((_DWORD *)a2 + 16);
  unsigned int v11 = *((_DWORD *)a2 + 17);
  unsigned int v22 = *((_DWORD *)a2 + 19);
  unsigned int v23 = *((_DWORD *)a2 + 18);
  unsigned int v21 = *((_DWORD *)a2 + 20);
  uint64_t v37 = *a2;
  uint64_t v3 = v37;
  LODWORD(v38) = v27;
  unint64_t v39 = v4;
  unint64_t v40 = __PAIR64__(v6, v5);
  unsigned int v41 = v26;
  unsigned int v42 = v7;
  unint64_t v43 = v9;
  unint64_t v44 = v8;
  unint64_t v45 = __PAIR64__(v24, v25);
  unsigned int v46 = v10;
  unsigned int v47 = v11;
  unsigned int v48 = v23;
  unsigned int v49 = v22;
  unsigned int v50 = v21;
  _ViewInputs.makeIndirectOutputs()((uint64_t)&v31);
  uint64_t v12 = v31;
  LODWORD(v37) = v28;
  uint64_t v38 = v3;
  LODWORD(v39) = v27;
  unint64_t v40 = v4;
  unsigned int v41 = v5;
  unsigned int v42 = v6;
  unint64_t v43 = __PAIR64__(v7, v26);
  unint64_t v44 = v9;
  unint64_t v45 = v8;
  unsigned int v46 = v25;
  unsigned int v47 = v24;
  unsigned int v48 = v10;
  unsigned int v49 = v11;
  unsigned int v50 = v23;
  unsigned int v51 = v22;
  unsigned int v52 = v21;
  uint64_t v53 = v31;
  int v29 = v32;
  int v54 = v32;
  int v55 = v33;
  int v13 = v33;
  uint64_t v14 = type metadata accessor for _DetachedPlaceholder.Stub();
  uint64_t v35 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for SwitchRule<ViewTransform>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F28898]);
  uint64_t v16 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v37, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)&v34, v14, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v19 = *(void *)(v12 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v20 += 24;
      --v19;
    }
    while (v19);
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v13 != *MEMORY[0x263F288F8]) {
    uint64_t result = AGGraphSetIndirectDependency();
  }
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v29;
  *(_DWORD *)(a3 + 12) = v13;
  return result;
}

uint64_t _DetachedPlaceholder.Stub.view.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _DetachedPlaceholder();
  uint64_t Value = AGGraphGetValue();
  int v3 = *(_DWORD *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 16);
  uint64_t v5 = *(void *)(Value + 40);
  uint64_t v6 = *(void *)(Value + 48);
  int v7 = *(_DWORD *)(Value + 80);
  uint64_t v8 = *(void *)(Value + 88);
  *(void *)a1 = *(void *)Value;
  *(_DWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(Value + 56);
  *(void *)(a1 + 72) = *(void *)(Value + 72);
  *(_DWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(Value + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t _DetachedPlaceholder.Stub.updateValue()()
{
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    uint64_t v2 = *(void *)(v0 + 8);
    int v3 = *(_DWORD *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
    int v5 = *(_DWORD *)(v0 + 32);
    int v6 = *(_DWORD *)(v0 + 36);
    int v20 = *(_DWORD *)(v0 + 44);
    int v21 = *(_DWORD *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v19 = *(void *)(v0 + 48);
    int v16 = *(_DWORD *)(v0 + 68);
    int v17 = *(_DWORD *)(v0 + 64);
    int v14 = *(_DWORD *)(v0 + 76);
    int v15 = *(_DWORD *)(v0 + 72);
    int v12 = *(_DWORD *)(v0 + 84);
    int v13 = *(_DWORD *)(v0 + 80);
    int v11 = *(_DWORD *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 96);
    int v8 = *(_DWORD *)(v0 + 108);
    int v9 = *(_DWORD *)(v0 + 104);
    int v43 = HIDWORD(v2);
    int v51 = v12;
    int v54 = v9;
    int v55 = v8;
    _DetachedPlaceholder.Stub.view.getter((uint64_t)&v56);
    uint64_t v41 = v56;
    int v42 = v57;
    long long v45 = v59;
    uint64_t v44 = v58;
    uint64_t v46 = v60;
    uint64_t v47 = v61;
    long long v48 = v62;
    uint64_t v49 = v63;
    int v50 = v64;
    uint64_t v52 = v65;
    uint64_t v53 = v66;
    uint64_t v25 = v2;
    int v26 = v3;
    uint64_t v27 = v4;
    int v28 = v5;
    int v29 = v6;
    int v30 = v21;
    int v31 = v20;
    uint64_t v32 = v19;
    uint64_t v33 = v18;
    int v34 = v17;
    int v35 = v16;
    int v36 = v15;
    int v37 = v14;
    int v38 = v13;
    int v39 = v12;
    int v40 = v11;
    uint64_t v22 = v10;
    int v23 = v9;
    int v24 = v8;
    uint64_t v7 = type metadata accessor for _DetachedPlaceholder();
    _DetachedPlaceholder.attach(inputs:outputs:)((uint64_t)&v25, &v22, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _DetachedPlaceholder.attach(inputs:outputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  int v6 = *(_DWORD *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 64);
  int v35 = *(_DWORD *)(a1 + 68);
  int v37 = *(_DWORD *)(a1 + 72);
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  int v10 = *((_DWORD *)a2 + 3);
  uint64_t v39 = *(void *)(v3 + 16);
  int v11 = *(_DWORD *)(v3 + 28);
  int v40 = v5;
  int v41 = v11;
  int v12 = *(_DWORD *)(v3 + 56);
  int v42 = v6;
  int v43 = v12;
  int v13 = *(_DWORD *)(v3 + 64);
  int v33 = v7;
  int v34 = v13;
  int v36 = *(_DWORD *)(v3 + 68);
  int v38 = *(_DWORD *)(v3 + 72);
  uint64_t v14 = *(void *)(v3 + 88);
  int v15 = *(_DWORD *)(v3 + 100);
  int v44 = *(_DWORD *)(v3 + 96);
  int v16 = (*(void *(**)(void *__return_ptr))(*(void *)(a3 + 24) + 16))(v49);
  char v17 = v49[0];
  if (v49[0])
  {
    if ((v49[0] & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    v32[0] = v32;
    MEMORY[0x270FA5388](v16);
    v32[1] = v4;
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewTransform>, (uint64_t)&type metadata for ViewTransform, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x270FA5388](v24);
    uint64_t v25 = AGGraphMutateAttribute();
    MEMORY[0x270FA5388](v25);
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x270FA5388](v26);
    uint64_t v27 = AGGraphMutateAttribute();
    MEMORY[0x270FA5388](v27);
    MEMORY[0x270FA5388](v28);
    int v16 = (void *)AGGraphMutateAttribute();
    if ((v17 & 2) != 0)
    {
LABEL_3:
      if ((v17 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  MEMORY[0x270FA5388](v16);
  type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<ViewSize>, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x270FA5388](v29);
  int v16 = (void *)AGGraphMutateAttribute();
  if ((v17 & 4) != 0)
  {
LABEL_4:
    if ((v17 & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_18:
  swift_beginAccess();
  uint64_t v30 = swift_beginAccess();
  MEMORY[0x270FA5388](v30);
  type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x270FA5388](v31);
  int v16 = (void *)AGGraphMutateAttribute();
  if ((v17 & 8) == 0)
  {
LABEL_5:
    MEMORY[0x270FA5388](v16);
    type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<Transaction>, (uint64_t)&type metadata for Transaction, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    MEMORY[0x270FA5388](v18);
    int v16 = (void *)AGGraphMutateAttribute();
  }
LABEL_6:
  MEMORY[0x270FA5388](v16);
  type metadata accessor for SwitchRule<ViewTransform>(0, &lazy cache variable for type metadata for SwitchRule<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
  MEMORY[0x270FA5388](v19);
  AGGraphMutateAttribute();
  uint64_t v20 = *(void *)(v8 + 16);
  int v21 = *MEMORY[0x263F288F8];
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = 48;
    do
    {
      AGGraphSetIndirectDependency();
      v22 += 24;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  if (v10 != v21) {
    AGGraphSetIndirectDependency();
  }
  uint64_t v47 = v8;
  int v48 = v9;
  uint64_t v45 = v14;
  int v46 = v44;
  swift_bridgeObjectRetain();
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v45);
  if (v10 != v21 && v15 != v21) {
    AGGraphSetIndirectAttribute();
  }
  return swift_bridgeObjectRelease();
}

uint64_t SwitchRule.weakValue.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v9 = *(void *)(a1 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, WeakValue, a1);
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 - 8);
    uint64_t v6 = 1;
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);

  return v7(a2, v6, 1, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _DetachedPlaceholder<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static _DetachedPlaceholder._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t SwitchRule.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v11 - v6;
  SwitchRule.weakValue.getter(a1, (uint64_t)&v11 - v6);
  uint64_t v8 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, a1);
  }
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, Value, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance SwitchRule<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SwitchRule.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SwitchRule<A>()
{
  return specialized SwitchRule.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SwitchRule<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for SwitchRule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type SwitchRule<ViewTransform> and conformance SwitchRule<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SwitchRule<ViewTransform>(255, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for SwitchRule);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _DetachedView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static _DetachedView._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_245E858CC()
{
  return 48;
}

__n128 sub_245E858D8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for _DetachedPlaceholder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DetachedChild()
{
  return swift_getGenericMetadata();
}

uint64_t sub_245E85920()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in static _DetachedPlaceholder._makeView(view:inputs:)(a1, *(_DWORD *)(v2 + 32), a2);
}

unint64_t lazy protocol witness table accessor for type _DetachableProperties and conformance _DetachableProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties;
  if (!lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DetachableProperties and conformance _DetachableProperties);
  }
  return result;
}

uint64_t sub_245E85A9C()
{
  return 48;
}

__n128 sub_245E85AA8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t dispatch thunk of static _Detachable.matches<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static _Detachable.detachedProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for _DetachableProperties()
{
  return &type metadata for _DetachableProperties;
}

uint64_t type metadata completion function for _DetachedView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _DetachedView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E85CDCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _DetachedView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245E85ED0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _DetachedKey()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for _EmptyDetached()
{
  return &type metadata for _EmptyDetached;
}

uint64_t destroy for _DetachedPlaceholder()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _DetachedPlaceholder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DetachedPlaceholder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DetachedPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **sub_245E862A0()
{
  return &protocol witness table for _DetachedView<A, B, C>;
}

_UNKNOWN **sub_245E862AC()
{
  return &protocol witness table for _DetachedView<A, B, C>;
}

uint64_t instantiation function for generic protocol witness table for SwitchRule<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in SwitchRule<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for DetachedChild<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DetachedChild<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in DetachedChild.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DetachedChild.value.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in closure #1 in DetachedChild.value.getter(void (**a1)(_OWORD *))
{
  uint64_t v2 = *(void *)(v1 + 48);
  long long v3 = *a1;
  long long v4 = *(_OWORD *)(v2 + 56);
  long long v5 = *(_OWORD *)(v2 + 88);
  v8[4] = *(_OWORD *)(v2 + 72);
  void v8[5] = v5;
  uint64_t v9 = *(void *)(v2 + 104);
  long long v6 = *(_OWORD *)(v2 + 24);
  v8[0] = *(_OWORD *)(v2 + 8);
  v8[1] = v6;
  _OWORD v8[2] = *(_OWORD *)(v2 + 40);
  void v8[3] = v4;
  outlined retain of DetachedChild<A, B>(v2);
  v3(v8);

  return outlined release of DetachedChild<A, B>(v2);
}

uint64_t outlined retain of DetachedChild<A, B>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of DetachedChild<A, B>(uint64_t a1)
{
  return a1;
}

uint64_t specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 8) | *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 8) = 0;
  if ((v3 & 0x80) != 0 && *(_DWORD *)(result + 12) == *MEMORY[0x263F288F8]) {
    v3 &= ~0x80u;
  }
  if ((v3 & 0xFFFFFEFF) != 0)
  {
    uint64_t result = AGSubgraphShouldRecordTree();
    if (result)
    {
      if ((v3 & 4) != 0)
      {
        uint64_t result = AGSubgraphAddTreeValue();
        if ((v3 & 8) == 0)
        {
LABEL_8:
          if ((v3 & 0x10) == 0) {
            goto LABEL_9;
          }
          goto LABEL_15;
        }
      }
      else if ((v3 & 8) == 0)
      {
        goto LABEL_8;
      }
      uint64_t result = AGSubgraphAddTreeValue();
      if ((v3 & 0x10) == 0)
      {
LABEL_9:
        if ((v3 & 0x20) == 0) {
          goto LABEL_10;
        }
        goto LABEL_16;
      }
LABEL_15:
      uint64_t result = AGSubgraphAddTreeValue();
      if ((v3 & 0x20) == 0)
      {
LABEL_10:
        if ((v3 & 0x40) == 0) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
LABEL_16:
      swift_beginAccess();
      uint64_t result = AGSubgraphAddTreeValue();
      if ((v3 & 0x40) == 0)
      {
LABEL_11:
        if ((v3 & 0x80) == 0) {
          return result;
        }
LABEL_18:
        uint64_t result = *(unsigned int *)(v2 + 12);
        if (result != *MEMORY[0x263F288F8]) {
          return AGSubgraphAddTreeValue();
        }
        __break(1u);
        return result;
      }
LABEL_17:
      uint64_t result = AGSubgraphAddTreeValue();
      if ((v3 & 0x80) == 0) {
        return result;
      }
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t specialized SwitchRule.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 547916002;
}

uint64_t type metadata accessor for _DetachedPlaceholder.Stub()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for SwitchRule<ViewTransform>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in _DetachedPlaceholder<A>.Stub()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for specialized closure #1 in Attribute.setSwitchValue(_:)(uint64_t a1)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(a1 + 4) = result;
  return result;
}

uint64_t static Text.Superscript.== infix(_:_:)()
{
  return 1;
}

Swift::Int Text.Superscript.hashValue.getter()
{
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for Text.Superscript()
{
  return &type metadata for Text.Superscript;
}

uint64_t PlatformViewDefinition.deinit()
{
  return v0;
}

void static PlatformViewDefinition.setAllowsWindowActivationEvents(_:for:)()
{
}

void static PlatformViewDefinition.setHitTestsAsOpaque(_:for:)()
{
}

uint64_t PlatformViewDefinition.ViewKind.isContainer.getter()
{
  return (*v0 < 0x11uLL) & (0x15F01u >> *v0);
}

void DisplayList.GraphicsRenderer.drawPlatformLayer(_:in:size:update:)(id a1, uint64_t a2, char a3, double a4, CGFloat a5)
{
  if (a3)
  {
    objc_msgSend(a1, sel_setBounds_, 0.0, 0.0, a4, a5);
    objc_msgSend(a1, sel_layoutIfNeeded);
  }
  id v8 = a1;
  specialized GraphicsContext.drawLayer(flags:content:)(0, a5, a2, v8);
}

void specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    if (a3) {
      return;
    }
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
    goto LABEL_22;
  }
  if (a3)
  {
    float v8 = *((float *)&a4 + 1);
    float v7 = *(float *)&a4;
    float v10 = *((float *)&a5 + 1);
    float v9 = *(float *)&a5;
LABEL_19:
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    id v14 = (id)specialized ObjectCache.subscript.getter(v7, v8, v9, v10);
LABEL_22:
    v15.super.isdouble a = *v6;
    v17._object = (void *)0x800000024621A260;
    id v18 = v14;
    v17._uint64_t countAndFlagsBits = 0xD000000000000015;
    *(void *)&v15._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v14, v17, v15, v16);

    return;
  }
  float v8 = *((float *)&a4 + 1);
  float v7 = *(float *)&a4;
  float v10 = *((float *)&a5 + 1);
  float v9 = *(float *)&a5;
  if (*(float *)&a4 != *(float *)&a1
    || *((float *)&a4 + 1) != *((float *)&a1 + 1)
    || *(float *)&a5 != *(float *)&a2
    || *((float *)&a5 + 1) != *((float *)&a2 + 1))
  {
    goto LABEL_19;
  }
}

void specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(double *a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 8);
  if (*(double *)a2 != *a1
    || v3 != a1[1]
    || *(double *)(a2 + 16) != a1[2]
    || *(double *)(a2 + 24) != a1[3]
    || *(double *)(a2 + 32) != a1[4]
    || *(double *)(a2 + 40) != a1[5]
    || *(double *)(a2 + 48) != a1[6]
    || *(double *)(a2 + 56) != a1[7]
    || *(double *)(a2 + 64) != a1[8])
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = *(void *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 64);
    v13[0] = *(void *)a2;
    *(double *)&v13[1] = v3;
    void v13[2] = 0;
    long long v14 = v12;
    uint64_t v15 = v4;
    uint64_t v16 = 0;
    uint64_t v17 = v5;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    long long v20 = xmmword_2461BCA80;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = 0;
    uint64_t v24 = v8;
    id v9 = objc_msgSend(self, sel_valueWithCATransform3D_, v13);
    v25.super.isdouble a = *v2;
    v10._uint64_t countAndFlagsBits = 0x726F66736E617274;
    v10._object = (void *)0xE90000000000006DLL;
    *(void *)&v25._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v9, v10, v25, v11);
  }
}

BOOL static PlatformViewDefinition.ViewKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static PlatformViewDefinition.System.nsView.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void PlatformViewDefinition.System.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PlatformViewDefinition.System.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PlatformViewDefinition.System.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PlatformViewDefinition.ViewKind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PlatformViewDefinition.ViewKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static PlatformViewDefinition.system.getter()
{
}

void static PlatformViewDefinition.makeView(kind:)()
{
}

void static PlatformViewDefinition.makeLayerView(type:kind:)()
{
}

void static PlatformViewDefinition.makePlatformView(view:kind:)()
{
}

void static PlatformViewDefinition.makeDrawingView(options:)()
{
}

void static PlatformViewDefinition.setPath(_:shapeView:)()
{
}

void static PlatformViewDefinition.setProjectionTransform(_:projectionView:)()
{
}

uint64_t static PlatformViewDefinition.getRBLayer(drawingView:)()
{
  return 0;
}

void static PlatformViewDefinition.setIgnoresEvents(_:of:)()
{
}

uint64_t PlatformViewDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void *DisplayList.ViewUpdater.Platform.missingPlatformView()()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *v0 & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v8) = 0;
  HIDWORD(v8) = 0;
  LOBYTE(v9) = 1;
  DWORD1(v9) = 160;
  BYTE8(v9) = 3;
  double v3 = (void *)(*(uint64_t (**)(void (**)(CGSize)))(v2 + 112))(&v8);
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  CoreViewSetClipsToBounds(v1 & 3, v3, 0, 0);
  uint64_t v8 = closure #1 in DisplayList.ViewUpdater.Platform.missingPlatformView();
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 0;
  (*(void (**)(void (**)(CGSize), void, uint64_t, uint64_t))(v5 + 40))(&v8, 0, ObjectType, v5);
  return v3;
}

uint64_t DisplayList.ViewUpdater.Platform.updateShapeViewAsync(layer:oldState:oldSize:oldPath:oldPaint:oldStyle:newState:newSize:newPath:newPaint:newStyle:contentsChanged:)(void **a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, double *a8, uint64_t a9, uint64_t a10, __int16 a11, char a12)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  CGFloat v76 = *(double *)(a9 + 8);
  CGFloat v77 = *(double *)a9;
  CGFloat v74 = *(double *)(a9 + 24);
  CGFloat v75 = *(double *)(a9 + 16);
  char v73 = *(unsigned char *)(a9 + 32);
  CGFloat v69 = *(double *)(a4 + 8);
  CGFloat v70 = *(double *)a4;
  CGFloat v67 = *(double *)(a4 + 24);
  CGFloat v68 = *(double *)(a4 + 16);
  char v66 = *(unsigned char *)(a4 + 32);
  uint64_t v17 = *a1;
  CGFloat v18 = COERCE_DOUBLE(swift_getObjectType());
  double v19 = *a3;
  double v20 = a3[1];
  uint64_t v83 = a3;
  CGFloat v21 = *(double *)a2;
  double v22 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v19, v20, *(double *)(*(void *)a2 + 24), a4, *(uint64_t *)&v18);
  double v24 = v23;
  uint64_t v26 = v25;
  uint64_t v82 = v27;
  double v28 = *a8;
  double v29 = a8[1];
  uint64_t v84 = a8;
  CGFloat v30 = *(double *)a7;
  tdouble x = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v28, v29, *(double *)(*(void *)a7 + 24), a9, *(uint64_t *)&v18);
  double v32 = v31;
  uint64_t v80 = v34;
  uint64_t v81 = v33;
  if (a12)
  {
    uint64_t v65 = *(void *)(*(void *)&v21 + 24);
    LODWORD(v97.b) = *(_DWORD *)(a2 + 8);
    long long v35 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v97.tdouble x = *(_OWORD *)(a2 + 32);
    long long v98 = v35;
    long long v36 = *(_OWORD *)(a2 + 80);
    long long v99 = *(_OWORD *)(a2 + 64);
    CGFloat v37 = *(double *)(a2 + 16);
    uint64_t v38 = *(void *)(a2 + 96);
    char v39 = *(unsigned char *)(a2 + 104);
    char v40 = *(unsigned char *)(a2 + 105);
    char v41 = *(unsigned char *)(a2 + 106);
    int v42 = *(_DWORD *)(a2 + 108);
    uint64_t v43 = *(void *)(a2 + 112);
    uint64_t v44 = *(void *)(a2 + 168);
    char v86 = *(unsigned char *)(a2 + 24);
    v97.double a = v21;
    v97.double c = v37;
    LOBYTE(v97.d) = v86;
    long long v100 = v36;
    *(void *)&long long v101 = v38;
    BYTE8(v101) = v39;
    BYTE9(v101) = v40;
    BYTE10(v101) = v41;
    HIDWORD(v101) = v42;
    *(_OWORD *)&v102[8] = *(_OWORD *)(a2 + 120);
    long long v103 = *(_OWORD *)(a2 + 136);
    long long v104 = *(_OWORD *)(a2 + 152);
    *(void *)__int16 v102 = v43;
    uint64_t v105 = v44;
    *(void *)&v106.double a = v17;
    v106.double b = v18;
    v106.double c = v70;
    v106.double d = v69;
    v106.tdouble x = v68;
    v106.tdouble y = v67;
    LOBYTE(v107) = v66;
    *((double *)&v107 + 1) = v22;
    *(double *)&long long v108 = v24;
    *((void *)&v108 + 1) = a5;
    *(double *)&long long v109 = -v22;
    *((double *)&v109 + 1) = -v24;
    *(double *)&long long v110 = v19;
    *((double *)&v110 + 1) = v20;
    LOWORD(v111) = a6 & 0x101;
    *((void *)&v111 + 1) = v65;
    BOOL v112 = !DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    uint64_t v72 = *(void *)(*(void *)&v30 + 24);
    int v45 = *(_DWORD *)(a7 + 8);
    CGFloat v46 = *(double *)(a7 + 16);
    uint64_t v47 = *(void *)(a7 + 96);
    char v48 = *(unsigned char *)(a7 + 104);
    char v49 = *(unsigned char *)(a7 + 105);
    char v50 = *(unsigned char *)(a7 + 106);
    int v51 = *(_DWORD *)(a7 + 108);
    uint64_t v52 = *(void *)(a7 + 112);
    uint64_t v53 = *(void *)(a7 + 168);
    char v87 = *(unsigned char *)(a7 + 24);
    v97.double a = v30;
    LODWORD(v97.b) = v45;
    v97.double c = v46;
    LOBYTE(v97.d) = v87;
    long long v54 = *(_OWORD *)(a7 + 48);
    *(_OWORD *)&v97.tdouble x = *(_OWORD *)(a7 + 32);
    long long v98 = v54;
    long long v55 = *(_OWORD *)(a7 + 80);
    long long v99 = *(_OWORD *)(a7 + 64);
    long long v100 = v55;
    *(void *)&long long v101 = v47;
    BYTE8(v101) = v48;
    BYTE9(v101) = v49;
    BYTE10(v101) = v50;
    HIDWORD(v101) = v51;
    *(_OWORD *)&v102[8] = *(_OWORD *)(a7 + 120);
    long long v103 = *(_OWORD *)(a7 + 136);
    long long v104 = *(_OWORD *)(a7 + 152);
    *(void *)__int16 v102 = v52;
    uint64_t v105 = v53;
    *(void *)&v90.double a = v17;
    v90.double b = v18;
    v90.double c = v77;
    v90.double d = v76;
    v90.tdouble x = v75;
    v90.tdouble y = v74;
    LOBYTE(v91) = v73;
    *((double *)&v91 + 1) = tx;
    *(double *)&long long v92 = v32;
    *((void *)&v92 + 1) = a10;
    *(double *)&long long v93 = -tx;
    *((double *)&v93 + 1) = -v32;
    *(double *)&long long v94 = v28;
    *((double *)&v94 + 1) = v29;
    LOWORD(v95) = a11 & 0x101;
    WORD3(v95) = v89;
    *(_DWORD *)((char *)&v95 + 2) = v88;
    *((void *)&v95 + 1) = v72;
    BOOL v96 = !DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    id v56 = v17;
    _s7SwiftUI4PathV7StorageOWOrTm_0(a4, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    swift_retain();
    _s7SwiftUI4PathV7StorageOWOrTm_0(a9, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    swift_retain();
    char v57 = specialized static ShapeLayerHelper.updateAsync(layer:old:new:)((uint64_t)a1, (uint64_t)&v106, (unsigned __int8 *)&v90);
    long long v117 = v94;
    long long v118 = v95;
    BOOL v119 = v96;
    CGAffineTransform v113 = v90;
    long long v114 = v91;
    long long v115 = v92;
    long long v116 = v93;
    long long v101 = v110;
    *(_OWORD *)__int16 v102 = v111;
    v102[16] = v112;
    CGAffineTransform v97 = v106;
    long long v98 = v107;
    long long v99 = v108;
    long long v100 = v109;
    outlined release of ShapeLayerHelper((uint64_t)&v113);
    outlined release of ShapeLayerHelper((uint64_t)&v97);
    if ((v57 & 1) == 0) {
      return 0;
    }
  }
  long long v58 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v97.double a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v97.double c = v58;
  *(_OWORD *)&v97.tdouble x = *(_OWORD *)(a2 + 64);
  CGAffineTransformTranslate(&v113, &v97, v22, v24);
  long long v59 = *(_OWORD *)&v113.c;
  long long v60 = *(_OWORD *)&v113.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v113.a;
  *(_OWORD *)(a2 + 48) = v59;
  *(_OWORD *)(a2 + 64) = v60;
  long long v61 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v97.double a = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v97.double c = v61;
  *(_OWORD *)&v97.tdouble x = *(_OWORD *)(a7 + 64);
  CGAffineTransformTranslate(&v113, &v97, tx, v32);
  long long v62 = *(_OWORD *)&v113.c;
  long long v63 = *(_OWORD *)&v113.tx;
  *(_OWORD *)(a7 + 32) = *(_OWORD *)&v113.a;
  *(_OWORD *)(a7 + 48) = v62;
  *(_OWORD *)(a7 + 64) = v63;
  *(void *)uint64_t v83 = v26;
  *((void *)v83 + 1) = v82;
  *(void *)uint64_t v84 = v81;
  *((void *)v84 + 1) = v80;
  return 1;
}

uint64_t DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, long long *a6, CGFloat width, CGFloat height)
{
  char v13 = *a2;
  int v14 = *((_DWORD *)a2 + 1);
  char v15 = a2[8];
  int v16 = *((_DWORD *)a2 + 3);
  char v17 = a2[16];
  int v18 = *(_DWORD *)(a3 + 4);
  char v19 = *(unsigned char *)(a3 + 8);
  int v20 = *(_DWORD *)(a3 + 12);
  char v21 = *(unsigned char *)(a3 + 16);
  double v22 = *(void **)a4;
  double v23 = *(void **)(a4 + 8);
  uint64_t v24 = *(void *)(a4 + 16);
  uint64_t v25 = *(void *)(a4 + 24);
  uint64_t v26 = *(void *)(a4 + 32);
  char v27 = *(unsigned char *)(a4 + 40);
  LOBYTE(v63) = *(unsigned char *)a3;
  DWORD1(v63) = v18;
  BYTE8(v63) = v19;
  HIDWORD(v63) = v20;
  LOBYTE(v64) = v21;
  LOBYTE(v74.value.rect.origin.x) = v13;
  HIDWORD(v74.value.rect.origin.x) = v14;
  LOBYTE(v74.value.rect.origin.y) = v15;
  HIDWORD(v74.value.rect.origin.y) = v16;
  LOBYTE(v74.value.rect.size.width) = v17;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v63, (unsigned __int8 *)&v74)) {
    return 0;
  }
  char v61 = v27;
  uint64_t v60 = v26;
  long long v62 = v22;
  double v28 = *(void **)a1;
  uint64_t v29 = *(void *)(a1 + 8);
  char v30 = *(unsigned char *)(a1 + 17);
  id v31 = v28;
  id v32 = objc_msgSend(v31, sel_delegate);
  if (!v32)
  {

    return 0;
  }
  id v33 = v32;
  char v59 = a5;
  swift_getObjectType();
  uint64_t v34 = swift_conformsToProtocol2();
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v34) {
    id v36 = v33;
  }
  else {
    id v36 = 0;
  }

  if (!v36) {
    goto LABEL_22;
  }
  uint64_t v58 = v29;
  double x = 0.0;
  if ((v30 & 8) == 0) {
    goto LABEL_12;
  }
  long long v38 = a6[9];
  long long v71 = a6[8];
  long long v72 = v38;
  long long v73 = a6[10];
  long long v39 = a6[5];
  long long v67 = a6[4];
  long long v68 = v39;
  long long v40 = a6[7];
  long long v69 = a6[6];
  long long v70 = v40;
  long long v41 = a6[1];
  long long v63 = *a6;
  long long v64 = v41;
  long long v42 = a6[3];
  long long v65 = a6[2];
  long long v66 = v42;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v74);
  if (v74.value.style != SwiftUI_RoundedCornerStyle_unknownDefault)
  {
    uint64_t v43 = v35;
    double width = v74.value.rect.size.width;
    double height = v74.value.rect.size.height;
    double x = v74.value.rect.origin.x;
    double y = v74.value.rect.origin.y;
  }
  else
  {
LABEL_12:
    uint64_t v43 = v35;
    double y = 0.0;
  }
  uint64_t ObjectType = swift_getObjectType();
  *(void *)&long long v63 = v62;
  *((void *)&v63 + 1) = v23;
  *(void *)&long long v64 = v24;
  *((void *)&v64 + 1) = v25;
  *(void *)&long long v65 = v60;
  BYTE8(v65) = v61;
  id v56 = *(uint64_t (**)(long long *, void, id, uint64_t, uint64_t, double, double, double, double))(v43 + 48);
  uint64_t v57 = ObjectType;
  outlined copy of PlatformDrawableContent.Storage(v62, v23, v24, v25, v60, v61);
  uint64_t v46 = v56(&v63, v59 & 1, v31, v57, v43, x, y, width, height);
  uint64_t v48 = v47;
  outlined consume of PlatformDrawableContent.Storage(v62, v23, v24, v25, v60, v61);
  if (!v46)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v46;
  *(void *)(v49 + 24) = v48;
  char v50 = *(void **)(v58 + 64);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v58 + 64) = v50;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
    *(void *)(v58 + 64) = v50;
  }
  unint64_t v53 = v50[2];
  unint64_t v52 = v50[3];
  if (v53 >= v52 >> 1) {
    char v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v50);
  }
  v50[2] = v53 + 1;
  long long v54 = &v50[2 * v53];
  v54[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v54[5] = v49;
  *(void *)(v58 + 64) = v50;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v46);
  swift_unknownObjectRelease();
  return 1;
}

void closure #1 in DisplayList.ViewUpdater.Platform.missingPlatformView()(CGSize size)
{
}

uint64_t specialized Array<A>.popColorMultiply(drawable:)(uint64_t *a1, id *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v2 + 120 * v3;
  if (*(unsigned char *)(v4 + 28) != 5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 - 88);
  id v7 = *a2;
  id v8 = objc_msgSend(v7, sel_delegate);
  if (!v8)
  {

    return 0;
  }
  id v9 = v8;
  swift_getObjectType();
  uint64_t v10 = swift_conformsToProtocol2();
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    id v12 = v9;
  }
  else {
    id v12 = 0;
  }

  if (!v12)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  swift_getObjectType();
  char v13 = (*(uint64_t (**)(void))(v11 + 32))();
  uint64_t result = swift_unknownObjectRelease();
  if ((v13 & 1) == 0) {
    return 0;
  }
  if (*(void *)(v2 + 16))
  {
    specialized Array._customRemoveLast()((uint64_t)&v30);
    if (v45 == 255)
    {
      specialized Array.remove(at:)(*(void *)(*a1 + 16) - 1, (uint64_t)&v30);
      char v15 = v30;
      int v16 = v31;
      char v17 = v32;
      char v18 = v33;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v23 = v38;
      uint64_t v24 = v39;
      uint64_t v25 = v40;
      uint64_t v26 = v41;
      uint64_t v27 = v42;
      uint64_t v28 = v43;
      int v29 = v44;
    }
    else
    {
      int v29 = v44;
      uint64_t v27 = v42;
      uint64_t v28 = v43;
      uint64_t v25 = v40;
      uint64_t v26 = v41;
      uint64_t v23 = v38;
      uint64_t v24 = v39;
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      char v17 = v32;
      char v18 = v33;
      char v15 = v30;
      int v16 = v31;
    }
    outlined consume of GraphicsFilter(v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, SBYTE2(v29));
    return v6;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System;
  if (!lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewDefinition.System and conformance PlatformViewDefinition.System);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind;
  if (!lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewDefinition.ViewKind and conformance PlatformViewDefinition.ViewKind);
  }
  return result;
}

uint64_t method lookup function for PlatformViewDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PlatformViewDefinition);
}

uint64_t dispatch thunk of static PlatformViewDefinition.system.getter()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeView(kind:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeLayerView(type:kind:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makePlatformView(view:kind:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.makeDrawingView(options:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setPath(_:shapeView:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 120);
  char v3 = *(unsigned char *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = v3;
  return v2(v6);
}

uint64_t dispatch thunk of static PlatformViewDefinition.setProjectionTransform(_:projectionView:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(uint64_t (**)(_OWORD *))(v1 + 128);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  void v7[3] = v5;
  uint64_t v8 = v2;
  return v3(v7);
}

uint64_t dispatch thunk of static PlatformViewDefinition.getRBLayer(drawingView:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setIgnoresEvents(_:of:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setAllowsWindowActivationEvents(_:for:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of static PlatformViewDefinition.setHitTestsAsOpaque(_:for:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

ValueMetadata *type metadata accessor for PlatformViewDefinition.System()
{
  return &type metadata for PlatformViewDefinition.System;
}

uint64_t getEnumTagSinglePayload for PlatformViewDefinition.ViewKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlatformViewDefinition.ViewKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E881B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformViewDefinition.ViewKind()
{
  return &type metadata for PlatformViewDefinition.ViewKind;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform()
{
  return &type metadata for DisplayList.ViewUpdater.Platform;
}

uint64_t sub_245E881FC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245E88234()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.Platform.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF0 && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 240);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 0x11;
  int v5 = v3 - 17;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.Platform.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEF)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 240;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF0) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.ViewFlags()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.ViewFlags;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.Platform.ViewFlags and conformance DisplayList.ViewUpdater.Platform.ViewFlags);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model()
{
  return &type metadata for DisplayList.ViewUpdater.Model;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  long long v14 = *(_OWORD *)(a2 + 40);
  long long v15 = *(_OWORD *)(a2 + 56);
  long long v16 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  return a1;
}

__n128 __swift_memcpy91_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 91)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 89);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.Model.Clip(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 91) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 91) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 89) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.Clip()
{
  return &type metadata for DisplayList.ViewUpdater.Model.Clip;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.ViewUpdater.Model.Clip(unsigned char *a1, unsigned __int8 *a2)
{
  outlined init with take of Path.Storage((uint64_t)a1, (uint64_t)v11);
  char v4 = a1[88];
  int v5 = a1[89];
  int v6 = a1[90];
  outlined init with take of Path.Storage((uint64_t)a2, (uint64_t)v12);
  int v7 = a2[88];
  int v8 = a2[89];
  int v9 = a2[90];
  if ((specialized static Path.Storage.== infix(_:_:)((uint64_t)v11, (uint64_t)v12) & 1) == 0) {
    return 0;
  }
  if ((v4 & 1) == 0)
  {
    if ((v7 & 1) != 0 || (static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
      return 0;
    }
    return (v5 ^ v8 | v6 ^ v9) ^ 1u;
  }
  if (v7) {
    return (v5 ^ v8 | v6 ^ v9) ^ 1u;
  }
  return 0;
}

uint64_t sub_245E889EC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E88A24()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t sub_245E88A90()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E88AC8()
{
  return swift_deallocObject();
}

uint64_t destroy for DisplayList.ViewUpdater.Model.State(uint64_t a1)
{
  outlined consume of GraphicsBlendMode(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.Model.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  outlined copy of GraphicsBlendMode(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.Model.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  outlined copy of GraphicsBlendMode(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of GraphicsBlendMode(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.Model.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of GraphicsBlendMode(v6, v7);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.Model.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.Model.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.State.Versions()
{
  return &type metadata for DisplayList.ViewUpdater.Model.State.Versions;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.Model.State.Globals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

void *assignWithCopy for DisplayList.ViewUpdater.Model.State.Globals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for DisplayList.ViewUpdater.Model.State.Globals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Model.State.Globals()
{
  return &type metadata for DisplayList.ViewUpdater.Model.State.Globals;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.AsyncLayer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.AsyncLayer()
{
  return &type metadata for DisplayList.ViewUpdater.AsyncLayer;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  id v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  id v6 = v5;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 107)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 107) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 107) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache;
}

unint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11DisplayListV11ViewUpdaterC0G5CacheV3KeyV_s5NeverOytSgTB503_s7c4UI11ef3V11gh4C0E5i70V17removeRecursively33_A9949015C771FF99F7528BB7239FD006LLyyyXlFytSgAG3J6VXEfU_AJTf1cn_n(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  int v5 = a3;
  if (a3 == 2)
  {
    int v6 = 0;
  }
  else
  {
    v8[0] = a1;
    v8[1] = a2;
    char v9 = a3 & 1;
    unint64_t result = closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)((uint64_t)v8, a4, v10);
    if (v4) {
      return result;
    }
    int v6 = v10[0];
  }
  return v6 | ((v5 == 2) << 8);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t DisplayList.ViewUpdater.ViewCache.prepareAnimation(_:displayList:item:parentState:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  long long v7 = v6;
  uint64_t v54 = *a2;
  __int16 v52 = *((_WORD *)a2 + 4);
  char v53 = *((unsigned char *)a2 + 10);
  uint64_t v11 = *(void *)(*(void *)a4 + 8);
  char v67 = 1;
  unint64_t v12 = v6[9];
  unint64_t v13 = v6[10];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = v6[4];
  *(void *)long long v64 = v15;
  _OWORD v7[4] = 0x8000000000000000;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, 0);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_25:
    specialized _NativeDictionary.copy()();
    uint64_t v15 = *(void *)v64;
    goto LABEL_6;
  }
  char v5 = v16;
  if (*(void *)(v15 + 24) >= v20)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  uint64_t v15 = *(void *)v64;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, 0);
  if ((v5 & 1) != (v22 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v17 = v21;
LABEL_6:
  _OWORD v7[4] = v15;
  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)v7[4];
  if ((v5 & 1) == 0)
  {
    memset(v64, 0, sizeof(v64));
    char v65 = 2;
    uint64_t v66 = 0;
    specialized _NativeDictionary._insert(at:key:value:)(v17, v12, v13, 0, (uint64_t)v64, v23);
  }
  uint64_t v24 = v23[7];
  uint64_t v25 = v24 + 56 * v17;
  outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t *)v25, (uint64_t)v64);
  if (v65 == 2
    && (int8x16_t v26 = vorrq_s8(*(int8x16_t *)&v64[8], *(int8x16_t *)&v64[24]),
        !(*(void *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)) | *(void *)v64)))
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64);
    uint64_t v47 = a1[3];
    uint64_t v48 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v47);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v48 + 32))(v64, v47, v48);
    char v65 = 0;
    outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64, v24 + 56 * v17);
  }
  else
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)v64);
  }
  outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t *)(v24 + 56 * v17), (uint64_t)v64);
  if (!v65)
  {
    uint64_t v50 = v24;
    outlined init with take of ScrollStateRequest((long long *)v64, (uint64_t)v61);
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(v24 + 56 * v17);
    *(_OWORD *)uint64_t v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(void *)(v25 + 32) = 0;
    *(unsigned char *)(v25 + 40) = 2;
    v60[0] = v11;
    double v27 = *(double *)(a3 + 16);
    double v28 = *(double *)(a3 + 24);
    uint64_t v29 = v62;
    uint64_t v30 = v63;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v61, v62);
    char v49 = (*(uint64_t (**)(uint64_t *, void *, uint64_t *, uint64_t, uint64_t, double, double))(v30 + 8))(&v55, a1, v60, v29, v30, v27, v28);
    uint64_t v31 = v55;
    uint64_t v32 = v56;
    uint64_t v33 = v57;
    swift_beginAccess();
    char v67 = v49 & 1;
    uint64_t v34 = a3 + 64;
    uint64_t v35 = *(void *)(v34 - 24);
    unint64_t v36 = *(void *)(v34 - 16);
    *(void *)(v34 - 24) = v31;
    *(void *)(v34 - 16) = v32 | (v33 << 32) | 0x4000000000000000;
    *(void *)(v34 - 8) = v54;
    *(_WORD *)uint64_t v34 = v52;
    *(unsigned char *)(v34 + 2) = v53;
    outlined copy of DisplayList.Effect(v31, v32, v33);
    swift_bridgeObjectRetain();
    outlined consume of DisplayList.Item.Value(v35, v36);
    uint64_t v37 = *(void *)(*(void *)a4 + 16);
    *(void *)(v34 - 32) = v37;
    if (v49)
    {
      uint64_t v55 = v31;
      unsigned int v56 = v32;
      unsigned __int8 v57 = v33;
      char v38 = 1;
      uint64_t v58 = v37;
    }
    else
    {
      outlined consume of DisplayList.Effect(v31, v32, v33);
      outlined init with copy of AnyTrackedValue((uint64_t)v61, (uint64_t)&v55);
      char v38 = 0;
    }
    unint64_t v45 = v17;
    int v44 = a5;
    uint64_t v24 = v50;
    char v59 = v38;
    outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State((uint64_t)&v55, v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    goto LABEL_18;
  }
  if (v65 != 1)
  {
LABEL_27:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v39 = *(void *)&v64[16];
  unint64_t v40 = *(unsigned int *)&v64[8] | ((unint64_t)v64[12] << 32) | 0x4000000000000000;
  uint64_t v41 = a3 + 64;
  uint64_t v42 = *(void *)(v41 - 24);
  unint64_t v43 = *(void *)(v41 - 16);
  *(void *)(v41 - 24) = *(void *)v64;
  *(void *)(v41 - 16) = v40;
  *(void *)(v41 - 8) = v54;
  *(_WORD *)uint64_t v41 = v52;
  *(unsigned char *)(v41 + 2) = v53;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Item.Value(v42, v43);
  *(void *)(v41 - 32) = v39;
  int v44 = a5;
  unint64_t v45 = v17;
LABEL_18:
  *(void *)(v24 + 56 * v45 + 48) = v11;
  uint64_t result = swift_beginAccess();
  if (v67 == 1)
  {
    if (one-time initialization token for infinity != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v11 = static Time.infinity;
  }
  uint64_t *v44 = v11;
  return result;
}

unint64_t closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if (v6)
  {
    unint64_t v7 = result;
    uint64_t v35 = a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = a2[1];
    v37[0] = v9;
    a2[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v37[0];
    }
    uint64_t v10 = *(void *)(v9 + 56) + 120 * v7;
    uint64_t v11 = *(void *)v10;
    unint64_t v36 = *(void **)(v10 + 8);
    uint64_t v33 = *(void *)(v10 + 24);
    uint64_t v34 = *(void *)(v10 + 16);
    uint64_t v22 = *(void *)(v10 + 40);
    uint64_t v23 = *(void *)(v10 + 48);
    char v30 = *(unsigned char *)(v10 + 56);
    uint64_t v28 = *(void *)(v10 + 32);
    char v29 = *(unsigned char *)(v10 + 57);
    uint64_t v31 = *(void *)(v10 + 72);
    uint64_t v32 = *(void *)(v10 + 64);
    __int16 v27 = *(_WORD *)(v10 + 80);
    __int16 v26 = *(_WORD *)(v10 + 82);
    __int16 v25 = *(_WORD *)(v10 + 84);
    __int16 v24 = *(_WORD *)(v10 + 86);
    __int16 v18 = *(_WORD *)(v10 + 88);
    __int16 v12 = *(_WORD *)(v10 + 90);
    __int16 v21 = *(_WORD *)(v10 + 92);
    __int16 v13 = *(_WORD *)(v10 + 96);
    int v14 = *(_DWORD *)(v10 + 100);
    char v15 = *(unsigned char *)(v10 + 104);
    int v16 = *(unsigned __int8 *)(v10 + 105);
    uint64_t v19 = *(void *)(v10 + 112);
    __int16 v20 = *(_WORD *)(v10 + 94);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    a2[1] = v9;
    unint64_t result = swift_bridgeObjectRelease();
    if (v11)
    {
      uint64_t v55 = *a2;
      v37[0] = v11;
      v37[1] = v36;
      v37[2] = v34;
      _OWORD v37[3] = v33;
      v37[4] = v28;
      v37[5] = v22;
      v37[6] = v23;
      char v38 = v30;
      char v39 = v29;
      uint64_t v40 = v32;
      uint64_t v41 = v31;
      __int16 v42 = v27;
      __int16 v43 = v26;
      __int16 v44 = v25;
      __int16 v45 = v24;
      __int16 v46 = v18;
      __int16 v47 = v12;
      __int16 v48 = v21;
      __int16 v49 = v20;
      __int16 v50 = v13;
      int v51 = v14;
      char v52 = v15;
      BOOL v53 = v16 != 0;
      uint64_t v54 = v19;
      specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)v37, &v55, a2);
      unint64_t result = outlined consume of DisplayList.ViewUpdater.ViewInfo?(v11, v36);
      char v17 = 0;
    }
    else
    {
      char v17 = 1;
    }
    a3 = v35;
  }
  else
  {
    char v17 = 1;
  }
  *a3 = v17;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(void *a1, uint64_t *a2)
{
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)a1);
  if (v5)
  {
    unint64_t v6 = v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = a2[2];
    a2[2] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    uint64_t v9 = *(void *)(v8 + 56) + 20 * v6;
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    unsigned __int8 v12 = *(unsigned char *)(v9 + 16);
    specialized _NativeDictionary._delete(at:)(v6, v8);
    a2[2] = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned __int8 v12 = 2;
  }
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11DisplayListV11ViewUpdaterC0G5CacheV3KeyV_s5NeverOytSgTB503_s7c4UI11ef3V11gh4C0E5i70V17removeRecursively33_A9949015C771FF99F7528BB7239FD006LLyyyXlFytSgAG3J6VXEfU_AJTf1cn_n(v10, v11, v12, a2);
  return CoreViewRemoveFromSuperview(*(_DWORD *)a2 & 3, a1);
}

void specialized thunk for @callee_guaranteed () -> (@owned DisplayList.ViewUpdater.ViewCache.AsyncValues)(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE80];
  *a1 = MEMORY[0x263F8EE88];
  a1[1] = v1;
}

uint64_t outlined consume of DisplayList.ViewUpdater.ViewInfo?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_unknownObjectRelease();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, double a2)
{
  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v4 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, a2);
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  __int16 v26 = (unint64_t *)result;
  uint64_t v27 = 0;
  int64_t v5 = 0;
  uint64_t v35 = a3;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v6 = a3 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v7;
  uint64_t v28 = v6;
  int64_t v29 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
    }
    unint64_t v22 = *(void *)(v28 + 8 * v21);
    ++v5;
    if (!v22)
    {
      int64_t v5 = v21 + 1;
      if (v21 + 1 >= v29) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
      }
      unint64_t v22 = *(void *)(v28 + 8 * v5);
      if (!v22)
      {
        int64_t v5 = v21 + 2;
        if (v21 + 2 >= v29) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
        }
        unint64_t v22 = *(void *)(v28 + 8 * v5);
        if (!v22) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v22 - 1) & v22;
    unint64_t v13 = __clz(__rbit64(v22)) + (v5 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(v35 + 48) + 20 * v13;
    int v15 = *(_DWORD *)v14;
    int v16 = *(_DWORD *)(v14 + 4);
    int v18 = *(_DWORD *)(v14 + 8);
    int v17 = *(_DWORD *)(v14 + 12);
    char v19 = *(unsigned char *)(v14 + 16);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(*(void *)(v35 + 56) + 56 * v13, (uint64_t)v34);
    v31[0] = v15;
    v31[1] = v16;
    _OWORD v31[2] = v18;
    v31[3] = v17;
    char v32 = v19;
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v34, (uint64_t)v33);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v33, (uint64_t)v30);
    double v20 = *(double *)&v30[6];
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v30);
    outlined destroy of (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)((uint64_t)v31);
    unint64_t result = outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo((uint64_t)v34);
    if (v20 >= a4)
    {
      *(unint64_t *)((char *)v26 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
      }
    }
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v29) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
  }
  unint64_t v22 = *(void *)(v28 + 8 * v23);
  if (v22)
  {
    int64_t v5 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v5 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, a2, v27, v35);
    }
    unint64_t v22 = *(void *)(v28 + 8 * v5);
    ++v23;
    if (v22) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)(uint64_t a1)
{
  type metadata accessor for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo)()
{
  if (!lazy cache variable for type metadata for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: DisplayList.ViewUpdater.ViewCache.Key, value: DisplayList.ViewUpdater.ViewCache.AnimatorInfo));
    }
  }
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1)
{
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return outlined consume of DisplayList.Effect(*(void *)result, *(_DWORD *)(result + 8), *(unsigned char *)(result + 12));
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 40);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v6 = *a2;
    int v7 = *((_DWORD *)a2 + 2);
    char v8 = *((unsigned char *)a2 + 12);
    outlined copy of DisplayList.Effect(*a2, v7, v8);
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 12) = v8;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v4)
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      outlined consume of DisplayList.Effect(*(void *)a1, *(_DWORD *)(a1 + 8), *(unsigned char *)(a1 + 12));
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *a2;
      int v8 = *((_DWORD *)a2 + 2);
      char v9 = *((unsigned char *)a2 + 12);
      outlined copy of DisplayList.Effect(*a2, v8, v9);
      *(void *)a1 = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 12) = v9;
      *(void *)(a1 + 16) = a2[2];
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v11;
    }
    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      outlined consume of DisplayList.Effect(*(void *)a1, *(_DWORD *)(a1 + 8), *(unsigned char *)(a1 + 12));
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State()
{
  return &unk_26FA41840;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unsigned int v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.PendingAsyncValue;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AsyncValues()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.AsyncValues;
}

uint64_t destroy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t result)
{
  if (*(unsigned char *)(result + 40) == 1) {
    return outlined consume of DisplayList.Effect(*(void *)result, *(_DWORD *)(result + 8), *(unsigned char *)(result + 12));
  }
  if (!*(unsigned char *)(result + 40)) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    uint64_t v5 = *(void *)a2;
    int v6 = *(_DWORD *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 12);
    outlined copy of DisplayList.Effect(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 12) = v7;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a1);
    if (*((unsigned char *)a2 + 40) == 1)
    {
      uint64_t v5 = *(void *)a2;
      int v6 = *((_DWORD *)a2 + 2);
      char v7 = *((unsigned char *)a2 + 12);
      outlined copy of DisplayList.Effect(*(void *)a2, v6, v7);
      *(void *)a1 = v5;
      *(_DWORD *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 12) = v7;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (*((unsigned char *)a2 + 40))
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  return a1;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo.State(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.AnimatorInfo()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.AnimatorInfo;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.Key()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.Key;
}

unsigned char *storeEnumTagSinglePayload for DisplayList.ViewUpdater.ViewCache.Tag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E8AE94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.ViewCache.Tag()
{
  return &type metadata for DisplayList.ViewUpdater.ViewCache.Tag;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Tag and conformance DisplayList.ViewUpdater.ViewCache.Tag);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs13StrideThroughVySo9NSDecimalaG_So8NSNumberCs5NeverOTg5067_s7SwiftUI25AccessibilityValueStorageV21platformAllowedValuesSaySo8G26CGSgvgAFSo9NSDecimalaXEfU_Tf1cn_n(unsigned int *a1)
{
  specialized StrideThrough.underestimatedCount.getter();
  uint64_t v3 = v2;
  uint64_t v39 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v3 < 0) {
    goto LABEL_22;
  }
  unsigned int v31 = *((unsigned __int16 *)a1 + 9);
  int v33 = *((unsigned __int16 *)a1 + 8);
  unint64_t v34 = *((unsigned __int16 *)a1 + 7);
  uint64_t v35 = *((unsigned __int16 *)a1 + 6);
  uint64_t v36 = *((unsigned __int16 *)a1 + 5);
  uint64_t v32 = *((unsigned __int16 *)a1 + 4);
  unint64_t v37 = *((unsigned __int16 *)a1 + 3);
  uint64_t v5 = *((unsigned __int16 *)a1 + 2);
  uint64_t v6 = *a1;
  char v38 = (NSDecimal *)*((void *)a1 + 5);
  char v7 = (NSDecimal *)a1[14];
  uint64_t v8 = *(void *)(a1 + 5);
  uint64_t v9 = *(void *)(a1 + 7);
  uint64_t v10 = a1[9];
  uint64_t v30 = v8;
  int v11 = 0;
  if (!v3) {
    goto LABEL_14;
  }
  unsigned int v28 = a1[9];
  while (1)
  {
    int v29 = v11;
    uint64_t v16 = v9;
    NSDecimal.init(integerLiteral:)(v7, 0);
    uint64_t v17 = v5;
    uint64_t v18 = v6 | (v5 << 32) | (v37 << 48);
    if ((static NSDecimal.< infix(_:_:)() & 1) == 0) {
      break;
    }
    uint64_t v19 = v30;
    uint64_t v20 = v28;
    if ((static NSDecimal.< infix(_:_:)() & 1) == 0) {
      goto LABEL_10;
    }
LABEL_4:
    NSDecimal.advanced(by:)(v21, v38);
    uint64_t v5 = WORD2(v12);
    uint64_t v36 = WORD1(v13);
    unint64_t v37 = HIWORD(v12);
    uint64_t v6 = v12;
    uint64_t v32 = (unsigned __int16)v13;
    unint64_t v34 = HIWORD(v13);
    uint64_t v35 = WORD2(v13);
    int v33 = (unsigned __int16)v14;
    uint64_t v15 = HIWORD(v14);
    unsigned int v31 = HIWORD(v14);
    uint64_t v9 = v16;
LABEL_5:
    NSDecimal._bridgeToObjectiveC()((NSDecimalNumber *)v15);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    --v3;
    uint64_t v8 = v30;
    uint64_t v10 = v28;
    int v11 = v29;
    if (!v3)
    {
      while (1)
      {
LABEL_14:
        NSDecimal.init(integerLiteral:)(v7, 0);
        if (static NSDecimal.< infix(_:_:)())
        {
          if (static NSDecimal.< infix(_:_:)()) {
            goto LABEL_12;
          }
        }
        else if (static NSDecimal.< infix(_:_:)())
        {
LABEL_12:
          NSDecimal.advanced(by:)(v26, v38);
          uint64_t v5 = WORD2(v22);
          uint64_t v36 = WORD1(v23);
          unint64_t v37 = HIWORD(v22);
          uint64_t v6 = v22;
          uint64_t v32 = (unsigned __int16)v23;
          unint64_t v34 = HIWORD(v23);
          uint64_t v35 = WORD2(v23);
          int v33 = (unsigned __int16)v24;
          __int16 v25 = (NSDecimalNumber *)HIWORD(v24);
          unsigned int v31 = HIWORD(v24);
          goto LABEL_13;
        }
        int v27 = MEMORY[0x24C523730](v6 | (v5 << 32) | (v37 << 48), v32 | (v36 << 16) | (v35 << 32) | (v34 << 48), v33 | (v31 << 16), v8, v9, v10);
        __int16 v25 = (NSDecimalNumber *)(v11 | ~v27);
        if (v11 & 1 | ((v27 & 1) == 0)) {
          return v39;
        }
        int v11 = 1;
LABEL_13:
        NSDecimal._bridgeToObjectiveC()(v25);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v30;
      }
    }
  }
  uint64_t v19 = v30;
  uint64_t v20 = v28;
  if (static NSDecimal.< infix(_:_:)()) {
    goto LABEL_4;
  }
LABEL_10:
  uint64_t result = MEMORY[0x24C523730](v18, v32 | (v36 << 16) | (v35 << 32) | (v34 << 48), v33 | (v31 << 16), v19, v16, v20);
  if (!(v29 & 1 | ((result & 1) == 0)))
  {
    uint64_t v9 = v16;
    uint64_t v15 = 1;
    int v29 = 1;
    uint64_t v5 = v17;
    goto LABEL_5;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t AnyAccessibilityValue.localizedDescription.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

SwiftUI::AnyAccessibilityValueType_optional __swiftcall AnyAccessibilityValueType.init(rawValue:)(Swift::UInt rawValue)
{
  char v2 = 12;
  if (rawValue < 0xC) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AnyAccessibilityValueType_optional)rawValue;
}

uint64_t AnyAccessibilityValueType.rawValue.getter()
{
  return *v0;
}

SwiftUI::AnyAccessibilityValueType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnyAccessibilityValueType(Swift::UInt *a1)
{
  return AnyAccessibilityValueType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValueType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValueType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AccessibilityValue.localizedDescription.getter()
{
  return 0;
}

uint64_t AccessibilityValue.displayDescription.getter()
{
  return 0;
}

uint64_t AccessibilityValue.minValue.getter()
{
  return AccessibilityValue.maxValue.getter();
}

uint64_t AccessibilityValue.minValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t AccessibilityValue<>.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 48))(a1, a2, v6);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v9;
}

{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t AccessibilityValue<>.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t specialized AccessibilityValue<>.localizedDescription.getter(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(self, sel_localizedStringFromNumber_numberStyle_, v1, 1);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t specialized AccessibilityValue<>.localizedNumericDescription.getter(uint64_t a1, char a2)
{
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  Swift::Double v4 = 0.0;
  double v5 = 0.0;
  if ((a2 & 1) == 0)
  {
    isdouble a = NSNumber.init(integerLiteral:)(0).super.super.isa;
    Class v7 = NSNumber.init(integerLiteral:)(1).super.super.isa;
    [(objc_class *)v7 doubleValue];
    double v9 = v8;
    [(objc_class *)isa doubleValue];
    double v11 = v10;

    double v5 = v9 - v11;
    Swift::Double v4 = *(double *)&a1;
  }
  v12.super.super.isdouble a = NSNumber.init(floatLiteral:)(v4).super.super.isa;
  Class v13 = v12.super.super.isa;
  if (fabs(v5 + -100.0) >= 2.22044605e-16)
  {
    if (fabs(v5 + -1.0) >= 2.22044605e-16) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 3;
    }
  }
  else
  {
    [(objc_class *)v12.super.super.isa doubleValue];
    Class v14 = CGFloat._bridgeToObjectiveC()().super.super.isa;

    uint64_t v15 = 3;
    Class v13 = v14;
  }
  id v16 = objc_msgSend(self, sel_localizedStringFromNumber_numberStyle_, v13, v15);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v17;
}

uint64_t specialized AccessibilityValue<>.localizedNumericDescription.getter(void *a1, void *a2, void *a3)
{
  double v4 = 0.0;
  if (a2 && a3)
  {
    id v6 = a2;
    id v7 = a3;
    objc_msgSend(v7, sel_doubleValue);
    double v9 = v8;
    objc_msgSend(v6, sel_doubleValue);
    double v11 = v10;

    double v4 = v9 - v11;
  }
  if (fabs(v4 + -100.0) >= 2.22044605e-16)
  {
    double v15 = fabs(v4 + -1.0);
    v13.super.super.isdouble a = (Class)a1;
    if (v15 >= 2.22044605e-16) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = 3;
    }
  }
  else
  {
    id v12 = a1;
    objc_msgSend(v12, sel_doubleValue);
    v13.super.super.isdouble a = CGFloat._bridgeToObjectiveC()().super.super.isa;

    uint64_t v14 = 3;
  }
  id v16 = objc_msgSend(self, sel_localizedStringFromNumber_numberStyle_, v13.super.super.isa, v14);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v17;
}

uint64_t AccessibilityValue<>.localizedNumericDescription.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(a2 + 56))(&v16);
  double v4 = v16;
  if (v16)
  {
    id v15 = v16;
    closure #1 in AccessibilityValue<>.localizedNumericDescription.getter(&v15, a1, a2, &v14);

    double v5 = v14;
  }
  else
  {
    double v5 = 0.0;
  }
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(a2 + 48))(&v15, a1, a2);
  if (fabs(v5 + -100.0) >= 2.22044605e-16)
  {
    if (fabs(v5 + -1.0) >= 2.22044605e-16) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 3;
    }
  }
  else
  {
    id v6 = v15;
    objc_msgSend(v15, sel_doubleValue);
    isdouble a = CGFloat._bridgeToObjectiveC()().super.super.isa;

    id v15 = isa;
    uint64_t v8 = 3;
  }
  double v9 = self;
  id v10 = v15;
  id v11 = objc_msgSend(v9, sel_localizedStringFromNumber_numberStyle_, v15, v8);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v12;
}

void closure #1 in AccessibilityValue<>.localizedNumericDescription.getter(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  double v5 = *a1;
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(a3 + 64))(&v12, a2, a3);
  if (v12)
  {
    id v6 = v12;
    objc_msgSend(v6, sel_doubleValue);
    double v8 = v7;
    objc_msgSend(v5, sel_doubleValue);
    double v10 = v9;

    double v11 = v8 - v10;
  }
  else
  {
    double v11 = 0.0;
  }
  *a4 = v11;
}

uint64_t AccessibilityValueByProxy.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v10;
}

uint64_t AccessibilityValueByProxy.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v10;
}

uint64_t AccessibilityValueByProxy.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.minValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.maxValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t AccessibilityValueByProxy.step.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

void static Int.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance Int()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void static Double.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance Double()
{
  return Double.description.getter();
}

void static Bool.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance Bool()
{
  if (*v0) {
    return 1702195828;
  }
  else {
    return 0x65736C6166;
  }
}

void static String.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance String()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void static AccessibilityEmptyValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t AccessibilityEmptyValue.value.getter()
{
  return 1;
}

uint64_t static AccessibilityEmptyValue.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityEmptyValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityEmptyValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityEmptyValue.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys, (uint64_t)&unk_26FA68350, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AccessibilityEmptyValue.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilityEmptyValue(_WORD *a1@<X8>)
{
  *a1 = 256;
}

void protocol witness for static AccessibilityValue.type.getter in conformance AccessibilityEmptyValue(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityEmptyValue(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityEmptyValue(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys, (uint64_t)&unk_26FA68350, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void static AccessibilityBoundedNumber.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

id AccessibilityBoundedNumber.number.getter@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

void AccessibilityBoundedNumber.number.setter(void **a1)
{
  uint64_t v2 = *a1;

  *uint64_t v1 = v2;
}

uint64_t (*AccessibilityBoundedNumber.number.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.lowerBound.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.lowerBound.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;

  *(void *)(v1 + 8) = v2;
}

uint64_t (*AccessibilityBoundedNumber.lowerBound.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.upperBound.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.upperBound.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;

  *(void *)(v1 + 16) = v2;
}

uint64_t (*AccessibilityBoundedNumber.upperBound.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id AccessibilityBoundedNumber.stride.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return v2;
}

void AccessibilityBoundedNumber.stride.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;

  *(void *)(v1 + 24) = v2;
}

uint64_t (*AccessibilityBoundedNumber.stride.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityBoundedNumber.init(value:minValue:maxValue:step:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  *a5 = *result;
  a5[1] = v5;
  a5[2] = v6;
  a5[3] = v7;
  return result;
}

id AccessibilityBoundedNumber.value.getter()
{
  return *v0;
}

id AccessibilityNumber.value.getter()
{
  return *v0;
}

void *AccessibilityBoundedNumber.minValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void *AccessibilityBoundedNumber.maxValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void *AccessibilityBoundedNumber.step.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t static AccessibilityNumber.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityBoundedNumber.CodingKeys()
{
  uint64_t result = 0x7265626D756ELL;
  switch(*v0)
  {
    case 1:
      unsigned int v2 = 1702326124;
      goto LABEL_4;
    case 2:
      unsigned int v2 = 1701867637;
LABEL_4:
      uint64_t result = v2 | 0x756F427200000000;
      break;
    case 3:
      uint64_t result = 0x656469727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityBoundedNumber.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AccessibilityBoundedNumber.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityBoundedNumber.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityBoundedNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityBoundedNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityBoundedNumber.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityBoundedNumber.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys, (uint64_t)&unk_26FA6DE08, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v16 = v1[2];
  uint64_t v17 = v8;
  uint64_t v15 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v20 = v9;
  char v19 = 0;
  lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
  uint64_t v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    uint64_t v20 = v17;
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v20 = v12;
    char v19 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v20 = v11;
    char v19 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void AccessibilityBoundedNumber.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityBoundedNumber.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys, (uint64_t)&unk_26FA6DE08, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = a1[3];
  unint64_t v22 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    uint64_t v21 = v7;
    char v23 = 0;
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    uint64_t v11 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v23 = 1;
    id v12 = v24;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v13 = v24;
    char v23 = 2;
    id v14 = v24;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v20 = v14;
    id v15 = v24;
    char v23 = 3;
    id v19 = v24;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v11);
    id v16 = v24;
    id v17 = v24;
    *a2 = v12;
    a2[1] = v13;
    a2[2] = v15;
    a2[3] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityBoundedNumber()
{
  return specialized AccessibilityValue<>.localizedNumericDescription.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Decodable.init(from:) in conformance AccessibilityBoundedNumber(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityBoundedNumber(void *a1)
{
  return AccessibilityBoundedNumber.encode(to:)(a1);
}

uint64_t AccessibilityBoundedNumber.init<A>(for:in:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v86 = a3;
  uint64_t v89 = a2;
  uint64_t v80 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  MEMORY[0x270FA5388](v9);
  CGFloat v75 = (char *)&v70 - v10;
  uint64_t v79 = type metadata accessor for ClosedRange();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  SwiftUI::FixedRoundedRect_optional v74 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v81 = (char *)&v70 - v14;
  uint64_t v78 = (void *)type metadata accessor for Optional();
  uint64_t v15 = *(v78 - 1);
  MEMORY[0x270FA5388](v78);
  id v17 = (char *)&v70 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v70 - v23;
  MEMORY[0x270FA5388](v25);
  int v27 = (char *)&v70 - v26;
  uint64_t v91 = a4;
  uint64_t v92 = a5;
  uint64_t v77 = a5;
  uint64_t v93 = a1;
  uint64_t v88 = v11;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityBoundedNumber.init<A>(for:in:by:), (uint64_t)v90, MEMORY[0x263F8E628], a4, v28, (uint64_t)v17);
  int v29 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v83 = a1;
  v29(v24, a1, a4);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a4);
  uint64_t v82 = v18;
  if (v30 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v24, a4);
    (*(void (**)(char *, void *))(v15 + 8))(v17, v78);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v17, a4);
  }
  uint64_t v31 = v89;
  uint64_t v33 = v84;
  uint64_t v32 = v85;
  unint64_t v34 = v81;
  v29(v21, (uint64_t)v27, a4);
  uint64_t v35 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    outlined destroy of AccessibilityNumeric?((uint64_t)&v95, (uint64_t (*)(void))type metadata accessor for AccessibilityNumeric?);
    uint64_t v39 = v87;
    goto LABEL_9;
  }
  uint64_t v36 = *((void *)&v96 + 1);
  uint64_t v37 = v97;
  uint64_t v81 = v27;
  __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
  int v27 = v81;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v37 + 24))(&v94, v36, v37);
  char v38 = v94;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
  uint64_t v39 = v87;
  uint64_t v78 = v38;
  if (!v38)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v86, v32);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v31, v88);
    __int16 v46 = *(void (**)(char *, uint64_t))(v82 + 8);
    v46(v27, a4);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v46)(v83, a4);
    __int16 v48 = v80;
    *uint64_t v80 = 0u;
    v48[1] = 0u;
    return result;
  }
  uint64_t v73 = v35;
  uint64_t v40 = v88;
  long long v71 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  v71(v34, v31, v88);
  uint64_t v41 = v79;
  uint64_t v42 = *(void *)(v79 - 8);
  __int16 v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v43(v34, 1, v79) == 1)
  {
    __int16 v44 = *(void (**)(char *, uint64_t))(v39 + 8);
    __int16 v45 = v78;
    v44(v34, v40);
    uint64_t v31 = v89;
    long long v72 = 0;
  }
  else
  {
    __int16 v49 = v78;
    ClosedRange<>.minimumValue.getter(v41, (uint64_t)&v95);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v41);
    uint64_t v50 = *((void *)&v96 + 1);
    if (*((void *)&v96 + 1))
    {
      uint64_t v51 = v97;
      __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v51 + 24))(&v94, v50, v51);
      long long v72 = v94;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    }
    else
    {
      outlined destroy of AccessibilityNumeric?((uint64_t)&v95, (uint64_t (*)(void))type metadata accessor for AccessibilityNumeric?);
      long long v72 = 0;
    }
    uint64_t v40 = v88;
  }
  char v52 = v75;
  BOOL v53 = v74;
  v71(v74, v31, v40);
  uint64_t v54 = v79;
  if (v43(v53, 1, v79) == 1)
  {
    uint64_t v55 = v53;
    uint64_t v56 = v87;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v55, v40);
    unsigned __int8 v57 = 0;
    uint64_t v58 = v80;
    uint64_t v60 = v84;
    uint64_t v59 = v85;
  }
  else
  {
    ClosedRange<>.maximumValue.getter(v54, (uint64_t)&v95);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v53, v54);
    uint64_t v61 = *((void *)&v96 + 1);
    if (*((void *)&v96 + 1))
    {
      uint64_t v62 = v97;
      __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v62 + 24))(&v94, v61, v62);
      unsigned __int8 v57 = v94;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    }
    else
    {
      outlined destroy of AccessibilityNumeric?((uint64_t)&v95, (uint64_t (*)(void))type metadata accessor for AccessibilityNumeric?);
      unsigned __int8 v57 = 0;
    }
    uint64_t v58 = v80;
    uint64_t v60 = v84;
    uint64_t v59 = v85;
    uint64_t v56 = v87;
  }
  uint64_t v63 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v52, v86, v59);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v52, 1, v63) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v59);
LABEL_25:
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    goto LABEL_26;
  }
  if (!swift_dynamicCast()) {
    goto LABEL_25;
  }
  uint64_t v64 = *((void *)&v96 + 1);
  if (!*((void *)&v96 + 1))
  {
LABEL_26:
    outlined destroy of AccessibilityNumeric?((uint64_t)&v95, (uint64_t (*)(void))type metadata accessor for AccessibilityNumeric?);
    uint64_t v66 = 0;
    goto LABEL_27;
  }
  uint64_t v65 = v97;
  __swift_project_boxed_opaque_existential_1(&v95, *((uint64_t *)&v96 + 1));
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v65 + 24))(&v94, v64, v65);
  uint64_t v56 = v87;
  uint64_t v66 = v94;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
LABEL_27:
  char v67 = v78;

  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v86, v59);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v31, v88);
  long long v68 = *(void (**)(char *, uint64_t))(v82 + 8);
  v68(v81, a4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v68)(v83, a4);
  long long v69 = v72;
  *uint64_t v58 = v67;
  v58[1] = v69;
  void v58[2] = v57;
  v58[3] = v66;
  return result;
}

SwiftUI::AccessibilityDisclosureValue __swiftcall AccessibilityDisclosureValue.init(_:)(SwiftUI::AccessibilityDisclosureValue result)
{
  *uint64_t v1 = result;
  return result;
}

void static AccessibilityDisclosureValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t AccessibilityDisclosureValue.value.getter()
{
  return 2;
}

uint64_t AccessibilityDisclosureValue.uiKitValue.getter()
{
  return 2;
}

uint64_t AccessibilityDisclosureValue.platformDisclosureValue.getter()
{
  return *v0;
}

uint64_t AccessibilityDisclosureValue.displayDescription.getter()
{
  return 0;
}

SwiftUI::AccessibilityDisclosureValue_optional __swiftcall AccessibilityDisclosureValue.init(rawValue:)(SwiftUI::AccessibilityDisclosureValue_optional rawValue)
{
  if (rawValue.value == SwiftUI_AccessibilityDisclosureValue_expanded) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue.value == SwiftUI_AccessibilityDisclosureValue_collapsed) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return rawValue;
}

uint64_t AccessibilityDisclosureValue.rawValue.getter()
{
  return *v0;
}

void static AccessibilityToggleValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

SwiftUI::AccessibilityToggleValue::State_optional __swiftcall AccessibilityToggleValue.State.init(rawValue:)(SwiftUI::AccessibilityToggleValue::State_optional rawValue)
{
  SwiftUI::AccessibilityToggleValue::State value = rawValue.value;
  if (rawValue.value >= SwiftUI_AccessibilityToggleValue_State_unknownDefault) {
    SwiftUI::AccessibilityToggleValue::State value = SwiftUI_AccessibilityToggleValue_State_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

uint64_t AccessibilityToggleValue.State.rawValue.getter()
{
  return *v0;
}

SwiftUI::AccessibilityToggleValue::State_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityToggleValue.State(Swift::UInt8 *a1)
{
  return AccessibilityToggleValue.State.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityToggleValue.State()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityToggleValue.State()
{
  return RawRepresentable<>.encode(to:)();
}

void AccessibilityToggleValue.state.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AccessibilityToggleValue.state.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*AccessibilityToggleValue.state.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityToggleValue __swiftcall AccessibilityToggleValue.init(_:)(SwiftUI::AccessibilityToggleValue result)
{
  if (*(unsigned char *)result.state) {
    char v2 = 2 * (*(unsigned char *)result.state != 1);
  }
  else {
    char v2 = 1;
  }
  *uint64_t v1 = v2;
  return result;
}

uint64_t AccessibilityToggleValue.uiKitValue.getter()
{
  return *v0;
}

uint64_t AccessibilityToggleValue.appKitValue.getter()
{
  return qword_2461EF658[*v0];
}

uint64_t AccessibilityToggleValue.displayDescription.getter()
{
  return *(void *)&aFalse[8 * *v0];
}

BOOL static AccessibilityToggleValue.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityToggleValue.CodingKeys()
{
  return 0x6574617473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityToggleValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityToggleValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityToggleValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityToggleValue.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityToggleValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys, (uint64_t)&unk_26FA6A6D8, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = &v10[-v6];
  char v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[31] = v8;
  lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AccessibilityToggleValue.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v12 = a2;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityToggleValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys, (uint64_t)&unk_26FA6A6D8, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v12;
    lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityToggleValue()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance AccessibilityToggleValue()
{
  return *(void *)&aFalse[8 * *v0];
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityToggleValue@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AccessibilityToggleValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityToggleValue(void *a1)
{
  return AccessibilityToggleValue.encode(to:)(a1);
}

void static AccessibilityStepperValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t (*AccessibilityStepperValue.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityStepperValue.localizedDescription.getter()
{
  id v1 = objc_msgSend(self, sel_localizedStringFromNumber_numberStyle_, *v0, 1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t AccessibilityStepperValue.displayDescription.getter()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v5 = self;
  id v6 = v3;
  id v7 = v1;
  id v8 = v2;
  id v9 = v4;
  id v10 = objc_msgSend(v5, sel_localizedStringFromNumber_numberStyle_, v7, 1);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityStepperValue.CodingKeys()
{
  return 1702060386;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityStepperValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityStepperValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityStepperValue.encode(to:)(void *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityStepperValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys, (uint64_t)&unk_26FA6C258, (void (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
}

uint64_t AccessibilityStepperValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityStepperValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys, (uint64_t)&unk_26FA6C258, (void (*)(void))lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityStepperValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityStepperValue(void *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityStepperValue()
{
  id v1 = objc_msgSend(self, sel_localizedStringFromNumber_numberStyle_, *v0, 1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance AccessibilityStepperValue()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v5 = self;
  id v6 = v3;
  id v7 = v1;
  id v8 = v2;
  id v9 = v4;
  id v10 = objc_msgSend(v5, sel_localizedStringFromNumber_numberStyle_, v7, 1);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v11;
}

void static AccessibilitySliderValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

id AccessibilityStepperValue.base.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  id v9 = *(id *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v3;
  a1[2] = v9;
  a1[3] = v4;
  id v5 = v4;
  id v6 = v2;
  id v7 = v3;

  return v9;
}

__n128 AccessibilityStepperValue.base.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[3];
  id v5 = *(void **)(v1 + 8);
  id v6 = *(void **)(v1 + 16);
  id v7 = *(void **)(v1 + 24);

  *(void *)uint64_t v1 = v3;
  __n128 result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  *(void *)(v1 + 24) = v4;
  return result;
}

uint64_t (*AccessibilitySliderValue.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityStepperValue.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v2;
  return result;
}

void *AccessibilityStepperValue.init(value:minValue:maxValue:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  a4[3] = 0;
  return result;
}

uint64_t AccessibilitySliderValue.init<A>(value:minValue:maxValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, Class *a6@<X8>)
{
  unint64_t v34 = a3;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v31[0] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v31 - v15;
  uint64_t v17 = *(void *)(a4 - 8);
  double v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  uint64_t v33 = a1;
  v22(v21, a1, a4, v19);
  v31[1] = a5;
  AccessibilityNumber.init<A>(floatingPoint:)((uint64_t)v21, a4, &v37);
  Class v32 = v37;
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v35 = a2;
  Class v24 = 0;
  if (v23(a2, 1, a4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v35, v11);
    uint64_t result = v23(v16, 1, a4);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_10;
    }
    AccessibilityNumber.init<A>(floatingPoint:)((uint64_t)v16, a4, &v36);
    Class v24 = v36;
  }
  uint64_t v26 = v34;
  if (v23(v34, 1, a4) == 1)
  {
    Class v27 = 0;
LABEL_8:
    Class v29 = v32;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, a4);
    int v30 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v30((uint64_t)v26, v11);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v35, v11);
    *a6 = v29;
    a6[1] = v24;
    a6[2] = v27;
    a6[3] = 0;
    return result;
  }
  uint64_t v28 = v31[0];
  (*(void (**)(void, char *, uint64_t))(v12 + 16))(v31[0], v26, v11);
  uint64_t result = v23((char *)v28, 1, a4);
  if (result != 1)
  {
    AccessibilityNumber.init<A>(floatingPoint:)(v28, a4, &v36);
    Class v27 = v36;
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AccessibilityNumber.init<A>(floatingPoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  id v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  isdouble a = NSNumber.init(floatLiteral:)(v11[1]).super.super.isa;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = isa;
  return result;
}

uint64_t static AccessibilityStepperValue.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  uint64_t v4 = *a2;
  uint64_t v8 = a2[3];
  uint64_t v9 = v2;
  long long v10 = *(_OWORD *)(a1 + 1);
  uint64_t v11 = v3;
  uint64_t v6 = v4;
  long long v7 = *(_OWORD *)(a2 + 1);
  return specialized static AccessibilityBoundedNumber.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v6) & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityStepperValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilitySliderValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilitySliderValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilitySliderValue.encode(to:)(void *a1)
{
  return AccessibilityStepperValue.encode(to:)(a1, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilitySliderValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys, (uint64_t)&unk_26FA6A5C8, (void (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
}

uint64_t AccessibilityStepperValue.encode(to:)(void *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(void))
{
  uint64_t v17 = a5;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, a2, a3, a4, MEMORY[0x263F8E0C0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  long long v16 = *v5;
  uint64_t v12 = *((void *)v5 + 2);
  uint64_t v15 = *((void *)v5 + 3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v18 = v16;
  uint64_t v19 = v12;
  uint64_t v20 = v15;
  lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t AccessibilitySliderValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityStepperValue.init(from:)(a1, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilitySliderValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys, (uint64_t)&unk_26FA6A5C8, (void (*)(void))lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys, a2);
}

uint64_t AccessibilityStepperValue.init(from:)@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a6;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, a2, a3, a4, MEMORY[0x263F8E040]);
  uint64_t v10 = v9;
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v6)
  {
    uint64_t v13 = v19;
    uint64_t v14 = v23;
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v10);
    uint64_t v15 = v22;
    long long v16 = v21;
    *(void *)uint64_t v14 = v20;
    *(_OWORD *)(v14 + 8) = v16;
    *(void *)(v14 + 24) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilitySliderValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilitySliderValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilitySliderValue(void *a1)
{
  return AccessibilitySliderValue.encode(to:)(a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilitySliderValue()
{
  unint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 16);
  id v4 = *(id *)(v0 + 24);
  id v5 = v2;
  id v6 = v1;
  id v7 = v3;
  uint64_t v8 = specialized AccessibilityValue<>.localizedNumericDescription.getter(v5, v1, v3);

  return v8;
}

id protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilitySliderValue@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

id protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilitySliderValue@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

id protocol witness for AccessibilityValue.step.getter in conformance AccessibilitySliderValue@<X0>(void *a1@<X8>)
{
  unint64_t v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return v2;
}

void static AccessibilityProgressValue.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t AccessibilityProgressValue.percent.getter()
{
  return *(void *)v0;
}

uint64_t AccessibilityProgressValue.percent.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityProgressValue.percent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::AccessibilityProgressValue __swiftcall AccessibilityProgressValue.init(percent:)(SwiftUI::AccessibilityProgressValue percent)
{
  *(void *)uint64_t v2 = *(void *)&percent.percent.is_nil;
  *(unsigned char *)(v2 + 8) = v1 & 1;
  return percent;
}

NSNumber AccessibilityProgressValue.value.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    double v1 = 0.0;
  }
  else {
    double v1 = *(double *)v0;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  return NSNumber.init(floatLiteral:)(v1);
}

Class AccessibilityProgressValue.minValue.getter()
{
  return AccessibilityProgressValue.minValue.getter(0);
}

Class AccessibilityProgressValue.maxValue.getter()
{
  return AccessibilityProgressValue.minValue.getter(1);
}

Class AccessibilityProgressValue.minValue.getter(Swift::Int a1)
{
  if (*(unsigned char *)(v1 + 8)) {
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  return NSNumber.init(integerLiteral:)(a1).super.super.isa;
}

uint64_t AccessibilityProgressValue.localizedDescription.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0;
  }
  else {
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(void *)v0, 0);
  }
}

uint64_t AccessibilityProgressValue.displayDescription.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0;
  }
  else {
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(void *)v0, 0);
  }
}

uint64_t static AccessibilityProgressValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityProgressValue.CodingKeys()
{
  return 0x746E6563726570;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityProgressValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityProgressValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityProgressValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityProgressValue.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_26FA6DF20, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AccessibilityProgressValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_26FA6DF20, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v15;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)uint64_t v9 = v10;
    *(unsigned char *)(v9 + 8) = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityProgressValue()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0;
  }
  else {
    return specialized AccessibilityValue<>.localizedNumericDescription.getter(*(void *)v0, 0);
  }
}

NSNumber protocol witness for AccessibilityValue.value.getter in conformance AccessibilityProgressValue@<X0>(NSNumber *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    double v3 = 0.0;
  }
  else {
    double v3 = *(double *)v1;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isdouble a = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  a1->super.super.isdouble a = result.super.super.isa;
  return result;
}

Class protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue@<X0>(Class *a1@<X8>)
{
  return protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue(0, a1);
}

Class protocol witness for AccessibilityValue.maxValue.getter in conformance AccessibilityProgressValue@<X0>(Class *a1@<X8>)
{
  return protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue(1, a1);
}

Class protocol witness for AccessibilityValue.minValue.getter in conformance AccessibilityProgressValue@<X0>(Swift::Int a1@<X2>, Class *a2@<X8>)
{
  if (*(unsigned char *)(v2 + 8))
  {
    Class result = 0;
  }
  else
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    Class result = NSNumber.init(integerLiteral:)(a1).super.super.isa;
  }
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityProgressValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityProgressValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityProgressValue(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityProgressValue.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys, (uint64_t)&unk_26FA6DF20, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityProgressValue(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 1;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if ((v2 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t static AccessibilityNumber.AccessibilityNumberArchiveError.== infix(_:_:)()
{
  return 1;
}

void AccessibilityNumber.AccessibilityNumberArchiveError.hash(into:)()
{
}

Swift::Int AccessibilityNumber.AccessibilityNumberArchiveError.hashValue.getter()
{
  return Hasher._finalize()();
}

void static AccessibilityNumber.type.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(_:)(SwiftUI::AccessibilityNumber result)
{
  v1->base.super.super.isdouble a = result.base.super.super.isa;
  return result;
}

uint64_t AccessibilityNumber.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    uint64_t v5 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    uint64_t v7 = v5;
    if (v5)
    {
      outlined consume of Data._Representation(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      *a2 = v7;
    }
    else
    {
      lazy protocol witness table accessor for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AccessibilityNumber.encode(to:)(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v10[0] = 0;
  id v3 = objc_msgSend(self, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v2, 1, v10);
  id v4 = v10[0];
  if (v3)
  {
    uint64_t v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    v10[0] = v5;
    v10[1] = v7;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
  }
  else
  {
    uint64_t v8 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance AccessibilityNumber()
{
  return specialized AccessibilityValue<>.localizedDescription.getter(*v0);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNumber@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AccessibilityNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNumber(void *a1)
{
  return AccessibilityNumber.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNumber()
{
  return static NSObject.== infix(_:_:)() & 1;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  id v3 = v1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.base = NSNumber.init(integerLiteral:)(integerLiteral);
  v3->base.super.super.isdouble a = result.base.super.super.isa;
  return result;
}

NSNumber protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance AccessibilityNumber@<X0>(Swift::Int *a1@<X0>, NSNumber *a2@<X8>)
{
  Swift::Int v3 = *a1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isdouble a = NSNumber.init(integerLiteral:)(v3).super.super.isa;
  a2->super.super.isdouble a = result.super.super.isa;
  return result;
}

SwiftUI::AccessibilityNumber __swiftcall AccessibilityNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  Swift::Int v3 = v1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.base = NSNumber.init(floatLiteral:)(floatLiteral);
  v3->base.super.super.isdouble a = result.base.super.super.isa;
  return result;
}

NSNumber protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance AccessibilityNumber@<X0>(double *a1@<X0>, NSNumber *a2@<X8>)
{
  Swift::Double v3 = *a1;
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  result.super.super.isdouble a = NSNumber.init(floatLiteral:)(v3).super.super.isa;
  a2->super.super.isdouble a = result.super.super.isa;
  return result;
}

uint64_t ProxyCodable<>.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))(*(void *)(a1 + 16));
}

uint64_t ProxyCodable<>.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))(*(void *)(a1 + 16));
}

uint64_t ProxyCodable<>.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))(*(void *)(a1 + 16));
}

uint64_t ProxyCodable<>.minValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))(*(void *)(a1 + 16));
}

uint64_t ProxyCodable<>.maxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))(*(void *)(a1 + 16));
}

uint64_t ProxyCodable<>.step.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))(*(void *)(a1 + 16));
}

uint64_t static ProxyCodable<>.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t protocol witness for AccessibilityValue.localizedDescription.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.localizedDescription.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.displayDescription.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.displayDescription.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.value.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.value.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.minValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.minValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.maxValue.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.maxValue.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for AccessibilityValue.step.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return ProxyCodable<>.step.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for static AccessibilityValue.type.getter in conformance <> ProxyCodable<A>(uint64_t a1, uint64_t a2)
{
  return static ProxyCodable<>.type.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t AnyAccessibilityValue.ConcreteBase.localizedDescription.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 32))(*(void *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.displayDescription.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 40))(*(void *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  uint64_t v5 = *(void *)(a1 + 16);
  a2[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a2);
  return v4(v5, v3);
}

uint64_t AnyAccessibilityValue.ConcreteBase.minValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v8);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(void *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.maxValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 64))(v4, v3, v8);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(void *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.step.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 72))(v4, v3, v8);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(void *)(a2 + 24) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.type.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 80))(*(void *)(a1 + 16));
}

uint64_t AnyAccessibilityValue.ConcreteBase.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  double v8 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v7, v8);
  int v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v11 ^ 1u, 1, a3);
}

uint64_t AnyAccessibilityValue.ConcreteBase.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v61 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v8;
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v66 = (char *)&v59 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v67 = v9;
  uint64_t v68 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v59 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v59 - v22;
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v72);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  int v24 = swift_dynamicCast();
  uint64_t v25 = *(void *)(a2 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v70 = v23;
  uint64_t v62 = a2;
  uint64_t v63 = v17;
  if (v24)
  {
    uint64_t v27 = v25;
    v26(v14, 0, 1, a2);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    Class v29 = v23;
    uint64_t v30 = v71;
    v28(v29, v14, v71);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, a2);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v32 = v30;
    uint64_t v23 = v70;
    v31(v70, 0, 1, v32);
  }
  else
  {
    v26(v14, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v31(v23, 1, 1, v71);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  }
  uint64_t v33 = v20;
  unint64_t v34 = v3;
  uint64_t v35 = v20;
  uint64_t v36 = v71;
  v28(v33, v34, v71);
  v31(v35, 0, 1, v36);
  uint64_t v37 = v68;
  char v38 = v66;
  uint64_t v39 = &v66[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  uint64_t v41 = v23;
  uint64_t v42 = v67;
  v40(v66, v41, v67);
  v40(v39, v35, v42);
  __int16 v43 = v38;
  uint64_t v65 = v6;
  uint64_t v44 = v6;
  __int16 v45 = v43;
  __int16 v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v46(v43, 1, v36) != 1)
  {
    uint64_t v60 = v35;
    uint64_t v50 = v63;
    v40(v63, v45, v42);
    if (v46(v39, 1, v71) != 1)
    {
      uint64_t v52 = v65;
      BOOL v53 = v45;
      uint64_t v54 = v61;
      uint64_t v55 = v71;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v61, v39, v71);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v54, v55);
      unsigned __int8 v57 = *(void (**)(char *, uint64_t))(v68 + 8);
      v57(v60, v42);
      v57(v70, v42);
      v56(v50, v55);
      v57(v53, v42);
      return v49 & 1;
    }
    __int16 v47 = v45;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v68 + 8);
    v51(v60, v42);
    v51(v70, v42);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v71);
    goto LABEL_9;
  }
  __int16 v47 = v45;
  __int16 v48 = *(void (**)(char *, uint64_t))(v37 + 8);
  v48(v35, v42);
  v48(v70, v42);
  if (v46(v39, 1, v71) != 1)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v47, TupleTypeMetadata2);
    char v49 = 0;
    return v49 & 1;
  }
  v48(v47, v42);
  char v49 = 1;
  return v49 & 1;
}

uint64_t static AnyAccessibilityValue.ConcreteBase.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t AnyAccessibilityValue.ConcreteBase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t AnyAccessibilityValue.ConcreteBase.encode(to:)(void *a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v3;
  _OWORD v9[2] = v9[0];
  v9[3] = v3;
  type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue.CodingKeys and conformance AccessibilityEmptyValue.CodingKeys);
  }
  return result;
}

uint64_t AnyAccessibilityValue.ConcreteBase.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a6;
  uint64_t v30 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v31 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  uint64_t v36 = v15;
  type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys();
  swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v28 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v29 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v18 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
  uint64_t v26 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v25 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v21 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v21)
  {
    uint64_t v37 = v18;
    uint64_t v22 = v28;
    uint64_t v23 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v32);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v31, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v20, v37);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AnyAccessibilityValue.ConcreteBase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyAccessibilityValue.ConcreteBase<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.as<A>(_:) in conformance AnyAccessibilityValue.ConcreteBase<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return AnyAccessibilityValue.ConcreteBase.as<A>(_:)(a1, a3, a2, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyAccessibilityValue.ConcreteBase<A>()
{
  return static AnyAccessibilityValue.ConcreteBase.== infix(_:_:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValue.ConcreteBase<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return AnyAccessibilityValue.ConcreteBase.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValue.ConcreteBase<A>(void *a1, uint64_t a2)
{
  return AnyAccessibilityValue.ConcreteBase.encode(to:)(a1, a2);
}

uint64_t AnyAccessibilityValue.displayDescription.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AnyAccessibilityValue.value.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AnyAccessibilityValue.minValue.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t AnyAccessibilityValue.maxValue.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t AnyAccessibilityValue.step.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t AnyAccessibilityValue.type.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t AnyAccessibilityValue.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v4[3];
  uint64_t v8 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a2, a2, a3, v7, v8);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.localizedDescription.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.displayDescription.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.value.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.minValue.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.maxValue.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.step.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.type.getter in conformance AnyAccessibilityValue()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t protocol witness for AbstractAnyAccessibilityValue.isEqual(to:) in conformance AnyAccessibilityValue(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);

  return specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v4, v1, v2, v3);
}

uint64_t AccessibilityValueStorage.value.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyAccessibilityValue?(v1, a1);
}

uint64_t AccessibilityValueStorage.description.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  v20[2] = a6;
  _OWORD v20[3] = a7;
  v20[4] = a8;
  uint64_t v15 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AccessibilityValueStorage.init<A>(_:description:), (uint64_t)v20, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnyAccessibilityValue, v16, (uint64_t)v24);
  *(void *)&long long v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)v24, (uint64_t)&v21);
  if (a5)
  {
    type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
    *(void *)(v17 + 32) = a2;
    *(void *)(v17 + 40) = a3;
    *(unsigned char *)(v17 + 48) = a4 & 1;
    *(void *)(v17 + 56) = a5;
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  _sypSgWOhTm_12((uint64_t)v24, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *((void *)&v23 + 1) = v17;
  long long v18 = v22;
  *a9 = v21;
  a9[1] = v18;
  a9[2] = v23;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
}

uint64_t closure #1 in AccessibilityValueStorage.init<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ProxyCodable();
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a2, v12);
  ProxyCodable.init(_:)((uint64_t)v10, a2, (uint64_t)v14);
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v16[3] = a3;
  swift_getWitnessTable();
  return AnyAccessibilityValue.init<A>(_:)((uint64_t)v14, v11, a4);
}

double AccessibilityValueStorage.init(descriptions:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  _sypSgWOhTm_12(a2, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = a1;
  return result;
}

uint64_t AccessibilityValueStorage.valueDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v9);
    uint64_t v3 = v10;
    if (v10)
    {
      uint64_t v4 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
      uint64_t v7 = v6;
      outlined destroy of AnyAccessibilityValue((uint64_t)v9);
      uint64_t v1 = MEMORY[0x263F8EE78];
      if (v7)
      {
        type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_2461B9DC0;
        *(void *)(v8 + 32) = v5;
        *(void *)(v8 + 40) = v7;
        *(unsigned char *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = v1;
        return v8;
      }
    }
    else
    {
      _sypSgWOhTm_12((uint64_t)v9, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      return MEMORY[0x263F8EE78];
    }
  }
  return v1;
}

uint64_t AccessibilityValueStorage.valueDescription.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

void (*AccessibilityValueStorage.valueDescription.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 5;
  v3[6] = v1;
  uint64_t v5 = *(void *)(v1 + 40);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = v3;
    outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v3);
    uint64_t v8 = v7[3];
    if (v8)
    {
      uint64_t v9 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v7[3]);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
      uint64_t v12 = v11;
      outlined destroy of AnyAccessibilityValue((uint64_t)v7);
      uint64_t v5 = MEMORY[0x263F8EE78];
      if (v12)
      {
        type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_2461B9DC0;
        *(void *)(v13 + 32) = v10;
        *(void *)(v13 + 40) = v12;
        *(unsigned char *)(v13 + 48) = 0;
        *(void *)(v13 + 56) = v5;
        uint64_t v5 = v13;
      }
    }
    else
    {
      _sypSgWOhTm_12((uint64_t)v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      uint64_t v5 = MEMORY[0x263F8EE78];
    }
  }
  *uint64_t v4 = v5;
  return AccessibilityValueStorage.valueDescription.modify;
}

void AccessibilityValueStorage.valueDescription.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 48);
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 40) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 40) = v3;
  }

  free(v2);
}

double AccessibilityValueStorage.platformMinValue.getter@<D0>(_OWORD *a1@<X8>)
{
  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v6);
  uint64_t v3 = v7;
  if (v7)
  {
    uint64_t v4 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    outlined destroy of AnyAccessibilityValue((uint64_t)v6);
  }
  else
  {
    _sypSgWOhTm_12((uint64_t)v6, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double AccessibilityValueStorage.platformMaxValue.getter@<D0>(_OWORD *a1@<X8>)
{
  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)v6);
  uint64_t v3 = v7;
  if (v7)
  {
    uint64_t v4 = v8;
    __swift_project_boxed_opaque_existential_1(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
    outlined destroy of AnyAccessibilityValue((uint64_t)v6);
  }
  else
  {
    _sypSgWOhTm_12((uint64_t)v6, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t AccessibilityValueStorage.platformNumberValue.getter()
{
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v4);
  uint64_t v1 = v5;
  if (v5)
  {
    uint64_t v2 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 40))(v7, v1, v2);
    outlined destroy of AnyAccessibilityValue((uint64_t)v4);
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast()) {
      return v4[0];
    }
    else {
      return 0;
    }
  }
  else
  {
    _sypSgWOhTm_12((uint64_t)v4, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    return 0;
  }
}

uint64_t AccessibilityValueStorage.isBounded.getter()
{
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v12);
  uint64_t v1 = v13;
  if (v13)
  {
    uint64_t v2 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 48))(&v7, v1, v2);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
    if (*((void *)&v8 + 1))
    {
      _sypSgWOhTm_12((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v12);
      outlined destroy of AccessibilityValueStorage((uint64_t)v12);
      return 1;
    }
  }
  else
  {
    _sypSgWOhTm_12((uint64_t)v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v7 = 0u;
    long long v8 = 0u;
  }
  uint64_t v4 = MEMORY[0x263F8EE58];
  _sypSgWOhTm_12((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v12);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v12, (uint64_t)&v7);
  uint64_t v3 = *((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v5 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 56))(&v10, v3, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v7);
    uint64_t v3 = *((void *)&v11 + 1) != 0;
  }
  else
  {
    _sypSgWOhTm_12((uint64_t)&v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v10 = 0u;
    long long v11 = 0u;
  }
  outlined destroy of AccessibilityValueStorage((uint64_t)v12);
  _sypSgWOhTm_12((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v4 + 8);
  return v3;
}

uint64_t AccessibilityValueStorage.hasAllowedValues.getter()
{
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v18);
  uint64_t v1 = v19;
  if (!v19)
  {
    _sypSgWOhTm_12((uint64_t)v18, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_9;
  }
  uint64_t v2 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 64))(&v15, v1, v2);
  outlined destroy of AnyAccessibilityValue((uint64_t)v18);
  if (!*((void *)&v16 + 1))
  {
LABEL_9:
    _sypSgWOhTm_12((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v18);
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    goto LABEL_12;
  }
  uint64_t v3 = MEMORY[0x263F8EE58];
  _sypSgWOhTm_12((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)v18);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v18, (uint64_t)&v15);
  uint64_t v4 = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    uint64_t v5 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 48))(&v10, v4, v5);
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    outlined destroy of AnyAccessibilityValue((uint64_t)&v15);
    if (*((void *)&v11 + 1))
    {
      _sypSgWOhTm_12((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
      outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)&v15);
      outlined init with copy of AnyAccessibilityValue?((uint64_t)&v15, (uint64_t)&v10);
      uint64_t v6 = *((void *)&v11 + 1);
      if (*((void *)&v11 + 1))
      {
        uint64_t v7 = v12;
        __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v7 + 56))(&v13, v6, v7);
        outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
        outlined destroy of AnyAccessibilityValue((uint64_t)&v10);
        if (*((void *)&v14 + 1))
        {
          uint64_t v8 = 1;
LABEL_16:
          _sypSgWOhTm_12((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
          return v8;
        }
      }
      else
      {
        outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
        _sypSgWOhTm_12((uint64_t)&v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
        long long v13 = 0u;
        long long v14 = 0u;
      }
      uint64_t v8 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    _sypSgWOhTm_12((uint64_t)&v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v10 = 0u;
    long long v11 = 0u;
  }
  _sypSgWOhTm_12((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
LABEL_12:
  outlined init with copy of AccessibilityValueStorage(v0, (uint64_t)&v15);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v15);
  return 0;
}

uint64_t AccessibilityValueStorage.platformAllowedValues.getter()
{
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  uint64_t v1 = v35;
  if (!(void)v35)
  {
    _sypSgWOhTm_12((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_13;
  }
  uint64_t v2 = *((void *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 64))(&v31, v1, v2);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((void *)&v32 + 1))
  {
LABEL_13:
    uint64_t v24 = MEMORY[0x263F8EE58] + 8;
LABEL_14:
    _sypSgWOhTm_12((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v24);
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  uint64_t v3 = MEMORY[0x263F8EE58];
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void **)v33;
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  uint64_t v5 = v35;
  if (!(void)v35)
  {
    _sypSgWOhTm_12((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_21;
  }
  uint64_t v6 = *((void *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 48))(&v31, v5, v6);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((void *)&v32 + 1))
  {
LABEL_21:

    uint64_t v24 = v3 + 8;
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  uint64_t v7 = *(void **)v33;
  outlined init with copy of AnyAccessibilityValue?(v0, (uint64_t)v33);
  uint64_t v8 = v35;
  if (!(void)v35)
  {
    _sypSgWOhTm_12((uint64_t)v33, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_20;
  }
  uint64_t v9 = *((void *)&v35 + 1);
  __swift_project_boxed_opaque_existential_1(v33, v35);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v9 + 56))(&v31, v8, v9);
  outlined destroy of AnyAccessibilityValue((uint64_t)v33);
  if (!*((void *)&v32 + 1))
  {
LABEL_20:

    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  long long v10 = *(void **)v33;
  objc_msgSend(v7, sel_decimalValue);
  int v27 = *(_DWORD *)v33;
  long long v28 = *(_OWORD *)&v33[4];
  uint64_t v29 = v10;
  objc_msgSend(v10, sel_decimalValue);
  int v25 = *(_DWORD *)v33;
  long long v26 = *(_OWORD *)&v33[4];
  objc_msgSend(v4, sel_decimalValue);
  uint64_t v11 = *(unsigned int *)v33;
  uint64_t v12 = *(unsigned __int16 *)&v33[4];
  uint64_t v30 = *(unsigned __int16 *)&v33[6];
  uint64_t v13 = *(unsigned __int16 *)&v33[8];
  uint64_t v14 = *(unsigned __int16 *)&v33[10];
  uint64_t v15 = *(unsigned __int16 *)&v33[12];
  uint64_t v16 = *(unsigned __int16 *)&v33[14];
  int v17 = *(unsigned __int16 *)&v33[16];
  int v18 = *(unsigned __int16 *)&v33[18];
  NSDecimal.init(integerLiteral:)((NSDecimal *)*(unsigned __int16 *)&v33[6], 0);
  uint64_t result = MEMORY[0x24C523730](v11 | (v12 << 32) | (v30 << 48), v13 | (v14 << 16) | (v15 << 32) | (v16 << 48), v17 | (v18 << 16), v19, v20, v21);
  if ((result & 1) == 0)
  {
    *(_DWORD *)uint64_t v33 = v27;
    *(_OWORD *)&v33[4] = v28;
    int v34 = v25;
    long long v35 = v26;
    int v36 = v11;
    __int16 v37 = v12;
    __int16 v38 = v30;
    __int16 v39 = v13;
    __int16 v40 = v14;
    __int16 v41 = v15;
    __int16 v42 = v16;
    __int16 v43 = v17;
    __int16 v44 = v18;
    uint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs13StrideThroughVySo9NSDecimalaG_So8NSNumberCs5NeverOTg5067_s7SwiftUI25AccessibilityValueStorageV21platformAllowedValuesSaySo8G26CGSgvgAFSo9NSDecimalaXEfU_Tf1cn_n((unsigned int *)v33);

    return v23;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityValueStorage.merge(with:)(uint64_t a1)
{
  outlined init with copy of AnyAccessibilityValue?(v1, (uint64_t)&v10);
  uint64_t v3 = *((void *)&v11 + 1);
  _sypSgWOhTm_12((uint64_t)&v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  if (v3) {
    goto LABEL_2;
  }
  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)&v7);
  if (!*((void *)&v8 + 1))
  {
    _sypSgWOhTm_12((uint64_t)&v7, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
LABEL_2:
    uint64_t result = 0;
    goto LABEL_5;
  }
  long long v10 = v7;
  long long v11 = v8;
  uint64_t v12 = v9;
  _sypSgWOhTm_12(v1, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  long long v5 = v11;
  *(_OWORD *)uint64_t v1 = v10;
  *(_OWORD *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v12;
  uint64_t result = 1;
LABEL_5:
  if (!*(void *)(*(void *)(v1 + 40) + 16))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v1 + 40) = v6;
      return 1;
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityDisclosureValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityDisclosureValue()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyAccessibilityValue.Keys()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyAccessibilityValue.Keys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AnyCodable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyAccessibilityValue.Keys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyAccessibilityValue.Keys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AnyAccessibilityValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AnyAccessibilityValue.Keys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys, (uint64_t)&unk_26FA63580, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = a1[3];
  long long v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v34 = 0;
    lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    switch((char)v29)
    {
      case 1:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<Double>();
        char v34 = 1;
        uint64_t v30 = v14;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<Double>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Double> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<Double>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Double> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 2:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<Bool>();
        char v34 = 1;
        uint64_t v30 = v15;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<Bool>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Bool> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<Bool>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Bool> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 3:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>();
        char v34 = 1;
        uint64_t v30 = v16;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 4:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>();
        char v34 = 1;
        uint64_t v30 = v17;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 5:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>();
        char v34 = 1;
        uint64_t v30 = v18;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 6:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>();
        char v34 = 1;
        uint64_t v30 = v19;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>);
        *(void *)&long long v29 = swift_allocObject();
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 7:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>();
        char v34 = 1;
        uint64_t v30 = v20;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>);
        *(void *)&long long v29 = swift_allocObject();
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 8:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>();
        char v34 = 1;
        uint64_t v30 = v24;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 9:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>();
        char v34 = 1;
        uint64_t v30 = v21;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>);
        *(void *)&long long v29 = swift_allocObject();
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 10:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>();
        char v34 = 1;
        uint64_t v30 = v22;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      case 11:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>();
        char v34 = 1;
        uint64_t v30 = v23;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
      default:
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<Int>();
        char v34 = 1;
        uint64_t v30 = v11;
        uint64_t v12 = type metadata accessor for AnyAccessibilityValue.ConcreteBase<Int>;
        uint64_t v31 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Int> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<Int>);
        uint64_t v13 = (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<Int> and conformance AnyAccessibilityValue.ConcreteBase<A>;
        break;
    }
    lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(v13, (void (*)(uint64_t))v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    outlined init with take of ScrollStateRequest(&v29, (uint64_t)v32);
    long long v25 = v32[1];
    *(_OWORD *)a2 = v32[0];
    *(_OWORD *)(a2 + 16) = v25;
    *(void *)(a2 + 32) = v33;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t AnyAccessibilityValue.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AnyAccessibilityValue.Keys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys, (uint64_t)&unk_26FA63580, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14[-1] - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v10);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 72))(v14, v10, v11);
  char v15 = 0;
  lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v3, v3[3]);
    char v15 = 1;
    KeyedEncodingContainer.superEncoder(forKey:)();
    dispatch thunk of Encodable.encode(to:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyAccessibilityValue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AnyAccessibilityValue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyAccessibilityValue(void *a1)
{
  return AnyAccessibilityValue.encode(to:)(a1);
}

uint64_t CodableAccessibilityValueStorage.init(_:in:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  uint64_t v8 = a4 + 24;
  *(void *)(a4 + 56) = 0;
  *(void *)&v13[0] = v6;
  *((void *)&v13[0] + 1) = v7;
  long long v14 = *a3;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(v9, v13, 1, 1, 0, 0, &v14, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v10) {
    __int16 v11 = 1;
  }
  else {
    __int16 v11 = 255;
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = v11;
  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)v13);
  outlined destroy of AccessibilityValueStorage(a1);
  return outlined assign with take of AnyAccessibilityValue?((uint64_t)v13, v8);
}

uint64_t CodableAccessibilityValueStorage.accessibilityValue.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of AnyAccessibilityValue?(v1 + 24, (uint64_t)v9);
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  __int16 v5 = *(_WORD *)(v1 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    outlined copy of AccessibilityText?(v4, v3, 255);
    outlined assign with copy of AnyAccessibilityValue?((uint64_t)v9, a1);
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  else
  {
    type metadata accessor for AccessibilityTextStorage();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v4;
    *(void *)(v7 + 24) = v3;
    *(unsigned char *)(v7 + 32) = v5 & 1;
    *(unsigned char *)(v7 + 33) = HIBYTE(v5) & 1;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
    outlined copy of AccessibilityText?(v4, v3, v5);
    outlined assign with copy of AnyAccessibilityValue?((uint64_t)v9, a1);
    type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = 0;
    *(unsigned char *)(v6 + 48) = 1;
    *(void *)(v6 + 56) = MEMORY[0x263F8EE78];
  }
  uint64_t result = _sypSgWOhTm_12((uint64_t)v9, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  *(void *)(a1 + 40) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityValueStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityValueStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CodableAccessibilityValueStorage.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityValueStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys, (uint64_t)&unk_26FA73290, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int16 v10 = *((_WORD *)v3 + 8);
  long long v12 = *v3;
  __int16 v13 = v10;
  char v14 = 0;
  lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t CodableAccessibilityValueStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityValueStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys, (uint64_t)&unk_26FA73290, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  long long v15 = 0uLL;
  __int16 v16 = 255;
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v12;
    char v19 = 0;
    lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v15 = v13;
    __int16 v16 = v14;
    char v19 = 1;
    lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined assign with take of AnyAccessibilityValue?((uint64_t)&v13, (uint64_t)v17);
    outlined init with copy of CodableAccessibilityValueStorage((uint64_t *)&v15, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of CodableAccessibilityValueStorage((uint64_t)&v15);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityValueStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityValueStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityValueStorage(void *a1)
{
  return CodableAccessibilityValueStorage.encode(to:)(a1);
}

uint64_t specialized AnyAccessibilityValue.isEqual(to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v18[3] = a3;
  void v18[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of AnyTrackedValue((uint64_t)v18, (uint64_t)v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  if (swift_dynamicCast())
  {
    v16[0] = v12;
    v16[1] = v13;
    uint64_t v17 = v14;
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v8);
    char v10 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v9 + 88))(v16, v8, v9);
    outlined destroy of AnyAccessibilityValue((uint64_t)v16);
  }
  else
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    _sypSgWOhTm_12((uint64_t)&v12, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    char v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v10 & 1;
}

void specialized StrideThrough.underestimatedCount.getter()
{
  uint64_t v1 = 0;
  char v24 = 0;
  uint64_t v2 = *v0;
  uint64_t v3 = *((unsigned __int16 *)v0 + 2);
  unint64_t v4 = *((unsigned __int16 *)v0 + 3);
  uint64_t v5 = *((unsigned __int16 *)v0 + 4);
  uint64_t v6 = *((unsigned __int16 *)v0 + 5);
  uint64_t v7 = *((unsigned __int16 *)v0 + 6);
  unint64_t v8 = *((unsigned __int16 *)v0 + 7);
  unsigned int v32 = *((unsigned __int16 *)v0 + 9);
  int v33 = *((unsigned __int16 *)v0 + 8);
  char v34 = (NSDecimal *)*((void *)v0 + 5);
  uint64_t v26 = *(void *)(v0 + 7);
  uint64_t v27 = *(void *)(v0 + 5);
  uint64_t v9 = v0[9];
  unsigned int v25 = v0[9];
  do
  {
    NSDecimal.init(integerLiteral:)((NSDecimal *)v9, 0);
    char v14 = static NSDecimal.< infix(_:_:)();
    uint64_t v30 = v3;
    uint64_t v31 = v2;
    uint64_t v15 = v2 | (v3 << 32);
    unint64_t v16 = v4;
    uint64_t v17 = v15 | (v4 << 48);
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    uint64_t v18 = v7;
    uint64_t v19 = v5 | (v6 << 16) | (v7 << 32) | (v8 << 48);
    if (v14)
    {
      uint64_t v21 = v26;
      uint64_t v20 = v27;
      uint64_t v22 = v25;
      if (static NSDecimal.< infix(_:_:)()) {
        goto LABEL_2;
      }
    }
    else
    {
      uint64_t v21 = v26;
      uint64_t v20 = v27;
      uint64_t v22 = v25;
      if (static NSDecimal.< infix(_:_:)())
      {
LABEL_2:
        NSDecimal.advanced(by:)(v23, v34);
        uint64_t v3 = WORD2(v10);
        unint64_t v4 = HIWORD(v10);
        uint64_t v6 = WORD1(v11);
        uint64_t v7 = WORD2(v11);
        uint64_t v2 = v10;
        uint64_t v5 = (unsigned __int16)v11;
        unint64_t v8 = HIWORD(v11);
        uint64_t v9 = HIWORD(v12);
        unsigned int v32 = HIWORD(v12);
        int v33 = (unsigned __int16)v12;
        continue;
      }
    }
    if (v24 & 1 | ((MEMORY[0x24C523730](v17, v19, v33 | (v32 << 16), v20, v21, v22) & 1) == 0)) {
      return;
    }
    uint64_t v9 = 1;
    char v24 = 1;
    unint64_t v4 = v16;
    uint64_t v3 = v30;
    uint64_t v2 = v31;
    uint64_t v6 = v28;
    uint64_t v5 = v29;
    uint64_t v7 = v18;
  }
  while (!__OFADD__(v1++, 1));
  __break(1u);
}

uint64_t specialized static AccessibilityBoundedNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  unint64_t v4 = *(void **)(a1 + 24);
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v9 = *(void **)(a2 + 16);
  unint64_t v8 = *(void **)(a2 + 24);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v10 = v2;
  id v11 = v6;
  char v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) == 0) {
    goto LABEL_10;
  }
  if (v3)
  {
    if (!v7)
    {
      id v20 = v3;
LABEL_20:
      id v22 = v20;
      goto LABEL_21;
    }
    id v13 = v3;
    id v14 = v7;
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (v7)
  {
    goto LABEL_18;
  }
  if (!v5)
  {
    if (v9) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  if (!v9)
  {
    id v20 = v5;
    goto LABEL_20;
  }
  id v16 = v5;
  id v17 = v9;
  char v18 = static NSObject.== infix(_:_:)();

  if (v18)
  {
LABEL_13:
    if (v4)
    {
      if (v8)
      {
        id v21 = v4;
        id v22 = v8;
        char v19 = static NSObject.== infix(_:_:)();

LABEL_22:
        return v19 & 1;
      }
      id v20 = v4;
      goto LABEL_20;
    }
    if (!v8)
    {
      char v19 = 1;
      return v19 & 1;
    }
LABEL_18:
    id v22 = 0;
LABEL_21:
    char v19 = 0;
    goto LABEL_22;
  }
LABEL_10:
  char v19 = 0;
  return v19 & 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber.CodingKeys and conformance AccessibilityBoundedNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber and conformance AccessibilityNumber);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityBoundedNumber.init<A>(for:in:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Comparable.clamped(to:)(a1, *(void *)(v2 + 16), a2);
}

void type metadata accessor for AccessibilityNumeric?()
{
  if (!lazy cache variable for type metadata for AccessibilityNumeric?)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.CodingKeys and conformance AccessibilityToggleValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State;
  if (!lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityToggleValue.State and conformance AccessibilityToggleValue.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue.CodingKeys and conformance AccessibilityStepperValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber;
  if (!lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue.CodingKeys and conformance AccessibilitySliderValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue.CodingKeys and conformance AccessibilityProgressValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError;
  if (!lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNumber.AccessibilityNumberArchiveError and conformance AccessibilityNumber.AccessibilityNumberArchiveError);
  }
  return result;
}

uint64_t specialized static AccessibilityValueStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AnyAccessibilityValue?(a1, (uint64_t)v16);
  outlined init with copy of AnyAccessibilityValue?(a2, (uint64_t)v15);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v16, (uint64_t)v10);
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v15, (uint64_t)&v12);
  if (!v11)
  {
    _sypSgWOhTm_12((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    _sypSgWOhTm_12((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    if (!*((void *)&v13 + 1))
    {
      _sypSgWOhTm_12((uint64_t)v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
      goto LABEL_7;
    }
LABEL_9:
    outlined destroy of AccessibilityNumeric?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (AnyAccessibilityValue?, AnyAccessibilityValue?));
LABEL_10:
    char v5 = 0;
    return v5 & 1;
  }
  outlined init with copy of AnyAccessibilityValue?((uint64_t)v10, (uint64_t)v9);
  if (!*((void *)&v13 + 1))
  {
    _sypSgWOhTm_12((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    _sypSgWOhTm_12((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    outlined destroy of AnyAccessibilityValue((uint64_t)v9);
    goto LABEL_9;
  }
  v7[0] = v12;
  v7[1] = v13;
  uint64_t v8 = v14;
  char v4 = specialized AnyAccessibilityValue.isEqual(to:)((uint64_t)v7, v9);
  outlined destroy of AnyAccessibilityValue((uint64_t)v7);
  _sypSgWOhTm_12((uint64_t)v15, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  _sypSgWOhTm_12((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  outlined destroy of AnyAccessibilityValue((uint64_t)v9);
  _sypSgWOhTm_12((uint64_t)v10, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_7:
  char v5 = specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 40), *(void *)(a2 + 40));
  return v5 & 1;
}

uint64_t specialized static AnyAccessibilityValue.== infix(_:_:)(void *a1, uint64_t a2)
{
  _OWORD v14[3] = &type metadata for AnyAccessibilityValue;
  v14[4] = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  v14[0] = swift_allocObject();
  outlined init with copy of AnyAccessibilityValue(a2, v14[0] + 16);
  outlined init with copy of AnyTrackedValue((uint64_t)v14, (uint64_t)v11);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AbstractAnyAccessibilityValue);
  if (swift_dynamicCast())
  {
    v12[0] = v8;
    v12[1] = v9;
    uint64_t v13 = v10;
    uint64_t v4 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v4);
    char v6 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v5 + 88))(v12, v4, v5);
    outlined destroy of AnyAccessibilityValue((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    _sypSgWOhTm_12((uint64_t)&v8, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    char v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v6 & 1;
}

uint64_t outlined init with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityValueStorage(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValue.Keys and conformance AnyAccessibilityValue.Keys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType;
  if (!lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyAccessibilityValueType and conformance AnyAccessibilityValueType);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>)
  {
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue;
  if (!lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>)
  {
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>)
  {
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>)
  {
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityProgressValue>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>)
  {
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilitySliderValue>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderValue and conformance AccessibilitySliderValue);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>)
  {
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityStepperValue>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>)
  {
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityToggleValue>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>)
  {
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<AccessibilityDisclosureValue>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<String>)
  {
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<String>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<Bool>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Bool>)
  {
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Bool>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<Double>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Double>)
  {
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Double>);
    }
  }
}

void type metadata accessor for AnyAccessibilityValue.ConcreteBase<Int>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Int>)
  {
    unint64_t v0 = type metadata accessor for AnyAccessibilityValue.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityValue.ConcreteBase<Int>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<AccessibilityEmptyValue> and conformance AnyAccessibilityValue.ConcreteBase<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityValue?(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage.CodingKeys and conformance CodableAccessibilityValueStorage.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityEmptyValue.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined destroy of CodableAccessibilityValueStorage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CodableAccessibilityValueStorage(uint64_t *a1, uint64_t a2)
{
  return a2;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Int()
{
  return &protocol witness table for Int;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Double()
{
  return &protocol witness table for Double;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in Bool()
{
  return &protocol witness table for Bool;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in String()
{
  return &protocol witness table for String;
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityEmptyValue()
{
  return lazy protocol witness table accessor for type Never? and conformance <A> A?(&lazy protocol witness table cache variable for type Never? and conformance <A> A?, &lazy cache variable for type metadata for Never?, MEMORY[0x263F8E628]);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityEmptyValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityBoundedNumber()
{
  return &protocol witness table for NSNumber;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityBoundedNumber(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityBoundedNumber and conformance AccessibilityBoundedNumber();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in AccessibilityDisclosureValue()
{
  return lazy protocol witness table accessor for type Never? and conformance <A> A?(&lazy protocol witness table cache variable for type Bool? and conformance <A> A?, &lazy cache variable for type metadata for Bool?, MEMORY[0x263F8D4F8]);
}

uint64_t lazy protocol witness table accessor for type Never? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnyAccessibilityValue?(255, a2, a3, MEMORY[0x263F8D8F0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityDisclosureValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityStepperValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilitySliderValue(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AccessibilitySliderValue and conformance AccessibilitySliderValue();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityNumber(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityNumber and conformance AccessibilityNumber();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in AccessibilityNumber()
{
  return MEMORY[0x263F8D748];
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in AccessibilityNumber()
{
  return MEMORY[0x263F8D5B0];
}

uint64_t associated type witness table accessor for AccessibilityValue.PlatformValue : AccessibilityPlatformSafe in <> ProxyCodable<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ProxyCodable<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnyAccessibilityValue(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  unint64_t result = lazy protocol witness table accessor for type AnyAccessibilityValue and conformance AnyAccessibilityValue();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_245E961C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AccessibilityValueStorage.valueDescription.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245E961F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnyAccessibilityValueType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E96304);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyAccessibilityValueType()
{
  return &type metadata for AnyAccessibilityValueType;
}

uint64_t dispatch thunk of AccessibilityValue.localizedDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AccessibilityValue.displayDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AccessibilityValue.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AccessibilityValue.minValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AccessibilityValue.maxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AccessibilityValue.step.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of static AccessibilityValue.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AccessibilityValueByProxy.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for AccessibilityEmptyValue()
{
  return &type metadata for AccessibilityEmptyValue;
}

ValueMetadata *type metadata accessor for AccessibilityBoundedNumber()
{
  return &type metadata for AccessibilityBoundedNumber;
}

ValueMetadata *type metadata accessor for AccessibilityDisclosureValue()
{
  return &type metadata for AccessibilityDisclosureValue;
}

ValueMetadata *type metadata accessor for AccessibilityToggleValue()
{
  return &type metadata for AccessibilityToggleValue;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityToggleValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E964FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityToggleValue.State()
{
  return &type metadata for AccessibilityToggleValue.State;
}

ValueMetadata *type metadata accessor for AccessibilityStepperValue()
{
  return &type metadata for AccessibilityStepperValue;
}

void destroy for AccessibilitySliderValue(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for AccessibilityBoundedNumber(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for AccessibilityBoundedNumber(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  uint64_t v13 = *(void **)(a1 + 24);
  uint64_t v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  return a1;
}

uint64_t assignWithTake for AccessibilityBoundedNumber(uint64_t a1, _OWORD *a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for AccessibilitySliderValue()
{
  return &type metadata for AccessibilitySliderValue;
}

ValueMetadata *type metadata accessor for AccessibilityProgressValue()
{
  return &type metadata for AccessibilityProgressValue;
}

ValueMetadata *type metadata accessor for AccessibilityNumber()
{
  return &type metadata for AccessibilityNumber;
}

ValueMetadata *type metadata accessor for AccessibilityNumber.AccessibilityNumberArchiveError()
{
  return &type metadata for AccessibilityNumber.AccessibilityNumberArchiveError;
}

ValueMetadata *type metadata accessor for AnyAccessibilityValue()
{
  return &type metadata for AnyAccessibilityValue;
}

uint64_t assignWithCopy for AccessibilityValueStorage(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of AnyAccessibilityValue(a1);
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else {
      outlined destroy of AnyAccessibilityValue(a1);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void destroy for CodableAccessibilityValueStorage(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 0xFF) {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16) & 1);
  }
  if (*(void *)(a1 + 48))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
}

uint64_t initializeWithCopy for CodableAccessibilityValueStorage(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (*((unsigned char *)a2 + 16) == 0xFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    unsigned int v5 = v4 >> 8;
    char v6 = v4 & 1;
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v8, v4 & 1);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 17) = v5;
  }
  id v9 = (_OWORD *)(a1 + 24);
  id v10 = a2 + 3;
  uint64_t v11 = a2[6];
  if (v11)
  {
    uint64_t v12 = a2[7];
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 5);
    *id v9 = *v10;
    *(_OWORD *)(a1 + 40) = v13;
    *(void *)(a1 + 56) = a2[7];
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityValueStorage(uint64_t a1, uint64_t *a2)
{
  __int16 v4 = *((_WORD *)a2 + 8);
  if (*(unsigned __int8 *)(a1 + 16) != 0xFF)
  {
    if (v4 == 255)
    {
      outlined destroy of AccessibilityText(a1);
      __int16 v6 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v6;
      goto LABEL_9;
    }
    char v10 = v4 & 1;
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v12, v4 & 1);
    long long v13 = *(void **)a1;
    uint64_t v14 = *(void *)(a1 + 8);
    char v15 = *(unsigned char *)(a1 + 16);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v10;
    outlined consume of AccessibilityText.Storage(v13, v14, v15);
  }
  else
  {
    if (v4 == 255)
    {
      long long v5 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = v5;
      goto LABEL_9;
    }
    char v7 = v4 & 1;
    uint64_t v8 = (void *)*a2;
    uint64_t v9 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v9, v4 & 1);
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
  }
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
LABEL_9:
  id v16 = (_OWORD *)(a1 + 24);
  id v17 = a2 + 3;
  uint64_t v18 = a2[6];
  if (*(void *)(a1 + 48))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), a2 + 3);
    }
    else
    {
      outlined destroy of AnyAccessibilityValue(a1 + 24);
      uint64_t v19 = a2[7];
      long long v20 = *(_OWORD *)(a2 + 5);
      _OWORD *v16 = *v17;
      *(_OWORD *)(a1 + 40) = v20;
      *(void *)(a1 + 56) = v19;
    }
  }
  else if (v18)
  {
    *(void *)(a1 + 48) = v18;
    *(void *)(a1 + 56) = a2[7];
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 24, (uint64_t)(a2 + 3));
  }
  else
  {
    long long v21 = *v17;
    long long v22 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56) = a2[7];
    _OWORD *v16 = v21;
    *(_OWORD *)(a1 + 40) = v22;
  }
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16) == 0xFF) {
    goto LABEL_4;
  }
  __int16 v5 = *(_WORD *)(a2 + 16);
  if ((_BYTE)v5 == 0xFF)
  {
    outlined destroy of AccessibilityText(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    goto LABEL_6;
  }
  __int16 v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  outlined consume of AccessibilityText.Storage(v6, v7, v4 & 1);
  *(unsigned char *)(a1 + 17) = HIBYTE(v5) & 1;
LABEL_6:
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a2 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else {
      outlined destroy of AnyAccessibilityValue(a1 + 24);
    }
  }
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityValueStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityValueStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityValueStorage()
{
  return &type metadata for CodableAccessibilityValueStorage;
}

void *type metadata accessor for CodableAccessibilityValueStorage.CodingKeys()
{
  return &unk_26FA73290;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityDisclosureValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E96D60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnyAccessibilityValue.Keys()
{
  return &unk_26FA63580;
}

void *type metadata accessor for AccessibilityProgressValue.CodingKeys()
{
  return &unk_26FA6DF20;
}

void *type metadata accessor for AccessibilitySliderValue.CodingKeys()
{
  return &unk_26FA6A5C8;
}

void *type metadata accessor for AccessibilityStepperValue.CodingKeys()
{
  return &unk_26FA6C258;
}

void *type metadata accessor for AccessibilityToggleValue.CodingKeys()
{
  return &unk_26FA6A6D8;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityBoundedNumber.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E96EA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityBoundedNumber.CodingKeys()
{
  return &unk_26FA6DE08;
}

void *type metadata accessor for AccessibilityEmptyValue.CodingKeys()
{
  return &unk_26FA68350;
}

uint64_t getEnumTagSinglePayload for AnyAccessibilityValue.ConcreteBase(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AnyAccessibilityValue.ConcreteBase(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E97260);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t specialized AccessibilityBoundedNumber.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265626D756ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F427265776F6CLL && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F427265707075 && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656469727473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t type metadata accessor for AnyAccessibilityValue.ConcreteBase.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of AccessibilityNumeric?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (AnyAccessibilityValue?, AnyAccessibilityValue?)()
{
  if (!lazy cache variable for type metadata for (AnyAccessibilityValue?, AnyAccessibilityValue?))
  {
    type metadata accessor for AnyAccessibilityValue?(255, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyAccessibilityValue?, AnyAccessibilityValue?));
    }
  }
}

uint64_t sub_245E97E30()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for AccessibilityNumber.AccessibilityNumberArchiveError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245E97F04);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in AnyAccessibilityValue.ConcreteBase<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t BloomFilter.value.getter()
{
  return *(void *)v0;
}

uint64_t BloomFilter.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*BloomFilter.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.init()()
{
  *uint64_t v0 = 0;
  return result;
}

uint64_t BloomFilter.init<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = dispatch thunk of Hashable.hashValue.getter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = (1 << (v6 >> 4)) | (1 << (v6 >> 10)) | (1 << SBYTE2(v6));
  return result;
}

unint64_t BloomFilter.init(type:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (1 << (result >> 4)) | (1 << (result >> 10)) | (1 << SBYTE2(result));
  return result;
}

Swift::Void __swiftcall BloomFilter.formUnion(_:)(SwiftUI::BloomFilter a1)
{
  *v1 |= *(void *)a1.value;
}

SwiftUI::BloomFilter __swiftcall BloomFilter.union(_:)(SwiftUI::BloomFilter result)
{
  *uint64_t v1 = *v2 | *(void *)result.value;
  return result;
}

Swift::Bool __swiftcall BloomFilter.mayContain(_:)(SwiftUI::BloomFilter a1)
{
  return (*(void *)a1.value & ~*v1) == 0;
}

BOOL BloomFilter.isEmpty.getter()
{
  return *v0 == 0;
}

BOOL static BloomFilter.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t Interpolatable<>.interpolatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v16[3] = a3;
  swift_getAssociatedTypeWitness();
  v16[1] = swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for InterpolatedVectorElement();
  uint64_t v5 = type metadata accessor for ArrayWith2Inline();
  MEMORY[0x270FA5388](v5 - 8);
  unsigned int v7 = (char *)v16 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_checkMetadataState();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, void, uint64_t))(v8 + 16))(v11, v16[2], a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14, v11, a1);
  *(void *)(v14 + *(int *)(type metadata accessor for InterpolatedVectorElement() + 44)) = 0x3FF0000000000000;
  _finalizeUninitializedArray<A>(_:)();
  ArrayWith2Inline.init(arrayLiteral:)();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 48))(v7, v12, a2);
}

uint64_t type metadata accessor for InterpolatedVectorElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path setter for Interpolatable<>.interpolatableData : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void (**)(void, void))(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return Interpolatable<>.interpolatableData.setter((uint64_t)v11, v5, v6, v7);
}

uint64_t Interpolatable<>.interpolatableData.setter(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v71 = a3;
  uint64_t v63 = a2;
  uint64_t v67 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for InterpolatedVectorElement();
  uint64_t v7 = type metadata accessor for ArrayWith2Inline();
  uint64_t WitnessTable = (void (*)(char *))swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for LazyFilterSequence();
  uint64_t v75 = swift_getWitnessTable();
  v79[1] = v75;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v9 = v8;
  uint64_t v78 = v8;
  uint64_t v10 = type metadata accessor for DefaultIndices();
  uint64_t v59 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unsigned __int8 v57 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v58 = (char *)v55 - v13;
  v55[1] = swift_getWitnessTable();
  uint64_t v62 = type metadata accessor for IndexingIterator();
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v56 = (char *)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  long long v72 = (char *)v55 - v16;
  uint64_t v73 = v6;
  uint64_t v74 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v55 - v18;
  uint64_t v70 = type metadata accessor for LazySequence();
  MEMORY[0x270FA5388](v70);
  uint64_t v66 = (char *)v55 - v20;
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v22);
  char v24 = (char *)v55 - v23;
  uint64_t v77 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v55 - v26;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v5 + 56);
  uint64_t v76 = swift_checkMetadataState();
  v28(v76, v5);
  uint64_t v29 = v63;
  MEMORY[0x24C522BD0](v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v7);
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v71;
  v30[2] = v29;
  _OWORD v30[3] = v31;
  v30[4] = v5;
  swift_getWitnessTable();
  uint64_t v32 = v78;
  LazySequenceProtocol.filter(_:)();
  swift_release();
  uint64_t v33 = Collection.count.getter();
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(v29 - 8);
    int v36 = *(void (**)(void, void))(v35 + 8);
    uint64_t v37 = v60;
    uint64_t v70 = v35 + 8;
    uint64_t v71 = v36;
    v36(v60, v29);
    if (v34 == 1)
    {
      v79[0] = 0;
      MEMORY[0x24C5241E0](v79, v32, v75);
      (*(void (**)(uint64_t))(*(void *)(v76 - 8) + 8))(v67);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v27, v32);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v19, v29);
    }
    else
    {
      v79[0] = 0;
      uint64_t v39 = v75;
      MEMORY[0x24C5241E0](v79, v32, v75);
      uint64_t v65 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
      uint64_t v66 = (char *)(v35 + 32);
      v65(v37, v19, v29);
      v79[0] = 0;
      MEMORY[0x24C5241E0](v79, v32, v39);
      double v40 = *(double *)&v19[*(int *)(v73 + 44)];
      __int16 v41 = *(void (**)(char *))(v74 + 8);
      v74 += 8;
      uint64_t WitnessTable = v41;
      v41(v19);
      Collection<>.indices.getter();
      __int16 v42 = v58;
      Collection.dropFirst(_:)();
      uint64_t v43 = v59;
      __int16 v44 = v56;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v42, v10);
      MEMORY[0x24C522510](v79, v10);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v10);
      uint64_t v45 = v62;
      *(void *)&v44[*(int *)(v62 + 36)] = v79[0];
      __int16 v46 = v72;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v72, v44, v45);
      __int16 v47 = &v46[*(int *)(v45 + 36)];
      uint64_t v48 = *(void *)v47;
      DefaultIndices.endIndex.getter();
      uint64_t v50 = v76;
      uint64_t v49 = v77;
      if (v48 != v79[0])
      {
        uint64_t v64 = AssociatedConformanceWitness + 8;
        do
        {
          DefaultIndices.formIndex(after:)();
          v79[0] = v48;
          uint64_t v51 = v78;
          uint64_t v52 = v75;
          MEMORY[0x24C5241E0](v79, v78, v75);
          double v53 = *(double *)&v19[*(int *)(v73 + 44)];
          WitnessTable(v19);
          double v40 = v40 + v53;
          double v54 = v53 / v40;
          if (v54 < 1.0)
          {
            v79[0] = v48;
            MEMORY[0x24C5241E0](v79, v51, v52);
            (*(void (**)(char *, uint64_t, double))(AssociatedConformanceWitness + 8))(v19, v29, v54);
            v71(v19, v29);
          }
          else
          {
            v71(v37, v29);
            v79[0] = v48;
            MEMORY[0x24C5241E0](v79, v51, v52);
            v65(v37, v19, v29);
          }
          __int16 v46 = v72;
          uint64_t v50 = v76;
          uint64_t v49 = v77;
          uint64_t v48 = *(void *)v47;
          DefaultIndices.endIndex.getter();
        }
        while (v48 != v79[0]);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v67, v50);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v62);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v27, v78);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)(v76 - 8) + 8))(v67);
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v27, v32);
  }
}

uint64_t InterpolatedVectorElement.init(key:amount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for InterpolatedVectorElement();
  *(double *)(a3 + *(int *)(result + 44)) = a4;
  return result;
}

BOOL closure #1 in Interpolatable<>.interpolatableData.setter(uint64_t a1)
{
  return *(double *)(a1 + *(int *)(type metadata accessor for InterpolatedVectorElement() + 44)) > 0.0;
}

void (*Interpolatable<>.interpolatableData.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  _OWORD v9[2] = a4;
  void v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  void v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  Interpolatable<>.interpolatableData.getter(a2, a4, (uint64_t)v13);
  return Interpolatable<>.interpolatableData.modify;
}

void Interpolatable<>.interpolatableData.modify(uint64_t **a1, char a2)
{
  BOOL v2 = *a1;
  int v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v9 = *v2;
    uint64_t v8 = (void (*)(void, void))v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    Interpolatable<>.interpolatableData.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Interpolatable<>.interpolatableData.setter((*a1)[7], *v2, (void (*)(void, void))v2[1], v2[2]);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t static InterpolatedVector.zero.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

Swift::Void __swiftcall InterpolatedVector.scale(by:)(Swift::Double by)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for InterpolatedVectorElement();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for ArrayWith2Inline();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 56))(v6, v5, v13);
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  unint64_t v17 = v25;
  int64_t v16 = v26;
  if (v25 != v26)
  {
    if (v26 < v25)
    {
      __break(1u);
    }
    else if (v25 < v26)
    {
      uint64_t v24 = v5;
      uint64_t v22 = *(uint64_t (**)(int64_t *, uint64_t, uint64_t))(v5 + 72);
      uint64_t v23 = v5 + 72;
      do
      {
        uint64_t v18 = v16;
        uint64_t v19 = v4;
        uint64_t v20 = (void (*)(int64_t *, void))v22(&v25, v6, v24);
        ArrayWith2Inline.subscript.getter(v17, v11, (uint64_t)v10);
        *(double *)&v10[*(int *)(v8 + 44)] = *(double *)&v10[*(int *)(v8 + 44)] * by;
        ArrayWith2Inline.subscript.setter(v10, v17, v11);
        v20(&v25, 0);
        int64_t v16 = v18;
        uint64_t v4 = v19;
        ++v17;
      }
      while (v18 != v17);
      return;
    }
    __break(1u);
  }
}

double InterpolatedVector.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for InterpolatedVectorElement();
  uint64_t v4 = type metadata accessor for ArrayWith2Inline();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = &v10[-v7];
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(a1, a2, v6);
  uint64_t v13 = 0;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  swift_getWitnessTable();
  Sequence.reduce<A>(_:_:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  return v14;
}

double closure #1 in InterpolatedVector.magnitudeSquared.getter@<D0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  double v5 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for InterpolatedVectorElement();
  double result = v5 + *(double *)(a2 + *(int *)(v6 + 44)) * *(double *)(a2 + *(int *)(v6 + 44));
  *a3 = result;
  return result;
}

BOOL closure #1 in InterpolatedVector.merge(_:factor:)(uint64_t a1, double a2)
{
  return fabs(*(double *)(a1 + *(int *)(type metadata accessor for InterpolatedVectorElement() + 44))) >= a2;
}

uint64_t static InterpolatedVector.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v59 = AssociatedConformanceWitness;
  uint64_t v9 = type metadata accessor for InterpolatedVectorElement();
  uint64_t v58 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v52 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v48 - v15;
  uint64_t v64 = v16;
  uint64_t v17 = type metadata accessor for ArrayWith2Inline();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v50 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(a4 + 56);
  uint64_t v57 = a2;
  uint64_t v65 = a4;
  int64_t v25 = v24;
  ((void (*)(uint64_t, uint64_t, double))v24)(a3, a4, v21);
  swift_getWitnessTable();
  LOBYTE(a2) = Collection.isEmpty.getter();
  int64_t v26 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  uint64_t result = v26(v23, v17);
  if ((a2 & 1) == 0)
  {
    v25(a3, v65);
    char v28 = Collection.isEmpty.getter();
    v26(v23, v17);
    if (v28)
    {
      uint64_t v29 = *(void *)(a3 - 8);
      uint64_t v30 = v63;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v63, a3);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v57, a3);
    }
    v25(a3, v65);
    uint64_t v60 = Collection.count.getter();
    v26(v23, v17);
    uint64_t v61 = v25;
    uint64_t v62 = a4 + 56;
    v25(a3, v65);
    uint64_t v31 = Collection.count.getter();
    uint64_t result = v26(v23, v17);
    if (v31 < 0) {
      goto LABEL_24;
    }
    if (v31)
    {
      uint64_t v32 = v26;
      uint64_t v33 = 0;
      uint64_t v34 = (void (**)(char *, uint64_t))(v58 + 8);
      uint64_t v49 = (void (**)(char *, char *, uint64_t))(v58 + 16);
      uint64_t v53 = v65 + 72;
      uint64_t v54 = (v58 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v55 = v31;
      while (v33 != v31)
      {
        v61(a3, v65);
        ArrayWith2Inline.subscript.getter(v33, v17, (uint64_t)v66);
        uint64_t result = v32(v23, v17);
        if (v60 < 0) {
          goto LABEL_23;
        }
        uint64_t v58 = v33;
        uint64_t v39 = a3;
        if (v60)
        {
          unint64_t v40 = 0;
          double v41 = *(double *)&v66[*(int *)(v64 + 44)];
          while (1)
          {
            v61(v39, v65);
            ArrayWith2Inline.subscript.getter(v40, v17, (uint64_t)v13);
            v32(v23, v17);
            if (dispatch thunk of static Equatable.== infix(_:_:)()) {
              break;
            }
            ++v40;
            (*v34)(v13, v64);
            if (v60 == v40) {
              goto LABEL_7;
            }
          }
          uint64_t v42 = v64;
          uint64_t v43 = *(int *)(v64 + 44);
          double v44 = v41 + *(double *)&v13[v43];
          *(double *)&v13[v43] = v44;
          if (fabs(v44) >= 0.000000953674316)
          {
            (*v49)(v52, v13, v42);
            uint64_t v51 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v65 + 72))(v68, v39);
            ArrayWith2Inline.subscript.setter(v52, v40, v17);
            v51(v68, 0);
            uint64_t v37 = *v34;
            (*v34)(v13, v42);
          }
          else
          {
            unint64_t v67 = v40;
            uint64_t v51 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v65 + 72))(v68, v39);
            swift_getWitnessTable();
            uint64_t v45 = v52;
            RangeReplaceableCollection.remove(at:)();
            uint64_t v37 = *v34;
            (*v34)(v45, v42);
            v51(v68, 0);
            v37(v13, v42);
            --v60;
          }
          uint64_t v38 = v42;
          int v36 = v66;
        }
        else
        {
LABEL_7:
          uint64_t v35 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v65 + 72))(v68, v39);
          int v36 = v66;
          ArrayWith2Inline.append(_:)(v66, v17);
          v35(v68, 0);
          uint64_t v37 = *v34;
          uint64_t v38 = v64;
        }
        uint64_t v33 = v58 + 1;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v36, v38);
        uint64_t v31 = v55;
        a3 = v39;
        if (v33 == v55) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
LABEL_20:
    uint64_t v46 = v65;
    uint64_t v47 = ((uint64_t (*)(uint64_t, uint64_t))v61)(a3, v65);
    MEMORY[0x270FA5388](v47);
    *(&v48 - 4) = a3;
    *(&v48 - 3) = v46;
    *(&v48 - 2) = 0x3EB0000000000000;
    swift_getWitnessTable();
    RangeReplaceableCollection.filter(_:)();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 64))(v23, a3, v46);
  }
  return result;
}

uint64_t static InterpolatedVector.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a2;
  uint64_t v66 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v59 = AssociatedConformanceWitness;
  uint64_t v7 = type metadata accessor for InterpolatedVectorElement();
  uint64_t v58 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v53 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v49 - v10;
  MEMORY[0x270FA5388](v12);
  unint64_t v67 = (char *)v49 - v13;
  uint64_t v60 = v14;
  uint64_t v15 = type metadata accessor for ArrayWith2Inline();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v49[1] = (char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  double v21 = (char *)v49 - v20;
  uint64_t v23 = a4 + 56;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, double))(a4 + 56);
  uint64_t v68 = a3;
  uint64_t v51 = a4;
  v22(a3, a4, v19);
  swift_getWitnessTable();
  LOBYTE(AssociatedConformanceWitness) = Collection.isEmpty.getter();
  int64_t v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v24 = v16 + 8;
  int64_t v25 = v26;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v21, v15);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    ((void (*)(uint64_t, uint64_t))v22)(v68, v51);
    uint64_t v63 = Collection.count.getter();
    v25(v21, v15);
    uint64_t v64 = (void (*)(uint64_t, uint64_t))v22;
    uint64_t v65 = v23;
    ((void (*)(uint64_t, uint64_t))v22)(v68, v51);
    uint64_t v28 = Collection.count.getter();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v21, v15);
    if (v28 < 0)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    uint64_t v61 = v24;
    uint64_t v62 = (uint64_t (*)(char *, uint64_t))v25;
    uint64_t v29 = v51;
    uint64_t v30 = v60;
    if (v28)
    {
      uint64_t v31 = 0;
      uint64_t v32 = (void (**)(char *, uint64_t))(v58 + 8);
      uint64_t v50 = (void (**)(char *, char *, uint64_t))(v58 + 16);
      uint64_t v54 = v51 + 72;
      uint64_t v55 = (v58 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v56 = v28;
      while (v31 != v28)
      {
        v64(v68, v29);
        uint64_t v37 = v67;
        uint64_t v58 = v31;
        ArrayWith2Inline.subscript.getter(v31, v15, (uint64_t)v67);
        uint64_t result = v62(v21, v15);
        uint64_t v38 = *(int *)(v30 + 44);
        double v39 = *(double *)&v37[v38];
        *(double *)&v37[v38] = -v39;
        if (v63 < 0) {
          goto LABEL_21;
        }
        if (v63)
        {
          unint64_t v40 = 0;
          while (1)
          {
            v64(v68, v29);
            ArrayWith2Inline.subscript.getter(v40, v15, (uint64_t)v11);
            v62(v21, v15);
            if (dispatch thunk of static Equatable.== infix(_:_:)()) {
              break;
            }
            ++v40;
            (*v32)(v11, v60);
            if (v63 == v40) {
              goto LABEL_5;
            }
          }
          uint64_t v41 = v60;
          uint64_t v42 = *(int *)(v60 + 44);
          double v43 = *(double *)&v11[v42];
          *(double *)&v11[v42] = v43 - v39;
          if (vabdd_f64(v43, v39) >= 0.000000953674316)
          {
            uint64_t v46 = v53;
            (*v50)(v53, v11, v41);
            uint64_t v52 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v29 + 72))(v70, v68, v29);
            ArrayWith2Inline.subscript.setter(v46, v40, v15);
            v52(v70, 0);
            uint64_t v35 = *v32;
            (*v32)(v11, v41);
          }
          else
          {
            unint64_t v69 = v40;
            double v44 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v29 + 72))(v70, v68, v29);
            swift_getWitnessTable();
            uint64_t v45 = v53;
            RangeReplaceableCollection.remove(at:)();
            uint64_t v35 = *v32;
            (*v32)(v45, v41);
            v44(v70, 0);
            v35(v11, v41);
            --v63;
          }
          uint64_t v36 = v41;
          uint64_t v34 = v67;
        }
        else
        {
LABEL_5:
          uint64_t v33 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v29 + 72))(v70, v68, v29);
          uint64_t v34 = v67;
          ArrayWith2Inline.append(_:)(v67, v15);
          v33(v70, 0);
          uint64_t v35 = *v32;
          uint64_t v36 = v60;
        }
        uint64_t v31 = v58 + 1;
        uint64_t v30 = v36;
        uint64_t result = ((uint64_t (*)(char *))v35)(v34);
        uint64_t v28 = v56;
        if (v31 == v56) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v47 = v68;
    uint64_t v48 = ((uint64_t (*)(uint64_t, uint64_t))v64)(v68, v29);
    MEMORY[0x270FA5388](v48);
    v49[-4] = v47;
    v49[-3] = v29;
    v49[-2] = 0x3EB0000000000000;
    swift_getWitnessTable();
    RangeReplaceableCollection.filter(_:)();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 64))(v21, v47, v29);
  }
  return result;
}

uint64_t static InterpolatedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static InterpolatedVector.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF30], a5);
}

uint64_t static InterpolatedVector.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static InterpolatedVector.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF38], a5);
}

uint64_t static InterpolatedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void)@<X4>, uint64_t a6@<X8>)
{
  return a5(a6, a2, a3, *(void *)(*(void *)(a4 + 8) + 8));
}

uint64_t InterpolatedVectorElement.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t InterpolatedVectorElement.key.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*InterpolatedVectorElement.key.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double InterpolatedVectorElement.amount.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 44));
}

uint64_t InterpolatedVectorElement.amount.setter(uint64_t result, double a2)
{
  *(double *)(v2 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t (*InterpolatedVectorElement.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static InterpolatedVectorElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for InterpolatedVectorElement();
  return *(double *)(a1 + *(int *)(v4 + 44)) == *(double *)(a2 + *(int *)(v4 + 44));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InterpolatedVectorElement<A>(uint64_t a1, uint64_t a2)
{
  return static InterpolatedVectorElement.== infix(_:_:)(a1, a2);
}

uint64_t sub_245E9AA7C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Interpolatable<>.interpolatableData.setter(uint64_t a1)
{
  return closure #1 in Interpolatable<>.interpolatableData.setter(a1);
}

double partial apply for closure #1 in InterpolatedVector.magnitudeSquared.getter@<D0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return closure #1 in InterpolatedVector.magnitudeSquared.getter(a1, a2, a3);
}

BOOL partial apply for closure #1 in InterpolatedVector.merge(_:factor:)(uint64_t a1)
{
  return closure #1 in InterpolatedVector.merge(_:factor:)(a1, *(double *)(v1 + 32));
}

uint64_t sub_245E9AAD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Interpolatable<>.interpolatableData.getter(*(void *)(a2 + a1 - 24), *(void *)(a2 + a1 - 8), a3);
}

uint64_t sub_245E9AB0C()
{
  return 24;
}

__n128 sub_245E9AB18(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of Interpolatable.interpolate(with:by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of InterpolatedVector.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InterpolatedVector.init(elements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of InterpolatedVector.elements.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t type metadata completion function for InterpolatedVectorElement()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for InterpolatedVectorElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for InterpolatedVectorElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedVectorElement(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E9AE4CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for InterpolatedVectorElement(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245E9B00CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

BOOL closure #1 in InterpolatedVector.merge(_:factor:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in InterpolatedVector.merge(_:factor:)(a1);
}

uint64_t static AppearsActiveKey.defaultValue.getter()
{
  return 1;
}

uint64_t EnvironmentValues.appearsActive.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.appearsActive.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.appearsActive.modify;
}

void EnvironmentValues.appearsActive.modify(uint64_t a1, char a2)
{
}

uint64_t static WindowEnvironmentKeys.AppearsFocused.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.AppearsMain.defaultValue.getter()
{
  return 0;
}

uint64_t static WindowEnvironmentKeys.AppearsActive.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.IsFocused.defaultValue.getter()
{
  return 1;
}

uint64_t static WindowEnvironmentKeys.IsMain.defaultValue.getter()
{
  return 1;
}

uint64_t EnvironmentValues.windowAppearsFocused.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsFocused.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsFocused.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsFocused.modify;
}

void EnvironmentValues.windowAppearsFocused.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.windowAppearsMain.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsMain.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsMain.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsMain.modify;
}

void EnvironmentValues.windowAppearsMain.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.windowAppearsActive.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowAppearsActive.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowAppearsActive.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowAppearsActive.modify;
}

void EnvironmentValues.windowAppearsActive.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.windowIsFocused.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.windowIsFocused.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.windowIsFocused.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowIsFocused.modify;
}

void EnvironmentValues.windowIsFocused.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.windowIsMain.getter()
{
  return EnvironmentValues.appearsActive.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.appearsActive : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    char v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7 & 1;
  return result;
}

uint64_t EnvironmentValues.windowIsMain.setter(uint64_t a1)
{
  return EnvironmentValues.appearsActive.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.appearsActive.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.windowIsMain.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.windowIsMain.modify;
}

void EnvironmentValues.windowIsMain.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.appearsActive.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void ***)a1;
  uint64_t v8 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = v7 + 1;
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t sub_245E9BB24@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BB64(unsigned __int8 *a1)
{
  return EnvironmentValues.appearsActive.setter(*a1);
}

uint64_t sub_245E9BB8C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BBCC(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsFocused.setter(*a1);
}

uint64_t sub_245E9BBF4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BC34(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsMain.setter(*a1);
}

uint64_t sub_245E9BC5C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BC9C(unsigned __int8 *a1)
{
  return EnvironmentValues.windowAppearsActive.setter(*a1);
}

uint64_t sub_245E9BCC4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BD04(unsigned __int8 *a1)
{
  return EnvironmentValues.windowIsFocused.setter(*a1);
}

uint64_t sub_245E9BD2C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.appearsActive : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245E9BD6C(unsigned __int8 *a1)
{
  return EnvironmentValues.windowIsMain.setter(*a1);
}

ValueMetadata *type metadata accessor for AppearsActiveKey()
{
  return &type metadata for AppearsActiveKey;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys()
{
  return &type metadata for WindowEnvironmentKeys;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsFocused()
{
  return &type metadata for WindowEnvironmentKeys.AppearsFocused;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsMain()
{
  return &type metadata for WindowEnvironmentKeys.AppearsMain;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.AppearsActive()
{
  return &type metadata for WindowEnvironmentKeys.AppearsActive;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.IsFocused()
{
  return &type metadata for WindowEnvironmentKeys.IsFocused;
}

ValueMetadata *type metadata accessor for WindowEnvironmentKeys.IsMain()
{
  return &type metadata for WindowEnvironmentKeys.IsMain;
}

uint64_t outlined destroy of NonGestureEventType?(uint64_t a1)
{
  type metadata accessor for NonGestureEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NonGestureEventType?()
{
  if (!lazy cache variable for type metadata for NonGestureEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for NonGestureEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NonGestureEventType?);
    }
  }
}

BOOL static AlignmentKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t AlignmentKey.id.getter(unint64_t a1)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v2 = static AlignmentKey._typeCache;
  uint64_t v3 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  uint64_t v4 = v2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  uint64_t result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
  }
  else if (a1 >> 1 <= *(void *)(v4 + 16))
  {
    uint64_t v6 = *(void *)(v4 + 16 * (a1 >> 1) + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t AlignmentKey.axis.getter(char a1)
{
  return a1 & 1;
}

uint64_t static AlignmentID.combineExplicit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v14 = (char *)v18 - v13;
  uint64_t v21 = 0;
  char v22 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = 0;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v20) {
      break;
    }
    if ((v19 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t *, void, uint64_t, double))(a4 + 16))(v15, &v21, v18[0], a4, *(double *)&v18[2]);
      if (__OFADD__(v15++, 1))
      {
        __break(1u);
        break;
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  return v21;
}

unint64_t AlignmentKey.init(id:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v7 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in AlignmentKey.init(id:axis:)(v7, a1, a2, &v9);
  os_unfair_lock_unlock(v6);
  swift_release();
  swift_release();
  return (a3 & 1 | (unint64_t)(2 * v9)) + 2;
}

uint64_t HorizontalAlignment.combineExplicit<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v6 = static AlignmentKey._typeCache;
  uint64_t v7 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v7);
  uint64_t v8 = v6[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v7);
  uint64_t result = swift_release();
  if (a2 < 2)
  {
    __break(1u);
  }
  else if (a2 >> 1 <= *(void *)(v8 + 16))
  {
    uint64_t v10 = v8 + 16 * (a2 >> 1);
    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = *(void *)(v10 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return static AlignmentID.combineExplicit<A>(_:)(a1, v11, a3, v12);
  }
  __break(1u);
  return result;
}

uint64_t Alignment.horizontal.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Alignment.horizontal.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Alignment.vertical.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Alignment.vertical.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Alignment.vertical.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static VerticalAlignment._firstTextLineCenter.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for _firstTextLineCenter, (uint64_t)&static VerticalAlignment._firstTextLineCenter);
}

uint64_t one-time initialization function for formDetailLeading()
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v0 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  uint64_t v1 = (void *)((char *)static AlignmentKey._typeCache + 24);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in AlignmentKey.init(id:axis:)(v1, (uint64_t)&unk_26FA8FD90, (uint64_t)&protocol witness table for HorizontalAlignment.FormDetailLeading, &v3);
  os_unfair_lock_unlock(v0);
  swift_release();
  uint64_t result = swift_release();
  static HorizontalAlignment.formDetailLeading = 2 * v3 + 2;
  return result;
}

uint64_t static HorizontalAlignment.formDetailLeading.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for formDetailLeading, (uint64_t)&static HorizontalAlignment.formDetailLeading);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for leading, (unint64_t *)&static HorizontalAlignment.leading);
}

double protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance HorizontalAlignment.FormDetailLeading(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_4:
    *(double *)a2 = a3;
  }
  double result = (*(double *)a2 * (double)a1 + a3) / ((double)a1 + 1.0);
  *(double *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingListSeparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for leadingText, (unint64_t *)&static HorizontalAlignment.leadingText);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.TrailingListSeparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for trailing, (unint64_t *)&static HorizontalAlignment.trailing);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.FirstTextLineCenter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(a1, a2, a3, &one-time initialization token for center, (unint64_t *)&static VerticalAlignment.center);
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.LeadingText(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  if (*a4 != -1) {
    swift_once();
  }
  return ViewDimensions.subscript.getter(*a5);
}

SwiftUI::AlignmentKey __swiftcall AlignmentKey.init()()
{
  return 0;
}

BOOL static AlignmentKey.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

void AlignmentKey.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int AlignmentKey.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AlignmentKey(void *a1, void *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AlignmentKey(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AlignmentKey(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AlignmentKey(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t specialized AlignmentGuide.viewDebugValue.getter@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v4 = static AlignmentKey._typeCache;
  char v5 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  uint64_t v6 = v4[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v5);
  uint64_t result = swift_release();
  if (a1 < 2)
  {
    __break(1u);
  }
  else if (a1 >> 1 <= *(void *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _typeName(_:qualified:)();
    a2[3] = MEMORY[0x263F8D310];
    *a2 = result;
    a2[1] = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t AlignmentGuide.viewDebugValue.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3 = (*(uint64_t (**)(void))(a1 + 16))();
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v4 = static AlignmentKey._typeCache;
  char v5 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  uint64_t v6 = v4[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v5);
  uint64_t result = swift_release();
  if (v3 < 2)
  {
    __break(1u);
  }
  else if (v3 >> 1 <= *(void *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _typeName(_:qualified:)();
    a2[3] = MEMORY[0x263F8D310];
    *a2 = result;
    a2[1] = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomViewDebugValueConvertible.viewDebugValue.getter in conformance VerticalAlignment@<X0>(uint64_t *a1@<X8>)
{
  return specialized AlignmentGuide.viewDebugValue.getter(*v1, a1);
}

uint64_t Alignment.codingProxy.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

SwiftUI::CodableAlignment __swiftcall CodableAlignment.init(_:)(SwiftUI::CodableAlignment result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t CodableAlignment.base.getter()
{
  return *(void *)v0;
}

uint64_t CodableAlignment.base.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CodableAlignment.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void protocol witness for Hashable.hash(into:) in conformance CodableAlignment.VerticalCodingValue()
{
  Hasher._combine(_:)(*v0 + 1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAlignment.VerticalCodingValue@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CodableAlignment.VerticalCodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAlignment.VerticalCodingValue(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment.VerticalCodingValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment.VerticalCodingValue()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAlignment.VerticalCodingValue()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAlignment.VerticalCodingValue()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAlignment.HorizontalCodingValue@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized CodableAlignment.HorizontalCodingValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment.HorizontalCodingValue()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment.HorizontalCodingValue()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableAlignment.encode(to:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if (one-time initialization token for top != -1) {
    swift_once();
  }
  if (static VerticalAlignment.top != v4)
  {
    if (one-time initialization token for bottom != -1) {
      swift_once();
    }
    if (static VerticalAlignment.bottom != v4)
    {
      if (one-time initialization token for firstTextBaseline != -1) {
        swift_once();
      }
      if (static VerticalAlignment.firstTextBaseline != v4)
      {
        if (one-time initialization token for lastTextBaseline != -1) {
          swift_once();
        }
        if (static VerticalAlignment.lastTextBaseline != v4
          && one-time initialization token for _firstTextLineCenter != -1)
        {
          swift_once();
        }
      }
    }
  }
  if (one-time initialization token for leading != -1) {
    swift_once();
  }
  if (static HorizontalAlignment.leading != v3)
  {
    if (one-time initialization token for trailing != -1) {
      swift_once();
    }
    if (static HorizontalAlignment.trailing != v3)
    {
      if (one-time initialization token for leadingText != -1) {
        swift_once();
      }
      if (static HorizontalAlignment.leadingText != v3)
      {
        if (one-time initialization token for formDetailLeading != -1) {
          swift_once();
        }
        if (static HorizontalAlignment.formDetailLeading != v3)
        {
          if (one-time initialization token for listRowSeparatorLeading != -1) {
            swift_once();
          }
          if (static HorizontalAlignment.listRowSeparatorLeading != v3
            && one-time initialization token for listRowSeparatorTrailing != -1)
          {
            swift_once();
          }
        }
      }
    }
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t CodableAlignment.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
    lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v20;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
    lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v7 = v20;
    switch(v5)
    {
      case 1:
        if (one-time initialization token for bottom != -1)
        {
          uint64_t v13 = v20;
          swift_once();
          uint64_t v7 = v13;
        }
        uint64_t v8 = &static VerticalAlignment.bottom;
        break;
      case 2:
        if (one-time initialization token for center != -1)
        {
          uint64_t v14 = v20;
          swift_once();
          uint64_t v7 = v14;
        }
        uint64_t v8 = &static VerticalAlignment.center;
        break;
      case 3:
        if (one-time initialization token for firstTextBaseline != -1)
        {
          uint64_t v15 = v20;
          swift_once();
          uint64_t v7 = v15;
        }
        uint64_t v8 = &static VerticalAlignment.firstTextBaseline;
        break;
      case 4:
        if (one-time initialization token for lastTextBaseline != -1)
        {
          uint64_t v16 = v20;
          swift_once();
          uint64_t v7 = v16;
        }
        uint64_t v8 = &static VerticalAlignment.lastTextBaseline;
        break;
      case 5:
        if (one-time initialization token for _firstTextLineCenter != -1)
        {
          uint64_t v17 = v20;
          swift_once();
          uint64_t v7 = v17;
        }
        uint64_t v8 = &static VerticalAlignment._firstTextLineCenter;
        break;
      default:
        if (one-time initialization token for top != -1)
        {
          uint64_t v12 = v20;
          swift_once();
          uint64_t v7 = v12;
        }
        uint64_t v8 = &static VerticalAlignment.top;
        break;
    }
    uint64_t v9 = *v8;
    switch(v7)
    {
      case 1:
        if (one-time initialization token for trailing != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.trailing;
        break;
      case 2:
        if (one-time initialization token for center != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.center;
        break;
      case 3:
        if (one-time initialization token for leadingText != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.leadingText;
        break;
      case 4:
        if (one-time initialization token for formDetailLeading != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.formDetailLeading;
        break;
      case 5:
        if (one-time initialization token for listRowSeparatorLeading != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.listRowSeparatorLeading;
        break;
      case 6:
        if (one-time initialization token for listRowSeparatorTrailing != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.listRowSeparatorTrailing;
        break;
      default:
        if (one-time initialization token for leading != -1) {
          swift_once();
        }
        uint64_t v10 = &static HorizontalAlignment.leading;
        break;
    }
    uint64_t v11 = *v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *a2 = v11;
    a2[1] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAlignment@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodableAlignment.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAlignment(void *a1)
{
  return CodableAlignment.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.VerticalCodingValue and conformance CodableAlignment.VerticalCodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue;
  if (!lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment.HorizontalCodingValue and conformance CodableAlignment.HorizontalCodingValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AlignmentKey and conformance AlignmentKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey;
  if (!lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentKey and conformance AlignmentKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment;
  if (!lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAlignment and conformance CodableAlignment);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableAlignment(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
  unint64_t result = lazy protocol witness table accessor for type CodableAlignment and conformance CodableAlignment();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t dispatch thunk of static AlignmentID.defaultValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static AlignmentID._combineExplicit(childValue:_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AlignmentGuide.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for CodableAlignment()
{
  return &type metadata for CodableAlignment;
}

unsigned char *storeEnumTagSinglePayload for CodableAlignment.HorizontalCodingValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E9D910);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAlignment.HorizontalCodingValue()
{
  return &unk_26FA8FCA0;
}

uint64_t getEnumTagSinglePayload for CodableAlignment.VerticalCodingValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CodableAlignment.VerticalCodingValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E9DAA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodableAlignment.VerticalCodingValue()
{
  return &unk_26FA8FD30;
}

uint64_t specialized CodableAlignment.VerticalCodingValue.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 7) {
    return 6;
  }
  else {
    return (0x5040302010006uLL >> (8 * a1));
  }
}

uint64_t specialized CodableAlignment.HorizontalCodingValue.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 8) {
    return 7;
  }
  else {
    return (0x605040302010007uLL >> (8 * a1));
  }
}